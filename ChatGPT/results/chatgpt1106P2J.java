import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; boolean [ ] primeTable = sieveOfErastosthenes ( 13 * ( int ) Math . pow ( 10 , 5 ) ) ; while ( true ) { int k = scanner . nextInt ( ) ; if ( k == 0 ) { break ; } if ( primeTable [ k ] ) { System . out . println ( 0 ) ; } else { int i = k ; while ( ! primeTable [ i ] ) { i ++ ; } int j = i - 1 ; while ( ! primeTable [ j ] ) { j -- ; } System . out . println ( i - j ) ; } } } public static boolean [ ] sieveOfErastosthenes ( int num ) { boolean [ ] inputList = new boolean [ num ] ; for ( int i = 0 ; i < num ; i ++ ) { if ( i % 2 == 0 || i % 3 == 0 || i % 5 == 0 ) { inputList [ i ] = false ; } else { inputList [ i ] = true ; } } inputList [ 0 ] = inputList [ 1 ] = false ; inputList [ 2 ] = inputList [ 3 ] = inputList [ 5 ] = true ; double sqrt = Math . sqrt ( num ) ; for ( int serial = 3 ; serial < num ; serial += 2 ) { if ( serial >= sqrt ) { return inputList ; } for ( int s = serial * serial ; s < num ; s += serial ) { inputList [ s ] = false ; } } return inputList ; } }
public class Main { static final int MAX_CHAR = 26 ; public static void main ( String [ ] args ) { String str1 = " malayalam " ; System . out . println ( findPalindromicString ( str1 ) ) ; } public static void countFreq ( String str1 , int [ ] freq , int len1 ) { for ( int i = 0 ; i < len1 ; i ++ ) { freq [ str1 . charAt ( i ) - ' a ' ] += 1 ; } } public static boolean canMakePalindrome ( int [ ] freq , int len1 ) { int count_odd = 0 ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( freq [ i ] % 2 != 0 ) { count_odd += 1 ; } } if ( len1 % 2 == 0 ) { if ( count_odd > 0 ) { return false ; } else { return true ; } } if ( count_odd != 1 ) { return false ; } return true ; } public static String findOddAndRemoveItsFreq ( int [ ] freq ) { String odd_str = " " ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( freq [ i ] % 2 != 0 ) { freq [ i ] -= 1 ; odd_str += ( char ) ( i + ' a ' ) ; return odd_str ; } } return odd_str ; } public static String findPalindromicString ( String str1 ) { int len1 = str1 . length ( ) ; int [ ] freq = new int [ MAX_CHAR ] ; countFreq ( str1 , freq , len1 ) ; if ( ! canMakePalindrome ( freq , len1 ) ) { return " No ▁ Palindromic ▁ String " ; } String odd_str = findOddAndRemoveItsFreq ( freq ) ; String front_str = " " ; String rear_str = " " ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { String temp = " " ; if ( freq [ i ] != 0 ) { char ch = ( char ) ( i + ' a ' ) ; for ( int j = 1 ; j <= freq [ i ] / 2 ; j ++ ) { temp += ch ; } front_str += temp ; rear_str = temp + rear_str ; } } return front_str +
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int q = scanner . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int [ ] x_y = new int [ 4 ] ; for ( int j = 0 ; j < 4 ; j ++ ) { x_y [ j ] = scanner . nextInt ( ) ; } double [ ] p0 = { x_y [ 0 ] , x_y [ 1 ] } ; double [ ] p1 = { x_y [ 2 ] , x_y [ 3 ] } ; double [ ] p2 = { x_y [ 4 ] , x_y [ 5 ] } ; double [ ] p3 = { x_y [ 6 ] , x_y [ 7 ] } ; System . out . printf ( " % .10f \n " , distance ( p0 , p1 , p2 , p3 ) ) ; } } public static double cross ( double [ ] a , double [ ] b ) { return a [ 0 ] * b [ 1 ] - a [ 1 ] * b [ 0 ] ; } public static double dot ( double [ ] a , double [ ] b ) { return a [ 0 ] * b [ 0 ] + a [ 1 ] * b [ 1 ] ; } public static double norm2 ( double [ ] a , double [ ] b ) { return Math . pow ( b [ 0 ] - a [ 0 ] , 2 ) + Math . pow ( b [ 1 ] - a [ 1 ] , 2 ) ; } public static boolean isIntersect ( double [ ] p0 , double [ ] p1 , double [ ] p2 , double [ ] p3 ) { double ta = cross ( new double [ ] { p1 [ 0 ] - p0 [ 0 ] , p1 [ 1 ] - p0 [ 1 ] } , new double [ ] { p2 [ 0 ] - p0 [ 0 ] , p2 [ 1 ] - p0 [ 1 ] } ) ; double tb = cross ( new double [ ] { p1 [ 0 ] - p0 [ 0 ] , p1 [ 1 ] - p0 [ 1 ] } , new double [ ] { p3 [ 0 ] - p0 [ 0 ] , p3 [ 1 ] - p0 [ 1 ] } ) ; double tc = cross ( new double [ ] { p3 [ 0 ] - p2 [ 0 ] , p3 [ 1 ] - p2 [ 1 ] } , new double [ ] { p0 [ 0 ] - p2 [ 0 ] , p0 [ 1 ] - p2 [ 1 ] } ) ; double td = cross ( new double [ ] { p3 [ 0 ]
public class Main { public static void main ( String [ ] args ) { System . out . println ( count9s ( "01809" ) ) ; System . out . println ( count9s ( "1809" ) ) ; System . out . println ( count9s ( "4189" ) ) ; } public static int count9s ( String number ) { int n = number . length ( ) ; int [ ] d = new int [ 9 ] ; for ( int i = 0 ; i < 9 ; i ++ ) { d [ i ] = 0 ; } d [ 0 ] = 1 ; int result = 0 ; int mod_sum = 0 ; int continuous_zero = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( number . charAt ( i ) - '0' == 0 ) { continuous_zero += 1 ; } else { continuous_zero = 0 ; } mod_sum += number . charAt ( i ) - '0' ; mod_sum %= 9 ; result += d [ mod_sum ] ; d [ mod_sum ] += 1 ; result -= continuous_zero ; } return result ; } }
public class Main { public static void main ( String [ ] args ) { int N = 3 ; int K = 3 ; System . out . println ( countWays ( N , K ) ) ; } public static int fastPow ( int N , int K ) { if ( K == 0 ) { return 1 ; } int temp = fastPow ( N , K / 2 ) ; if ( K % 2 == 0 ) { return temp * temp ; } else { return N * temp * temp ; } } public static int countWays ( int N , int K ) { return K * fastPow ( K - 1 , N - 1 ) ; } }
int [ ] NUM = { 0b0111111 , 0b0000110 , 0b1011011 , 0b1001111 , 0b1100110 , 0b1101101 , 0b1111101 , 0b0100111 , 0b1111111 , 0b1101111 } ; while ( true ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n == - 1 ) break ; int current = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int inputNum = scanner . nextInt ( ) ; int num = NUM [ inputNum ] ; System . out . println ( String . format ( " % 7s " , Integer . toBinaryString ( current ^ num ) ) . replace ( ' ▁ ' , '0' ) ) ; current = num ; } }
public class Main { static final int MAX = 10000 ; static List < Integer > arr = new ArrayList < > ( ) ; public static void SieveOfEratosthenes ( ) { boolean [ ] prime = new boolean [ MAX ] ; Arrays . fill ( prime , true ) ; int p = 2 ; while ( p * p < MAX ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < MAX ; i += p ) { prime [ i ] = false ; } } p ++ ; } for ( int i = 2 ; i < MAX ; i ++ ) { if ( prime [ i ] ) { arr . add ( i ) ; } } } public static boolean isEuclid ( int n ) { int product = 1 ; int i = 0 ; while ( product < n ) { product *= arr . get ( i ) ; if ( product + 1 == n ) { return true ; } i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isEuclid ( n ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } n = 42 ; if ( isEuclid ( n ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { static final int MAX = 100000 ; static boolean [ ] prime = new boolean [ MAX ] ; static List < Integer > arr = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isPrimorialPrime ( n ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static void SieveOfEratosthenes ( ) { Arrays . fill ( prime , true ) ; for ( int p = 2 ; p <= Math . sqrt ( MAX ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < MAX ; i += p ) { prime [ i ] = false ; } } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) { arr . add ( p ) ; } } } public static boolean isPrimorialPrime ( int n ) { if ( ! prime [ n ] ) { return false ; } int product = 1 ; int i = 0 ; while ( product < n ) { product *= arr . get ( i ) ; if ( product + 1 == n || product - 1 == n ) { return true ; } i ++ ; } return false ; } }
public class Main { public static void mul_table ( int N , int i ) { if ( i > 10 ) { return ; } System . out . println ( N + " ▁ * ▁ " + i + " ▁ = ▁ " + N * i ) ; mul_table ( N , i + 1 ) ; } public static void main ( String [ ] args ) { int N = 8 ; mul_table ( N , 1 ) ; } }
public static int closestNumber ( int n , int m ) { int q = n / m ; int n1 = m * q ; int n2 ; if ( n * m > 0 ) { n2 = m * ( q + 1 ) ; } else { n2 = m * ( q - 1 ) ; } if ( Math . abs ( n - n1 ) < Math . abs ( n - n2 ) ) { return n1 ; } return n2 ; } public static void main ( String [ ] args ) { int n = 13 , m = 4 ; System . out . println ( closestNumber ( n , m ) ) ; n = - 15 ; m = 6 ; System . out . println ( closestNumber ( n , m ) ) ; n = 0 ; m = 8 ; System . out . println ( closestNumber ( n , m ) ) ; n = 18 ; m = - 7 ; System . out . println ( closestNumber ( n , m ) ) ; }
public class Main { public static void main ( String [ ] args ) { int ang = 90 ; int n = 4 ; System . out . println ( solve ( ang , n ) ) ; } public static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) { return 0 ; } else if ( ( ang * n ) % 180 != 0 ) { return 0 ; } int ans = 1 ; int freq = ( ang * n ) / 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; } }
``` java public class Main { public static void main ( String [ ] args ) { String s = " fixprefixsuffix " ; longestSubstring ( s ) ; } public static int [ ] computeLPS ( String s ) { int n = s . length ( ) ; int [ ] lps = new int [ n ] ; int len = 0 ; lps [ 0 ] = 0 ; int i = 1 ; while ( i < n ) { if ( s . charAt ( i ) == s . charAt ( len ) ) { len ++ ; lps [ i ] = len ; i ++ ; } else { if ( len != 0 ) { len = lps [ len - 1 ] ; } else { lps [ i ] = 0 ; i ++ ; } } } return lps ; } public static void longestSubstring ( String s ) { int [ ] lps = computeLPS ( s ) ; int n = s . length ( ) ; if ( lps [ n - 1 ] == 0 ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( lps [ i ] == lps [ n - 1 ] ) { System . out . println ( s . substring ( 0 , lps [ i ] ) ) ; System . exit ( 0 ) ; } } if ( lps [ lps [ n - 1 ] - 1 ] == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( s . substring ( 0 , lps [ lps [ n - 1 ] - 1 ] ) ) ; } } } ```
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 4 , 5 , 1 , 2 } ; int n = arr . length ; checkIfSortRotated ( arr , n ) ; } public static void checkIfSortRotated ( int [ ] arr , int n ) { int minEle = Integer . MAX_VALUE ; int maxEle = Integer . MIN_VALUE ; int minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) { minEle = arr [ i ] ; minIndex = i ; } } int flag1 = 1 ; for ( int i = 1 ; i < minIndex ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag1 = 0 ; break ; } } int flag2 = 2 ; for ( int i = minIndex + 1 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag2 = 0 ; break ; } } if ( flag1 == 1 && flag2 == 2 && arr [ n - 1 ] < arr [ minIndex - 1 ] ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String [ ] a = input . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( a [ 0 ] ) ; int d = Integer . parseInt ( a [ 1 ] ) ; String [ ] array = input . nextLine ( ) . split ( " ▁ " ) ; int aVal = 0 ; int aIndex = 0 ; while ( aIndex < n ) { array [ aIndex ] = Integer . parseInt ( array [ aIndex ] ) ; aIndex ++ ; } aIndex = 0 ; int i = 0 ; while ( i < n - 1 ) { if ( array [ i ] >= array [ i + 1 ] ) { aVal += ( array [ i ] - array [ i + 1 ] ) / d + 1 ; array [ i + 1 ] += ( ( array [ i ] - array [ i + 1 ] ) / d + 1 ) * d ; } i ++ ; } System . out . println ( aVal ) ; } }
public class Main { public static void checkIfPowerIsolated ( int num ) { int input1 = num ; int count = 0 ; int [ ] factor = new int [ num + 1 ] ; if ( num % 2 == 0 ) { while ( num % 2 == 0 ) { count += 1 ; num /= 2 ; } factor [ 2 ] = count ; } int i = 3 ; while ( i * i <= num ) { count = 0 ; while ( num % i == 0 ) { count += 1 ; num /= i ; } if ( count > 0 ) { factor [ i ] = count ; } i += 2 ; } if ( num > 1 ) { factor [ num ] = 1 ; } int product = 1 ; for ( int j = 0 ; j < factor . length ; j ++ ) { if ( factor [ j ] > 0 ) { product = product * factor [ j ] * j ; } } if ( product == input1 ) { System . out . println ( " Power - isolated ▁ Integer " ) ; } else { System . out . println ( " Not ▁ a ▁ Power - isolated ▁ Integer " ) ; } } public static void main ( String [ ] args ) { checkIfPowerIsolated ( 12 ) ; checkIfPowerIsolated ( 18 ) ; checkIfPowerIsolated ( 35 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; int a = 1 ; int c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char x = s . charAt ( i ) ; if ( x == ' A ' && a == 1 ) { a = 0 ; } else if ( x == ' Z ' && a == 0 ) { a = 1 ; c ++ ; } } if ( c > 0 ) { for ( int i = 0 ; i < c ; i ++ ) { System . out . print ( " AZ " ) ; } } else { System . out . print ( - 1 ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = Integer . parseInt ( br . readLine ( ) ) ; while ( t -- > 0 ) { int n = Integer . parseInt ( br . readLine ( ) ) ; String [ ] input = br . readLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( input [ i ] ) ; } func ( n , a , pw ) ; } pw . close ( ) ; } public static void func ( int n , int [ ] a , PrintWriter pw ) { Map < Integer , List < Integer > > indices = new HashMap < > ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! indices . containsKey ( a [ i ] ) ) { indices . put ( a [ i ] , new ArrayList < > ( ) ) ; } indices . get ( a [ i ] ) . add ( i ) ; } for ( List < Integer > list : indices . values ( ) ) { if ( list . size ( ) < 2 ) { continue ; } for ( int j = 0 ; j < list . size ( ) - 1 ; j ++ ) { int first = list . get ( j ) ; int second = list . get ( j + 1 ) ; ans = Math . max ( ans , n - second + first ) ; } } pw . println ( ans != 0 ? ans : - 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { String str1 = "1235421415454545454545454544" ; String str2 = "1714546546546545454544548544544545" ; if ( ( str1 . charAt ( 0 ) == ' - ' || str2 . charAt ( 0 ) == ' - ' ) && ( str1 . charAt ( 0 ) != ' - ' || str2 . charAt ( 0 ) != ' - ' ) ) { System . out . print ( " - " ) ; } if ( str1 . charAt ( 0 ) == ' - ' && str2 . charAt ( 0 ) != ' - ' ) { str1 = str1 . substring ( 1 ) ; } else if ( str1 . charAt ( 0 ) != ' - ' && str2 . charAt ( 0 ) == ' - ' ) { str2 = str2 . substring ( 1 ) ; } else if ( str1 . charAt ( 0 ) == ' - ' && str2 . charAt ( 0 ) == ' - ' ) { str1 = str1 . substring ( 1 ) ; str2 = str2 . substring ( 1 ) ; } System . out . print ( multiply ( str1 , str2 ) ) ; } public static String multiply ( String num1 , String num2 ) { int len1 = num1 . length ( ) ; int len2 = num2 . length ( ) ; if ( len1 == 0 || len2 == 0 ) { return "0" ; } int [ ] result = new int [ len1 + len2 ] ; int i_n1 = 0 ; int i_n2 = 0 ; for ( int i = len1 - 1 ; i >= 0 ; i -- ) { int carry = 0 ; int n1 = num1 . charAt ( i ) - '0' ; i_n2 = 0 ; for ( int j = len2 - 1 ; j >= 0 ; j -- ) { int n2 = num2 . charAt ( j ) - '0' ; int sum = n1 * n2 + result [ i_n1 + i_n2 ] + carry ; carry = sum / 10 ; result [ i_n1 + i_n2 ] = sum % 10 ; i_n2 ++ ; } if ( carry > 0 ) { result [ i_n1 + i_n2 ] += carry ; } i_n1 ++ ; } int i = result . length - 1 ; while ( i >= 0 && result [ i ] == 0 ) { i -- ; } if ( i == - 1
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] X = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] Y = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; System . out . println ( ( Arrays . stream ( Y ) . sum ( ) <= Arrays . stream ( X ) . sum ( ) ) ? " Yes " : " No " ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n_square = Integer . parseInt ( input [ 0 ] ) ; int k_th = Integer . parseInt ( input [ 1 ] ) ; String slogan = scanner . nextLine ( ) ; if ( k_th - 1 < ( n_square - 1 ) - ( k_th - 1 ) ) { while ( k_th - 1 > 0 ) { k_th -= 1 ; System . out . println ( " LEFT " ) ; } for ( int i = 0 ; i < n_square ; i ++ ) { System . out . println ( " PRINT ▁ " + slogan . charAt ( i ) ) ; if ( i != n_square - 1 ) { System . out . println ( " RIGHT " ) ; } } } else { int n_right = n_square - k_th ; while ( n_right > 0 ) { n_right -= 1 ; System . out . println ( " RIGHT " ) ; } for ( int i = n_square - 1 ; i >= 0 ; i -- ) { System . out . println ( " PRINT ▁ " + slogan . charAt ( i ) ) ; if ( i != 0 ) { System . out . println ( " LEFT " ) ; } } } } } ```
public class Main { static void printDistSum ( int [ ] arr , int n ) { int Sum = 0 ; for ( int num : arr ) { Sum += num ; } boolean [ ] [ ] dp = new boolean [ n + 1 ] [ Sum + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = true ; } for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ arr [ i - 1 ] ] = true ; for ( int j = 1 ; j <= Sum ; j ++ ) { if ( dp [ i - 1 ] [ j ] ) { dp [ i ] [ j ] = true ; dp [ i ] [ j + arr [ i - 1 ] ] = true ; } } } for ( int j = 0 ; j <= Sum ; j ++ ) { if ( dp [ n ] [ j ] ) { System . out . print ( j + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; printDistSum ( arr , n ) ; } }
public class Main { public static int Subtract ( int a , int b ) { int c = a + ( ~ b + 1 ) ; return c ; } public static void main ( String [ ] args ) { int a , b ; a = 2 ; b = 3 ; System . out . println ( Subtract ( a , b ) ) ; a = 9 ; b = 7 ; System . out . println ( Subtract ( a , b ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int l = 1 ; int r = n ; while ( l < r ) { int mid = l + ( r - l ) / 2 ; int idxcnt = mid * ( mid + 1 ) / 2 ; if ( idxcnt < n ) { l = mid + 1 ; } else { r = mid ; } } l -= 1 ; idxcnt = l * ( l + 1 ) / 2 ; System . out . println ( n - idxcnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner . nextInt ( ) ; } boolean isTrue = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( i + 1 == loveTriangle ( arr [ i ] , new HashSet < Integer > ( Arrays . asList ( i + 1 ) ) ) ) { isTrue = true ; break ; } } if ( isTrue ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static int loveTriangle ( int idx , Set < Integer > seen ) { if ( seen . contains ( idx ) ) { if ( seen . size ( ) == 3 ) { return idx ; } return - 1 ; } return loveTriangle ( arr [ idx - 1 ] , new HashSet < Integer > ( seen . add ( idx ) ) ) ; } }
public class Main { public static int nextZero ( int i , int [ ] occurrences ) { while ( i < 26 ) { if ( occurrences [ i ] == 0 ) { return i ; } i ++ ; } return - 1 ; } public static void getModifiedString ( String str ) { int n = str . length ( ) ; if ( n > 26 ) { System . out . println ( " - 1" ) ; return ; } char [ ] ch = str . toCharArray ( ) ; int [ ] occurrences = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { occurrences [ ch [ i ] - ' a ' ] ++ ; } int index = nextZero ( 0 , occurrences ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( occurrences [ ch [ i ] - ' a ' ] > 1 ) { occurrences [ ch [ i ] - ' a ' ] -- ; ch [ i ] = ( char ) ( ' a ' + index ) ; occurrences [ index ] = 1 ; index = nextZero ( index + 1 , occurrences ) ; } } System . out . println ( String . valueOf ( ch ) ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; getModifiedString ( str ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int hourMax = scanner . nextInt ( ) ; int minuteMax = scanner . nextInt ( ) ; String [ ] inputTime = scanner . next ( ) . split ( " : " ) ; int hourNow = Integer . parseInt ( inputTime [ 0 ] ) ; int minuteNow = Integer . parseInt ( inputTime [ 1 ] ) ; String result = "00:00" ; boolean flag = false ; for ( int hour = hourNow ; hour < hourMax ; hour ++ ) { int start = ( hour == hourNow ) ? minuteNow : 0 ; for ( int minute = start ; minute < minuteMax ; minute ++ ) { String time = String . format ( " % 02d : %02d " , hour , minute ) ; String mirrored = isCorrect ( hourMax , minuteMax , time ) ; if ( mirrored != null ) { result = time ; flag = true ; break ; } } if ( flag ) { break ; } } System . out . println ( result ) ; } } public static String isCorrect ( int hourMax , int minuteMax , String time ) { String [ ] hm = time . split ( " : " ) ; String [ ] mirrored = { "0" , "1" , "5" , " " , " " , "2" , " " , " " , "8" , " " } ; String mirroredH = mirrored [ Integer . parseInt ( String . valueOf ( hm [ 0 ] . charAt ( 1 ) ) ) ] + mirrored [ Integer . parseInt ( String . valueOf ( hm [ 0 ] . charAt ( 0 ) ) ) ] ; String mirroredM = mirrored [ Integer . parseInt ( String . valueOf ( hm [ 1 ] . charAt ( 1 ) ) ) ] + mirrored [ Integer . parseInt ( String . valueOf ( hm [ 1 ] . charAt ( 0 ) ) ) ] ; if ( mirroredH . length ( ) == 2 && Integer . parseInt ( mirroredH ) < minuteMax && mirroredM . length ( ) == 2 && Integer . parseInt ( mirroredM ) < hourMax ) { return mirroredM + " : " + mirroredH ; } return null ; } } ```
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } System . out . println ( minimumNumberOfPiles ( n , a ) ) ; } public static int minimumNumberOfPiles ( int n , int [ ] nValues ) { Arrays . sort ( nValues ) ; int pile = - 1 ; for ( int idx = 0 ; idx < nValues . length ; idx ++ ) { int s = nValues [ idx ] ; int k = ( int ) Math . ceil ( ( idx + 1 ) / ( s + 1 ) ) ; pile = Math . max ( pile , k ) ; } return pile ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int x = scanner . nextInt ( ) ; for ( int jj = 0 ; jj < x ; jj ++ ) { int n = scanner . nextInt ( ) ; if ( n == 1 ) { System . out . println ( 3 ) ; } else { if ( n % 2 == 1 ) { System . out . println ( 1 ) ; } else { int p = 0 ; int k = n ; while ( n % 2 == 0 ) { p ++ ; n /= 2 ; } int t = ( int ) Math . pow ( 2 , p ) ; if ( t == k ) { System . out . println ( t + 1 ) ; } else { System . out . println ( t ) ; } } } } } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int root = ( int ) ( Math . sqrt ( n ) + 1 ) ; boolean [ ] isPrime = new boolean [ n + 3 ] ; Arrays . fill ( isPrime , true ) ; for ( int i = 4 ; i < n + 3 ; i += 2 ) { isPrime [ i ] = false ; } int ans = 0 ; int prePrime = - 1 ; for ( int i = 3 ; i < n + 3 ; i += 2 ) { if ( isPrime [ i ] ) { if ( prePrime + 2 == i ) { ans += 2 ; } prePrime = i ; if ( i > root ) { continue ; } for ( int j = i * i ; j < n + 3 ; j += i ) { isPrime [ j ] = false ; } } } System . out . println ( ans ) ; } }
List < Integer > L = new ArrayList < > ( ) ; Scanner scanner = new Scanner ( System . in ) ; int r = 1 ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( String k : input1 ) { for ( int i = 0 ; i < Integer . parseInt ( k ) ; i ++ ) { L . add ( r ) ; } r ++ ; } scanner . nextLine ( ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( String j : input2 ) { System . out . println ( L . get ( Integer . parseInt ( j ) - 1 ) ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int [ ] sumL = new int [ n + 2 ] ; int L = 1 ; sumL [ n + 1 ] = 1 ; for ( int i = n - 1 ; i > 0 ; i -- ) { L = sumL [ i + 1 ] ; int j = 2 ; while ( i * j <= n ) { L += ( sumL [ i * j ] - sumL [ Math . min ( n , ( i + 1 ) * j - 1 ) + 1 ] ) ; L %= m ; j ++ ; } L %= m ; sumL [ i ] = ( sumL [ i + 1 ] + L ) % m ; } System . out . println ( L ) ; } }
import java . util . ArrayDeque ; public class Main { static void printMax ( int [ ] arr , int n , int k ) { ArrayDeque < Integer > Qi = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { while ( ! Qi . isEmpty ( ) && arr [ i ] >= arr [ Qi . peekLast ( ) ] ) { Qi . pollLast ( ) ; } Qi . addLast ( i ) ; } for ( int i = k ; i < n ; i ++ ) { System . out . print ( arr [ Qi . peekFirst ( ) ] + " ▁ " ) ; while ( ! Qi . isEmpty ( ) && Qi . peekFirst ( ) <= i - k ) { Qi . pollFirst ( ) ; } while ( ! Qi . isEmpty ( ) && arr [ i ] >= arr [ Qi . peekLast ( ) ] ) { Qi . pollLast ( ) ; } Qi . addLast ( i ) ; } System . out . print ( arr [ Qi . peekFirst ( ) ] ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 12 , 1 , 78 , 90 , 57 , 89 , 56 } ; int k = 3 ; printMax ( arr , arr . length , k ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( russianPeasant ( 18 , 1 ) ) ; System . out . println ( russianPeasant ( 20 , 12 ) ) ; } public static int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( ( b & 1 ) == 1 ) { res = res + a ; } a = a << 1 ; b = b >> 1 ; } return res ; } }
public class Main { public static boolean isValid ( String string , int length ) { for ( int i = 1 ; i < length ; i ++ ) { if ( string . charAt ( i ) == string . charAt ( i - 1 ) ) { return false ; } } return true ; } public static void main ( String [ ] args ) { String string = "0110" ; int length = string . length ( ) ; if ( isValid ( string , length ) ) { System . out . println ( " Valid " ) ; } else { System . out . println ( " Invalid " ) ; } } }
import java . util . Random ; public class Main { public static void main ( String [ ] args ) { int n = 13 ; int t = 10 ; if ( n == 2 ) { System . out . println ( "2 ▁ is ▁ Prime . " ) ; } if ( n % 2 == 0 ) { System . out . println ( n + " ▁ is ▁ Composite " ) ; } else { int flag = lehmann ( n , t ) ; if ( flag == 1 ) { System . out . println ( n + " ▁ may ▁ be ▁ Prime . " ) ; } else { System . out . println ( n + " ▁ is ▁ Composite . " ) ; } } } public static int lehmann ( int n , int t ) { Random random = new Random ( ) ; int a = random . nextInt ( n - 2 ) + 2 ; int e = ( n - 1 ) / 2 ; while ( t > 0 ) { int result = ( int ) ( Math . pow ( a , e ) ) % n ; if ( ( result % n ) == 1 || ( result % n ) == ( n - 1 ) ) { a = random . nextInt ( n - 2 ) + 2 ; t -= 1 ; } else { return - 1 ; } } return 1 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < n ; k ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int i = 0 ; while ( true ) { if ( a <= 0 || b <= 0 ) { break ; } if ( a > b ) { i += a / b ; a -= ( a / b ) * b ; } else { i += b / a ; b -= ( b / a ) * a ; } } System . out . println ( i ) ; } } }
Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; int k = scanner . nextInt ( ) ; System . out . println ( k > s . length ( ) ? " impossible " : Math . max ( 0 , k - ( new HashSet < Character > ( Arrays . asList ( s . toCharArray ( ) ) ) ) . size ( ) ) ) ;
public class Main { static int N = 3 ; public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 10 , 2 , 5 } , { 6 , 10 , 4 } , { 2 , 7 , - 10 } } ; System . out . println ( MaxTraceSub ( mat ) ) ; } public static int MaxTraceSub ( int [ ] [ ] mat ) { int max_trace = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int r = i ; int s = j ; int trace = 0 ; while ( r < N && s < N ) { trace += mat [ r ] [ s ] ; r ++ ; s ++ ; max_trace = Math . max ( trace , max_trace ) ; } } } return max_trace ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { try { double xa1 = scanner . nextDouble ( ) ; double ya1 = scanner . nextDouble ( ) ; double xa2 = scanner . nextDouble ( ) ; double ya2 = scanner . nextDouble ( ) ; double xb1 = scanner . nextDouble ( ) ; double yb1 = scanner . nextDouble ( ) ; double xb2 = scanner . nextDouble ( ) ; double yb2 = scanner . nextDouble ( ) ; } catch ( Exception e ) { break ; } if ( xb2 < xa1 || xb1 > xa2 || yb2 < ya1 || yb1 > ya2 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } } ```
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int testCases = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int t = 0 ; t < testCases ; t ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( input [ i ] ) ; } int [ ] realCounter = new int [ 31 ] ; for ( int i : a ) { int [ ] x = convertToBinary ( i ) ; for ( int j = 0 ; j < realCounter . length ; j ++ ) { realCounter [ j ] += x [ j ] ; } } int [ ] collector = new int [ n + 1 ] ; for ( int i : realCounter ) { if ( i > 0 ) { collector [ i ] ++ ; } } int [ ] realCollector = new int [ n + 1 ] ; int index = 0 ; for ( int i = 0 ; i < collector . length ; i ++ ) { if ( collector [ i ] > 0 ) { realCollector [ index ++ ] = i ; } } int [ ] finalAnswer = new int [ 1 ] ; if ( sum ( realCollector ) == 0 ) { for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; } else { int minCollector = min ( realCollector ) ; realCollector = realCounter ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i > minCollector ) { break ; } else { boolean isGood = true ; for ( int j : realCollector ) { if ( j % i != 0 ) { isGood = false ; break ; } } if ( isGood ) { finalAnswer = append ( finalAnswer , i ) ; } } } for ( int k : finalAnswer ) { System . out . print ( k + " ▁ " ) ; } System . out . println ( ) ; } } } public static int [ ] convertToBinary ( int n ) { int [ ] listy = new int [ 0 ] ; while ( n > 0 ) { listy =
public class Main { public static void main ( String [ ] args ) { int a = 1 ; int b = 10 ; System . out . println ( oddDivCount ( a , b ) ) ; } public static int oddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; i ++ ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; j ++ ) { if ( i % j == 0 ) { divCount ++ ; } } if ( divCount % 2 != 0 ) { res ++ ; } } return res ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = input . nextInt ( ) ; } int [ ] li = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { li [ i ] = ( int ) Math . ceil ( ( double ) arr [ i ] / m ) ; } int maxi = Arrays . stream ( li ) . max ( ) . getAsInt ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( maxi == li [ i ] ) { System . out . println ( i + 1 ) ; break ; } } } }
public class Main { public static void printArray ( int N , int [ ] arr ) { for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } public static void replacedArray ( int N , int [ ] arr ) { int pos_sum = 0 ; int neg_sum = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum ) ; if ( arr [ i ] > 0 ) { pos_sum = pos_sum + arr [ i ] ; } else { neg_sum = neg_sum + arr [ i ] ; } arr [ i ] = Math . abs ( diff ) ; } } public static void main ( String [ ] args ) { int N = 5 ; int [ ] arr = { 1 , - 1 , 2 , 3 , - 2 } ; replacedArray ( N , arr ) ; printArray ( N , arr ) ; N = 6 ; int [ ] arr1 = { - 3 , - 4 , - 2 , 5 , 1 , - 2 } ; replacedArray ( N , arr1 ) ; printArray ( N , arr1 ) ; } }
public class Main { public static void printArray ( int N , int [ ] arr ) { for ( int i = 0 ; i < N ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } public static void replacedArray ( int N , int [ ] arr ) { for ( int i = 0 ; i < N ; i ++ ) { int pos_sum = 0 ; int neg_sum = 0 ; for ( int j = i + 1 ; j < N ; j ++ ) { if ( arr [ j ] > 0 ) { pos_sum += arr [ j ] ; } else { neg_sum += arr [ j ] ; } } int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum ) ; arr [ i ] = Math . abs ( diff ) ; } } public static void main ( String [ ] args ) { int N = 5 ; int [ ] arr = { 1 , - 1 , 2 , 3 , - 2 } ; replacedArray ( N , arr ) ; printArray ( N , arr ) ; N = 6 ; int [ ] arr1 = { - 3 , - 4 , - 2 , 5 , 1 , - 2 } ; replacedArray ( N , arr1 ) ; printArray ( N , arr1 ) ; } }
public class Main { public static void main ( String [ ] args ) { char [ ] s = { '1' , '2' , '4' } ; System . out . println ( countDivisbleby4 ( s ) ) ; } public static int countDivisbleby4 ( char [ ] s ) { int n = s . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '4' || s [ i ] == '8' || s [ i ] == '0' ) { count ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { int h = ( s [ i ] - '0' ) * 10 + ( s [ i + 1 ] - '0' ) ; if ( h % 4 == 0 ) { count = count + i + 1 ; } } return count ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] s = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( s ) ; String res = ( Math . max ( s [ 0 ] , s [ 1 ] ) + Math . max ( s [ 2 ] , s [ 3 ] ) == s [ 2 ] + s [ 3 ] ) ? " YES " : " NO " ; System . out . println ( res ) ; } } }
import java . util . * ; public class Main { static ArrayList < Long > l = new ArrayList < > ( ) ; static long limit = 10000000000L ; public static void gen ( long number , int four , int seven ) { if ( number > limit ) { return ; } if ( number > 0 && four == seven ) { l . add ( number ) ; } gen ( number * 10 + 4 , four + 1 , seven ) ; gen ( number * 10 + 7 , four , seven + 1 ) ; } public static void main ( String [ ] args ) { gen ( 0 , 0 , 0 ) ; Collections . sort ( l ) ; Scanner scanner = new Scanner ( System . in ) ; long n = scanner . nextLong ( ) ; long ans = 0 ; for ( long val : l ) { if ( val >= n ) { ans = val ; break ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } boolean has = false ; boolean prop = n == 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == k ) { has = true ; } if ( a [ i ] >= k && i > 0 ) { if ( a [ i - 1 ] >= k ) { prop = true ; } if ( i > 1 && a [ i - 2 ] >= k ) { prop = true ; } } } System . out . println ( has && prop ? " yes " : " no " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int T = scanner . nextInt ( ) ; for ( int C = 1 ; C <= T ; C ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int D = Integer . parseInt ( input [ 0 ] ) ; int I = Integer . parseInt ( input [ 1 ] ) ; int M = Integer . parseInt ( input [ 2 ] ) ; int N = Integer . parseInt ( input [ 3 ] ) ; String [ ] x = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] r = new int [ 256 ] ; for ( String q : x ) { int [ ] nr = new int [ 256 ] ; for ( int i = 0 ; i < 256 ; i ++ ) { nr [ i ] = r [ i ] + D ; } int qInt = Integer . parseInt ( q ) ; if ( M == 0 ) { for ( int i = 0 ; i < 256 ; i ++ ) { nr [ i ] = Math . min ( nr [ i ] , r [ i ] + Math . abs ( qInt - i ) ) ; } } else { for ( int i = 0 ; i < 256 ; i ++ ) { for ( int j = 0 ; j < 256 ; j ++ ) { nr [ j ] = Math . min ( nr [ j ] , r [ i ] + Math . abs ( qInt - j ) + ( Math . max ( 0 , Math . abs ( i - j ) - 1 ) / M ) * I ) ; } } } r = nr ; } System . out . println ( " Case ▁ # " + C + " : ▁ " + findMin ( r ) ) ; } } private static int findMin ( int [ ] arr ) { int min = arr [ 0 ] ; for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } return min ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < int [ ] > ban = new ArrayList < > ( ) ; while ( true ) { try { String s = scanner . nextLine ( ) ; if ( s . isEmpty ( ) ) { countIsland ( ban ) ; ban . clear ( ) ; } else { int [ ] row = Arrays . stream ( s . split ( " " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; ban . add ( row ) ; } } catch ( NoSuchElementException e ) { break ; } } if ( ! ban . isEmpty ( ) ) { countIsland ( ban ) ; } } public static void countIsland ( List < int [ ] > ban ) { int count = 0 ; for ( int y = 0 ; y < 12 ; y ++ ) { for ( int x = 0 ; x < 12 ; x ++ ) { if ( ban . get ( y ) [ x ] == 1 ) { count ++ ; remove ( ban , x , y ) ; } } } System . out . println ( count ) ; } public static void remove ( List < int [ ] > ban , int x , int y ) { if ( 0 <= y && y < 12 && 0 <= x && x < 12 && ban . get ( y ) [ x ] == 1 ) { ban . get ( y ) [ x ] = 0 ; int [ ] [ ] directions = { { - 1 , 0 } , { 1 , 0 } , { 0 , - 1 } , { 0 , 1 } } ; for ( int [ ] direction : directions ) { remove ( ban , x + direction [ 0 ] , y + direction [ 1 ] ) ; } } } }
public class Main { static boolean arraySortedOrNot ( int [ ] arr , int n ) { if ( n == 0 || n == 1 ) { return true ; } for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] > arr [ i ] ) { return false ; } } return true ; } public static void main ( String [ ] args ) { int [ ] arr = { 20 , 23 , 23 , 45 , 78 , 88 } ; int n = arr . length ; if ( arraySortedOrNot ( arr , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = Integer . parseInt ( inputArr [ j ] ) ; } int k = arr [ 0 ] ; for ( int j = 1 ; j < n ; j ++ ) { if ( arr [ j ] < k ) { k = arr [ j ] ; } } if ( n == 1 ) { System . out . println ( 0 ) ; } else { int res = 0 ; for ( int j = 0 ; j < n ; j ++ ) { res += ( arr [ j ] - k ) ; } System . out . println ( res ) ; } } } }
public static int printKDistinct ( int [ ] arr , int size , int KthIndex ) { HashMap < Integer , Integer > dict = new HashMap < > ( ) ; ArrayList < Integer > vect = new ArrayList < > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( dict . containsKey ( arr [ i ] ) ) { dict . put ( arr [ i ] , dict . get ( arr [ i ] ) + 1 ) ; } else { dict . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < size ; i ++ ) { if ( dict . get ( arr [ i ] ) > 1 ) { continue ; } else { KthIndex = KthIndex - 1 ; } if ( KthIndex == 0 ) { return arr [ i ] ; } } return - 1 ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 1 , 3 , 4 , 2 } ; int size = arr . length ; System . out . println ( printKDistinct ( arr , size , 2 ) ) ; }
public class Main { public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( findLastDigit ( n ) ) ; n = 61 ; System . out . println ( findLastDigit ( n ) ) ; n = 7 ; System . out . println ( findLastDigit ( n ) ) ; n = 67 ; System . out . println ( findLastDigit ( n ) ) ; } public static int [ ] fib ( int [ ] f , int n ) { f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 ; } return f ; } public static int findLastDigit ( int n ) { int [ ] f = new int [ 61 ] ; f = fib ( f , 60 ) ; return f [ n % 60 ] ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] ABC = new int [ inputArr . length ] ; for ( int i = 0 ; i < inputArr . length ; i ++ ) { ABC [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } int count = 0 ; for ( int num : ABC ) { if ( num == 5 ) { count ++ ; } } if ( count == 2 ) { int sum = 0 ; for ( int num : ABC ) { sum += num ; } if ( sum == 17 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int N = Integer . parseInt ( input1 [ 0 ] ) ; int Z = Integer . parseInt ( input1 [ 1 ] ) ; int W = Integer . parseInt ( input1 [ 2 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > A = new ArrayList < > ( ) ; A . add ( W ) ; for ( String s : input2 ) { A . add ( Integer . parseInt ( s ) ) ; } int [ ] X = new int [ N + 1 ] ; int [ ] Y = new int [ N + 1 ] ; Arrays . fill ( X , 0 ) ; Arrays . fill ( Y , 1000000000 ) ; for ( int i = N ; i > 0 ; i -- ) { int [ ] temp1 = new int [ i + 1 ] ; int [ ] temp2 = new int [ i + 1 ] ; temp1 [ 0 ] = Math . abs ( A . get ( i - 1 ) - A . get ( N ) ) ; temp2 [ 0 ] = Math . abs ( A . get ( i - 1 ) - A . get ( N ) ) ; for ( int j = i + 1 ; j <= N ; j ++ ) { temp1 [ j - i ] = Y [ j ] ; temp2 [ j - i ] = X [ j ] ; } X [ i ] = Math . max ( temp1 ) ; Y [ i ] = Math . min ( temp2 ) ; } System . out . println ( X [ 1 ] ) ; } }
public class Main { public static void countEleLessThanOrEqual ( int [ ] arr1 , int [ ] arr2 , int m , int n ) { for ( int i = 0 ; i < m ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr2 [ j ] <= arr1 [ i ] ) { count ++ ; } } System . out . print ( count + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr1 = { 1 , 2 , 3 , 4 , 7 , 9 } ; int [ ] arr2 = { 0 , 1 , 2 , 1 , 1 , 4 } ; int m = arr1 . length ; int n = arr2 . length ; countEleLessThanOrEqual ( arr1 , arr2 , m , n ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int k = Integer . parseInt ( input1 [ 1 ] ) ; int [ ] arr = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; if ( k == 1 ) { System . out . println ( Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ) ; } else if ( k == 2 ) { System . out . println ( Math . max ( arr [ 0 ] , arr [ arr . length - 1 ] ) ) ; } else { System . out . println ( Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ) ; } } }
String [ ] A = input . split ( " ▁ " ) ; System . out . println ( String . join ( " ▁ " , A ) ) ; int S = Integer . parseInt ( input ) ; for ( int i = 0 ; i < S ; i ++ ) { String [ ] inputArr = input . split ( " ▁ " ) ; String B = inputArr [ 0 ] ; String C = inputArr [ 1 ] ; A [ Arrays . asList ( A ) . indexOf ( B ) ] = C ; System . out . println ( String . join ( " ▁ " , A ) ) ; }
import java . io . File ; import java . io . FileNotFoundException ; import java . io . PrintWriter ; import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { File inputFile = new File ( " input . txt " ) ; File outputFile = new File ( " output . txt " ) ; try { Scanner scanner = new Scanner ( inputFile ) ; PrintWriter writer = new PrintWriter ( outputFile ) ; int n = scanner . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner . nextInt ( ) ; } Arrays . sort ( arr ) ; writer . println ( arr [ ( n - 1 ) / 2 ] ) ; scanner . close ( ) ; writer . close ( ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int p = scanner . nextInt ( ) ; int ans = 0 ; int ans2 = 0 ; int i = 1 ; while ( ans2 < k ) { String s = Integer . toString ( i ) ; ans += Integer . parseInt ( s + new StringBuilder ( s ) . reverse ( ) . toString ( ) ) ; ans2 ++ ; i ++ ; } System . out . println ( ans % p ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > A = new ArrayList < > ( ) ; for ( String s : inputArr ) { A . add ( Integer . parseInt ( s ) ) ; } Map < Integer , Integer > a_to_i = new HashMap < > ( ) ; for ( int i = 0 ; i < A . size ( ) ; i ++ ) { a_to_i . put ( A . get ( i ) , i + 1 ) ; } List < Integer > L = new ArrayList < > ( ) ; List < Integer > R = new ArrayList < > ( ) ; for ( int i = 0 ; i < N + 2 ; i ++ ) { L . add ( i - 1 ) ; R . add ( i + 1 ) ; } int ans = 0 ; for ( int a = N ; a > 0 ; a -- ) { int i = a_to_i . get ( a ) ; ans += a * ( R . get ( i ) - i ) * ( i - L . get ( i ) ) ; L . set ( R . get ( i ) , L . get ( i ) ) ; R . set ( L . get ( i ) , R . get ( i ) ) ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { String seq = " GEEKSFORGEEKS " ; int n = seq . length ( ) ; System . out . println ( " The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ " + lps ( seq ) ) ; } public static int lps ( String str ) { int n = str . length ( ) ; int [ ] [ ] L = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { L [ i ] [ i ] = 1 ; } for ( int cl = 2 ; cl <= n ; cl ++ ) { for ( int i = 0 ; i < n - cl + 1 ; i ++ ) { int j = i + cl - 1 ; if ( str . charAt ( i ) == str . charAt ( j ) && cl == 2 ) { L [ i ] [ j ] = 2 ; } else if ( str . charAt ( i ) == str . charAt ( j ) ) { L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ; } else { L [ i ] [ j ] = Math . max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ; } } } return L [ 0 ] [ n - 1 ] ; } }
public class Main { public static void printConsecutive ( int last , int first ) { System . out . print ( first ) ; first += 1 ; for ( int x = first ; x <= last ; x ++ ) { System . out . print ( " ▁ + " + x ) ; } } public static void findConsecutive ( int N ) { for ( int last = 1 ; last < N ; last ++ ) { for ( int first = 0 ; first < last ; first ++ ) { if ( 2 * N == ( last - first ) * ( last + first + 1 ) ) { System . out . print ( N + " ▁ = ▁ " ) ; printConsecutive ( last , first + 1 ) ; return ; } } } System . out . println ( " - 1" ) ; } public static void main ( String [ ] args ) { int n = 12 ; findConsecutive ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; String ans = " YES " ; if ( Math . abs ( a - b ) > 1 || a + b == 0 ) { ans = " NO " ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int m = 385 ; int n = 60 ; System . out . println ( NumberOfSquares ( m , n ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } public static int NumberOfSquares ( int x , int y ) { int s = gcd ( x , y ) ; int ans = ( x * y ) / ( s * s ) ; return ans ; } }
public class Main { public static void main ( String [ ] args ) { String s = " aabbbcc " ; if ( isAlphabaticOrder ( s ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; char [ ] c = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = s . charAt ( i ) ; } Arrays . sort ( c ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] != s . charAt ( i ) ) { return false ; } } return true ; } }
public class Main { static void printMax ( int [ ] arr , int n , int k ) { int max ; for ( int i = 0 ; i <= n - k ; i ++ ) { max = arr [ i ] ; for ( int j = 1 ; j < k ; j ++ ) { if ( arr [ i + j ] > max ) { max = arr [ i + j ] ; } } System . out . print ( max + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int k = 3 ; printMax ( arr , n , k ) ; } }
public class Main { static int mod = 1000000007 ; static double eps = Math . pow ( 10 , - 9 ) ; public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int M = input . nextInt ( ) ; List < List < Integer > > adj = new ArrayList < > ( ) ; for ( int i = 0 ; i <= N ; i ++ ) { adj . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; adj . get ( a ) . add ( b ) ; adj . get ( b ) . add ( a ) ; } int [ ] seen = new int [ N + 1 ] ; int single = 0 ; int bipartite = 0 ; int notBipartite = 0 ; for ( int v0 = 1 ; v0 <= N ; v0 ++ ) { if ( seen [ v0 ] != 0 ) { continue ; } int flg = 1 ; Queue < Integer > que = new LinkedList < > ( ) ; que . add ( v0 ) ; seen [ v0 ] = 1 ; int cnt = 0 ; while ( ! que . isEmpty ( ) ) { int v = que . poll ( ) ; cnt ++ ; for ( int u : adj . get ( v ) ) { if ( seen [ u ] == 0 ) { seen [ u ] = - seen [ v ] ; que . add ( u ) ; } else { if ( seen [ u ] == seen [ v ] ) { flg = 0 ; } } } } if ( cnt == 1 ) { single ++ ; } else { if ( flg == 1 ) { bipartite ++ ; } else { notBipartite ++ ; } } } int ans = ( int ) ( Math . pow ( N , 2 ) - Math . pow ( N - single , 2 ) ) ; ans += Math . pow ( bipartite + notBipartite , 2 ) ; ans += Math . pow ( bipartite , 2 ) ; System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int p = scanner . nextInt ( ) ; System . out . println ( solve ( a , b , p ) ) ; } public static int ss ( int a , int b ) { a = Math . min ( a , b ) ; return a * ( a + 1 ) / 2 + ( b - a ) * a ; } public static int solve ( int a , int b , int p ) { int lft = p - 1 ; int rt = a - p ; b -= a ; int x = 0 ; int y = b ; while ( x != y ) { int tmp = ( x + y + 1 ) / 2 ; if ( ss ( lft , tmp - 1 ) + ss ( rt , tmp - 1 ) + tmp > b ) { y = tmp - 1 ; } else { x = tmp ; } } return x + 1 ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int K = input . nextInt ( ) ; ArrayList < int [ ] > P = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int [ ] point = new int [ 2 ] ; point [ 0 ] = input . nextInt ( ) ; point [ 1 ] = input . nextInt ( ) ; P . add ( point ) ; } long ans = ( long ) Math . pow ( 10 , 18 ) * 5 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) { int u = Math . max ( P . get ( i ) [ 0 ] , P . get ( j ) [ 0 ] ) ; int d = Math . min ( P . get ( i ) [ 0 ] , P . get ( j ) [ 0 ] ) ; for ( int k = 0 ; k < N ; k ++ ) { for ( int l = k + 1 ; l < N ; l ++ ) { int r = Math . max ( P . get ( k ) [ 1 ] , P . get ( l ) [ 1 ] ) ; int le = Math . min ( P . get ( k ) [ 1 ] , P . get ( l ) [ 1 ] ) ; int count = 0 ; for ( int m = 0 ; m < N ; m ++ ) { if ( d <= P . get ( m ) [ 0 ] && P . get ( m ) [ 0 ] <= u && le <= P . get ( m ) [ 1 ] && P . get ( m ) [ 1 ] <= r ) { count ++ ; } } if ( count >= K ) { ans = Math . min ( ans , ( long ) ( u - d ) * ( r - le ) ) ; } } } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; List < String > l = new ArrayList < > ( ) ; Map < String , Integer > d = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { l . add ( scanner . next ( ) ) ; d . put ( l . get ( i ) , i ) ; } List < String > z = new ArrayList < > ( l ) ; for ( int i = m - 1 ; i >= 0 ; i -- ) { if ( i % 2 == 0 ) { Collections . sort ( l , Comparator . comparing ( x -> x . charAt ( i ) ) ) ; } else { Collections . sort ( l , Comparator . comparing ( String :: valueOf , Comparator . reverseOrder ( ) ) . thenComparing ( x -> x . charAt ( i ) , Comparator . reverseOrder ( ) ) ) ; } } for ( String i : l ) { System . out . print ( d . get ( i ) + 1 + " ▁ " ) ; } } }
import java . util . ArrayList ; import java . util . Collections ; public class Main { public static ArrayList < String > preProcess ( ArrayList < String > substrings , String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String dup = " " ; for ( int j = i ; j < n ; j ++ ) { dup += s . charAt ( j ) ; substrings . add ( dup ) ; } } Collections . sort ( substrings ) ; return substrings ; } public static void main ( String [ ] args ) { String s = " geek " ; ArrayList < String > substrings = new ArrayList < > ( ) ; substrings = preProcess ( substrings , s ) ; int [ ] queries = { 1 , 5 , 10 } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( substrings . get ( queries [ i ] - 1 ) ) ; } } }
int [ ] [ ] f = { { 0 , 1 } , { 1 , 0 } , { 0 , - 1 } , { - 1 , 0 } } ; int [ ] [ ] b = { { 0 , - 1 } , { - 1 , 0 } , { 0 , 1 } , { 1 , 0 } } ; while ( true ) { int w , h ; String [ ] inputArr = input ( ) . split ( " ▁ " ) ; w = Integer . parseInt ( inputArr [ 0 ] ) ; h = Integer . parseInt ( inputArr [ 1 ] ) ; if ( w == 0 ) break ; int r = 1 , c = 1 , d = 0 ; while ( true ) { String [ ] buf = input ( ) . split ( " ▁ " ) ; if ( buf [ 0 ] . equals ( " STOP " ) ) break ; else if ( buf [ 0 ] . equals ( " RIGHT " ) ) d = ( d + 1 ) % 4 ; else if ( buf [ 0 ] . equals ( " LEFT " ) ) d = ( d + 3 ) % 4 ; else { int r2 , c2 ; if ( buf [ 0 ] . equals ( " FORWARD " ) ) { r2 = r + Integer . parseInt ( buf [ 1 ] ) * f [ d ] [ 1 ] ; c2 = c + Integer . parseInt ( buf [ 1 ] ) * f [ d ] [ 0 ] ; } else { r2 = r + Integer . parseInt ( buf [ 1 ] ) * b [ d ] [ 1 ] ; c2 = c + Integer . parseInt ( buf [ 1 ] ) * b [ d ] [ 0 ] ; } if ( r2 < 1 ) r2 = 1 ; if ( r2 > h ) r2 = h ; if ( c2 < 1 ) c2 = 1 ; if ( c2 > w ) c2 = w ; r = r2 ; c = c2 ; } } System . out . println ( c + " ▁ " + r ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String s = scanner . next ( ) ; int i = 0 ; int x = 0 ; int ans = 0 ; for ( int j = 1 ; j < n ; j ++ ) { if ( s . charAt ( j ) == s . charAt ( i ) && s . charAt ( i ) == ' x ' ) { x += 1 ; } else { if ( x > 1 ) { ans += x - 1 ; } x = 0 ; } i = j ; } if ( x > 1 ) { ans += x - 1 ; } System . out . println ( ans ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String x = scanner . nextLine ( ) ; if ( x . equals ( "0" ) ) { break ; } int a = 0 ; int b = 0 ; for ( int i = 1 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == ' A ' ) { a ++ ; } else { b ++ ; } } if ( a > b ) { a ++ ; } else { b ++ ; } System . out . println ( a + " ▁ " + b ) ; } } } ```
public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int fact ( int N ) { int product = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { product = product * i ; } return product ; } public static int nthTerm ( int N ) { return ( N * N ) * fact ( N ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 0 , 1 , 2 , 0 } ; int n = arr . length ; System . out . println ( longestSubArray ( arr , n ) ) ; } public static int longestSubArray ( int [ ] arr , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZeroPresent = true ; break ; } } if ( isZeroPresent ) { return n ; } return 0 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int k = scanner . nextInt ( ) ; int x = scanner . nextInt ( ) ; System . out . println ( ( k - 1 ) * 9 + x ) ; } } }
public class Main { public static void maximumArea ( int l , int b , int x , int y ) { int left , right , above , below ; left = x * b ; right = ( l - x - 1 ) * b ; above = l * y ; below = ( b - y - 1 ) * l ; System . out . println ( Math . max ( Math . max ( left , right ) , Math . max ( above , below ) ) ) ; } public static void main ( String [ ] args ) { int l = 8 ; int b = 8 ; int x = 0 ; int y = 0 ; maximumArea ( l , b , x , y ) ; } }
public class Main { static final int NO_OF_CHARS = 256 ; public static int max_distinct_char ( String str , int n ) { int [ ] count = new int [ NO_OF_CHARS ] ; for ( int i = 0 ; i < n ; i ++ ) { count [ ( int ) str . charAt ( i ) ] += 1 ; } int max_distinct = 0 ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] != 0 ) { max_distinct += 1 ; } } return max_distinct ; } public static int smallesteSubstr_maxDistictChar ( String str ) { int n = str . length ( ) ; int max_distinct = max_distinct_char ( str , n ) ; int minl = n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { String subs = str . substring ( i , j ) ; int subs_lenght = subs . length ( ) ; int sub_distinct_char = max_distinct_char ( subs , subs_lenght ) ; if ( subs_lenght < minl && max_distinct == sub_distinct_char ) { minl = subs_lenght ; } } } return minl ; } public static void main ( String [ ] args ) { String str = " AABBBCBB " ; int l = smallesteSubstr_maxDistictChar ( str ) ; System . out . println ( " The ▁ length ▁ of ▁ the ▁ smallest ▁ substring ▁ consisting ▁ of ▁ maximum ▁ distinct ▁ characters ▁ : ▁ " + l ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; String s1 = scanner . next ( ) ; String s2 = scanner . next ( ) ; System . out . println ( f ( n , s1 , s2 ) ) ; } } public static String f ( int n , String s1 , String s2 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( s1 . charAt ( i ) != s2 . charAt ( i ) ) { if ( s1 . charAt ( i ) == ' R ' || s2 . charAt ( i ) == ' R ' ) { return " NO " ; } } } return " YES " ; } }
public class Main { public static void main ( String [ ] args ) { int n = 2 ; int [ ] [ ] q = { { 1 , 1 } , { 1 , 2 } , { 2 , 1 } } ; int size = q . length ; System . out . println ( findNumberOfEvenCells ( n , q , size ) ) ; } public static int findNumberOfEvenCells ( int n , int [ ] [ ] q , int size ) { int [ ] row = new int [ n ] ; int [ ] col = new int [ n ] ; for ( int i = 0 ; i < size ; i ++ ) { int x = q [ i ] [ 0 ] ; int y = q [ i ] [ 1 ] ; row [ x - 1 ] += 1 ; col [ y - 1 ] += 1 ; } int r1 = 0 ; int r2 = 0 ; int c1 = 0 ; int c2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( row [ i ] % 2 == 0 ) { r1 += 1 ; } if ( row [ i ] % 2 == 1 ) { r2 += 1 ; } if ( col [ i ] % 2 == 0 ) { c1 += 1 ; } if ( col [ i ] % 2 == 1 ) { c2 += 1 ; } } int count = r1 * c1 + r2 * c2 ; return count ; } }
public class Main { public static void checkType ( int [ ] arr , int n ) { if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] <= arr [ n - 1 ] ) { System . out . println ( " Increasing " ) ; } else if ( arr [ 0 ] >= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) { System . out . println ( " Decreasing " ) ; } else if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) { System . out . println ( " Increasing ▁ then ▁ decreasing " ) ; } else { System . out . println ( " Decreasing ▁ then ▁ increasing " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int n = arr . length ; checkType ( arr , n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String s = scanner . nextLine ( ) ; System . out . println ( n / 2 - Math . max ( s . split ( "10" , - 1 ) . length - 1 , s . split ( "01" , - 1 ) . length - 1 ) ) ; } } }
import java . util . Scanner ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int c = input . nextInt ( ) ; int d = input . nextInt ( ) ; input . close ( ) ; if ( c > a || d > b ) { if ( c > a && d > b ) { BigInteger p = BigInteger . valueOf ( Math . min ( new Fraction ( b , d ) . limitDenominator ( ) . intValue ( ) , new Fraction ( a , c ) . limitDenominator ( ) . intValue ( ) ) ) ; } else if ( c > a ) { BigInteger p = BigInteger . valueOf ( new Fraction ( a , c ) . limitDenominator ( ) . intValue ( ) ) ; } else { BigInteger p = BigInteger . valueOf ( new Fraction ( b , d ) . limitDenominator ( ) . intValue ( ) ) ; } } else { BigInteger p = BigInteger . valueOf ( Math . min ( new Fraction ( b , d ) . limitDenominator ( ) . intValue ( ) , new Fraction ( a , c ) . limitDenominator ( ) . intValue ( ) ) ) ; } c *= p . intValue ( ) ; d *= p . intValue ( ) ; BigInteger up = BigInteger . valueOf ( a * b - c * d ) ; BigInteger down = BigInteger . valueOf ( a * b ) ; String ans = new Fraction ( up , down ) . limitDenominator ( ) . toString ( ) ; System . out . println ( "0/1" . equals ( ans ) ? "0/1" : ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } public static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) { return 1 ; } else { return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } } }
public class Main { static void rearrange ( int [ ] arr , int n ) { int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j = j + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 } ; int n = arr . length ; rearrange ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( n + " th ▁ Centered ▁ square ▁ number : ▁ " + centeredSquareNum ( n ) ) ; } public static int centeredSquareNum ( int n ) { return n * n + ( ( n - 1 ) * ( n - 1 ) ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int test = 0 ; test < t ; test ++ ) { int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; if ( k == 1 ) { if ( n % 2 == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { if ( n <= k ) { System . out . println ( " NO " ) ; } else { if ( n % 2 == 0 && k % 2 == 1 ) { System . out . println ( " NO " ) ; } else if ( n % 2 == 1 && k % 2 == 0 ) { System . out . println ( " NO " ) ; } else { int x = 2 * k - 1 ; double min_sum = Math . pow ( ( 1 + x ) , 2 ) / 4 ; if ( min_sum > n ) { System . out . println ( " NO " ) ; } else if ( min_sum == n ) { System . out . println ( " YES " ) ; } else { if ( ( n - min_sum ) % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } } } } } } ```
Scanner sc = new Scanner ( System . in ) ; int n = Integer . parseInt ( sc . nextLine ( ) ) / 2 ; String [ ] inputArr = sc . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ inputArr . length ] ; for ( int i = 0 ; i < inputArr . length ; i ++ ) { arr [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } Arrays . sort ( arr ) ; int sum1 = 0 ; int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += arr [ i ] ; } for ( int i = n ; i < arr . length ; i ++ ) { sum2 += arr [ i ] ; } System . out . println ( ( sum1 * sum1 ) + ( sum2 * sum2 ) ) ;
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , - 2 , - 1 , 3 , - 4 } ; int n = arr . length ; System . out . println ( " Length ▁ of ▁ longest ▁ subarray ▁ having ▁ maximum ▁ sum ▁ = ▁ " + lenLongSubarrWithMaxSum ( arr , n ) ) ; } public static int maxSubArraySum ( int [ ] arr , int size ) { int max_so_far = arr [ 0 ] ; int curr_max = arr [ 0 ] ; for ( int i = 1 ; i < size ; i ++ ) { curr_max = Math . max ( arr [ i ] , curr_max + arr [ i ] ) ; max_so_far = Math . max ( max_so_far , curr_max ) ; } return max_so_far ; } public static int lenOfLongSubarrWithGivenSum ( int [ ] arr , int n , int k ) { Map < Integer , Integer > um = new HashMap < > ( ) ; int Sum = 0 ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Sum += arr [ i ] ; if ( Sum == k ) { maxLen = i + 1 ; } if ( ! um . containsKey ( Sum ) ) { um . put ( Sum , i ) ; } if ( um . containsKey ( Sum ) ) { if ( um . containsKey ( Sum - k ) && maxLen < ( i - um . get ( Sum - k ) ) ) { maxLen = i - um . get ( Sum - k ) ; } } } return maxLen ; } public static int lenLongSubarrWithMaxSum ( int [ ] arr , int n ) { int maxSum = maxSubArraySum ( arr , n ) ; return lenOfLongSubarrWithGivenSum ( arr , n , maxSum ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static boolean check ( int x ) { String s = Integer . toString ( x ) ; int prev = ( int ) s . charAt ( 0 ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( ( int ) s . charAt ( i ) != prev + 1 ) { return false ; } prev = ( int ) s . charAt ( i ) ; } return true ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] v = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = scanner . nextInt ( ) ; } int max = - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int p = v [ i ] * v [ j ] ; if ( check ( p ) ) { max = Math . max ( max , p ) ; } } } System . out . println ( max ) ; } }
public class Main { public static void main ( String [ ] args ) { int dividend = 10 ; int divisor = 3 ; int [ ] ans = divide ( dividend , divisor ) ; System . out . print ( ans [ 0 ] + " , ▁ " ) ; System . out . print ( ans [ 1 ] ) ; } public static int [ ] divide ( int dividend , int divisor ) { return find ( dividend , divisor , 1 , dividend ) ; } public static int [ ] find ( int dividend , int divisor , int start , int end ) { if ( start > end ) { return new int [ ] { 0 , dividend } ; } int mid = start + ( end - start ) / 2 ; int n = dividend - divisor * mid ; if ( n > divisor ) { start = mid + 1 ; } else if ( n < 0 ) { end = mid - 1 ; } else { if ( n == divisor ) { mid += 1 ; n = 0 ; } return new int [ ] { mid , n } ; } return find ( dividend , divisor , start , end ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] cities = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { cities [ i ] = input . nextInt ( ) ; } for ( int i = 0 ; i < cities . length ; i ++ ) { if ( i == 0 ) { System . out . println ( Math . abs ( cities [ 0 ] - cities [ 1 ] ) + " ▁ " + Math . abs ( cities [ 0 ] - cities [ cities . length - 1 ] ) ) ; } else if ( i == cities . length - 1 ) { System . out . println ( Math . abs ( cities [ cities . length - 1 ] - cities [ i - 1 ] ) + " ▁ " + Math . abs ( cities [ 0 ] - cities [ cities . length - 1 ] ) ) ; } else { int mn = Math . min ( Math . abs ( cities [ i ] - cities [ i - 1 ] ) , Math . abs ( cities [ i ] - cities [ i + 1 ] ) ) ; int mx = Math . max ( Math . abs ( cities [ i ] - cities [ 0 ] ) , Math . abs ( cities [ i ] - cities [ cities . length - 1 ] ) ) ; System . out . println ( mn + " ▁ " + mx ) ; } } } }
public class Main { public static void solve ( ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int i = scanner . nextInt ( ) ; int [ ] ns = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { ns [ j ] = scanner . nextInt ( ) ; } Arrays . sort ( ns ) ; int k = 1 << ( i * 8 / n ) ; List < Integer > lis = new ArrayList < > ( ) ; for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( ns [ j ] != ns [ j + 1 ] ) { lis . add ( j + 1 ) ; } } lis . add ( n ) ; if ( lis . size ( ) <= k ) { System . out . println ( 0 ) ; } else { int maxDiff = 0 ; for ( int j = 0 ; j < lis . size ( ) - k ; j ++ ) { maxDiff = Math . max ( maxDiff , lis . get ( j + k ) - lis . get ( j ) ) ; } System . out . println ( n - maxDiff ) ; } } public static void main ( String [ ] args ) { solve ( ) ; } }
public class TowerOfHanoi { public static void main ( String [ ] args ) { int n = 4 ; towerOfHanoi ( n , ' A ' , ' D ' , ' B ' , ' C ' ) ; } public static void towerOfHanoi ( int n , char from_rod , char to_rod , char aux_rod1 , char aux_rod2 ) { if ( n == 0 ) { return ; } if ( n == 1 ) { System . out . println ( " Move ▁ disk ▁ " + n + " ▁ from ▁ rod ▁ " + from_rod + " ▁ to ▁ rod ▁ " + to_rod ) ; return ; } towerOfHanoi ( n - 2 , from_rod , aux_rod1 , aux_rod2 , to_rod ) ; System . out . println ( " Move ▁ disk ▁ " + ( n - 1 ) + " ▁ from ▁ rod ▁ " + from_rod + " ▁ to ▁ rod ▁ " + aux_rod2 ) ; System . out . println ( " Move ▁ disk ▁ " + n + " ▁ from ▁ rod ▁ " + from_rod + " ▁ to ▁ rod ▁ " + to_rod ) ; System . out . println ( " Move ▁ disk ▁ " + ( n - 1 ) + " ▁ from ▁ rod ▁ " + aux_rod2 + " ▁ to ▁ rod ▁ " + to_rod ) ; towerOfHanoi ( n - 2 , aux_rod1 , to_rod , from_rod , aux_rod2 ) ; } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String a = "1000" ; String b = "1001" ; String c = "1010" ; String d = "1011" ; String e = "1100" ; String f = "1101" ; String g = "1110" ; String h = "1111" ; String res = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == ' > ' ) res += a ; else if ( ch == ' < ' ) res += b ; else if ( ch == ' + ' ) res += c ; else if ( ch == ' - ' ) res += d ; else if ( ch == ' . ' ) res += e ; else if ( ch == ' , ' ) res += f ; else if ( ch == ' [ ' ) res += g ; else res += h ; } System . out . println ( ( Integer . parseInt ( res , 2 ) ) % ( int ) ( Math . pow ( 10 , 6 ) + 3 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; Map < String , String > M = new HashMap < > ( ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] query = scanner . nextLine ( ) . split ( " ▁ " ) ; if ( query [ 0 ] . equals ( "0" ) ) { M . put ( query [ 1 ] , query [ 2 ] ) ; } else if ( query [ 0 ] . equals ( "1" ) ) { if ( M . containsKey ( query [ 1 ] ) ) { System . out . println ( M . get ( query [ 1 ] ) ) ; } else { System . out . println ( 0 ) ; } } else { M . put ( query [ 1 ] , "0" ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 2 , 3 , 5 , 6 } ; int n = arr . length ; System . out . println ( minSum ( arr , n ) ) ; } public static int minSum ( int [ ] arr , int n ) { int sum = arr [ 0 ] ; int prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= prev ) { prev = prev + 1 ; sum = sum + prev ; } else { sum = sum + arr [ i ] ; prev = arr [ i ] ; } } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int k = 7 ; int res = findN ( k ) ; if ( res == - 1 ) { System . out . println ( " Not ▁ possible " ) ; } else { System . out . println ( res ) ; } } public static int findN ( int k ) { int ans ; if ( k == 0 ) { ans = 3 ; } else if ( k == 1 ) { ans = 1 ; } else if ( k % 4 == 0 ) { ans = k ; } else if ( k % 4 == 3 ) { ans = k - 1 ; } else { ans = - 1 ; } return ans ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 } ; int k = 1 ; int n = arr . length ; System . out . println ( subsetXOR ( arr , n , k ) ) ; } public static int subsetXOR ( int [ ] arr , int n , int K ) { int max_ele = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max_ele ) { max_ele = arr [ i ] ; } } int m = ( 1 << ( int ) ( Math . log ( max_ele ) / Math . log ( 2 ) + 1 ) ) - 1 ; int [ ] [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { dp [ i ] [ j ] [ k ] = 0 ; } } } for ( int i = 0 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] [ 0 ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] ; if ( k != 0 ) { dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ^ arr [ i - 1 ] ] [ k - 1 ] ; } } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += dp [ n ] [ K ] [ i ] ; } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int D = Integer . parseInt ( input [ 0 ] ) ; int G = Integer . parseInt ( input [ 1 ] ) ; int [ ] [ ] PC = new int [ D ] [ 2 ] ; for ( int i = 0 ; i < D ; i ++ ) { String [ ] pcInput = scanner . nextLine ( ) . split ( " ▁ " ) ; PC [ i ] [ 0 ] = Integer . parseInt ( pcInput [ 0 ] ) ; PC [ i ] [ 1 ] = Integer . parseInt ( pcInput [ 1 ] ) ; } int ans = ( int ) Math . pow ( 10 , 9 ) ; for ( int i = 0 ; i < Math . pow ( 2 , D ) ; i ++ ) { int score = 0 ; int problem = 0 ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( ( i >> j ) & 1 ) == 1 ) { score += 100 * ( j + 1 ) * PC [ j ] [ 0 ] + PC [ j ] [ 1 ] ; problem += PC [ j ] [ 0 ] ; } } if ( score > G ) { continue ; } int left = G - score ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( ( i >> j ) & 1 ) == 1 ) { continue ; } if ( left > 100 * ( j + 1 ) * PC [ j ] [ 0 ] + PC [ j ] [ 1 ] ) { } else { int tmp = ( left + ( 100 * ( j + 1 ) ) - 1 ) / ( 100 * ( j + 1 ) ) ; ans = Math . min ( ans , problem + Math . min ( tmp , PC [ j ] [ 0 ] ) ) ; } } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = scanner . nextInt ( ) ; } int s = 0 ; if ( sum ( a ) == m ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } public static int sum ( int [ ] arr ) { int sum = 0 ; for ( int num : arr ) { sum += num ; } return sum ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] l = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int maxi = 0 ; int mini = 0 ; int max = Arrays . stream ( l ) . max ( ) . getAsInt ( ) ; int min = Arrays . stream ( l ) . min ( ) . getAsInt ( ) ; for ( int num : l ) { if ( num == max ) { maxi ++ ; } if ( num == min ) { mini ++ ; } } if ( n == 1 || l . length == Arrays . stream ( l ) . filter ( num -> num == l [ 0 ] ) . count ( ) ) { System . out . println ( 0 ) ; } else { System . out . println ( l . length - maxi - mini ) ; } } }
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( minAbsDiff ( n ) ) ; } public static int minAbsDiff ( int n ) { int left = ( int ) pow ( 2 , floor ( log ( n ) / log ( 2 ) ) ) ; int right = left * 2 ; return Math . min ( ( n - left ) , ( right - n ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr1 = { 3 , 4 , 9 , 1 } ; int [ ] arr2 = { 5 , 3 , 8 , 9 , 10 , 2 , 1 } ; int n = arr1 . length ; int m = arr2 . length ; System . out . println ( " Length ▁ of ▁ LCIS ▁ is ▁ " + LCIS ( arr1 , n , arr2 , m ) ) ; } public static int LCIS ( int [ ] arr1 , int n , int [ ] arr2 , int m ) { int [ ] table = new int [ m ] ; for ( int j = 0 ; j < m ; j ++ ) { table [ j ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { int current = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr1 [ i ] == arr2 [ j ] ) { if ( current + 1 > table [ j ] ) { table [ j ] = current + 1 ; } } if ( arr1 [ i ] > arr2 [ j ] ) { if ( table [ j ] > current ) { current = table [ j ] ; } } } } int result = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( table [ i ] > result ) { result = table [ i ] ; } } return result ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Total ▁ set ▁ bit ▁ count ▁ is ▁ " + countSetBits ( n ) ) ; } public static int countSetBits ( int n ) { int bitCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { bitCount += countSetBitsUtil ( i ) ; } return bitCount ; } public static int countSetBitsUtil ( int x ) { if ( x <= 0 ) { return 0 ; } return ( 0 if ( x % 2 ) == 0 else 1 ) + countSetBitsUtil ( x / 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 7 , 8 , 9 , 1 , 5 } ; int n = arr . length ; quickSort ( arr , 0 , n - 1 ) ; System . out . println ( " Sorted ▁ array : " ) ; printArray ( arr , n ) ; } public static int partition ( int [ ] arr , int low , int high ) { int pivot = arr [ low ] ; int i = low - 1 ; int j = high + 1 ; while ( true ) { i ++ ; while ( arr [ i ] < pivot ) { i ++ ; } j -- ; while ( arr [ j ] > pivot ) { j -- ; } if ( i >= j ) { return j ; } int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } public static void quickSort ( int [ ] arr , int low , int high ) { if ( low < high ) { int pi = partition ( arr , low , high ) ; quickSort ( arr , low , pi ) ; quickSort ( arr , pi + 1 , high ) ; } } public static void printArray ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } }
public class Main { int partition ( int [ ] arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j < high ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } int temp = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp ; return ( i + 1 ) ; } void quickSort ( int [ ] arr , int low , int high ) { if ( low < high ) { int pi = partition ( arr , low , high ) ; quickSort ( arr , low , pi - 1 ) ; quickSort ( arr , pi + 1 , high ) ; } } void printArray ( int [ ] arr , int size ) { for ( int i = 0 ; i < size ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { Main main = new Main ( ) ; int [ ] arr = { 10 , 7 , 8 , 9 , 1 , 5 } ; int n = arr . length ; main . quickSort ( arr , 0 , n - 1 ) ; System . out . println ( " Sorted ▁ array : " ) ; main . printArray ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 3 ; int X = 2 ; int [ ] A = { 1 , - 2 , 3 } ; minPossibleSum ( A , N , X ) ; } public static int maxSubArraySum ( int [ ] a , int size ) { int max_so_far = - 1000000000 ; int max_ending_here = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_so_far < max_ending_here ) { max_so_far = max_ending_here ; } if ( max_ending_here < 0 ) { max_ending_here = 0 ; } } return max_so_far ; } public static void minPossibleSum ( int [ ] a , int n , int x ) { int mxSum = maxSubArraySum ( a , n ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } sum = sum - mxSum + mxSum / x ; System . out . println ( Math . round ( sum * 100.0 ) / 100.0 ) ; } }
``` java import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] p = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { p [ j ] = Integer . parseInt ( input [ j ] ) ; } List < int [ ] > l = new ArrayList < > ( ) ; int var = p [ 0 ] ; List < int [ ] > ans = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { l . add ( new int [ ] { p [ j ] , j } ) ; } l . sort ( ( a , b ) -> Integer . compare ( b [ 0 ] , a [ 0 ] ) ) ; Collections . reverse ( l ) ; ans . add ( Arrays . copyOfRange ( p , l . get ( 0 ) [ 1 ] , n ) ) ; for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( l . get ( j + 1 ) [ 1 ] > l . get ( j ) [ 1 ] ) { int [ ] temp = l . get ( j + 1 ) ; l . set ( j + 1 , l . get ( j ) ) ; l . set ( j , temp ) ; } else { ans . add ( Arrays . copyOfRange ( p , l . get ( j + 1 ) [ 1 ] , l . get ( j ) [ 1 ] ) ) ; } } for ( int j = 0 ; j < ans . size ( ) ; j ++ ) { for ( int k : ans . get ( j ) ) { System . out . print ( k + " ▁ " ) ; } } System . out . println ( ) ; } } } ```
public class Main { public static void printArray ( int N , int SUM , int K ) { int minSum = ( N * ( N + 1 ) ) / 2 ; int maxSum = ( N * K ) - ( N * ( N - 1 ) ) / 2 ; if ( minSum > SUM || maxSum < SUM ) { System . out . println ( " Not ▁ Possible " ) ; return ; } int [ ] arr = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { arr [ i ] = i ; } int sum = minSum ; int i = N ; while ( i >= 1 ) { int x = sum + ( K - i ) ; if ( x < SUM ) { sum = sum + ( K - i ) ; arr [ i ] = K ; K -= 1 ; } else { arr [ i ] += ( SUM - sum ) ; sum = SUM ; break ; } i -= 1 ; } for ( int i = 1 ; i <= N ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int N = 3 ; int SUM = 15 ; int K = 8 ; printArray ( N , SUM , K ) ; } }
public class Main { static final int COST = 3 ; public static void main ( String [ ] args ) { int x = 4 ; int y = 5 ; int z = 6 ; System . out . println ( maxItems ( x , y , z ) ) ; } public static int maxItems ( int x , int y , int z ) { int type1 = x / COST ; x %= COST ; int type2 = y / COST ; y %= COST ; int type3 = z / COST ; z %= COST ; int type4 = Math . min ( x , Math . min ( y , z ) ) ; int maxItems = type1 + type2 + type3 + type4 ; return maxItems ; } }
import java . util . ArrayDeque ; import java . util . Deque ; public class Main { public static void main ( String [ ] args ) { Deque < Integer > A = new ArrayDeque < > ( ) ; A . add ( 3 ) ; A . add ( 2 ) ; A . add ( 1 ) ; A . add ( 4 ) ; Deque < Integer > B = new ArrayDeque < > ( ) ; B . add ( 4 ) ; B . add ( 1 ) ; B . add ( 3 ) ; B . add ( 2 ) ; System . out . println ( runTasks ( A , B ) ) ; } public static int runTasks ( Deque < Integer > A , Deque < Integer > B ) { int totalTime = 0 ; while ( ! A . isEmpty ( ) ) { int x = A . poll ( ) ; int y = B . poll ( ) ; if ( x == y ) { totalTime += 1 ; } else { B . addFirst ( y ) ; A . addLast ( x ) ; totalTime += 2 ; } } return totalTime ; } }
public class Main { public static void line ( int x0 , int y0 ) { int c = 2 * y0 * x0 ; System . out . println ( String . format ( " % .1f " , ( double ) y0 ) + " x " + " ▁ + ▁ " + String . format ( " % .1f " , ( double ) x0 ) + " y ▁ = ▁ " + String . format ( " % .1f " , ( double ) c ) ) ; } public static void main ( String [ ] args ) { int x0 = 4 ; int y0 = 3 ; line ( x0 , y0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] words = scanner . nextLine ( ) . split ( " ▁ " ) ; Set < Set < String > > uniqueSets = new HashSet < > ( ) ; for ( String word : words ) { Set < String > set = new HashSet < > ( Arrays . asList ( word . split ( " " ) ) ) ; uniqueSets . add ( set ) ; } System . out . println ( uniqueSets . size ( ) ) ; } }
import java . util . Scanner ; public class Main { static double EPS = 1e-9 ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int l_num = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = new String [ l_num ] ; for ( int i = 0 ; i < l_num ; i ++ ) { input [ i ] = scanner . nextLine ( ) ; } solve ( input ) ; } static int check_ccw ( Point p0 , Point p1 , Point p2 ) { Point a = new Point ( p1 . x - p0 . x , p1 . y - p0 . y ) ; Point b = new Point ( p2 . x - p0 . x , p2 . y - p0 . y ) ; double cross = a . x * b . y - a . y * b . x ; if ( cross > EPS ) { return 1 ; } else if ( cross < - 1 * EPS ) { return - 1 ; } else if ( dot ( a , b ) < - 1 * EPS ) { return 2 ; } else if ( Math . abs ( a ) < Math . abs ( b ) ) { return - 2 ; } else { return 0 ; } } static boolean check_intersection ( Point p0 , Point p1 , Point p2 , Point p3 ) { return ( check_ccw ( p0 , p1 , p2 ) * check_ccw ( p0 , p1 , p3 ) <= 0 ) && ( check_ccw ( p2 , p3 , p0 ) * check_ccw ( p2 , p3 , p1 ) <= 0 ) ; } static void solve ( String [ ] _lines ) { for ( String line : _lines ) { String [ ] points = line . split ( " ▁ " ) ; Point p0 = new Point ( Integer . parseInt ( points [ 0 ] ) , Integer . parseInt ( points [ 1 ] ) ) ; Point p1 = new Point ( Integer . parseInt ( points [ 2 ] ) , Integer . parseInt ( points [ 3 ] ) ) ; Point p2 = new Point ( Integer . parseInt ( points [ 4 ] ) , Integer . parseInt ( points [ 5 ] ) ) ; Point p3 = new Point ( Integer . parseInt ( points [ 6 ] ) , Integer . parseInt ( points [ 7 ] ) ) ; boolean intersected = check_intersection ( p0 , p1 , p2 , p3 ) ; if ( intersected ) { System . out . println ( "1" ) ; } else { System . out . println ( "0" ) ; } } } static class Point { int x , y ; public
public class Main { public static void main ( String [ ] args ) { String s = " aaaaab " ; if ( isAnyNotPalindrome ( s ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static boolean isAnyNotPalindrome ( String s ) { Set < Character > unique = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { unique . add ( s . charAt ( i ) ) ; } if ( unique . size ( ) > 1 ) { return true ; } else { return false ; } } }
public static int findMajority ( int [ ] arr , int n ) { return arr [ n / 2 ] ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 2 , 3 } ; int n = arr . length ; System . out . println ( findMajority ( arr , n ) ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int x = input . nextInt ( ) ; int N = 0 ; int S = 0 ; int po = 0 ; String c = " YES " ; for ( int i = 0 ; i < x ; i ++ ) { String [ ] p = input . nextLine ( ) . split ( " ▁ " ) ; if ( N == 0 && S == 0 ) { if ( ! p [ 1 ] . equals ( " South " ) ) { c = " NO " ; break ; } } if ( S - N == 20000 ) { if ( ! p [ 1 ] . equals ( " North " ) ) { c = " NO " ; break ; } } if ( p [ 1 ] . equals ( " North " ) ) { po -= Integer . parseInt ( p [ 0 ] ) ; N += Integer . parseInt ( p [ 0 ] ) ; if ( po < 0 ) { c = " NO " ; break ; } } else if ( p [ 1 ] . equals ( " South " ) ) { S += Integer . parseInt ( p [ 0 ] ) ; po += Integer . parseInt ( p [ 0 ] ) ; if ( po > 20000 ) { c = " NO " ; break ; } } if ( N == S ) { N = 0 ; S = 0 ; } } if ( N != S ) { c = " NO " ; } System . out . println ( c ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 4 , 5 } ; int n = arr . length ; int k = 6 ; System . out . println ( countSubArrays ( arr , n , k ) ) ; } public static int countSubArrays ( int [ ] arr , int n , int K ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k <= j ; k ++ ) { bitwise_or = bitwise_or | arr [ k ] ; } if ( bitwise_or >= K ) { count ++ ; } } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int a1 = 6 ; int b1 = 3 ; int c1 = 2 ; int k1 = 7 ; if ( canBeEqual ( a1 , b1 , c1 , k1 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean canBeEqual ( int a , int b , int c , int k ) { int [ ] arr = new int [ 3 ] ; arr [ 0 ] = a ; arr [ 1 ] = b ; arr [ 2 ] = c ; Arrays . sort ( arr ) ; int diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ; k = k - diff ; if ( k < 0 || k % 3 != 0 ) { return false ; } return true ; } }
int [ ] [ ] adjacency = new int [ 100 ] [ ] ; for ( int i = 0 ; i < 100 ; i ++ ) { adjacency [ i ] = new int [ 0 ] ; } void insert ( int x , int y ) { int [ ] temp = new int [ adjacency [ x ] . length + 1 ] ; for ( int i = 0 ; i < adjacency [ x ] . length ; i ++ ) { temp [ i ] = adjacency [ x ] [ i ] ; } temp [ adjacency [ x ] . length ] = y ; adjacency [ x ] = temp ; } void dfs ( int node , int [ ] leaf , int [ ] vis ) { leaf [ node ] = 0 ; vis [ node ] = 1 ; for ( int it : adjacency [ node ] ) { if ( vis [ it ] == 0 ) { dfs ( it , leaf , vis ) ; leaf [ node ] += leaf [ it ] ; } } if ( adjacency [ node ] . length == 0 ) { leaf [ node ] = 1 ; } } void printLeaf ( int n , int [ ] leaf ) { for ( int i = 1 ; i <= n ; i ++ ) { System . out . println ( " The ▁ node ▁ " + i + " ▁ has ▁ " + leaf [ i ] + " ▁ leaf ▁ nodes " ) ; } } int N = 6 ; insert ( 1 , 2 ) ; insert ( 1 , 3 ) ; insert ( 3 , 4 ) ; insert ( 3 , 5 ) ; insert ( 3 , 6 ) ; int [ ] leaf = new int [ N + 1 ] ; int [ ] vis = new int [ N + 1 ] ; dfs ( 1 , leaf , vis ) ; printLeaf ( N , leaf ) ;
import java . util . * ; import java . io . * ; public class Main { static int inf = ( int ) Math . pow ( 10 , 20 ) ; static double eps = 1.0 / Math . pow ( 10 , 10 ) ; static int mod = ( int ) ( Math . pow ( 10 , 9 ) + 7 ) ; static int [ ] [ ] dd = { { - 1 , 0 } , { 0 , 1 } , { 1 , 0 } , { 0 , - 1 } } ; static int [ ] [ ] ddn = { { - 1 , 0 } , { - 1 , 1 } , { 0 , 1 } , { 1 , 1 } , { 1 , 0 } , { 1 , - 1 } , { 0 , - 1 } , { - 1 , - 1 } } ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; int k = sc . nextInt ( ) ; int l = 0 ; for ( char c : s . toCharArray ( ) ) { if ( c != '1' ) { break ; } l ++ ; } if ( l >= k ) { System . out . println ( 1 ) ; } else { System . out . println ( s . charAt ( l ) ) ; } } }
import java . util . * ; import java . io . * ; class Main { static class Pair { int first , second ; Pair ( int first , int second ) { this . first = first ; this . second = second ; } } static BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; static StringTokenizer st ; static int ni ( ) throws Exception { if ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return Integer . parseInt ( st . nextToken ( ) ) ; } static String ns ( ) throws Exception { if ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } static long nl ( ) throws Exception { if ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return Long . parseLong ( st . nextToken ( ) ) ; } static double nd ( ) throws Exception { if ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return Double . parseDouble ( st . nextToken ( ) ) ; } static void main ( String [ ] args ) throws Exception { int t = 1 ; while ( t -- > 0 ) { solution ( ) ; } } static void solution ( ) throws Exception { String line = br . readLine ( ) ; Map < Character , Integer > boughtCount = new HashMap < > ( ) ; for ( char c : line . toCharArray ( ) ) { boughtCount . put ( c , boughtCount . getOrDefault ( c , 0 ) + 1 ) ; } line = br . readLine ( ) ; Map < Character , Integer > madeCount = new HashMap < > ( ) ; for ( char c : line . toCharArray ( ) ) { madeCount . put ( c , madeCount . getOrDefault ( c , 0 ) + 1 ) ; } int res = 0 ; for ( char color : madeCount . keySet ( ) ) { if ( ! boughtCount . containsKey ( color ) ) { System . out . println ( - 1 ) ; return ; } res += Math . min ( boughtCount . get ( color ) , madeCount . get ( color ) ) ; } System . out . println ( res ) ; } }
public class Main { public static void main ( String [ ] args ) { String X = " AGGT12" ; String Y = "12TXAYB " ; String Z = "12XBA " ; int m = X . length ( ) ; int n = Y . length ( ) ; int o = Z . length ( ) ; System . out . println ( " Length ▁ of ▁ LCS ▁ is ▁ " + lcsOf3 ( X , Y , Z , m , n , o ) ) ; } public static int lcsOf3 ( String X , String Y , String Z , int m , int n , int o ) { int [ ] [ ] [ ] L = new int [ m + 1 ] [ n + 1 ] [ o + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) { L [ i ] [ j ] [ k ] = 0 ; } else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) && X . charAt ( i - 1 ) == Z . charAt ( k - 1 ) ) { L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 ; } else { L [ i ] [ j ] [ k ] = Math . max ( Math . max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) , L [ i ] [ j ] [ k - 1 ] ) ; } } } } return L [ m ] [ n ] [ o ] ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] r = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = Integer . parseInt ( input [ i ] ) ; } int ans = Math . abs ( r [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { ans += Math . abs ( r [ i ] - r [ i - 1 ] ) ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; int [ ] a = { 1 , 1 , 2 } ; if ( isSpiltPossible ( n , a ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static boolean isSpiltPossible ( int n , int [ ] a ) { int sum = 0 ; int c1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( a [ i ] == 1 ) { c1 += 1 ; } } if ( sum % 2 != 0 ) { return false ; } if ( ( sum / 2 ) % 2 == 0 ) { return true ; } if ( c1 > 0 ) { return true ; } else { return false ; } } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = Integer . parseInt ( input [ i ] ) ; } int [ ] f = new int [ 4 ] ; for ( int i : l ) { if ( i == 1 ) { f [ 0 ] += 1 ; f [ 1 ] = Math . max ( f [ 0 ] , f [ 1 ] ) ; f [ 2 ] = Math . max ( f [ 2 ] + 1 , f [ 2 ] ) ; f [ 3 ] = Math . max ( f [ 3 ] , f [ 2 ] ) ; } else { f [ 1 ] = Math . max ( f [ 1 ] + 1 , f [ 0 ] ) ; f [ 2 ] = Math . max ( f [ 2 ] , f [ 1 ] ) ; f [ 3 ] = Math . max ( f [ 3 ] + 1 , f [ 2 ] ) ; } } System . out . println ( f [ 3 ] ) ; } } ```
public class Main { public static void count_even_odd ( int min , int max , int [ ] [ ] steps ) { boolean beven = true ; boolean aeven = false ; int n = 2 ; for ( int i = 0 ; i < n ; i ++ ) { int a = steps [ i ] [ 0 ] ; int b = steps [ i ] [ 1 ] ; if ( ! ( aeven || ( a & 1 ) != 0 ) ) { aeven = true ; } if ( beven ) { if ( ( b & 1 ) != 0 ) { beven = false ; } } else if ( ( a & 1 ) != 0 ) { if ( ( b & 1 ) == 0 ) { beven = true ; } } else { if ( ( b & 1 ) != 0 ) { beven = true ; } } } int even , odd ; if ( beven ) { even = ( max / 2 ) - ( ( min - 1 ) / 2 ) ; odd = 0 ; } else { even = ( max / 2 ) - ( ( min - 1 ) / 2 ) ; odd = 0 ; } if ( ! ( beven ^ aeven ) ) { even += ( max - min + 1 - ( max / 2 ) + ( ( min - 1 ) / 2 ) ) ; } else { odd += ( max - min + 1 - ( max / 2 ) + ( ( min - 1 ) / 2 ) ) ; } System . out . println ( " even ▁ = ▁ " + even + " , ▁ odd ▁ = ▁ " + odd ) ; } public static void main ( String [ ] args ) { int min = 1 ; int max = 4 ; int [ ] [ ] steps = { { 1 , 2 } , { 3 , 4 } } ; count_even_odd ( min , max , steps ) ; } }
Scanner sc = new Scanner ( System . in ) ; String [ ] input = sc . nextLine ( ) . split ( " ▁ " ) ; int vamshi = Integer . parseInt ( input [ 0 ] ) ; int z = Integer . parseInt ( input [ 1 ] ) ; System . out . println ( ( ( vamshi / z + 1 ) * z ) ) ;
public class Main { public static void printKPFNums ( int A , int B , int K ) { boolean [ ] prime = new boolean [ B + 1 ] ; int [ ] p_factors = new int [ B + 1 ] ; for ( int i = 2 ; i <= B ; i ++ ) { prime [ i ] = true ; } for ( int p = 2 ; p <= B ; p ++ ) { if ( p_factors [ p ] == 0 ) { for ( int i = p ; i <= B ; i += p ) { p_factors [ i ] = p_factors [ i ] + 1 ; } } } for ( int i = A ; i <= B ; i ++ ) { if ( p_factors [ i ] == K ) { System . out . print ( i + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int A = 14 ; int B = 18 ; int K = 2 ; printKPFNums ( A , B , K ) ; } }
public class Main { public static void reverserWords ( String string ) { String [ ] words = string . split ( " ▁ " ) ; for ( int i = 0 ; i < words . length ; i ++ ) { String word = words [ i ] ; for ( int j = word . length ( ) - 1 ; j >= 0 ; j -- ) { System . out . print ( word . charAt ( j ) ) ; } if ( i < words . length - 1 ) { System . out . print ( " ▁ " ) ; } } } public static void main ( String [ ] args ) { String string = " Geeks ▁ for ▁ Geeks " ; reverserWords ( string ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String input1 = scanner . nextLine ( ) ; String input2 = scanner . nextLine ( ) ; int a = 0 ; int b = 0 ; for ( int i = 0 ; i < input1 . length ( ) ; i ++ ) { char x = input1 . charAt ( i ) ; char y = input2 . charAt ( i ) ; if ( x > y ) { a ++ ; } else if ( x < y ) { b ++ ; } } if ( a == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( b / a + 1 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int N = n + 2 ; int [ ] is_prime = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { is_prime [ i ] = 1 ; } is_prime [ 0 ] = 0 ; is_prime [ 1 ] = 0 ; sieve ( N , is_prime , n ) ; } public static void sieve ( int N , int [ ] is_prime , int n ) { int i = 2 ; while ( i * i <= N ) { if ( is_prime [ i ] == 0 ) { i ++ ; continue ; } int j = 2 * i ; while ( j < N ) { is_prime [ j ] = 0 ; j += i ; } i ++ ; } int c = 0 ; if ( n < 5 ) { c = 1 ; String s = "1 ▁ " ; for ( int k = 2 ; k <= n ; k ++ ) { if ( ( k + 1 ) != 4 ) { s += "1 ▁ " ; } else { s += "2 ▁ " ; c ++ ; } } System . out . println ( c ) ; System . out . println ( s ) ; } else { System . out . println ( "2" ) ; String s = " " ; for ( int k = 1 ; k <= n ; k ++ ) { int m = k + 1 ; if ( is_prime [ m ] == 1 ) { s += "1 ▁ " ; } else { s += "2 ▁ " ; } } System . out . println ( s ) ; } } }
import java . util . Scanner ; import java . util . Stack ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( scanner . hasNextLine ( ) ) { String line = scanner . nextLine ( ) ; Stack < Double > stack = new Stack < > ( ) ; for ( String s : line . split ( " ▁ " ) ) { if ( s . matches ( " [ - + ] ? \\ d + " ) ) { stack . push ( Double . parseDouble ( s ) ) ; } else if ( s . equals ( " + " ) ) { double n = stack . pop ( ) ; stack . push ( stack . pop ( ) + n ) ; } else if ( s . equals ( " - " ) ) { double n = stack . pop ( ) ; stack . push ( stack . pop ( ) - n ) ; } else if ( s . equals ( " * " ) ) { double n = stack . pop ( ) ; stack . push ( stack . pop ( ) * n ) ; } else if ( s . equals ( " / " ) ) { double n = stack . pop ( ) ; stack . push ( stack . pop ( ) / n ) ; } } System . out . printf ( " % .6f \n " , stack . peek ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; System . out . println ( - ( - k / n ) ) ; } }
public class Main { public static void findNthTerm ( int n ) { if ( n % 2 == 0 ) { n /= 2 ; System . out . println ( Math . pow ( 3 , n - 1 ) ) ; } else { n = ( n / 2 ) + 1 ; System . out . println ( Math . pow ( 2 , n - 1 ) ) ; } } public static void main ( String [ ] args ) { int N = 4 ; findNthTerm ( N ) ; N = 11 ; findNthTerm ( N ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 2 , 3 , 7 , 1 , 1 } ; int n = arr . length ; System . out . println ( countNonIncreasing ( arr , n ) ) ; } public static int countNonIncreasing ( int [ ] arr , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i + 1 ] >= arr [ i ] ) { len += 1 ; } else { cnt += ( ( ( len + 1 ) * len ) / 2 ) ; len = 1 ; } } if ( len > 1 ) { cnt += ( ( ( len - 1 ) * len ) / 2 ) ; } return cnt ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] A1 = { 1 , 2 , 3 , 4 , 5 } ; int [ ] A2 = { 5 , 4 , 3 , 2 , 1 } ; int n = 5 ; int x = 3 ; int y = 3 ; System . out . println ( maximize ( A1 , A2 , n , x , y ) ) ; } public static int maximize ( int [ ] A1 , int [ ] A2 , int n , int x , int y ) { int [ ] c = new int [ n ] ; int Sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = A2 [ i ] - A1 [ i ] ; Sum += A1 [ i ] ; } Arrays . sort ( c ) ; for ( int i = 0 ; i < n / 2 ; i ++ ) { int temp = c [ i ] ; c [ i ] = c [ n - i - 1 ] ; c [ n - i - 1 ] = temp ; } int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { Sum += c [ i ] ; if ( i + 1 >= ( n - x ) ) { maxi = Math . max ( Sum , maxi ) ; } } return maxi ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int x = input . nextInt ( ) ; if ( x / 1000 > 0 ) { System . out . println ( 10 * ( x % 10 - 1 ) + 10 ) ; } else if ( x / 100 > 0 ) { System . out . println ( 10 * ( x % 10 - 1 ) + 6 ) ; } else if ( x / 10 > 0 ) { System . out . println ( 10 * ( x % 10 - 1 ) + 3 ) ; } else { System . out . println ( 10 * ( x % 10 - 1 ) + 1 ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; double [ ] [ ] cost = new double [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cost [ i ] [ j ] = Double . POSITIVE_INFINITY ; } } int m = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < m ; k ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " , " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; double c = Double . parseDouble ( input [ 2 ] ) ; double d = Double . parseDouble ( input [ 3 ] ) ; cost [ a - 1 ] [ b - 1 ] = c ; cost [ b - 1 ] [ a - 1 ] = d ; } String [ ] input2 = scanner . nextLine ( ) . split ( " , " ) ; int s = Integer . parseInt ( input2 [ 0 ] ) ; int g = Integer . parseInt ( input2 [ 1 ] ) ; double V = Double . parseDouble ( input2 [ 2 ] ) ; double P = Double . parseDouble ( input2 [ 3 ] ) ; for ( int k = 0 ; k < n ; k ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( cost [ i ] [ j ] > cost [ i ] [ k ] + cost [ k ] [ j ] ) { cost [ i ] [ j ] = cost [ i ] [ k ] + cost [ k ] [ j ] ; } } } } System . out . println ( V - P - cost [ s - 1 ] [ g - 1 ] - cost [ g - 1 ] [ s - 1 ] ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int r1 , r2 , c1 , c2 , d1 , d2 ; r1 = scanner . nextInt ( ) ; r2 = scanner . nextInt ( ) ; c1 = scanner . nextInt ( ) ; c2 = scanner . nextInt ( ) ; d1 = scanner . nextInt ( ) ; d2 = scanner . nextInt ( ) ; int x = ( d1 + c1 - r2 ) / 2 ; int y = r1 - x ; int z = c1 - x ; int w = d1 - x ; if ( 1 <= x && x <= 9 && 1 <= y && y <= 9 && 1 <= z && z <= 9 && 1 <= w && w <= 9 && ( new HashSet < > ( Arrays . asList ( x , y , z , w ) ) ) . size ( ) == 4 ) { System . out . println ( x + " ▁ " + y ) ; System . out . println ( z + " ▁ " + w ) ; } else { System . out . println ( - 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; if ( n == 0 && m == 0 ) { break ; } List < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a . add ( scanner . nextInt ( ) ) ; } List < Integer > w = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { w . add ( scanner . nextInt ( ) ) ; } Set < Integer > set = new HashSet < > ( ) ; go ( 0 , 0 , m , w , set ) ; boolean ans = false ; for ( int i : a ) { if ( ! set . contains ( i ) ) { if ( ! ans ) { Set < Integer > temp = new HashSet < > ( ) ; for ( int s : set ) { temp . add ( Math . abs ( s - i ) ) ; } set = temp ; ans = true ; } else { Set < Integer > temp = new HashSet < > ( ) ; for ( int s : set ) { if ( set . contains ( i + s ) || set . contains ( i - s ) ) { temp . add ( s ) ; } } set = temp ; } } } if ( ! ans ) { System . out . println ( 0 ) ; } else if ( set . size ( ) == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( Collections . min ( set ) ) ; } } } public static void go ( int i , int weight , int m , List < Integer > w , Set < Integer > set ) { if ( i == m ) { set . add ( weight ) ; return ; } go ( i + 1 , weight , m , w , set ) ; go ( i + 1 , weight + w . get ( i ) , m , w , set ) ; go ( i + 1 , weight - w . get ( i ) , m , w , set ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; Map < String , Double > m = new HashMap < > ( ) ; m . put ( " A " , Double . POSITIVE_INFINITY ) ; m . put ( " B " , Double . POSITIVE_INFINITY ) ; m . put ( " C " , Double . POSITIVE_INFINITY ) ; m . put ( " AB " , Double . POSITIVE_INFINITY ) ; m . put ( " AC " , Double . POSITIVE_INFINITY ) ; m . put ( " BC " , Double . POSITIVE_INFINITY ) ; m . put ( " ABC " , Double . POSITIVE_INFINITY ) ; for ( int i = 0 ; i < n ; i ++ ) { String inp = scanner . nextLine ( ) ; String [ ] item = inp . split ( " ▁ " ) ; String l = String . join ( " " , Arrays . asList ( item [ 1 ] . split ( " " ) ) ) ; m . put ( l , Math . min ( m . get ( l ) , Integer . parseInt ( item [ 0 ] ) ) ) ; } double res = Double . POSITIVE_INFINITY ; res = Math . min ( res , m . get ( " A " ) + m . get ( " B " ) + m . get ( " C " ) ) ; res = Math . min ( res , m . get ( " AB " ) + m . get ( " C " ) ) ; res = Math . min ( res , m . get ( " AC " ) + m . get ( " B " ) ) ; res = Math . min ( res , m . get ( " A " ) + m . get ( " BC " ) ) ; res = Math . min ( res , m . get ( " BC " ) + m . get ( " AB " ) ) ; res = Math . min ( res , m . get ( " AC " ) + m . get ( " BC " ) ) ; res = Math . min ( res , m . get ( " AC " ) + m . get ( " AB " ) ) ; res = Math . min ( res , m . get ( " ABC " ) ) ; System . out . println ( res != Double . POSITIVE_INFINITY ? res : - 1 ) ; } }
public class Main { public static boolean startsWith ( String str , String pre ) { int strLen = str . length ( ) ; int preLen = pre . length ( ) ; int i = 0 ; int j = 0 ; while ( i < strLen && j < preLen ) { if ( str . charAt ( i ) != pre . charAt ( j ) ) { return false ; } i ++ ; j ++ ; } return true ; } public static boolean endsWith ( String str , String suff ) { int i = str . length ( ) - 1 ; int j = suff . length ( ) - 1 ; while ( i >= 0 && j >= 0 ) { if ( str . charAt ( i ) != suff . charAt ( j ) ) { return false ; } i -- ; j -- ; } return true ; } public static boolean checkString ( String str , String a , String b ) { if ( str . length ( ) != a . length ( ) + b . length ( ) ) { return false ; } if ( startsWith ( str , a ) ) { if ( endsWith ( str , b ) ) { return true ; } } if ( startsWith ( str , b ) ) { if ( endsWith ( str , a ) ) { return true ; } } return false ; } public static void main ( String [ ] args ) { String str = " GeeksforGeeks " ; String a = " Geeksfo " ; String b = " rGeeks " ; if ( checkString ( str , a , b ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class Main { public static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 ) { for ( int k = 1 ; k < n ; k ++ ) { if ( k % 3 != 0 && ( i + j + k ) == n ) { System . out . println ( i + " ▁ " + j + " ▁ " + k ) ; return ; } } } } } } } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } public static int countIntegralSolutions ( int n ) { int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { if ( i + j + k == n ) { result ++ ; } } } } return result ; } }
public class Main { static final int TEN = 10 ; public static void main ( String [ ] args ) { int n = 10 ; firstNTerms ( n ) ; } public static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % TEN ; n /= TEN ; } return sum ; } public static int getNthTerm ( int n ) { int sum = digitSum ( n ) ; if ( sum % TEN == 0 ) { return ( n * TEN ) ; } int extra = TEN - ( sum % TEN ) ; return ( ( n * TEN ) + extra ) ; } public static void firstNTerms ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( getNthTerm ( i ) + " ▁ " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int maxProduct = breakInteger ( 10 ) ; System . out . println ( maxProduct ) ; } public static int power ( int x , int a ) { int res = 1 ; while ( a > 0 ) { if ( ( a & 1 ) == 1 ) { res = res * x ; } x = x * x ; a >>= 1 ; } return res ; } public static int breakInteger ( int N ) { if ( N == 2 ) { return 1 ; } if ( N == 3 ) { return 2 ; } int maxProduct = 0 ; if ( N % 3 == 0 ) { maxProduct = power ( 3 , N / 3 ) ; return maxProduct ; } else if ( N % 3 == 1 ) { maxProduct = 2 * 2 * power ( 3 , N / 3 - 1 ) ; return maxProduct ; } else if ( N % 3 == 2 ) { maxProduct = 2 * power ( 3 , N / 3 ) ; return maxProduct ; } return maxProduct ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = 1000001 ; double [ ] table = new double [ N + 1 ] ; for ( int i = 0 ; i <= N ; i ++ ) { table [ i ] = i ; } for ( int i = 2 ; i <= N ; i ++ ) { if ( table [ i ] == i ) { for ( int j = i ; j <= N ; j += i ) { table [ j ] *= 1 - 1.0 / i ; } } } table [ 0 ] = 1 ; double [ ] ans = new double [ N + 1 ] ; ans [ 0 ] = table [ 0 ] ; for ( int i = 1 ; i <= N ; i ++ ) { ans [ i ] = ans [ i - 1 ] + table [ i ] ; } int T = input . nextInt ( ) ; for ( int i = 0 ; i < T ; i ++ ) { int a = input . nextInt ( ) ; System . out . println ( ( int ) ans [ a ] ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; System . out . println ( "2018" + s . substring ( 4 ) ) ; } }
import java . util . LinkedList ; import java . util . Queue ; public class Main { static final int MAX_CHAR = 26 ; public static void firstnonrepeating ( String str ) { Queue < Character > q = new LinkedList < > ( ) ; int [ ] charCount = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { q . add ( str . charAt ( i ) ) ; charCount [ str . charAt ( i ) - ' a ' ] += 1 ; while ( ! q . isEmpty ( ) ) { if ( charCount [ q . peek ( ) - ' a ' ] > 1 ) { q . poll ( ) ; } else { System . out . print ( q . peek ( ) + " ▁ " ) ; break ; } } if ( q . isEmpty ( ) ) { System . out . print ( - 1 + " ▁ " ) ; } } System . out . println ( ) ; } public static void main ( String [ ] args ) { String str = " aabc " ; firstnonrepeating ( str ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; Map < Integer , List < Integer > > graph = new HashMap < > ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; if ( ! graph . containsKey ( x ) ) { graph . put ( x , new ArrayList < > ( ) ) ; } if ( ! graph . containsKey ( y ) ) { graph . put ( y , new ArrayList < > ( ) ) ; } graph . get ( x ) . add ( y ) ; graph . get ( y ) . add ( x ) ; } int left = 0 ; int right = 0 ; Map < Integer , Integer > color = new HashMap < > ( ) ; Set < Integer > visited = new HashSet < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! visited . contains ( i ) ) { visited . add ( i ) ; dfs ( i , graph , color , visited ) ; } } for ( int val = 1 ; val <= n ; val ++ ) { if ( color . get ( val ) == 0 ) { left ++ ; } else { right ++ ; } } System . out . println ( left * right - n + 1 ) ; } public static void dfs ( int node , Map < Integer , List < Integer > > graph , Map < Integer , Integer > color , Set < Integer > visited ) { List < Integer > level = new ArrayList < > ( ) ; level . add ( node ) ; if ( ! color . containsKey ( node ) ) { color . put ( node , 1 ) ; } while ( ! level . isEmpty ( ) ) { node = level . remove ( level . size ( ) - 1 ) ; for ( int val : graph . get ( node ) ) { if ( ! visited . contains ( val ) ) { color . put ( val , 1 - color . get ( node ) ) ; visited . add ( val ) ; level . add ( val ) ; } } } } }
public static int solve ( int n , int m , int obstacles , double [ ] rangee ) { int val = Math . min ( n , m ) ; Arrays . sort ( rangee ) ; int c = 1 ; for ( int i = obstacles - 1 ; i >= 0 ; i -- ) { rangee [ i ] = ( int ) ( 2 * rangee [ i ] ) ; val -= rangee [ i ] ; if ( val <= 0 ) { return c ; } else { c ++ ; } } if ( val > 0 ) { return - 1 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; int e1 = Integer . parseInt ( s ) ; int e2 = Integer . parseInt ( s . substring ( 0 , 1 ) ) ; int i = 1 ; while ( i < s . length ( ) ) { int x = Integer . parseInt ( s . substring ( i + 1 , i + 2 ) ) ; if ( s . charAt ( i ) == ' + ' ) { e2 += x ; } else { e2 *= x ; } i += 2 ; } if ( e1 == t && e2 == t ) { System . out . println ( " U " ) ; } else if ( e1 == t ) { System . out . println ( " M " ) ; } else if ( e2 == t ) { System . out . println ( " L " ) ; } else { System . out . println ( " I " ) ; } } }
public class MinStack { private List < Integer > stack ; private List < Integer > minStack ; public MinStack ( ) { stack = new ArrayList < > ( ) ; minStack = new ArrayList < > ( ) ; } public void push ( int x ) { stack . add ( x ) ; if ( minStack . size ( ) == 0 ) { minStack . add ( x ) ; return ; } if ( x <= minStack . get ( minStack . size ( ) - 1 ) ) { minStack . add ( x ) ; } else { minStack . add ( minStack . get ( minStack . size ( ) - 1 ) ) ; } } public void pop ( ) { if ( stack . size ( ) > 0 ) { minStack . remove ( minStack . size ( ) - 1 ) ; stack . remove ( stack . size ( ) - 1 ) ; } } public int top ( ) { if ( stack . size ( ) > 0 ) { return stack . get ( stack . size ( ) - 1 ) ; } return - 1 ; } public int getMin ( ) { if ( minStack . size ( ) > 0 ) { return minStack . get ( minStack . size ( ) - 1 ) ; } return - 1 ; } public static void main ( String [ ] args ) { MinStack m = new MinStack ( ) ; m . push ( - 2 ) ; m . push ( 0 ) ; m . push ( - 3 ) ; System . out . println ( m . getMin ( ) ) ; m . pop ( ) ; System . out . println ( m . top ( ) ) ; System . out . println ( m . getMin ( ) ) ; } }
String [ ] one = { " " , " one ▁ " , " two ▁ " , " three ▁ " , " four ▁ " , " five ▁ " , " six ▁ " , " seven ▁ " , " eight ▁ " , " nine ▁ " , " ten ▁ " , " eleven ▁ " , " twelve ▁ " , " thirteen ▁ " , " fourteen ▁ " , " fifteen ▁ " , " sixteen ▁ " , " seventeen ▁ " , " eighteen ▁ " , " nineteen ▁ " } ; String [ ] ten = { " " , " " , " twenty ▁ " , " thirty ▁ " , " forty ▁ " , " fifty ▁ " , " sixty ▁ " , " seventy ▁ " , " eighty ▁ " , " ninety ▁ " } ; public static String numToWords ( int n , String s ) { String str = " " ; if ( n > 19 ) { str += ten [ n / 10 ] + one [ n % 10 ] ; } else { str += one [ n ] ; } if ( n > 0 ) { str += s ; } return str ; } public static String convertToWords ( int n ) { String out = " " ; out += numToWords ( ( n / 10000000 ) , " crore ▁ " ) ; out += numToWords ( ( ( n / 100000 ) % 100 ) , " lakh ▁ " ) ; out += numToWords ( ( ( n / 1000 ) % 100 ) , " thousand ▁ " ) ; out += numToWords ( ( ( n / 100 ) % 10 ) , " hundred ▁ " ) ; if ( n > 100 && n % 100 > 0 ) { out += " and ▁ " ; } out += numToWords ( ( n % 100 ) , " " ) ; return out ; } public static void main ( String [ ] args ) { int n = 438237764 ; System . out . println ( convertToWords ( n ) ) ; }
public class Main { public static void main ( String [ ] args ) { System . out . println ( " Subtraction ▁ is ▁ " + sub ( 4 , - 2 ) ) ; System . out . println ( " Product ▁ is ▁ " + mul ( - 9 , 6 ) ) ; int a = 8 ; int b = 2 ; if ( b != 0 ) { System . out . println ( " Division ▁ is ▁ " + division ( a , b ) ) ; } else { System . out . println ( " Exception ▁ : - ▁ Divide ▁ by ▁ 0" ) ; } } public static int flipSign ( int a ) { int neg = 0 ; int tmp = a < 0 ? 1 : - 1 ; while ( a != 0 ) { neg += tmp ; a += tmp ; } return neg ; } public static boolean areDifferentSign ( int a , int b ) { return ( a < 0 && b > 0 ) || ( a > 0 && b < 0 ) ; } public static int sub ( int a , int b ) { return a + flipSign ( b ) ; } public static int mul ( int a , int b ) { if ( a < b ) { return mul ( b , a ) ; } int sum = 0 ; for ( int i = Math . abs ( b ) ; i > 0 ; i -- ) { sum += a ; } if ( b < 0 ) { sum = flipSign ( sum ) ; } return sum ; } public static int division ( int a , int b ) { int quotient = 0 ; int divisor = flipSign ( Math . abs ( b ) ) ; for ( int dividend = Math . abs ( a ) ; dividend <= Math . abs ( divisor ) + divisor ; dividend += divisor ) { quotient += 1 ; } if ( areDifferentSign ( a , b ) ) { quotient = flipSign ( quotient ) ; } return quotient ; } }
public class Main { public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial ▁ of ▁ " + num + " ▁ is ▁ " + factorial ( num ) ) ; } public static int factorial ( int n ) { int i = n ; int fact = 1 ; while ( n / i != n ) { fact = fact * i ; i -= 1 ; } return fact ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 0 , 1 , 0 , 1 , 1 , 0 } ; int n = arr . length ; int x = 2 ; System . out . println ( CntDivbyX ( arr , n , x ) ) ; } public static int CntDivbyX ( int [ ] arr , int n , int x ) { int number = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { number = number * 2 + arr [ i ] ; if ( number % x == 0 ) { count ++ ; } } return count ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } Map < Integer , Integer > d = new HashMap < > ( ) ; for ( int x : a ) { int c = 0 ; while ( x > 0 ) { c += x % 2 ; x /= 2 ; } d . put ( c , d . getOrDefault ( c , 0 ) + 1 ) ; } int ans = 0 ; for ( int v : d . values ( ) ) { ans += v * ( v - 1 ) / 2 ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 2 , 3 } ; int N = arr . length ; int k = 5 ; System . out . println ( min_noOf_operation ( arr , N , k ) ) ; } public static int min_noOf_operation ( int [ ] arr , int n , int k ) { int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int noOfSubtraction = 0 ; if ( arr [ i ] > arr [ i - 1 ] ) { noOfSubtraction = ( arr [ i ] - arr [ i - 1 ] ) / k ; if ( ( arr [ i ] - arr [ i - 1 ] ) % k != 0 ) { noOfSubtraction += 1 ; } arr [ i ] = arr [ i ] - k * noOfSubtraction ; } res = res + noOfSubtraction ; } return ( int ) res ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 4 , 5 , 6 , 7 } ; int X = 5 ; int n = arr . length ; System . out . println ( CountSubSet ( arr , n , X ) ) ; } public static int CountSubSet ( int [ ] arr , int n , int X ) { int N = ( int ) Math . pow ( 2 , n ) ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { if ( arr [ j ] == X ) { count ++ ; } } } } return count ; } }
int n = 5 ; public static int FindMaxProduct ( int [ ] [ ] arr , int n ) { int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( j - 3 ) >= 0 ) { int result = ( arr [ i ] [ j ] * arr [ i ] [ j - 1 ] * arr [ i ] [ j - 2 ] * arr [ i ] [ j - 3 ] ) ; if ( max < result ) { max = result ; } } if ( ( i - 3 ) >= 0 ) { int result = ( arr [ i ] [ j ] * arr [ i - 1 ] [ j ] * arr [ i - 2 ] [ j ] * arr [ i - 3 ] [ j ] ) ; if ( max < result ) { max = result ; } } if ( ( i - 3 ) >= 0 && ( j - 3 ) >= 0 ) { int result = ( arr [ i ] [ j ] * arr [ i - 1 ] [ j - 1 ] * arr [ i - 2 ] [ j - 2 ] * arr [ i - 3 ] [ j - 3 ] ) ; if ( max < result ) { max = result ; } } if ( ( i - 3 ) >= 0 && ( j - 1 ) <= 0 ) { int result = ( arr [ i ] [ j ] * arr [ i - 1 ] [ j + 1 ] * arr [ i - 2 ] [ j + 2 ] * arr [ i - 3 ] [ j + 3 ] ) ; if ( max < result ) { max = result ; } } } } return max ; } public static void main ( String [ ] args ) { int [ ] [ ] arr = { { 1 , 2 , 3 , 4 , 5 } , { 6 , 7 , 8 , 9 , 1 } , { 2 , 3 , 4 , 5 , 6 } , { 7 , 8 , 9 , 1 , 0 } , { 9 , 6 , 4 , 2 , 3 } } ; System . out . println ( FindMaxProduct ( arr , n ) ) ; }
public class Main { static int MAX = 50002 ; static List < Integer > primes = new ArrayList < > ( ) ; public static void sieve ( ) { boolean [ ] isPrime = new boolean [ MAX ] ; Arrays . fill ( isPrime , true ) ; int p = 2 ; while ( p * p < MAX ) { if ( isPrime [ p ] ) { for ( int i = p * 2 ; i < MAX ; i += p ) { isPrime [ i ] = false ; } } p ++ ; } for ( int i = 2 ; i < MAX ; i ++ ) { if ( isPrime [ i ] ) { primes . add ( i ) ; } } } public static int power ( int x , int y ) { int count = 0 ; int z = y ; while ( x >= z ) { count += ( x / z ) ; z *= y ; } return count ; } public static int modMult ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) { res = ( res + a ) % mod ; } a = ( a * 2 ) % mod ; b /= 2 ; } return res % mod ; } public static int countWays ( int n , int m ) { int ans = 1 ; for ( int i = 1 ; i < primes . size ( ) ; i ++ ) { int powers = power ( n , primes . get ( i ) ) ; if ( powers == 0 ) { break ; } ans = modMult ( ans , powers + 1 , m ) % m ; } if ( ( ( ans - 1 ) % m ) < 0 ) { return ( ans - 1 + m ) % m ; } else { return ( ans - 1 ) % m ; } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 4 ; int m = 7 ; System . out . println ( countWays ( n , m ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 5 , 6 , 3 , 3 } ; int n = arr . length ; System . out . println ( smallestIndexsum ( arr , n ) ) ; } public static int smallestIndexsum ( int [ ] arr , int n ) { int i = n - 1 ; while ( i >= 0 && arr [ i ] % 2 == 1 ) { i -- ; } int sum = 0 ; for ( int j = 0 ; j <= i ; j ++ ) { sum += arr [ j ] ; } return sum ; } }
import java . time . LocalDate ; import java . time . temporal . ChronoUnit ; public class Main { public static void main ( String [ ] args ) { String [ ] input1 = input . split ( " : " ) ; String [ ] input2 = input . split ( " : " ) ; int y1 = Integer . parseInt ( input1 [ 0 ] ) ; int m1 = Integer . parseInt ( input1 [ 1 ] ) ; int d1 = Integer . parseInt ( input1 [ 2 ] ) ; int y2 = Integer . parseInt ( input2 [ 0 ] ) ; int m2 = Integer . parseInt ( input2 [ 1 ] ) ; int d2 = Integer . parseInt ( input2 [ 2 ] ) ; LocalDate date1 = LocalDate . of ( y1 , m1 , d1 ) ; LocalDate date2 = LocalDate . of ( y2 , m2 , d2 ) ; long res = ChronoUnit . DAYS . between ( date1 , date2 ) ; System . out . println ( Math . abs ( res ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String S = scanner . nextLine ( ) ; int totalQ = 0 ; int CQ = 0 ; int CQAQ = 0 ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { if ( S . charAt ( i ) == ' Q ' ) { totalQ ++ ; } } for ( int i = 0 ; i < S . length ( ) ; i ++ ) { if ( S . charAt ( i ) == ' Q ' ) { CQ ++ ; } else if ( S . charAt ( i ) == ' A ' ) { CQAQ += CQ * ( totalQ - CQ ) ; } } System . out . println ( CQAQ ) ; } }
``` java import java . util . * ; import java . io . * ; public class Main { static int mod = 1000000007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; List < Integer > al = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { al . add ( sc . nextInt ( ) ) ; } Collections . sort ( al , Collections . reverseOrder ( ) ) ; int ss = 0 ; for ( int num : al ) { ss += num ; } int [ ] arrive = new int [ k ] ; arrive [ 0 ] = 1 ; Set < Integer > usefulSet = new HashSet < > ( ) ; for ( int v : al ) { ss -= v ; int uMax = 0 ; if ( v >= k ) { usefulSet . add ( v ) ; continue ; } for ( int i = 0 ; i < arrive . length ; i ++ ) { int p = k - i - 1 ; int isOn = arrive [ p ] ; if ( isOn == 1 && p + v >= k ) { usefulSet . add ( v ) ; uMax = k ; } else if ( isOn == 1 ) { arrive [ p + v ] = 1 ; uMax = Math . max ( uMax , p + v ) ; } } if ( uMax + ss >= k ) { usefulSet . add ( v ) ; } } int ret = 0 ; for ( int v : al ) { if ( ! usefulSet . contains ( v ) ) { ret ++ ; } } System . out . println ( ret ) ; } } ```
Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int s = Integer . parseInt ( input [ 1 ] ) ; int m = s / n ; if ( s % n == 0 ) { System . out . println ( m ) ; } else { System . out . println ( m + 1 ) ; }
public class Main { public static void multiply ( int [ ] v , int x ) { int carry = 0 ; int size = v . length ; for ( int i = 0 ; i < size ; i ++ ) { int res = carry + v [ i ] * x ; v [ i ] = res % 10 ; carry = res / 10 ; } while ( carry != 0 ) { int digit = carry % 10 ; int [ ] temp = new int [ v . length + 1 ] ; System . arraycopy ( v , 0 , temp , 0 , v . length ) ; temp [ v . length ] = digit ; v = temp ; carry /= 10 ; } } public static int findSumOfDigits ( int n ) { int [ ] v = new int [ 1 ] ; v [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { multiply ( v , i ) ; } int sum = 0 ; for ( int i = 0 ; i < v . length ; i ++ ) { sum += v [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int n = 1000 ; System . out . println ( findSumOfDigits ( n ) ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) . split ( " ▁ " ) [ 0 ] ) ; String [ ] field = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { field [ i ] = scanner . nextLine ( ) ; } System . out . println ( nSpidersToSeeIn ( field ) ) ; } public static String nSpidersToSeeIn ( String [ ] field ) { StringBuilder result = new StringBuilder ( ) ; for ( int x = 0 ; x < field [ 0 ] . length ( ) ; x ++ ) { int sum = 0 ; for ( int y = 1 ; y < field . length ; y ++ ) { sum += spiders ( field , x , y ) ; } result . append ( sum ) . append ( " ▁ " ) ; } return result . toString ( ) . trim ( ) ; } public static int spiders ( String [ ] field , int iRow , int iCol ) { int nSpiders = 0 ; int iRight = iRow - iCol ; int iLeft = iRow + iCol ; if ( iRight >= 0 && field [ iCol ] . charAt ( iRight ) == ' R ' ) { nSpiders ++ ; } if ( iLeft < field [ 0 ] . length ( ) && field [ iCol ] . charAt ( iLeft ) == ' L ' ) { nSpiders ++ ; } if ( iCol % 2 == 0 && field [ iCol ] . charAt ( iRow ) == ' U ' ) { nSpiders ++ ; } return nSpiders ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int [ ] out = new int [ n ] ; int [ ] comp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { out [ i ] = 0 ; comp [ i ] = i + 2 ; } for ( int i = 0 ; i < m ; i ++ ) { String [ ] values = scanner . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; int l = Integer . parseInt ( values [ 0 ] ) ; int r = Integer . parseInt ( values [ 1 ] ) ; int x = Integer . parseInt ( values [ 2 ] ) ; int t = l ; while ( t <= r ) { int nextVal = comp [ t - 1 ] ; if ( out [ t - 1 ] == 0 && t != x ) { out [ t - 1 ] = x ; } comp [ t - 1 ] = ( t >= x ) ? r + 1 : x ; t = nextVal ; } } for ( int val : out ) { System . out . print ( val + " ▁ " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } int [ ] ans = new int [ n ] ; int mx = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { ans [ i ] = Math . max ( 0 , mx - arr [ i ] + 1 ) ; if ( arr [ i ] > mx ) { mx = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pell ( n ) ) ; } public static int pell ( int n ) { if ( n <= 2 ) { return n ; } return ( 2 * pell ( n - 1 ) + pell ( n - 2 ) ) ; } }
Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int i = 1 ; int j = n * n ; while ( i < j ) { System . out . println ( i + " ▁ " + j ) ; i ++ ; j -- ; }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int asize = arr . length ; int n = 5 ; printSmall ( arr , asize , n ) ; } public static int binarySearch ( int [ ] arr , int low , int high , int ele ) { while ( low < high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == ele ) { return mid ; } else if ( arr [ mid ] > ele ) { high = mid ; } else { low = mid + 1 ; } } return - 1 ; } public static void printSmall ( int [ ] arr , int asize , int n ) { int [ ] copyArr = arr . clone ( ) ; Arrays . sort ( copyArr ) ; for ( int i = 0 ; i < asize ; i ++ ) { if ( binarySearch ( copyArr , 0 , n , arr [ i ] ) > - 1 ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( countNumbers ( n ) ) ; } public static int countNumbers ( int n ) { int k = 0 ; int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) { count += Math . pow ( 2 , k ) ; } k ++ ; n >>= 1 ; } return count ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int R = Integer . parseInt ( scanner . nextLine ( ) . split ( " ▁ " ) [ - 1 ] ) ; int [ ] buyPrices = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] sellPrices = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int bestBuy = Arrays . stream ( buyPrices ) . min ( ) . getAsInt ( ) ; int bestSell = Arrays . stream ( sellPrices ) . max ( ) . getAsInt ( ) ; int numBuy = R / bestBuy ; System . out . println ( Math . max ( R , R + ( bestSell - bestBuy ) * numBuy ) ) ; } }
import java . util . * ; public class Main { static int maximum = Integer . MIN_VALUE ; static int x ; static int ans = Integer . MAX_VALUE ; static List < List < Integer > > graph = new ArrayList < > ( ) ; static int [ ] weight = new int [ 100 ] ; public static void main ( String [ ] args ) { x = 15 ; weight [ 1 ] = 5 ; weight [ 2 ] = 10 ; weight [ 3 ] = 11 ; weight [ 4 ] = 8 ; weight [ 5 ] = 6 ; for ( int i = 0 ; i < 100 ; i ++ ) { graph . add ( new ArrayList < > ( ) ) ; } graph . get ( 1 ) . add ( 2 ) ; graph . get ( 2 ) . add ( 3 ) ; graph . get ( 2 ) . add ( 4 ) ; graph . get ( 1 ) . add ( 5 ) ; dfs ( 1 , 1 ) ; System . out . println ( ans ) ; } public static void dfs ( int node , int parent ) { int a = Integer . bitCount ( weight [ node ] + x ) ; if ( maximum < a ) { maximum = a ; ans = node ; } else if ( maximum == a ) { ans = Math . min ( ans , node ) ; } for ( int to : graph . get ( node ) ) { if ( to == parent ) { continue ; } dfs ( to , node ) ; } } }
public class Main { static final int MAX = 26 ; public static void main ( String [ ] args ) { String strr = " geeksforgeeks " ; String patt = " geeks " ; System . out . println ( maxCount ( strr , patt ) ) ; } public static void updateFreq ( String strr , int [ ] freq ) { int lenn = strr . length ( ) ; for ( int i = 0 ; i < lenn ; i ++ ) { freq [ strr . charAt ( i ) - ' a ' ] += 1 ; } } public static int maxCount ( String strr , String patt ) { int [ ] strrFreq = new int [ MAX ] ; updateFreq ( strr , strrFreq ) ; int [ ] pattFreq = new int [ MAX ] ; updateFreq ( patt , pattFreq ) ; int ans = 1000000000 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( pattFreq [ i ] == 0 ) { continue ; } ans = Math . min ( ans , strrFreq [ i ] / pattFreq [ i ] ) ; } return ans ; } }
Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String inputA = scanner . nextLine ( ) . replaceAll ( " ▁ " , " | " ) ; String inputB = scanner . nextLine ( ) . replaceAll ( " ▁ " , " | " ) ; int a = Integer . parseInt ( inputA ) ; int b = Integer . parseInt ( inputB ) ; System . out . println ( a + b ) ;
int n , L , R , QL , QR ; String [ ] input1 = input ( ) . split ( " ▁ " ) ; n = Integer . parseInt ( input1 [ 0 ] ) ; L = Integer . parseInt ( input1 [ 1 ] ) ; R = Integer . parseInt ( input1 [ 2 ] ) ; QL = Integer . parseInt ( input1 [ 3 ] ) ; QR = Integer . parseInt ( input1 [ 4 ] ) ; String [ ] input2 = input ( ) . split ( " ▁ " ) ; int [ ] W = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { W [ i ] = Integer . parseInt ( input2 [ i ] ) ; } int [ ] sum_el = new int [ n + 1 ] ; sum_el [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum_el [ i ] = W [ i - 1 ] + sum_el [ i - 1 ] ; } int answer = QR * ( n - 1 ) + sum_el [ n ] * R ; for ( int i = 1 ; i <= n ; i ++ ) { int energy = L * sum_el [ i ] + R * ( sum_el [ n ] - sum_el [ i ] ) ; if ( i > ( n - i ) ) { energy = energy + ( i - ( n - i ) - 1 ) * QL ; } else if ( ( n - i ) > i ) { energy = energy + ( ( n - i ) - i - 1 ) * QR ; } if ( energy < answer ) { answer = energy ; } } System . out . println ( answer ) ;
public class Main { public static void main ( String [ ] args ) { int V = 700 ; int M = 10 ; int N = 3 ; System . out . println ( wastedWater ( V , M , N ) ) ; V = 1000 ; M = 100 ; N = 50 ; System . out . println ( wastedWater ( V , M , N ) ) ; } public static int wastedWater ( int V , int M , int N ) { int amt_per_min = M - N ; int time_to_fill = V / amt_per_min ; int wasted_amt = N * time_to_fill ; return wasted_amt ; } }
public class Main { public static void main ( String [ ] args ) { String str = "0100110101" ; int n = str . length ( ) ; System . out . println ( maxSubStr ( str , n ) ) ; } public static int maxSubStr ( String str , int n ) { int count0 = 0 ; int count1 = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '0' ) { count0 += 1 ; } else { count1 += 1 ; } if ( count0 == count1 ) { cnt += 1 ; } } if ( count0 != count1 ) { return - 1 ; } return cnt ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int min = Math . min ( Math . min ( a , b ) , c ) ; int max = Math . max ( Math . max ( a , b ) , c ) ; System . out . println ( min + " ▁ " + max ) ; } }
public class Main { public static void main ( String [ ] args ) { int s = 15 ; int n = findS ( s ) ; if ( n == - 1 ) { System . out . println ( " - 1" ) ; } else { System . out . println ( n ) ; } } public static int findS ( int s ) { int _sum = 0 ; int n = 1 ; while ( _sum < s ) { _sum += n ; n ++ ; } n -- ; if ( _sum == s ) { return n ; } return - 1 ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { - 1 , - 1 , 11 , - 1 , 3 , - 1 } ; int n = arr . length ; System . out . println ( maximumAbsolute ( arr , n ) ) ; } public static int maximumAbsolute ( int [ ] arr , int n ) { int mn = ( int ) Math . pow ( 10 , 9 ) ; int mx = - ( int ) Math . pow ( 10 , 9 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arr [ i ] == - 1 && arr [ i - 1 ] != - 1 ) { mn = Math . min ( mn , arr [ i - 1 ] ) ; mx = Math . max ( mx , arr [ i - 1 ] ) ; } if ( i < n - 1 && arr [ i ] == - 1 && arr [ i + 1 ] != - 1 ) { mn = Math . min ( mn , arr [ i + 1 ] ) ; mx = Math . max ( mx , arr [ i + 1 ] ) ; } } int common_integer = ( mn + mx ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == - 1 ) { arr [ i ] = common_integer ; } } int max_diff = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; if ( diff > max_diff ) { max_diff = diff ; } } return max_diff ; } }
public class Main { static final int MOD = 1000000007 ; public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( countStrings ( N ) ) ; } static int countStrings ( int N ) { int [ ] [ ] dp = new int [ N + 1 ] [ 3 ] ; dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = 1 ; dp [ 1 ] [ 2 ] = 0 ; for ( int i = 2 ; i <= N ; i ++ ) { dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] % MOD ; dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] % MOD ; } int ans = ( dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ) % MOD ; return ans ; } }
public class Main { public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; int n = s . length ( ) ; int k = 3 ; System . out . println ( longestSubseq ( n , k , s ) ) ; } public static int longestSubseq ( int n , int k , String s ) { int [ ] dp = new int [ n ] ; int [ ] maxLength = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr = ( int ) s . charAt ( i ) - ( int ) ' a ' ; int lower = Math . max ( 0 , curr - k ) ; int upper = Math . min ( 25 , curr + k ) ; for ( int j = lower ; j <= upper ; j ++ ) { dp [ i ] = Math . max ( dp [ i ] , maxLength [ j ] + 1 ) ; } maxLength [ curr ] = Math . max ( dp [ i ] , maxLength [ curr ] ) ; } int max = 0 ; for ( int length : dp ) { max = Math . max ( max , length ) ; } return max ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int [ ] a = { 2 , 4 , 6 , 10 , 2 } ; System . out . println ( longestFibonacciSubarray ( n , a ) ) ; } public static int longestFibonacciSubarray ( int n , int [ ] a ) { if ( n <= 2 ) { return n ; } int len = 2 ; int mx = - 1000000000 ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) { len += 1 ; } else { len = 2 ; } mx = Math . max ( mx , len ) ; } return mx ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] ar = { 1 , 2 , 1 , 3 , 4 , 2 , 4 , 4 , 4 } ; int n = ar . length ; System . out . println ( minimumSubarrays ( ar , n ) ) ; } public static int minimumSubarrays ( int [ ] ar , int n ) { ArrayList < Integer > se = new ArrayList < > ( ) ; int cnt = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! se . contains ( ar [ i ] ) ) { se . add ( ar [ i ] ) ; } else { cnt ++ ; se . clear ( ) ; se . add ( ar [ i ] ) ; } } return cnt ; } }
public class Main { public static void main ( String [ ] args ) { int s = 122233 ; if ( check ( s ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean check ( int s ) { int [ ] freq = new int [ 10 ] ; while ( s != 0 ) { int r = s % 10 ; s = s / 10 ; freq [ r ] += 1 ; } int xor = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { xor = xor ^ freq [ i ] ; } if ( xor == 0 ) { return true ; } else { return false ; } } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input1 [ 0 ] ) ; int [ ] days = new int [ input1 . length - 1 ] ; for ( int i = 1 ; i < input1 . length ; i ++ ) { days [ i - 1 ] = Integer . parseInt ( input1 [ i ] ) ; } String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > names = new ArrayList < > ( ) ; ArrayList < Integer > lists = new ArrayList < > ( ) ; int sum = 0 ; for ( int i = 0 ; i < days . length ; i ++ ) { sum += days [ i ] ; names . add ( sum ) ; System . out . print ( names . get ( i ) / a - lists . get ( i ) + " ▁ " ) ; lists . add ( names . get ( i ) / a - lists . get ( i ) ) ; } } }
public class Main { static int MAXN = 1000005 ; static int [ ] even = new int [ MAXN ] ; static int [ ] odd = new int [ MAXN ] ; public static void precompute ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { odd [ i ] = 1 ; } if ( arr [ i ] % 2 == 0 ) { even [ i ] = 1 ; } } for ( int i = 1 ; i < n ; i ++ ) { even [ i ] = even [ i ] + even [ i - 1 ] ; odd [ i ] = odd [ i ] + odd [ i - 1 ] ; } } public static boolean isOdd ( int L , int R ) { int cnt = odd [ R ] ; if ( L > 0 ) { cnt -= odd [ L - 1 ] ; } return cnt == R - L + 1 ; } public static void performQueries ( int [ ] a , int n , int [ ] [ ] q , int m ) { precompute ( a , n ) ; for ( int i = 0 ; i < m ; i ++ ) { int L = q [ i ] [ 0 ] ; int R = q [ i ] [ 1 ] ; if ( isOdd ( L , R ) ) { System . out . println ( " Odd " ) ; } else { System . out . println ( " Even " ) ; } } } public static void main ( String [ ] args ) { int [ ] a = { 2 , 1 , 5 , 7 , 6 , 8 , 9 } ; int n = a . length ; int [ ] [ ] q = { { 0 , 2 } , { 1 , 2 } , { 2 , 3 } , { 3 , 6 } } ; int m = q . length ; performQueries ( a , n , q , m ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int tests = input . nextInt ( ) ; for ( int t = 0 ; t < tests ; t ++ ) { int windows = input . nextInt ( ) ; boolean test = true ; for ( int k = 0 ; k <= windows / 3 ; k ++ ) { if ( test ) { for ( int j = 0 ; j <= windows / 5 ; j ++ ) { if ( test ) { for ( int i = 0 ; i <= windows / 7 ; i ++ ) { if ( i * 7 + j * 5 + k * 3 == windows ) { System . out . println ( k + " ▁ " + j + " ▁ " + i ) ; test = false ; break ; } } } } } } if ( test ) { System . out . println ( - 1 ) ; } } } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int m = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; int o = scanner . nextInt ( ) ; int p = scanner . nextInt ( ) ; String hhmm = scanner . next ( ) ; System . out . println ( solve ( m , n , o , p , hhmm ) ) ; } public static int solve ( int m , int n , int o , int p , String hhmm ) { int h = Integer . parseInt ( hhmm . substring ( 0 , 2 ) ) ; int m = Integer . parseInt ( hhmm . substring ( 3 , 5 ) ) ; int lft = h * 60 + m ; int rt = lft + n ; int i = 30 * 10 ; int ans = 0 ; while ( i < 1440 ) { if ( i < rt && i + p > lft ) { ans += 1 ; } i += o ; } return ans ; } }
int i = input ; int l = 3 ; for ( int _ : new int [ i ( ) ] ) { int x = i ( ) ; if ( x == l ) { System . out . println ( " NO " ) ; System . exit ( 0 ) ; } l ^= x ; } System . out . println ( " YES " ) ;
public class Main { public static void main ( String [ ] args ) { int [ ] steps = { 1 , - 1 , 0 , 0 , 1 , 1 , - 3 , 2 } ; int n = steps . length ; System . out . println ( times ( steps , n ) ) ; } public static int times ( int [ ] steps , int n ) { int current_level = 0 ; int previous_level = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { previous_level = current_level ; current_level = current_level + steps [ i ] ; if ( ( previous_level < 0 && current_level >= 0 ) || ( previous_level > 0 && current_level <= 0 ) ) { count += 1 ; } } return count ; } }
int D = 360 ; int [ ] x = new int [ D ] ; Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int m = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; int v = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; m -= 1 ; d -= 1 ; int start = 30 * m + d ; int end = ( start + v - 1 ) % D ; boolean [ ] h = new boolean [ D ] ; for ( int j = 0 ; j < v ; j ++ ) { int y = ( start + j ) % D ; h [ y ] = true ; } for ( int j = 0 ; j < D ; j ++ ) { if ( h [ j ] ) { x [ j ] = Math . max ( x [ j ] , s ) ; } else { int A = Math . abs ( start - j ) ; if ( A > D / 2 ) { A = D - A ; } int B = Math . abs ( end - j ) ; if ( B > D / 2 ) { B = D - B ; } x [ j ] = Math . max ( x [ j ] , s - Math . min ( A , B ) ) ; } } } int min = x [ 0 ] ; for ( int value : x ) { if ( value < min ) { min = value ; } } System . out . println ( min ) ;
System . out . println ( new String [ ] { " Um _ nik " , " Petr " } [ Integer . parseInt ( input ( ) ) / 1000 <= Arrays . stream ( input ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . filter ( ( i , x ) -> i == x ) . count ( ) ] ) ;
public class Main { public static void main ( String [ ] args ) { String s = " abcda " ; System . out . println ( smallest ( s ) ) ; } public static String smallest ( String s ) { int l = s . length ( ) ; String ans = " " ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i + 1 ) ) { for ( int j = 0 ; j < l ; j ++ ) { if ( i != j ) { ans += s . charAt ( j ) ; } } return ans ; } } ans = s . substring ( 0 , l - 1 ) ; return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; int [ ] gr1 = { 2 } ; int [ ] gr2 = { 4 , 6 , 9 , 11 } ; int x_gr , y_gr ; if ( contains ( gr1 , x ) ) { x_gr = 1 ; } else if ( contains ( gr2 , x ) ) { x_gr = 2 ; } else { x_gr = 3 ; } if ( contains ( gr1 , y ) ) { y_gr = 1 ; } else if ( contains ( gr2 , y ) ) { y_gr = 2 ; } else { y_gr = 3 ; } if ( x_gr == y_gr ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean contains ( int [ ] arr , int targetValue ) { for ( int s : arr ) { if ( s == targetValue ) { return true ; } } return false ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; int k = 5 ; System . out . println ( findMinNumber ( arr , n , k ) ) ; } public static int findMinNumber ( int [ ] arr , int n , int k ) { int i = 0 ; int j = 0 ; int min_num = ( int ) Math . pow ( 10 , 9 ) ; boolean found = false ; int Sum = 0 ; while ( i < n ) { Sum = Sum + arr [ i ] ; if ( Sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } else if ( Sum > k ) { while ( Sum > k ) { Sum = Sum - arr [ j ] ; j += 1 ; } if ( Sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } } i += 1 ; } if ( found ) { return min_num ; } return - 1 ; } }
Scanner scanner = new Scanner ( System . in ) ; String n = scanner . nextLine ( ) ; int b = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( n . charAt ( i ) == '1' ) { b ++ ; } } System . out . println ( b ) ;
public class Main { public static void nthPalindrome ( int n , int k ) { int temp ; if ( k % 2 != 0 ) { temp = k / 2 ; } else { temp = k / 2 - 1 ; } int palindrome = ( int ) Math . pow ( 10 , temp ) ; palindrome = palindrome + n - 1 ; System . out . print ( palindrome ) ; if ( k % 2 != 0 ) { palindrome = palindrome / 10 ; } while ( palindrome != 0 ) { System . out . print ( palindrome % 10 ) ; palindrome = palindrome / 10 ; } } public static void main ( String [ ] args ) { int n = 6 ; int k = 5 ; System . out . print ( n + " th ▁ palindrome ▁ of ▁ " + k + " ▁ digit ▁ = ▁ " ) ; nthPalindrome ( n , k ) ; System . out . println ( ) ; n = 10 ; k = 6 ; System . out . print ( n + " th ▁ palindrome ▁ of ▁ " + k + " ▁ digit ▁ = ▁ " ) ; nthPalindrome ( n , k ) ; System . out . println ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int X = input . nextInt ( ) ; int [ ] Xs = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { Xs [ i ] = input . nextInt ( ) ; } int [ ] Ys = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { Ys [ i ] = Xs [ N - 1 - i ] ; } int [ ] Y_sum = new int [ N ] ; Y_sum [ 0 ] = Ys [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { Y_sum [ i ] = Y_sum [ i - 1 ] + Ys [ i ] ; } double ans = Double . POSITIVE_INFINITY ; for ( int rep_num = 1 ; rep_num <= N ; rep_num ++ ) { double local_ans = X * rep_num ; local_ans += 5 * Y_sum [ rep_num - 1 ] ; int i = 2 * rep_num - 1 ; int n = 1 ; while ( i <= N - 1 ) { local_ans += ( 2 * n + 3 ) * ( Y_sum [ i ] - Y_sum [ i - rep_num ] ) ; n ++ ; i += rep_num ; } local_ans += ( 2 * n + 3 ) * ( Y_sum [ N - 1 ] - Y_sum [ i - rep_num ] ) ; ans = Math . min ( ans , local_ans ) ; } System . out . println ( ans + N * X ) ; } }
public class Main { static final int MAX = 10000 ; static int [ ] hashTable = new int [ MAX ] ; public static void main ( String [ ] args ) { int [ ] arr = { 4 , 6 , 2 , 8 , 7 , 21 , 24 , 49 , 44 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } public static int minOperations ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { hashTable [ arr [ i ] ] += 1 ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( hashTable [ arr [ i ] ] > 0 ) { for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] % arr [ i ] == 0 ) { hashTable [ arr [ j ] ] = 0 ; } } res += 1 ; } } return res ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int p1 , p2 , p3 , p4 , a , b ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; p1 = Integer . parseInt ( input [ 0 ] ) ; p2 = Integer . parseInt ( input [ 1 ] ) ; p3 = Integer . parseInt ( input [ 2 ] ) ; p4 = Integer . parseInt ( input [ 3 ] ) ; a = Integer . parseInt ( input [ 4 ] ) ; b = Integer . parseInt ( input [ 5 ] ) ; if ( Math . min ( p1 , Math . min ( p2 , Math . min ( p3 , p4 ) ) ) > a && Math . min ( p1 , Math . min ( p2 , Math . min ( p3 , p4 ) ) ) <= b ) { System . out . println ( Math . min ( p1 , Math . min ( p2 , Math . min ( p3 , p4 ) ) ) - a ) ; } else if ( Math . min ( p1 , Math . min ( p2 , Math . min ( p3 , p4 ) ) ) > b && Math . min ( p1 , Math . min ( p2 , Math . min ( p3 , p4 ) ) ) > a && a != b ) { System . out . println ( b - a + 1 ) ; } else if ( a == b && Math . min ( p1 , Math . min ( p2 , Math . min ( p3 , p4 ) ) ) > a ) { System . out . println ( Math . min ( p1 , Math . min ( p2 , Math . min ( p3 , p4 ) ) ) - a ) ; } else { System . out . println ( 0 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int numer = 1 ; int denom = 1 ; for ( int d = 10 ; d < 100 ; d ++ ) { for ( int n = 10 ; n < d ; n ++ ) { int n0 = n % 10 ; int n1 = n / 10 ; int d0 = d % 10 ; int d1 = d / 10 ; if ( ( n1 == d0 && n0 * d == n * d1 ) || ( n0 == d1 && n1 * d == n * d0 ) ) { numer *= n ; denom *= d ; } } } int gcd = gcd ( numer , denom ) ; return String . valueOf ( denom / gcd ) ; } public static int gcd ( int a , int b ) { while ( b > 0 ) { int temp = b ; b = a % b ; a = temp ; } return a ; } }
public class Main { public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddPascal ( n ) ) ; } public static int countSetBits ( int n ) { int count = 0 ; while ( n != 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } public static int countOfOddPascal ( int n ) { int c = countSetBits ( n ) ; return ( int ) Math . pow ( 2 , c ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int x = Integer . parseInt ( input [ 2 ] ) ; int y = Integer . parseInt ( input [ 3 ] ) ; System . out . println ( Math . max ( b * x , b * ( a - x - 1 ) , a * y , a * ( b - y - 1 ) ) ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 5 , 4 , 3 , 2 } ; System . out . println ( minSwaps ( arr ) ) ; } public static int minSwaps ( int [ ] arr ) { int n = arr . length ; int [ ] [ ] arrpos = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arrpos [ i ] [ 0 ] = i ; arrpos [ i ] [ 1 ] = arr [ i ] ; } Arrays . sort ( arrpos , ( a , b ) -> Integer . compare ( a [ 1 ] , b [ 1 ] ) ) ; boolean [ ] vis = new boolean [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] || arrpos [ i ] [ 0 ] == i ) { continue ; } int cycleSize = 0 ; int j = i ; while ( ! vis [ j ] ) { vis [ j ] = true ; j = arrpos [ j ] [ 0 ] ; cycleSize ++ ; } if ( cycleSize > 0 ) { ans += ( cycleSize - 1 ) ; } } return ans ; } }
int N = 1000005 ; boolean [ ] prime = new boolean [ N ] ; public void sieve ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int i = 2 ; i < N ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * 2 ; j < N ; j += i ) { prime [ j ] = false ; } } } } public int sumTruncatablePrimes ( int n ) { int sum = 0 ; for ( int i = 2 ; i < n ; i ++ ) { int num = i ; boolean flag = true ; while ( num > 0 ) { if ( prime [ num ] == false ) { flag = false ; break ; } num /= 10 ; } num = i ; int power = 10 ; while ( num / power > 0 ) { if ( prime [ num % power ] == false ) { flag = false ; break ; } power *= 10 ; } if ( flag == true ) { sum += i ; } } return sum ; } int n = 25 ; sieve ( ) ; System . out . println ( sumTruncatablePrimes ( n ) ) ;
public class Main { public static void findWeights ( int X ) { int sum = 0 ; int power = 0 ; while ( sum < X ) { sum = ( int ) ( Math . pow ( 3 , power + 1 ) - 1 ) ; sum /= 2 ; power ++ ; } int ans = 1 ; for ( int i = 1 ; i <= power ; i ++ ) { System . out . print ( ans + " ▁ " ) ; ans = ans * 3 ; } } public static void main ( String [ ] args ) { int X = 2 ; findWeights ( X ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { 2 , 7 , 4 } ; int K = 181 ; int [ ] ans = addToArrayForm ( A , K ) ; for ( int i = 0 ; i < ans . length ; i ++ ) { System . out . print ( ans [ i ] ) ; } } public static int [ ] addToArrayForm ( int [ ] A , int K ) { List < Integer > v = new ArrayList < > ( ) ; List < Integer > ans = new ArrayList < > ( ) ; int rem = 0 ; for ( int i = A . length - 1 ; i >= 0 ; i -- ) { int my = A [ i ] + ( K % 10 ) + rem ; if ( my > 9 ) { rem = 1 ; v . add ( my % 10 ) ; } else { v . add ( my ) ; rem = 0 ; } K = K / 10 ; } while ( K > 0 ) { int my = ( K % 10 ) + rem ; v . add ( my % 10 ) ; if ( my / 10 > 0 ) { rem = 1 ; } else { rem = 0 ; } K = K / 10 ; } if ( rem > 0 ) { v . add ( rem ) ; } for ( int i = v . size ( ) - 1 ; i >= 0 ; i -- ) { ans . add ( v . get ( i ) ) ; } return ans . stream ( ) . mapToInt ( i -> i ) . toArray ( ) ; } }
public class Main { public static void main ( String [ ] args ) { char [ ] [ ] inputchar = { { ' a ' , ' b ' } , { ' d ' , ' e ' } } ; int R = inputchar . length ; int C = inputchar [ 0 ] . length ; printPaths ( inputchar , R , C ) ; } public static void printPaths ( char [ ] [ ] inputchar , int R , int C ) { for ( int i = 0 ; i < C ; i ++ ) { dfs ( inputchar , " " , 0 , i , R , C ) ; System . out . println ( ) ; } } public static void dfs ( char [ ] [ ] inputchar , String res , int i , int j , int R , int C ) { if ( i == R ) { System . out . print ( res + " ▁ " ) ; return ; } res = res + inputchar [ i ] [ j ] ; for ( int k = 0 ; k < C ; k ++ ) { dfs ( inputchar , res , i + 1 , k , R , C ) ; if ( i + 1 == R ) { break ; } } } }
public static void assignRoom ( String direction , int [ ] hotel ) { if ( direction . equals ( " L " ) ) { for ( int x = 0 ; x < 10 ; x ++ ) { if ( hotel [ x ] == 0 ) { hotel [ x ] = 1 ; return ; } } } else if ( direction . equals ( " R " ) ) { for ( int x = 9 ; x >= 0 ; x -- ) { if ( hotel [ x ] == 0 ) { hotel [ x ] = 1 ; return ; } } } else { hotel [ Integer . parseInt ( direction ) ] = 0 ; return ; } } public static void main ( String [ ] args ) { int [ ] rooms = new int [ 10 ] ; Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String instructions = scanner . next ( ) ; for ( int i = 0 ; i < instructions . length ( ) ; i ++ ) { assignRoom ( instructions . substring ( i , i + 1 ) , rooms ) ; } for ( int i = 0 ; i < rooms . length ; i ++ ) { System . out . print ( rooms [ i ] ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input1 [ 0 ] ) ; int b = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int a1 = Integer . parseInt ( input2 [ 0 ] ) ; int b1 = Integer . parseInt ( input2 [ 1 ] ) ; if ( Math . max ( a , b ) == Math . max ( a1 , b1 ) ) { if ( Math . min ( a , b ) + Math . min ( a1 , b1 ) == Math . max ( a , b ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } } }
public class Main { public static void precisionCompute ( int x , int y , int n ) { if ( y == 0 ) { System . out . println ( " Infinite " ) ; return ; } if ( x == 0 ) { System . out . println ( 0 ) ; return ; } if ( n <= 0 ) { System . out . println ( x / y ) ; return ; } if ( ( ( x > 0 && y < 0 ) || ( x < 0 && y > 0 ) ) ) { System . out . print ( " - " ) ; if ( x <= 0 ) { x = - x ; } if ( y <= 0 ) { y = - y ; } } int d = x / y ; for ( int i = 0 ; i < n + 1 ; i ++ ) { System . out . print ( d ) ; x = x - ( y * d ) ; if ( x == 0 ) { break ; } x = x * 10 ; d = x / y ; if ( i == 0 ) { System . out . print ( " . " ) ; } } } public static void main ( String [ ] args ) { int x = 22 ; int y = 7 ; int n = 15 ; precisionCompute ( x , y , n ) ; System . out . println ( ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 125 , 14 , 42 , 100 } ; int n = arr . length ; System . out . println ( minPerfectCube ( arr , n ) ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } public static int lcmOfArray ( int [ ] arr , int n ) { if ( n < 1 ) { return 0 ; } int lcm = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) ; } return lcm ; } public static int minPerfectCube ( int [ ] arr , int n ) { int lcm = lcmOfArray ( arr , n ) ; int minPerfectCube = lcm ; int cnt = 0 ; while ( lcm > 1 && lcm % 2 == 0 ) { cnt ++ ; lcm /= 2 ; } if ( cnt % 3 == 2 ) { minPerfectCube *= 2 ; } else if ( cnt % 3 == 1 ) { minPerfectCube *= 4 ; } int i = 3 ; while ( lcm > 1 ) { cnt = 0 ; while ( lcm % i == 0 ) { cnt ++ ; lcm /= i ; } if ( cnt % 3 == 1 ) { minPerfectCube *= i * i ; } else if ( cnt % 3 == 2 ) { minPerfectCube *= i ; } i += 2 ; } return minPerfectCube ; } }
public class Node { List < Node > s = new ArrayList < > ( ) ; List < Integer > q = new ArrayList < > ( ) ; int elements = 0 ; int data ; Node left ; Node right ; public Node ( int key ) { this . data = key ; this . left = null ; this . right = null ; } public void printSpecificLevelOrder ( Node root ) { s . add ( root ) ; Node prnt = s . remove ( 0 ) ; q . add ( prnt . data ) ; if ( prnt . right != null ) { s . add ( root . right ) ; } if ( prnt . left != null ) { s . add ( root . left ) ; } while ( s . size ( ) > 0 ) { Node first = s . remove ( 0 ) ; q . add ( first . data ) ; Node second = s . remove ( 0 ) ; q . add ( second . data ) ; if ( first . left != null && second . right != null && first . right != null && second . left != null ) { s . add ( first . left ) ; s . add ( second . right ) ; s . add ( first . right ) ; s . add ( second . left ) ; } } for ( int i = q . size ( ) - 1 ; i >= 0 ; i -- ) { System . out . print ( q . get ( i ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { Node root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; System . out . println ( " Specific ▁ Level ▁ Order ▁ Traversal ▁ of ▁ Binary ▁ Tree ▁ is " ) ; root . printSpecificLevelOrder ( root ) ; } }
public class Main { public static void hollowSquare ( int rows ) { for ( int i = 1 ; i <= rows ; i ++ ) { if ( i == 1 || i == rows ) { for ( int j = 1 ; j <= rows ; j ++ ) { System . out . print ( " * " ) ; } } else { for ( int j = 1 ; j <= rows ; j ++ ) { if ( j == 1 || j == rows ) { System . out . print ( " * " ) ; } else { System . out . print ( " ▁ " ) ; } } } System . out . println ( ) ; } } public static void solidSquare ( int rows ) { for ( int i = 1 ; i <= rows ; i ++ ) { for ( int j = 1 ; j <= rows ; j ++ ) { System . out . print ( " * " ) ; } System . out . println ( ) ; } } public static void printPattern ( int rows ) { System . out . println ( " Solid ▁ Square : " ) ; solidSquare ( rows ) ; System . out . println ( " \n Hollow ▁ Square : " ) ; hollowSquare ( rows ) ; } public static void main ( String [ ] args ) { int rows = 5 ; printPattern ( rows ) ; } }
import java . util . * ; import java . io . * ; class Main { static int heappop ( PriorityQueue < Integer > pq ) { return pq . poll ( ) ; } static void heappush ( PriorityQueue < Integer > pq , int num ) { pq . add ( num ) ; } static final int MOD = ( int ) ( 1e9 + 7 ) ; static void solution ( ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . print ( " abcd " . repeat ( n / 4 ) + " abc " . substring ( 0 , n % 4 ) ) ; } public static void main ( String [ ] args ) { int t = 1 ; for ( int i = 0 ; i < t ; i ++ ) { solution ( ) ; } } }
import java . io . IOException ; import java . util . * ; public class Main { public static void main ( String [ ] args ) throws IOException { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] t = new int [ n ] ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; w [ i ] = sc . nextInt ( ) ; } int sm = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sm += t [ i ] ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cnt += w [ i ] ; } int [ ] dp = new int [ sm + 1 ] ; Arrays . fill ( dp , - 1 ) ; dp [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = sm ; j >= t [ i ] ; j -- ) { dp [ j ] = Math . max ( dp [ j ] , dp [ j - t [ i ] ] + w [ i ] ) ; } } for ( int i = 1 ; i < dp . length ; i ++ ) { int rem = cnt - dp [ i ] ; if ( dp [ i ] > 0 && rem <= i ) { System . out . println ( i ) ; break ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int a , b , x ; a = input . nextInt ( ) ; b = input . nextInt ( ) ; x = input . nextInt ( ) ; if ( a <= x && x <= a + b ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 6 , 9 } ; int n = arr . length ; System . out . println ( findLargest ( arr , n ) ) ; } static int findLargest ( int [ ] arr , int n ) { int gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { gcd = __gcd ( arr [ i ] , gcd ) ; } return gcd ; } static int __gcd ( int a , int b ) { while ( b != 0 ) { int temp = b ; b = a % b ; a = temp ; } return a ; } }
public class Main { public static void findWinner ( int n ) { if ( ( n - 1 ) % 6 == 0 ) { System . out . println ( " Second ▁ Player ▁ wins ▁ the ▁ game " ) ; } else { System . out . println ( " First ▁ Player ▁ wins ▁ the ▁ game " ) ; } } public static void main ( String [ ] args ) { int n = 7 ; findWinner ( n ) ; } }
import java . util . * ; class Graph { Map < Integer , List < Integer > > graph ; public Graph ( ) { this . graph = new HashMap < > ( ) ; } public void addEdge ( int u , int v ) { if ( ! graph . containsKey ( u ) ) { graph . put ( u , new ArrayList < > ( ) ) ; } graph . get ( u ) . add ( v ) ; } public void BFS ( int s ) { boolean [ ] visited = new boolean [ graph . size ( ) ] ; Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( s ) ; visited [ s ] = true ; while ( ! queue . isEmpty ( ) ) { s = queue . poll ( ) ; System . out . print ( s + " ▁ " ) ; for ( int i : graph . get ( s ) ) { if ( ! visited [ i ] ) { queue . add ( i ) ; visited [ i ] = true ; } } } } public static void main ( String [ ] args ) { Graph g = new Graph ( ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( " Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ ( starting ▁ from ▁ vertex ▁ 2 ) " ) ; g . BFS ( 2 ) ; } }
import java . util . * ; class Graph { Map < Integer , List < Integer > > graph ; public Graph ( ) { this . graph = new HashMap < > ( ) ; } public void addEdge ( int u , int v ) { if ( ! graph . containsKey ( u ) ) { graph . put ( u , new ArrayList < > ( ) ) ; } graph . get ( u ) . add ( v ) ; } public void BFS ( int s ) { boolean [ ] visited = new boolean [ graph . size ( ) ] ; Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( s ) ; visited [ s ] = true ; while ( ! queue . isEmpty ( ) ) { s = queue . poll ( ) ; System . out . print ( s + " ▁ " ) ; for ( int i : graph . get ( s ) ) { if ( ! visited [ i ] ) { queue . add ( i ) ; visited [ i ] = true ; } } } } public static void main ( String [ ] args ) { Graph g = new Graph ( ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( " Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ ( starting ▁ from ▁ vertex ▁ 2 ) " ) ; g . BFS ( 2 ) ; } }
public class Main { public static void getElements ( int a , int [ ] arr , int n ) { int [ ] elements = new int [ n + 1 ] ; elements [ 0 ] = a ; for ( int i = 0 ; i < n ; i ++ ) { elements [ i + 1 ] = arr [ i ] ^ elements [ i ] ; } for ( int i = 0 ; i < n + 1 ; i ++ ) { System . out . print ( elements [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 13 , 2 , 6 , 1 } ; int n = arr . length ; int a = 5 ; getElements ( a , arr , n ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int T = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int t = 0 ; t < T ; t ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int N = Integer . parseInt ( input [ 0 ] ) ; int R = Integer . parseInt ( input [ 1 ] ) ; int P = Integer . parseInt ( input [ 2 ] ) ; int S = Integer . parseInt ( input [ 3 ] ) ; System . out . println ( " Case ▁ # " + ( t + 1 ) + " : ▁ " + asort ( solve ( R , P , S ) ) ) ; } } public static String solve ( int R , int P , int S ) { if ( R < 0 || P < 0 || S < 0 ) { return " IMPOSSIBLE " ; } if ( R + P + S == 1 ) { return ( R > 0 ) ? " R " : ( P > 0 ) ? " P " : " S " ; } int Rn = ( R + S - P ) / 2 ; int Pn = ( P - S + R ) / 2 ; int Sn = ( - R + S + P ) / 2 ; if ( Rn > R || Pn > P || Sn > S ) { return " IMPOSSIBLE " ; } String res = solve ( Rn , Pn , Sn ) ; if ( res . equals ( " IMPOSSIBLE " ) ) { return " IMPOSSIBLE " ; } else { StringBuilder nres = new StringBuilder ( ) ; String [ ] m = { " RS " , " SP " , " PR " } ; for ( char c : res . toCharArray ( ) ) { nres . append ( m [ c - ' A ' ] ) ; } return nres . toString ( ) ; } } public static String asort ( String S ) { if ( S . equals ( " IMPOSSIBLE " ) ) { return S ; } int l = S . length ( ) ; if ( l > 1 ) { String Sl = asort ( S . substring ( 0 , l / 2 ) ) ; String Sh = asort ( S . substring ( l / 2 ) ) ; S = ( Sl . compareTo ( Sh ) < 0 ) ? Sl + Sh : Sh + Sl ; } return S ; } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int [ ] b = new int [ n * 2 ] ; for ( int i = 0 ; i < n * 2 ; i ++ ) { b [ i ] = 1 ; } b [ 0 ] = b [ n - 1 ] = b [ n ] = b [ 2 * n - 1 ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) { String [ ] line = scanner . nextLine ( ) . split ( " ▁ " ) ; int r = Integer . parseInt ( line [ 0 ] ) ; int c = Integer . parseInt ( line [ 1 ] ) ; b [ r - 1 ] = b [ n + c - 1 ] = 0 ; } if ( n % 2 != 0 && b [ n / 2 ] != 0 && b [ n + n / 2 ] != 0 ) { b [ n / 2 ] = 0 ; } int sum = 0 ; for ( int value : b ) { sum += value ; } System . out . println ( sum ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; printRepeating ( arr , arr_size ) ; } public static void printRepeating ( int [ ] arr , int size ) { int S = 0 ; int P = 1 ; int n = size - 2 ; for ( int i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; double D = Math . sqrt ( S * S - 4 * P ) ; int x = ( int ) ( ( D + S ) / 2 ) ; int y = ( int ) ( ( S - D ) / 2 ) ; System . out . println ( " The ▁ two ▁ repeating ▁ elements ▁ are : ▁ " + x + " ▁ & ▁ " + y ) ; } public static int fact ( int n ) { if ( n == 0 ) { return 1 ; } else { return ( n * fact ( n - 1 ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int [ ] primes = new int [ 0 ] ; for ( int p = 2 ; p < 10001 ; p ++ ) { boolean isPrime = true ; for ( int m = 2 ; m <= Math . floor ( Math . sqrt ( p ) ) ; m ++ ) { if ( p % m == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { int [ ] newPrimes = new int [ primes . length + 1 ] ; System . arraycopy ( primes , 0 , newPrimes , 0 , primes . length ) ; newPrimes [ primes . length ] = p ; primes = newPrimes ; } } int targ = input . nextInt ( ) ; while ( targ != 0 ) { int ans = 0 ; for ( int p = 0 ; p < primes . length ; p ++ ) { if ( primes [ p ] > targ ) { break ; } int tempsum = 0 ; for ( int l = p ; l < primes . length ; l ++ ) { tempsum += primes [ l ] ; if ( tempsum > targ ) { break ; } else if ( tempsum == targ ) { ans ++ ; break ; } } } System . out . println ( ans ) ; targ = input . nextInt ( ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; List < Integer > XY = new ArrayList < > ( ) ; while ( scanner . hasNextInt ( ) ) { XY . add ( scanner . nextInt ( ) ) ; } List < Pair < Integer , Integer > > points = new ArrayList < > ( ) ; for ( int i = 0 ; i < XY . size ( ) ; i += 2 ) { points . add ( new Pair < > ( XY . get ( i ) , XY . get ( i + 1 ) ) ) ; } for ( int i = 0 ; i < points . size ( ) ; i ++ ) { int x = points . get ( i ) . getKey ( ) ; int y = points . get ( i ) . getValue ( ) ; List < Double > D = new ArrayList < > ( ) ; for ( int j = 0 ; j < points . size ( ) ; j ++ ) { if ( j != i ) { int X = points . get ( j ) . getKey ( ) ; int Y = points . get ( j ) . getValue ( ) ; D . add ( Math . atan2 ( X - x , Y - y ) ) ; } } Collections . sort ( D ) ; D . add ( D . get ( 0 ) + 2 * Math . PI ) ; double ans = 0 ; for ( int k = 0 ; k < D . size ( ) - 1 ; k ++ ) { if ( D . get ( k + 1 ) - D . get ( k ) >= Math . PI ) { ans = ( D . get ( k + 1 ) - D . get ( k ) ) - Math . PI ; } } System . out . println ( ans / ( 2 * Math . PI ) ) ; } } }
``` java import java . util . Scanner ; public class Main { static String [ ] alp = { " * * * * * * * * * * * * " , " * qwertyuiop * " , " * asdfghjkl * * " , " * zxcvbnm * * * * " , " * * * * * * * * * * * * " } ; static String _alp = String . join ( " " , alp ) ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String s = scanner . nextLine ( ) ; if ( s . equals ( " # " ) ) { break ; } String [ ] log = { _alp . indexOf ( s . charAt ( 0 ) ) % 12 <= 5 ? " L " : " R " } ; String [ ] _log = { log [ 0 ] } ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { check ( s . charAt ( i ) , s . charAt ( i + 1 ) , log , _log ) ; } int count = 0 ; for ( int i = 0 ; i < log . length ; i ++ ) { if ( ! log [ i ] . equals ( _log [ i ] ) ) { count ++ ; } } String c = log [ 0 ] ; int ans = 0 ; for ( String v : log ) { if ( ! c . equals ( v ) ) { c = v ; ans ++ ; } } System . out . println ( ans ) ; } } static void check ( char now , char nxt , String [ ] log , String [ ] _log ) { int a = _alp . indexOf ( now ) / 12 ; int b = _alp . indexOf ( now ) % 12 ; int c = _alp . indexOf ( nxt ) / 12 ; int d = _alp . indexOf ( nxt ) % 12 ; String q1 = _log [ _log . length - 1 ] ; String q2 = d <= 5 ? " L " : " R " ; log [ log . length - 1 ] = q2 ; if ( Math . abs ( a - c ) + Math . abs ( b - d ) <= 1 ) { _log [ _log . length - 1 ] = q1 ; } else { _log [ _log . length - 1 ] = q2 ; } } } ```
Scanner scanner = new Scanner ( System . in ) ; String length = scanner . nextLine ( ) ; String tour = scanner . nextLine ( ) ; System . out . println ( tour . contains ( " SF " ) > tour . contains ( " FS " ) ? " YES " : " NO " ) ;
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < Integer > bigres = new ArrayList < > ( ) ; int t = scanner . nextInt ( ) ; for ( int m = 0 ; m < t ; m ++ ) { int n = scanner . nextInt ( ) ; List < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a . add ( scanner . nextInt ( ) ) ; } int res = a . get ( 0 ) * a . get ( 1 ) ; for ( int q = 0 ; q < a . size ( ) - 1 ; q ++ ) { res = Math . max ( res , ( a . get ( q ) * a . get ( q + 1 ) ) ) ; } bigres . add ( res ) ; } for ( int i = 0 ; i < bigres . size ( ) ; i ++ ) { System . out . println ( bigres . get ( i ) ) ; } } }
public class Main { public static int gcd ( int x , int y ) { int small ; if ( x > y ) { small = y ; } else { small = x ; } int gcd = 1 ; for ( int i = 1 ; i <= small ; i ++ ) { if ( x % i == 0 && y % i == 0 ) { gcd = i ; } } return gcd ; } public static int findLCM ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } public static int rangeDivisor ( int m , int n , int a , int b ) { int lcm = findLCM ( a , b ) ; int aDivisor = n / a - ( m - 1 ) / a ; int bDivisor = n / b - ( m - 1 ) / b ; int commonDivisor = n / lcm - ( m - 1 ) / lcm ; int ans = aDivisor + bDivisor - commonDivisor ; return ans ; } public static void main ( String [ ] args ) { int m = 3 ; int n = 11 ; int a = 2 ; int b = 3 ; System . out . println ( rangeDivisor ( m , n , a , b ) ) ; m = 11 ; n = 1000000 ; a = 6 ; b = 35 ; System . out . println ( rangeDivisor ( m , n , a , b ) ) ; } }
Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; String t = " , . ? ! " ; for ( int i = 0 ; i < t . length ( ) ; i ++ ) { s = s . replace ( String . valueOf ( t . charAt ( i ) ) , t . charAt ( i ) + " ▁ " ) ; } s = String . join ( " ▁ " , s . trim ( ) . split ( " ▁ " ) ) ; for ( int i = 0 ; i < t . length ( ) ; i ++ ) { s = s . replace ( " ▁ " + t . charAt ( i ) , String . valueOf ( t . charAt ( i ) ) ) ; } System . out . println ( s ) ;
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 2 , 1 , 3 , 1 } ; int k = 2 ; int n = arr . length ; System . out . println ( smallestKFreq ( arr , n , k ) ) ; } public static int smallestKFreq ( int [ ] arr , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , mp . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; } int res = Integer . MAX_VALUE ; int res1 = Integer . MAX_VALUE ; for ( int key : mp . keySet ( ) ) { int value = mp . get ( key ) ; if ( value == k ) { res = Math . min ( res , key ) ; } } return res != res1 ? res : - 1 ; } }
public class Main { public static void main ( String [ ] args ) { String s = " aabbbddeecc " ; if ( areVowelsInOrder ( s ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean areVowelsInOrder ( String s ) { int n = s . length ( ) ; char c = 64 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' e ' || s . charAt ( i ) == ' i ' || s . charAt ( i ) == ' o ' || s . charAt ( i ) == ' u ' ) { if ( s . charAt ( i ) < c ) { return false ; } else { c = s . charAt ( i ) ; } } } return true ; } }
``` java public class Main { public static void main ( String [ ] args ) { long INF = ( long ) Math . pow ( 10 , 20 ) ; int MAX_INT = ( int ) Math . pow ( 10 , 6 ) ; long [ ] a = new long [ MAX_INT ] ; long [ ] b = new long [ MAX_INT ] ; a [ 0 ] = 0 ; b [ 0 ] = 0 ; for ( int i = 1 ; i < 200 ; i ++ ) { long t = i * ( i + 1 ) * ( i + 2 ) / 6 ; long mm = Math . min ( t * 5 , MAX_INT ) ; for ( int j = ( int ) t ; j < mm ; j ++ ) { if ( a [ j ] > a [ j - ( int ) t ] + 1 ) { a [ j ] = a [ j - ( int ) t ] + 1 ; } } if ( t % 2 == 0 ) continue ; for ( int j = ( int ) t ; j < MAX_INT ; j ++ ) { if ( b [ j ] > b [ j - ( int ) t ] + 1 ) { b [ j ] = b [ j - ( int ) t ] + 1 ; } } } while ( true ) { int N = Integer . parseInt ( System . console ( ) . readLine ( ) ) ; if ( N == 0 ) System . exit ( 0 ) ; System . out . println ( a [ N ] + " ▁ " + b [ N ] ) ; } } } ```
public class Main { public static void main ( String [ ] args ) { String string = " GeeKs01324" ; check ( string ) ; } public static int countOfLetters ( String string ) { int letter = 0 ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ( ( string . charAt ( i ) >= ' A ' && string . charAt ( i ) <= ' Z ' ) || ( string . charAt ( i ) >= ' a ' && string . charAt ( i ) <= ' z ' ) ) ) { letter ++ ; } } return letter ; } public static int countOfNumbers ( String string ) { int number = 0 ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( string . charAt ( i ) >= '0' && string . charAt ( i ) <= '9' ) { number ++ ; } } return number ; } public static void check ( String string ) { if ( countOfLetters ( string ) == countOfNumbers ( string ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
List < Integer > lis = new ArrayList < > ( ) ; int cnt = 0 ; while ( true ) { try { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n != 0 ) { cnt ++ ; lis . add ( n ) ; } else { System . out . println ( lis . remove ( cnt - 1 ) ) ; cnt -- ; } } catch ( Exception e ) { break ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int x = scanner . nextInt ( ) ; if ( x == 1 || x == 2 * N - 1 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; int [ ] l = new int [ 2 * N - 3 ] ; int index = 0 ; for ( int i = 1 ; i <= 2 * N ; i ++ ) { if ( i != x - 1 && i != x && i != x + 1 ) { l [ index ] = i ; index ++ ; } } for ( int i = 0 ; i < N - 2 ; i ++ ) { System . out . println ( l [ i ] ) ; } System . out . println ( x - 1 ) ; System . out . println ( x ) ; System . out . println ( x + 1 ) ; for ( int i = 0 ; i < N - 2 ; i ++ ) { System . out . println ( l [ N - 2 + i ] ) ; } } } }
public class Main { static int MAX = 100001 ; static int [ ] perfectDiv = new int [ MAX ] ; public static void precomputeCounts ( ) { int i = 1 ; while ( i * i < MAX ) { for ( int j = i * i ; j < MAX ; j += i * i ) { perfectDiv [ j ] += 1 ; } i += 1 ; } } public static int countPerfectDivisors ( int n ) { return perfectDiv [ n ] ; } public static void main ( String [ ] args ) { precomputeCounts ( ) ; int n = 16 ; System . out . println ( " Total ▁ perfect ▁ divisors ▁ of ▁ " + n + " ▁ = ▁ " + countPerfectDivisors ( n ) ) ; n = 12 ; System . out . println ( " Total ▁ perfect ▁ divisors ▁ of ▁ " + n + " ▁ = ▁ " + countPerfectDivisors ( n ) ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int N = Integer . parseInt ( input1 [ 0 ] ) ; int M = Integer . parseInt ( input1 [ 1 ] ) ; int [ ] A = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] B = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int sumA = 0 ; for ( int num : A ) { sumA += num ; } int sumB = 0 ; for ( int num : B ) { sumB += num ; } System . out . println ( sumA * sumB ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int t = Integer . parseInt ( input1 [ 1 ] ) ; int e = Integer . parseInt ( input1 [ 2 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > xlst = new ArrayList < > ( ) ; for ( String s : input2 ) { xlst . add ( Integer . parseInt ( s ) ) ; } for ( int i = 0 ; i < xlst . size ( ) ; i ++ ) { int x = xlst . get ( i ) ; int a = ( t - e - 1 ) / x ; if ( ( a + 1 ) * x <= t + e ) { System . out . println ( i + 1 ) ; break ; } } System . out . println ( - 1 ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int h = 20 ; int r = 150 ; cal_IST ( h , r ) ; } public static void cal_IST ( int h , int r ) { double IST = Math . round ( ( h * r * 1.0 ) / 360 * 1000.0 ) / 1000.0 ; int int_IST = ( int ) IST ; int float_IST = ( int ) Math . ceil ( ( IST - int_IST ) * 60 ) ; System . out . println ( int_IST + " : " + float_IST ) ; } }
import java . lang . Math ; public class Main { public static void printRoots ( int n ) { double theta = Math . PI * 2 / n ; for ( int k = 0 ; k < n ; k ++ ) { double real = Math . cos ( k * theta ) ; double img = Math . sin ( k * theta ) ; System . out . printf ( " % .3f " , real ) ; if ( img >= 0 ) { System . out . print ( " ▁ + ▁ i ▁ " ) ; } else { System . out . print ( " ▁ - ▁ i ▁ " ) ; } System . out . printf ( " % .3f \n " , Math . abs ( img ) ) ; } } public static void main ( String [ ] args ) { printRoots ( 1 ) ; printRoots ( 2 ) ; printRoots ( 3 ) ; } }
public class Main { public static void findCart ( int [ ] arr1 , int [ ] arr2 , int n , int n1 ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n1 ; j ++ ) { System . out . print ( " { " + arr1 [ i ] + " , ▁ " + arr2 [ j ] + " } , ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr1 = { 1 , 2 , 3 } ; int [ ] arr2 = { 4 , 5 , 6 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; findCart ( arr1 , arr2 , n1 , n2 ) ; } }
public class Main { public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( no_of_ways ( s ) ) ; } public static int no_of_ways ( String s ) { int n = s . length ( ) ; int count_left = 0 ; int count_right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( 0 ) ) { count_left ++ ; } else { break ; } } int i = n - 1 ; while ( i >= 0 ) { if ( s . charAt ( i ) == s . charAt ( n - 1 ) ) { count_right ++ ; } else { break ; } i -- ; } if ( s . charAt ( 0 ) == s . charAt ( n - 1 ) ) { return ( ( count_left + 1 ) * ( count_right + 1 ) ) ; } else { return ( count_left + count_right + 1 ) ; } } }
public class Main { static int MAX = 100000 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; public static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; int p = 2 ; while ( p * p <= MAX ) { if ( prime [ p ] ) { int i = p * 2 ; while ( i <= MAX ) { prime [ i ] = false ; i += p ; } } p += 1 ; } } public static void SumOfKthPrimes ( int [ ] arr , int n , int k ) { int c = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c += 1 ; if ( c % k == 0 ) { sum += arr [ i ] ; c = 0 ; } } } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int [ ] arr = { 2 , 3 , 5 , 7 , 11 } ; int n = arr . length ; int k = 2 ; SumOfKthPrimes ( arr , n , k ) ; } }
public class Main { static boolean [ ] prime ; static int MAX ; public static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; int p = 2 ; while ( p * p <= MAX ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) { prime [ i ] = false ; } } p ++ ; } } public static void solve ( int [ ] arr , int n , int k ) { int c = 0 ; int Sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) { Sum += arr [ i ] ; c = 0 ; } } } System . out . println ( Sum ) ; } public static void main ( String [ ] args ) { MAX = 1000000 ; prime = new boolean [ MAX + 1 ] ; for ( int i = 0 ; i <= MAX ; i ++ ) { prime [ i ] = true ; } SieveOfEratosthenes ( ) ; int n = 5 ; int k = 2 ; int [ ] arr = { 2 , 3 , 5 , 7 , 11 } ; solve ( arr , n , k ) ; } }
public class Main { static int MAX = 1000000 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; public static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; int p = 2 ; while ( p * p <= MAX ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= MAX ; i += p ) { prime [ i ] = false ; } } p ++ ; } } public static void productOfKthPrimes ( int [ ] arr , int n , int k ) { int c = 0 ; int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) { product *= arr [ i ] ; c = 0 ; } } } System . out . println ( product ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 5 ; int k = 2 ; int [ ] arr = { 2 , 3 , 5 , 7 , 11 } ; productOfKthPrimes ( arr , n , k ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 2 ; String [ ] out = new String [ 2 * n ] ; findAllSequences ( 0 , out , 0 , 2 * n - 1 ) ; System . out . println ( ) ; } public static void findAllSequences ( int diff , String [ ] out , int start , int end ) { if ( Math . abs ( diff ) > ( end - start + 1 ) / 2 ) { return ; } if ( start > end ) { if ( diff == 0 ) { System . out . print ( String . join ( " " , out ) + " ▁ " ) ; } return ; } out [ start ] = "0" ; out [ end ] = "1" ; findAllSequences ( diff + 1 , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] = "1" ; findAllSequences ( diff , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] = "0" ; findAllSequences ( diff , out , start + 1 , end - 1 ) ; out [ start ] = "1" ; out [ end ] = "0" ; findAllSequences ( diff - 1 , out , start + 1 , end - 1 ) ; } }
``` java import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int h = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } int l = - 1 ; int r = a . length + 1 ; while ( r - l > 1 ) { int m = ( r + l ) / 2 ; if ( check ( Arrays . copyOfRange ( a , 0 , m ) , h ) ) { l = m ; } else { r = m ; } } System . out . println ( l ) ; } public static boolean check ( int [ ] h , int high ) { Arrays . sort ( h ) ; int summ = 0 ; for ( int i = h . length - 1 ; i >= 0 ; i -= 2 ) { summ += h [ i ] ; } return summ <= high ; } } ```
public class newNode { int data ; newNode next ; public newNode ( int data ) { this . data = data ; this . next = null ; } } public class Main { public static void printList ( newNode node ) { while ( node != null ) { System . out . print ( node . data + " ▁ - > ▁ " ) ; node = node . next ; } System . out . println ( " NULL " ) ; } public static int cntNodes ( newNode node ) { if ( node == null ) { return 0 ; } return 1 + cntNodes ( node . next ) ; } public static void updateList ( newNode head , int m ) { int cnt = cntNodes ( head ) ; if ( cnt != m && m < cnt ) { int skip = cnt - m ; newNode prev = null ; newNode curr = head ; while ( skip > 0 ) { prev = curr ; curr = curr . next ; skip -- ; } prev . next = null ; newNode tempHead = head ; head = curr ; while ( curr . next != null ) { curr = curr . next ; } curr . next = tempHead ; } printList ( head ) ; } public static void main ( String [ ] args ) { newNode head = new newNode ( 4 ) ; head . next = new newNode ( 5 ) ; head . next . next = new newNode ( 6 ) ; head . next . next . next = new newNode ( 1 ) ; head . next . next . next . next = new newNode ( 2 ) ; head . next . next . next . next . next = new newNode ( 3 ) ; int m = 3 ; updateList ( head , m ) ; } }
public class Main { public static void main ( String [ ] args ) { String s = " aaacaabbaa " ; int k = 2 ; System . out . println ( maxSubStrings ( s , k ) ) ; } public static int maxSubStrings ( String s , int k ) { int maxSubStr = 0 ; int n = s . length ( ) ; for ( int c = 0 ; c < 27 ; c ++ ) { char ch = ( char ) ( ' a ' + c ) ; int curr = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { if ( s . charAt ( i ) != ch ) { continue ; } int cnt = 0 ; while ( i < n && s . charAt ( i ) == ch && cnt != k ) { i ++ ; cnt ++ ; } i -- ; if ( cnt == k ) { curr ++ ; } } maxSubStr = Math . max ( maxSubStr , curr ) ; } return maxSubStr ; } }
public class Main { static int N = 100 ; public static void ansQueries ( int [ ] prefeven , int [ ] prefodd , int l , int r ) { if ( ( r - l + 1 ) % 2 == 0 ) { System . out . println ( "0" ) ; } else { if ( l % 2 == 0 ) { System . out . println ( prefeven [ r ] ^ prefeven [ l - 1 ] ) ; } else { System . out . println ( prefodd [ r ] ^ prefodd [ l - 1 ] ) ; } } } public static void wrapper ( int [ ] arr , int n , int [ ] l , int [ ] r , int q ) { int [ ] prefodd = new int [ N ] ; int [ ] prefeven = new int [ N ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { prefeven [ i ] = arr [ i - 1 ] ^ prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ; } else { prefeven [ i ] = prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ^ arr [ i - 1 ] ; } } int i = 0 ; while ( i != q ) { ansQueries ( prefeven , prefodd , l [ i ] , r [ i ] ) ; i ++ ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int [ ] l = { 1 , 1 , 2 } ; int [ ] r = { 2 , 3 , 4 } ; int q = l . length ; wrapper ( arr , n , l , r , q ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; String [ ] inputArr = input . nextLine ( ) . split ( " ▁ " ) ; int [ ] l = new int [ inputArr . length ] ; for ( int i = 0 ; i < inputArr . length ; i ++ ) { l [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } Arrays . sort ( l ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( l [ i ] >= l [ i - 1 ] ) { if ( l [ i - 1 ] == 0 ) { l [ i ] = 0 ; } else { l [ i ] = l [ i - 1 ] - 1 ; } } else { l [ i ] = l [ i ] ; } } int sum = 0 ; for ( int num : l ) { sum += num ; } System . out . println ( sum ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int p = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < p ; i ++ ) { String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int k = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = Integer . parseInt ( input2 [ j ] ) ; } int x , y ; if ( n % 2 != 0 ) { x = n / 2 ; y = n / 2 + 1 ; } else { x = n / 2 - 1 ; y = n / 2 + 1 ; } if ( n == 2 ) { int s = 0 ; for ( int j = 0 ; j < n * k ; j += 2 ) { s += a [ j ] ; } System . out . println ( s ) ; } else { int d = x * k ; int s = 0 ; while ( d < n * k ) { s += a [ d ] ; d += y ; } System . out . println ( s ) ; } } } } ```
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int r = Integer . parseInt ( input [ 1 ] ) ; ArrayList < Integer > [ ] stack = new ArrayList [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { stack [ i ] = new ArrayList < > ( ) ; } for ( int j = 0 ; j < r ; j ++ ) { String [ ] rowInput = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > row = new ArrayList < > ( ) ; for ( String s : rowInput ) { row . add ( Integer . parseInt ( s ) ) ; } int c = row . get ( 0 ) ; int i = row . get ( 1 ) ; if ( c == 0 ) { stack [ i ] . add ( row . get ( 2 ) ) ; } if ( ! stack [ i ] . isEmpty ( ) ) { if ( c == 1 ) { System . out . println ( stack [ i ] . get ( stack [ i ] . size ( ) - 1 ) ) ; } if ( c == 2 ) { stack [ i ] . remove ( stack [ i ] . size ( ) - 1 ) ; } } } } }
public class Main { public static void printArray ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void removeMin ( int [ ] arr , int n ) { int minVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minVal = Math . min ( minVal , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] - minVal ; } } public static void removeFromMax ( int [ ] arr , int n ) { int maxVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { maxVal = Math . max ( maxVal , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = maxVal - arr [ i ] ; } } public static void modifyArray ( int [ ] arr , int n , int k ) { if ( k % 2 == 0 ) { removeMin ( arr , n ) ; } else { removeFromMax ( arr , n ) ; } printArray ( arr , n ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 8 , 12 , 16 } ; int n = arr . length ; int k = 2 ; modifyArray ( arr , n , k ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] [ ] vp = { { 1 , 2 } , { 3 , - 4 } , { 6 , - 7 } } ; double [ ] ans = findCentroid ( vp ) ; System . out . printf ( " % .3f ▁ % .3f " , ans [ 0 ] , ans [ 1 ] ) ; } public static double [ ] findCentroid ( int [ ] [ ] v ) { double [ ] ans = { 0 , 0 } ; int n = v . length ; double signedArea = 0 ; for ( int i = 0 ; i < v . length ; i ++ ) { int x0 = v [ i ] [ 0 ] ; int y0 = v [ i ] [ 1 ] ; int x1 = v [ ( i + 1 ) % n ] [ 0 ] ; int y1 = v [ ( i + 1 ) % n ] [ 1 ] ; double A = ( x0 * y1 ) - ( x1 * y0 ) ; signedArea += A ; ans [ 0 ] += ( x0 + x1 ) * A ; ans [ 1 ] += ( y0 + y1 ) * A ; } signedArea *= 0.5 ; ans [ 0 ] = ( ans [ 0 ] ) / ( 6 * signedArea ) ; ans [ 1 ] = ( ans [ 1 ] ) / ( 6 * signedArea ) ; return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String color = " blue " ; int block = 0 ; int i = 0 ; while ( i != n ) { String command = scanner . nextLine ( ) ; if ( command . equals ( " lock " ) ) { block = 1 ; } else if ( command . equals ( " unlock " ) ) { block = 0 ; } else if ( block == 0 ) { color = command ; } i ++ ; } System . out . println ( color ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 1 , 9 , 100 } ; int n = arr . length ; int k = 3 ; System . out . println ( minOperations ( arr , k ) ) ; } public static int minOperations ( int [ ] ar , int k ) { Arrays . sort ( ar ) ; int opsNeeded = 0 ; for ( int i = 0 ; i < k ; i ++ ) { opsNeeded += ar [ k - 1 ] - ar [ i ] ; } int ans = opsNeeded ; for ( int i = k ; i < ar . length ; i ++ ) { opsNeeded = opsNeeded - ( ar [ i - 1 ] - ar [ i - k ] ) ; opsNeeded += ( k - 1 ) * ( ar [ i ] - ar [ i - 1 ] ) ; ans = Math . min ( ans , opsNeeded ) ; } return ans ; } }
public class Main { public static void charCheck ( char input_char ) { if ( ( int ) ( input_char ) >= 65 && ( int ) ( input_char ) <= 90 || ( int ) ( input_char ) >= 97 && ( int ) ( input_char ) <= 122 ) { System . out . println ( " Alphabet " ) ; } else if ( ( int ) ( input_char ) >= 48 && ( int ) ( input_char ) <= 57 ) { System . out . println ( " Digit " ) ; } else { System . out . println ( " Special ▁ Character " ) ; } } public static void main ( String [ ] args ) { char input_char = ' $ ' ; charCheck ( input_char ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] [ ] mat = new int [ n ] [ ] ; int [ ] b = new int [ n ] ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = Integer . parseInt ( input [ i ] ) - 1 ; mat [ i ] = new int [ ] { b [ i ] } ; } int i = 0 ; String h = " " ; while ( i < n ) { int [ ] l = new int [ n ] ; int a = i ; while ( true ) { l [ a ] += 1 ; if ( l [ a ] > 1 ) { break ; } a = mat [ a ] [ 0 ] ; } int m = 0 ; int j = 0 ; int x = 0 ; while ( j < n ) { if ( l [ j ] > m ) { m = l [ j ] ; x = j + 1 ; } j = j + 1 ; } h = h + x + " ▁ " ; i = i + 1 ; } System . out . println ( h ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = input . nextInt ( ) ; } ArrayList < Integer > [ ] d = new ArrayList [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = new ArrayList < > ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; d [ a - 1 ] . add ( b ) ; d [ b - 1 ] . add ( a ) ; } ArrayList < Integer > x = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] . size ( ) > 1 ) { for ( int i1 = 0 ; i1 < d [ i ] . size ( ) ; i1 ++ ) { for ( int i2 = i1 + 1 ; i2 < d [ i ] . size ( ) ; i2 ++ ) { if ( d [ d [ i ] . get ( i1 ) - 1 ] . contains ( i + 1 ) && d [ d [ i ] . get ( i2 ) - 1 ] . contains ( d [ i ] . get ( i1 ) ) && d [ d [ i ] . get ( i1 ) - 1 ] . contains ( i + 1 ) && d [ d [ i ] . get ( i2 ) - 1 ] . contains ( d [ i ] . get ( i1 ) ) ) { x . add ( i + 1 ) ; x . add ( d [ i ] . get ( i1 ) ) ; x . add ( d [ i ] . get ( i2 ) ) ; } } } } } int c1 = Integer . MAX_VALUE ; for ( int i = 0 ; i < x . size ( ) ; i += 3 ) { int a = x . get ( i ) ; int b = x . get ( i + 1 ) ; int c = x . get ( i + 2 ) ; c1 = Math . min ( c1 , w [ a - 1 ] + w [ b - 1 ] + w [ c - 1 ] ) ; } System . out . println ( c1 != Integer . MAX_VALUE ? c1 : - 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String u = scanner . nextLine ( ) ; String [ ] uArray = u . split ( " ▁ " ) ; int n = Integer . parseInt ( uArray [ 0 ] ) ; int k = Integer . parseInt ( uArray [ 1 ] ) ; String [ ] mArray = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] M = new int [ mArray . length ] ; for ( int i = 0 ; i < mArray . length ; i ++ ) { M [ i ] = Integer . parseInt ( mArray [ i ] ) ; } int m = 0 ; for ( int j = 0 ; j < n ; j ++ ) { int p = 0 ; for ( p = 0 ; p < n ; p ++ ) { if ( M [ p ] == 0 ) { System . out . print ( ( p + 1 ) + " ▁ " ) ; break ; } } for ( int l = p + 1 - k ; l < p ; l ++ ) { M [ l ] -= 1 ; } M [ p ] -= 1 ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { solve ( ) ; } public static void solve ( ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] rows = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { rows [ i ] = input . nextInt ( ) ; } int [ ] [ ] r = new int [ n ] [ ] ; int [ ] [ ] cords = new int [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { r [ i ] = new int [ rows [ i ] ] ; cords [ i ] = new int [ rows [ i ] ] ; for ( int j = 0 ; j < rows [ i ] ; j ++ ) { r [ i ] [ j ] = input . nextInt ( ) ; cords [ r [ i ] [ j ] ] = new int [ ] { i , j } ; } } int it = 1 ; StringBuilder ans = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < rows [ i ] ; j ++ ) { if ( r [ i ] [ j ] != it ) { int [ ] tmp = new int [ ] { cords [ it ] [ 0 ] , cords [ it ] [ 1 ] } ; int temp = r [ i ] [ j ] ; r [ i ] [ j ] = r [ cords [ it ] [ 0 ] ] [ cords [ it ] [ 1 ] ] ; r [ cords [ it ] [ 0 ] ] [ cords [ it ] [ 1 ] ] = temp ; cords [ temp ] = tmp . clone ( ) ; ans . append ( i + 1 ) . append ( " ▁ " ) . append ( j + 1 ) . append ( " ▁ " ) . append ( cords [ it ] [ 0 ] + 1 ) . append ( " ▁ " ) . append ( cords [ it ] [ 1 ] + 1 ) . append ( " \n " ) ; } it ++ ; } } System . out . println ( ans . length ( ) / 4 ) ; System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 2 , 3 , 4 , 1 } ; int n = arr . length ; int x = 2 ; int y = 3 ; System . out . println ( sameOccurrence ( arr , n , x , y ) ) ; } public static int sameOccurrence ( int [ ] arr , int n , int x , int y ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int ctX = 0 ; int ctY = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] == x ) { ctX ++ ; } else if ( arr [ j ] == y ) { ctY ++ ; } if ( ctX == ctY ) { result ++ ; } } } return result ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; while ( t > 0 ) { t -- ; String s = scanner . nextLine ( ) ; int n = s . length ( ) ; int ct = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { ct ++ ; } } if ( ct < n - ct ) { System . out . println ( ct ) ; } else if ( ct > n - ct ) { System . out . println ( n - ct ) ; } else { if ( n != 2 ) { System . out . println ( ct - 1 ) ; } else { System . out . println ( 0 ) ; } } } } } ```
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int c = 0 ; Map < String , Integer > f = new HashMap < > ( ) ; for ( String x : input ) { int d = f . getOrDefault ( x , 0 ) + 1 ; f . put ( x , d ) ; c += d % 2 * 2 - 1 ; } System . out . println ( ( c > 0 ) ? " Conan " : " Agasa " ) ; } }
int [ ] a = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i < 5 ; i ++ ) { System . out . print ( a [ i ] + " ▁ " ) ; }
int target = 93 ; int [ ] arr = { 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 } ; int length = arr . length ; int totalCount = 0 ; for ( int i = 0 ; i < length - 2 ; i ++ ) { if ( target % arr [ i ] == 0 ) { for ( int j = i + 1 ; j < length - 1 ; j ++ ) { if ( target % ( arr [ i ] * arr [ j ] ) == 0 ) { int toFind = target / ( arr [ i ] * arr [ j ] ) ; for ( int k = j + 1 ; k < length ; k ++ ) { if ( arr [ k ] == toFind ) { totalCount ++ ; } } } } } } System . out . println ( " Total ▁ number ▁ of ▁ triplets ▁ found : ▁ " + totalCount ) ;
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] l = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { l [ i ] = Integer . parseInt ( input [ i ] ) ; } if ( n == 1 ) { System . out . println ( "1 ▁ 1" ) ; System . out . println ( - l [ 0 ] ) ; System . out . println ( "1 ▁ 1" ) ; System . out . println ( 0 ) ; System . out . println ( "1 ▁ 1" ) ; System . out . println ( 0 ) ; } else { System . out . println ( "1 ▁ 1" ) ; System . out . println ( - l [ 0 ] ) ; System . out . println ( "1 ▁ " + n ) ; int [ ] x = new int [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { x [ i ] = - l [ i ] * n ; } for ( int num : x ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; System . out . println ( "2 ▁ " + n ) ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = ( n - 1 ) * l [ i ] ; } for ( int i = 1 ; i < n ; i ++ ) { System . out . print ( x [ i ] + " ▁ " ) ; } } } } ```
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 9 , 6 , 36 } ; int n = arr . length ; System . out . println ( finalNum ( arr , n ) ) ; } static int finalNum ( int [ ] arr , int n ) { int result = arr [ 0 ] ; for ( int i : arr ) { result = gcd ( result , i ) ; } return result ; } static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
int N = 1000 ; public static int lastElement ( int [ ] a , int n ) { int steps = 1 ; List < Integer > [ ] v = new ArrayList [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = new ArrayList < > ( ) ; } if ( n == 1 ) return a [ 0 ] ; for ( int i = 0 ; i < n ; i += 2 ) { v [ steps ] . add ( a [ i ] | a [ i + 1 ] ) ; } while ( v [ steps ] . size ( ) > 1 ) { steps ++ ; for ( int i = 0 ; i < v [ steps - 1 ] . size ( ) ; i += 2 ) { if ( ( steps & 1 ) == 1 ) { v [ steps ] . add ( v [ steps - 1 ] . get ( i ) | v [ steps - 1 ] . get ( i + 1 ) ) ; } else { v [ steps ] . add ( v [ steps - 1 ] . get ( i ) ^ v [ steps - 1 ] . get ( i + 1 ) ) ; } } } return v [ steps ] . get ( 0 ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 4 , 5 , 6 } ; int n = a . length ; int index = 0 , value = 2 ; a [ 0 ] = 2 ; System . out . println ( lastElement ( a , n ) ) ; index = 3 ; value = 5 ; a [ index ] = value ; System . out . println ( lastElement ( a , n ) ) ; }
public class Main { public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( numberCake ( n ) ) ; n = 8 ; System . out . println ( numberCake ( n ) ) ; n = 25 ; System . out . println ( numberCake ( n ) ) ; } public static int numberCake ( int n ) { return ( n * n * n + 5 * n + 6 ) / 6 ; } }
import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String S = input . nextLine ( ) . trim ( ) ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( char c : S . toCharArray ( ) ) { map . put ( c , map . getOrDefault ( c , 0 ) + 1 ) ; } System . out . println ( ( map . get ( ' g ' ) - map . get ( ' p ' ) ) / 2 ) ; } }
public class Main { public static void pattern ( int N ) { int k = 0 , space = 1 , rows = N ; for ( int i = rows ; i > 0 ; i -- ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( " * " ) ; } if ( i != rows ) { for ( int l = 1 ; l <= space ; l ++ ) { System . out . print ( " ▁ " ) ; } space += 2 ; } for ( int j = i ; j > 0 ; j -- ) { if ( j != rows ) { System . out . print ( " * " ) ; } } System . out . println ( ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int N = 6 ; pattern ( N ) ; } }
public class Main { public static void main ( String [ ] args ) { int n , k ; int [ ] arr ; n = 5 ; k = 2 ; arr = new int [ ] { 9 , 5 , 3 , 7 , 10 } ; System . out . println ( maximumMiddleValue ( n , k , arr ) ) ; n = 9 ; k = 3 ; int [ ] arr1 = new int [ ] { 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 } ; System . out . println ( maximumMiddleValue ( n , k , arr1 ) ) ; } public static int maximumMiddleValue ( int n , int k , int [ ] arr ) { int ans = - 1 ; int low = ( n + 1 - k ) / 2 ; int high = ( n + 1 - k ) / 2 + k ; for ( int i = low ; i <= high ; i ++ ) { ans = Math . max ( ans , arr [ i - 1 ] ) ; } return ans ; } }
public class TreeNode { int val ; TreeNode left ; TreeNode right ; public TreeNode ( int rootData ) { this . val = rootData ; this . left = null ; this . right = null ; } } public class Solution { int result ; public void pathSumHelper ( TreeNode root , int target , int so_far , Map < Integer , Integer > cache ) { if ( root != null ) { int complement = so_far + root . val - target ; if ( cache . containsKey ( complement ) ) { result += cache . get ( complement ) ; } cache . put ( so_far + root . val , cache . getOrDefault ( so_far + root . val , 0 ) + 1 ) ; pathSumHelper ( root . left , target , so_far + root . val , cache ) ; pathSumHelper ( root . right , target , so_far + root . val , cache ) ; cache . put ( so_far + root . val , cache . get ( so_far + root . val ) - 1 ) ; } } public int pathSum ( TreeNode root , int sum ) { result = 0 ; pathSumHelper ( root , sum , 0 , new HashMap < Integer , Integer > ( ) { { put ( 0 , 1 ) ; } } ) ; return result ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; TreeNode tree = new TreeNode ( 10 ) ; tree . left = new TreeNode ( 5 ) ; tree . right = new TreeNode ( - 3 ) ; tree . left . left = new TreeNode ( 3 ) ; tree . left . right = new TreeNode ( 2 ) ; tree . right . right = new TreeNode ( 11 ) ; tree . left . left . left = new TreeNode ( 3 ) ; tree . left . left . right = new TreeNode ( - 2 ) ; tree . left . right . right = new TreeNode ( 1 ) ; int s = 8 ; int out = sObj . pathSum ( tree , s ) ; System . out . println ( out ) ; } }
public class Main { public static void getmax ( int [ ] arr , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = s + arr [ i ] ; } System . out . println ( Math . min ( s , x ) ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int x = 5 ; int arr_size = arr . length ; getmax ( arr , arr_size , x ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( " Case ▁ " + ( i + 1 ) + " : " ) ; int num = scanner . nextInt ( ) ; for ( int j = 0 ; j < 10 ; j ++ ) { num *= num ; String sn = String . valueOf ( num ) ; if ( sn . length ( ) < 8 ) { int d = 8 - sn . length ( ) ; for ( int k = 0 ; k < d ; k ++ ) { sn = "0" + sn ; } } num = Integer . parseInt ( sn . substring ( 2 , 6 ) ) ; System . out . println ( num ) ; } } } }
public class Main { static int MAX = 250000 ; static int SQRT = 500 ; static boolean [ ] prime = new boolean [ MAX ] ; public static void sieve ( ) { for ( int i = 2 ; i < MAX ; i += 2 ) { prime [ i ] = false ; } for ( int i = 3 ; i < SQRT ; i += 2 ) { if ( prime [ i ] ) { for ( int j = i * i ; j < MAX ; j += i ) { prime [ j ] = false ; } } } } public static void main ( String [ ] args ) { sieve ( ) ; while ( true ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n == 0 ) { break ; } int ans = 0 ; int m = n << 1 ; if ( n == 1 ) { ans += 1 ; } int i = n + 1 ; if ( ( i & 1 ) == 0 ) { i += 1 ; } while ( i <= m ) { if ( prime [ i ] ) { ans += 1 ; } i += 2 ; } System . out . println ( ans ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 4 , 8 , 12 , 16 } ; int n = arr . length ; System . out . println ( maxOR ( arr , n ) ) ; } public static int maxOR ( int [ ] arr , int n ) { int maxVal = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { maxVal = Math . max ( maxVal , arr [ i ] | arr [ j ] ) ; } } return maxVal ; } }
public class Solution { public int numJewelsInStones ( String J , String S ) { if ( J . length ( ) == 0 || S . length ( ) == 0 ) { return 0 ; } Set < Character > jSet = new HashSet < > ( ) ; for ( char c : J . toCharArray ( ) ) { jSet . add ( c ) ; } int ans = 0 ; for ( char c : S . toCharArray ( ) ) { if ( jSet . contains ( c ) ) { ans ++ ; } } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String J = " aA " ; String S = " aAAbbbb " ; int out = sObj . numJewelsInStones ( J , S ) ; System . out . println ( out ) ; } }
public class Main { static int MAX = 100 ; static int n = 0 ; static int [ ] store = new int [ MAX ] ; static int [ ] [ ] graph = new int [ MAX ] [ MAX ] ; static int [ ] d = new int [ MAX ] ; public static void main ( String [ ] args ) { int [ ] [ ] edges = { { 1 , 2 } , { 2 , 3 } , { 3 , 1 } , { 4 , 3 } , { 4 , 1 } , { 4 , 2 } } ; int size = edges . length ; n = 4 ; for ( int i = 0 ; i < size ; i ++ ) { graph [ edges [ i ] [ 0 ] ] [ edges [ i ] [ 1 ] ] = 1 ; graph [ edges [ i ] [ 1 ] ] [ edges [ i ] [ 0 ] ] = 1 ; d [ edges [ i ] [ 0 ] ] += 1 ; d [ edges [ i ] [ 1 ] ] += 1 ; } System . out . println ( maxCliques ( 0 , 1 ) ) ; } public static boolean isClique ( int b ) { for ( int i = 1 ; i < b ; i ++ ) { for ( int j = i + 1 ; j < b ; j ++ ) { if ( graph [ store [ i ] ] [ store [ j ] ] == 0 ) { return false ; } } } return true ; } public static int maxCliques ( int i , int l ) { int max_ = 0 ; for ( int j = i + 1 ; j <= n ; j ++ ) { store [ l ] = j ; if ( isClique ( l + 1 ) ) { max_ = Math . max ( max_ , l ) ; max_ = Math . max ( max_ , maxCliques ( j , l + 1 ) ) ; } } return max_ ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 273 ; System . out . println ( setBitNumber ( n ) ) ; } public static int setBitNumber ( int n ) { int k = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) Math . pow ( 2 , k ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int s = Integer . parseInt ( input [ 2 ] ) ; int f = Integer . parseInt ( input [ 3 ] ) ; int d , i = 1 , j = s , t , l , r , k = 1 ; char c ; String res = " " ; if ( s < f ) { d = 1 ; c = ' R ' ; } else { d = - 1 ; c = ' L ' ; } while ( j != f ) { String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; t = Integer . parseInt ( input2 [ 0 ] ) ; l = Integer . parseInt ( input2 [ 1 ] ) ; r = Integer . parseInt ( input2 [ 2 ] ) ; if ( i > t && k < m ) { String [ ] input3 = scanner . nextLine ( ) . split ( " ▁ " ) ; t = Integer . parseInt ( input3 [ 0 ] ) ; l = Integer . parseInt ( input3 [ 1 ] ) ; r = Integer . parseInt ( input3 [ 2 ] ) ; k ++ ; } if ( i == t && ( l <= j && j <= r || l <= j + d && j + d <= r ) ) { res += ' X ' ; } else { res += c ; j += d ; } i ++ ; } System . out . println ( res ) ; } }
public static int subsetPairNotDivisibleByK ( int [ ] arr , int N , int K ) { int [ ] f = new int [ K ] ; for ( int i = 0 ; i < N ; i ++ ) { f [ arr [ i ] % K ] ++ ; } if ( K % 2 == 0 ) { f [ K / 2 ] = Math . min ( f [ K / 2 ] , 1 ) ; } int res = Math . min ( f [ 0 ] , 1 ) ; for ( int i = 1 ; i <= K / 2 ; i ++ ) { res += Math . max ( f [ i ] , f [ K - i ] ) ; } return res ; } public static void main ( String [ ] args ) { int [ ] arr = { 3 , 7 , 2 , 9 , 1 } ; int N = arr . length ; int K = 3 ; System . out . println ( subsetPairNotDivisibleByK ( arr , N , K ) ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int w = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int k = Integer . parseInt ( input [ 2 ] ) ; int maxLength = 0 ; int availableDigits = w / k ; while ( availableDigits > 0 ) { int currentCostPerN = String . valueOf ( m ) . length ( ) ; int sameCostUntil = ( int ) Math . pow ( 10 , currentCostPerN ) ; int usableNumbers = sameCostUntil - m ; int useDigits = usableNumbers * currentCostPerN ; m = sameCostUntil ; if ( availableDigits >= useDigits ) { maxLength += usableNumbers ; availableDigits -= useDigits ; } else { maxLength += availableDigits / currentCostPerN ; availableDigits = 0 ; } } System . out . println ( maxLength ) ; } }
public class Main { public static void printRoots ( int a , int b , int c ) { System . out . println ( String . valueOf ( 1 ) + " , ▁ " + String . valueOf ( c / ( a * 1.0 ) ) ) ; } public static void main ( String [ ] args ) { int a = 2 ; int b = 3 ; int c = - 5 ; printRoots ( a , b , c ) ; } }
int [ ] [ ] [ ] memo = new int [ 32 ] [ 2 ] [ 2 ] ; public int dp ( int pos , int fl , int pr , String bin ) { if ( pos == bin . length ( ) ) { return 1 ; } if ( memo [ pos ] [ fl ] [ pr ] != - 1 ) { return memo [ pos ] [ fl ] [ pr ] ; } int val = 0 ; if ( bin . charAt ( pos ) == '0' ) { val += dp ( pos + 1 , fl , 0 , bin ) ; } else if ( bin . charAt ( pos ) == '1' ) { val += dp ( pos + 1 , 1 , 0 , bin ) ; } if ( pr == 0 ) { if ( fl == 1 ) { val += dp ( pos + 1 , fl , 1 , bin ) ; } else if ( bin . charAt ( pos ) == '1' ) { val += dp ( pos + 1 , fl , 1 , bin ) ; } } memo [ pos ] [ fl ] [ pr ] = val ; return val ; } public int findIntegers ( int num ) { String bin = " " ; while ( num > 0 ) { if ( num % 2 != 0 ) { bin += "1" ; } else { bin += "0" ; } num /= 2 ; } bin = new StringBuilder ( bin ) . reverse ( ) . toString ( ) ; return dp ( 0 , 0 , 0 , bin ) ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( findIntegers ( N ) ) ; }
int N = 4 ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 1 , 1 , 0 , 1 } , { 0 , 1 , 1 , 0 } , { 1 , 0 , 0 , 1 } , { 1 , 0 , 1 , 1 } } ; System . out . println ( MaximumDecimalValue ( mat , 4 ) ) ; } public static int MaximumDecimalValue ( int [ ] [ ] mat , int n ) { int [ ] [ ] dp = new int [ n ] [ n ] ; if ( mat [ 0 ] [ 0 ] == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) { dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + ( int ) Math . pow ( 2 , i ) ; } else { dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ i ] [ 0 ] == 1 ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + ( int ) Math . pow ( 2 , i ) ; } else { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; } } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( int ) Math . pow ( 2 , i + j ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } } return dp [ n - 1 ] [ n - 1 ] ; } }
import java . util . * ; public class Main { public static void createHash ( Set < Integer > hash1 , int maxElement ) { int prev = 0 , curr = 1 ; hash1 . add ( prev ) ; hash1 . add ( curr ) ; while ( curr < maxElement ) { int temp = curr + prev ; hash1 . add ( temp ) ; prev = curr ; curr = temp ; } } public static void findFibonacciPair ( int n ) { Set < Integer > hash1 = new HashSet < > ( ) ; createHash ( hash1 , n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash1 . contains ( i ) && hash1 . contains ( n - i ) ) { System . out . println ( i + " , ▁ " + ( n - i ) ) ; return ; } } System . out . println ( " - 1" ) ; } public static void main ( String [ ] args ) { int N = 90 ; findFibonacciPair ( N ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 3 } ; int n = a . length ; System . out . println ( countgroup ( a , n ) ) ; } public static int countgroup ( int [ ] a , int n ) { int xs = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xs = xs ^ a [ i ] ; } if ( xs == 0 ) { return ( 1 << ( n - 1 ) ) - 1 ; } return 0 ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { String s = " ababbbacbcbcca " ; int n = s . length ( ) ; System . out . println ( maxLength ( s , n ) ) ; } public static int maxLength ( String s , int n ) { int ans = Integer . MIN_VALUE ; int [ ] A = new int [ n ] ; int [ ] L = new int [ n ] ; int [ ] R = new int [ n ] ; int [ ] freq = new int [ n + 5 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) - ' a ' == i ) { count ++ ; } freq [ j ] = count ; } for ( int j = 0 ; j < n ; j ++ ) { L [ j ] = ( 2 * freq [ j - 1 ] ) - j ; R [ j ] = ( 2 * freq [ j ] ) - j ; } int max_len = Integer . MIN_VALUE ; int min_val = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { min_val = Math . min ( min_val , L [ j ] ) ; A [ j ] = min_val ; int l = 0 ; int r = j ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; if ( A [ mid ] <= R [ j ] ) { max_len = Math . max ( max_len , j - mid + 1 ) ; r = mid - 1 ; } else { l = mid + 1 ; } } } ans = Math . max ( ans , max_len ) ; Arrays . fill ( A , 0 ) ; Arrays . fill ( R , 0 ) ; Arrays . fill ( L , 0 ) ; } return ans ; } }
public class Main { static int N = 100005 ; static ArrayList < Integer > [ ] gr = new ArrayList [ N ] ; static int [ ] colour = new int [ N ] ; static ArrayList < int [ ] > edges = new ArrayList < > ( ) ; static boolean bip = true ; public static void add_edge ( int x , int y ) { gr [ x ] . add ( y ) ; gr [ y ] . add ( x ) ; edges . add ( new int [ ] { x , y } ) ; } public static void dfs ( int x , int col ) { colour [ x ] = col ; for ( int i : gr [ x ] ) { if ( colour [ i ] == - 1 ) { dfs ( i , col ^ 1 ) ; } else if ( colour [ i ] == col ) { bip = false ; } } } public static void Directed_Graph ( int n , int m ) { dfs ( 1 , 1 ) ; if ( ! bip ) { System . out . println ( - 1 ) ; return ; } for ( int i = 0 ; i < m ; i ++ ) { if ( colour [ edges . get ( i ) [ 0 ] ] == 0 ) { int temp = edges . get ( i ) [ 0 ] ; edges . get ( i ) [ 0 ] = edges . get ( i ) [ 1 ] ; edges . get ( i ) [ 1 ] = temp ; } System . out . println ( edges . get ( i ) [ 0 ] + " ▁ " + edges . get ( i ) [ 1 ] ) ; } } public static void main ( String [ ] args ) { int n = 4 , m = 3 ; for ( int i = 0 ; i < N ; i ++ ) { gr [ i ] = new ArrayList < > ( ) ; colour [ i ] = - 1 ; } add_edge ( 1 , 2 ) ; add_edge ( 1 , 3 ) ; add_edge ( 1 , 4 ) ; Directed_Graph ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > l = new ArrayList < > ( ) ; for ( String s : input ) { l . add ( Integer . parseInt ( s ) ) ; } Set < Integer > s = new HashSet < > ( l ) ; boolean hasEven = false ; boolean hasOdd = false ; for ( int i : s ) { if ( i % 2 == 0 ) { hasEven = true ; } else { hasOdd = true ; } } if ( hasEven && hasOdd ) { Collections . sort ( l ) ; } for ( int i : l ) { System . out . print ( i + " ▁ " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; int k = Integer . parseInt ( input [ 0 ] ) ; int n = Integer . parseInt ( input [ 1 ] ) ; int w = Integer . parseInt ( input [ 2 ] ) ; int sum = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { sum += k * i ; } if ( sum <= n ) { System . out . println ( 0 ) ; } else { System . out . println ( sum - n ) ; } } }
public class Main { public static void main ( String [ ] args ) { int a = 2020 ; int b = 6300 ; int k = 29 ; System . out . println ( findCount ( a , b , k ) ) ; } public static boolean isPrime ( int k ) { if ( k <= 1 ) { return false ; } for ( int i = 2 ; i < k ; i ++ ) { if ( k % i == 0 ) { return false ; } } return true ; } public static int check ( int num , int k ) { int flag = 1 ; for ( int i = 2 ; i < k ; i ++ ) { if ( num % i == 0 ) { flag = 0 ; } } if ( flag == 1 ) { if ( num % k == 0 ) { return 1 ; } else { return 0 ; } } else { return 0 ; } } public static int findCount ( int a , int b , int k ) { int count = 0 ; if ( ! isPrime ( k ) ) { return 0 ; } else { for ( int i = a ; i <= b ; i ++ ) { int ans = check ( i , k ) ; if ( ans == 1 ) { count += 1 ; } else { continue ; } } } return count ; } }
String a = " abcdefghijklmnopqrstuvwxyz " ; Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; String t = a . substring ( 0 , 2 ) + a . substring ( 0 , 2 ) ; if ( k > n || ( k == 1 && n != 1 ) ) { System . out . println ( - 1 ) ; } else if ( n == 1 ) { System . out . println ( " a " ) ; } else { System . out . println ( t . substring ( 0 , n - k + 2 ) + a . substring ( 2 , k ) ) ; }
public class Main { static int maxn = 16 ; public static void main ( String [ ] args ) { int n = 12 ; int [ ] dp = precompute ( ) ; System . out . println ( Maximum_Summands ( dp , n ) ) ; } public static int [ ] precompute ( ) { int [ ] dp = new int [ maxn ] ; for ( int i = 0 ; i < maxn ; i ++ ) { dp [ i ] = - 1 ; } dp [ 0 ] = 0 ; int [ ] v = { 4 , 6 , 9 } ; for ( int i = 1 ; i < maxn ; i ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { int j = v [ k ] ; if ( i >= j && dp [ i - j ] != - 1 ) { dp [ i ] = Math . max ( dp [ i ] , dp [ i - j ] + 1 ) ; } } } return dp ; } public static int Maximum_Summands ( int [ ] dp , int n ) { if ( n < maxn ) { return dp [ n ] ; } else { int t = ( n - maxn ) / 4 + 1 ; return t + dp [ n - 4 * t ] ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( " Count ▁ of ▁ squares ▁ is ▁ " + ( int ) countSquares ( n ) ) ; } public static double countSquares ( int n ) { return ( ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; List < Integer > al = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { al . add ( input . nextInt ( ) ) ; } Map < Integer , Integer > modd = new HashMap < > ( ) ; int s = 0 ; for ( int a : al ) { s += a ; s %= m ; modd . put ( s , modd . getOrDefault ( s , 0 ) + 1 ) ; } int ans = 0 ; for ( int i : modd . values ( ) ) { ans += i * ( i - 1 ) / 2 ; } ans += modd . getOrDefault ( 0 , 0 ) ; System . out . println ( ans ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 4 , 8 } ; int n = arr . length ; int k = 2 ; System . out . println ( findSubarray ( arr , n , k ) ) ; } public static int findSubarray ( int [ ] arr , int n , int k ) { int [ ] countOne = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { countOne [ i ] = Integer . bitCount ( arr [ i ] ) ; } int sum = countOne [ 0 ] ; if ( n == 1 ) { if ( countOne [ 0 ] >= k ) { return 1 ; } else { return - 1 ; } } int ans = Integer . MAX_VALUE ; int i = 1 ; int j = 0 ; while ( i < n ) { if ( k == countOne [ j ] ) { ans = 1 ; break ; } else if ( k == countOne [ i ] ) { ans = 1 ; break ; } else if ( sum + countOne [ i ] < k ) { sum += countOne [ i ] ; i ++ ; } else if ( sum + countOne [ i ] > k ) { ans = Math . min ( ans , ( i - j ) + 1 ) ; sum -= countOne [ j ] ; j ++ ; } else if ( sum + countOne [ i ] == k ) { ans = Math . min ( ans , ( i - j ) + 1 ) ; sum += countOne [ i ] ; i ++ ; } } if ( ans != Integer . MAX_VALUE ) { return ans ; } else { return - 1 ; } } }
public class Main { public static void Loss ( int SP , int P ) { double loss = 0 ; loss = ( ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) ) ; System . out . println ( " Loss ▁ = " + String . format ( " % .3f " , loss ) ) ; } public static void main ( String [ ] args ) { int SP = 2400 ; int P = 30 ; Loss ( SP , P ) ; } }
Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int X = sc . nextInt ( ) ; String [ ] inputArr = sc . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { arr [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } int A = 0 ; inputArr = sc . nextLine ( ) . split ( " ▁ " ) ; for ( int i = 0 ; i < M ; i ++ ) { if ( Integer . parseInt ( inputArr [ i ] ) < X ) { A ++ ; } } System . out . println ( Math . min ( A , M - A ) ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] sushiInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] sushi = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sushi [ i ] = Integer . parseInt ( sushiInput [ i ] ) ; } int res = 0 ; int before = 0 ; int after = 0 ; int cur = sushi [ 0 ] ; int i = 0 ; while ( i < n ) { if ( sushi [ i ] == cur ) { before ++ ; i ++ ; } else { int j = i ; int jS = sushi [ j ] ; cur = sushi [ j ] ; while ( j < n && sushi [ j ] == jS ) { after ++ ; j ++ ; } i = j ; res = Math . max ( res , Math . min ( before , after ) ) ; before = after ; after = 0 ; } } System . out . println ( res * 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int ans = 0 ; for ( int i = 1 ; i < 10000000 ; i ++ ) { if ( getTerminal ( i ) == 89 ) { ans ++ ; } } return Integer . toString ( ans ) ; } static final int [ ] SQUARE_DIGITS_SUM = new int [ 1000 ] ; static { for ( int i = 0 ; i < 1000 ; i ++ ) { SQUARE_DIGITS_SUM [ i ] = getSquareDigitSum ( i ) ; } } static final int [ ] TERMINALS = { 1 , 89 } ; public static int getTerminal ( int n ) { while ( n != 1 && n != 89 ) { n = squareDigitSum ( n ) ; } return n ; } public static int squareDigitSum ( int n ) { int result = 0 ; while ( n > 0 ) { result += SQUARE_DIGITS_SUM [ n % 1000 ] ; n /= 1000 ; } return result ; } public static int getSquareDigitSum ( int n ) { int sum = 0 ; String numStr = Integer . toString ( n ) ; for ( int i = 0 ; i < numStr . length ( ) ; i ++ ) { int digit = Character . getNumericValue ( numStr . charAt ( i ) ) ; sum += digit * digit ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { String string = " geeksforgeeks " ; int n = string . length ( ) ; System . out . println ( countStrings ( string , n ) ) ; } public static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; } return fact ; } public static int countStrings ( String string , int n ) { Set < Character > distinctChar = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { distinctChar . add ( string . charAt ( i ) ) ; } return fact ( distinctChar . size ( ) ) ; } }
int M = 4 ; int N = 5 ; public void printCommonElements ( int [ ] [ ] mat ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int j = 0 ; j < N ; j ++ ) { mp . put ( mat [ 0 ] [ j ] , 1 ) ; } for ( int i = 1 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mp . containsKey ( mat [ i ] [ j ] ) && mp . get ( mat [ i ] [ j ] ) == i ) { mp . put ( mat [ i ] [ j ] , i + 1 ) ; if ( i == M - 1 ) { System . out . print ( mat [ i ] [ j ] + " ▁ " ) ; } } } } } int [ ] [ ] mat = { { 1 , 2 , 1 , 4 , 8 } , { 3 , 7 , 8 , 5 , 1 } , { 8 , 7 , 7 , 3 , 1 } , { 8 , 1 , 2 , 7 , 9 } } ; printCommonElements ( mat ) ;
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . io . FileReader ; import java . io . IOException ; import java . util . StringTokenizer ; import java . util . Arrays ; import java . util . Comparator ; public class Main { static final long INF = ( long ) 1e18 + 3 ; static final double EPS = 1e-10 ; static final int MAX_CACHE = ( int ) 1e9 ; static class Function { int k , b ; Function ( int k , int b ) { this . k = k ; this . b = b ; } long evaluate ( int x ) { return ( long ) k * x + b ; } } static void main ( ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int x1 = Integer . parseInt ( st . nextToken ( ) ) ; int x2 = Integer . parseInt ( st . nextToken ( ) ) ; Function [ ] funcs = new Function [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { st = new StringTokenizer ( br . readLine ( ) ) ; int k = Integer . parseInt ( st . nextToken ( ) ) ; int b = Integer . parseInt ( st . nextToken ( ) ) ; funcs [ i ] = new Function ( k , b ) ; } Comparator < Integer > comp = ( i1 , i2 ) -> Long . compare ( funcs [ i1 ] . evaluate ( x1 ) , funcs [ i2 ] . evaluate ( x1 ) ) ; Integer [ ] sorted1 = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sorted1 [ i ] = i ; } Arrays . sort ( sorted1 , comp ) ; Integer [ ] sorted2 = new Integer [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sorted2 [ i ] = i ; } comp = ( i1 , i2 ) -> Long . compare ( funcs [ i1 ] . evaluate ( x2 ) , funcs [ i2 ] . evaluate ( x2 ) ) ; Arrays . sort ( sorted2 , comp ) ; pw . println ( Arrays . equals ( sorted1 , sorted2 ) ? " No " : " Yes " ) ; br . close ( ) ; pw . close ( ) ; } public static void main ( String [ ] args ) throws IOException { if ( args . length > 0 && " MINE " . equals ( args [ 0 ] ) ) { BufferedReader fileReader = new BufferedReader ( new FileReader ( " input . txt " ) ) ; main ( fileReader , new PrintWriter ( System . out ) ) ; } else
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String linea = scanner . nextLine ( ) ; int [ ] result = line2int ( linea ) ; int n = result [ 0 ] ; int t = result [ 1 ] ; int [ ] out = new int [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { linea = scanner . nextLine ( ) ; result = line2int ( linea ) ; int salida = result [ 0 ] ; int intervalo = result [ 1 ] ; if ( salida < t ) { salida = salida + ( int ) Math . ceil ( ( t - salida ) / ( double ) intervalo ) * intervalo ; } if ( i == 0 ) { out [ 0 ] = i + 1 ; out [ 1 ] = salida ; } else if ( salida < out [ 1 ] ) { out [ 0 ] = i + 1 ; out [ 1 ] = salida ; } } System . out . println ( out [ 0 ] ) ; } public static int [ ] line2int ( String linea ) { String [ ] parts = linea . split ( " ▁ " ) ; int val1 = Integer . parseInt ( parts [ 0 ] ) ; int val2 = Integer . parseInt ( parts [ 1 ] ) ; return new int [ ] { val1 , val2 } ; } }
public class Main { public static void main ( String [ ] args ) { int n = 20 ; double a = 2.5 ; double d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } public static double sumOfAP ( double a , double d , int n ) { double sum = 0 ; int i = 0 ; while ( i < n ) { sum = sum + a ; a = a + d ; i = i + 1 ; } return sum ; } }
public class Main { public static void find3Numbers ( int [ ] arr , int n ) { int small = Integer . MAX_VALUE ; int large = Integer . MAX_VALUE ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) { small = arr [ i ] ; } else if ( arr [ i ] <= large ) { large = arr [ i ] ; } else { break ; } } if ( i == n ) { System . out . println ( " No ▁ such ▁ triplet ▁ found " ) ; return ; } int j ; for ( j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] < large ) { small = arr [ j ] ; break ; } } System . out . println ( small + " ▁ " + large + " ▁ " + arr [ i ] ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 7 , 4 , 8 } ; int n = arr . length ; find3Numbers ( arr , n ) ; } }
public class Main { public static void numbersWith3Divisors ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) { prime [ i ] = true ; } prime [ 0 ] = false ; prime [ 1 ] = false ; int p = 2 ; while ( p * p <= n ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= n ; i += p ) { prime [ i ] = false ; } } p ++ ; } System . out . println ( " Numbers ▁ with ▁ 3 ▁ divisors ▁ : " ) ; int i = 0 ; while ( i * i <= n ) { if ( prime [ i ] ) { System . out . print ( i * i + " ▁ " ) ; } i ++ ; } } public static void main ( String [ ] args ) { int n = 96 ; numbersWith3Divisors ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 10 ; int K = 4 ; System . out . println ( findPairCount ( N , K ) ) ; } public static int findPairCount ( int N , int K ) { int count = 0 ; int [ ] rem = new int [ K ] ; rem [ 0 ] = N / K ; for ( int i = 1 ; i < K ; i ++ ) { rem [ i ] = ( N - i ) / K + 1 ; } if ( K % 2 == 0 ) { count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; for ( int i = 1 ; i < K / 2 ; i ++ ) { count += rem [ i ] * rem [ K - i ] ; } count += ( rem [ K / 2 ] * ( rem [ K / 2 ] - 1 ) ) / 2 ; } else { count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; for ( int i = 1 ; i < K / 2 + 1 ; i ++ ) { count += rem [ i ] * rem [ K - i ] ; } } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; if ( n == 0 && m == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; if ( n > 0 ) { for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } } if ( m > 0 ) { for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = scanner . nextInt ( ) ; } } int ans = 0 ; int i = 0 ; int j = 0 ; int s = 0 ; int t = - 1 ; while ( i < n || j < m ) { if ( i < n ) { if ( s == a [ i ] ) i ++ ; if ( i < n ) t = a [ i ] ; } if ( j < m ) { if ( s == b [ j ] ) j ++ ; if ( j < m && ( t < 0 || b [ j ] < t ) ) t = b [ j ] ; } if ( t >= 0 ) { if ( i < n && t == a [ i ] ) i ++ ; if ( j < m && t == b [ j ] ) j ++ ; ans = Math . max ( ans , t - s ) ; s = t ; t = - 1 ; } } if ( t >= 0 ) ans = Math . max ( ans , t - s ) ; System . out . println ( ans ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = scanner . nextInt ( ) ; } int x = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int arrSum = Arrays . stream ( arr ) . sum ( ) ; if ( arrSum - x >= x && arrSum % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class Main { static double PHI = 1.6180339 ; static int [ ] f = { 0 , 1 , 1 , 2 , 3 , 5 } ; public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( n + " th ▁ Fibonacci ▁ Number ▁ = ▁ " + fib ( n ) ) ; } static int fib ( int n ) { if ( n < 6 ) { return f [ n ] ; } int t = 5 ; int fn = 5 ; while ( t < n ) { fn = Math . round ( fn * PHI ) ; t += 1 ; } return fn ; } }
public class Main { public static void main ( String [ ] args ) { int n = 8 ; int k = 4 ; System . out . println ( kthSmallest ( n , k ) ) ; } public static int kthSmallest ( int n , int k ) { return 2 * k ; } }
public class Main { static int n = 5 ; public static void printSumTricky ( int [ ] [ ] mat , int k ) { if ( k > n ) { return ; } int [ ] [ ] stripSum = new int [ n ] [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += mat [ i ] [ j ] ; } stripSum [ 0 ] [ j ] = sum ; for ( int i = 1 ; i < n - k + 1 ; i ++ ) { sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ; stripSum [ i ] [ j ] = sum ; } } for ( int i = 0 ; i < n - k + 1 ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < k ; j ++ ) { sum += stripSum [ i ] [ j ] ; } System . out . print ( sum + " ▁ " ) ; for ( int j = 1 ; j < n - k + 1 ; j ++ ) { sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) ; System . out . print ( sum + " ▁ " ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 1 , 1 , 1 , 1 , 1 } , { 2 , 2 , 2 , 2 , 2 } , { 3 , 3 , 3 , 3 , 3 } , { 4 , 4 , 4 , 4 , 4 } , { 5 , 5 , 5 , 5 , 5 } } ; int k = 3 ; printSumTricky ( mat , k ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int n = Integer . parseInt ( input [ 2 ] ) ; if ( a != 0 ) { if ( b % a != 0 ) { System . out . println ( " No ▁ solution " ) ; } else { b = b / a ; int x = 0 ; int y = - 2000 ; if ( b >= 0 ) { while ( y < b ) { y = ( int ) Math . pow ( x , n ) ; x = x + 1 ; } if ( y > b ) { System . out . println ( " No ▁ solution " ) ; } else { System . out . println ( x - 1 ) ; } } else { if ( n % 2 == 0 ) { System . out . println ( " No ▁ solution " ) ; } else { x = - 1 ; y = 2000 ; while ( y > b ) { y = ( int ) Math . pow ( x , n ) ; x = x - 1 ; } if ( y < b ) { System . out . println ( " No ▁ solution " ) ; } else { System . out . println ( x + 1 ) ; } } } } } else { if ( b == 0 ) { System . out . println ( 5 ) ; } else { System . out . println ( " No ▁ solution " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int X = 4 ; int Y = 3 ; int M = 6 ; int W = 5 ; System . out . println ( totalWays ( X , Y , M , W ) ) ; } public static int ncr ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i ++ ) { ans *= ( n - r + i ) ; ans /= i ; } return ans ; } public static int totalWays ( int X , int Y , int M , int W ) { return ( ncr ( M , X ) * ncr ( W , Y ) ) ; } }
public class Main { public static int nextPowerOf2 ( int n ) { int count = 0 ; if ( ( n & ( n - 1 ) ) == 0 ) { return n ; } while ( n != 0 ) { n >>= 1 ; count ++ ; } return 1 << count ; } public static int removeElement ( int n ) { if ( n == 1 || n == 2 ) { return 0 ; } int a = nextPowerOf2 ( n ) ; if ( n == a || n == a - 1 ) { return 1 ; } else if ( n == a - 2 ) { return 0 ; } else if ( n % 2 == 0 ) { return 1 ; } else { return 2 ; } } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeElement ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int N = Integer . parseInt ( input [ 0 ] ) ; int P = Integer . parseInt ( input [ 1 ] ) ; int ans = 0 ; String [ ] inputList = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] lis = new int [ inputList . length ] ; for ( int i = 0 ; i < inputList . length ; i ++ ) { lis [ i ] = Integer . parseInt ( inputList [ i ] ) ; } int [ ] ls = new int [ lis . length ] ; for ( int i = 0 ; i < lis . length ; i ++ ) { ls [ i ] = lis [ i ] % 2 ; } int one = 0 ; int zero = 0 ; for ( int i = 0 ; i < ls . length ; i ++ ) { if ( ls [ i ] == 1 ) { one ++ ; } else { zero ++ ; } } int pattern_a = 0 ; int pattern_b = 0 ; for ( int j = 0 ; j <= zero ; j ++ ) { pattern_b += combi ( zero , j ) ; } int time = 0 ; while ( time <= one ) { if ( time % 2 == P ) { pattern_a += combi ( one , time ) ; } time ++ ; } System . out . println ( ( int ) ( pattern_a * pattern_b ) ) ; } public static int combi ( int N , int K ) { int a = 1 ; for ( int i = 0 ; i < K ; i ++ ) { a *= N - i ; } for ( int j = 0 ; j < K ; j ++ ) { a /= j + 1 ; } return a ; } }
public static int modInverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) { if ( ( a * x ) % m == 1 ) { return x ; } } return 1 ; } public static void main ( String [ ] args ) { int a = 3 ; int m = 11 ; System . out . println ( modInverse ( a , m ) ) ; }
public class Main { public static int sumOfDigits ( int x ) { int sum = 0 ; while ( x != 0 ) { sum += x % 10 ; x = x / 10 ; } return sum ; } public static int countNumbers ( int l , int r ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % 2 == 0 && sumOfDigits ( i ) % 3 == 0 ) { count += 1 ; } } return count ; } public static void main ( String [ ] args ) { int l = 1000 ; int r = 6000 ; System . out . println ( countNumbers ( l , r ) ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int a = 3 ; int b = 5 ; int c = 2 ; int d = 4 ; findGreater ( a , b ) ; findGreater ( c , d ) ; } public static void findGreater ( int a , int b ) { double x = a * ( Math . log ( b ) ) ; double y = b * ( Math . log ( a ) ) ; if ( y > x ) { System . out . println ( " a ^ b ▁ is ▁ greater " ) ; } else if ( y < x ) { System . out . println ( " b ^ a ▁ is ▁ greater " ) ; } else { System . out . println ( " Both ▁ are ▁ equal " ) ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { String str1 = " toy " ; String str2 = " try " ; int n = str1 . length ( ) ; System . out . println ( findAnswer ( str1 , str2 , n ) ) ; } public static int findAnswer ( String str1 , String str2 , int n ) { int l = 0 , r = 0 ; int ans = 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { l = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { r = i ; break ; } } if ( r < l ) { return 26 * ( n + 1 ) ; } else if ( l == r ) { return ans ; } else { for ( int i = l + 1 ; i <= r ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i - 1 ) ) { ans -= 1 ; break ; } } for ( int i = l + 1 ; i <= r ; i ++ ) { if ( str1 . charAt ( i - 1 ) != str2 . charAt ( i ) ) { ans -= 1 ; break ; } } return ans ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int p = 0 ; p < t ; p ++ ) { int n = scanner . nextInt ( ) ; int x = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int L = x ; int R = x ; for ( int i = 0 ; i < m ; i ++ ) { int l = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; if ( l <= R && r >= L ) { L = Math . min ( L , l ) ; R = Math . max ( R , r ) ; } } System . out . println ( R - L + 1 ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 18 ; int l = 1 ; int r = 3 ; if ( bitsAreInAltPatrnInGivenTRange ( n , l , r ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean bitsAreInAltPatrnInGivenTRange ( int n , int l , int r ) { int num = n >> ( l - 1 ) ; int prev = num & 1 ; num = num >> 1 ; for ( int i = 1 ; i < ( r - l ) ; i ++ ) { int curr = num & 1 ; if ( curr == prev ) { return false ; } prev = curr ; num = num >> 1 ; } return true ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String input = scanner . nextLine ( ) ; String [ ] inputs = input . split ( " ▁ " ) ; int n = Integer . parseInt ( inputs [ 0 ] ) ; int m = Integer . parseInt ( inputs [ 1 ] ) ; String saInput = scanner . nextLine ( ) ; int sa = saInput . length ( ) - saInput . replace ( " - " , " " ) . length ( ) ; sa = Math . min ( n - sa , sa ) ; StringBuilder ss = new StringBuilder ( ) ; for ( int i = 0 ; i < m ; i ++ ) { String [ ] ab = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( ab [ 0 ] ) ; int b = Integer . parseInt ( ab [ 1 ] ) ; b -= a ; if ( b % 2 == 1 && b <= sa << 1 ) { ss . append ( "1 \n " ) ; } else { ss . append ( "0 \n " ) ; } } System . out . print ( ss . toString ( ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( nthGroup ( N ) ) ; } public static int nthGroup ( int n ) { return n * ( 2 * ( int ) Math . pow ( n , 2 ) + 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int a = 0 ; int r = 0 , c = - 1 ; int [ ] [ ] dl = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] tl = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { tl [ j ] = Integer . parseInt ( inputArr [ j ] ) ; if ( c < 0 && tl [ j ] == 0 ) { r = i ; c = j ; } } dl [ i ] = tl ; } int s = 0 ; for ( int num : dl [ ( r + 1 ) % n ] ) { s += num ; } a = s - sum ( dl [ r ] ) ; dl [ r ] [ c ] = a ; if ( n > 1 && a < 1 ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s != sum ( dl [ i ] ) ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } } int [ ] [ ] transposedDl = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { transposedDl [ i ] [ j ] = dl [ j ] [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s != sum ( transposedDl [ i ] ) ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } } int s1 = 0 , s2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s1 += dl [ i ] [ i ] ; s2 += dl [ i ] [ n - i - 1 ] ; } if ( ! ( s1 == s2 && s2 == s ) ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } if ( n == 1 ) { a = 1 ; } System . out . println ( a ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] daysAndMinWalks = inlt ( scanner ) ; int days = daysAndMinWalks [ 0 ] ; int minWalks = daysAndMinWalks [ 1 ] ; int [ ] schedule = inlt ( scanner ) ; int additionalWalks = 0 ; for ( int i = 0 ; i < schedule . length ; i ++ ) { if ( i != schedule . length - 1 ) { if ( schedule [ i ] + schedule [ i + 1 ] < minWalks ) { int missingWalks = minWalks - ( schedule [ i ] + schedule [ i + 1 ] ) ; additionalWalks += missingWalks ; schedule [ i + 1 ] += missingWalks ; } } } System . out . println ( additionalWalks ) ; for ( int num : schedule ) { System . out . print ( num + " ▁ " ) ; } } public static int [ ] inlt ( Scanner scanner ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] result = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { result [ i ] = Integer . parseInt ( input [ i ] ) ; } return result ; } }
public class Main { static final int MAX = 1000000 ; public static void main ( String [ ] args ) { int [ ] L = { 1 , 4 , 9 , 13 , 21 } ; int [ ] R = { 15 , 8 , 12 , 20 , 30 } ; int n = L . length ; System . out . println ( maximumOccurredElement ( L , R , n ) ) ; } public static int maximumOccurredElement ( int [ ] L , int [ ] R , int n ) { int [ ] arr = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ L [ i ] ] += 1 ; arr [ R [ i ] + 1 ] -= 1 ; } int msum = arr [ 0 ] ; int ind = 0 ; for ( int i = 1 ; i < MAX ; i ++ ) { arr [ i ] += arr [ i - 1 ] ; if ( msum < arr [ i ] ) { msum = arr [ i ] ; ind = i ; } } return ind ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String back = scanner . nextLine ( ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { String p = scanner . nextLine ( ) ; if ( new StringBuilder ( p ) . reverse ( ) . toString ( ) . equals ( back ) ) { count ++ ; } back = p ; } System . out . println ( count + 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; if ( n < 1 ) { if ( m < 1 ) { System . out . println ( n + " ▁ " + m ) ; System . exit ( 0 ) ; } System . out . println ( " Impossible " ) ; System . exit ( 0 ) ; } if ( m > n ) { int min = m ; int max = n + m - 1 ; System . out . println ( min + " ▁ " + max ) ; } if ( m <= n ) { int min = n ; int max = n + m - 1 ; if ( m == 0 ) { max = n ; } System . out . println ( min + " ▁ " + max ) ; } } }
public class Main { public static void main ( String [ ] args ) { int interval_limit = 10 ; int lower_limit = 1 ; int upper_limit = 10 ; double integral_res = calculate ( lower_limit , upper_limit , interval_limit ) ; System . out . printf ( " % .4f " , integral_res ) ; } public static double func ( double x ) { return ( 1.0 / ( 1 + x * x ) ) ; } public static double calculate ( int lower_limit , int upper_limit , int interval_limit ) { double interval_size = ( ( double ) ( upper_limit - lower_limit ) / interval_limit ) ; double sum = func ( lower_limit ) + func ( upper_limit ) ; for ( int i = 1 ; i < interval_limit ; i ++ ) { if ( i % 3 == 0 ) { sum = sum + 2 * func ( lower_limit + i * interval_size ) ; } else { sum = sum + 3 * func ( lower_limit + i * interval_size ) ; } } return ( ( 3 * interval_size / 8 ) * sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int K = input . nextInt ( ) ; int X = input . nextInt ( ) ; int Y = input . nextInt ( ) ; if ( N <= K ) { System . out . println ( ( int ) ( N * X ) ) ; } else { System . out . println ( ( int ) ( K * X + ( N - K ) * Y ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; while ( true ) { double x = input . nextDouble ( ) ; if ( x == 0 ) { break ; } double h = input . nextDouble ( ) ; double l = Math . sqrt ( 0.25 * Math . pow ( x , 2 ) + Math . pow ( h , 2 ) ) ; System . out . println ( Math . pow ( x , 2 ) + 2 * x * l ) ; } } }
Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int i = 10 ; while ( k > 0 ) { i += 9 ; int sum = 0 ; String numStr = Integer . toString ( i ) ; for ( int j = 0 ; j < numStr . length ( ) ; j ++ ) { sum += Character . getNumericValue ( numStr . charAt ( j ) ) ; } if ( sum == 10 ) { k -- ; } } System . out . println ( i ) ;
import java . lang . Math ; public class Main { static final int MAX = 100000 ; static boolean [ ] prime = new boolean [ MAX ] ; public static void sieve ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { prime [ i ] = true ; } for ( int p = 2 ; p <= Math . sqrt ( MAX ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < MAX ; i += p ) { prime [ i ] = false ; } } } } public static void printPrimeQuad ( int n ) { for ( int i = 0 ; i < n - 7 ; i ++ ) { if ( prime [ i ] && prime [ i + 2 ] && prime [ i + 6 ] && prime [ i + 8 ] ) { System . out . println ( i + " ▁ " + ( i + 2 ) + " ▁ " + ( i + 6 ) + " ▁ " + ( i + 8 ) ) ; } } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 20 ; printPrimeQuad ( 20 ) ; } }
public class Main { static final int MAX = 1000 ; public static void main ( String [ ] args ) { String x = " ABCD " ; String y = " BACDBDCD " ; int n = x . length ( ) ; int m = y . length ( ) ; System . out . println ( maxSubsequenceSubstring ( x , y , n , m ) ) ; } public static int maxSubsequenceSubstring ( String x , String y , int n , int m ) { int [ ] [ ] dp = new int [ MAX ] [ MAX ] ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( x . charAt ( j - 1 ) == y . charAt ( i - 1 ) ) { dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; } else { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { ans = Math . max ( ans , dp [ i ] [ n ] ) ; } return ans ; } }
public class Main { public static void main ( String [ ] args ) { int n = 10 ; int a = 3 ; int b = 5 ; System . out . println ( findSum ( n , a , b ) ) ; } public static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % a == 0 || i % b == 0 ) { sum += i ; } } return sum ; } }
import java . util . HashMap ; import java . util . HashSet ; import java . util . Map ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Map < Character , Integer > st = new HashMap < > ( ) ; Map < Character , Integer > av = new HashMap < > ( ) ; Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; String t = scanner . nextLine ( ) ; HashSet < Character > se = new HashSet < > ( ) ; for ( char c : s . toCharArray ( ) ) { se . add ( Character . toLowerCase ( c ) ) ; } for ( char c : t . toCharArray ( ) ) { av . put ( c , av . getOrDefault ( c , 0 ) + 1 ) ; } for ( char c : s . toCharArray ( ) ) { st . put ( c , st . getOrDefault ( c , 0 ) + 1 ) ; } int y = 0 , w = 0 ; for ( char c : se ) { char j = Character . toUpperCase ( c ) ; int a = Math . min ( st . getOrDefault ( c , 0 ) , av . getOrDefault ( c , 0 ) ) ; int b = Math . min ( st . getOrDefault ( j , 0 ) , av . getOrDefault ( j , 0 ) ) ; y += a + b ; st . put ( c , st . get ( c ) - a ) ; st . put ( j , st . get ( j ) - b ) ; av . put ( c , av . get ( c ) - a ) ; av . put ( j , av . get ( j ) - b ) ; int cc = Math . min ( st . getOrDefault ( c , 0 ) , av . getOrDefault ( j , 0 ) ) ; int d = Math . min ( st . getOrDefault ( j , 0 ) , av . getOrDefault ( c , 0 ) ) ; w += cc + d ; } System . out . println ( y + " ▁ " + w ) ; } }
public class Main { static final int MAX = 1000 ; static int [ ] sequence = new int [ MAX + 1 ] ; public static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { sequence [ i ] = 0 ; } for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } public static int getNthTerm ( int n ) { return sequence [ n ] ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 6 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; } }
public class Main { static final int MAX = 10000 ; static int [ ] sequence = new int [ MAX + 1 ] ; public static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } public static int getCount ( int n ) { int count = 1 ; int i = n - 1 ; while ( sequence [ i + 1 ] != 0 ) { count ++ ; i = i - sequence [ i + 1 ] ; } return count ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
public class Main { static final int MAX = 10000 ; static int [ ] sequence = new int [ MAX + 1 ] ; public static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } public static int getCount ( int n ) { int nthTerm = sequence [ n - 1 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sequence [ i ] == nthTerm ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int a = 5 ; int b = 3 ; int n = 5 ; System . out . println ( nthElement ( a , b , n ) ) ; } public static int nthElement ( int a , int b , int n ) { int lcm = ( a * b ) / ( int ) ( Math . gcd ( a , b ) ) ; int l = 1 ; int r = Math . min ( a , b ) * n ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; int val = ( int ) ( mid / a ) + ( int ) ( mid / b ) - ( int ) ( mid / lcm ) ; if ( val == n ) { return ( int ) ( Math . max ( ( int ) ( mid / a ) * a , ( int ) ( mid / b ) * b ) ) ; } if ( val < n ) { l = mid + 1 ; } else { r = mid - 1 ; } } return - 1 ; } }
import java . util . Calendar ; public class Main { public static void main ( String [ ] args ) { Calendar calendar = Calendar . getInstance ( ) ; int y = Integer . parseInt ( System . console ( ) . readLine ( ) ) ; boolean is_run = calendar . isLeapYear ( y ) ; int week = calendar . get ( Calendar . DAY_OF_WEEK ) ; while ( true ) { y = y + 1 ; if ( calendar . isLeapYear ( y ) == is_run && calendar . get ( Calendar . DAY_OF_WEEK ) == week ) { System . out . println ( y ) ; break ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int [ ] base = new int [ 3 ] ; int out = 0 ; int point = 0 ; int inning = 0 ; while ( true ) { String event = input . next ( ) ; if ( event . equals ( " HIT " ) ) { if ( base [ 2 ] == 1 ) { point += 1 ; } base [ 2 ] = base [ 1 ] ; base [ 1 ] = base [ 0 ] ; base [ 0 ] = 1 ; } else if ( event . equals ( " HOMERUN " ) ) { point += base [ 0 ] + base [ 1 ] + base [ 2 ] + 1 ; base = new int [ ] { 0 , 0 , 0 } ; } else if ( event . equals ( " OUT " ) ) { out += 1 ; if ( out == 3 ) { System . out . println ( point ) ; inning += 1 ; if ( inning == N ) { break ; } base = new int [ ] { 0 , 0 , 0 } ; out = 0 ; point = 0 ; } } } } }
public class Main { public static void main ( String [ ] args ) { int x = 30 ; int y = 40 ; int z = 400 ; System . out . printf ( " % d " , findValue ( x , y , z ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 || b == 0 ) { return 0 ; } if ( a == b ) { return a ; } if ( a > b ) { return gcd ( a - b , b ) ; } return gcd ( a , b - a ) ; } public static int findValue ( int x , int y , int z ) { int g = gcd ( y , z ) ; return ( x * g ) / gcd ( x , g ) ; } }
public class Main { public static void main ( String [ ] args ) { double a = 1 ; double b = - 2 ; double c = 0 ; double d = 0 ; double x1 = - 1 ; double y1 = 3 ; double z1 = 4 ; foot ( a , b , c , d , x1 , y1 , z1 ) ; } public static void foot ( double a , double b , double c , double d , double x1 , double y1 , double z1 ) { double k = ( - a * x1 - b * y1 - c * z1 - d ) / ( a * a + b * b + c * c ) ; double x2 = a * k + x1 ; double y2 = b * k + y1 ; double z2 = c * k + z1 ; System . out . print ( " x2 ▁ = ▁ " + String . format ( " % .1f " , x2 ) + " ▁ " ) ; System . out . print ( " y2 ▁ = ▁ " + String . format ( " % .1f " , y2 ) + " ▁ " ) ; System . out . print ( " z2 ▁ = ▁ " + String . format ( " % .1f " , z2 ) + " ▁ " ) ; } }
ArrayList < String > c = new ArrayList < String > ( ) ; for ( int i = 0 ; i < 2 ; i ++ ) { c . add ( input ( ) ) ; } if ( c . get ( 0 ) . charAt ( 0 ) == c . get ( 1 ) . charAt ( 2 ) && c . get ( 0 ) . charAt ( 1 ) == c . get ( 1 ) . charAt ( 1 ) && c . get ( 0 ) . charAt ( 2 ) == c . get ( 1 ) . charAt ( 0 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] ar = { 1 , 2 , 1 , 4 , 3 } ; System . out . println ( getMinimumOps ( ar ) ) ; } public static int getMinimumOps ( int [ ] ar ) { int n = ar . length ; int small = Integer . MAX_VALUE ; int large = Integer . MIN_VALUE ; for ( int num : ar ) { small = Math . min ( small , num ) ; large = Math . max ( large , num ) ; } int [ ] [ ] dp = new int [ n ] [ large + 1 ] ; for ( int j = small ; j <= large ; j ++ ) { dp [ 0 ] [ j ] = Math . abs ( ar [ 0 ] - j ) ; } for ( int i = 1 ; i < n ; i ++ ) { int minimum = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { minimum = Math . min ( minimum , dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = minimum + Math . abs ( ar [ i ] - j ) ; } } int ans = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { ans = Math . min ( ans , dp [ n - 1 ] [ j ] ) ; } return ans ; } }
public class Main { static double PI = 3.14159265 ; public static void main ( String [ ] args ) { int a = 7 ; System . out . println ( areaLeaf ( a ) ) ; } public static double areaLeaf ( int a ) { return ( a * a * ( PI / 2 - 1 ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeAlternate ( n ) ) ; n = 10 ; System . out . println ( removeAlternate ( n ) ) ; } public static int removeAlternate ( int n ) { if ( n == 1 ) { return 1 ; } if ( n % 2 == 0 ) { return 2 * removeAlternate ( n / 2 ) - 1 ; } else { return 2 * removeAlternate ( ( n - 1 ) / 2 ) + 1 ; } } }
public class Main { public static void check ( int n , int m ) { if ( n == 2 || m == 2 || n % m == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int m = 3 ; int n = 9 ; check ( n , m ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int k = Integer . parseInt ( input [ 2 ] ) ; int [ ] a = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( a ) ; if ( solve ( Arrays . copyOf ( a , a . length ) , n , m ) || solve ( Arrays . copyOf ( a , a . length ) , m , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } public static boolean solve ( int [ ] a , int n , int m ) { List < Integer > b = new ArrayList < > ( ) ; boolean flag = false ; for ( int i : a ) { int curr = i / n ; if ( curr >= 3 ) { flag = true ; } if ( curr >= 2 ) { b . add ( curr ) ; } } if ( m % 2 == 1 ) { if ( ! flag ) { return false ; } } int sum = 0 ; for ( int num : b ) { sum += num ; } return sum >= m ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out . println ( negProdSubArr ( arr , n ) ) ; } public static int negProdSubArr ( int [ ] arr , int n ) { int positive = 1 ; int negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { arr [ i ] = 1 ; } else { arr [ i ] = - 1 ; } if ( i > 0 ) { arr [ i ] *= arr [ i - 1 ] ; } if ( arr [ i ] == 1 ) { positive += 1 ; } else { negative += 1 ; } } return ( positive * negative ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out . println ( posProdSubArr ( arr , n ) ) ; } public static int negProdSubArr ( int [ ] arr , int n ) { int positive = 1 ; int negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { arr [ i ] = 1 ; } else { arr [ i ] = - 1 ; } if ( i > 0 ) { arr [ i ] *= arr [ i - 1 ] ; } if ( arr [ i ] == 1 ) { positive += 1 ; } else { negative += 1 ; } } return ( positive * negative ) ; } public static int posProdSubArr ( int [ ] arr , int n ) { int total = ( n * ( n + 1 ) ) / 2 ; int cntNeg = negProdSubArr ( arr , n ) ; return ( total - cntNeg ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { System . out . println ( solve ( input ) ) ; } } public static int solve ( Scanner input ) { int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; int cnt = 1 ; int ans = 0 ; while ( cnt <= k && cnt < n ) { cnt *= 2 ; ans ++ ; } if ( cnt >= n ) { return ans ; } else { ans += ( n - cnt ) / k ; ans += ( ( n - cnt ) % k ) != 0 ? 1 : 0 ; return ans ; } } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] l = scanner . nextLine ( ) . split ( " ▁ " ) ; int x = Integer . parseInt ( l [ 0 ] ) ; int y = Integer . parseInt ( l [ 1 ] ) ; int a = Integer . parseInt ( l [ 2 ] ) ; int b = Integer . parseInt ( l [ 3 ] ) ; int lcm = LCM ( x , y ) ; System . out . println ( b / lcm - ( a - 1 ) / lcm ) ; } public static int GCD ( int a , int b ) { while ( a % b != 0 ) { int temp = a ; a = b ; b = temp % b ; } return b ; } public static int LCM ( int a , int b ) { return a * b / GCD ( a , b ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 6 , 5 , 4 } ; int n = arr . length ; System . out . println ( minRemove ( arr , n ) ) ; } public static int minRemove ( int [ ] arr , int n ) { int [ ] LIS = new int [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { LIS [ i ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) { LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ; } } len = Math . max ( len , LIS [ i ] ) ; } return ( n - len ) ; } }
public class Main { public static void printMax ( int [ ] a , int n , int k ) { int [ ] maxUpto = new int [ n ] ; List < Integer > s = new ArrayList < > ( ) ; s . add ( 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { while ( s . size ( ) > 0 && a [ s . get ( s . size ( ) - 1 ) ] < a [ i ] ) { maxUpto [ s . get ( s . size ( ) - 1 ) ] = i - 1 ; s . remove ( s . size ( ) - 1 ) ; } s . add ( i ) ; } while ( s . size ( ) > 0 ) { maxUpto [ s . get ( s . size ( ) - 1 ) ] = n - 1 ; s . remove ( s . size ( ) - 1 ) ; } int j = 0 ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) { while ( j < i || maxUpto [ j ] < i + k - 1 ) { j ++ ; } System . out . print ( a [ j ] + " ▁ " ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int [ ] a = { 9 , 7 , 2 , 4 , 6 , 8 , 2 , 1 , 5 } ; int n = a . length ; int k = 3 ; printMax ( a , n , k ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int ans = 0 ; for ( int a = 0 ; a < 100 ; a ++ ) { for ( int b = 0 ; b < 100 ; b ++ ) { int power = ( int ) Math . pow ( a , b ) ; String powerString = String . valueOf ( power ) ; int sum = 0 ; for ( int i = 0 ; i < powerString . length ( ) ; i ++ ) { sum += Character . getNumericValue ( powerString . charAt ( i ) ) ; } ans = Math . max ( ans , sum ) ; } } return String . valueOf ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 1 , 3 , 4 , 2 , 3 } ; int k = 4 ; int n = arr . length ; countDistinct ( arr , n , k ) ; } public static void countDistinct ( int [ ] arr , int n , int k ) { for ( int i = 0 ; i <= n - k ; i ++ ) { System . out . println ( countWindowDistinct ( Arrays . copyOfRange ( arr , i , i + k ) , k ) ) ; } } public static int countWindowDistinct ( int [ ] win , int k ) { int dist_count = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int j = 0 ; while ( j < i ) { if ( win [ i ] == win [ j ] ) { break ; } else { j ++ ; } } if ( j == i ) { dist_count ++ ; } } return dist_count ; } }
public class Main { public static void main ( String [ ] args ) { char [ ] str = { '1' , '2' , '3' , '4' } ; System . out . println ( evenNumSubstring ( str ) ) ; } public static int evenNumSubstring ( char [ ] str ) { int length = str . length ; int count = 0 ; for ( int i = 0 ; i < length ; i ++ ) { int temp = str [ i ] - '0' ; if ( temp % 2 == 0 ) { count += ( i + 1 ) ; } } return count ; } }
public class Main { static int max = 4 ; public static void main ( String [ ] args ) { int n = 3 ; int m = 3 ; int k = 2 ; int [ ] [ ] dp = new int [ max ] [ n + 1 ] ; for ( int i = 0 ; i < max ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } System . out . println ( m * countWays ( 1 , 0 , dp , n , m , k ) ) ; } public static int countWays ( int index , int cnt , int [ ] [ ] dp , int n , int m , int k ) { if ( index == n ) { if ( cnt == k ) { return 1 ; } else { return 0 ; } } if ( dp [ index ] [ cnt ] != - 1 ) { return dp [ index ] [ cnt ] ; } int ans = 0 ; ans += countWays ( index + 1 , cnt , dp , n , m , k ) ; ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k ) ; dp [ index ] [ cnt ] = ans ; return dp [ index ] [ cnt ] ; } }
import java . util . HashSet ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { printAliquot ( 12 ) ; } public static int getSum ( int n ) { int summ = 0 ; for ( int i = 1 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { summ += i ; } else { summ += i ; summ += n / i ; } } } return summ - n ; } public static void printAliquot ( int n ) { System . out . print ( n + " ▁ " ) ; Set < Integer > s = new HashSet < > ( ) ; s . add ( n ) ; int nextt = 0 ; while ( n > 0 ) { n = getSum ( n ) ; if ( s . contains ( n ) ) { System . out . println ( " Repeats ▁ with ▁ " + n ) ; break ; } System . out . print ( n + " ▁ " ) ; s . add ( n ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int a = Integer . parseInt ( input1 [ 1 ] ) ; int b = Integer . parseInt ( input1 [ 2 ] ) ; int [ ] lista = new int [ a ] ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int i = 0 ; i < a ; i ++ ) { lista [ i ] = Integer . parseInt ( input2 [ i ] ) ; } int [ ] listb = new int [ b ] ; String [ ] input3 = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int i = 0 ; i < b ; i ++ ) { listb [ i ] = Integer . parseInt ( input3 [ i ] ) ; } for ( int k = 0 ; k < n ; k ++ ) { if ( contains ( lista , k + 1 ) ) { System . out . print ( "1 ▁ " ) ; } else { System . out . print ( "2 ▁ " ) ; } } } public static boolean contains ( int [ ] arr , int targetValue ) { for ( int s : arr ) { if ( s == targetValue ) { return true ; } } return false ; } }
public class Main { public static void reverseArray ( int [ ] arr , int n ) { for ( int i = 0 ; i < n / 2 ; i ++ ) { int temp = arr [ i ] ; arr [ i ] = arr [ n - i - 1 ] ; arr [ n - i - 1 ] = temp ; } } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 3 , 7 , 2 , 1 , 6 } ; int n = arr . length ; reverseArray ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
public class Main { public static void printSeriesSum ( int N ) { int sum = 0 ; int a = 1 ; int cnt = 0 ; boolean flag = true ; sum += a ; while ( cnt < N ) { int nextElement ; if ( flag ) { nextElement = a * 2 ; sum += nextElement ; flag = ! flag ; } else { nextElement = ( int ) ( a * ( 3.0 / 2 ) ) ; sum += nextElement ; flag = ! flag ; } a = nextElement ; cnt ++ ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { int N = 8 ; printSeriesSum ( N ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; while ( t > 0 ) { t -- ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = gcd ( a , b ) ; a = a / c ; b = b / c ; int ans1 , ans2 ; if ( a == b ) { ans1 = 1 ; ans2 = 0 ; } else if ( a % 2 == 0 || b % 2 == 0 ) { ans1 = 1 ; ans2 = 1 ; } else { ans1 = a * b / 2 + 1 ; ans2 = a * b / 2 ; } System . out . println ( ans1 + " ▁ " + ans2 ) ; } } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } else { return gcd ( b % a , a ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int sz = ( int ) 1e5 ; boolean [ ] isPrime = new boolean [ sz + 1 ] ; Arrays . fill ( isPrime , true ) ; sieve ( isPrime , sz ) ; int L = 21 ; int R = 50 ; System . out . println ( minDifference ( L , R , isPrime ) ) ; } public static void sieve ( boolean [ ] isPrime , int sz ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= Math . sqrt ( sz ) ; i ++ ) { if ( isPrime [ i ] ) { for ( int j = i * i ; j < sz ; j += i ) { isPrime [ j ] = false ; } } } } public static int minDifference ( int L , int R , boolean [ ] isPrime ) { int fst = 0 ; for ( int i = L ; i <= R ; i ++ ) { if ( isPrime [ i ] ) { fst = i ; break ; } } int snd = 0 ; for ( int i = fst + 1 ; i <= R ; i ++ ) { if ( isPrime [ i ] ) { snd = i ; break ; } } if ( snd == 0 ) { return - 1 ; } int diff = snd - fst ; int left = snd + 1 ; int right = R ; for ( int i = left ; i <= right ; i ++ ) { if ( isPrime [ i ] ) { if ( i - snd <= diff ) { fst = snd ; snd = i ; diff = snd - fst ; } } } return diff ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMaxLength ( arr , n ) ) ; } public static int getMaxLength ( int [ ] arr , int n ) { int start = 0 ; int preCnt = 0 ; while ( start < n && arr [ start ] == 1 ) { preCnt = preCnt + 1 ; start = start + 1 ; } int end = n - 1 ; int suffCnt = 0 ; while ( end >= 0 && arr [ end ] == 1 ) { suffCnt = suffCnt + 1 ; end = end - 1 ; } if ( start > end ) { return n ; } int midCnt = 0 ; int i = start ; int result = 0 ; while ( i <= end ) { if ( arr [ i ] == 1 ) { midCnt = midCnt + 1 ; result = Math . max ( result , midCnt ) ; } else { midCnt = 0 ; } i = i + 1 ; } return Math . max ( result , preCnt + suffCnt ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; long INF = ( long ) Math . pow ( 10 , 20 ) ; int d = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; int [ ] temp = new int [ d ] ; for ( int i = 0 ; i < d ; i ++ ) { temp [ i ] = scanner . nextInt ( ) ; } int [ ] alst = new int [ n ] ; int [ ] blst = new int [ n ] ; int [ ] clst = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { alst [ i ] = scanner . nextInt ( ) ; blst [ i ] = scanner . nextInt ( ) ; clst [ i ] = scanner . nextInt ( ) ; } long [ ] [ ] dp = new long [ d + 1 ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! ( alst [ i ] <= temp [ 0 ] && temp [ 0 ] <= blst [ i ] ) ) { dp [ 0 ] [ i ] = - INF ; } } for ( int i = 1 ; i < d ; i ++ ) { int t = temp [ i ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( alst [ j ] <= t && t <= blst [ j ] ) { long maxVal = 0 ; for ( int x = 0 ; x < n ; x ++ ) { maxVal = Math . max ( maxVal , dp [ i - 1 ] [ x ] + Math . abs ( clst [ j ] - clst [ x ] ) ) ; } dp [ i ] [ j ] = maxVal ; } } } long maxVal = 0 ; for ( int i = 0 ; i < n ; i ++ ) { maxVal = Math . max ( maxVal , dp [ d ] [ i ] ) ; } System . out . println ( maxVal ) ; } } ```
``` java import java . util . Scanner ; public class Main { public static void f ( String s ) { for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) < s . charAt ( i - 1 ) ) { System . out . println ( " YES " ) ; System . out . println ( ( i + 1 ) + " ▁ " + ( i + 2 ) ) ; return ; } } System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; f ( scanner . next ( ) ) ; } } ```
public class Main { public static void main ( String [ ] args ) { double num = 9.2345 ; double sqroot_of_num = sqroot ( num ) ; System . out . println ( " Square ▁ root ▁ of ▁ " + num + " ▁ = ▁ " + Math . round ( ( sqroot_of_num * 100000.0 ) / 100000.0 * 100000.0 ) / 100000.0 ) ; } public static double sqroot ( double s ) { double pSq = 0 ; double N = 0 ; for ( int i = ( int ) s ; i > 0 ; i -- ) { for ( int j = 1 ; j < i ; j ++ ) { if ( j * j == i ) { pSq = i ; N = j ; break ; } } if ( pSq > 0 ) { break ; } } double d = s - pSq ; double P = d / ( 2.0 * N ) ; double A = N + P ; double sqrt_of_s = A - ( ( P * P ) / ( 2.0 * A ) ) ; return sqrt_of_s ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; List < Integer > arr = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr . add ( input . nextInt ( ) ) ; } int ans = - 1 ; int temp = 0 ; Set < Integer > seen = new HashSet < > ( ) ; int p = 0 ; while ( seen . size ( ) != n ) { ans += 1 ; if ( p % 2 == 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( ! seen . contains ( i ) && arr . get ( i ) <= temp ) { seen . add ( i ) ; temp += 1 ; } } p += 1 ; } else { for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( ! seen . contains ( i ) && arr . get ( i ) <= temp ) { seen . add ( i ) ; temp += 1 ; } } p += 1 ; } } System . out . println ( ans ) ; } }
while ( true ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int R = Integer . parseInt ( input [ 0 ] ) ; int N = Integer . parseInt ( input [ 1 ] ) ; if ( R == 0 && N == 0 ) { break ; } int geta = 20 ; int [ ] buildings = new int [ geta * 2 ] ; for ( int j = 0 ; j < N ; j ++ ) { String [ ] buildingInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int xl = Integer . parseInt ( buildingInput [ 0 ] ) ; int xr = Integer . parseInt ( buildingInput [ 1 ] ) ; int h = Integer . parseInt ( buildingInput [ 2 ] ) ; for ( int i = xl + geta ; i < xr + geta ; i ++ ) { buildings [ i ] = Math . max ( buildings [ i ] , h ) ; } } double left = 0 ; double right = 20 ; for ( int k = 0 ; k < 100 ; k ++ ) { double mid = ( left + right ) / 2 ; boolean flag = true ; for ( int i = - R + geta ; i < R + geta ; i ++ ) { double y ; if ( i < geta ) { y = Math . pow ( R * R - Math . pow ( ( i - geta + 1 ) , 2 ) , 0.5 ) ; flag &= buildings [ i ] >= y - R + mid ; } else { y = Math . pow ( R * R - Math . pow ( ( i - geta ) , 2 ) , 0.5 ) ; flag &= buildings [ i ] >= y - R + mid ; } } if ( flag ) { left = mid ; } else { right = mid ; } } System . out . printf ( " % .20f \n " , left ) ; }
String [ ] arr = new String [ ] { "0" } ; for ( String s : Arrays . copyOfRange ( arr , 2 , arr . length ) ) { int i = 0 ; int r = 0 ; String [ ] splitArr = s . split ( " ▁ " ) ; Arrays . sort ( splitArr ) ; for ( String str : splitArr ) { int x = Integer . parseInt ( str ) ; i ++ ; if ( x > i ) { r = i ; } } System . out . println ( r + 1 ) ; }
while ( true ) { int n = Integer . parseInt ( System . console ( ) . readLine ( ) ) ; if ( n == 0 ) { break ; } System . out . println ( Integer . toOctalString ( n ) . substring ( 2 ) . replace ( '4' , '5' ) . replace ( '5' , '7' ) . replace ( '6' , '8' ) . replace ( '7' , '9' ) ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 8 , 2 , 3 , 5 , 7 , 9 , 10 } ; int n = arr . length ; System . out . println ( " Maximum ▁ sum ▁ = ▁ " + maxAlternateSum ( arr , n ) ) ; } public static int maxAlternateSum ( int [ ] arr , int n ) { if ( n == 1 ) { return arr [ 0 ] ; } int [ ] dec = new int [ n + 1 ] ; int [ ] inc = new int [ n + 1 ] ; dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr [ i ] ) ; flag = 1 ; } else if ( arr [ j ] < arr [ i ] && flag == 1 ) { inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr [ i ] ) ; } } } int result = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( result < inc [ i ] ) { result = inc [ i ] ; } if ( result < dec [ i ] ) { result = dec [ i ] ; } } return result ; } }
public class Main { public static void generateArr ( int [ ] arr , int n ) { if ( n == 1 ) { System . out . println ( arr [ 0 ] ) ; return ; } int [ ] barr = new int [ n ] ; barr [ 0 ] = arr [ 0 ] & arr [ 1 ] ; barr [ n - 1 ] = arr [ n - 1 ] & arr [ n - 2 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { barr [ i ] = arr [ i - 1 ] & arr [ i + 1 ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( barr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; generateArr ( arr , n ) ; } }
public class Main { static void ReplaceElements ( int [ ] arr , int n ) { if ( n <= 1 ) { return ; } int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev ^ arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev ^ arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
public class Main { static void ReplaceElements ( int [ ] arr , int n ) { if ( n <= 1 ) { return ; } int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev + arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev + arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int A = 3 ; int B = 2 ; int C = 2 ; System . out . println ( countTriplets ( A , B , C ) ) ; } public static int countTriplets ( int A , int B , int C ) { int ans = 0 ; for ( int i = 1 ; i <= A ; i ++ ) { for ( int j = 1 ; j <= B ; j ++ ) { for ( int k = 1 ; k <= C ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; } }
import java . lang . Math ; public class Main { static final int MAX = 100000 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; public static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i <= MAX ; i ++ ) { prime [ i ] = true ; } for ( int p = 2 ; p <= Math . sqrt ( MAX ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * p ; i <= MAX ; i += p ) { prime [ i ] = false ; } } } } public static int smallestPrime ( int d ) { int l = ( int ) Math . pow ( 10 , d - 1 ) ; int r = ( int ) ( Math . pow ( 10 , d ) - 1 ) ; for ( int i = l ; i <= r ; i ++ ) { if ( prime [ i ] ) { return i ; } } return - 1 ; } public static int largestPrime ( int d ) { int l = ( int ) Math . pow ( 10 , d - 1 ) ; int r = ( int ) ( Math . pow ( 10 , d ) - 1 ) ; for ( int i = r ; i >= l ; i -- ) { if ( prime [ i ] ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int [ ] queries = { 2 , 5 } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( smallestPrime ( queries [ i ] ) + " ▁ " + largestPrime ( queries [ i ] ) ) ; } } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { long INF = ( long ) Math . pow ( 10 , 20 ) ; Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; long [ ] dist = new long [ n ] ; long [ ] weth = new long [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { dist [ i ] = scanner . nextLong ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { weth [ i ] = scanner . nextLong ( ) ; } long [ ] dp = new long [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { dp [ i ] = INF ; } dp [ 0 ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = n ; j > 0 ; j -- ) { dp [ j ] = Math . min ( dp [ j ] , dp [ j - 1 ] + dist [ j - 1 ] * weth [ i ] ) ; } } System . out . println ( dp [ n ] ) ; } } ```
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int k = Integer . parseInt ( input1 [ 1 ] ) ; int x = Integer . parseInt ( input1 [ 2 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > ls = new ArrayList < > ( ) ; for ( String s : input2 ) { ls . add ( Integer . parseInt ( s ) ) ; } for ( int m = 1 ; m <= k ; m ++ ) { ls . set ( ls . size ( ) - m , x ) ; } int sum = 0 ; for ( int num : ls ) { sum += num ; } System . out . println ( sum ) ; } }
``` java import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int [ ] input = Arrays . stream ( br . readLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int n = input [ 0 ] ; int m = input [ 1 ] ; int a = input [ 2 ] ; int d = input [ 3 ] ; int [ ] t = Arrays . stream ( br . readLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] result = solve ( n , m , a , d , t ) ; for ( int value : result ) { System . out . println ( value ) ; } } public static int [ ] read_input ( String input_path ) throws IOException { BufferedReader br ; if ( input_path == null ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } else { br = new BufferedReader ( new FileReader ( input_path ) ) ; } int [ ] input = Arrays . stream ( br . readLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int n = input [ 0 ] ; int m = input [ 1 ] ; int a = input [ 2 ] ; int d = input [ 3 ] ; int [ ] t = Arrays . stream ( br . readLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; return new int [ ] { n , m , a , d , t } ; } public static int [ ] sol ( int n1 , int m , int a , int d , int [ ] t ) { Arrays . sort ( t ) ; int pred = 0 ; int k = 0 ; int n = 0 ; int step = d / a + 1 ; int answer = 0 ; int fl = 0 ; for ( int i : t ) { if ( i > pred ) { if ( fl == 0 ) { n = ( i - pred + ( pred % a ) ) / a ; if ( n != 0 ) { k += ( n / step ) * step - ( step * ( n % step == 0 ) ) + 1 ; if ( k > n1 ) { k = n1 ; fl = 1 ; } } if ( ( k * a + d >= i ) && ( n != 0 ) ) { pred = k * a + d ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int test_case = scanner . nextInt ( ) ; while ( test_case > 0 ) { int n = scanner . nextInt ( ) ; int sum = n * ( n + 1 ) / 2 ; int i = 1 ; while ( i <= n ) { sum -= i * 2 ; i *= 2 ; } System . out . println ( sum ) ; test_case -- ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < String > s = new ArrayList < > ( Arrays . asList ( scanner . nextLine ( ) . split ( " " ) ) ) ; boolean x = true ; Map < String , Integer > dt = new HashMap < > ( ) ; for ( String i : s ) { if ( dt . containsKey ( i ) ) { dt . put ( i , dt . get ( i ) + 1 ) ; } else { dt . put ( i , 1 ) ; } } int cnt = 0 ; for ( Map . Entry < String , Integer > entry : dt . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 && cnt < 1 ) { cnt += 1 ; } else if ( entry . getValue ( ) % 2 != 0 && cnt >= 1 ) { x = false ; break ; } } if ( x ) { System . out . println ( " First " ) ; } else if ( ! x && s . size ( ) % 2 == 0 ) { System . out . println ( " Second " ) ; } else if ( ! x && s . size ( ) % 2 != 0 ) { System . out . println ( " First " ) ; } } }
public class Main { public static int reverse ( int n ) { int rev = 0 ; while ( n != 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n /= 10 ; } return rev ; } public static void getSum ( int n ) { n = reverse ( n ) ; int sumOdd = 0 ; int sumEven = 0 ; int c = 1 ; while ( n != 0 ) { if ( c % 2 == 0 ) { sumEven += n % 10 ; } else { sumOdd += n % 10 ; } n /= 10 ; c ++ ; } System . out . println ( " Sum ▁ odd ▁ = " + sumOdd ) ; System . out . println ( " Sum ▁ even ▁ = " + sumEven ) ; } public static void main ( String [ ] args ) { int n = 457892 ; getSum ( n ) ; } }
public class Main { public static void disp ( int row_no , int block ) { System . out . println ( row_no * block ) ; } public static int row ( int ht , int h ) { return ht / h ; } public static void calculate ( int l , int w , int h , int a , int ht ) { int no_block = ( 4 * a ) / l ; int row_no ; if ( h < w ) { row_no = row ( ht , w ) ; } else { row_no = row ( ht , h ) ; } disp ( row_no , no_block ) ; } public static void main ( String [ ] args ) { int l = 50 ; int w = 20 ; int h = 35 ; int a = 700 ; int ht = 140 ; calculate ( l , w , h , a , ht ) ; } }
``` java import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { String octal = "13" ; System . out . println ( maxFreq ( octal ) ) ; } public static int maxFreq ( String s ) { String [ ] bin = { "000" , "001" , "010" , "011" , "100" , "101" , "110" , "111" } ; String binary = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { binary += bin [ ( int ) s . charAt ( i ) - ( int ) '0' ] ; } binary = binary . substring ( 0 , binary . length ( ) - 1 ) ; int count = 1 ; int prev = - 1 ; int j = 0 ; for ( int i = binary . length ( ) - 1 ; i >= 0 ; i -- ) { if ( binary . charAt ( i ) == '1' ) { count = Math . max ( count , j - prev ) ; prev = j ; } j ++ ; } return count ; } } ```
public class Main { public static void main ( String [ ] args ) { String s = " hello " ; int n = s . length ( ) ; int k = 2 ; System . out . println ( encryptString ( s , n , k ) ) ; } public static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } public static String encryptString ( String s , int n , int k ) { int [ ] cv = new int [ n ] ; int [ ] cc = new int [ n ] ; if ( isVowel ( s . charAt ( 0 ) ) ) { cv [ 0 ] = 1 ; } else { cc [ 0 ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { cv [ i ] = cv [ i - 1 ] + ( isVowel ( s . charAt ( i ) ) ? 1 : 0 ) ; cc [ i ] = cc [ i - 1 ] + ( isVowel ( s . charAt ( i ) ) ? 0 : 1 ) ; } StringBuilder ans = new StringBuilder ( ) ; int prod = cc [ k - 1 ] * cv [ k - 1 ] ; ans . append ( prod ) ; for ( int i = k ; i < s . length ( ) ; i ++ ) { prod = ( cc [ i ] - cc [ i - k ] ) * ( cv [ i ] - cv [ i - k ] ) ; ans . append ( prod ) ; } return ans . toString ( ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] num = { 13 , 14 , 15 , 16 , 17 } ; int [ ] freq = { 2 , 5 , 13 , 7 , 3 } ; int n = num . length ; System . out . printf ( " % .4f " , harmonicMean ( num , freq , n ) ) ; } public static double harmonicMean ( int [ ] arr , int [ ] freq , int n ) { double sm = 0 ; int frequency_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sm = sm + ( double ) freq [ i ] / arr [ i ] ; frequency_sum = frequency_sum + freq [ i ] ; } return Math . round ( ( double ) frequency_sum / sm * 10000 ) / 10000.0 ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int a = 9 ; int n = 6 ; System . out . printf ( " % .3f " , polyarea ( n , a ) ) ; } public static double polyarea ( int n , int a ) { if ( a < 0 && n < 0 ) { return - 1 ; } double A = ( a * a * n ) / ( 4 * Math . tan ( ( 180 / n ) * Math . PI / 180 ) ) ; return A ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int c = 6 ; System . out . println ( getMinValue ( c ) ) ; } public static int __gcd ( int a , int b ) { if ( a == 0 ) { return b ; } if ( b == 0 ) { return a ; } if ( a == b ) { return a ; } if ( a > b ) { return __gcd ( a - b , b ) ; } return __gcd ( a , b - a ) ; } public static int lcm ( int a , int b ) { return ( a / __gcd ( a , b ) * b ) ; } public static int getMinValue ( int c ) { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= ( int ) Math . pow ( c , 1 / 2 ) ; i ++ ) { if ( c % i == 0 && lcm ( i , c / i ) == c ) { ans = Math . min ( ans , Math . max ( i , c / i ) ) ; } } return ans ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int M = scanner . nextInt ( ) ; int Nmin = scanner . nextInt ( ) ; int Nmax = scanner . nextInt ( ) ; if ( M + Nmin + Nmax == 0 ) { break ; } int [ ] P = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } int [ ] dif = new int [ M ] ; for ( int i = 0 ; i < P . length - 1 ; i ++ ) { dif [ i + 1 ] = P [ i ] - P [ i + 1 ] ; } int ans = Nmin ; int tmp = dif [ Nmin ] ; for ( int i = Nmin + 1 ; i <= Nmax ; i ++ ) { if ( dif [ i ] >= tmp ) { ans = i ; tmp = dif [ i ] ; } } System . out . println ( ans ) ; } } } ```
import java . util . * ; import java . util . stream . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < Integer > R = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . map ( Integer :: parseInt ) . collect ( Collectors . toList ( ) ) ; int b = R . get ( 0 ) ; int q = R . get ( 1 ) ; int i = R . get ( 2 ) ; int m = R . get ( 3 ) ; Set < Integer > a = new HashSet < > ( Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . map ( Integer :: parseInt ) . collect ( Collectors . toList ( ) ) ) ; int c = 0 ; for ( int _ = 0 ; _ < 99 ; _ ++ ) { if ( Math . abs ( b ) > i ) break ; if ( ! a . contains ( b ) ) c ++ ; b *= q ; } System . out . println ( c < 32 ? c : " inf " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; Map < Integer , Integer > m = new HashMap < > ( ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 0 ; j < n ; j ++ ) { int value = Integer . parseInt ( input [ j ] ) ; m . put ( value , j + 1 ) ; } Map < Integer , Integer > sortedMap = new TreeMap < > ( m ) ; List < Integer > keys = new ArrayList < > ( sortedMap . keySet ( ) ) ; System . out . println ( sortedMap . get ( keys . get ( 0 ) ) + " ▁ " + sortedMap . get ( keys . get ( keys . size ( ) - 1 ) ) ) ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( findIndex ( n ) ) ; } public static int findIndex ( int n ) { double fibo = 2.078087 * Math . log ( n ) + 1.672276 ; return Math . round ( ( float ) fibo ) ; } }
public class Main { public static void main ( String [ ] args ) { String str1 = "978" ; String str2 = "12977" ; System . out . println ( findDiff ( str1 , str2 ) ) ; String s1 = "100" ; String s2 = "1000000" ; System . out . println ( findDiff ( s1 , s2 ) ) ; } public static boolean isSmaller ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; if ( n1 < n2 ) { return true ; } if ( n2 < n1 ) { return false ; } for ( int i = 0 ; i < n1 ; i ++ ) { if ( str1 . charAt ( i ) < str2 . charAt ( i ) ) { return true ; } else if ( str1 . charAt ( i ) > str2 . charAt ( i ) ) { return false ; } } return false ; } public static String findDiff ( String str1 , String str2 ) { if ( isSmaller ( str1 , str2 ) ) { String temp = str1 ; str1 = str2 ; str2 = temp ; } String str3 = " " ; int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; str1 = new StringBuilder ( str1 ) . reverse ( ) . toString ( ) ; str2 = new StringBuilder ( str2 ) . reverse ( ) . toString ( ) ; int carry = 0 ; for ( int i = 0 ; i < n2 ; i ++ ) { int sub = ( ( str1 . charAt ( i ) - '0' ) - ( str2 . charAt ( i ) - '0' ) - carry ) ; if ( sub < 0 ) { sub = sub + 10 ; carry = 1 ; } else { carry = 0 ; } str3 = str3 + String . valueOf ( sub ) ; } for ( int i = n2 ; i < n1 ; i ++ ) { int sub = ( ( str1 . charAt ( i ) - '0' ) - carry ) ; if ( sub < 0 ) { sub = sub + 10 ; carry = 1 ; } else { carry = 0 ; } str3 = str3 + String . valueOf ( sub ) ; } str3 = new StringBuilder ( str3 ) . reverse ( ) . toString ( ) ; return str3 ; } }
public class Main { public static void main ( String [ ] args ) { String s1 = "0011" ; String s2 = "1111" ; int ans = minSwaps ( s1 , s2 ) ; System . out . println ( ans ) ; } public static int minSwaps ( String s1 , String s2 ) { int c0 = 0 ; int c1 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == '0' && s2 . charAt ( i ) == '1' ) { c0 ++ ; } else if ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '0' ) { c1 ++ ; } } int ans = c0 / 2 + c1 / 2 ; if ( c0 % 2 == 0 && c1 % 2 == 0 ) { return ans ; } else if ( ( c0 + c1 ) % 2 == 0 ) { return ans + 2 ; } else { return - 1 ; } } }
public class SegmentTree { private int N ; private int [ ] seg ; private int max ( int a , int b ) { if ( a < b ) { return b ; } else { return a ; } } public SegmentTree ( int n ) { N = 1 ; while ( N < n ) { N *= 2 ; } seg = new int [ N * 2 - 1 ] ; } public void maxUpdate ( int k , int a ) { k += N - 1 ; seg [ k ] = a ; while ( 0 < k ) { k = ( k - 1 ) / 2 ; seg [ k ] = max ( seg [ 2 * k + 1 ] , seg [ 2 * k + 2 ] ) ; } } private int maxQuery ( int a , int b , int k , int l , int r ) { if ( r <= a || b <= l ) { return 0 ; } if ( a <= l && r <= b ) { return seg [ k ] ; } else { int vl = maxQuery ( a , b , k * 2 + 1 , l , ( l + r ) / 2 ) ; int vr = maxQuery ( a , b , k * 2 + 2 , ( l + r ) / 2 , r ) ; return max ( vl , vr ) ; } } public int maxQuery ( int a , int b ) { return maxQuery ( a , b , 0 , 0 , N ) ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] X = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { X [ i ] = scanner . nextInt ( ) ; } SegmentTree st = new SegmentTree ( n + 1 ) ; for ( int x : X ) { st . maxUpdate ( x , st . maxQuery ( 0 , x ) + x ) ; } System . out . println ( ( n * ( n + 1 ) ) / 2 - st . maxQuery ( 0 , n + 1 ) ) ; } }
Scanner scanner = new Scanner ( System . in ) ; String a = scanner . nextLine ( ) ; int p = a . indexOf ( ' ^ ' ) ; int c = 0 ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( Character . isDigit ( a . charAt ( i ) ) ) { c += ( i - p ) * Integer . parseInt ( String . valueOf ( a . charAt ( i ) ) ) ; } } System . out . println ( ( c > 0 ) ? " right " : " left " ) ;
public class Main { public static void normalSieve ( int n ) { int [ ] prime = new int [ n / 2 ] ; int i = 3 ; while ( i * i < n ) { if ( prime [ i / 2 ] == 0 ) { int j = i * i ; while ( j < n ) { prime [ j / 2 ] = 1 ; j += i * 2 ; } } i += 2 ; } System . out . print ( 2 + " ▁ " ) ; i = 3 ; while ( i < n ) { if ( prime [ i / 2 ] == 0 ) { System . out . print ( i + " ▁ " ) ; } i += 2 ; } } public static void main ( String [ ] args ) { int n = 100 ; normalSieve ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String txt = scanner . nextLine ( ) ; String out = " " ; int cap = 0 ; int small = 0 ; for ( int i = 0 ; i < txt . length ( ) ; i ++ ) { char t = txt . charAt ( i ) ; if ( Character . isLowerCase ( t ) ) { small ++ ; } else { cap ++ ; } } if ( small >= cap ) { for ( int i = 0 ; i < txt . length ( ) ; i ++ ) { out += Character . toLowerCase ( txt . charAt ( i ) ) ; } } else { for ( int i = 0 ; i < txt . length ( ) ; i ++ ) { out += Character . toUpperCase ( txt . charAt ( i ) ) ; } } System . out . println ( out ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 5 ; int [ ] arr = { 3 , 2 , 3 , 4 , 4 } ; System . out . println ( frequencyOfSmallest ( N , arr ) ) ; } public static int frequencyOfSmallest ( int n , int [ ] arr ) { int mn = arr [ 0 ] ; int freq = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < mn ) { mn = arr [ i ] ; freq = 1 ; } else if ( arr [ i ] == mn ) { freq += 1 ; } } return freq ; } }
public class Main { static boolean isSubArray ( int [ ] A , int [ ] B , int n , int m ) { int i = 0 ; int j = 0 ; while ( i < n && j < m ) { if ( A [ i ] == B [ j ] ) { i ++ ; j ++ ; if ( j == m ) { return true ; } } else { i = i - j + 1 ; j = 0 ; } } return false ; } public static void main ( String [ ] args ) { int [ ] A = { 2 , 3 , 0 , 5 , 1 , 1 , 2 } ; int n = A . length ; int [ ] B = { 3 , 0 , 5 , 1 } ; int m = B . length ; if ( isSubArray ( A , B , n , m ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > l = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { l . add ( scanner . nextInt ( ) ) ; } int ans = n - 1 ; int last = 0 ; for ( int i : l ) { ans += Math . abs ( last - i ) + 1 ; last = i ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; System . out . println ( calculateSum ( n , k ) ) ; } public static int calculateSum ( int n , int k ) { int res = 1 ; int MOD = 1000000007 ; for ( int i = 0 ; i < k ; i ++ ) { res = ( res * n ) % MOD ; } return res ; } }
public class Main { static boolean ok ( String last4 ) { for ( int i = 0 ; i < 4 ; i ++ ) { char [ ] t = last4 . toCharArray ( ) ; if ( i >= 1 ) { char temp = t [ i ] ; t [ i ] = t [ i - 1 ] ; t [ i - 1 ] = temp ; } if ( String . valueOf ( t ) . contains ( " AGC " ) ) { return false ; } } return true ; } static int dfs ( int cur , String last3 , int n , int mod , int [ ] [ ] memo ) { if ( memo [ cur ] [ Integer . parseInt ( last3 , 2 ) ] != 0 ) { return memo [ cur ] [ Integer . parseInt ( last3 , 2 ) ] ; } if ( cur == n ) { return 1 ; } int ret = 0 ; for ( char c : " ACGT " . toCharArray ( ) ) { if ( ok ( last3 + c ) ) { ret = ( ret + dfs ( cur + 1 , last3 . substring ( 1 ) + c , n , mod , memo ) ) % mod ; } } memo [ cur ] [ Integer . parseInt ( last3 , 2 ) ] = ret ; return ret ; } public static void main ( String [ ] args ) { int n = 4 ; int mod = 1000000007 ; int [ ] [ ] memo = new int [ n + 1 ] [ 1 << 12 ] ; System . out . println ( dfs ( 0 , " TTT " , n , mod , memo ) ) ; } }
int i = 0 ; int sumsell = 0 ; int sumn = 0 ; while ( true ) { try { String [ ] input = new Scanner ( System . in ) . nextLine ( ) . split ( " , " ) ; int at = Integer . parseInt ( input [ 0 ] ) ; int n = Integer . parseInt ( input [ 1 ] ) ; sumsell += at * n ; sumn += n ; i ++ ; } catch ( NoSuchElementException e ) { break ; } } System . out . println ( sumsell ) ; System . out . println ( ( int ) ( sumn / i + 0.5 ) ) ;
public class Main { public static void main ( String [ ] args ) { int MAX = 100 ; int n = 3 ; System . out . println ( sumOfproduct ( n ) ) ; } public static int binomialCoeff ( int n , int k ) { int [ ] C = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = Math . min ( i , k ) ; j > 0 ; j -- ) { C [ j ] = C [ j ] + C [ j - 1 ] ; } } return C [ k ] ; } public static int sumOfproduct ( int n ) { return binomialCoeff ( 2 * n , n - 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; System . out . print ( " Enter ▁ the ▁ first ▁ string : ▁ " ) ; String string1 = scanner . nextLine ( ) ; System . out . println ( string1 ) ; System . out . print ( " Enter ▁ the ▁ second ▁ string : ▁ " ) ; String string2 = scanner . nextLine ( ) ; System . out . println ( string2 ) ; System . out . print ( " Are ▁ both ▁ strings ▁ same : ▁ " ) ; if ( string1 . equals ( string2 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( pairCount ( arr , n ) ) ; } public static int pairCount ( int [ ] arr , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] > max_val ) { max_val = arr [ i ] ; } } boolean [ ] prime = new boolean [ max_val + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; int k = ( int ) ( Math . sqrt ( max_val ) ) + 1 ; for ( int p = 2 ; p < k ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < max_val + 1 ; i += p ) { prime [ i ] = false ; } } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { count ++ ; } } return ( count * ( count - 1 ) ) / 2 ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 10 , 15 , 7 , 6 , 8 , 13 } ; int n = arr . length ; System . out . println ( getPrime ( arr , n ) ) ; } public static int getPrime ( int [ ] arr , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] > max_val ) { max_val = arr [ i ] ; } } boolean [ ] prime = new boolean [ max_val + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . sqrt ( max_val ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= max_val ; i += p ) { prime [ i ] = false ; } } } int maximum = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { maximum = Math . max ( maximum , arr [ i ] ) ; } } return maximum ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { long [ ] NUMBERS = { 371072875339021027L , 987979982208375902L , 46510135740250L , 463769376774900097L , 126481248969700780L , 50417018260538L , 743249861995247410L , 594742333095130581L , 23726617309629L , 919422133635741615L , 725224305633018110L , 72406154908250L , 230675882075393461L , 711719803104210475L , 13778063246676L , 892616706966236338L , 201363784183836841L , 78734361726757L , 281128798128499794L , 806548193159262216L , 91275889832738L , 442742289174325203L , 219235894228767964L , 87670272189318L , 474514457360013064L , 390911672168568445L , 88711603153276L , 703864861058430254L , 399396198289175936L , 65686757934951L , 621764571418565606L , 295021572231965867L , 55079324193331L , 649063524627419049L , 291014324458138226L , 63347944758178L , 925758677183372176L , 619637515905792397L , 28245598838407L , 582035653253593990L , 840263356894883018L , 9458628227828L , 801811993848262820L , 142781941399405675L , 87151170094390L , 353986643728271126L , 538299872407844730L , 53190104293586L , 865155060062958648L , 615320752733719591L , 20517255829L , 716938887077154664L , 991155934876035329
public class Main { public static void findElements ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
public class Main { public static void printDistinct ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { i ++ ; } } else { System . out . print ( arr [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; int n = arr . length ; printDistinct ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; System . out . println ( a * b ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 10 ; int b = 17 ; int n = 3 ; System . out . println ( nthTerm ( a , b , n ) ) ; } public static int nthTerm ( int a , int b , int n ) { int z = 0 ; if ( n % 6 == 1 ) { z = a ; } else if ( n % 6 == 2 ) { z = b ; } else if ( n % 6 == 3 ) { z = b - a ; } else if ( n % 6 == 4 ) { z = - a ; } else if ( n % 6 == 5 ) { z = - b ; } if ( n % 6 == 0 ) { z = - ( b - a ) ; } return z ; } }
public class Main { public static int findSubSequence ( String s , int num ) { int res = 0 ; int i = 0 ; while ( num != 0 ) { if ( ( num & 1 ) == 1 ) { res += ( int ) s . charAt ( i ) - ( int ) '0' ; } i ++ ; num = num >> 1 ; } return res ; } public static int combinedSum ( String s ) { int n = s . length ( ) ; int c_sum = 0 ; int ran = ( 1 << n ) - 1 ; for ( int i = 0 ; i <= ran ; i ++ ) { c_sum += findSubSequence ( s , i ) ; } return c_sum ; } public static void main ( String [ ] args ) { String s = "123" ; System . out . println ( combinedSum ( s ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumCost ( a , n ) ) ; } public static int minimumCost ( int [ ] cost , int n ) { int dp1 = 0 ; int dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = ( int ) ( countMultiples ( 25 ) ) ; System . out . println ( " Count ▁ = ▁ " + n ) ; } public static double countMultiples ( int n ) { return n / 3 + n / 7 - n / 21 ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { String str = " babcaag " ; int k = 1 ; System . out . println ( " Length ▁ = ▁ " + longSub ( str , k ) ) ; } public static int longSub ( String str , int k ) { int SIZE = 26 ; int [ ] freq = new int [ SIZE ] ; int start = 0 ; int maxLen = 0 ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char ch = str . charAt ( i ) ; freq [ ch - ' a ' ] += 1 ; if ( freq [ ch - ' a ' ] > k ) { if ( maxLen < ( i - start ) ) { maxLen = i - start ; } while ( freq [ ch - ' a ' ] > k ) { freq [ str . charAt ( start ) - ' a ' ] -= 1 ; start = start + 1 ; } } } if ( maxLen < ( n - start ) ) { maxLen = n - start ; } return maxLen ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int sa = 0 ; int sg = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int g = Integer . parseInt ( input [ 1 ] ) ; if ( a <= g ) { if ( sa + a - sg <= 500 ) { sa += a ; System . out . print ( " A " ) ; } else { sg += g ; System . out . print ( " G " ) ; } } else { if ( sg + g - sa <= 500 ) { sg += g ; System . out . print ( " G " ) ; } else { sa += a ; System . out . print ( " A " ) ; } } } } }
public class Solution { public String toHex ( int num ) { if ( num == 0 ) { return "0" ; } char [ ] mp = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , ' a ' , ' b ' , ' c ' , ' d ' , ' e ' , ' f ' } ; StringBuilder ans = new StringBuilder ( ) ; for ( int i = 0 ; i < 8 ; i ++ ) { int n = num & 15 ; char c = mp [ n ] ; ans . insert ( 0 , c ) ; num = num >> 4 ; } while ( ans . charAt ( 0 ) == '0' ) { ans . deleteCharAt ( 0 ) ; } return ans . toString ( ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int num = 26 ; String out = sObj . toHex ( num ) ; System . out . println ( out ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] numbers = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { numbers [ i ] = Integer . parseInt ( input [ i ] ) ; } int start = 0 ; ArrayList < String > arr = new ArrayList < > ( ) ; int count = 0 ; for ( int i = 0 ; i < numbers [ 0 ] ; i ++ ) { String string = " " ; int next = start ; for ( int j = 0 ; j < numbers [ 0 ] ; j ++ ) { if ( count < numbers [ 1 ] ) { if ( j == next ) { string += ' L ' ; count ++ ; next += 2 ; if ( next >= numbers [ 0 ] ) { start = start == 0 ? 1 : 0 ; } } else { string += " S " ; } } else { string += " S " ; } } arr . add ( string ) ; } if ( count < numbers [ 1 ] ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; for ( String i : arr ) { System . out . println ( i ) ; } } } }
public class Main { public static void main ( String [ ] args ) { String str1 = " geeks " ; String str2 = " cake " ; longestString ( str1 , str2 ) ; } public static void longestString ( String str1 , String str2 ) { int [ ] count1 = new int [ 26 ] ; int [ ] count2 = new int [ 26 ] ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { count1 [ str1 . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) { count2 [ str2 . charAt ( i ) - ' a ' ] ++ ; } String result = " " ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 1 ; j <= Math . min ( count1 [ i ] , count2 [ i ] ) ; j ++ ) { result = result + ( char ) ( ' a ' + i ) ; } } System . out . println ( result ) ; } }
public class Main { public static void main ( String [ ] args ) { int l = 1 ; int r = 4 ; System . out . println ( xorRange ( l , r ) ) ; } public static int msb ( int x ) { int ret = 0 ; while ( ( x >> ( ret + 1 ) ) != 0 ) { ret = ret + 1 ; } return ret ; } public static int xorRange ( int l , int r ) { int max_bit = msb ( r ) ; int mul = 2 ; int ans = 0 ; for ( int i = 1 ; i <= max_bit ; i ++ ) { if ( ( l / mul ) * mul == ( r / mul ) * mul ) { if ( ( ( ( l & ( 1 << i ) ) != 0 ) && ( r - l + 1 ) % 2 == 1 ) ) { ans = ans + mul ; } mul = mul * 2 ; continue ; } int odd_c = 0 ; if ( ( ( l & ( 1 << i ) ) != 0 ) && l % 2 == 1 ) { odd_c = ( odd_c ^ 1 ) ; } if ( ( ( r & ( 1 << i ) ) != 0 ) && r % 2 == 0 ) { odd_c = ( odd_c ^ 1 ) ; } if ( odd_c == 1 ) { ans = ans + mul ; } mul = mul * 2 ; } int zero_bit_cnt = ( r - l + 1 ) / 2 ; if ( l % 2 == 1 && r % 2 == 1 ) { zero_bit_cnt = zero_bit_cnt + 1 ; } if ( zero_bit_cnt % 2 == 1 ) { ans = ans + 1 ; } return ans ; } }
public class Main { public static void q1 ( String s , int i ) { if ( i == s . length ( ) ) { System . out . println ( " Yes " ) ; return ; } if ( s . charAt ( i ) == ' a ' ) { q1 ( s , i + 1 ) ; } else { q2 ( s , i + 1 ) ; } } public static void q2 ( String s , int i ) { if ( i == s . length ( ) ) { System . out . println ( " No " ) ; return ; } if ( s . charAt ( i ) == ' a ' ) { q1 ( s , i + 1 ) ; } else { q2 ( s , i + 1 ) ; } } public static void q3 ( String s , int i ) { if ( i == s . length ( ) ) { System . out . println ( " Yes " ) ; return ; } if ( s . charAt ( i ) == ' a ' ) { q4 ( s , i + 1 ) ; } else { q3 ( s , i + 1 ) ; } } public static void q4 ( String s , int i ) { if ( i == s . length ( ) ) { System . out . println ( " No " ) ; return ; } if ( s . charAt ( i ) == ' a ' ) { q4 ( s , i + 1 ) ; } else { q3 ( s , i + 1 ) ; } } public static void q0 ( String s , int i ) { if ( i == s . length ( ) ) { System . out . println ( " No " ) ; return ; } if ( s . charAt ( i ) == ' a ' ) { q1 ( s , i + 1 ) ; } else { q3 ( s , i + 1 ) ; } } public static void main ( String [ ] args ) { String s = " abbaabb " ; q0 ( s , 0 ) ; } }
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; List < String > ans = new ArrayList < > ( ) ; while ( true ) { int M = Integer . parseInt ( br . readLine ( ) ) ; if ( M == 0 ) { break ; } List < int [ ] > P = new ArrayList < > ( ) ; for ( int i = 0 ; i < M ; i ++ ) { String [ ] input = br . readLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ 2 ] ; arr [ 0 ] = Integer . parseInt ( input [ 0 ] ) ; arr [ 1 ] = Integer . parseInt ( input [ 1 ] ) ; P . add ( arr ) ; } Map < String , Integer > memo = new HashMap < > ( ) ; int G = Integer . parseInt ( br . readLine ( ) ) ; for ( int i = 0 ; i < G ; i ++ ) { ans . add ( String . valueOf ( dfs ( 0 , Integer . parseInt ( br . readLine ( ) ) , P , memo ) ) ) ; } } for ( String s : ans ) { System . out . println ( s ) ; } } public static int dfs ( int i , int rest , List < int [ ] > P , Map < String , Integer > memo ) { if ( i == P . size ( ) ) { return rest == 0 ? 1 : 0 ; } String key = i + " , " + rest ; if ( memo . containsKey ( key ) ) { return memo . get ( key ) ; } int res = 0 ; int [ ] arr = P . get ( i ) ; int a = arr [ 0 ] ; int b = arr [ 1 ] ; for ( int j = 0 ; j <= b ; j ++ ) { if ( rest - j * a < 0 ) { break ; } res += dfs ( i + 1 , rest - j * a , P , memo ) ; } memo . put ( key , res ) ; return res ; } }
public class Main { public static void findTime ( String T , int K ) { int minutes = ( ( ( T . charAt ( 0 ) - '0' ) * 10 + T . charAt ( 1 ) - '0' ) * 60 + ( ( T . charAt ( 3 ) - '0' ) * 10 + T . charAt ( 4 ) - '0' ) ) ; minutes += K ; int hour = ( minutes / 60 ) % 24 ; int min = minutes % 60 ; if ( hour < 10 ) { System . out . print ( "0" + hour + " : " ) ; } else { System . out . print ( hour + " : " ) ; } if ( min < 10 ) { System . out . println ( "0" + min ) ; } else { System . out . println ( min ) ; } } public static void main ( String [ ] args ) { String T = "21:39" ; int K = 43 ; findTime ( T , K ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { String string = "3675356291" ; int m = 5 ; maxProductSum ( string , m ) ; } public static void maxProductSum ( String string , int m ) { int n = string . length ( ) ; int maxProd = Integer . MIN_VALUE ; int maxSum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - m ; i ++ ) { int product = 1 ; int sum = 0 ; for ( int j = i ; j < m + i ; j ++ ) { product *= ( string . charAt ( j ) - '0' ) ; sum += ( string . charAt ( j ) - '0' ) ; } maxProd = Math . max ( maxProd , product ) ; maxSum = Math . max ( maxSum , sum ) ; } System . out . println ( " Maximum ▁ Product ▁ = ▁ " + maxProd ) ; System . out . println ( " Maximum ▁ Sum ▁ = ▁ " + maxSum ) ; } }
public class Main { public static void main ( String [ ] args ) { int R = 3 ; int C = 3 ; int [ ] [ ] cost = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } public static int minCost ( int [ ] [ ] cost , int m , int n ) { if ( n < 0 || m < 0 ) { return Integer . MAX_VALUE ; } else if ( m == 0 && n == 0 ) { return cost [ m ] [ n ] ; } else { return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } } public static int min ( int x , int y , int z ) { if ( x < y ) { return ( x < z ) ? x : z ; } else { return ( y < z ) ? y : z ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > p = new ArrayList < > ( ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( String num : input ) { p . add ( Integer . parseInt ( num ) ) ; } Collections . sort ( p ) ; int result = Integer . MAX_VALUE ; for ( int s = 1 ; s <= 2 ; s ++ ) { int sum = 0 ; for ( int i = s , j = 0 ; i <= n ; i += 2 , j ++ ) { sum += Math . abs ( p . get ( j ) - i ) ; } result = Math . min ( result , sum ) ; } System . out . println ( result ) ; } }
public class Main { static int MAX = 100003 ; static int [ ] ws = new int [ MAX ] ; static int [ ] par = new int [ MAX * 2 ] ; public static void main ( String [ ] args ) { int N , Q ; Scanner scanner = new Scanner ( System . in ) ; N = scanner . nextInt ( ) ; Q = scanner . nextInt ( ) ; for ( int i = 0 ; i < MAX ; i ++ ) { ws [ i ] = 0 ; } for ( int i = 0 ; i < MAX * 2 ; i ++ ) { par [ i ] = - 1 ; } for ( int q = 0 ; q < Q ; q ++ ) { int t = scanner . nextInt ( ) ; if ( t == 1 ) { int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; int [ ] z = diff ( x , y ) ; if ( z [ 0 ] == 0 ) { System . out . println ( " ? " ) ; } else { System . out . println ( z [ 1 ] ) ; } } else { int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; int z = scanner . nextInt ( ) ; unite ( x , y , z ) ; } } } public static int weight ( int x ) { root ( x ) ; return ws [ x ] ; } public static int root ( int x ) { if ( par [ x ] < 0 ) return x ; int p = root ( par [ x ] ) ; ws [ x ] = ws [ x ] + ws [ par [ x ] ] ; par [ x ] = p ; return par [ x ] ; } public static void unite ( int y , int x , int z ) { z = z + weight ( x ) ; z = z - weight ( y ) ; x = root ( x ) ; y = root ( y ) ; if ( x == y ) return ; if ( par [ y ] < par [ x ] ) { int tmp = x ; x = y ; y = tmp ; z = - z ; } par [ x ] = par [ x ] + par [ y ] ; par [ y ] = x ; ws [ y ] = z ; } public static int [ ] diff ( int x , int y ) { if ( root ( x ) != root ( y ) ) return new int [ ] { 0 } ; int ans = ws [ x ] - ws [ y ] ; return new int [ ] { 1 , ans } ; } }
public class Main { public static void main ( String [ ] args ) { int A = 6 ; int B = 15 ; int M = 3 ; System . out . println ( sumDivisibles ( A , B , M ) ) ; } public static int sumDivisibles ( int A , int B , int M ) { int sum = 0 ; for ( int i = A ; i <= B ; i ++ ) { if ( i % M == 0 ) { sum += i ; } } return sum ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 328 ; System . out . println ( " Count ▁ of ▁ numbers ▁ from ▁ 1 ▁ to ▁ " + n + " ▁ that ▁ have ▁ 4 ▁ as ▁ a ▁ digit ▁ is ▁ " + countNumbersWith4 ( n ) ) ; } public static int countNumbersWith4 ( int n ) { if ( n < 4 ) { return 0 ; } int d = ( int ) ( Math . log10 ( n ) ) ; int [ ] a = new int [ d + 1 ] ; for ( int i = 0 ; i < d + 1 ; i ++ ) { a [ i ] = 1 ; } a [ 0 ] = 0 ; if ( a . length > 1 ) { a [ 1 ] = 1 ; } for ( int i = 2 ; i < d + 1 ; i ++ ) { a [ i ] = a [ i - 1 ] * 9 + ( int ) ( Math . ceil ( Math . pow ( 10 , i - 1 ) ) ) ; } int p = ( int ) ( Math . ceil ( Math . pow ( 10 , d ) ) ) ; int msd = n / p ; if ( msd == 4 ) { return ( msd ) * a [ d ] + ( n % p ) + 1 ; } if ( msd > 4 ) { return ( ( msd - 1 ) * a [ d ] + p + countNumbersWith4 ( n % p ) ) ; } return ( msd ) * a [ d ] + countNumbersWith4 ( n % p ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] wah = Arrays . stream ( inputArr ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int x = wah [ 0 ] ; int y = wah [ 1 ] ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] all = { x , y , y - x , - x , - y , x - y } ; int res = ( n - 1 ) % 6 ; System . out . println ( all [ res ] % 1000000007 ) ; } }
public class Main { static int INT_MIN = - ( int ) Math . pow ( 2 , 31 ) ; static int INT_MAX = ( int ) Math . pow ( 2 , 31 ) ; public static void main ( String [ ] args ) { int [ ] pre = { 40 , 30 , 35 , 80 , 100 } ; int n = pre . length ; findPostOrder ( pre , n ) ; } public static void findPostOrder ( int [ ] pre , int n ) { int [ ] preIndex = { 0 } ; findPostOrderUtil ( pre , n , INT_MIN , INT_MAX , preIndex ) ; } public static void findPostOrderUtil ( int [ ] pre , int n , int minval , int maxval , int [ ] preIndex ) { if ( preIndex [ 0 ] == n ) { return ; } if ( pre [ preIndex [ 0 ] ] < minval || pre [ preIndex [ 0 ] ] > maxval ) { return ; } int val = pre [ preIndex [ 0 ] ] ; preIndex [ 0 ] ++ ; findPostOrderUtil ( pre , n , minval , val , preIndex ) ; findPostOrderUtil ( pre , n , val , maxval , preIndex ) ; System . out . print ( val + " ▁ " ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 100 , 200 , 400 , 50 } ; int k = 3 ; int n = arr . length ; System . out . println ( countWays ( n , arr , k ) ) ; } public static int countWays ( int n , int [ ] arr , int k ) { if ( k <= 0 || k >= n ) { return 0 ; } Set < Integer > s = new HashSet < > ( ) ; for ( int element : arr ) { s . add ( element ) ; } if ( s . size ( ) <= k ) { return 0 ; } return s . size ( ) - k ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int cnt = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < cnt ; k ++ ) { String ip = scanner . nextLine ( ) ; if ( ip . equals ( " " ) ) { System . out . println ( "0000:0000:0000:0000:0000:0000:0000:0000" ) ; continue ; } String [ ] ipArr = ip . split ( " : " ) ; StringBuilder ret = new StringBuilder ( ) ; if ( ipArr [ 0 ] . equals ( " " ) ) { String [ ] temp = new String [ 8 - ipArr . length + 2 ] ; for ( int i = 0 ; i < temp . length ; i ++ ) { temp [ i ] = "0000" ; } ipArr = concat ( temp , ipArr , 2 ) ; } else if ( ipArr [ ipArr . length - 1 ] . equals ( " " ) ) { String [ ] temp = new String [ 8 - ipArr . length + 2 ] ; for ( int i = 0 ; i < temp . length ; i ++ ) { temp [ i ] = "0000" ; } ipArr = concat ( ipArr , temp , ipArr . length - 2 ) ; } for ( int i = 0 ; i < ipArr . length ; i ++ ) { if ( ipArr [ i ] . equals ( " " ) ) { String [ ] temp = new String [ 8 - ipArr . length + 1 ] ; for ( int j = 0 ; j < temp . length ; j ++ ) { temp [ j ] = "0000" ; } ipArr = concat ( concat ( ipArr , temp , i ) , ipArr , i + 1 ) ; } } for ( int i = 0 ; i < ipArr . length ; i ++ ) { if ( ! ipArr [ i ] . equals ( " " ) ) { ipArr [ i ] = "0" . repeat ( 4 - ipArr [ i ] . length ( ) ) + ipArr [ i ] ; } } System . out . println ( String . join ( " : " , ipArr ) ) ; } } public static String [ ] concat ( String [ ] first , String [ ] second , int index ) { String [ ] result = new String [ first . length + second . length ] ; System . arraycopy ( first , 0 , result , 0 , index ) ; System . arraycopy ( second , 0 , result , index , second . length ) ; System . arraycopy ( first , index , result , index + second . length ,
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( countInterestingPrimes ( N ) ) ; } public static boolean isPrime ( int n ) { int flag = 1 ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) { flag = 0 ; break ; } i ++ ; } return ( flag == 1 ) ; } public static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; return ( sr - Math . floor ( sr ) == 0 ) ; } public static int countInterestingPrimes ( int n ) { int answer = 0 ; for ( int i = 2 ; i < n ; i ++ ) { if ( isPrime ( i ) ) { int j = 1 ; while ( j * j * j * j <= i ) { if ( isPerfectSquare ( i - j * j * j * j ) ) { answer ++ ; break ; } j ++ ; } } } return answer ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; String [ ] W = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { W [ i ] = input . next ( ) ; } int cnt = 0 ; for ( int i = 1 ; i < N ; i ++ ) { if ( W [ i ] . charAt ( 0 ) != W [ i - 1 ] . charAt ( W [ i - 1 ] . length ( ) - 1 ) ) { cnt = 1 ; } } Arrays . sort ( W ) ; for ( int i = 1 ; i < N ; i ++ ) { if ( W [ i ] . equals ( W [ i - 1 ] ) ) { cnt = 1 ; } } if ( cnt == 1 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] div = { 8 , 3 } ; int [ ] rem = { 2 , 2 } ; int N = div . length ; System . out . println ( findNum ( div , rem , N ) ) ; } public static int findNum ( int [ ] div , int [ ] rem , int N ) { int num = rem [ N - 1 ] ; int i = N - 2 ; while ( i >= 0 ) { num = num * div [ i ] + rem [ i ] ; i -- ; } return num ; } }
public class Main { static void segregate0and1 ( int [ ] arr , int size ) { int type0 = 0 ; int type1 = size - 1 ; while ( type0 < type1 ) { if ( arr [ type0 ] == 1 ) { int temp = arr [ type0 ] ; arr [ type0 ] = arr [ type1 ] ; arr [ type1 ] = temp ; type1 -- ; } else { type0 ++ ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 0 , 1 , 0 , 1 , 1 , 1 } ; int arr_size = arr . length ; segregate0and1 ( arr , arr_size ) ; System . out . print ( " Array ▁ after ▁ segregation ▁ is ▁ " ) ; for ( int i = 0 ; i < arr_size ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = scanner . nextInt ( ) ; } System . out . println ( new HashSet < Integer > ( Arrays . asList ( d ) ) . size ( ) ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; String t = scanner . nextLine ( ) ; int a = ( int ) t . charAt ( 0 ) - ( int ) s . charAt ( 0 ) ; int b = Integer . parseInt ( String . valueOf ( t . charAt ( 1 ) ) ) - Integer . parseInt ( String . valueOf ( s . charAt ( 1 ) ) ) ; int x = Math . abs ( a ) ; int y = Math . abs ( b ) ; char [ ] c = { ' R ' , ' U ' , ' L ' , ' D ' } ; int i = 0 ; int j = 1 ; if ( a < 0 ) { i = 2 ; } if ( b < 0 ) { j = 3 ; } int k = j ; if ( x > y ) { k = i ; int temp = x ; x = y ; y = temp ; } String m = String . valueOf ( c [ i ] ) + String . valueOf ( c [ j ] ) ; String n = String . valueOf ( c [ k ] ) ; System . out . println ( y ) ; for ( int l = 0 ; l < x ; l ++ ) { System . out . println ( m ) ; } for ( int l = 0 ; l < y - x ; l ++ ) { System . out . println ( n ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int h = Integer . parseInt ( input [ 0 ] ) ; int w = Integer . parseInt ( input [ 1 ] ) ; int [ ] [ ] matrix = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { String [ ] row = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 0 ; j < w ; j ++ ) { matrix [ i ] [ j ] = Integer . parseInt ( row [ j ] ) ; } } int result = 0 ; for ( int y = 0 ; y < h ; y ++ ) { for ( int x = 0 ; x < w ; x ++ ) { result += ( x + 1 ) * ( w - x ) * matrix [ y ] [ x ] * ( y + 1 ) * ( h - y ) ; } } System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] [ ] L = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 0 ; j < n ; j ++ ) { L [ i ] [ j ] = Integer . parseInt ( input [ j ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( L [ i ] [ j ] == 1 || any ( L [ i ] [ j ] - L [ t ] [ j ] == 1 for ( int t = 0 ; t < n ) ) { continue ; } System . out . println ( " NO " ) ; System . exit ( 0 ) ; } } System . out . println ( " YES " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = Integer . parseInt ( scanner . next ( ) ) ; int b = Integer . parseInt ( scanner . next ( ) ) ; int MAX = ( 1 << 32 ) - 1 ; System . out . println ( String . format ( " % 32s " , Integer . toBinaryString ( a & b ) ) . replace ( ' ▁ ' , '0' ) ) ; System . out . println ( String . format ( " % 32s " , Integer . toBinaryString ( a | b ) ) . replace ( ' ▁ ' , '0' ) ) ; System . out . println ( String . format ( " % 32s " , Integer . toBinaryString ( a ^ b ) ) . replace ( ' ▁ ' , '0' ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int x = scanner . nextInt ( ) ; System . out . println ( String . format ( " % 32s " , Integer . toBinaryString ( x ) ) . replace ( ' ▁ ' , '0' ) ) ; System . out . println ( String . format ( " % 32s " , Integer . toBinaryString ( ~ x & 0xffffffff ) ) . replace ( ' ▁ ' , '0' ) ) ; System . out . println ( String . format ( " % 32s " , Integer . toBinaryString ( x << 1 & 0xffffffff ) ) . replace ( ' ▁ ' , '0' ) ) ; System . out . println ( String . format ( " % 32s " , Integer . toBinaryString ( x >> 1 ) ) . replace ( ' ▁ ' , '0' ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] lines = br . lines ( ) . toArray ( String [ ] :: new ) ; Map < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 1 ; i < lines . length ; i ++ ) { String line = lines [ i ] ; if ( " MARCH " . indexOf ( line . charAt ( 0 ) ) != - 1 ) { map . put ( line . charAt ( 0 ) , map . getOrDefault ( line . charAt ( 0 ) , 0 ) + 1 ) ; } } List < Integer > values = new ArrayList < > ( map . values ( ) ) ; int sum = 0 ; for ( int p = 0 ; p < values . size ( ) ; p ++ ) { for ( int q = p + 1 ; q < values . size ( ) ; q ++ ) { for ( int r = q + 1 ; r < values . size ( ) ; r ++ ) { sum += values . get ( p ) * values . get ( q ) * values . get ( r ) ; } } } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] nm = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nm [ 0 ] ) ; int m = Integer . parseInt ( nm [ 1 ] ) ; String [ ] aInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( aInput [ i ] ) ; } String [ ] bInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = Integer . parseInt ( bInput [ i ] ) ; } int ans = 0 ; int s1 = a [ 0 ] ; int s2 = b [ 0 ] ; int i = 0 ; int j = 0 ; while ( i < n || j < m ) { if ( s1 == s2 ) { ans ++ ; i ++ ; j ++ ; if ( i < n && j < m ) { s1 = a [ i ] ; s2 = b [ j ] ; } } else if ( s1 < s2 ) { i ++ ; s1 += a [ i ] ; } else if ( s2 < s1 ) { j ++ ; s2 += b [ j ] ; } } System . out . println ( ans ) ; } }
while ( true ) { String input = scanner . nextLine ( ) ; String [ ] parts = input . split ( " ▁ " ) ; String a = parts [ 0 ] ; String en = parts [ 1 ] ; String b = parts [ 2 ] ; if ( en . equals ( " ? " ) ) { break ; } else { int numA = Integer . parseInt ( a ) ; int numB = Integer . parseInt ( b ) ; if ( en . equals ( " + " ) ) { System . out . println ( numA + numB ) ; } else if ( en . equals ( " - " ) ) { System . out . println ( numA - numB ) ; } else if ( en . equals ( " * " ) ) { System . out . println ( numA * numB ) ; } else if ( en . equals ( " / " ) ) { System . out . println ( ( int ) ( numA / numB ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( input [ i ] ) ; } int [ ] d = new int [ n - 1 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { d [ i ] = a [ i + 1 ] - a [ i ] ; } int cnt = 1 ; int l = 0 ; int r = 0 ; int cur = 0 ; while ( l < n - 1 ) { while ( r < n - 1 && cur * d [ r ] >= 0 ) { if ( cur == 0 ) { cur = d [ r ] ; } r ++ ; } if ( r < n - 1 && cur * d [ r ] < 0 ) { cnt ++ ; } r ++ ; l = r ; cur = 0 ; } System . out . println ( cnt ) ; } }
public class Main { static final int MAX = 256 ; public static int countPairs ( String s ) { int [ ] cnt = new int [ MAX ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ s . charAt ( i ) - 97 ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { ans += cnt [ i ] * cnt [ i ] ; } return ans ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( countPairs ( s ) ) ; } }
import java . util . * ; public class Main { static boolean [ ] prime = new boolean [ 100005 ] ; public static void SieveOfEratosthenes ( int n ) { Arrays . fill ( prime , true ) ; prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . sqrt ( n ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < n ; i += p ) { prime [ i ] = false ; } } } } public static void sortedArray ( int [ ] arr , int n ) { SieveOfEratosthenes ( 100005 ) ; List < Integer > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! prime [ arr [ i ] ] ) { v . add ( arr [ i ] ) ; } } Collections . sort ( v ) ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { System . out . print ( arr [ i ] + " ▁ " ) ; } else { System . out . print ( v . get ( j ) + " ▁ " ) ; j ++ ; } } } public static void main ( String [ ] args ) { int n = 6 ; int [ ] arr = { 100 , 11 , 500 , 2 , 17 , 1 } ; sortedArray ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 3 , 6 , 5 , 6 , 6 , 5 , 5 } ; int n = arr . length ; System . out . println ( gcdFibonacciFreq ( arr , n ) ) ; } public static void createHash ( Set < Integer > hash1 , int maxElement ) { int prev = 0 , curr = 1 ; hash1 . add ( prev ) ; hash1 . add ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; if ( temp <= maxElement ) { hash1 . add ( temp ) ; } prev = curr ; curr = temp ; } } public static int gcdFibonacciFreq ( int [ ] arr , int n ) { Set < Integer > hash1 = new HashSet < > ( ) ; createHash ( hash1 , Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ) ; Map < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( arr [ i ] , m . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; } int gcd = 0 ; for ( int it : m . keySet ( ) ) { if ( hash1 . contains ( m . get ( it ) ) ) { gcd = gcd ( gcd , it ) ; } } return gcd ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
import static java . lang . Math . sqrt ; public class Main { public static void main ( String [ ] args ) { int a = 4 ; System . out . printf ( " Area ▁ of ▁ semicircle ▁ = ▁ % .4f " , findArea ( a ) ) ; } public static double findArea ( int a ) { double R = a * ( 2.0 - sqrt ( 2 ) ) ; double area = 3.14 * R * R / 2.0 ; return area ; } }
public class Main { public static void main ( String [ ] args ) { int x = 3 ; int [ ] a = { 0 , 1 } ; int [ ] b = { 2 , 0 } ; int [ ] c = { 0 , 1 } ; int [ ] d = { 0 , 1 } ; int n = a . length ; System . out . println ( findQuadruples ( a , b , c , d , x , n ) ) ; } public static int findQuadruples ( int [ ] a , int [ ] b , int [ ] c , int [ ] d , int x , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int l = 0 ; l < n ; l ++ ) { if ( ( a [ i ] ^ b [ j ] ^ c [ k ] ^ d [ l ] ) == x ) { count ++ ; } } } } } return count ; } }
public class Main { public static void findSmallest ( String s , int [ ] [ ] q , int m ) { int N = s . length ( ) ; int [ ] [ ] H = new int [ N + 1 ] [ 26 ] ; for ( int i = 1 ; i <= N ; i ++ ) { H [ i ] [ s . charAt ( i - 1 ) - ' a ' ] += 1 ; for ( int j = 0 ; j < 26 ; j ++ ) { H [ i ] [ j ] += H [ i - 1 ] [ j ] ; } } for ( int j = 0 ; j < m ; j ++ ) { int l = q [ j ] [ 0 ] ; int r = q [ j ] [ 1 ] ; int n = q [ j ] [ 2 ] ; int sum = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { sum += H [ r ] [ i ] - H [ l - 1 ] [ i ] ; if ( sum >= n ) { System . out . println ( ( char ) ( ' a ' + i ) ) ; break ; } } } } public static void main ( String [ ] args ) { String s = " afbccdeb " ; int [ ] [ ] q = { { 2 , 4 , 1 } , { 1 , 6 , 4 } , { 1 , 8 , 7 } } ; int x = q . length ; findSmallest ( s , q , x ) ; } }
public static int miner ( int a , int b , String mines ) { int s = 0 ; int j = 0 ; while ( j < mines . length ( ) && mines . charAt ( j ) != '1' ) { j ++ ; } if ( j == mines . length ( ) ) { return 0 ; } for ( int i = j + 1 ; i < mines . length ( ) ; i ++ ) { if ( mines . charAt ( i ) == '0' && mines . charAt ( i - 1 ) == '1' ) { int r1 = i - 1 ; } else if ( mines . charAt ( i ) == '1' && mines . charAt ( i - 1 ) == '0' ) { s += Math . min ( b * ( i - r1 - 1 ) , a ) ; } } s += a ; return s ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; String mines = scanner . next ( ) ; System . out . println ( miner ( a , b , mines ) ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int start_point = 0 ; int numb_moves = 0 ; if ( n == 1 ) { System . out . println ( 2 ) ; } else if ( n % 3 == 0 ) { System . out . println ( n / 3 ) ; continue ; } else if ( n == 2 || n == 3 ) { System . out . println ( 1 ) ; } else { int x = n % 3 ; System . out . println ( ( n - x ) / 3 + 1 ) ; } } } } ```
import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String input = scanner . next ( ) ; char [ ] s = input . toCharArray ( ) ; ArrayList < Integer > q = new ArrayList < > ( ) ; for ( int i = n ; i > 0 ; i -- ) { if ( n % i == 0 ) { q . add ( i ) ; } } for ( int j : q ) { int w = n / j ; String firstPart = new String ( s , 0 , w ) ; String secondPart = new String ( s , w , s . length - w ) ; StringBuilder reversedFirstPart = new StringBuilder ( firstPart ) ; reversedFirstPart . reverse ( ) ; String reversedS = reversedFirstPart . toString ( ) + secondPart ; s = reversedS . toCharArray ( ) ; } System . out . println ( String . valueOf ( s ) ) ; } }
public class Main { public static void printPairs ( int [ ] arr , int n ) { List < Integer > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( arr [ i ] ) == Math . abs ( arr [ j ] ) ) { v . add ( Math . abs ( arr [ i ] ) ) ; } } } if ( v . size ( ) == 0 ) { return ; } Collections . sort ( v ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { System . out . print ( - v . get ( i ) + " ▁ " + v . get ( i ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 8 , 9 , - 4 , 1 , - 1 , - 8 , - 9 } ; int n = arr . length ; printPairs ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( " Double ▁ factorial ▁ is ▁ " + doublefactorial ( 5 ) ) ; } public static int doublefactorial ( int n ) { if ( n == 0 || n == 1 ) { return 1 ; } return n * doublefactorial ( n - 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( minRemovals ( "010010" ) ) ; System . out . println ( minRemovals ( "0100101" ) ) ; } public static int isPalindrome ( String str ) { int l = 0 ; int h = str . length ( ) - 1 ; while ( h > l ) { if ( str . charAt ( l ) != str . charAt ( h ) ) { return 0 ; } l = l + 1 ; h = h - 1 ; } return 1 ; } public static int minRemovals ( String str ) { if ( str . charAt ( 0 ) == ' ▁ ' ) { return 0 ; } if ( isPalindrome ( str ) == 1 ) { return 1 ; } return 2 ; } }
public class Main { public static void main ( String [ ] args ) { String num = "1234" ; System . out . println ( sumOfSubstrings ( num ) ) ; } public static int sumOfSubstrings ( String num ) { int n = num . length ( ) ; int [ ] sumofdigit = new int [ n ] ; sumofdigit [ 0 ] = Integer . parseInt ( num . substring ( 0 , 1 ) ) ; int res = sumofdigit [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int numi = Integer . parseInt ( num . substring ( i , i + 1 ) ) ; sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ; res += sumofdigit [ i ] ; } return res ; } }
public class Main { public static void main ( String [ ] args ) { int a = 5 ; int b = 13 ; int n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } public static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * ( a / n ) * ( b / n ) ; ans += ( a / n ) * ( b % n ) ; ans += ( a % n ) * ( b / n ) ; ans += ( ( a % n ) + ( b % n ) ) / n ; return ans ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int LIMIT = 1000000 ; int maxnumer = 0 ; int maxdenom = 1 ; for ( int d = 1 ; d <= LIMIT ; d ++ ) { int n = d * 3 / 7 ; if ( d % 7 == 0 ) { n -= 1 ; } if ( n * maxdenom > d * maxnumer ) { maxnumer = n ; maxdenom = d ; } } return Integer . toString ( maxnumer ) ; } }
int [ ] c = new int [ 100 ] ; public void coef ( int n ) { c [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { c [ 1 + i ] = 1 ; for ( int j = i ; j > 0 ; j -- ) { c [ j ] = c [ j - 1 ] - c [ j ] ; } c [ 0 ] = - c [ 0 ] ; } } public boolean isPrime ( int n ) { coef ( n ) ; c [ 0 ] = c [ 0 ] + 1 ; c [ n ] = c [ n ] - 1 ; int i = n ; while ( i > - 1 && c [ i ] % n == 0 ) { i = i - 1 ; } return i < 0 ? true : false ; } int n = 37 ; if ( isPrime ( n ) ) { System . out . println ( " Prime " ) ; } else { System . out . println ( " Not ▁ Prime " ) ; }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 2 , 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( countGreater ( arr , n ) ) ; } public static int countGreater ( int [ ] arr , int n ) { int min = Integer . MAX_VALUE ; int counter = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > min ) { counter ++ ; } if ( arr [ i ] <= min ) { min = arr [ i ] ; } } return counter ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int x = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a_list = Arrays . stream ( input2 ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( a_list ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x = x - a_list [ i ] ; count ++ ; if ( x <= 0 ) { break ; } } if ( x == 0 ) { System . out . println ( count ) ; } else { System . out . println ( count - 1 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int left = 0 ; int right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a > 0 ) { right ++ ; } else if ( a < 0 ) { left ++ ; } } if ( left == 0 || right == 0 || left == 1 || right == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int T = scanner . nextInt ( ) ; int D = scanner . nextInt ( ) ; int L = scanner . nextInt ( ) ; if ( T == 0 ) break ; int [ ] a = new int [ T ] ; for ( int i = 0 ; i < T ; i ++ ) { int x = scanner . nextInt ( ) ; if ( x >= L ) a [ i ] = x ; } int ans = 0 ; for ( int i = 1 ; i < a . length ; i ++ ) { int x = D ; if ( T - a [ i - 1 ] < D ) x = T - a [ i - 1 ] ; if ( a [ i ] - a [ i - 1 ] < x ) ans += a [ i ] - a [ i - 1 ] ; else ans += x ; } if ( a . length > 0 ) ans += T - a [ a . length - 1 ] < a [ a . length - 1 ] + D > T ? T - a [ a . length - 1 ] : D ; System . out . println ( ans ) ; } } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 1 , 5 } ; System . out . println ( minimumSwaps ( arr ) ) ; } public static int minimumSwaps ( int [ ] arr ) { int count = 0 ; int i = 0 ; while ( i < arr . length ) { if ( arr [ i ] != i + 1 ) { while ( arr [ i ] != i + 1 ) { int temp = arr [ arr [ i ] - 1 ] ; arr [ arr [ i ] - 1 ] = arr [ i ] ; arr [ i ] = temp ; count ++ ; } } i ++ ; } return count ; } }
import java . util . PriorityQueue ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int TARGET = 500500 ; int MODULUS = 500500507 ; boolean [ ] isprime = eulerlib . list_primality ( 7376507 ) ; PriorityQueue < Integer > queue = new PriorityQueue < > ( ) ; int nextprime = 2 ; queue . add ( nextprime ) ; int ans = 1 ; for ( int i = 0 ; i < TARGET ; i ++ ) { int item = queue . poll ( ) ; ans *= item ; ans %= MODULUS ; queue . add ( item * item ) ; if ( item == nextprime ) { nextprime ++ ; while ( ! isprime [ nextprime ] ) { nextprime ++ ; } queue . add ( nextprime ) ; } } return Integer . toString ( ans ) ; } }
public class Main { public static void findUniquePair ( int [ ] arr , int n ) { int XOR = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { XOR = XOR ^ arr [ i ] ; } int set_bit_no = XOR & ~ ( XOR - 1 ) ; int x = 0 ; int y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & set_bit_no ) != 0 ) { x = x ^ arr [ i ] ; } else { y = y ^ arr [ i ] ; } } System . out . println ( " The ▁ unique ▁ pair ▁ is ▁ ( " + x + " , ▁ " + y + " ) " ) ; } public static void main ( String [ ] args ) { int [ ] a = { 6 , 1 , 3 , 5 , 1 , 3 , 7 , 6 } ; int n = a . length ; findUniquePair ( a , n ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . HashSet ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; ArrayList < String > s = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String k = input . next ( ) ; s . add ( k ) ; } int flag = 0 ; ArrayList < Character > d1 = new ArrayList < Character > ( ) ; ArrayList < Character > d2 = new ArrayList < Character > ( ) ; HashSet < Character > rem = new HashSet < Character > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { d1 . add ( s . get ( i ) . charAt ( j ) ) ; } if ( i == n - j - 1 ) { d2 . add ( s . get ( i ) . charAt ( j ) ) ; } if ( i != j && i != n - j - 1 ) { rem . add ( s . get ( i ) . charAt ( j ) ) ; } } } if ( rem . size ( ) != 1 ) { System . out . println ( " NO " ) ; } else if ( ! d1 . equals ( d2 ) ) { System . out . println ( " NO " ) ; } else if ( new HashSet < Character > ( d1 ) . size ( ) != 1 ) { System . out . println ( " NO " ) ; } else if ( new HashSet < Character > ( d1 ) . equals ( rem ) ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
import java . util . Scanner ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; Pattern pattern = Pattern . compile ( " @ ( \\ d ) ( . ) " ) ; while ( scanner . hasNextLine ( ) ) { String s = scanner . nextLine ( ) ; Matcher matcher = pattern . matcher ( s ) ; StringBuffer sb = new StringBuffer ( ) ; while ( matcher . find ( ) ) { String replacement = " " ; int count = Integer . parseInt ( matcher . group ( 1 ) ) ; for ( int i = 0 ; i < count ; i ++ ) { replacement += matcher . group ( 2 ) ; } matcher . appendReplacement ( sb , replacement ) ; } matcher . appendTail ( sb ) ; System . out . println ( sb . toString ( ) ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 2 , 3 , 9 , 2 , 2 } ; System . out . println ( isMajority ( a ) ? " Yes " : " No " ) ; } public static boolean isMajority ( int [ ] a ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i : a ) { if ( mp . containsKey ( i ) ) { mp . put ( i , mp . get ( i ) + 1 ) ; } else { mp . put ( i , 1 ) ; } } for ( int x : mp . keySet ( ) ) { if ( mp . get ( x ) >= a . length / 2 ) { return true ; } } return false ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int w = scanner . nextInt ( ) ; int [ ] [ ] vw_l = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { vw_l [ i ] [ 0 ] = scanner . nextInt ( ) ; vw_l [ i ] [ 1 ] = scanner . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ w + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int _v = vw_l [ i ] [ 0 ] ; int _w = vw_l [ i ] [ 1 ] ; for ( int j = 0 ; j <= w ; j ++ ) { if ( j < _w ) { dp [ i + 1 ] [ j ] = dp [ i ] [ j ] ; } else { dp [ i + 1 ] [ j ] = Math . max ( dp [ i + 1 ] [ j - _w ] + _v , dp [ i ] [ j ] ) ; } } } System . out . println ( dp [ n ] [ w ] ) ; } }
import java . util . Scanner ; import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; double PI2 = Math . PI / 2 ; double [ ] [ ] L = new double [ 1001 ] [ 2 ] ; L [ 1 ] [ 0 ] = 1.0 ; L [ 1 ] [ 1 ] = 0.0 ; for ( int i = 2 ; i <= 1000 ; i ++ ) { double x = L [ i - 1 ] [ 0 ] ; double y = L [ i - 1 ] [ 1 ] ; double rad = Math . atan2 ( y , x ) + PI2 ; L [ i ] [ 0 ] = x + Math . cos ( rad ) ; L [ i ] [ 1 ] = y + Math . sin ( rad ) ; } while ( scanner . hasNext ( ) ) { int n = scanner . nextInt ( ) ; if ( n == - 1 ) { break ; } System . out . printf ( " % .2f \n % .2f \n " , L [ n ] [ 0 ] , L [ n ] [ 1 ] ) ; } } }
public static void printKMissing ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; int i = 0 ; while ( i < n && arr [ i ] <= 0 ) { i ++ ; } int count = 0 ; int curr = 1 ; while ( count < k && i < n ) { if ( arr [ i ] != curr ) { System . out . print ( curr + " ▁ " ) ; count ++ ; } else { i ++ ; } curr ++ ; } while ( count < k ) { System . out . print ( curr + " ▁ " ) ; curr ++ ; count ++ ; } } int [ ] arr = { 2 , 3 , 4 } ; int n = arr . length ; int k = 3 ; printKMissing ( arr , n , k ) ;
public class Main { public static void printNumbers ( int [ ] a , int n ) { Map < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; for ( int j = 1 ; j <= num ; j ++ ) { if ( j * j > num ) { break ; } if ( num % j == 0 ) { if ( j != 1 ) { mpp . put ( j , mpp . getOrDefault ( j , 0 ) + 1 ) ; } if ( num / j != j ) { mpp . put ( num / j , mpp . getOrDefault ( num / j , 0 ) + 1 ) ; } } } } int maxi = 0 ; for ( int it : mpp . keySet ( ) ) { maxi = Math . max ( mpp . get ( it ) , maxi ) ; } for ( int it : mpp . keySet ( ) ) { if ( mpp . get ( it ) == maxi ) { System . out . print ( it + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] a = { 12 , 15 , 27 , 20 , 40 } ; int n = a . length ; printNumbers ( a , n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; String ts = s . replace ( " a " , " " ) ; int ls = ts . length ( ) / 2 ; String ans = s . substring ( 0 , s . length ( ) - ls ) ; if ( ts . length ( ) % 2 != 0 || ! ans . replace ( " a " , " " ) . equals ( ts . substring ( ls ) ) ) { System . out . println ( " : ( " ) ; } else { System . out . println ( ans ) ; } } }
``` java import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( String s : input ) { a . add ( Integer . parseInt ( s ) ) ; } int K = Collections . max ( Collections . frequency ( a , a ) ) ; int i = 0 ; while ( true ) { if ( Collections . frequency ( a , a . get ( i ) ) < K ) { int C = Collections . frequency ( a , a . get ( i ) ) ; n -= C ; int Val = a . get ( i ) ; for ( int k = 0 ; k < C ; k ++ ) { a . remove ( Integer . valueOf ( Val ) ) ; } } else { i ++ ; } if ( i == n ) { break ; } } int MinI = 1000001 ; int ID = - 1 ; ArrayList < Integer > A = new ArrayList < > ( new HashSet < > ( a ) ) ; for ( int i = 0 ; i < A . size ( ) ; i ++ ) { int j = n - 1 ; while ( j >= 0 && a . get ( j ) != A . get ( i ) ) { j -- ; } if ( j < MinI ) { MinI = j ; ID = A . get ( i ) ; } } System . out . println ( ID ) ; } } ```
public class Main { public static int checkIfStartsWithCapital ( String string ) { if ( string . charAt ( 0 ) >= ' A ' && string . charAt ( 0 ) <= ' Z ' ) { return 1 ; } else { return 0 ; } } public static void check ( String string ) { if ( checkIfStartsWithCapital ( string ) == 1 ) { System . out . println ( " Accepted " ) ; } else { System . out . println ( " Not ▁ Accepted " ) ; } } public static void main ( String [ ] args ) { String string = " GeeksforGeeks " ; check ( string ) ; string = " geeksforgeeks " ; check ( string ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } public static double getAvg ( double prev_avg , int x , int n ) { return ( ( prev_avg * n + x ) / ( n + 1 ) ) ; } public static void streamAvg ( int [ ] arr , int n ) { double avg = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( avg , arr [ i ] , i ) ; System . out . println ( " Average ▁ of ▁ " + ( i + 1 ) + " ▁ numbers ▁ is ▁ " + String . format ( " % .1f " , avg ) ) ; } } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int ans = 0 ; boolean [ ] isprime = eulerlib . list_primality ( 999999 ) ; int [ ] primes = eulerlib . list_primes ( 999999 ) ; int consecutive = 0 ; for ( int i = 0 ; i < primes . length ; i ++ ) { int sum = primes [ i ] ; int consec = 1 ; for ( int j = i + 1 ; j < primes . length ; j ++ ) { sum += primes [ j ] ; consec ++ ; if ( sum >= isprime . length ) { break ; } if ( isprime [ sum ] && consec > consecutive ) { ans = sum ; consecutive = consec ; } } } return Integer . toString ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 } ; int n = arr . length ; System . out . println ( " Length ▁ of ▁ lst ▁ is ▁ " + lis ( arr , n ) ) ; } public static int lis ( int [ ] arr , int n ) { int i , j , maxm = 0 ; int [ ] lst = new int [ n ] ; for ( int s = 0 ; s < n ; s ++ ) { lst [ s ] = 1 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && lst [ i ] < lst [ j ] + 1 ) { lst [ i ] = lst [ j ] + 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( maxm < lst [ i ] ) { maxm = lst [ i ] ; } } return maxm ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int z = a + b ; if ( Math . sqrt ( z ) == Math . floor ( Math . sqrt ( z ) ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { - 1 , - 1 , 6 , 1 , 9 , 3 , 2 , - 1 , 4 , - 1 } ; fix ( A ) ; for ( int i : A ) { System . out . print ( i + " ▁ " ) ; } } public static int [ ] fix ( int [ ] A ) { Set < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) { s . add ( A [ i ] ) ; } for ( int i = 0 ; i < A . length ; i ++ ) { if ( s . contains ( i ) ) { A [ i ] = i ; } else { A [ i ] = - 1 ; } } return A ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] A = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { A [ i ] = Integer . parseInt ( input [ i ] ) ; } int ans = Math . abs ( A [ 0 ] + A [ 1 ] - A [ 2 ] - A [ 3 ] ) ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( i == j ) { continue ; } int now = 0 ; for ( int t = 0 ; t < 4 ; t ++ ) { if ( t == i || t == j ) { now += A [ t ] ; } else { now -= A [ t ] ; } } if ( Math . abs ( now ) < ans ) { ans = Math . abs ( now ) ; } } } System . out . println ( ans ) ; } }
public class Node { int data ; Node prev ; Node next ; public Node ( int data ) { this . data = data ; this . prev = null ; this . next = null ; } } public class Main { public static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( new_data ) ; new_node . next = head_ref ; if ( head_ref != null ) { head_ref . prev = new_node ; } head_ref = new_node ; return head_ref ; } public static void makeOddNode ( Node head_ref , int [ ] A , int n ) { Node ptr = head_ref ; int i = 0 ; while ( ptr != null ) { Node next = ptr . next ; if ( ptr . data % 2 == 0 ) { ptr . data = A [ i ] ; i ++ ; } ptr = next ; } } public static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + " ▁ " ) ; head = head . next ; } } public static void main ( String [ ] args ) { Node head = null ; int [ ] Arr = { 3 , 5 , 23 , 17 , 1 } ; head = push ( head , 4 ) ; head = push ( head , 7 ) ; head = push ( head , 8 ) ; head = push ( head , 9 ) ; head = push ( head , 6 ) ; int n = Arr . length ; System . out . print ( " Original ▁ List : ▁ " ) ; printList ( head ) ; System . out . println ( ) ; makeOddNode ( head , Arr , n ) ; System . out . print ( " New ▁ odd ▁ List : ▁ " ) ; printList ( head ) ; } }
``` java import java . util . * ; public class Main { static ArrayList < Integer > s_max = new ArrayList < > ( Arrays . asList ( 0 ) ) ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; HashMap < ArrayList < Integer > , Integer > memo = new HashMap < > ( ) ; while ( true ) { try { int n = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; boolean [ ] used = new boolean [ 10 ] ; int ans = check ( used , n , s , memo ) ; System . out . println ( ans ) ; } catch ( Exception e ) { break ; } } } public static int check ( boolean [ ] u , int r , int s , HashMap < ArrayList < Integer > , Integer > m ) { if ( r == 0 ) { return s == 0 ? 1 : 0 ; } int n = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { n *= 2 ; if ( u [ i ] ) { n += 1 ; } } if ( m . containsKey ( Arrays . asList ( n , r , s ) ) ) { return m . get ( Arrays . asList ( n , r , s ) ) ; } if ( s < 0 || s > s_max . get ( r ) ) { return 0 ; } int ans = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( ! u [ i ] ) { u [ i ] = true ; ans += check ( u , r - 1 , s - i * r , m ) ; u [ i ] = false ; } } m . put ( Arrays . asList ( n , r , s ) , ans ) ; return ans ; } } ```
public class Main { static long mod = 1000000007 ; public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 2 } ; int n = arr . length ; System . out . println ( CountSubset ( arr , n ) ) ; } public static long fact ( int n ) { long res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { res = ( res * i ) % mod ; } return res ; } public static long nCr ( int n , int r ) { return ( fact ( n ) * powmod ( fact ( r ) * fact ( n - r ) , mod - 2 ) ) % mod ; } public static long powmod ( long a , int n ) { if ( n == 0 ) { return 1 ; } long pt = powmod ( a , n / 2 ) ; pt = ( pt * pt ) % mod ; if ( n % 2 == 1 ) { return ( pt * a ) % mod ; } else { return pt ; } } public static long CountSubset ( int [ ] arr , int n ) { long ans = powmod ( 2 , n - 1 ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { int j = i + 1 ; while ( j < n && arr [ j ] == arr [ i ] ) { int r = n - 1 - j ; int l = i ; ans = ( ans + nCr ( l + r , l ) ) % mod ; j ++ ; } } return ans ; } }
public class Main { static int MAX = 1000001 ; static double MAX_sqrt = Math . pow ( MAX , 0.5 ) ; static int [ ] primeUpto = new int [ MAX ] ; public static void SieveOfEratosthenes ( ) { int [ ] isPrime = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { isPrime [ i ] = 1 ; } isPrime [ 0 ] = 0 ; isPrime [ 1 ] = 0 ; for ( int i = 2 ; i < ( int ) MAX_sqrt ; i ++ ) { if ( isPrime [ i ] == 1 ) { for ( int j = i * 2 ; j < MAX ; j += i ) { isPrime [ j ] = 0 ; } } } for ( int i = 1 ; i < MAX ; i ++ ) { primeUpto [ i ] = primeUpto [ i - 1 ] ; if ( isPrime [ i ] == 1 ) { primeUpto [ i ] ++ ; } } } public static int countOfNumbers ( int N , int K ) { SieveOfEratosthenes ( ) ; int low = 1 , high = N , ans = 0 ; while ( low <= high ) { int mid = ( low + high ) >> 1 ; if ( mid - primeUpto [ mid ] >= K ) { ans = mid ; high = mid - 1 ; } else { low = mid + 1 ; } } return ( N - ans + 1 ) != 0 ? ( N - ans + 1 ) : 0 ; } public static void main ( String [ ] args ) { int N = 10 , K = 3 ; System . out . println ( countOfNumbers ( N , K ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countOperations ( n ) ) ; } public static int countOperations ( int n ) { int i = 2 ; while ( ( i * i ) < n && ( n % i ) != 0 ) { i ++ ; } if ( ( i * i ) > n ) { i = n ; } return ( 1 + ( n - i ) / 2 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int q = Integer . parseInt ( input1 [ 1 ] ) ; String s = scanner . nextLine ( ) ; int [ ] ac = new int [ n - 1 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == ' A ' && s . charAt ( i + 1 ) == ' C ' ) { ac [ i ] = 1 ; } } int [ ] acc = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { acc [ i + 1 ] = acc [ i ] + ac [ i ] ; } int [ ] [ ] lr = new int [ q ] [ 2 ] ; for ( int i = 0 ; i < q ; i ++ ) { String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; lr [ i ] [ 0 ] = Integer . parseInt ( input2 [ 0 ] ) - 1 ; lr [ i ] [ 1 ] = Integer . parseInt ( input2 [ 1 ] ) - 1 ; } for ( int i = 0 ; i < q ; i ++ ) { int l = lr [ i ] [ 0 ] ; int r = lr [ i ] [ 1 ] ; System . out . println ( acc [ r ] - acc [ l ] ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int T = scanner . nextInt ( ) ; for ( int i = 0 ; i < T ; i ++ ) { int l = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; System . out . println ( l + " ▁ " + l * 2 ) ; } } }
``` java import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int LIMIT = 5000 ; long MODULUS = ( long ) Math . pow ( 10 , 16 ) ; long [ ] count = new long [ ( int ) ( Math . pow ( LIMIT , 2 ) / 2 ) ] ; Arrays . fill ( count , 0 ) ; count [ 0 ] = 1 ; int s = 0 ; for ( int p : eulerlib . listPrimes ( LIMIT ) ) { for ( int i = s ; i >= 0 ; i -- ) { count [ i + p ] = ( count [ i + p ] + count [ i ] ) % MODULUS ; } s += p ; } boolean [ ] isprime = eulerlib . listPrimality ( s + 1 ) ; long ans = 0 ; for ( int i = 0 ; i <= s ; i ++ ) { if ( isprime [ i ] ) { ans = ( ans + count [ i ] ) % MODULUS ; } } return Long . toString ( ans ) ; } } ```
public class Main { public static int countOddNumber ( int row_num ) { int count = 0 ; while ( row_num != 0 ) { count += row_num & 1 ; row_num >>= 1 ; } return ( 1 << count ) ; } public static void gouldSequence ( int n ) { for ( int row_num = 0 ; row_num < n ; row_num ++ ) { System . out . print ( countOddNumber ( row_num ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 16 ; gouldSequence ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 93 ; System . out . print ( " Following ▁ is ▁ minimal ▁ number ▁ of ▁ change ▁ for ▁ " + n + " : ▁ " ) ; findMin ( n ) ; } public static void findMin ( int V ) { int [ ] deno = { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 } ; int n = deno . length ; List < Integer > ans = new ArrayList < > ( ) ; int i = n - 1 ; while ( i >= 0 ) { while ( V >= deno [ i ] ) { V -= deno [ i ] ; ans . add ( deno [ i ] ) ; } i -- ; } for ( int j = 0 ; j < ans . size ( ) ; j ++ ) { System . out . print ( ans . get ( j ) + " ▁ " ) ; } } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { for ( int i = 1 ; ; i ++ ) { if ( cond ( i ) ) { return String . valueOf ( i ) ; } } } public static boolean cond ( int i ) { for ( int j = 2 ; j <= 6 ; j ++ ) { if ( ! Arrays . equals ( sortString ( String . valueOf ( i ) ) , sortString ( String . valueOf ( i * j ) ) ) ) { return false ; } } return true ; } public static char [ ] sortString ( String s ) { char [ ] arr = s . toCharArray ( ) ; Arrays . sort ( arr ) ; return arr ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 3 , 5 } ; int n = arr . length ; int x = 1 ; System . out . println ( count ( arr , n , x ) ) ; } public static int count ( int [ ] arr , int n , int x ) { if ( x == 1 ) { int ans = ( int ) Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) { count ++ ; } } int ans = ( int ) Math . pow ( 2 , count ) - 1 ; return ans ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 6 } ; int n = arr . length ; System . out . println ( findEle ( arr , n ) ) ; } public static int findEle ( int [ ] arr , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == sum - arr [ i ] ) { return arr [ i ] ; } } return - 1 ; } }
public class Main { public static void main ( String [ ] args ) { String strA = " abcd " ; String strB = " cbdad " ; System . out . println ( findExtraCharacter ( strA , strB ) ) ; } public static char findExtraCharacter ( String strA , String strB ) { HashMap < Character , Integer > m1 = new HashMap < > ( ) ; for ( char i : strB . toCharArray ( ) ) { if ( m1 . containsKey ( i ) ) { m1 . put ( i , m1 . get ( i ) + 1 ) ; } else { m1 . put ( i , 1 ) ; } } for ( char i : strA . toCharArray ( ) ) { m1 . put ( i , m1 . get ( i ) - 1 ) ; } for ( char h1 : m1 . keySet ( ) ) { if ( m1 . get ( h1 ) == 1 ) { return h1 ; } } return ' ▁ ' ; } }
while ( true ) { int balls = Integer . parseInt ( System . console ( ) . readLine ( ) ) ; int ans = 0 ; if ( balls == 0 ) { break ; } for ( int cs = 0 ; cs < 54 ; cs ++ ) { for ( int ts = 0 ; ts < 96 ; ts ++ ) { if ( Math . pow ( cs , 3 ) <= balls ) { ans = Math . max ( ans , ( int ) Math . pow ( cs , 3 ) ) ; } if ( ts * ( ts + 1 ) * ( ts + 2 ) / 6 <= balls ) { ans = Math . max ( ans , ts * ( ts + 1 ) * ( ts + 2 ) / 6 ) ; } if ( Math . pow ( cs , 3 ) + ts * ( ts + 1 ) * ( ts + 2 ) / 6 <= balls ) { ans = Math . max ( ans , ( int ) ( Math . pow ( cs , 3 ) + ts * ( ts + 1 ) * ( ts + 2 ) / 6 ) ) ; } } } System . out . println ( ans ) ; }
``` java import java . util . * ; public class Main { static Map < String , String > subs ; static int minCount ; public static String substitute ( String text , String a , String b ) { int pos = 0 ; String newText = text ; int L1 = a . length ( ) ; int L2 = b . length ( ) ; while ( true ) { int idx = newText . indexOf ( a , pos ) ; if ( idx < 0 ) { return newText ; } newText = newText . substring ( 0 , idx ) + b + newText . substring ( idx + L1 ) ; pos = idx + L2 ; } } public static void transform ( String orig , String goal , int count ) { if ( orig . length ( ) > goal . length ( ) ) { return ; } if ( orig . equals ( goal ) ) { minCount = Math . min ( minCount , count ) ; return ; } for ( String key : subs . keySet ( ) ) { String newStr = substitute ( orig , key , subs . get ( key ) ) ; if ( ! newStr . equals ( orig ) ) { transform ( newStr , goal , count + 1 ) ; } } } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int N = Integer . parseInt ( scanner . nextLine ( ) ) ; if ( N == 0 ) { break ; } subs = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] input = scanner . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; subs . put ( input [ 0 ] , input [ 1 ] ) ; } String orig = scanner . nextLine ( ) . trim ( ) ; String goal = scanner . nextLine ( ) . trim ( ) ; minCount = 999999999 ; transform ( orig , goal , 0 ) ; if ( minCount == 999999999 ) { System . out . println ( - 1 ) ; } else { System . out . println ( minCount ) ; } } } } ```
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > ls = new ArrayList < > ( ) ; for ( String s : input ) { ls . add ( Integer . parseInt ( s ) ) ; } Map < Integer , Integer > cnt = new HashMap < > ( ) ; boolean ans = true ; for ( int el : ls ) { if ( ! cnt . containsKey ( el ) ) { cnt . put ( el , 1 ) ; } else { cnt . put ( el , cnt . get ( el ) + 1 ) ; } if ( cnt . get ( el ) > ( n + 1 ) / 2 ) { ans = false ; } } if ( ans ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr1 = { 10 , 2 , 3 } ; int [ ] arr2 = { 3 , 4 , 7 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) ; } public static int maxSumPair ( int [ ] arr1 , int n1 , int [ ] arr2 , int n2 ) { int max1 = Integer . MIN_VALUE ; int max2 = Integer . MIN_VALUE ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( arr1 [ i ] > max1 ) { max1 = arr1 [ i ] ; } } for ( int i = 0 ; i < n2 ; i ++ ) { if ( arr2 [ i ] > max2 ) { max2 = arr2 [ i ] ; } } return max1 + max2 ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] op = { - 60 , 65 , - 1 , 14 , - 25 } ; int n = op . length ; int k = 100000 ; System . out . println ( operations ( op , n , k ) ) ; } public static int operations ( int [ ] op , int n , int k ) { int i , count = 0 ; int nVal = 0 ; int minimum = ( int ) Math . pow ( 10 , 9 ) ; for ( i = 0 ; i < n ; i ++ ) { nVal += op [ i ] ; minimum = Math . min ( minimum , nVal ) ; if ( ( k + nVal ) <= 0 ) { return ( i + 1 ) ; } } if ( nVal >= 0 ) { return - 1 ; } int times = ( k - Math . abs ( minimum ) ) / Math . abs ( nVal ) ; k = ( k - ( times * Math . abs ( nVal ) ) ) ; count = ( times * n ) ; while ( k > 0 ) { for ( i = 0 ; i < n ; i ++ ) { k = k + op [ i ] ; count ++ ; if ( k <= 0 ) { break ; } } } return count ; } }
public class Main { static int [ ] pref = new int [ 100010 ] ; public static void main ( String [ ] args ) { compute ( ) ; int Q = 4 ; int [ ] [ ] arr = { { 1 , 10 } , { 1 , 100 } , { 2 , 25 } , { 4 , 50 } } ; for ( int i = 0 ; i < Q ; i ++ ) { printSum ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } } public static void compute ( ) { for ( int i = 1 ; i <= 100000 ; i ++ ) { pref [ i ] = pref [ i - 1 ] + isPerfectCube ( i ) ; } } public static int isPerfectCube ( int x ) { int cr = ( int ) Math . round ( Math . pow ( x , 1.0 / 3 ) ) ; int rslt = ( cr * cr * cr == x ) ? x : 0 ; return rslt ; } public static void printSum ( int L , int R ) { int sum = pref [ R ] - pref [ L - 1 ] ; System . out . print ( sum + " ▁ " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner f = new Scanner ( System . in ) ; int n = f . nextInt ( ) ; int r = f . nextInt ( ) ; int l = f . nextInt ( ) ; int [ ] appearance = new int [ n ] ; int [ ] point = new int [ n ] ; int top = 0 ; int pre_t = 0 ; while ( f . hasNextLine ( ) ) { String line = f . nextLine ( ) ; String [ ] parts = line . split ( " ▁ " ) ; int d = Integer . parseInt ( parts [ 0 ] ) - 1 ; int t = Integer . parseInt ( parts [ 1 ] ) ; int x = Integer . parseInt ( parts [ 2 ] ) ; appearance [ top ] += t - pre_t ; pre_t = t ; point [ d ] += x ; if ( x > 0 && top != d ) { if ( point [ top ] < point [ d ] ) { top = d ; } else if ( point [ top ] == point [ d ] && d < top ) { top = d ; } } else if ( x < 0 && top == d ) { int maxIndex = 0 ; for ( int i = 1 ; i < point . length ; i ++ ) { if ( point [ i ] > point [ maxIndex ] ) { maxIndex = i ; } } top = maxIndex ; } } appearance [ top ] += l - pre_t ; int maxIndex = 0 ; for ( int i = 1 ; i < appearance . length ; i ++ ) { if ( appearance [ i ] > appearance [ maxIndex ] ) { maxIndex = i ; } } System . out . println ( 1 + maxIndex ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( n + " th ▁ Centered ▁ cube ▁ number : ▁ " + centeredCube ( n ) ) ; n = 10 ; System . out . println ( n + " th ▁ Centered ▁ cube ▁ number : ▁ " + centeredCube ( n ) ) ; } public static int centeredCube ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int testcase = 0 ; testcase < t ; testcase ++ ) { int n = scanner . nextInt ( ) ; String s = scanner . next ( ) ; int lef = 1 , rig = 1 , sw = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i + 1 ) ) { sw = 1 ; break ; } } if ( sw == 0 ) { System . out . println ( s ) ; continue ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { lef = i ; break ; } } for ( int i = n - 1 ; i > 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { rig = i ; break ; } } String st = s . substring ( 0 , lef ) + '0' + s . substring ( rig + 1 ) ; System . out . println ( st ) ; } } }
public class Main { public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int N ) { int nth = 0 ; for ( int i = N ; i > 0 ; i -- ) { nth += Math . pow ( i , i ) ; } return nth ; } }
public class Main { public static void main ( String [ ] args ) { if ( isPower ( 10 , 1 ) ) { System . out . println ( " True " ) ; } else { System . out . println ( " False " ) ; } if ( isPower ( 1 , 20 ) ) { System . out . println ( " True " ) ; } else { System . out . println ( " False " ) ; } if ( isPower ( 2 , 128 ) ) { System . out . println ( " True " ) ; } else { System . out . println ( " False " ) ; } if ( isPower ( 2 , 30 ) ) { System . out . println ( " True " ) ; } else { System . out . println ( " False " ) ; } } public static boolean isPower ( int x , int y ) { if ( x == 1 ) { return ( y == 1 ) ; } int pow = 1 ; while ( pow < y ) { pow = pow * x ; } return ( pow == y ) ; } }
public class Main { public static void main ( String [ ] args ) { if ( isPower ( 10 , 1 ) ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } if ( isPower ( 1 , 20 ) ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } if ( isPower ( 2 , 128 ) ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } if ( isPower ( 2 , 30 ) ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } public static boolean isPower ( int x , int y ) { if ( x == 1 ) { return ( y == 1 ) ; } int pow = 1 ; while ( pow < y ) { pow = pow * x ; } return ( pow == y ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 4 , 21 , 5 , 3 , 8 } ; int k = 3 ; int n = arr . length ; System . out . println ( minimumValue ( arr , n , k ) ) ; } public static int minimumValue ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; int answer = 0 ; for ( int i = 0 ; i < k ; i ++ ) { answer += arr [ i ] * arr [ i ] ; } return answer * ( 2 * k - 2 ) ; } }
public class Main { static List < List < Integer > > edges = new ArrayList < > ( ) ; static List < List < Integer > > revEdges = new ArrayList < > ( ) ; static List < Integer > order = new ArrayList < > ( ) ; static boolean [ ] visited = new boolean [ 200 ] ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < 200 ; i ++ ) { edges . add ( new ArrayList < > ( ) ) ; revEdges . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int u = Integer . parseInt ( input [ 0 ] ) - 1 ; int d = Integer . parseInt ( input [ 2 ] ) - 1 + 100 ; if ( input [ 1 ] . equals ( " lock " ) ) { edges . get ( d ) . add ( u ) ; revEdges . get ( u ) . add ( d ) ; } else { edges . get ( u ) . add ( d ) ; revEdges . get ( d ) . add ( u ) ; } } for ( int i = 0 ; i < 200 ; i ++ ) { if ( ! visited [ i ] ) { bfs ( i , visited , order ) ; } } Collections . reverse ( order ) ; visited = new boolean [ 200 ] ; for ( int i : order ) { if ( ! visited [ i ] ) { if ( bfsRev ( i ) . size ( ) >= 2 ) { System . out . println ( 1 ) ; break ; } } } System . out . println ( 0 ) ; } public static void bfs ( int x , boolean [ ] visited , List < Integer > order ) { if ( visited [ x ] ) { return ; } visited [ x ] = true ; for ( int to : edges . get ( x ) ) { bfs ( to , visited , order ) ; } order . add ( x ) ; } public static List < Integer > bfsRev ( int x ) { if ( visited [ x ] ) { return new ArrayList < > ( ) ; } visited [ x ] = true ; List < Integer > ret = new ArrayList < > ( ) ; ret . add ( x ) ; for ( int to : revEdges . get ( x ) ) { ret . addAll ( bfsRev ( to ) ) ; } return ret ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( countWays ( N ) ) ; } public static int countWays ( int N ) { int E = ( N * ( N - 1 ) ) / 2 ; if ( N == 1 ) { return 0 ; } return ( int ) Math . pow ( 2 , E - 1 ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 4 , 2 } ; int n = arr . length ; int l = 1 ; int r = 10 ; countNumbers ( arr , n , l , r ) ; } public static int findLCM ( int [ ] arr , int n ) { int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { lcm = ( lcm * arr [ i ] ) / gcd ( arr [ i ] , lcm ) ; } return lcm ; } public static int countNumbers ( int [ ] arr , int n , int l , int r ) { int lcm = findLCM ( arr , n ) ; int count = ( r / lcm ) - ( ( l - 1 ) / lcm ) ; System . out . println ( count ) ; return count ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
``` java import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = getN ( scanner ) ; int [ ] ns = getNs ( scanner , n ) ; int [ ] sortedNs = Arrays . stream ( ns ) . distinct ( ) . sorted ( ) . limit ( 100 ) . toArray ( ) ; int [ ] top3 = { 999999999 , 999999999 , 999999999 } ; for ( int i = 0 ; i < sortedNs . length ; i ++ ) { for ( int j = 0 ; j < sortedNs . length ; j ++ ) { if ( i == j ) { continue ; } int keta = ( int ) ( Math . log10 ( sortedNs [ j ] ) + 1 ) ; int c = sortedNs [ i ] * ( int ) Math . pow ( 10 , keta ) + sortedNs [ j ] ; if ( c < top3 [ 2 ] ) { Arrays . sort ( top3 ) ; top3 [ 2 ] = c ; } } } System . out . println ( top3 [ 2 ] ) ; } public static int getN ( Scanner scanner ) { return Integer . parseInt ( scanner . nextLine ( ) ) ; } public static int [ ] getNs ( Scanner scanner , int n ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] ns = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ns [ i ] = Integer . parseInt ( input [ i ] ) ; } return ns ; } } ```
``` java import java . util . * ; public class Main { public static void solve ( ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; n = n * 4 ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } Arrays . sort ( a ) ; int i = 0 ; int j = n - 1 ; int area = a [ i ] * a [ j ] ; i ++ ; j -- ; while ( i < j ) { int x = a [ i ] * a [ j ] ; if ( x != area ) { System . out . println ( " NO " ) ; return ; } i ++ ; j -- ; } Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int k = 0 ; k < n ; k ++ ) { if ( mp . containsKey ( a [ k ] ) ) { mp . put ( a [ k ] , mp . get ( a [ k ] ) + 1 ) ; } else { mp . put ( a [ k ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int test = scanner . nextInt ( ) ; for ( int t = 0 ; t < test ; t ++ ) { solve ( ) ; } } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 2 , 3 , 2 , 3 , 4 , 4 , 4 , 4 , 5 } ; int n = a . length ; System . out . println ( MinDeletion ( a , n ) ) ; } public static int MinDeletion ( int [ ] a , int n ) { Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( a [ i ] ) ) { map . put ( a [ i ] , map . get ( a [ i ] ) + 1 ) ; } else { map . put ( a [ i ] , 1 ) ; } } int ans = 0 ; for ( Map . Entry < Integer , Integer > entry : map . entrySet ( ) ) { int x = entry . getKey ( ) ; int frequency = entry . getValue ( ) ; if ( x <= frequency ) { ans += ( frequency - x ) ; } else { ans += frequency ; } } return ans ; } }
``` java public class Main { public static String fromStart ( String inp , int del1 ) { String inp1 = inp . substring ( 0 , del1 - 1 ) ; String inp2 = inp . substring ( del1 , inp . length ( ) ) ; return inp1 + inp2 ; } public static String fromEnd ( String inp , int del1 ) { String inp1 = inp . substring ( 0 , inp . length ( ) - del1 ) ; String inp2 = inp . substring ( inp . length ( ) - del1 + 1 , inp . length ( ) ) ; return inp1 + inp2 ; } public static void main ( String [ ] args ) { int in1 = 1234 ; String inp = String . valueOf ( in1 ) ; int del1 = 3 ; System . out . println ( " num _ after _ deleting _ from _ starting ▁ " + fromStart ( inp , del1 ) ) ; System . out . println ( " num _ after _ deleting _ from _ ending ▁ " + fromEnd ( inp , del1 ) ) ; } } ```
public class Main { public static void main ( String [ ] args ) { int n = 200 ; System . out . println ( nondecdigits ( n ) ) ; } public static int nondecdigits ( int n ) { int x = 0 ; for ( int i = n ; i > 0 ; i -- ) { int no = i ; int prev_dig = 11 ; boolean flag = true ; while ( no != 0 ) { if ( prev_dig < no % 10 ) { flag = false ; break ; } prev_dig = no % 10 ; no /= 10 ; } if ( flag ) { x = i ; break ; } } return x ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int anti = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; int l = Math . abs ( anti - c ) ; int m = Math . abs ( b - d ) ; if ( anti == c ) { System . out . println ( ( anti + m ) + " ▁ " + b + " ▁ " + ( c + m ) + " ▁ " + d ) ; } else if ( b == d ) { System . out . println ( anti + " ▁ " + ( b + l ) + " ▁ " + c + " ▁ " + ( d + l ) ) ; } else if ( l != m ) { System . out . println ( - 1 ) ; } else { System . out . println ( anti + " ▁ " + d + " ▁ " + c + " ▁ " + b ) ; } } }
int x , y ; Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; x = Integer . parseInt ( input [ 0 ] ) ; y = Integer . parseInt ( input [ 1 ] ) ; boolean CielWon = false ; while ( y > 1 && x * 10 + y > 21 ) { int t = Math . min ( x , 2 ) ; x -= t ; y -= ( 2 - t ) * 10 + 2 ; if ( y < 2 || 10 * x + y < 22 ) { CielWon = true ; break ; } y -= 2 ; t = Math . min ( 2 , y / 10 ) ; y -= 10 * t ; x -= 2 - t ; } System . out . println ( CielWon ? " Ciel " : " Hanako " ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; scanner . nextLine ( ) ; char [ ] [ ] l = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = scanner . nextLine ( ) ; char [ ] chars = s . toCharArray ( ) ; for ( int j = 0 ; j < m ; j ++ ) { if ( chars [ j ] == ' . ' ) { if ( ( i + j ) % 2 == 1 ) { chars [ j ] = ' W ' ; } else { chars [ j ] = ' B ' ; } } } l [ i ] = chars ; } for ( char [ ] c : l ) { System . out . println ( new String ( c ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; String s = input . next ( ) . replaceAll ( " ▁ " , " " ) ; if ( ! s . contains ( "0" ) ) { System . out . println ( n - 1 ) ; } else { int [ ] indices = find ( s , '0' ) ; if ( indices . length == 1 ) { System . out . println ( n ) ; } else { int maximum = 0 ; for ( int i = 0 ; i < indices . length - 1 ; i ++ ) { for ( int j = i + 1 ; j < indices . length ; j ++ ) { maximum = Math . max ( maximum , 2 + 2 * ( Math . abs ( indices [ i ] - indices [ j ] ) - 1 ) - ( Math . abs ( indices [ i ] - indices [ j ] ) - 1 ) ) ; } } System . out . println ( countOnes ( s ) + maximum ) ; } } } public static int [ ] find ( String s , char ch ) { String [ ] arr = s . split ( " " ) ; int count = 0 ; for ( String letter : arr ) { if ( letter . equals ( String . valueOf ( ch ) ) ) { count ++ ; } } int [ ] indices = new int [ count ] ; int index = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ch ) { indices [ index ] = i ; index ++ ; } } return indices ; } public static int countOnes ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 1 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( countDistinctSubarray ( arr , n ) ) ; } public static int countDistinctSubarray ( int [ ] arr , int n ) { Map < Integer , Integer > vis = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { vis . put ( arr [ i ] , 1 ) ; } int k = vis . size ( ) ; Map < Integer , Integer > vid = new HashMap < > ( ) ; int ans = 0 ; int right = 0 ; int window = 0 ; for ( int left = 0 ; left < n ; left ++ ) { while ( right < n && window < k ) { if ( vid . containsKey ( arr [ right ] ) ) { vid . put ( arr [ right ] , vid . get ( arr [ right ] ) + 1 ) ; } else { vid . put ( arr [ right ] , 1 ) ; } if ( vid . get ( arr [ right ] ) == 1 ) { window ++ ; } right ++ ; } if ( window == k ) { ans += ( n - right + 1 ) ; } vid . put ( arr [ left ] , vid . get ( arr [ left ] ) - 1 ) ; if ( vid . get ( arr [ left ] ) == 0 ) { window -- ; } } return ans ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int [ ] s = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int ans = s [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input2 [ 0 ] ) ; int b = Integer . parseInt ( input2 [ 1 ] ) ; ans = Math . max ( ans , a + b ) ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int l = 6 ; int r = 10 ; System . out . println ( primeBitsInRange ( l , r ) ) ; } public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return true ; } if ( n % 2 == 0 || n % 3 == 0 ) { return false ; } int i = 5 ; while ( i * i <= n ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } i = i + 6 ; } return true ; } public static int primeBitsInRange ( int l , int r ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { int tot_bit = Integer . bitCount ( i ) ; if ( isPrime ( tot_bit ) ) { count ++ ; } } return count ; } }
public class Main { public static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } public static int pairs ( int [ ] arr , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = countSetBits ( arr [ i ] ) + countSetBits ( arr [ j ] ) ; if ( sum == k ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 4 ; System . out . println ( pairs ( arr , n , k ) ) ; } }
import java . util . LinkedList ; import java . util . Queue ; import java . util . Stack ; public class Main { public static void reverseQueueFirstKElements ( int k , Queue < Integer > queue ) { if ( queue . isEmpty ( ) || k > queue . size ( ) ) { return ; } if ( k <= 0 ) { return ; } Stack < Integer > stack = new Stack < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { stack . push ( queue . poll ( ) ) ; } while ( ! stack . isEmpty ( ) ) { queue . add ( stack . pop ( ) ) ; } for ( int i = 0 ; i < queue . size ( ) - k ; i ++ ) { queue . add ( queue . poll ( ) ) ; } } public static void print ( Queue < Integer > queue ) { while ( ! queue . isEmpty ( ) ) { System . out . print ( queue . peek ( ) + " ▁ " ) ; queue . poll ( ) ; } } public static void main ( String [ ] args ) { Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( 10 ) ; queue . add ( 20 ) ; queue . add ( 30 ) ; queue . add ( 40 ) ; queue . add ( 50 ) ; queue . add ( 60 ) ; queue . add ( 70 ) ; queue . add ( 80 ) ; queue . add ( 90 ) ; queue . add ( 100 ) ; int k = 5 ; reverseQueueFirstKElements ( k , queue ) ; print ( queue ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; for ( int i = 0 ; i < a ; i ++ ) { int b = scanner . nextInt ( ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ inputArr . length ] ; for ( int k = 0 ; k < inputArr . length ; k ++ ) { arr [ k ] = Integer . parseInt ( inputArr [ k ] ) ; } int tmp = b ; int win1 = 0 ; int win2 = 0 ; int cnt = 0 ; for ( int j : arr ) { if ( j % 2 == 0 ) { cnt += 1 ; } } if ( cnt % 2 == 1 ) { System . out . println ( " errorgorn " ) ; } else { System . out . println ( " maomao90" ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int k = 31 ; System . out . println ( xorCalc ( k ) ) ; } public static int xorCalc ( int k ) { if ( k == 1 ) { return 2 ; } if ( ( ( k + 1 ) & k ) == 0 ) { return k / 2 ; } return 1 ; } }
public class Solution { public boolean isPerfectSquare ( int num ) { int low = 1 ; int high = num ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int midSquare = mid * mid ; if ( midSquare == num ) { return true ; } else if ( midSquare < num ) { low = mid + 1 ; } else { high = mid - 1 ; } } return false ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int num = 16 ; boolean out = sObj . isPerfectSquare ( num ) ; System . out . println ( out ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; if ( 2 * Math . max ( a , Math . max ( b , c ) ) - ( a + b + c ) == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner sc = new FastScanner ( ) ; int n = sc . nextInt ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = sc . nextInt ( ) ; } int c = 0 ; StringBuilder r = new StringBuilder ( ) ; int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s += l [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ( s - l [ i ] ) / ( n - 1 ) == l [ i ] ) { c ++ ; r . append ( i + 1 ) . append ( " ▁ " ) ; } } System . out . println ( c ) ; System . out . println ( r . toString ( ) ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } } }
``` java import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] nqInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nqInput [ 0 ] ) ; int q = Integer . parseInt ( nqInput [ 1 ] ) ; List < String [ ] > queue = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { queue . add ( scanner . nextLine ( ) . split ( " ▁ " ) ) ; } int ti = 0 ; int cur = 0 ; while ( Integer . parseInt ( queue . get ( cur ) [ 1 ] ) > 0 ) { String [ ] num = queue . get ( cur ) ; int syori = Integer . parseInt ( num [ 1 ] ) - q ; if ( syori > 0 ) { num [ 1 ] = String . valueOf ( syori ) ; queue . add ( num ) ; ti += q ; } else { ti += Integer . parseInt ( num [ 1 ] ) ; System . out . println ( num [ 0 ] + " ▁ " + ti ) ; } cur ++ ; if ( queue . size ( ) <= cur ) { break ; } } } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; int rotations = 2 ; int [ ] [ ] ranges = { { 0 , 2 } , { 0 , 3 } } ; int index = 1 ; System . out . println ( findElement ( arr , ranges , rotations , index ) ) ; } public static int findElement ( int [ ] arr , int [ ] [ ] ranges , int rotations , int index ) { for ( int i = rotations - 1 ; i >= 0 ; i -- ) { int left = ranges [ i ] [ 0 ] ; int right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) { if ( index == left ) { index = right ; } else { index = index - 1 ; } } } return arr [ index ] ; } }
public class Main { static int MAXN = 1000001 ; static int [ ] spf = new int [ MAXN ] ; static int [ ] hash1 = new int [ MAXN ] ; public static void sieve ( ) { for ( int i = 0 ; i < MAXN ; i ++ ) { spf [ i ] = i ; } for ( int i = 4 ; i < MAXN ; i += 2 ) { spf [ i ] = 2 ; } for ( int i = 3 ; i < MAXN ; i ++ ) { if ( i * i >= MAXN ) { break ; } if ( spf [ i ] == i ) { for ( int j = i * i ; j < MAXN ; j += i ) { if ( spf [ j ] == j ) { spf [ j ] = i ; } } } } } public static void getFactorization ( int x ) { while ( x != 1 ) { int temp = spf [ x ] ; if ( x % temp == 0 ) { hash1 [ spf [ x ] ] += 1 ; x = x / spf [ x ] ; } while ( x % temp == 0 ) { x = x / temp ; } } } public static boolean check ( int x ) { while ( x != 1 ) { int temp = spf [ x ] ; if ( x % temp == 0 && hash1 [ temp ] > 1 ) { return false ; } while ( x % temp == 0 ) { x = x / temp ; } } return true ; } public static boolean hasValidNum ( int [ ] arr , int n ) { sieve ( ) ; for ( int i = 0 ; i < n ; i ++ ) { getFactorization ( arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( check ( arr [ i ] ) ) { return true ; } } return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 8 , 4 , 10 , 6 , 7 } ; int n = arr . length ; if ( hasValidNum ( arr , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 5 , 1 , 2 , 2 } ; int n = a . length ; if ( isExists ( a , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isExists ( int [ ] a , int n ) { Map < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i : a ) { freq . put ( i , 0 ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; sum += a [ i ] ; } if ( sum % 2 == 0 ) { if ( freq . get ( sum / 2 ) != null && freq . get ( sum / 2 ) > 0 ) { return true ; } } return false ; } }
public class Main { public static void main ( String [ ] args ) { int d1 = 4 ; int d2 = 6 ; System . out . println ( " Area ▁ of ▁ Kite ▁ = ▁ " + areaOfKite ( d1 , d2 ) ) ; } public static double areaOfKite ( int d1 , int d2 ) { double area = ( d1 * d2 ) / 2.0 ; return area ; } }
``` java String [ ] seats = new String [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { seats [ i ] = new String ( new char [ 11 ] ) . replace ( ' \0' , ' # ' ) ; } Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String [ ] endl = { " | D | ) " , " | . | " , " | . | ) " } ; String P = " " ; if ( n == 0 ) { P = " + - - - - - - - - - - - - - - - - - - - - - - - - + \n " + " | # . # . # . # . # . # . # . # . # . # . # . | D | ) \n " + " | # . # . # . # . # . # . # . # . # . # . # . | . | \n " + " | # . . . . . . . . . . . . . . . . . . . . . . . | \n " + " | # . # . # . # . # . # . # . # . # . # . # . | . | ) \n " + " + - - - - - - - - - - - - - - - - - - - - - - - - + " ; } else if ( n == 1 ) { P = " + - - - - - - - - - - - - - - - - - - - - - - - - + \n " + " | O . # . # . # . # . # . # . # . # . # . # . | D | ) \n " + " | # . # . # . # . # . # . # . # . # . # . # . | . | \n " + " | # . . . . . . . . . . . . . . . . . . . . . . . | \n " + " | # . # . # . # . # . # . # . # . # . # . # . | . | ) \n " + " + - - - - - - - - - - - - - - - - - - - - - - - - + " ; } else if ( n == 2 ) { P = " + - - - - - - - - - - - - - - - - - - - - - - - - + \n " + " | O . # . # . # . # . # . # . # . # . # . # . | D | ) \n " + " | O . # . # . # . # . # . # . # . # . # . # . | . | \n " + " | # . . . . . . . . . . . . . . . . . . . . . . . | \n " + " | # . # . # . # . # . # . # . # . # . # . # . | . | ) \n " + " + - - - - - - - - - - - - - - - - - - - - - - - - + " ; } else if ( n == 3 ) { P = " + - - - - - - - - - - - - - - - - - - - - - - - - + \n " + " | O . # . # . # . # . # . # . # . # . # . # . | D | ) \n " + "|O.#.#.#.#.#.#.#
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; while ( n % 2 == 0 ) { n /= 2 ; } if ( n == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 4324 ; if ( productEqual ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean productEqual ( int n ) { if ( n < 10 ) { return false ; } int prodOdd = 1 ; int prodEven = 1 ; while ( n > 0 ) { int digit = n % 10 ; prodOdd *= digit ; n = n / 10 ; if ( n == 0 ) { break ; } digit = n % 10 ; prodEven *= digit ; n = n / 10 ; } if ( prodOdd == prodEven ) { return true ; } return false ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { List < Character > charList = new ArrayList < > ( ) ; for ( int i = ( int ) ' a ' ; i <= ( int ) ' z ' ; i ++ ) { charList . add ( ( char ) i ) ; } for ( int i = ( int ) ' A ' ; i <= ( int ) ' Z ' ; i ++ ) { charList . add ( ( char ) i ) ; } Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; if ( n == 0 ) { break ; } List < Integer > keys = new ArrayList < > ( ) ; String [ ] keyStr = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( String s : keyStr ) { keys . add ( Integer . parseInt ( s ) ) ; } String sentence = scanner . nextLine ( ) ; for ( int i = 0 ; i < sentence . length ( ) ; i ++ ) { char c = sentence . charAt ( i ) ; int j ; if ( Character . isUpperCase ( c ) ) { j = ( int ) c - ( int ) ' A ' + 26 ; } else { j = ( int ) c - ( int ) ' a ' ; } System . out . print ( charList . get ( j - keys . get ( i % keys . size ( ) ) ) ) ; } System . out . println ( ) ; } } }
public class Main { public static void checkEVENodd ( int [ ] arr , int n , int l , int r ) { if ( arr [ r ] == 1 ) { System . out . println ( " odd " ) ; } else { System . out . println ( " even " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 0 , 1 } ; int n = arr . length ; checkEVENodd ( arr , n , 1 , 3 ) ; } }
Scanner sc = new Scanner ( System . in ) ; String input = sc . nextLine ( ) ; String [ ] arr = input . split ( " ▁ " ) ; int W = Integer . parseInt ( arr [ 0 ] ) ; int H = Integer . parseInt ( arr [ 1 ] ) ; int x = Integer . parseInt ( arr [ 2 ] ) ; int y = Integer . parseInt ( arr [ 3 ] ) ; int r = Integer . parseInt ( arr [ 4 ] ) ; if ( x - r < 0 || y - r < 0 || x + r > W || y + r > H ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 6 , 8 , 12 } ; System . out . println ( minNumber ( arr ) ) ; } public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } public static int findPrime ( int n ) { int num = n + 1 ; while ( true ) { if ( isPrime ( num ) ) { return num ; } num ++ ; } } public static int minNumber ( int [ ] arr ) { int s = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { s += arr [ i ] ; } if ( isPrime ( s ) ) { return 0 ; } int num = findPrime ( s ) ; return num - s ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( compositeProduct ( arr , n ) ) ; } public static int compositeProduct ( int [ ] arr , int n ) { int max_val = 0 ; for ( int num : arr ) { max_val = Math . max ( max_val , num ) ; } boolean [ ] prime = new boolean [ max_val + 1 ] ; for ( int i = 0 ; i <= max_val ; i ++ ) { prime [ i ] = true ; } prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . ceil ( Math . sqrt ( max_val ) ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= max_val ; i += p ) { prime [ i ] = false ; } } } int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! prime [ arr [ i ] ] ) { product *= arr [ i ] ; } } return product ; } }
``` java import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; if ( x == 0 && y == 0 ) break ; int [ ] liste = { x , y } ; Arrays . sort ( liste ) ; System . out . println ( liste [ 0 ] + " ▁ " + liste [ 1 ] ) ; } } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { String n = new StringBuilder ( scanner . nextLine ( ) ) . reverse ( ) . toString ( ) ; if ( n . substring ( 0 , 2 ) . equals ( " op " ) ) { System . out . println ( " FILIPINO " ) ; } else if ( n . substring ( 0 , 5 ) . equals ( " adinm " ) ) { System . out . println ( " KOREAN " ) ; } else { System . out . println ( " JAPANESE " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 } ; int queries = 3 ; int [ ] [ ] q = { { 2 , 4 } , { 2 , 6 } , { 5 , 6 } } ; int n = arr . length ; for ( int i = 0 ; i < queries ; i ++ ) { System . out . println ( findSum ( arr , n , q [ i ] [ 0 ] , q [ i ] [ 1 ] ) ) ; } } public static int findSum ( int [ ] arr , int n , int left , int right ) { int k = right - left ; int d = arr [ 1 ] - arr [ 0 ] ; int ans = arr [ left - 1 ] * ( k + 1 ) ; ans = ans + ( d * ( k * ( k + 1 ) ) / 2 ) ; return ans ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 10 ; int a = 5 ; int b = 3 ; int c = 4 ; System . out . println ( maxResult ( n , a , b , c ) ) ; } public static int maxResult ( int n , int a , int b , int c ) { int maxVal = 0 ; for ( int i = 0 ; i <= n ; i += a ) { for ( int j = 0 ; j <= n - i ; j += b ) { double z = ( double ) ( n - ( i + j ) ) / c ; if ( Math . floor ( z ) == Math . ceil ( z ) ) { int x = i / a ; int y = j / b ; maxVal = Math . max ( maxVal , x + y + ( int ) z ) ; } } } return maxVal ; } }
int [ ] a = new int [ 10 ] ; Scanner scanner = new Scanner ( System . in ) ; for ( int i = 0 ; i < 10 ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } Arrays . sort ( a ) ; for ( int i = 1 ; i < 4 ; i ++ ) { System . out . printf ( " % d \n " , a [ 10 - i ] ) ; }
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { String string = " ababab " ; int n = string . length ( ) ; System . out . println ( numberOfPossiblePallindrome ( string , n ) ) ; } public static int fact ( int n ) { int ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { ans = ans * i ; } return ans ; } public static int numberOfPossiblePallindrome ( String string , int n ) { HashMap < Character , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( string . charAt ( i ) ) ) { mp . put ( string . charAt ( i ) , mp . get ( string . charAt ( i ) ) + 1 ) ; } else { mp . put ( string . charAt ( i ) , 1 ) ; } } int k = 0 ; int num = 0 ; int den = 1 ; int fi = 0 ; for ( char it : mp . keySet ( ) ) { if ( mp . get ( it ) % 2 == 0 ) { fi = mp . get ( it ) / 2 ; } else { fi = ( mp . get ( it ) - 1 ) / 2 ; k ++ ; } num = num + fi ; den = den * fact ( fi ) ; } if ( num != 0 ) { num = fact ( num ) ; } int ans = num / den ; if ( k != 0 ) { ans = ans * k ; } return ans ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] l = Arrays . stream ( input . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; if ( n == 1 ) { System . out . println ( "1" ) ; } else { while ( n > 1 ) { if ( Arrays . equals ( l , Arrays . stream ( l ) . boxed ( ) . sorted ( Collections . reverseOrder ( ) ) . mapToInt ( i -> i ) . toArray ( ) ) ) { System . out . println ( "1" ) ; break ; } else if ( Arrays . equals ( l , Arrays . stream ( l ) . sorted ( ) . toArray ( ) ) ) { System . out . println ( n ) ; break ; } else if ( ! Arrays . equals ( Arrays . copyOfRange ( l , 0 , n / 2 ) , Arrays . stream ( Arrays . copyOfRange ( l , 0 , n / 2 ) ) . sorted ( ) . toArray ( ) ) ) { l = Arrays . copyOfRange ( l , n / 2 , n ) ; n /= 2 ; } else { l = Arrays . copyOfRange ( l , 0 , n / 2 ) ; n /= 2 ; } } } } }
public class Main { public static void main ( String [ ] args ) { int n = 107 ; int m = 4 ; System . out . println ( toggleLastMBits ( n , m ) ) ; } public static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; while ( t > 0 ) { String s = scanner . nextLine ( ) ; boolean flag = s . charAt ( s . length ( ) - 1 ) != ' B ' ; if ( flag ) { int summ = 0 ; for ( char c : s . toCharArray ( ) ) { if ( c == ' A ' ) { summ += 1 ; } else { summ -= 1 ; } if ( summ < 0 ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } t -- ; } } } ```
public class Main { public static void main ( String [ ] args ) { String s = " mango ▁ is ▁ sweet ▁ when ▁ nam ▁ en ▁ tastes ▁ it # " ; String s1 = firstSubstring ( s ) ; System . out . println ( s1 ) ; } public static String firstSubstring ( String s ) { int n = s . length ( ) ; int c = 0 ; Map < String , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ▁ ' || s . charAt ( i ) == ' # ' ) { String s1 = s . substring ( c , i ) ; mpp . put ( s1 , 1 ) ; c = i + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ▁ ' ) { continue ; } for ( int j = i ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' ▁ ' ) { break ; } String s1 = s . substring ( i , j + 1 ) ; String s2 = s1 ; StringBuilder sb = new StringBuilder ( s1 ) ; String s1Reversed = sb . reverse ( ) . toString ( ) ; if ( mpp . containsKey ( s1Reversed ) && mpp . get ( s1Reversed ) == 1 ) { return s2 ; } } } return " - 1" ; } }
public class Main { public static void main ( String [ ] args ) { int n = 44522255 ; System . out . println ( countConsecutive ( n ) ) ; } public static int countConsecutive ( int n ) { String s = String . valueOf ( n ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) { count ++ ; } } return count ; } }
public class Main { public static void findAngle ( int n ) { int interiorAngle = ( n - 2 ) * 180 / n ; int exteriorAngle = 360 / n ; System . out . println ( " Interior ▁ angle : ▁ " + interiorAngle ) ; System . out . println ( " Exterior ▁ angle : ▁ " + exteriorAngle ) ; } public static void main ( String [ ] args ) { int n = 10 ; findAngle ( n ) ; } }
import java . lang . Math ; public class Main { public static void nDigitPerfectSquares ( int n ) { System . out . print ( Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n - 1 ) ) ) , 2 ) + " ▁ " ) ; System . out . print ( Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n ) ) - 1 ) , 2 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; nDigitPerfectSquares ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int l = 0 ; l < t ; l ++ ) { scanner . nextLine ( ) ; String strm = scanner . nextLine ( ) ; int ls = strm . length ( ) ; strm = strm . replaceAll ( " \\ ) " , " " ) ; if ( ls - strm . length ( ) > strm . length ( ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; String x = input . next ( ) ; String s = " " ; int count = 0 ; for ( int i = 0 ; i < x . length ( ) - 1 ; i += 2 ) { String k = x . substring ( i , i + 2 ) ; if ( k . chars ( ) . filter ( ch -> ch == ' a ' ) . count ( ) == 2 || k . chars ( ) . filter ( ch -> ch == ' b ' ) . count ( ) == 2 ) { k = " ab " ; count ++ ; } s += k ; } System . out . println ( count ) ; System . out . println ( s ) ; } }
import java . util . Arrays ; public class Main { static int discard_count = 0 ; public static void main ( String [ ] args ) { int [ ] arr = { 4 , 8 , 7 , 2 } ; int n = arr . length ; int k = 50 ; System . out . println ( countSubsequences ( arr , n , k ) ) ; } static double power ( double a , int n ) { if ( n == 0 ) { return 1 ; } double p = power ( a , n / 2 ) ; p = p * p ; if ( ( n & 1 ) == 1 ) { p = p * a ; } return p ; } static void solve ( int i , int n , double sum , double k , double [ ] a , double [ ] prefix ) { if ( sum > k ) { discard_count += power ( 2 , n - i ) ; return ; } if ( i == n ) { return ; } double rem = prefix [ n - 1 ] - prefix [ i ] ; if ( sum + a [ i ] + rem > k ) { solve ( i + 1 , n , sum + a [ i ] , k , a , prefix ) ; } if ( sum + rem > k ) { solve ( i + 1 , n , sum , k , a , prefix ) ; } } static double countSubsequences ( int [ ] arr , int n , int K ) { double sum = 0.0 ; double k = Math . log ( K ) / Math . log ( 2 ) ; double [ ] prefix = new double [ n ] ; double [ ] a = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Math . log ( arr [ i ] ) / Math . log ( 2 ) ; sum += a [ i ] ; } prefix [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { prefix [ i ] = prefix [ i - 1 ] + a [ i ] ; } double total = power ( 2 , n ) - 1 ; if ( sum <= k ) { return total ; } solve ( 0 , n , 0.0 , k , a , prefix ) ; return total - discard_count ; } }
public class newNode { int data ; newNode left ; newNode right ; public newNode ( int data ) { this . data = data ; this . left = null ; this . right = null ; } } public class Main { public static void inorder ( newNode root ) { if ( root == null ) { return ; } inorder ( root . left ) ; System . out . print ( root . data + " ▁ " ) ; inorder ( root . right ) ; } public static int isIdentical ( newNode root1 , newNode root2 ) { if ( root1 == null && root2 == null ) { return 1 ; } else if ( root1 != null && root2 == null ) { return 0 ; } else if ( root1 == null && root2 != null ) { return 0 ; } else { if ( root1 . data == root2 . data && isIdentical ( root1 . left , root2 . left ) == 1 && isIdentical ( root1 . right , root2 . right ) == 1 ) { return 1 ; } else { return 0 ; } } } public static void main ( String [ ] args ) { newNode root1 = new newNode ( 5 ) ; newNode root2 = new newNode ( 5 ) ; root1 . left = new newNode ( 3 ) ; root1 . right = new newNode ( 8 ) ; root1 . left . left = new newNode ( 2 ) ; root1 . left . right = new newNode ( 4 ) ; root2 . left = new newNode ( 3 ) ; root2 . right = new newNode ( 8 ) ; root2 . left . left = new newNode ( 2 ) ; root2 . left . right = new newNode ( 4 ) ; if ( isIdentical ( root1 , root2 ) == 1 ) { System . out . println ( " Both ▁ BSTs ▁ are ▁ identical " ) ; } else { System . out . println ( " BSTs ▁ are ▁ not ▁ identical " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; int [ ] si = new int [ n + 1 ] ; int [ ] sj = new int [ n + 1 ] ; String s = input . nextLine ( ) . trim ( ) ; for ( int i = 0 ; i < n ; i ++ ) { sj [ i + 1 ] = sj [ i ] + ( s . charAt ( i ) == ' J ' ? 1 : 0 ) ; si [ i + 1 ] = si [ i ] + ( s . charAt ( i ) == ' I ' ? 1 : 0 ) ; } int ans = 0 , a = 0 , b = 0 , c = 0 ; for ( int i = 1 ; i < n ; i ++ ) { a = Math . max ( a , sj [ i ] * ( si [ n ] - si [ i ] ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' O ' ) { b += si [ n ] - si [ i + 1 ] ; c += sj [ i ] ; ans += ( si [ n ] - si [ i + 1 ] ) * sj [ i ] ; } } System . out . println ( ans + Math . max ( Math . max ( a , b ) , c ) ) ; } }
public class Dice { private String [ ] eyes ; public Dice ( String [ ] eyes ) { this . eyes = new String [ eyes . length + 1 ] ; this . eyes [ 0 ] = " dummy " ; for ( int i = 0 ; i < eyes . length ; i ++ ) { this . eyes [ i + 1 ] = eyes [ i ] ; } } public String getEye ( ) { return this . eyes [ 1 ] ; } public void roll ( String direction ) { String [ ] a = this . eyes ; if ( direction . equals ( " N " ) ) { this . eyes = new String [ ] { " dummy " , a [ 2 ] , a [ 6 ] , a [ 3 ] , a [ 4 ] , a [ 1 ] , a [ 5 ] } ; } else if ( direction . equals ( " S " ) ) { this . eyes = new String [ ] { " dummy " , a [ 5 ] , a [ 1 ] , a [ 3 ] , a [ 4 ] , a [ 6 ] , a [ 2 ] } ; } else if ( direction . equals ( " W " ) ) { this . eyes = new String [ ] { " dummy " , a [ 3 ] , a [ 2 ] , a [ 6 ] , a [ 1 ] , a [ 5 ] , a [ 4 ] } ; } else if ( direction . equals ( " E " ) ) { this . eyes = new String [ ] { " dummy " , a [ 4 ] , a [ 2 ] , a [ 1 ] , a [ 6 ] , a [ 5 ] , a [ 3 ] } ; } else { throw new IllegalArgumentException ( " Invalid ▁ direction " ) ; } } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] eyes = scanner . nextLine ( ) . split ( " ▁ " ) ; Dice dice = new Dice ( eyes ) ; String directionText = scanner . nextLine ( ) ; for ( int i = 0 ; i < directionText . length ( ) ; i ++ ) { dice . roll ( String . valueOf ( directionText . charAt ( i ) ) ) ; } System . out . println ( dice . getEye ( ) ) ; } }
public class Node { int data ; Node next ; public Node ( int data ) { this . data = data ; this . next = null ; } } public class Main { public static Node add ( int data ) { Node newNode = new Node ( 0 ) ; newNode . data = data ; newNode . next = null ; return newNode ; } public static void printArr ( int [ ] a , int n ) { int i = 0 ; while ( i < n ) { System . out . print ( a [ i ] + " ▁ " ) ; i = i + 1 ; } } public static int findLength ( Node head ) { Node curr = head ; int cnt = 0 ; while ( curr != null ) { cnt = cnt + 1 ; curr = curr . next ; } return cnt ; } public static void convertArr ( Node head ) { int len1 = findLength ( head ) ; int [ ] arr = new int [ len1 ] ; int index = 0 ; Node curr = head ; while ( curr != null ) { arr [ index ] = curr . data ; curr = curr . next ; index ++ ; } printArr ( arr , len1 ) ; } public static void main ( String [ ] args ) { Node head = new Node ( 0 ) ; head . next = add ( 1 ) ; head . next . next = add ( 2 ) ; head . next . next . next = add ( 3 ) ; head . next . next . next . next = add ( 4 ) ; head . next . next . next . next . next = add ( 5 ) ; convertArr ( head ) ; } }
import org . apache . commons . lang3 . ArrayUtils ; public class Main { public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( " Non - decreasing ▁ digits ▁ = ▁ " + nonDecNums ( n ) ) ; } public static int nonDecNums ( int n ) { int [ ] [ ] a = new int [ n + 1 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { a [ 0 ] [ i ] = 1 ; } for ( int i = 1 ; i < n + 1 ; i ++ ) { a [ i ] [ 9 ] = 1 ; } for ( int i = 1 ; i < n + 1 ; i ++ ) { for ( int j = 8 ; j >= 0 ; j -- ) { a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } return a [ n ] [ 0 ] ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int iterations = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int _ = 0 ; _ < iterations ; _ ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = Integer . parseInt ( input [ i ] ) ; } Map < Integer , Integer > d = new HashMap < > ( ) ; int f = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = ( i + l [ i ] ) % n ; if ( d . containsKey ( x ) ) { f = 1 ; break ; } else { d . put ( x , 1 ) ; } } if ( f == 1 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } }
public class Solution { public int minMoves ( int [ ] nums ) { if ( nums == null || nums . length == 0 ) { return 0 ; } int minNum = Integer . MAX_VALUE ; for ( int num : nums ) { minNum = Math . min ( minNum , num ) ; } int sum = 0 ; for ( int num : nums ) { sum += num - minNum ; } return sum ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 } ; int out = sObj . minMoves ( nums ) ; System . out . println ( out ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a <= 0 && 0 <= b ) { System . out . println ( " Zero " ) ; } else if ( a < 0 && Math . min ( b - a , - a ) % 2 == 0 ) { System . out . println ( " Negative " ) ; } else { System . out . println ( " Positive " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( firstSetBit ( n ) ) ; } public static int firstSetBit ( int n ) { int x = n & ( n - 1 ) ; return ( n ^ x ) ; } }
public class Main { static final int MAX_CHAR = 256 ; public static int maximumChars ( String str1 ) { int n = str1 . length ( ) ; int res = - 1 ; int [ ] firstInd = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { firstInd [ i ] = - 1 ; } for ( int i = 0 ; i < n ; i ++ ) { int first_ind = firstInd [ str1 . charAt ( i ) ] ; if ( first_ind == - 1 ) { firstInd [ str1 . charAt ( i ) ] = i ; } else { res = Math . max ( res , Math . abs ( i - first_ind - 1 ) ) ; } } return res ; } public static void main ( String [ ] args ) { String str1 = " abba " ; System . out . println ( maximumChars ( str1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; List < int [ ] > z = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] temp = new int [ input . length ] ; for ( int j = 0 ; j < input . length ; j ++ ) { temp [ j ] = Integer . parseInt ( input [ j ] ) ; } z . add ( temp ) ; } z . sort ( Comparator . comparingInt ( a -> a [ 0 ] ) ) ; int L = 0 ; int R = 0 ; int ans = 0 ; int ans1 = 0 ; while ( L < n && R < n ) { ans = Math . max ( z . get ( R ) [ 1 ] , ans ) ; if ( Math . abs ( z . get ( L ) [ 0 ] - z . get ( R ) [ 0 ] ) < d ) { ans1 += z . get ( R ) [ 1 ] ; R ++ ; } else { ans = Math . max ( ans1 , ans ) ; ans1 -= z . get ( L ) [ 1 ] ; L ++ ; } } System . out . println ( Math . max ( ans , ans1 ) ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { double a = 5 ; System . out . println ( " Area : ▁ " + String . format ( " % .2f " , findArea ( a ) ) ) ; System . out . println ( " Volume : ▁ " + String . format ( " % .2f " , findVolume ( a ) ) ) ; } public static double findArea ( double a ) { double area = 5 * Math . sqrt ( 3 ) * a * a ; return area ; } public static double findVolume ( double a ) { double volume = ( ( 5.0 / 12 ) * ( 3 + Math . sqrt ( 5 ) ) * a * a * a ) ; return volume ; } }
``` java import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int [ ] nine_pyramidal_pdf = { 1 } ; int [ ] PYRAMIDAL_DIE_PDF = { 0 , 1 , 1 , 1 , 1 } ; for ( int i = 0 ; i < 9 ; i ++ ) { nine_pyramidal_pdf = convolve ( nine_pyramidal_pdf , PYRAMIDAL_DIE_PDF ) ; } int [ ] six_cubic_pdf = { 1 } ; int [ ] CUBIC_DIE_PDF = { 0 , 1 , 1 , 1 , 1 , 1 , 1 } ; for ( int i = 0 ; i < 6 ; i ++ ) { six_cubic_pdf = convolve ( six_cubic_pdf , CUBIC_DIE_PDF ) ; } int ans = 0 ; for ( int i = 0 ; i < nine_pyramidal_pdf . length ; i ++ ) { ans += nine_pyramidal_pdf [ i ] * Arrays . stream ( Arrays . copyOfRange ( six_cubic_pdf , 0 , i ) ) . sum ( ) ; } double result = ( double ) ans / ( Arrays . stream ( nine_pyramidal_pdf ) . sum ( ) * Arrays . stream ( six_cubic_pdf ) . sum ( ) ) ; return String . format ( " % .7f " , result ) ; } public static int [ ] convolve ( int [ ] a , int [ ] b ) { int [ ] c = new int [ a . length + b . length - 1 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < b . length ; j ++ ) { c [ i + j ] += a [ i ] * b [ j ] ; } } return c ; } } ```
int N = 6 ; int Even = N / 2 ; int Odd = N - Even ; System . out . println ( Even * Odd ) ;
public class Main { public static void main ( String [ ] args ) { int N = 12 , M = 13 , s = 4 ; System . out . println ( solve ( M , N , s ) ) ; } public static int solve ( int M , int N , int s ) { if ( N % s == 0 ) { N = N / s ; } else { N = ( N / s ) + 1 ; } if ( M % s == 0 ) { M = M / s ; } else { M = ( M / s ) + 1 ; } return M * N ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } public static int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } public static int countPairs ( int [ ] arr , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( lcm ( arr [ i ] , arr [ j ] ) == gcd ( arr [ i ] , arr [ j ] ) ) { ans ++ ; } } } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] scoresOfTheParticipants = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { scoresOfTheParticipants [ i ] = Integer . parseInt ( input [ i ] ) ; } int totalScores = 0 ; for ( int score : scoresOfTheParticipants ) { totalScores += score ; } int chosenTeams = 0 ; for ( int i = 0 ; i < 6 ; i ++ ) { for ( int j = i + 1 ; j < 6 ; j ++ ) { for ( int k = j + 1 ; k < 6 ; k ++ ) { if ( scoresOfTheParticipants [ i ] + scoresOfTheParticipants [ j ] + scoresOfTheParticipants [ k ] == totalScores - ( scoresOfTheParticipants [ i ] + scoresOfTheParticipants [ j ] + scoresOfTheParticipants [ k ] ) ) { chosenTeams ++ ; } } } } if ( chosenTeams == 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int a = 1 ; System . out . println ( maximize ( a ) ) ; } public static int _popcnt32 ( int number ) { int counter = 0 ; while ( number > 0 ) { if ( number % 2 == 1 ) { counter = counter + 1 ; } number = ( int ) ( number / 2 ) ; } return counter ; } public static int maximize ( int a ) { int n = _popcnt32 ( a ) ; int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { res = ( int ) ( res | ( 1 << ( 32 - i ) ) ) ; } return Math . abs ( res ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int [ ] lst = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lst [ i ] = scanner . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( lst [ i ] > k ) { cnt ++ ; } } System . out . println ( cnt ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a1 = scanner . nextInt ( ) ; int a2 = scanner . nextInt ( ) ; int t = 0 ; if ( a1 == 1 && a2 == 1 ) { System . out . println ( 0 ) ; } else { while ( a1 > 0 && a2 > 0 ) { if ( a1 > a2 ) { a2 += 1 ; a1 -= 2 ; } else { a2 -= 2 ; a1 += 1 ; } t += 1 ; } System . out . println ( t ) ; } } }
public class Solution { public int [ ] xorQueries ( int [ ] arr , int [ ] [ ] queries ) { int [ ] pref = new int [ arr . length + 1 ] ; pref [ 0 ] = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { pref [ i + 1 ] = arr [ i ] ^ pref [ i ] ; } int [ ] ans = new int [ queries . length ] ; for ( int i = 0 ; i < queries . length ; i ++ ) { int l = queries [ i ] [ 0 ] ; int r = queries [ i ] [ 1 ] ; ans [ i ] = pref [ r + 1 ] ^ pref [ l ] ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] arr = { 1 , 3 , 4 , 8 } ; int [ ] [ ] queries = { { 0 , 1 } , { 1 , 2 } , { 0 , 3 } , { 3 , 3 } } ; int [ ] out = sObj . xorQueries ( arr , queries ) ; for ( int i : out ) { System . out . print ( i + " ▁ " ) ; } } }
public class Main { public static void main ( String [ ] args ) { String str = " ab4c12ed3" ; int k = 21 ; System . out . println ( encodedChar ( str , k ) ) ; } public static char encodedChar ( String str , int k ) { String expand = " " ; int freq = 0 ; int i = 0 ; while ( i < str . length ( ) ) { String temp = " " ; freq = 0 ; while ( i < str . length ( ) && str . charAt ( i ) >= ' a ' && str . charAt ( i ) <= ' z ' ) { temp += str . charAt ( i ) ; i ++ ; } while ( i < str . length ( ) && str . charAt ( i ) >= '1' && str . charAt ( i ) <= '9' ) { freq = freq * 10 + str . charAt ( i ) - '0' ; i ++ ; } for ( int j = 1 ; j <= freq ; j ++ ) { expand += temp ; } } if ( freq == 0 ) { expand += temp ; } return expand . charAt ( k - 1 ) ; } }
public class Main { public static void printPossible ( int a , int b , int c ) { if ( ( a + b + c ) % 2 != 0 || a + b < c ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } public static void main ( String [ ] args ) { int a = 2 ; int b = 4 ; int c = 2 ; printPossible ( a , b , c ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( summation ( N ) ) ; } public static int summation ( int n ) { int abs_sum = n * ( n + 1 ) / 2 ; int sign = ( ( n + 1 ) % 2 == 0 ) ? 1 : - 1 ; int result_sum = sign * abs_sum ; return result_sum ; } }
public class Main { public static void sortSquare ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] * arr [ i ] ; } Arrays . sort ( arr ) ; } public static void main ( String [ ] args ) { int [ ] arr = { - 6 , - 3 , - 1 , 2 , 4 , 5 } ; int n = arr . length ; System . out . println ( " Before ▁ sort " ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( " " ) ; sortSquare ( arr , n ) ; System . out . println ( " After ▁ sort " ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] nStr = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nStr [ 0 ] ) ; int t = Integer . parseInt ( nStr [ 1 ] ) ; String [ ] aStr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( aStr [ i ] ) ; } boolean f = false ; int c = 1 ; int i = 0 ; while ( true ) { c = ( i + 1 ) + a [ i ] ; if ( c - 1 < i ) { break ; } if ( c == t ) { f = true ; break ; } if ( c > t ) { break ; } i = c - 1 ; } if ( f ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] A = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( l [ i ] == 0 ) { Set < Integer > s = new HashSet < > ( ) ; int p = i ; int can = 1 ; while ( ! s . contains ( p ) ) { if ( l [ p ] == 1 ) { can = 0 ; break ; } s . add ( p ) ; l [ p ] = 1 ; p = ( p + A [ p ] ) % n ; } if ( can == 1 ) { while ( l [ p ] == 1 ) { l [ p ] = 2 ; p = ( p + A [ p ] ) % n ; } } } } int count = 0 ; for ( int e : l ) { if ( e == 2 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 55 ; if ( isTriangular ( n ) ) { System . out . println ( " The ▁ number ▁ is ▁ a ▁ triangular ▁ number " ) ; } else { System . out . println ( " The ▁ number ▁ is ▁ NOT ▁ a ▁ triangular ▁ number " ) ; } } public static boolean isTriangular ( int num ) { if ( num < 0 ) { return false ; } int c = ( - 2 * num ) ; int b = 1 ; int a = 1 ; int d = ( b * b ) - ( 4 * a * c ) ; if ( d < 0 ) { return false ; } double root1 = ( - b + Math . sqrt ( d ) ) / ( 2 * a ) ; double root2 = ( - b - Math . sqrt ( d ) ) / ( 2 * a ) ; if ( root1 > 0 && Math . floor ( root1 ) == root1 ) { return true ; } if ( root2 > 0 && Math . floor ( root2 ) == root2 ) { return true ; } return false ; } }
public class Main { public static void printNumberWithDR ( int k , int d ) { if ( d == 0 && k != 1 ) { System . out . print ( - 1 ) ; } else { System . out . print ( d ) ; k -- ; while ( k > 0 ) { System . out . print ( 0 ) ; k -- ; } } } public static void main ( String [ ] args ) { int k = 4 ; int d = 4 ; printNumberWithDR ( k , d ) ; } }
int N = 3 ; public void rotateMatrix ( int [ ] [ ] mat ) { int i = N - 1 ; while ( i >= 0 ) { int j = N - 1 ; while ( j >= 0 ) { System . out . print ( mat [ i ] [ j ] + " ▁ " ) ; j = j - 1 ; } System . out . println ( ) ; i = i - 1 ; } } int [ ] [ ] mat = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; rotateMatrix ( mat ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n % 500 == 0 ) { System . out . println ( n ) ; } else { System . out . println ( ( n / 500 ) * 500 ) ; } } }
public static int getProduct ( int n ) { int product = 1 ; while ( n != 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } return product ; } public static void main ( String [ ] args ) { int n = 4513 ; System . out . println ( getProduct ( n ) ) ; }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int b = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; int g = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int t = scanner . nextInt ( ) ; if ( t == 0 ) break ; int cnt = b * 5 + r * 3 + s ; int coins = ( b * 5 + r * 3 ) * ( 15 - 2 ) ; coins += b * 15 ; coins += r * 15 ; coins += 7 * g ; coins += 2 * c ; coins += 100 - ( t - cnt ) * 3 ; System . out . println ( coins ) ; } } } ```
int maxn = 1010 ; int mod = 1000000007 ; int [ ] [ ] comb = new int [ maxn ] [ maxn ] ; comb [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < maxn ; i ++ ) { comb [ i ] [ 0 ] = 1 ; for ( int j = 1 ; j <= i ; j ++ ) { comb [ i ] [ j ] = ( comb [ i - 1 ] [ j ] + comb [ i - 1 ] [ j - 1 ] ) % mod ; } } Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int [ ] color = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { color [ i ] = scanner . nextInt ( ) ; } int res = 1 ; int total = 0 ; for ( int i = 0 ; i < k ; i ++ ) { res = ( res * comb [ total + color [ i ] - 1 ] [ color [ i ] - 1 ] ) % mod ; total = ( total + color [ i ] ) % mod ; } System . out . println ( res % mod ) ;
public class Main { static double PI = 3.14159265 ; public static void main ( String [ ] args ) { int r = 7 ; System . out . println ( length_rope ( r ) ) ; } static double length_rope ( int r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } }
public class Main { public static int reverseDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } public static int isPalindrome ( int n ) { int rev_n = reverseDigits ( n ) ; if ( rev_n == n ) { return 1 ; } else { return 0 ; } } public static void main ( String [ ] args ) { int n = 4562 ; if ( isPalindrome ( n ) == 1 ) { System . out . println ( " Is ▁ " + n + " ▁ a ▁ Palindrome ▁ number ? ▁ - > ▁ " + true ) ; } else { System . out . println ( " Is ▁ " + n + " ▁ a ▁ Palindrome ▁ number ? ▁ - > ▁ " + false ) ; } n = 2002 ; if ( isPalindrome ( n ) == 1 ) { System . out . println ( " Is ▁ " + n + " ▁ a ▁ Palindrome ▁ number ? ▁ - > ▁ " + true ) ; } else { System . out . println ( " Is ▁ " + n + " ▁ a ▁ Palindrome ▁ number ? ▁ - > ▁ " + false ) ; } } }
public class Solution { public String addStrings ( String num1 , String num2 ) { List < String > res = new ArrayList < > ( ) ; int pos1 = num1 . length ( ) - 1 ; int pos2 = num2 . length ( ) - 1 ; int carry = 0 ; while ( pos1 >= 0 || pos2 >= 0 || carry == 1 ) { int digit1 = 0 ; int digit2 = 0 ; if ( pos1 >= 0 ) { digit1 = num1 . charAt ( pos1 ) - '0' ; } if ( pos2 >= 0 ) { digit2 = num2 . charAt ( pos2 ) - '0' ; } res . add ( String . valueOf ( ( digit1 + digit2 + carry ) % 10 ) ) ; carry = ( digit1 + digit2 + carry ) / 10 ; pos1 -- ; pos2 -- ; } Collections . reverse ( res ) ; return String . join ( " " , res ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String num1 = "11" ; String num2 = "123" ; String out = sObj . addStrings ( num1 , num2 ) ; System . out . println ( out ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( " Below ▁ are ▁ all ▁ perfect ▁ numbers ▁ till ▁ 10000" ) ; for ( int n = 2 ; n < 10000 ; n ++ ) { if ( isPerfect ( n ) ) { System . out . println ( n + " ▁ is ▁ a ▁ perfect ▁ number " ) ; } } } public static boolean isPerfect ( int n ) { int sum = 1 ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) { sum = sum + i + n / i ; } i ++ ; } return ( sum == n && n != 1 ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { for ( int i = 2 ; i < 100 ; i ++ ) { if ( isPower ( i ) ) { System . out . print ( i + " ▁ " ) ; } } } public static boolean isPower ( int n ) { if ( n <= 1 ) { return true ; } for ( int x = 2 ; x <= ( int ) Math . sqrt ( n ) + 1 ; x ++ ) { int p = x ; while ( p <= n ) { p = p * x ; if ( p == n ) { return true ; } } } return false ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { for ( int i = 2 ; i < 100 ; i ++ ) { if ( isPower ( i ) ) { System . out . print ( i + " ▁ " ) ; } } } public static boolean isPower ( int n ) { if ( n == 1 ) { return true ; } for ( int x = 2 ; x <= ( int ) Math . sqrt ( n ) ; x ++ ) { int y = 2 ; int p = ( int ) Math . pow ( x , y ) ; while ( p <= n && p > 0 ) { if ( p == n ) { return true ; } y = y + 1 ; p = ( int ) Math . pow ( x , y ) ; } } return false ; } }
import java . util . * ; public class Main { static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } public static void findTwoNumbers ( int sum , int gcd ) { if ( gcd ( gcd , sum - gcd ) == gcd && sum != gcd ) { System . out . println ( " a ▁ = ▁ " + Math . min ( gcd , sum - gcd ) + " , ▁ b ▁ = ▁ " + ( sum - Math . min ( gcd , sum - gcd ) ) ) ; } else { System . out . println ( - 1 ) ; } } public static void main ( String [ ] args ) { int sum = 8 ; int gcd = 2 ; findTwoNumbers ( sum , gcd ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int num = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < num ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int rb = Integer . parseInt ( input [ 2 ] ) ; int cb = Integer . parseInt ( input [ 3 ] ) ; int rd = Integer . parseInt ( input [ 4 ] ) ; int cd = Integer . parseInt ( input [ 5 ] ) ; int t = 0 ; int df = 1 ; int dp = 1 ; while ( true ) { if ( rb == n ) { df = - 1 * df ; } if ( cb == m ) { dp = - 1 * dp ; } if ( rb == rd || cb == cd ) { break ; } rb += df ; cb += dp ; t += 1 ; } System . out . println ( t ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int A = scanner . nextInt ( ) ; int B = scanner . nextInt ( ) ; int C = scanner . nextInt ( ) ; int D = scanner . nextInt ( ) ; if ( A <= N || C <= N ) { int X , Y ; if ( N % A == 0 ) { X = ( N / A ) * B ; } else { X = ( ( N / A ) + 1 ) * B ; } if ( N % C == 0 ) { Y = ( N / C ) * D ; } else { Y = ( ( N / C ) + 1 ) * D ; } } else { X = B ; Y = D ; } if ( X <= Y ) { System . out . println ( ( int ) X ) ; } else { System . out . println ( ( int ) Y ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 7 , 5 , 3 , 9 , 1 , 2 } ; int n = arr . length ; System . out . println ( totalPairs ( arr , n ) ) ; } public static int totalPairs ( int [ ] arr , int n ) { Map < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = Integer . bitCount ( arr [ i ] ) ; m . put ( x , m . getOrDefault ( x , 0 ) + 1 ) ; } int result = 0 ; for ( int it : m . keySet ( ) ) { result += ( m . get ( it ) * ( m . get ( it ) - 1 ) ) / 2 ; } return result ; } }
public class Main { public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( n + " th ▁ centered ▁ hexadecagonal ▁ number ▁ : ▁ " + centerHexadecagonalNum ( n ) ) ; n = 12 ; System . out . println ( n + " th ▁ centered ▁ hexadecagonal ▁ number ▁ : ▁ " + centerHexadecagonalNum ( n ) ) ; } public static int centerHexadecagonalNum ( int n ) { return 8 * n * n - 8 * n + 1 ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int q , h , s , d ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; q = Integer . parseInt ( inputArr [ 0 ] ) ; h = Integer . parseInt ( inputArr [ 1 ] ) ; s = Integer . parseInt ( inputArr [ 2 ] ) ; d = Integer . parseInt ( inputArr [ 3 ] ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] pricesfor2 = { q * 8 , h * 4 , s * 2 , d } ; Arrays . sort ( pricesfor2 ) ; boolean nep = n % 2 == 1 ; n /= 2 ; int res = n * pricesfor2 [ 0 ] ; if ( nep ) { res += Math . min ( q * 4 , Math . min ( h * 2 , s ) ) ; } System . out . println ( res ) ; } }
public class Main { public static void main ( String [ ] args ) { int L = 10 ; int R = 22 ; int K = 3 ; System . out . println ( countNumbers ( L , R , K ) ) ; } public static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) { K = 0 ; } int totalNumbers = R - L + 1 ; int factor9 = totalNumbers / 9 ; int rem = totalNumbers % 9 ; int ans = factor9 ; for ( int i = R ; i > R - rem ; i -- ) { int rem1 = i % 9 ; if ( rem1 == K ) { ans += 1 ; } } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; int e = scanner . nextInt ( ) ; int f = scanner . nextInt ( ) ; System . out . println ( answer ( a , b , c , d , e , f ) ) ; } public static int answer ( int a , int b , int c , int d , int e , int f ) { int ans ; if ( e > f ) { int m = Math . min ( a , d ) ; ans = e * m ; d -= m ; ans += f * Math . min ( b , c , d ) ; } else { int m = Math . min ( b , c , d ) ; ans = f * m ; d -= m ; ans += e * Math . min ( a , d ) ; } return ans ; } }
public class Solution { public int Solve ( int [ ] A ) { int ans = 2 ; int n = A . length ; if ( n <= 2 ) { return n ; } int [ ] llap = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { llap [ i ] = 2 ; } Arrays . sort ( A ) ; for ( int j = n - 2 ; j >= 0 ; j -- ) { int i = j - 1 ; int k = j + 1 ; while ( i >= 0 && k < n ) { if ( A [ i ] + A [ k ] == 2 * A [ j ] ) { llap [ j ] = Math . max ( llap [ k ] + 1 , llap [ j ] ) ; ans = Math . max ( ans , llap [ j ] ) ; i -- ; k ++ ; } else if ( A [ i ] + A [ k ] < 2 * A [ j ] ) { k ++ ; } else { i -- ; } } } return ans ; } public static void main ( String [ ] args ) { Solution obj = new Solution ( ) ; int [ ] a = { 9 , 4 , 7 , 2 , 10 } ; System . out . println ( obj . Solve ( a ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int d = 1 ; int [ ] arr = { 1 , 3 , 3 , 4 , 6 } ; int ans = minimumChanges ( arr , n , d ) ; System . out . println ( ans ) ; } public static int minimumChanges ( int [ ] arr , int n , int d ) { int maxFreq = Integer . MIN_VALUE ; Map < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a0 = arr [ i ] - i * d ; if ( freq . containsKey ( a0 ) ) { freq . put ( a0 , freq . get ( a0 ) + 1 ) ; } else { freq . put ( a0 , 1 ) ; } if ( freq . get ( a0 ) > maxFreq ) { maxFreq = freq . get ( a0 ) ; } } return ( n - maxFreq ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; List < int [ ] > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ input . length + 1 ] ; for ( int j = 0 ; j < input . length ; j ++ ) { arr [ j ] = Integer . parseInt ( input [ j ] ) ; } arr [ input . length ] = i ; a . add ( arr ) ; } a . removeIf ( x -> { for ( int [ ] c : a ) { boolean allGreater = true ; for ( int k = 0 ; k < 3 ; k ++ ) { if ( c [ k ] < x [ k ] ) { allGreater = false ; break ; } } if ( allGreater ) { return false ; } } return true ; } ) ; int minIndex = 0 ; int minValue = a . get ( 0 ) [ 3 ] ; for ( int i = 1 ; i < a . size ( ) ; i ++ ) { if ( a . get ( i ) [ 3 ] < minValue ) { minIndex = i ; minValue = a . get ( i ) [ 3 ] ; } } System . out . println ( a . get ( minIndex ) [ 4 ] + 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { int x = 1 ; int y = 4 ; int [ ] a = { 1 , 5 } ; int n = a . length ; int [ ] b = { 1 , 1 , 2 } ; int m = b . length ; System . out . println ( countPoints ( n , m , a , b , x , y ) ) ; } public static int countPoints ( int n , int m , int [ ] a , int [ ] b , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int x = 4 ; System . out . println ( multiplyWith3Point5 ( x ) ) ; } public static int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = 1 ; while ( t > 0 ) { t -= 1 ; int n = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int [ ] v = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = scanner . nextInt ( ) ; } int sum = 0 ; int l = 0 ; int r = 0x3f3f3f3f ; for ( int i = 0 ; i < n ; i ++ ) { sum += v [ i ] ; r = Math . min ( v [ i ] , r ) ; } if ( sum < s ) { System . out . println ( - 1 ) ; } else { while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( check ( mid ) ) { l = mid ; } else { r = mid - 1 ; } } System . out . println ( l ) ; } } } public static boolean check ( int x , int [ ] v , int n , int s ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += v [ i ] - x ; } if ( sum >= s ) { return true ; } else { return false ; } } }
public class Main { public static void main ( String [ ] args ) { String s = " ccccdeededff " ; System . out . println ( longestSubstring ( s ) ) ; } public static int longestSubstring ( String s ) { int cnt = 1 ; int maxi = 1 ; int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) { cnt ++ ; } else { maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } } maxi = Math . max ( cnt , maxi ) ; return maxi ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = scanner . nextInt ( ) ; int [ ] ans = new int [ 50 ] ; for ( int i = 0 ; i < 50 ; i ++ ) { ans [ 49 - i ] += k / 50 ; } for ( int i = 0 ; i < k % 50 ; i ++ ) { ans [ 49 - i ] += 1 ; } System . out . println ( 50 ) ; for ( int i = 0 ; i < 50 ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
public class Main { public static void main ( String [ ] args ) { String num = "107" ; System . out . println ( " Count ▁ of ▁ numbers ▁ from ▁ 1 ▁ to ▁ " + num + " ▁ is ▁ " + countZero ( num ) ) ; num = "1264" ; System . out . println ( " Count ▁ of ▁ numbers ▁ from ▁ 1 ▁ to ▁ " + num + " ▁ is ▁ " + countZero ( num ) ) ; } public static int zeroUpto ( int digits ) { int first = ( int ) ( ( Math . pow ( 10 , digits ) - 1 ) / 9 ) ; int second = ( int ) ( ( Math . pow ( 9 , digits ) - 1 ) / 8 ) ; return 9 * ( first - second ) ; } public static int countZero ( String num ) { int k = num . length ( ) ; int total = zeroUpto ( k - 1 ) ; int non_zero = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '0' ) { non_zero -= 1 ; break ; } non_zero += ( ( ( num . charAt ( i ) - '0' ) - 1 ) * ( Math . pow ( 9 , k - 1 - i ) ) ) ; } int no = 0 ; int remaining = 0 ; int calculatedUpto = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { no = no * 10 + ( num . charAt ( i ) - '0' ) ; if ( i != 0 ) { calculatedUpto = calculatedUpto * 10 + 9 ; } } remaining = no - calculatedUpto ; int ans = zeroUpto ( k - 1 ) + ( remaining - non_zero - 1 ) ; return ans ; } }
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { double a = 5 ; System . out . printf ( " % .4f " , cone ( a ) ) ; } public static double cone ( double a ) { if ( a < 0 ) { return - 1 ; } double r = ( a * sqrt ( 2 ) ) / 3 ; double h = ( 2 * a ) / 3 ; double V = 3.14 * pow ( r , 2 ) * h ; return V ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int num = 142 ; String string = Integer . toString ( num ) ; char [ ] s = string . toCharArray ( ) ; if ( checkSumPrime ( s ) ) { System . out . println ( " Prime " ) ; } else { System . out . println ( " Not ▁ Prime \n " ) ; } } public static boolean Prime ( int n ) { if ( n == 1 ) { return false ; } for ( int i = 2 ; i < Math . ceil ( Math . sqrt ( n + 1 ) ) ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } public static boolean checkSumPrime ( char [ ] string ) { int summ = 0 ; for ( int i = 1 ; i < string . length ; i ++ ) { summ += Math . abs ( Character . getNumericValue ( string [ i - 1 ] ) - Character . getNumericValue ( string [ i ] ) ) ; } if ( Prime ( summ ) ) { return true ; } else { return false ; } } }
public class Main { public static void main ( String [ ] args ) { System . out . printf ( " % .3f \n " , sum ( 8 ) ) ; System . out . printf ( " % .3f \n " , sum ( 10 ) ) ; } public static double sum ( int n ) { if ( n < 2 ) { return 1 ; } else { return 1.0 / n + sum ( n - 1 ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] p = { 2 , 5 , 1 , 3 , 4 } ; int n = p . length ; System . out . println ( countElements ( p , n ) ) ; } public static int countElements ( int [ ] p , int n ) { int ans = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( p [ i - 1 ] > p [ i ] && p [ i ] > p [ i + 1 ] ) { ans += 1 ; } else if ( p [ i - 1 ] < p [ i ] && p [ i ] < p [ i + 1 ] ) { ans += 1 ; } } return ans ; } }
String [ ] input = new Scanner ( System . in ) . nextLine ( ) . split ( " ▁ " ) ; String x = input [ 0 ] ; String y = input [ 1 ] ; System . out . println ( x . equals ( y ) ? " = " : x . compareTo ( y ) > 0 ? " > " : " < " ) ;
public class Main { public static void main ( String [ ] args ) { int l = 18 ; int b = 12 ; int h = 9 ; System . out . println ( " Volume ▁ of ▁ triangular ▁ prism : ▁ " + findVolume ( l , b , h ) ) ; } public static double findVolume ( int l , int b , int h ) { return ( ( l * b * h ) / 2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String [ ] nk = input . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nk [ 0 ] ) ; int k = Integer . parseInt ( nk [ 1 ] ) ; String s = input . nextLine ( ) ; int [ ] count = new int [ 26 ] ; for ( char c : s . toCharArray ( ) ) { count [ c - ' A ' ] ++ ; } Arrays . sort ( count ) ; int res = 0 ; for ( int i = 25 ; i >= 0 ; i -- ) { if ( count [ i ] >= k ) { res += k * k ; System . out . println ( res ) ; return ; } k -= count [ i ] ; res += count [ i ] * count [ i ] ; } System . out . println ( res ) ; } }
public class Main { public static void main ( String [ ] args ) { compute ( ) ; } public static void compute ( ) { int i = 286 ; int j = 166 ; int k = 144 ; while ( true ) { int triangle = i * ( i + 1 ) / 2 ; int pentagon = j * ( j * 3 - 1 ) / 2 ; int hexagon = k * ( k * 2 - 1 ) ; int minimum = Math . min ( Math . min ( triangle , pentagon ) , hexagon ) ; if ( minimum == Math . max ( Math . max ( triangle , pentagon ) , hexagon ) ) { System . out . println ( String . valueOf ( triangle ) ) ; return ; } if ( minimum == triangle ) { i += 1 ; } if ( minimum == pentagon ) { j += 1 ; } if ( minimum == hexagon ) { k += 1 ; } } } }
public class Main { public static void main ( String [ ] args ) { int N = 500 ; System . out . println ( maxPrimefactorNum ( N ) ) ; } public static int maxPrimefactorNum ( int N ) { if ( N < 2 ) { return 0 ; } boolean [ ] arr = new boolean [ N + 1 ] ; for ( int i = 0 ; i <= N ; i ++ ) { arr [ i ] = true ; } int prod = 1 ; int res = 0 ; int p = 2 ; while ( p * p <= N ) { if ( arr [ p ] ) { for ( int i = p * 2 ; i <= N ; i += p ) { arr [ i ] = false ; } prod *= p ; if ( prod > N ) { return res ; } res ++ ; } p ++ ; } return res ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 8 , 1 , 2 , 12 , 48 , 6 , 4 , 24 , 16 , 3 } ; int N = arr . length ; if ( checkDivisors ( arr , N ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean checkDivisors ( int [ ] a , int n ) { int X = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; int [ ] b = new int [ 0 ] ; for ( int i = 1 ; i <= Math . sqrt ( X ) ; i ++ ) { if ( X % i == 0 ) { b = Arrays . copyOf ( b , b . length + 1 ) ; b [ b . length - 1 ] = i ; if ( X / i != i ) { b = Arrays . copyOf ( b , b . length + 1 ) ; b [ b . length - 1 ] = X / i ; } } } if ( b . length != n ) { return false ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != a [ i ] ) { return false ; } } return true ; } }
public class Main { static void subArray ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = i ; k <= j ; k ++ ) { System . out . print ( arr [ k ] + " ▁ " ) ; } System . out . println ( ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( " All ▁ Non - empty ▁ Subarrays " ) ; subArray ( arr , n ) ; } }
int [ ] arr = Files . lines ( Paths . get ( "0" ) ) . map ( Integer :: parseInt ) . toArray ( ) ; for ( int i = 1 ; i < arr . length ; i ++ ) { int n = arr [ i ] ; System . out . println ( ( n % 2 != 0 || n < 3 ) ? - 1 : ( 0 - - n / 6 ) + " ▁ " + n / 4 ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 6 , 1 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } public static int maxSum ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] * i ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } public static int maxSum ( int [ ] a , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) { sum += a [ i ] ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 53 , 28 , 143 , 5 } ; int n = arr . length ; System . out . println ( findAnswer ( n , arr ) ) ; } public static int findAnswer ( int n , int [ ] arr ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { sum += ( arr [ i ] + arr [ n - i - 1 ] ) * ( arr [ i ] + arr [ n - i - 1 ] ) ; } return sum ; } }
public class Main { public static int findSum ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; int sum = arr [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { sum = sum + arr [ i + 1 ] ; } } return sum ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 1 , 1 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }
public class newnode { static int MIN = - 2147483648 ; static int MAX = 2147483648 ; int data ; newnode left ; newnode right ; public newnode ( int data ) { this . data = data ; this . left = null ; this . right = null ; } } public class Main { public static newnode getDeepestLeftLeafNode ( newnode root ) { if ( root == null ) { return null ; } List < newnode > q = new ArrayList < > ( ) ; q . add ( root ) ; newnode result = null ; while ( ! q . isEmpty ( ) ) { newnode temp = q . get ( 0 ) ; q . remove ( 0 ) ; if ( temp . left != null ) { q . add ( temp . left ) ; if ( temp . left . left == null && temp . left . right == null ) { result = temp . left ; } } if ( temp . right != null ) { q . add ( temp . right ) ; } } return result ; } public static void main ( String [ ] args ) { newnode root = new newnode ( 1 ) ; root . left = new newnode ( 2 ) ; root . right = new newnode ( 3 ) ; root . left . left = new newnode ( 4 ) ; root . right . left = new newnode ( 5 ) ; root . right . right = new newnode ( 6 ) ; root . right . left . right = new newnode ( 7 ) ; root . right . right . right = new newnode ( 8 ) ; root . right . left . right . left = new newnode ( 9 ) ; root . right . right . right . right = new newnode ( 10 ) ; newnode result = getDeepestLeftLeafNode ( root ) ; if ( result != null ) { System . out . println ( " Deepest ▁ Left ▁ Leaf ▁ Node ▁ : : ▁ " + result . data ) ; } else { System . out . println ( " No ▁ result , ▁ Left ▁ leaf ▁ not ▁ found " ) ; } } }
public class newnode { int data ; newnode left ; newnode right ; public newnode ( int data ) { this . data = data ; this . left = null ; this . right = null ; } } public class Main { public static void main ( String [ ] args ) { newnode root = new newnode ( 1 ) ; root . left = new newnode ( 2 ) ; root . right = new newnode ( 3 ) ; root . left . right = new newnode ( 4 ) ; root . right . left = new newnode ( 5 ) ; root . right . right = new newnode ( 6 ) ; root . right . left . right = new newnode ( 7 ) ; root . right . right . right = new newnode ( 8 ) ; root . right . left . right . left = new newnode ( 9 ) ; root . right . right . right . right = new newnode ( 10 ) ; newnode result = getDeepestRightLeafNode ( root ) ; if ( result != null ) { System . out . println ( " Deepest ▁ Right ▁ Leaf ▁ Node ▁ : : ▁ " + result . data ) ; } else { System . out . println ( " No ▁ result , ▁ right ▁ leaf ▁ not ▁ found " ) ; } } public static newnode getDeepestRightLeafNode ( newnode root ) { if ( root == null ) { return null ; } List < newnode > q = new ArrayList < > ( ) ; q . add ( root ) ; newnode result = null ; while ( ! q . isEmpty ( ) ) { newnode temp = q . get ( 0 ) ; q . remove ( 0 ) ; if ( temp . left != null ) { q . add ( temp . left ) ; } if ( temp . right != null ) { q . add ( temp . right ) ; if ( temp . right . left == null && temp . right . right == null ) { result = temp . right ; } } } return result ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int a = 2 ; int b = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int old_a = a ; a = b ; b = old_a + b ; } System . out . println ( b ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int a = 4 ; int b = 3 ; int c = 2 ; int d = 2 ; printRatio ( a , b , c , d ) ; } public static void printRatio ( int a , int b , int c , int d ) { if ( b * c > a * d ) { int temp = c ; c = d ; d = temp ; temp = a ; a = b ; b = temp ; } int lcm = ( a * c ) / gcd ( a , c ) ; int x = lcm / a ; b = ( int ) ( b * x ) ; int y = lcm / c ; d = ( int ) ( d * y ) ; int k = gcd ( b , d ) ; b = ( int ) ( b / k ) ; d = ( int ) ( d / k ) ; System . out . println ( b + " ▁ : ▁ " + d ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
public class Main { public static int maxsum_SIS ( int [ ] arr , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) { current_sum = current_sum + arr [ i ] ; } else { max_sum = Math . max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } } return Math . max ( max_sum , current_sum ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( " Maximum ▁ sum ▁ : ▁ " + maxsum_SIS ( arr , n ) ) ; } }
public class Main { public static int GCD ( int a , int b ) { if ( b == 0 ) { return a ; } return GCD ( b , a % b ) ; } public static int findMaxSumUtil ( int [ ] arr , int n ) { int finalGCD = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { finalGCD = GCD ( arr [ i ] , finalGCD ) ; } return finalGCD ; } public static int findMaxSum ( int [ ] arr , int n ) { int maxElement = findMaxSumUtil ( arr , n ) ; return ( maxElement * n ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 8 , 20 , 12 , 36 } ; int n = arr . length ; System . out . println ( findMaxSum ( arr , n ) ) ; } }
import static java . lang . Math . abs ; public class Main { public static void main ( String [ ] args ) { int a = 20 , b = 52 , x = 5 , y = 7 ; System . out . println ( findMinDiff ( a , b , x , y ) ) ; } public static int gcd ( int a , int b ) { while ( b != 0 ) { int t = b ; b = a % b ; a = t ; } return a ; } public static int findMinDiff ( int a , int b , int x , int y ) { int g = gcd ( a , b ) ; int diff = abs ( x - y ) % g ; return Math . min ( diff , g - diff ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int x = Integer . parseInt ( input1 [ 0 ] ) ; int y = Integer . parseInt ( input1 [ 1 ] ) ; int w = Integer . parseInt ( input1 [ 2 ] ) ; int h = Integer . parseInt ( input1 [ 3 ] ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int ans = 0 ; for ( int j = 0 ; j < n ; j ++ ) { String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int cx = Integer . parseInt ( input2 [ 0 ] ) ; int cy = Integer . parseInt ( input2 [ 1 ] ) ; if ( x <= cx && cx <= x + w && y <= cy && cy <= y + h ) { ans ++ ; } } System . out . println ( ans ) ; } } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( divisibleby37 ( "8955795758" ) ) ; } public static boolean divisibleby37 ( String n ) { int l = n . length ( ) ; if ( n . equals ( "0" ) ) { return true ; } if ( l % 3 == 1 ) { n = "00" + n ; l += 2 ; } else if ( l % 3 == 2 ) { n = "0" + n ; l += 1 ; } int gSum = 0 ; while ( l != 0 ) { int group = Integer . parseInt ( n . substring ( l - 3 , l ) ) ; l = l - 3 ; gSum = gSum + group ; } if ( gSum >= 1000 ) { return divisibleby37 ( String . valueOf ( gSum ) ) ; } else { return gSum % 37 == 0 ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] input = br . readLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int x = Integer . parseInt ( input [ 1 ] ) ; int y = Integer . parseInt ( input [ 2 ] ) ; StringBuilder sb = new StringBuilder ( ) ; if ( y < n || n - 1 + Math . pow ( y - n + 1 , 2 ) < x ) { sb . append ( " - 1" ) ; } else { for ( int i = 0 ; i < n - 1 ; i ++ ) { sb . append ( "1 ▁ " ) ; } sb . append ( y - n + 1 ) ; } System . out . println ( sb . toString ( ) ) ; } }
public class Main { public static void main ( String [ ] args ) { String X = " ef " ; String Y = " gh " ; System . out . print ( " Minimum ▁ Cost ▁ to ▁ make ▁ two ▁ strings ▁ identical ▁ is ▁ = ▁ " + findMinCost ( X , Y , 10 , 20 ) ) ; } public static int lcs ( String X , String Y , int m , int n ) { int [ ] [ ] L = new int [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) { L [ i ] [ j ] = 0 ; } else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) { L [ i ] [ j ] = L [ i - 1 ] [ j - 1 ] + 1 ; } else { L [ i ] [ j ] = Math . max ( L [ i - 1 ] [ j ] , L [ i ] [ j - 1 ] ) ; } } } return L [ m ] [ n ] ; } public static int findMinCost ( String X , String Y , int costX , int costY ) { int m = X . length ( ) ; int n = Y . length ( ) ; int len_LCS = lcs ( X , Y , m , n ) ; return ( costX * ( m - len_LCS ) + costY * ( n - len_LCS ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int base = 8 ; System . out . println ( numberOfSquares ( base ) ) ; } public static int numberOfSquares ( int base ) { base = ( base - 2 ) ; base = base / 2 ; return ( int ) ( base * ( base + 1 ) / 2 ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 4 , 6 , 8 } ; int n = arr . length ; System . out . printf ( " % .4f " , rmsValue ( arr , n ) ) ; } public static double rmsValue ( int [ ] arr , int n ) { int square = 0 ; double mean = 0.0 ; double root = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) { square += ( arr [ i ] * arr [ i ] ) ; } mean = ( double ) square / n ; root = Math . sqrt ( mean ) ; return root ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int m = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; int [ ] p = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { p [ i ] = scanner . nextInt ( ) ; } int [ ] [ ] ce = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { ce [ i ] [ 0 ] = scanner . nextInt ( ) ; ce [ i ] [ 1 ] = scanner . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { dp [ i ] [ 0 ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 1 ; j < m + 1 ; j ++ ) { if ( j < ce [ i ] [ 0 ] ) { dp [ i + 1 ] [ j ] = Math . min ( dp [ i ] [ j ] , ce [ i ] [ 1 ] ) ; continue ; } dp [ i + 1 ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j - ce [ i ] [ 0 ] ] + ce [ i ] [ 1 ] ) ; } } Arrays . sort ( p ) ; int [ ] sump = new int [ m + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { sump [ i + 1 ] += sump [ i ] + p [ i ] ; } int ans = 0 ; for ( int i = 1 ; i < m + 1 ; i ++ ) { ans = Math . max ( ans , sump [ i ] - dp [ n ] [ i ] ) ; } System . out . println ( ans ) ; } }
public class Heap { private List < Integer > _nodes ; public Heap ( ) { this . _nodes = new ArrayList < > ( ) ; } public static Heap create ( List < Integer > li ) { Heap heap = new Heap ( ) ; heap . _nodes = li ; return heap ; } public Iterator < Tuple < Integer , Integer , Integer , Integer > > iterator ( ) { return new Iterator < > ( ) { private int cur = 0 ; @ Override public boolean hasNext ( ) { return cur < _nodes . size ( ) ; } @ Override public Tuple < Integer , Integer , Integer , Integer > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( ) ; } int node = _nodes . get ( cur ) ; int parent = cur / 2 - 1 >= 0 ? _nodes . get ( cur / 2 - 1 ) : null ; int left = cur * 2 - 1 < _nodes . size ( ) ? _nodes . get ( cur * 2 - 1 ) : null ; int right = cur * 2 < _nodes . size ( ) ? _nodes . get ( cur * 2 ) : null ; cur ++ ; return new Tuple < > ( node , parent , left , right ) ; } } ; } public static void run ( ) { Scanner scanner = new Scanner ( System . in ) ; int _ = scanner . nextInt ( ) ; List < Integer > nodes = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . map ( Integer :: parseInt ) . collect ( Collectors . toList ( ) ) ; Heap heap = Heap . create ( nodes ) ; int i = 0 ; for ( Tuple < Integer , Integer , Integer , Integer > node : heap ) { int n = node . getFirst ( ) ; Integer p = node . getSecond ( ) ; Integer nl = node . getThird ( ) ; Integer nr = node . getFourth ( ) ; String s = " node ▁ " + ( i + 1 ) + " : ▁ key ▁ = ▁ " + n + " , ▁ " ; if ( p != null ) { s += " parent ▁ key ▁ = ▁ " + p + " , ▁ " ; } if ( nl != null ) { s += " left ▁ key ▁ = ▁ " + nl + " , ▁ " ; } if ( nr != null ) { s += " right ▁ key ▁ = ▁ " + nr + " , ▁ " ; } System . out . println ( s ) ; i ++ ; } } public static void main ( String [ ] args ) { run ( ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int n = 6 ; int m = 6 ; int [ ] [ ] arr = { { 1 , 3 , 5 , 2 , 4 , 6 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 1 , 3 , 5 , 2 , 4 , 6 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 1 , 3 , 5 , 2 , 4 , 6 } } ; maxSum ( arr , n , m ) ; } public static void maxSum ( int [ ] [ ] arr , int n , int m ) { int [ ] [ ] dp = new int [ n + 1 ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { int m1 = 0 ; int m2 = 0 ; int m3 = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( j / ( m / 3 ) == 0 ) { m1 = Math . max ( m1 , arr [ i ] [ j ] ) ; } else if ( j / ( m / 3 ) == 1 ) { m2 = Math . max ( m2 , arr [ i ] [ j ] ) ; } else if ( j / ( m / 3 ) == 2 ) { m3 = Math . max ( m3 , arr [ i ] [ j ] ) ; } } dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 1 ] , dp [ i ] [ 2 ] ) + m1 ; dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 2 ] ) + m2 ; dp [ i + 1 ] [ 2 ] = Math . max ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) + m3 ; } System . out . println ( Math . max ( Math . max ( dp [ n ] [ 0 ] , dp [ n ] [ 1 ] ) , dp [ n ] [ 2 ] ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int x1 = 0 ; int y1 = 0 ; int x2 = 10 ; int y2 = 8 ; int x3 = 2 ; int y3 = 3 ; int x4 = 7 ; int y4 = 9 ; findPoints ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) ; } public static void findPoints ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int x4 , int y4 ) { int x5 = Math . max ( x1 , x3 ) ; int y5 = Math . max ( y1 , y3 ) ; int x6 = Math . min ( x2 , x4 ) ; int y6 = Math . min ( y2 , y4 ) ; if ( x5 > x6 || y5 > y6 ) { System . out . println ( " No ▁ intersection " ) ; return ; } System . out . print ( " ( " + x5 + " , ▁ " + y5 + " ) ▁ " ) ; System . out . print ( " ( " + x6 + " , ▁ " + y6 + " ) ▁ " ) ; int x7 = x5 ; int y7 = y6 ; System . out . print ( " ( " + x7 + " , ▁ " + y7 + " ) ▁ " ) ; int x8 = x6 ; int y8 = y5 ; System . out . print ( " ( " + x8 + " , ▁ " + y8 + " ) ▁ " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n_hamsters = Integer . parseInt ( input . nextLine ( ) ) ; String hamsters = input . nextLine ( ) ; int hamsters_standing = 0 ; for ( int i = 0 ; i < hamsters . length ( ) ; i ++ ) { if ( hamsters . charAt ( i ) == ' X ' ) { hamsters_standing ++ ; } } int hamsters_sitting = n_hamsters - hamsters_standing ; if ( hamsters_standing == hamsters_sitting ) { System . out . println ( 0 ) ; System . out . println ( hamsters ) ; } else if ( hamsters_standing > hamsters_sitting ) { int num_change = ( hamsters_standing - hamsters_sitting ) / 2 ; System . out . println ( num_change ) ; StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < hamsters . length ( ) ; i ++ ) { if ( hamsters . charAt ( i ) == ' X ' && num_change > 0 ) { result . append ( " x " ) ; num_change -- ; } else { result . append ( hamsters . charAt ( i ) ) ; } } System . out . println ( result ) ; } else { int num_change = ( hamsters_sitting - hamsters_standing ) / 2 ; System . out . println ( num_change ) ; StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < hamsters . length ( ) ; i ++ ) { if ( hamsters . charAt ( i ) == ' x ' && num_change > 0 ) { result . append ( " X " ) ; num_change -- ; } else { result . append ( hamsters . charAt ( i ) ) ; } } System . out . println ( result ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int d = input . nextInt ( ) ; int e = input . nextInt ( ) ; int dm = d ; int em = e * 5 ; int max = Math . max ( dm , em ) ; int min = Math . min ( dm , em ) ; int rem = n % max ; int div = ( n - rem ) / max ; int i = div ; int ans = rem ; while ( i > - 1 ) { int dum = 0 ; dum += n ; int rl = dum - ( i * max ) ; int fin = rl % min ; if ( fin < ans ) { if ( fin == 0 ) { ans = 0 ; i = - 1 ; } else { ans = fin ; } } i -- ; } System . out . println ( ans ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] val = { 14 , 27 , 44 , 19 } ; int [ ] wt = { 6 , 7 , 9 , 8 } ; int n = val . length ; int W = 50 ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } public static int knapSack ( int W , int [ ] wt , int [ ] val , int n ) { int maxratio = Integer . MIN_VALUE ; int maxindex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( val [ i ] / wt [ i ] ) > maxratio ) { maxratio = ( val [ i ] / wt [ i ] ) ; maxindex = i ; } } return ( W * maxratio ) ; } }
public class Main { static void AlternateRearrange ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; List < Integer > v1 = new ArrayList < > ( ) ; List < Integer > v2 = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { v1 . add ( arr [ i ] ) ; } else { v2 . add ( arr [ i ] ) ; } } int index = 0 ; int i = 0 ; int j = 0 ; boolean flag = false ; if ( arr [ 0 ] % 2 == 0 ) { flag = true ; } while ( index < n ) { if ( flag == true ) { arr [ index ] = v1 . get ( i ) ; index += 1 ; i += 1 ; flag = ! flag ; } else { arr [ index ] = v2 . get ( j ) ; index += 1 ; j += 1 ; flag = ! flag ; } } for ( int k = 0 ; k < n ; k ++ ) { System . out . print ( arr [ k ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 9 , 8 , 13 , 2 , 19 , 14 } ; int n = arr . length ; AlternateRearrange ( arr , n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int A = scanner . nextInt ( ) ; int B = scanner . nextInt ( ) ; int C = scanner . nextInt ( ) ; if ( A <= C && B >= C ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 106 , 7 , 8 } ; String pattern = "10" ; int n = arr . length ; findOccurrence ( arr , n , pattern ) ; } public static String decToBinary ( int n ) { int [ ] binaryNum = new int [ 32 ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n / 2 ; i ++ ; } StringBuilder binary = new StringBuilder ( ) ; for ( int j = i - 1 ; j >= 0 ; j -- ) { binary . append ( binaryNum [ j ] ) ; } return binary . toString ( ) ; } public static int countFreq ( String pat , String txt ) { int M = pat . length ( ) ; int N = txt . length ( ) ; int res = 0 ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j = 0 ; while ( j < M ) { if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) { break ; } j ++ ; } if ( j == M ) { res ++ ; j = 0 ; } } return res ; } public static void findOccurrence ( int [ ] arr , int n , String pattern ) { for ( int i = 0 ; i < n ; i ++ ) { String binary = decToBinary ( arr [ i ] ) ; System . out . print ( countFreq ( pattern , binary ) + " ▁ " ) ; } } }
public class Main { public static void makearrayequal ( int [ ] arr , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += arr [ i ] & 1 ; } System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearrayequal ( arr , n ) ; } }
import java . util . * ; public class Solution { public int findKthLargest ( int [ ] nums , int k ) { List < Integer > list = new ArrayList < > ( ) ; for ( int num : nums ) { list . add ( num ) ; } Collections . shuffle ( list ) ; return quickSelection ( list , 0 , list . size ( ) - 1 , list . size ( ) - k ) ; } private int quickSelection ( List < Integer > nums , int start , int end , int k ) { if ( start > end ) { return Integer . MAX_VALUE ; } int pivot = nums . get ( end ) ; int left = start ; for ( int i = start ; i < end ; i ++ ) { if ( nums . get ( i ) <= pivot ) { Collections . swap ( nums , left , i ) ; left ++ ; } } Collections . swap ( nums , left , end ) ; if ( left == k ) { return nums . get ( left ) ; } else if ( left < k ) { return quickSelection ( nums , left + 1 , end , k ) ; } else { return quickSelection ( nums , start , left - 1 , k ) ; } } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 3 , 2 , 1 , 5 , 6 , 4 } ; int k = 2 ; int out = sObj . findKthLargest ( nums , k ) ; System . out . println ( out ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 9876543 ; System . out . println ( isDivisible ( n ) ) ; } public static String isDivisible ( int n ) { int temp = n ; while ( n != 0 ) { int k = n % 10 ; if ( temp % k == 0 ) { return " YES " ; } n /= 10 ; } return " NO " ; } }
public class Main { public static void main ( String [ ] args ) { int n = 123 ; System . out . println ( isDivisible ( n ) ) ; } public static String isDivisible ( int n ) { int temp = n ; int sum = 0 ; while ( n != 0 ) { int k = n % 10 ; sum += k ; n /= 10 ; } if ( temp % sum == 0 ) { return " YES " ; } return " NO " ; } }
Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a > b ) { System . out . println ( " GREATER " ) ; } else if ( a < b ) { System . out . println ( " LESS " ) ; } else { System . out . println ( " EQUAL " ) ; }
public class Main { public static void main ( String [ ] args ) { int l = 4 ; int b = 3 ; System . out . println ( calculateAreaSum ( l , b ) ) ; } public static int calculateAreaSum ( int l , int b ) { int size = 1 ; int maxSize = Math . min ( l , b ) ; int totalArea = 0 ; for ( int i = 1 ; i <= maxSize ; i ++ ) { int totalSquares = ( ( l - size + 1 ) * ( b - size + 1 ) ) ; int area = ( totalSquares * size * size ) ; totalArea += area ; size ++ ; } return totalArea ; } }
public class Main { public static void arrange ( int N ) { if ( N == 1 ) { System . out . println ( "1" ) ; return ; } if ( N == 2 || N == 3 ) { System . out . println ( " - 1" ) ; return ; } int even = - 1 ; int odd = - 1 ; if ( N % 2 == 0 ) { even = N ; odd = N - 1 ; } else { odd = N ; even = N - 1 ; } while ( odd >= 1 ) { System . out . print ( odd + " ▁ " ) ; odd = odd - 2 ; } while ( even >= 2 ) { System . out . print ( even + " ▁ " ) ; even = even - 2 ; } } public static void main ( String [ ] args ) { int N = 5 ; arrange ( N ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 3 , 2 , 1 , 5 , 7 , 8 } ; int N = a . length ; System . out . println ( findMinEqualSums ( a , N ) ) ; } public static int findMinEqualSums ( int [ ] a , int N ) { int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum = sum + a [ i ] ; } int sum1 = 0 ; int sum2 = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum1 += a [ i ] ; sum2 = sum - sum1 ; if ( Math . abs ( sum1 - sum2 ) < min ) { min = Math . abs ( sum1 - sum2 ) ; } if ( min == 0 ) { break ; } } return min ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; if ( n == 1 || n == 2 ) { System . out . println ( n ) ; } else { String u = " " ; int v = n / 3 ; int w = n % 3 ; for ( int j = 0 ; j < v ; j ++ ) { u += "21" ; } if ( w == 1 ) { u = "1" + u ; } else if ( w == 2 ) { u += "2" ; } System . out . println ( u ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 1 , 4 , 2 , 3 , 9 } ; int N = a . length ; System . out . println ( findOptimalSolution ( a , N ) ) ; } public static int findOptimalSolution ( int [ ] a , int N ) { Arrays . sort ( a ) ; int points = 0 ; for ( int i = 0 ; i < N ; i ++ ) { points += a [ i ] * i ; } return points ; } }
import java . util . Scanner ; import java . util . Queue ; import java . util . LinkedList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int time = 0 ; Queue < Integer > queue = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int t = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; while ( ! queue . isEmpty ( ) && t >= queue . peek ( ) ) { queue . poll ( ) ; } if ( queue . size ( ) <= b ) { time = Math . max ( t , time ) + d ; queue . add ( time ) ; System . out . print ( time + " ▁ " ) ; } else { System . out . print ( - 1 + " ▁ " ) ; } } } }
``` java import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < n ; j ++ ) { String [ ] nm = scanner . nextLine ( ) . split ( " ▁ " ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] inp = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { inp [ i ] = Integer . parseInt ( input [ i ] ) ; } for ( int i = 0 ; i < Integer . parseInt ( nm [ 0 ] ) ; i ++ ) { int first = inp [ 0 ] ; for ( int k = 0 ; k < inp . length - 1 ; k ++ ) { inp [ k ] = inp [ k + 1 ] ; } inp [ inp . length - 1 ] = first ; } Arrays . sort ( inp ) ; int sum1 = 0 ; for ( int i = 0 ; i < Integer . parseInt ( nm [ 0 ] ) ; i ++ ) { sum1 += Math . max ( inp [ i - 1 ] , inp [ i ] ) ; } if ( sum1 + Integer . parseInt ( nm [ 0 ] ) <= Integer . parseInt ( nm [ 1 ] ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 2 , 4 , 3 , 1 } ; System . out . println ( getPairs ( a ) ) ; } public static int getPairs ( int [ ] a ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < a . length ; j ++ ) { if ( a [ i ] < a [ j ] ) { count ++ ; } } } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int k = Integer . parseInt ( input [ 1 ] ) ; String s = scanner . nextLine ( ) ; if ( k == 0 ) { System . out . println ( s ) ; } else if ( Integer . parseInt ( s ) <= 9 ) { System . out . println ( 0 ) ; } else { int c = 0 ; int condition = 0 ; String ans = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i == 0 && condition == 0 ) { ans += "1" ; if ( s . charAt ( i ) == '1' ) { c += 0 ; } else { c += 1 ; } } else if ( condition == 0 ) { ans += "0" ; if ( s . charAt ( i ) == '0' ) { c += 0 ; } else { c += 1 ; } } if ( c == k ) { condition = 1 ; for ( int j = i + 1 ; j < s . length ( ) ; j ++ ) { ans += s . charAt ( j ) ; if ( j == s . length ( ) - 1 ) { c = - 1 ; break ; } } } } System . out . println ( ans ) ; } } }
ArrayList < ArrayList < Integer > > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { String [ ] data = new Scanner ( System . in ) . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > temp = new ArrayList < > ( ) ; for ( String s : data ) { temp . add ( Integer . parseInt ( s ) ) ; } a . add ( temp ) ; } public static void func ( ArrayList < ArrayList < Integer > > a ) { int band = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . get ( i ) . get ( 3 ) == 1 ) { if ( a . get ( ( i + 2 ) % 4 ) . get ( 1 ) != 0 ) { band = 1 ; } if ( a . get ( ( i + 1 ) % 4 ) . get ( 0 ) != 0 || a . get ( ( i + 3 ) % 4 ) . get ( 2 ) != 0 ) { band = 1 ; } if ( a . get ( i ) . get ( 0 ) != 0 || a . get ( i ) . get ( 1 ) != 0 || a . get ( i ) . get ( 2 ) != 0 ) { band = 1 ; } } } if ( band != 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } func ( a ) ;
public class Main { static int N = 10000 ; static int MOD = 1000000007 ; static int [ ] F = new int [ N ] ; public static void precompute ( ) { F [ 1 ] = 2 ; F [ 2 ] = 3 ; F [ 3 ] = 4 ; for ( int i = 4 ; i < N ; i ++ ) { F [ i ] = ( F [ i - 1 ] + F [ i - 2 ] ) % MOD ; } } public static void main ( String [ ] args ) { int n = 8 ; precompute ( ) ; System . out . println ( F [ n ] ) ; } }
while ( true ) { int n = Integer . parseInt ( new Scanner ( System . in ) . nextLine ( ) ) ; if ( n == 0 ) { break ; } int num = 2 ; int cnt = 0 ; while ( true ) { int ini = num * ( num + 1 ) / 2 ; if ( n < ini ) { break ; } while ( ini <= n ) { if ( ini == n ) { cnt += 1 ; break ; } ini += num ; } num += 1 ; } System . out . println ( cnt ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { 2 , 5 , 3 , 7 , 11 , 8 , 10 , 13 , 6 } ; int n = A . length ; System . out . println ( " Length ▁ of ▁ Longest ▁ Increasing ▁ Subsequence ▁ is ▁ " + LongestIncreasingSubsequenceLength ( A , n ) ) ; } public static int CeilIndex ( int [ ] A , int l , int r , int key ) { while ( r - l > 1 ) { int m = l + ( r - l ) / 2 ; if ( A [ m ] >= key ) { r = m ; } else { l = m ; } } return r ; } public static int LongestIncreasingSubsequenceLength ( int [ ] A , int size ) { int [ ] tailTable = new int [ size + 1 ] ; int len = 0 ; tailTable [ 0 ] = A [ 0 ] ; len = 1 ; for ( int i = 1 ; i < size ; i ++ ) { if ( A [ i ] < tailTable [ 0 ] ) { tailTable [ 0 ] = A [ i ] ; } else if ( A [ i ] > tailTable [ len - 1 ] ) { tailTable [ len ] = A [ i ] ; len ++ ; } else { tailTable [ CeilIndex ( tailTable , - 1 , len - 1 , A [ i ] ) ] = A [ i ] ; } } return len ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > X = new ArrayList < > ( ) ; for ( String s : input ) { X . add ( Integer . parseInt ( s ) ) ; } int Xmn = Collections . min ( X ) ; int Xmx = Collections . max ( X ) ; ArrayList < Integer > temp = new ArrayList < > ( ) ; int res = Xmx - Xmn ; for ( int x = Xmn ; x <= Xmx ; x ++ ) { for ( int n = 0 ; n < N ; n ++ ) { temp . add ( Math . abs ( X . get ( n ) - x ) ) ; } if ( Collections . max ( temp ) < res ) { res = Collections . max ( temp ) ; } temp . clear ( ) ; } System . out . println ( res ) ; } }
import java . util . HashSet ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int LIMIT = ( int ) Math . pow ( 10 , 6 ) ; int ans = 0 ; for ( int i = 0 ; i < LIMIT ; i ++ ) { if ( getChainLength ( i ) == 60 ) { ans ++ ; } } return Integer . toString ( ans ) ; } public static int getChainLength ( int n ) { HashSet < Integer > seen = new HashSet < > ( ) ; while ( true ) { seen . add ( n ) ; n = factorialize ( n ) ; if ( seen . contains ( n ) ) { return seen . size ( ) ; } } } public static int factorialize ( int n ) { int result = 0 ; while ( n != 0 ) { result += FACTORIAL [ n % 10 ] ; n /= 10 ; } return result ; } static int [ ] FACTORIAL = new int [ 10 ] ; static { for ( int i = 0 ; i < 10 ; i ++ ) { FACTORIAL [ i ] = factorial ( i ) ; } } public static int factorial ( int n ) { if ( n == 0 ) { return 1 ; } int result = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { result *= i ; } return result ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] height = { 3 , 5 , 1 , 2 , 3 } ; int [ ] colour = { 1 , 2 , 3 , 4 , 3 } ; int K = colour . length ; System . out . println ( colourVisible ( height , colour , K ) ) ; } public static int colourVisible ( int [ ] height , int [ ] colour , int K ) { int [ ] arr = new int [ K + 1 ] ; int visible = 0 ; int max = height [ K - 1 ] ; arr [ colour [ K - 1 ] ] = 1 ; int i = K - 2 ; while ( i >= 0 ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ colour [ i ] ] = 1 ; } i -- ; } for ( int j = 1 ; j <= K ; j ++ ) { if ( arr [ j ] == 1 ) { visible ++ ; } } return visible ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 65 ; if ( checkPowerof8 ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean checkPowerof8 ( int n ) { double i = Math . log ( n ) / Math . log ( 8 ) ; return ( i - ( int ) i < 0.000001 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; if ( a == b ) { System . out . println ( ( a + b ) / 4 ) ; } else { System . out . println ( Math . min ( Math . min ( a , b ) , ( a + b ) / 4 ) ) ; } } } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; if ( n == 0 && m == 0 ) { break ; } int [ ] students = new int [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { int [ ] scores = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { scores [ j ] = scanner . nextInt ( ) ; students [ j ] += scores [ j ] ; } } int max = students [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( students [ i ] > max ) { max = students [ i ] ; } } System . out . println ( max ) ; } } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int iterations = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < iterations ; j ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int now = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int l = Integer . parseInt ( input [ 0 ] ) ; int r = Integer . parseInt ( input [ 1 ] ) ; if ( now <= l ) { System . out . print ( l + " ▁ " ) ; now = l + 1 ; } else if ( now <= r ) { System . out . print ( now + " ▁ " ) ; now ++ ; } else { System . out . print ( 0 + " ▁ " ) ; } } System . out . println ( ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 7 ; int m = 4 ; System . out . println ( " Number ▁ of ▁ ways ▁ = ▁ " + countWays ( n , m ) ) ; } public static int countWays ( int n , int m ) { int [ ] count = new int [ n + 2 ] ; for ( int i = 0 ; i < n + 2 ; i ++ ) { count [ i ] = 0 ; } count [ 0 ] = 0 ; for ( int i = 1 ; i < n + 1 ; i ++ ) { if ( i > m ) { count [ i ] = count [ i - 1 ] + count [ i - m ] ; } else if ( i < m ) { count [ i ] = 1 ; } else { count [ i ] = 2 ; } } return count [ n ] ; } }
public class Main { public static void bomb_required ( int n ) { System . out . println ( n + n / 2 ) ; for ( int i = 2 ; i <= n ; i += 2 ) { System . out . print ( i + " ▁ " ) ; } for ( int i = 1 ; i <= n ; i += 2 ) { System . out . print ( i + " ▁ " ) ; } for ( int i = 2 ; i < n ; i += 2 ) { System . out . print ( i + " ▁ " ) ; } } public static void main ( String [ ] args ) { bomb_required ( 3 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; System . out . println ( ( n + 1 ) & - ( n + 1 ) ) ; } }
Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; String my_str = " " ; for ( char c : s . toCharArray ( ) ) { if ( c == '0' || c == '1' ) { my_str += c ; } else if ( c == ' B ' && my_str . length ( ) != 0 ) { my_str = my_str . substring ( 0 , my_str . length ( ) - 1 ) ; } } System . out . println ( my_str ) ;
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int x = Integer . parseInt ( input [ 1 ] ) ; if ( n == 0 && x == 0 ) { break ; } int ret = 0 ; ArrayList < Integer > list = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { list . add ( i ) ; } for ( int i = 0 ; i < list . size ( ) - 2 ; i ++ ) { for ( int j = i + 1 ; j < list . size ( ) - 1 ; j ++ ) { for ( int k = j + 1 ; k < list . size ( ) ; k ++ ) { if ( list . get ( i ) + list . get ( j ) + list . get ( k ) == x ) { ret ++ ; } } } } System . out . println ( ret ) ; } } }
import java . util . * ; public class Main { static int MAX = 100 ; public static void main ( String [ ] args ) { int [ ] a = { 4 , 5 , 3 , 7 , 8 , 10 , 9 , 8 } ; int n = a . length ; int k = 4 ; int [ ] [ ] dp = new int [ n ] [ MAX ] ; for ( int [ ] row : dp ) { Arrays . fill ( row , - 1 ) ; } System . out . println ( recur ( 0 , 0 , 0 , a , n , k , dp ) ) ; } static int recur ( int ind , int cnt , int last , int [ ] a , int n , int k , int [ ] [ ] dp ) { if ( cnt == k ) { return 0 ; } if ( ind == n ) { return - ( int ) Math . pow ( 10 , 9 ) ; } if ( dp [ ind ] [ cnt ] != - 1 ) { return dp [ ind ] [ cnt ] ; } int ans = 0 ; for ( int i = ind ; i < n ; i ++ ) { if ( cnt % 2 == 0 ) { ans = Math . max ( ans , recur ( i + 1 , cnt + 1 , i , a , n , k , dp ) ) ; } else { ans = Math . max ( ans , gcd ( a [ last ] , a [ i ] ) + recur ( i + 1 , cnt + 1 , 0 , a , n , k , dp ) ) ; } } dp [ ind ] [ cnt ] = ans ; return ans ; } static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; String [ ] arrStr = input . nextLine ( ) . split ( " ▁ " ) ; double [ ] arr = new double [ arrStr . length ] ; for ( int i = 0 ; i < arrStr . length ; i ++ ) { arr [ i ] = Double . parseDouble ( arrStr [ i ] ) ; } Arrays . sort ( arr ) ; double [ ] newArr = new double [ arr . length ] ; int index = 0 ; for ( double x : arr ) { if ( x - ( int ) x != 0 ) { newArr [ index ] = x - ( int ) x ; index ++ ; } } double [ ] finalArr = Arrays . copyOf ( newArr , index ) ; int o = 2 * n - finalArr . length ; double arrSum = 0 ; for ( double x : finalArr ) { arrSum += x ; } int res = Integer . MAX_VALUE ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i + o >= n ) { res = Math . min ( res , Math . abs ( i - arrSum ) ) ; } } System . out . printf ( " % .3f " , ( double ) res ) ; } }
public class Main { public static int equivalentBase4 ( String bin ) { if ( bin . equals ( "00" ) ) { return 0 ; } if ( bin . equals ( "01" ) ) { return 1 ; } if ( bin . equals ( "10" ) ) { return 2 ; } if ( bin . equals ( "11" ) ) { return 3 ; } return - 1 ; } public static String isDivisibleBy5 ( String bin ) { int l = bin . length ( ) ; if ( l % 2 == 1 ) { bin = "0" + bin ; } int odd_sum = 0 ; int even_sum = 0 ; int isOddDigit = 1 ; for ( int i = 0 ; i < bin . length ( ) ; i += 2 ) { if ( isOddDigit == 1 ) { odd_sum += equivalentBase4 ( bin . substring ( i , i + 2 ) ) ; } else { even_sum += equivalentBase4 ( bin . substring ( i , i + 2 ) ) ; } isOddDigit = isOddDigit ^ 1 ; } if ( Math . abs ( odd_sum - even_sum ) % 5 == 0 ) { return " Yes " ; } else { return " No " ; } } public static void main ( String [ ] args ) { String bin = "10000101001" ; System . out . println ( isDivisibleBy5 ( bin ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Map < List < Integer > , Integer > score = new HashMap < > ( ) ; List < Integer > puzzle = new ArrayList < > ( Arrays . asList ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ) ) ; score . put ( puzzle , 0 ) ; Deque < List < Integer > > queue = new ArrayDeque < > ( ) ; queue . add ( puzzle ) ; int [ ] [ ] move = { { 1 , 4 } , { 0 , 2 , 5 } , { 1 , 3 , 6 } , { 2 , 7 } , { 0 , 5 } , { 1 , 4 , 6 } , { 2 , 5 , 7 } , { 3 , 6 } } ; while ( ! queue . isEmpty ( ) ) { List < Integer > puz = queue . poll ( ) ; int pos = puz . indexOf ( 0 ) ; for ( int npos : move [ pos ] ) { List < Integer > npuz = new ArrayList < > ( puz ) ; Collections . swap ( npuz , pos , npos ) ; if ( ! score . containsKey ( npuz ) ) { queue . add ( npuz ) ; score . put ( npuz , score . get ( puz ) + 1 ) ; } } } Scanner scanner = new Scanner ( System . in ) ; while ( scanner . hasNextLine ( ) ) { puzzle = new ArrayList < > ( Arrays . asList ( scanner . nextLine ( ) . split ( " ▁ " ) ) ) ; System . out . println ( score . get ( puzzle ) ) ; } } }
import java . util . * ; import java . util . stream . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] inputNums = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] nums = Arrays . stream ( inputNums ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; String [ ] o = scanner . nextLine ( ) . split ( " ▁ " ) ; List < String > permutations = new ArrayList < > ( ) ; permute ( nums , 0 , permutations ) ; int minResult = Integer . MAX_VALUE ; for ( String perm : permutations ) { String [ ] permNums = perm . split ( " ▁ " ) ; int a = Integer . parseInt ( permNums [ 0 ] ) ; int b = Integer . parseInt ( permNums [ 1 ] ) ; int c = Integer . parseInt ( permNums [ 2 ] ) ; int d = Integer . parseInt ( permNums [ 3 ] ) ; int result1 = Math . min ( ( a + b ) * c + d , a + ( b * c ) + d ) ; int result2 = Math . min ( ( a * b ) + c * d , a * ( b + c * d ) ) ; minResult = Math . min ( minResult , Math . min ( result1 , result2 ) ) ; } System . out . println ( minResult ) ; } public static void permute ( int [ ] nums , int start , List < String > result ) { if ( start == nums . length ) { result . add ( Arrays . stream ( nums ) . mapToObj ( String :: valueOf ) . collect ( Collectors . joining ( " ▁ " ) ) ) ; } else { for ( int i = start ; i < nums . length ; i ++ ) { swap ( nums , i , start ) ; permute ( nums , start + 1 , result ) ; swap ( nums , i , start ) ; } } } public static void swap ( int [ ] nums , int i , int j ) { int temp = nums [ i ] ; nums [ i ] = nums [ j ] ; nums [ j ] = temp ; } }
import java . util . * ; public class Main { static final int MAX = 1005 ; public static void main ( String [ ] args ) { int N = 24 ; System . out . println ( " Minimum ▁ Number ▁ of ▁ Square ▁ Free ▁ Divisors ▁ is ▁ " + minimumSquareFreeDivisors ( N ) ) ; N = 6 ; System . out . println ( " Minimum ▁ Number ▁ of ▁ Square ▁ Free ▁ Divisors ▁ is ▁ " + minimumSquareFreeDivisors ( N ) ) ; } public static List < Integer > SieveOfEratosthenes ( List < Integer > primes ) { boolean [ ] prime = new boolean [ MAX ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p <= Math . sqrt ( MAX ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < MAX ; i += p ) { prime [ i ] = false ; } } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) { primes . add ( p ) ; } } return primes ; } public static int minimumSquareFreeDivisors ( int N ) { List < Integer > prime = new ArrayList < > ( ) ; List < Integer > primes = new ArrayList < > ( ) ; primes = SieveOfEratosthenes ( prime ) ; int max_count = 0 ; int i = 0 ; while ( primes . size ( ) > 0 && primes . get ( i ) * primes . get ( i ) <= N ) { if ( N % primes . get ( i ) == 0 ) { int tmp = 0 ; while ( N % primes . get ( i ) == 0 ) { tmp += 1 ; N /= primes . get ( i ) ; } max_count = Math . max ( max_count , tmp ) ; } i += 1 ; } if ( max_count == 0 ) { max_count = 1 ; } return max_count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws InterruptedException { Scanner scanner = new Scanner ( System . in ) ; int x = scanner . nextInt ( ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int ans = ( x - a ) % b ; Thread . sleep ( a * 1000 ) ; System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] nk = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nk [ 0 ] ) ; int k = Integer . parseInt ( nk [ 1 ] ) ; String [ ] elemsStr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] elems = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { elems [ i ] = Integer . parseInt ( elemsStr [ i ] ) ; } if ( allSame ( elems ) ) { System . out . println ( 0 ) ; return ; } if ( k == 1 ) { System . out . println ( - 1 ) ; return ; } if ( ! allSame ( Arrays . copyOfRange ( elems , k - 1 , elems . length ) ) ) { System . out . println ( - 1 ) ; return ; } int target = elems [ elems . length - 1 ] ; List < Integer > toDelete = new ArrayList < > ( ) ; for ( int i = 0 ; i < k - 1 ; i ++ ) { toDelete . add ( elems [ i ] ) ; } while ( ! toDelete . isEmpty ( ) && toDelete . get ( toDelete . size ( ) - 1 ) == target ) { toDelete . remove ( toDelete . size ( ) - 1 ) ; } System . out . println ( toDelete . size ( ) ) ; } public static boolean allSame ( int [ ] arr ) { for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] != arr [ 0 ] ) { return false ; } } return true ; } }
public class Main { public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( " The ▁ number ▁ after ▁ unsetting ▁ the ▁ rightmost ▁ set ▁ bit : ▁ " + fun ( n ) ) ; } public static int fun ( int n ) { return n & ( n - 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = A . length ; System . out . println ( LongestFibSubseq ( A , n ) ) ; } public static int LongestFibSubseq ( int [ ] A , int n ) { Set < Integer > S = new HashSet < > ( ) ; for ( int num : A ) { S . add ( num ) ; } int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = A [ j ] ; int y = A [ i ] + A [ j ] ; int length = 2 ; while ( S . contains ( y ) ) { int z = x + y ; x = y ; y = z ; length ++ ; maxLen = Math . max ( maxLen , length ) ; } } } return maxLen >= 3 ? maxLen : 0 ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 12 , 2 , 7 } ; int n = a . length ; int [ ] b = { 4 , 3 , 8 } ; int m = b . length ; System . out . println ( countPairs ( a , b , n , m ) ) ; } public static int countPairs ( int [ ] a , int [ ] b , int n , int m ) { int cnt = 0 ; Map < Integer , Integer > s = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { int sum = a [ i ] + b [ j ] ; if ( ! s . containsKey ( sum ) ) { cnt ++ ; s . put ( sum , 1 ) ; } } } return cnt ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 2 , 3 , 4 , 9 , 10 } ; int x = 13 ; if ( check ( a , x ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean check ( int [ ] a , int y ) { int sum = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { double sqrt = Math . sqrt ( a [ i ] ) ; if ( Math . floor ( sqrt ) == Math . ceil ( sqrt ) ) { sum += a [ i ] ; } } if ( sum % y == 0 ) { return true ; } else { return false ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int q = scanner . nextInt ( ) ; List < PriorityQueue < Integer > > Q = new ArrayList < > ( ) ; List < List < Integer > > queries = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { Q . add ( new PriorityQueue < > ( Collections . reverseOrder ( ) ) ) ; } for ( int i = 0 ; i < q ; i ++ ) { List < Integer > query = new ArrayList < > ( ) ; for ( int j = 0 ; j < 3 ; j ++ ) { query . add ( scanner . nextInt ( ) ) ; } queries . add ( query ) ; } for ( List < Integer > query : queries ) { if ( query . get ( 0 ) == 0 ) { Q . get ( query . get ( 1 ) ) . add ( - query . get ( 2 ) ) ; } else if ( query . get ( 0 ) == 1 ) { if ( ! Q . get ( query . get ( 1 ) ) . isEmpty ( ) ) { System . out . println ( - Q . get ( query . get ( 1 ) ) . peek ( ) ) ; } } else if ( query . get ( 0 ) == 2 ) { if ( ! Q . get ( query . get ( 1 ) ) . isEmpty ( ) ) { Q . get ( query . get ( 1 ) ) . poll ( ) ; } } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 10 , - 10 , 20 , - 40 } ; int n = a . length ; System . out . println ( " The ▁ minimum ▁ sum ▁ of ▁ pairs ▁ is ▁ " + calculateMinSum ( a , n ) ) ; System . out . println ( " The ▁ maximum ▁ sum ▁ of ▁ pairs ▁ is ▁ " + calculateMaxSum ( a , n ) ) ; } public static int calculateMinSum ( int [ ] a , int n ) { Arrays . sort ( a ) ; int minSum = 0 ; for ( int i = 1 ; i < n ; i += 2 ) { minSum += Math . abs ( a [ i ] - a [ i - 1 ] ) ; } return minSum ; } public static int calculateMaxSum ( int [ ] a , int n ) { Arrays . sort ( a ) ; int maxSum = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { maxSum += Math . abs ( a [ n - 1 - i ] - a [ i ] ) ; } return maxSum ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] A = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { A [ i ] = input . nextInt ( ) ; } int m = input . nextInt ( ) ; int [ ] B = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { B [ i ] = input . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < Math . min ( A . length , B . length ) ; i ++ ) { if ( A [ i ] < B [ i ] ) { ans = 1 ; break ; } else if ( A [ i ] > B [ i ] ) { break ; } } if ( A . length < B . length ) { ans = 1 ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } int odd = 0 ; int m2 = 0 ; int m4 = 0 ; for ( int n : a ) { if ( n % 2 == 1 ) { odd += 1 ; } else if ( n % 4 != 0 ) { m2 += 1 ; } else { m4 += 1 ; } } if ( m4 >= odd || ( m2 == 0 && m4 >= odd - 1 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class Main { public static void main ( String [ ] args ) { String s = " nolon " ; System . out . println ( solve ( s ) ) ; } public static boolean isPalindrome ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) { return false ; } } return true ; } public static boolean ans ( String s ) { String s2 = s ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 = s2 . charAt ( s2 . length ( ) - 1 ) + s2 ; s2 = s2 . substring ( 0 , s2 . length ( ) - 1 ) ; if ( ! s . equals ( s2 ) && isPalindrome ( s2 ) ) { return true ; } } return false ; } public static int solve ( String s ) { if ( s . length ( ) <= 3 ) { return - 1 ; } int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ s . charAt ( i ) - ' a ' ] ++ ; } int max = cnt [ 0 ] ; for ( int i = 0 ; i < cnt . length ; i ++ ) { if ( cnt [ i ] > max ) { max = cnt [ i ] ; } } if ( max >= s . length ( ) - 1 ) { return - 1 ; } else { if ( ans ( s ) ) { return 1 ; } else { return 2 ; } } } }
public class Main { public static void main ( String [ ] args ) { int k = 10 ; int n = 3 ; System . out . println ( countNumbers ( k , n ) ) ; } public static int countNumbers ( int k , int n ) { int [ ] [ ] dp = new int [ n + 1 ] [ 2 ] ; dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = k - 1 ; for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] ) * ( k - 1 ) ; } return dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 4 , 5 } ; int n = arr . length ; int cost = 1 ; System . out . println ( minCost ( n , arr , cost ) ) ; } public static int minCost ( int n , int [ ] arr , int cost ) { int sum = 0 , totalCost = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } totalCost += cost * sum ; arr [ n - 1 ] += sum ; totalCost += ( 2 * cost * arr [ n - 1 ] ) ; return totalCost ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int Q = scanner . nextInt ( ) ; for ( int i = 0 ; i < Q ; i ++ ) { int c = scanner . nextInt ( ) ; int a = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; int ans = solve ( c , a , n ) ; System . out . println ( ans ) ; } } public static int solve ( int c , int a , int n ) { int CCA = 0 , CCC = 0 , CAN = 0 ; CAN = Math . min ( Math . min ( c , a ) , n ) ; c -= CAN ; a -= CAN ; if ( a > 0 && c > 0 ) { CCA = Math . min ( a , c / 2 ) ; c -= ( CCA * 2 ) ; } if ( c > 2 ) { CCC = c / 3 ; } return CAN + CCA + CCC ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; if ( n == 0 ) break ; int m = Integer . parseInt ( scanner . nextLine ( ) ) ; String s = scanner . nextLine ( ) ; int [ ] ar = new int [ m ] ; int ans = 0 ; if ( m >= 3 ) { for ( int i = 2 ; i < m ; i ++ ) { if ( s . substring ( i - 2 , i + 1 ) . equals ( " IOI " ) ) { ar [ i ] = ar [ i - 2 ] + 1 ; if ( ar [ i ] >= n ) ans ++ ; } } } System . out . println ( ans ) ; } } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < t ; k ++ ) { String n = scanner . nextLine ( ) ; int length = n . length ( ) ; int minval = 10000 ; for ( int i = 0 ; i < length - 1 ; i ++ ) { String n1 = String . valueOf ( n . charAt ( i ) ) ; for ( int j = i + 1 ; j < length ; j ++ ) { String n2 = String . valueOf ( n . charAt ( j ) ) ; if ( Integer . parseInt ( n1 + n2 ) % 25 == 0 ) { int val = length - i - 2 ; if ( val < minval ) { minval = val ; } } } } System . out . println ( minval ) ; } } }
public class NewNode { int data ; NewNode left ; NewNode right ; public NewNode ( int data ) { this . data = data ; this . left = null ; this . right = null ; } } public class Main { public static NewNode insert ( NewNode root , int data ) { if ( root == null ) { return new NewNode ( data ) ; } else { if ( data < root . data ) { root . left = insert ( root . left , data ) ; } if ( data > root . data ) { root . right = insert ( root . right , data ) ; } return root ; } } public static void inOrder ( NewNode root ) { if ( root == null ) { return ; } else { inOrder ( root . left ) ; System . out . print ( root . data + " ▁ " ) ; inOrder ( root . right ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 2 , 5 , 4 , 4 } ; int n = arr . length ; NewNode root = null ; for ( int i = 0 ; i < n ; i ++ ) { root = insert ( root , arr [ i ] ) ; } inOrder ( root ) ; } }
public class Main { static final int MAX_CHAR = 26 ; public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int k = 2 ; System . out . println ( removeChars ( str , k ) ) ; } public static String removeChars ( String str , int k ) { int [ ] hash = new int [ MAX_CHAR ] ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } StringBuilder res = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] >= k ) { res . append ( str . charAt ( i ) ) ; } } return res . toString ( ) ; } }
public class Main { public static void main ( String [ ] args ) { String X = " OldSite : GeeksforGeeks . org " ; String Y = " NewSite : GeeksQuiz . com " ; int m = X . length ( ) ; int n = Y . length ( ) ; System . out . println ( " Length ▁ of ▁ Longest ▁ Common ▁ Substring ▁ is ▁ " + LCSubStr ( X , Y , m , n ) ) ; } public static int LCSubStr ( String X , String Y , int m , int n ) { int [ ] [ ] LCSuff = new int [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) { LCSuff [ i ] [ j ] = 0 ; } else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) { LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ; result = Math . max ( result , LCSuff [ i ] [ j ] ) ; } else { LCSuff [ i ] [ j ] = 0 ; } } } return result ; } }
public class Main { public static void main ( String [ ] args ) { int x = 1223355 ; System . out . println ( " Max ▁ occurring ▁ digit ▁ is ▁ " + maxOccurring ( x ) ) ; } public static int countOccurrences ( int x , int d ) { int count = 0 ; while ( x != 0 ) { if ( x % 10 == d ) { count ++ ; } x = x / 10 ; } return count ; } public static int maxOccurring ( int x ) { if ( x < 0 ) { x = - x ; } int result = 0 ; int maxCount = 1 ; for ( int d = 0 ; d < 10 ; d ++ ) { int count = countOccurrences ( x , d ) ; if ( count >= maxCount ) { maxCount = count ; result = d ; } } return result ; } }
public class Main { public static void printLogestIncSubArr ( int [ ] arr , int n ) { int m = 1 ; int l = 1 ; int maxIndex = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) { l = l + 1 ; } else { if ( m < l ) { m = l ; maxIndex = i - m ; } l = 1 ; } } if ( m < l ) { m = l ; maxIndex = n - m ; } for ( int i = maxIndex ; i < ( m + maxIndex ) ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 6 , 3 , 5 , 7 , 8 , 9 , 1 , 2 } ; int n = arr . length ; printLogestIncSubArr ( arr , n ) ; } }
Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; for ( int i = a ; i > 0 ; i -- ) { if ( a % i == 0 ) { System . out . print ( i + " ▁ " ) ; a = i ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = input . nextInt ( ) ; } for ( int j = 0 ; j < m ; j ++ ) { int l = input . nextInt ( ) ; int r = input . nextInt ( ) ; int x = input . nextInt ( ) ; int d = 0 ; for ( int i = l - 1 ; i < r ; i ++ ) { if ( w [ x - 1 ] > w [ i ] ) { d ++ ; } } if ( d == x - l ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { - 6 , 10 , - 3 , 10 , - 2 } ; int n = a . length ; System . out . println ( " Maximum ▁ sum ▁ is : ▁ " + Max_Sum ( a , n ) ) ; } public static int Max_Sum ( int [ ] a , int n ) { int [ ] b = new int [ n ] ; int S = 0 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = res ; res += a [ i ] ; S += a [ i ] ; res = Math . max ( res , - S ) ; } int ans = S ; ans = Math . max ( ans , res ) ; int g = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { g -= a [ i ] ; ans = Math . max ( ans , g + b [ i ] ) ; } return ans ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < n ; k ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int x = Integer . parseInt ( input [ 0 ] ) ; int y = Integer . parseInt ( input [ 1 ] ) ; int i = 0 ; int j = 0 ; boolean turn = false ; int commands = 0 ; while ( true ) { if ( i == x && j == y ) { break ; } if ( turn ) { if ( i == x ) { } else if ( i < x ) { i ++ ; } else { i -- ; } commands ++ ; } else { if ( j == y ) { } else if ( j < y ) { j ++ ; } else { j -- ; } commands ++ ; } turn = ! turn ; } System . out . println ( x == y ? commands : commands - 1 ) ; } } }
public class Main { public static void reverse ( String str1 , int x ) { int n = ( str1 . length ( ) - x ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( str1 . charAt ( i ) ) ; } for ( int i = n + x - 1 ; i >= n ; i -- ) { System . out . print ( str1 . charAt ( i ) ) ; } for ( int i = n + x ; i < str1 . length ( ) ; i ++ ) { System . out . print ( str1 . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str1 = " geeksforgeeks " ; int x = 3 ; reverse ( str1 , x ) ; } }
public class Main { public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; System . out . println ( " Minimum ▁ number ▁ of ▁ deletions ▁ = ▁ " + minimumNumberOfDeletions ( str ) ) ; } public static int lps ( String str ) { int n = str . length ( ) ; int [ ] [ ] L = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { L [ i ] [ i ] = 1 ; } for ( int cl = 2 ; cl <= n ; cl ++ ) { for ( int i = 0 ; i < n - cl + 1 ; i ++ ) { int j = i + cl - 1 ; if ( str . charAt ( i ) == str . charAt ( j ) && cl == 2 ) { L [ i ] [ j ] = 2 ; } else if ( str . charAt ( i ) == str . charAt ( j ) ) { L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ; } else { L [ i ] [ j ] = Math . max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ; } } } return L [ 0 ] [ n - 1 ] ; } public static int minimumNumberOfDeletions ( String str ) { int n = str . length ( ) ; int l = lps ( str ) ; return ( n - l ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 14 ; if ( bitCheck ( n ) ) { System . out . println ( "1" ) ; } else { System . out . println ( "0" ) ; } } public static boolean bitCheck ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) { return true ; } return false ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < range ; j ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( inputArr [ n - 1 - i ] ) ; } int [ ] minprice = new int [ n ] ; minprice [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minprice [ i ] = Math . min ( minprice [ i - 1 ] , a [ i ] ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > minprice [ i ] ) { c ++ ; } } System . out . println ( c ) ; } } } ```
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int LIMIT = ( int ) Math . pow ( 10 , 8 ) - 1 ; int ans = 0 ; int [ ] primes = eulerlib . listPrimes ( LIMIT / 2 ) ; int sqrt = eulerlib . sqrt ( LIMIT ) ; for ( int i = 0 ; i < primes . length ; i ++ ) { if ( primes [ i ] > sqrt ) { break ; } int end = binarySearch ( primes , LIMIT / primes [ i ] ) ; ans += ( end + 1 > 0 ? end + 1 : - end - 1 ) - i ; } return Integer . toString ( ans ) ; } public static int binarySearch ( int [ ] lst , int x ) { int start = 0 ; int end = lst . length ; while ( start < end ) { int mid = ( start + end ) / 2 ; if ( x < lst [ mid ] ) { end = mid ; } else if ( x > lst [ mid ] ) { start = mid + 1 ; } else if ( x == lst [ mid ] ) { return mid ; } else { throw new AssertionError ( ) ; } } return - start - 1 ; } } class eulerlib { public static int [ ] listPrimes ( int n ) { } public static int sqrt ( int n ) { } }
int M = 20 ; List < List < List < List < Integer > > > > dp = new ArrayList < > ( ) ; Integer d = null ; Integer K = null ; public int count ( int pos , int cnt , int tight , int nonz , List < Integer > num ) { if ( pos == num . size ( ) ) { if ( cnt == K ) { return 1 ; } return 0 ; } if ( dp . get ( pos ) . get ( cnt ) . get ( tight ) . get ( nonz ) != - 1 ) { return dp . get ( pos ) . get ( cnt ) . get ( tight ) . get ( nonz ) ; } int ans = 0 ; int limit = tight == 1 ? 9 : num . get ( pos ) ; for ( int dig = 0 ; dig <= limit ; dig ++ ) { int currCnt = cnt ; if ( dig == d ) { if ( d != 0 || ( d == 0 && nonz != 0 ) ) { currCnt += 1 ; } } int currTight = tight ; if ( dig < num . get ( pos ) ) { currTight = 1 ; } ans += count ( pos + 1 , currCnt , currTight , ( nonz != 0 || dig != 0 ) ? 1 : 0 , num ) ; } dp . get ( pos ) . get ( cnt ) . get ( tight ) . set ( nonz , ans ) ; return dp . get ( pos ) . get ( cnt ) . get ( tight ) . get ( nonz ) ; } public int solve ( int x ) { List < Integer > num = new ArrayList < > ( ) ; while ( x != 0 ) { num . add ( x % 10 ) ; x /= 10 ; } Collections . reverse ( num ) ; dp = new ArrayList < > ( ) ; for ( int i = 0 ; i < M ; i ++ ) { List < List < List < Integer > > > innerList1 = new ArrayList < > ( ) ; for ( int j = 0 ; j < M ; j ++ ) { List < List < Integer > > innerList2 = new ArrayList < > ( ) ; for ( int k = 0 ; k < 2 ; k ++ ) { List < Integer > innerList3 = new ArrayList < > ( ) ; innerList3 . add ( - 1 ) ; innerList3 . add ( - 1 ) ; innerList2 . add ( innerList3 ) ; } innerList1 . add ( innerList2 ) ; } dp . add ( innerList1 ) ; } return count ( 0 , 0 , 0 , 0 , num ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String ip = scanner . nextLine ( ) ; String st = " " ; if ( ip . length ( ) != 1 ) { if ( ip . charAt ( 0 ) == '9' ) { st = "9" ; ip = ip . substring ( 1 ) ; } for ( int i = 0 ; i < ip . length ( ) ; i ++ ) { if ( Integer . parseInt ( String . valueOf ( ip . charAt ( i ) ) ) > 4 ) { int n = 9 - Integer . parseInt ( String . valueOf ( ip . charAt ( i ) ) ) ; st += String . valueOf ( n ) ; } else { st += String . valueOf ( ip . charAt ( i ) ) ; } } } else { st = ip ; } System . out . println ( Integer . parseInt ( st ) ) ; } }
public class Main { public static boolean isPeak ( int [ ] arr , int n , int num , int i , int j ) { if ( i >= 0 && arr [ i ] > num ) { return false ; } if ( j < n && arr [ j ] > num ) { return false ; } return true ; } public static boolean isTrough ( int [ ] arr , int n , int num , int i , int j ) { if ( i >= 0 && arr [ i ] < num ) { return false ; } if ( j < n && arr [ j ] < num ) { return false ; } return true ; } public static void printPeaksTroughs ( int [ ] arr , int n ) { System . out . print ( " Peaks ▁ : ▁ " ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPeak ( arr , n , arr [ i ] , i - 1 , i + 1 ) ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } System . out . println ( ) ; System . out . print ( " Troughs ▁ : ▁ " ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( isTrough ( arr , n , arr [ i ] , i - 1 , i + 1 ) ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 10 , 5 , 7 , 4 , 3 , 5 } ; int n = arr . length ; printPeaksTroughs ( arr , n ) ; } }
public class Main { public static int index ( int i ) { return 1 + ( i >> 31 ) - ( - i >> 31 ) ; } public static void check ( int n ) { String [ ] s = { " negative " , " zero " , " positive " } ; int val = index ( n ) ; System . out . println ( n + " ▁ is ▁ " + s [ val ] ) ; } public static void main ( String [ ] args ) { check ( 30 ) ; check ( - 20 ) ; check ( 0 ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 0 , 5 , 5 , 5 , 4 } ; int x = 5 ; System . out . println ( frequency ( a , x ) ) ; } public static int frequency ( int [ ] a , int x ) { int count = 0 ; for ( int i : a ) { if ( i == x ) { count ++ ; } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int N = 1234567890 ; boolean flag = isNumBalanced ( N ) ; if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static boolean isNumBalanced ( int N ) { String st = Integer . toString ( N ) ; boolean isBalanced = true ; int [ ] freq = new int [ 10 ] ; int n = st . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ Character . getNumericValue ( st . charAt ( i ) ) ] ++ ; } for ( int i = 0 ; i < 9 ; i ++ ) { if ( freq [ i ] != freq [ i + 1 ] ) { isBalanced = false ; } } return isBalanced ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int num = 9 ; if ( isThreeDisctFactors ( num ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } num = 15 ; if ( isThreeDisctFactors ( num ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } num = 12397923568441 ; if ( isThreeDisctFactors ( num ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return true ; } if ( n % 2 == 0 || n % 3 == 0 ) { return false ; } int k = ( int ) ( Math . sqrt ( n ) ) + 1 ; for ( int i = 5 ; i < k ; i += 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; } public static boolean isThreeDisctFactors ( int n ) { int sq = ( int ) ( Math . sqrt ( n ) ) ; if ( 1 * sq * sq != n ) { return false ; } if ( isPrime ( sq ) ) { return true ; } else { return false ; } } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int numer = 1 ; int denom = 0 ; for ( int i = 99 ; i >= 0 ; i -- ) { int term = eContfracTerm ( i ) ; int temp = numer ; numer = term * numer + denom ; denom = temp ; } int ans = 0 ; String numerStr = String . valueOf ( numer ) ; for ( int j = 0 ; j < numerStr . length ( ) ; j ++ ) { ans += Character . getNumericValue ( numerStr . charAt ( j ) ) ; } return String . valueOf ( ans ) ; } public static int eContfracTerm ( int i ) { if ( i == 0 ) { return 2 ; } else if ( i % 3 == 2 ) { return i / 3 * 2 + 2 ; } else { return 1 ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int n = 4 ; int x = 2 ; int y = 3 ; int z = 5 ; int res = findDivisible ( n , x , y , z ) ; if ( res != 0 ) { System . out . println ( res ) ; } else { System . out . println ( " Not ▁ possible " ) ; } } public static int LCM ( int x , int y , int z ) { int ans = ( x * y ) / ( gcd ( x , y ) ) ; return ( z * ans ) / ( gcd ( ans , z ) ) ; } public static int findDivisible ( int n , int x , int y , int z ) { int lcm = LCM ( x , y , z ) ; int ndigitnumber = ( int ) Math . pow ( 10 , n - 1 ) ; int reminder = ndigitnumber % lcm ; if ( reminder == 0 ) { return ndigitnumber ; } ndigitnumber += lcm - reminder ; if ( ndigitnumber < Math . pow ( 10 , n ) ) { return ndigitnumber ; } else { return 0 ; } } public static int gcd ( int a , int b ) { while ( b > 0 ) { int temp = b ; b = a % b ; a = temp ; } return a ; } }
import java . util . * ; public class Main { static boolean [ ] prime = new boolean [ 100001 ] ; public static void main ( String [ ] args ) { Arrays . fill ( prime , true ) ; SieveOfEratosthenes ( ) ; int a = 6 , b = 12 ; common_prime ( a , b ) ; } public static void SieveOfEratosthenes ( ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . sqrt ( 100001 ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * p ; i < 100001 ; i += p ) { prime [ i ] = false ; } } } } public static void common_prime ( int a , int b ) { int gcd = gcd ( a , b ) ; for ( int i = 2 ; i <= gcd ; i ++ ) { if ( prime [ i ] && gcd % i == 0 ) { System . out . print ( i + " ▁ " ) ; } } } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; double m_inf = Double . NEGATIVE_INFINITY ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] phrase = new int [ 394 ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int s = Integer . parseInt ( input [ 0 ] ) ; int l = Integer . parseInt ( input [ 1 ] ) ; int p = Integer . parseInt ( input [ 2 ] ) ; for ( int j = s ; j <= l ; j ++ ) { phrase [ j ] = phrase [ j ] > p ? phrase [ j ] : p ; } } double [ ] dp = new double [ 394 ] ; dp [ 0 ] = 0 ; for ( int length = 0 ; length < phrase . length ; length ++ ) { if ( phrase [ length ] != 0 ) { for ( int to = length ; to < 395 ; to ++ ) { dp [ to ] = dp [ to ] >= dp [ length ] + phrase [ length ] ? dp [ to ] : dp [ length ] + phrase [ length ] ; } } } int numQueries = Integer . parseInt ( scanner . nextLine ( ) ) ; double [ ] result = new double [ numQueries ] ; for ( int i = 0 ; i < numQueries ; i ++ ) { int query = Integer . parseInt ( scanner . nextLine ( ) ) ; result [ i ] = dp [ query ] ; } for ( double res : result ) { if ( res != m_inf ) { System . out . println ( res ) ; } else { System . out . println ( - 1 ) ; } } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; List < List < Integer > > adj = new ArrayList < > ( ) ; for ( int i = 0 ; i <= N ; i ++ ) { adj . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; adj . get ( a ) . add ( b ) ; adj . get ( b ) . add ( a ) ; } Queue < Integer > que = new LinkedList < > ( ) ; que . add ( 1 ) ; int [ ] seen = new int [ N + 1 ] ; seen [ 1 ] = 1 ; int [ ] par = new int [ N + 1 ] ; int [ ] child_num = new int [ N + 1 ] ; while ( ! que . isEmpty ( ) ) { int v = que . poll ( ) ; for ( int u : adj . get ( v ) ) { if ( seen [ u ] == 0 ) { seen [ u ] = 1 ; par [ u ] = v ; child_num [ v ] ++ ; que . add ( u ) ; } } } Queue < Integer > seq = new LinkedList < > ( ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( child_num [ i ] == 0 ) { seq . add ( i ) ; } } while ( ! seq . isEmpty ( ) ) { int c = seq . poll ( ) ; seen [ c ] = 0 ; if ( seen [ par [ c ] ] == 0 ) { System . out . println ( " First " ) ; System . exit ( 0 ) ; } seen [ par [ c ] ] = 0 ; child_num [ par [ par [ c ] ] ] -- ; if ( child_num [ par [ par [ c ] ] ] == 0 ) { seq . add ( par [ par [ c ] ] ) ; } } System . out . println ( " Second " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int input = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < input ; k ++ ) { String [ ] nm = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nm [ 0 ] ) ; int m = Integer . parseInt ( nm [ 1 ] ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] temp = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = Integer . parseInt ( temp [ j ] ) ; } } String res = " YES " ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { try { int count = arr [ i + 1 ] [ j ] + arr [ i ] [ j + 1 ] + arr [ i + 1 ] [ j + 1 ] + arr [ i ] [ j ] ; if ( count == 3 ) { res = " NO " ; } } catch ( ArrayIndexOutOfBoundsException e ) { } } } System . out . println ( res ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int k = Integer . parseInt ( input [ 1 ] ) ; int [ ] pwList = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pwList [ i ] = scanner . nextLine ( ) . length ( ) ; } int pw = scanner . nextLine ( ) . length ( ) ; int [ ] p = pwList . clone ( ) ; Arrays . sort ( p ) ; int head = Arrays . binarySearch ( p , pw ) ; int tail = n - Arrays . binarySearch ( reverse ( p ) , pw ) - 1 ; int worstCase = head + ( head / k ) * 5 + 1 ; int bestCase = tail + ( tail / k ) * 5 + 1 ; System . out . println ( worstCase + " ▁ " + bestCase ) ; } public static int [ ] reverse ( int [ ] arr ) { int [ ] reversed = new int [ arr . length ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { reversed [ i ] = arr [ arr . length - 1 - i ] ; } return reversed ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String n = scanner . nextLine ( ) . replace ( " ; " , " " ) . replace ( " - " , " " ) . replace ( " _ " , " " ) . toLowerCase ( ) ; String p = scanner . nextLine ( ) . replace ( " ; " , " " ) . replace ( " - " , " " ) . replace ( " _ " , " " ) . toLowerCase ( ) ; String c = scanner . nextLine ( ) . replace ( " ; " , " " ) . replace ( " - " , " " ) . replace ( " _ " , " " ) . toLowerCase ( ) ; String [ ] z = { n + p + c , n + c + p , c + n + p , c + p + n , p + c + n , p + n + c } ; int input = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < input ; i ++ ) { String q = scanner . nextLine ( ) . replace ( " ; " , " " ) . replace ( " - " , " " ) . replace ( " _ " , " " ) . toLowerCase ( ) ; if ( q . equals ( z [ 0 ] ) || q . equals ( z [ 1 ] ) || q . equals ( z [ 2 ] ) || q . equals ( z [ 3 ] ) || q . equals ( z [ 4 ] ) || q . equals ( z [ 5 ] ) ) { System . out . println ( " ACC " ) ; } else { System . out . println ( " WA " ) ; } } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int T = input . nextInt ( ) ; for ( int caseNum = 1 ; caseNum <= T ; caseNum ++ ) { int N = input . nextInt ( ) ; int L = input . nextInt ( ) ; int [ ] a = new int [ N ] ; int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = Integer . parseInt ( input . next ( ) , 2 ) ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = Integer . parseInt ( input . next ( ) , 2 ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int ans = L + 1 ; for ( int i : b ) { boolean valid = true ; for ( int j : a ) { if ( ! Arrays . equals ( getXORArray ( a [ 0 ] ^ i , j ) , b ) ) { valid = false ; break ; } } if ( valid ) { ans = Math . min ( ans , Integer . bitCount ( a [ 0 ] ^ i ) ) ; } } if ( ans == L + 1 ) { System . out . println ( " Case ▁ # " + caseNum + " : ▁ NOT ▁ POSSIBLE " ) ; } else { System . out . println ( " Case ▁ # " + caseNum + " : ▁ " + ans ) ; } } } public static int [ ] getXORArray ( int a , int b ) { int [ ] result = new int [ Integer . SIZE ] ; for ( int i = 0 ; i < Integer . SIZE ; i ++ ) { result [ i ] = ( a >> i & 1 ) ^ ( b >> i & 1 ) ; } return result ; } }
public class Solution { public int maxAreaOfIsland ( int [ ] [ ] grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . length ; i ++ ) { for ( int j = 0 ; j < grid [ 0 ] . length ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { grid [ i ] [ j ] = 0 ; ans = Math . max ( dfs ( grid , i , j ) , ans ) ; } } } return ans ; } private int dfs ( int [ ] [ ] grid , int i , int j ) { Stack < int [ ] > stack = new Stack < > ( ) ; int area = 0 ; stack . push ( new int [ ] { i , j } ) ; while ( ! stack . isEmpty ( ) ) { int [ ] point = stack . pop ( ) ; int r = point [ 0 ] ; int c = point [ 1 ] ; area ++ ; int [ ] [ ] directions = { { - 1 , 0 } , { 1 , 0 } , { 0 , - 1 } , { 0 , 1 } } ; for ( int [ ] dir : directions ) { int nr = r + dir [ 0 ] ; int nc = c + dir [ 1 ] ; if ( nr >= 0 && nr < grid . length && nc >= 0 && nc < grid [ 0 ] . length && grid [ nr ] [ nc ] == 1 ) { stack . push ( new int [ ] { nr , nc } ) ; grid [ nr ] [ nc ] = 0 ; } } } return area ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] [ ] grid = { { 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 } , { 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 } , { 0 , 1 , 0 , 0 , 1 , 1
public class Main { public static void main ( String [ ] args ) { int x = 2 ; int y = 2 ; int n = 2 ; System . out . println ( sum ( x , y , n ) ) ; } public static int sum ( int x , int y , int n ) { int sum1 = ( ( x * x ) * ( Math . pow ( x , 2 * n ) - 1 ) ) / ( x * x - 1 ) ; int sum2 = ( x * y * ( Math . pow ( x , n ) * Math . pow ( y , n ) - 1 ) ) / ( x * y - 1 ) ; return sum1 + sum2 ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } public static int findSum ( int n ) { n -= 1 ; int sum = 0 ; sum += ( n * ( n + 1 ) ) / 2 ; sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; return sum ; } }
public class Main { public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } public static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + ( n % 10 ) ; n = ( n / 10 ) ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } public static int getSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; } }
import java . lang . Math ; class Node { int data ; Node next ; Node ( int data ) { this . data = data ; this . next = null ; } } public class Main { static Node push ( Node head_ref , int new_data ) { Node new_node = new Node ( new_data ) ; new_node . data = new_data ; new_node . next = head_ref ; head_ref = new_node ; return head_ref ; } static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return true ; } if ( n % 2 == 0 || n % 3 == 0 ) { return false ; } for ( int i = 5 ; i * i <= n + 2 ; i += 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; } static Node deleteNonPrimeNodes ( Node head_ref ) { Node ptr = head_ref ; while ( ptr != null && ! isPrime ( ptr . data ) ) { Node temp = ptr ; ptr = ptr . next ; } head_ref = ptr ; if ( ptr == null ) { return null ; } Node curr = ptr . next ; while ( curr != null ) { if ( ! isPrime ( curr . data ) ) { ptr . next = curr . next ; curr = ptr . next ; } else { ptr = curr ; curr = curr . next ; } } return head_ref ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + " ▁ " ) ; head = head . next ; } } public static void main ( String [ ] args ) { Node head = null ; head = push ( head , 17 ) ; head = push ( head , 7 ) ; head = push ( head , 6 ) ; head = push ( head , 16 ) ; head = push ( head , 15 ) ; System . out . println ( " Original ▁ List : ▁ " ) ; printList ( head ) ; head = deleteNonPrimeNodes ( head ) ; System . out . println ( " \n Modified ▁ List : ▁ " ) ; printList ( head ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int M = scanner . nextInt ( ) ; int L = scanner . nextInt ( ) ; int [ ] [ ] tbl = new int [ 45 ] [ ] ; for ( int i = 0 ; i < 45 ; i ++ ) { tbl [ i ] = new int [ 0 ] ; } for ( int i = 0 ; i < M ; i ++ ) { int d = scanner . nextInt ( ) ; int a = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int t = scanner . nextInt ( ) ; tbl [ d * N + a - 1 ] . append ( new int [ ] { k , t } ) ; } int [ ] [ ] dp = new int [ 45 ] [ 45 ] ; for ( int da = 0 ; da < 5 * N ; da ++ ) { for ( int i = 0 ; i < L + 1 ; i ++ ) { if ( i < L ) { for ( int [ ] entry : tbl [ da ] ) { int k = entry [ 0 ] ; int t = entry [ 1 ] ; dp [ da + k ] [ i + 1 ] = Math . max ( dp [ da + k ] [ i + 1 ] , dp [ da ] [ i ] + t ) ; } } dp [ da + 1 ] [ i ] = Math . max ( dp [ da + 1 ] [ i ] , dp [ da ] [ i ] ) ; } } System . out . println ( dp [ 5 * N ] [ L ] ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] [ 0 ] = ' W ' ; b [ i ] [ 1 ] = 1 ; } b [ 0 ] [ 0 ] = ' R ' ; for ( int i = 0 ; i < m ; i ++ ) { String [ ] coordinates = scanner . nextLine ( ) . split ( " ▁ " ) ; int x = Integer . parseInt ( coordinates [ 0 ] ) ; int y = Integer . parseInt ( coordinates [ 1 ] ) ; b [ x - 1 ] [ 1 ] -- ; if ( b [ x - 1 ] [ 0 ] == ' R ' ) { b [ y - 1 ] [ 0 ] = ' R ' ; b [ y - 1 ] [ 1 ] ++ ; if ( b [ x - 1 ] [ 1 ] == 0 ) { b [ x - 1 ] [ 0 ] = ' W ' ; } } else { b [ y - 1 ] [ 1 ] ++ ; } } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] [ 0 ] == ' R ' ) { cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int H = scanner . nextInt ( ) ; int W = scanner . nextInt ( ) ; scanner . nextLine ( ) ; String [ ] s = new String [ H ] ; for ( int k = 0 ; k < H ; k ++ ) { s [ k ] = scanner . nextLine ( ) ; } int [ ] [ ] B = new int [ H * W ] [ 2 ] ; int index = 0 ; for ( int k = 0 ; k < H ; k ++ ) { for ( int l = 0 ; l < W ; l ++ ) { if ( s [ k ] . charAt ( l ) == ' B ' ) { B [ index ] [ 0 ] = k ; B [ index ] [ 1 ] = l ; index ++ ; } } } int ans = 0 ; for ( int i = 0 ; i < index ; i ++ ) { for ( int j = 0 ; j < index ; j ++ ) { ans = Math . max ( ans , Math . abs ( B [ i ] [ 0 ] - B [ j ] [ 0 ] ) + Math . abs ( B [ i ] [ 1 ] - B [ j ] [ 1 ] ) ) ; } } System . out . println ( ans ) ; } }
public class Main { public static void minReplacement ( String string ) { if ( string . length ( ) > 26 ) { System . out . println ( " IMPOSSIBLE " ) ; } else { int [ ] Hash = new int [ 26 ] ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { Hash [ string . charAt ( i ) - ' a ' ] += 1 ; } int count = 0 ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( Hash [ string . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( Hash [ j ] == 0 ) { Hash [ string . charAt ( i ) - ' a ' ] -= 1 ; string = string . substring ( 0 , i ) + ( char ) ( j + ' a ' ) + string . substring ( i + 1 ) ; Hash [ j ] += 1 ; break ; } } } } System . out . println ( string ) ; } } public static void main ( String [ ] args ) { String string = " xxxxyyyy " ; minReplacement ( string ) ; } }
public class Main { public static void main ( String [ ] args ) { String s = "000011100000" ; System . out . println ( longestSubseq ( s ) ) ; } public static int longestSubseq ( String s ) { int n = s . length ( ) ; int [ ] pre_count_0 = new int [ n + 2 ] ; int [ ] pre_count_1 = new int [ n + 1 ] ; int [ ] post_count_0 = new int [ n + 2 ] ; pre_count_0 [ 0 ] = 0 ; post_count_0 [ n + 1 ] = 0 ; pre_count_1 [ 0 ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { pre_count_0 [ j ] = pre_count_0 [ j - 1 ] ; pre_count_1 [ j ] = pre_count_1 [ j - 1 ] ; post_count_0 [ n - j + 1 ] = post_count_0 [ n - j + 2 ] ; if ( s . charAt ( j - 1 ) == '0' ) { pre_count_0 [ j ] ++ ; } else { pre_count_1 [ j ] ++ ; } if ( s . charAt ( n - j ) == '0' ) { post_count_0 [ n - j + 1 ] ++ ; } } if ( pre_count_0 [ n ] == n || pre_count_0 [ n ] == 0 ) { return n ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { ans = Math . max ( pre_count_0 [ i - 1 ] + pre_count_1 [ j ] - pre_count_1 [ i - 1 ] + post_count_0 [ j + 1 ] , ans ) ; } } return ans ; } }
public class Main { public static void sieveOfEratosthenes ( int N , int [ ] s ) { boolean [ ] prime = new boolean [ N + 1 ] ; for ( int i = 2 ; i <= N ; i += 2 ) { s [ i ] = 2 ; } for ( int i = 3 ; i <= N ; i += 2 ) { if ( ! prime [ i ] ) { s [ i ] = i ; for ( int j = i ; j <= N / i ; j += 2 ) { if ( ! prime [ i * j ] ) { prime [ i * j ] = true ; s [ i * j ] = i ; } } } } } public static void generatePrimeFactors ( int N ) { int [ ] s = new int [ N + 1 ] ; sieveOfEratosthenes ( N , s ) ; System . out . println ( " Factor ▁ Power " ) ; int curr = s [ N ] ; int cnt = 1 ; while ( N > 1 ) { N /= s [ N ] ; if ( curr == s [ N ] ) { cnt ++ ; continue ; } System . out . println ( curr + " \t " + cnt ) ; curr = s [ N ] ; cnt = 1 ; } } public static void main ( String [ ] args ) { int N = 360 ; generatePrimeFactors ( N ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 11 , 22 , 33 , 44 , 54 , 56 , 63 } ; int n = a . length ; System . out . println ( longestSubarray ( a , n ) ) ; } public static int longestSubarray ( int [ ] a , int n ) { int [ ] [ ] hash = new int [ n ] [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; while ( num > 0 ) { hash [ i ] [ num % 10 ] = 1 ; num = num / 10 ; } } int longest = Integer . MIN_VALUE ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int j ; for ( j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] == 1 && hash [ i + 1 ] [ j ] == 1 ) { count ++ ; break ; } } if ( j == 10 ) { longest = Math . max ( longest , count + 1 ) ; count = 0 ; } } longest = Math . max ( longest , count + 1 ) ; return longest ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; System . out . println ( ( a + b + c ) / 2 ) ; } } }
public class Main { public static void main ( String [ ] args ) { int a = 14 ; int b = 28 ; System . out . println ( minOperations ( a , b ) ) ; } public static List < Integer > divisors ( int x ) { int c = 0 ; List < Integer > v = new ArrayList < > ( ) ; while ( x % 2 == 0 ) { c ++ ; x /= 2 ; } v . add ( c ) ; c = 0 ; while ( x % 3 == 0 ) { c ++ ; x /= 3 ; } v . add ( c ) ; c = 0 ; while ( x % 7 == 0 ) { c ++ ; x /= 7 ; } v . add ( c ) ; v . add ( x ) ; return v ; } public static int minOperations ( int a , int b ) { List < Integer > va = divisors ( a ) ; List < Integer > vb = divisors ( b ) ; if ( va . get ( 3 ) != vb . get ( 3 ) ) { return - 1 ; } int minOperations = Math . abs ( va . get ( 0 ) - vb . get ( 0 ) ) + Math . abs ( va . get ( 1 ) - vb . get ( 1 ) ) + Math . abs ( va . get ( 2 ) - vb . get ( 2 ) ) ; return minOperations ; } }
public class Main { static int N = 1000001 ; static int c = 0 ; static int n = 0 ; static int m = 0 ; static int a = 0 ; static int b = 0 ; public static void main ( String [ ] args ) { n = 7 ; m = 7 ; a = 3 ; b = 5 ; int [ ] [ ] edges = { { 1 , 2 } , { 2 , 3 } , { 3 , 4 } , { 4 , 5 } , { 5 , 6 } , { 6 , 7 } , { 7 , 5 } } ; List < List < Integer > > v = new ArrayList < > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { v . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { v . get ( edges [ i ] [ 0 ] ) . add ( edges [ i ] [ 1 ] ) ; v . get ( edges [ i ] [ 1 ] ) . add ( edges [ i ] [ 0 ] ) ; } Calculate ( v ) ; } public static void dfs ( int a , int b , List < List < Integer > > v , int [ ] vis ) { vis [ a ] = 1 ; c ++ ; for ( int i : v . get ( a ) ) { if ( vis [ i ] == 0 && i != b ) { dfs ( i , b , v , vis ) ; } } } public static void Calculate ( List < List < Integer > > v ) { int [ ] vis = new int [ n + 1 ] ; c = 0 ; dfs ( a , b , v , vis ) ; int ans1 = n - c - 1 ; vis = new int [ vis . length ] ; c = 0 ; dfs ( b , a , v , vis ) ; int ans2 = n - c - 1 ; System . out . println ( ans1 * ans2 ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; System . out . println ( maxima ( n ) ) ; } public static int l ( int n ) { return String . valueOf ( n ) . length ( ) ; } public static int el ( int n ) { return Integer . parseInt ( String . valueOf ( n ) . substring ( 1 ) ) ; } public static int first ( int n ) { return Integer . parseInt ( String . valueOf ( n ) . substring ( 0 , 1 ) ) ; } public static int maxima ( int n ) { if ( l ( n ) == 1 ) { return n ; } else if ( first ( n ) == 1 ) { return Math . max ( 9 * ( l ( n ) - 1 ) , first ( n ) * maxima ( el ( n ) ) ) ; } else { return Math . max ( ( first ( n ) - 1 ) * 9 * ( l ( n ) - 1 ) , first ( n ) * maxima ( el ( n ) ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int x = a ; int h = 0 ; int s = 0 ; while ( x > 0 ) { x -= 1 ; h += 1 ; s += 1 ; } while ( s / b != 0 ) { h += 1 ; s = s - b + 1 ; } System . out . println ( h ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( largestDigitSumdivisior ( n ) ) ; } public static int getSum ( int n ) { int sm = 0 ; while ( n != 0 ) { sm = sm + n % 10 ; n = n / 10 ; } return sm ; } public static int largestDigitSumdivisior ( int n ) { int res = 0 ; for ( int i = 1 ; i <= ( int ) ( Math . sqrt ( n ) ) ; i ++ ) { if ( n % i == 0 ) { res = Math . max ( res , getSum ( i ) ) ; res = Math . max ( res , getSum ( n / i ) ) ; } } return res ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int l = Integer . parseInt ( input [ 0 ] ) ; int r = Integer . parseInt ( input [ 1 ] ) ; int curr = r ; int s = 0 ; while ( curr != 0 ) { s += 1 ; curr /= 10 ; } int first = ( int ) Math . pow ( 10 , s ) ; int second = first / 2 ; int ans = - 1 ; int [ ] nums = { l , r , first , second } ; for ( int i : nums ) { if ( i >= l && i <= r ) { curr = i ; String rev = " " ; for ( char c : String . valueOf ( curr ) . toCharArray ( ) ) { rev += String . valueOf ( 9 - Character . getNumericValue ( c ) ) ; } ans = Math . max ( ans , Integer . parseInt ( rev ) * curr ) ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] l = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { l [ i ] = scanner . nextInt ( ) ; } for ( int i = 0 ; i < N ; i ++ ) { int t = l [ i ] ; int j = i - 1 ; while ( j >= 0 && l [ j ] > t ) { int temp = l [ j + 1 ] ; l [ j + 1 ] = l [ j ] ; l [ j ] = temp ; j -- ; } for ( int num : l ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; } } }
import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { int N = 30 ; findNumbers ( N ) ; } public static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; return ( sr - Math . floor ( sr ) == 0 ) ; } public static boolean isProduct ( int num ) { int cnt = 0 ; int i = 2 ; while ( cnt < 2 && i * i <= num ) { while ( num % i == 0 ) { num /= i ; cnt ++ ; } i ++ ; } if ( num > 1 ) { cnt ++ ; } return cnt == 2 ; } public static void findNumbers ( int N ) { ArrayList < Integer > vec = new ArrayList < > ( ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( isProduct ( i ) && ! isPerfectSquare ( i ) ) { vec . add ( i ) ; } } for ( int i = 0 ; i < vec . size ( ) ; i ++ ) { System . out . print ( vec . get ( i ) + " ▁ " ) ; } } }
String data = "111111101010101111100101001111111 \n " + "100000100000000001010110001000001 \n " + "101110100110110000011010001011101 \n " + "101110101011001001111101001011101 \n " + "101110101100011000111100101011101 \n " + "100000101010101011010000101000001 \n " + "111111101010101010101010101111111 \n " + "000000001111101111100111100000000 \n " + "100010111100100001011110111111001 \n " + "110111001111111100100001000101100 \n " + "011100111010000101000111010001010 \n " + "011110000110001111110101100000011 \n " + "111111111111111000111001001011000 \n " + "111000010111010011010011010100100 \n " + "101010100010110010110101010000010 \n " + "101100000101010001111101000000000 \n " + "000010100011001101000111101011010 \n " + "101001001111101111000101010001110 \n " + "101101111111000100100001110001000 \n " + "000010011000100110000011010000010 \n " + "001101101001101110010010011011000 \n " + "011101011010001000111101010100110 \n " + "111010100110011101001101000001110 \n " + "110001010010101111000101111111000 \n " + "001000111011100001010110111110000 \n " + "000000001110010110100010100010110 \n " + "111111101000101111000110101011010 \n " + "100000100111010101111100100011011 \n " + "101110101001010000101000111111000 \n " + "101110100011010010010111111011010 \n " + "101110100100011011110110101110000 \n " + "100000100110011001111100111100000\n
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < range ; j ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int count = 0 ; int start = 0 ; for ( int i = 1 ; i < 10 ; i ++ ) { start = i ; while ( start <= n ) { count ++ ; start = start * 10 + i ; } } System . out . println ( count ) ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int num1 = 559 ; int num2 = 703 ; if ( areEquivalent ( num1 , num2 ) ) { System . out . println ( " Equivalent " ) ; } else { System . out . println ( " Not ▁ Equivalent " ) ; } } public static int divSum ( int n ) { int sum = 1 ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) { sum = sum + i + Math . floorDiv ( n , i ) ; } i ++ ; } return sum ; } public static boolean areEquivalent ( int num1 , int num2 ) { return divSum ( num1 ) == divSum ( num2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int x = 5 ; System . out . println ( findY ( x ) ) ; } public static int findY ( int x ) { if ( x > 2 ) { return x - 2 ; } return x + 2 ; } }
public class Main { static final long MOD = 1000000007 ; public static void main ( String [ ] args ) { int n = 3 ; int m = 2 ; System . out . println ( modFact ( n , m ) ) ; } public static long modFact ( int n , int m ) { long result = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { result = ( result * i ) % MOD ; } return result ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int m = i ; for ( int j = i ; j < n ; j ++ ) { if ( a [ m ] > a [ j ] ) { m = j ; } } if ( i != m ) { int temp = a [ m ] ; a [ m ] = a [ i ] ; a [ i ] = temp ; c ++ ; } } for ( int num : a ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; System . out . println ( c ) ; } }
import java . util . * ; public class Main { static int W , H ; static int [ ] [ ] m ; static int [ ] [ ] dx = { { 1 , 1 , 1 , 0 , - 1 , 0 } , { 0 , 1 , 0 , - 1 , - 1 , - 1 } } ; static int [ ] dy = { - 1 , 0 , 1 , 1 , 0 , - 1 } ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; W = scanner . nextInt ( ) ; H = scanner . nextInt ( ) ; m = new int [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { m [ i ] [ j ] = scanner . nextInt ( ) ; } } for ( int x = 0 ; x < W ; x ++ ) { dfs ( x , 0 ) ; dfs ( x , H - 1 ) ; } for ( int y = 0 ; y < H ; y ++ ) { dfs ( 0 , y ) ; dfs ( W - 1 , y ) ; } int n = 0 ; for ( int x = 0 ; x < W ; x ++ ) { for ( int y = 0 ; y < H ; y ++ ) { if ( m [ y ] [ x ] != 1 ) { continue ; } int fn = n ; for ( int k = 0 ; k < 6 ; k ++ ) { int xx = x + dx [ y % 2 ] [ k ] ; int yy = y + dy [ k ] ; if ( 0 <= xx && xx < W && 0 <= yy && yy < H ) { if ( m [ yy ] [ xx ] == 2 ) { n ++ ; } } else { n ++ ; } } } } System . out . println ( n ) ; } public static void dfs ( int x , int y ) { if ( m [ y ] [ x ] != 0 ) { return ; } m [ y ] [ x ] = 2 ; for ( int k = 0 ; k < 6 ; k ++ ) { int xx = x + dx [ y % 2 ] [ k ] ; int yy = y + dy [ k ] ; if ( 0 <= xx && xx < W && 0 <= yy && yy < H ) { dfs ( xx ,
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < ArrayList < Integer > > ans = new ArrayList < > ( ) ; ArrayList < Integer > firstList = new ArrayList < > ( ) ; firstList . add ( Integer . parseInt ( input [ 0 ] ) ) ; ans . add ( firstList ) ; for ( int i = 1 ; i < n ; i ++ ) { int l = 0 ; int r = ans . size ( ) - 1 ; while ( r > l ) { int m = ( r + l ) / 2 ; if ( Integer . parseInt ( input [ i ] ) > ans . get ( m ) . get ( ans . get ( m ) . size ( ) - 1 ) ) { r = m ; } else { l = m + 1 ; } } if ( Integer . parseInt ( input [ i ] ) > ans . get ( l ) . get ( ans . get ( l ) . size ( ) - 1 ) ) { ans . get ( l ) . add ( Integer . parseInt ( input [ i ] ) ) ; } else { ArrayList < Integer > newList = new ArrayList < > ( ) ; newList . add ( Integer . parseInt ( input [ i ] ) ) ; ans . add ( newList ) ; } } for ( ArrayList < Integer > arr : ans ) { for ( int num : arr ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; } } }
public class Main { public static void main ( String [ ] args ) { int a = 8 ; int b = 10 ; System . out . println ( circlearea ( a , b ) ) ; } public static double circlearea ( int a , int b ) { if ( a < 0 || b < 0 ) { return - 1 ; } double A = ( ( 3.14 * Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) / ( 4 * ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) ) ) ; return A ; } }
import java . util . ArrayList ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] lst = { - 1 , 2 , 4 , 121 } ; int n = 5 ; find ( lst , n ) ; } public static void find ( int [ ] lst , int n ) { ArrayList < Integer > subset = new ArrayList < > ( ) ; boolean found = false ; for ( int r = 1 ; r <= lst . length ; r ++ ) { combinations ( lst , 0 , r , n , subset ) ; if ( ! subset . isEmpty ( ) ) { found = true ; break ; } } if ( found ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static void combinations ( int [ ] lst , int start , int r , int target , ArrayList < Integer > subset ) { if ( r == 0 ) { int sum = subset . stream ( ) . mapToInt ( Integer :: intValue ) . sum ( ) ; if ( sum == target ) { return ; } } for ( int i = start ; i < lst . length ; i ++ ) { subset . add ( lst [ i ] ) ; combinations ( lst , i + 1 , r - 1 , target , subset ) ; subset . remove ( subset . size ( ) - 1 ) ; } } }
public class Main { public static void main ( String [ ] args ) { String s = " aabb " ; int k = 2 ; System . out . println ( K_String ( s , k ) ) ; } public static String K_String ( String s , int k ) { int n = s . length ( ) ; int [ ] fre = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { fre [ s . charAt ( i ) - ' a ' ] += 1 ; } StringBuilder str = new StringBuilder ( ) ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( fre [ i ] % k == 0 ) { int x = fre [ i ] / k ; while ( x > 0 ) { str . append ( ( char ) ( i + ' a ' ) ) ; x -= 1 ; } } else { return " - 1" ; } } return str . toString ( ) ; } }
double [ ] dp = new double [ 100001 ] ; dp [ 1 ] = 1.0 ; for ( int i = 2 ; i < 100001 ; i ++ ) { double a = 0.5 , b = 1 , j = 1 ; while ( j < i && b > 1e-15 ) { dp [ i ] += b * ( 1 - a ) * ( j + dp [ i - ( int ) j - 1 ] ) ; b *= a ; a /= 2 ; j += 1 ; } dp [ i ] += i * b ; } Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; if ( n == 0 ) break ; System . out . println ( dp [ n ] ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( scanner . hasNextLine ( ) ) { String line = scanner . nextLine ( ) ; String [ ] tokens = line . split ( " ▁ " ) ; int a = Integer . parseInt ( tokens [ 0 ] ) ; int b = Integer . parseInt ( tokens [ 1 ] ) ; int n = Integer . parseInt ( tokens [ 2 ] ) ; int result = 0 ; int temp = ( a % b ) * ( int ) Math . pow ( 10 , n ) / b ; String tempStr = String . valueOf ( temp ) ; for ( int i = 0 ; i < tempStr . length ( ) ; i ++ ) { result += Character . getNumericValue ( tempStr . charAt ( i ) ) ; } System . out . println ( result ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = input . nextInt ( ) ; } if ( chk ( N , A ) ) { int l = 0 ; int r = 1 << 18 ; while ( r - l > 1 ) { int m = ( l + r ) / 2 ; if ( chk ( m , A ) ) { r = m ; } else { l = m ; } } System . out . println ( r ) ; } } public static boolean chk ( int k , int [ ] A ) { if ( k == 1 ) { for ( int i = 1 ; i < A . length ; i ++ ) { if ( A [ i ] <= A [ i - 1 ] ) { return false ; } } return true ; } int [ ] [ ] X = new int [ A . length + 1 ] [ 2 ] ; X [ 0 ] [ 0 ] = 0 ; X [ 0 ] [ 1 ] = 0 ; for ( int a : A ) { if ( add ( X , k , a , a ) == 0 ) { return false ; } } return true ; } public static int add ( int [ ] [ ] X , int k , int x , int y ) { if ( x <= 0 ) { return 0 ; } if ( x > X [ X . length - 1 ] [ 0 ] ) { X [ X . length - 1 ] [ 0 ] = x ; X [ X . length - 1 ] [ 1 ] = ( x == y ) ? 0 : 1 ; } else if ( x == X [ X . length - 1 ] [ 0 ] ) { if ( X [ X . length - 1 ] [ 1 ] + 1 < k ) { X [ X . length - 1 ] [ 1 ] = X [ X . length - 1 ] [ 1 ] + 1 ; } else { if ( add ( X , k , x - 1 , y ) == 0 ) { return 0 ; } } } else { while ( X [ X . length - 1 ] [ 0 ] > x ) { X [ X . length - 1 ] [ 0 ] =
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; if ( n == 0 && k == 0 ) { break ; } int [ ] s = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = scanner . nextInt ( ) ; } for ( int j = 0 ; j < n ; j ++ ) { int [ ] b = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { b [ i ] = scanner . nextInt ( ) ; s [ i ] -= b [ i ] ; } } int min = s [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] < min ) { min = s [ i ] ; } } if ( min >= 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } } ```
public class Main { public static void main ( String [ ] args ) { int a = 4 ; int b = 7 ; String s = "47744" ; System . out . println ( maxFreq ( s , a , b ) ) ; } public static int maxFreq ( String s , int a , int b ) { int [ ] fre = new int [ 10 ] ; int n = s . length ( ) ; if ( a > b ) { int temp = a ; a = b ; b = temp ; } for ( int i = 0 ; i < n ; i ++ ) { int num = s . charAt ( i ) - '0' ; fre [ num ] ++ ; } if ( fre [ a ] == 0 && fre [ b ] == 0 ) { return - 1 ; } else if ( fre [ a ] >= fre [ b ] ) { return a ; } else { return b ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 549 ; System . out . println ( maxZeros ( n ) ) ; } public static int maxZeros ( int n ) { if ( n == 0 || ( n & ( n - 1 ) ) == 0 ) { return - 1 ; } int setBit = 1 ; int prev = 0 ; int i = 1 ; while ( i < 33 ) { prev += 1 ; if ( ( n & setBit ) == setBit ) { setBit = setBit << 1 ; break ; } setBit = setBit << 1 ; } int max0 = - 1000000000 ; int cur = prev ; for ( int j = i + 1 ; j < 33 ; j ++ ) { cur += 1 ; if ( ( n & setBit ) == setBit ) { if ( max0 < ( cur - prev - 1 ) ) { max0 = cur - prev - 1 ; } prev = cur ; } setBit = setBit << 1 ; } return max0 ; } }
public class Main { public static void main ( String [ ] args ) { int n = 10 ; int k = 3 ; System . out . println ( getSum ( n , k ) ) ; } public static int sumPowersK ( int n , int k ) { int sum = 0 ; int num = 1 ; while ( num <= n ) { sum += num ; num *= k ; } return sum ; } public static int getSum ( int n , int k ) { int pwrK = sumPowersK ( n , k ) ; int sumAll = ( n * ( n + 1 ) ) / 2 ; return ( sumAll - pwrK ) ; } }
public class Main { public static void main ( String [ ] args ) { int A = 2 ; int B = 5 ; int C = 7 ; int D = 8 ; System . out . println ( XandYandZintercept ( A , B , C , D ) ) ; } public static double [ ] XandYandZintercept ( int A , int B , int C , int D ) { double x = - D / A ; double y = - D / B ; double z = - D / C ; return new double [ ] { x , y , z } ; } }
public class Main { public static void maxSum ( int [ ] arr , int n ) { int s = 0 ; List < Integer > l = new ArrayList < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { s += Math . abs ( arr [ i ] ) ; if ( arr [ i ] >= 0 ) { continue ; } if ( i == 0 ) { l . add ( i + 1 ) ; } else { l . add ( i + 1 ) ; l . add ( i ) ; } } System . out . println ( s ) ; for ( int num : l ) { System . out . print ( num + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 4 ; int [ ] a = { 1 , - 2 , - 3 , 4 } ; maxSum ( a , n ) ; } }
public class Main { static final int MAX = 1000 ; public static void main ( String [ ] args ) { String s = " Mr ▁ John ▁ Smith ▁ " ; s = replaceSpaces ( s ) ; System . out . println ( s ) ; } public static String replaceSpaces ( String string ) { string = string . trim ( ) ; int i = string . length ( ) ; int space_count = string . length ( ) - string . replace ( " ▁ " , " " ) . length ( ) ; int new_length = i + space_count * 2 ; if ( new_length > MAX ) { return " - 1" ; } char [ ] str = new char [ new_length ] ; int index = new_length - 1 ; for ( int f = i - 1 ; f >= 0 ; f -- ) { if ( string . charAt ( f ) == ' ▁ ' ) { str [ index ] = '0' ; str [ index - 1 ] = '2' ; str [ index - 2 ] = ' % ' ; index = index - 3 ; } else { str [ index ] = string . charAt ( f ) ; index -- ; } } return new String ( str ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String X = scanner . nextLine ( ) ; int D = Integer . parseInt ( scanner . nextLine ( ) ) ; char [ ] ans = X . toCharArray ( ) ; boolean [ ] done = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( D == 0 ) { break ; } if ( ans [ i ] == '0' ) { ans [ i ] = '1' ; done [ i ] = true ; D -- ; } } for ( int i = N - 1 ; i >= 0 ; i -- ) { if ( D == 0 ) { break ; } if ( ans [ i ] == '1' && ! done [ i ] ) { ans [ i ] = '0' ; D -- ; } } System . out . println ( String . valueOf ( ans ) ) ; } } ```
public class Main { public static void main ( String [ ] args ) { int l = 10 ; int r = 20 ; System . out . println ( count ( l , r ) ) ; } public static boolean check ( int n ) { int m = n ; while ( n != 0 ) { int r = n % 10 ; if ( r > 0 ) { if ( m % r != 0 ) { return false ; } } n = n / 10 ; } return true ; } public static int count ( int l , int r ) { int ans = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( check ( i ) ) { ans = ans + 1 ; } } return ans ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int da = a [ 0 ] ; int db = a [ 1 ] ; if ( da > db ) { if ( da == 9 && db == 1 ) { System . out . println ( 9 + " ▁ " + 10 ) ; } else { System . out . println ( - 1 ) ; } } else if ( da == db ) { System . out . println ( String . valueOf ( da ) + "0" + " ▁ " + String . valueOf ( db ) + "1" ) ; } else { if ( db - da != 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( da + " ▁ " + db ) ; } } } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( String s : input ) { a . add ( Integer . parseInt ( s ) ) ; } ArrayList < Integer > differences = new ArrayList < > ( ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { differences . add ( a . get ( i + 2 ) - a . get ( i ) ) ; } int minDifference = Collections . min ( differences ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { differences . add ( a . get ( i + 1 ) - a . get ( i ) ) ; } int maxDifference = Collections . max ( differences ) ; System . out . println ( Math . max ( minDifference , maxDifference ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n % 4 == 0 ) { System . out . println ( "4" ) ; } else { System . out . println ( "0" ) ; } } }
``` java import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = Integer . parseInt ( scanner . nextLine ( ) ) ; String input = scanner . nextLine ( ) ; char [ ] num = input . toCharArray ( ) ; Arrays . sort ( num ) ; int sum = 0 ; for ( int i = 0 ; i < num . length ; i ++ ) { sum += ( int ) num [ i ] - ( int ) '0' ; } if ( sum >= k ) { System . out . println ( 0 ) ; } else { int count = 0 ; int i = 0 ; while ( sum < k ) { sum += 9 - ( ( int ) num [ i ] - ( int ) '0' ) ; i ++ ; count ++ ; } System . out . println ( count ) ; } } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int A = scanner . nextInt ( ) ; int B = scanner . nextInt ( ) ; int x = n ; int i = 0 ; System . out . println ( f ( x , i , k , A , B ) ) ; } public static int f ( int x , int i , int k , int A , int B ) { if ( x == 1 ) { return i ; } else if ( x % k == 0 && B <= ( x - x / k ) * A ) { return f ( x / k , i + B , k , A , B ) ; } else if ( x % k == 0 ) { return f ( 1 , i + A * ( x - 1 ) , k , A , B ) ; } else { return f ( x - x % k , i + A * ( x % k ) , k , A , B ) ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 1234 ; System . out . println ( digSum ( n ) ) ; } public static int digSum ( int n ) { int sum = 0 ; while ( n > 0 || sum > 9 ) { if ( n == 0 ) { n = sum ; sum = 0 ; } sum += n % 10 ; n = n / 10 ; } return sum ; } }
int n , m ; Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; n = Integer . parseInt ( input [ 0 ] ) ; m = Integer . parseInt ( input [ 1 ] ) ; String s = scanner . nextLine ( ) ; String t = scanner . nextLine ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; int ans = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { if ( i < n ) dp [ i + 1 ] [ j ] = Math . max ( dp [ i + 1 ] [ j ] , dp [ i ] [ j ] - 1 ) ; if ( j < m ) dp [ i ] [ j + 1 ] = Math . max ( dp [ i ] [ j + 1 ] , dp [ i ] [ j ] - 1 ) ; if ( i < n && j < m && s . charAt ( i ) == t . charAt ( j ) ) dp [ i + 1 ] [ j + 1 ] = Math . max ( dp [ i + 1 ] [ j + 1 ] , dp [ i ] [ j ] + 2 ) ; ans = Math . max ( ans , dp [ i ] [ j ] ) ; } } System . out . println ( ans ) ;
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( n + " th ▁ Centered ▁ heptagonal ▁ number ▁ : ▁ " + centered_heptagonal_num ( n ) ) ; } public static int centered_heptagonal_num ( int n ) { return ( 7 * n * n - 7 * n + 2 ) / 2 ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 13 , 12 , 11 , 15 } ; int n = arr . length ; System . out . println ( missingNum ( arr , n ) ) ; } public static int missingNum ( int [ ] arr , int n ) { int minvalue = Integer . MAX_VALUE ; for ( int num : arr ) { if ( num < minvalue ) { minvalue = num ; } } int xornum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xornum ^= ( minvalue ) ^ arr [ i ] ; minvalue = minvalue + 1 ; } return xornum ^ minvalue ; } }
public class Main { public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( smallestPermute ( n ) ) ; } public static String smallestPermute ( int n ) { char [ ] res = new char [ n + 1 ] ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { res [ i ] = ( char ) ( 48 + i + 2 ) ; } else { res [ i ] = ( char ) ( 48 + i ) ; } } } else { for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( i % 2 == 0 ) { res [ i ] = ( char ) ( 48 + i + 2 ) ; } else { res [ i ] = ( char ) ( 48 + i ) ; } } res [ n - 1 ] = ( char ) ( 48 + n - 2 ) ; res [ n - 2 ] = ( char ) ( 48 + n ) ; res [ n - 3 ] = ( char ) ( 48 + n - 1 ) ; } return new String ( res ) ; } }
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { int K = 3 ; int [ ] a = { 1 , 2 , 3 , 7 } ; int n = a . length ; System . out . println ( minOperations ( a , n , K ) ) ; } public static int minOperations ( int [ ] a , int n , int K ) { HashMap < Integer , Boolean > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( a [ i ] ) && map . get ( a [ i ] ) ) { return 0 ; } map . put ( a [ i ] , true ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] & K ; } map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) { map . put ( b [ i ] , true ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( a [ i ] ) && map . get ( a [ i ] ) ) { return 1 ; } } map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( b [ i ] ) && map . get ( b [ i ] ) ) { return 2 ; } map . put ( b [ i ] , true ) ; } return - 1 ; } }
``` java import java . util . Scanner ; public class Main { static char [ ] [ ] a ; static int w , h ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { w = scanner . nextInt ( ) ; h = scanner . nextInt ( ) ; if ( w == 0 && h == 0 ) { break ; } a = new char [ h ] [ w ] ; int wans = 0 ; int bans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { a [ i ] = scanner . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < w ; i ++ ) { for ( int j = 0 ; j < h ; j ++ ) { if ( a [ j ] [ i ] == ' . ' ) { int [ ] result = bfs ( j , i ) ; int wc = result [ 0 ] ; int bc = result [ 1 ] ; int res = result [ 2 ] ; if ( wc > 0 && bc == 0 ) { wans += res ; } else if ( wc == 0 && bc > 0 ) { bans += res ; } } } } System . out . println ( bans + " ▁ " + wans ) ; } } public static int [ ] bfs ( int i , int j ) { if ( a [ i ] [ j ] == ' . ' ) { a [ i ] [ j ] = ' # ' ; } int res = 1 ; int wc = 0 ; int bc = 0 ; for ( int dy = - 1 ; dy <= 1 ; dy ++ ) { for ( int dx = - 1 ; dx <= 1 ; dx ++ ) { if ( ( dx == 0 && dy != 0 ) || ( dx != 0 && dy == 0 ) ) { continue ; } int ny = i + dy ; int nx = j + dx ; if ( 0 <= nx && nx <= w - 1 && 0 <= ny && ny <= h - 1 && a [ ny ] [ nx ] != ' # ' ) { if ( a [ ny ] [ nx ] == ' . ' ) { int [ ] result = bfs ( ny , nx ) ; wc += result [ 0 ] ; bc += result [ 1 ] ; res += result [ 2 ] ; } else if ( a [ ny ] [ nx ] == ' W ' ) { wc
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = Integer . parseInt ( scanner . nextLine ( ) ) ; if ( a > 59 && 360 % ( 180 - a ) == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int NUM_COLORS = 7 ; int BALLS_PER_COLOR = 10 ; int NUM_PICKED = 20 ; int DECIMALS = 9 ; int [ ] numerator = { 0 } ; explore ( NUM_PICKED , BALLS_PER_COLOR , new int [ ] { } , numerator ) ; BigInteger denominator = binomial ( NUM_COLORS * BALLS_PER_COLOR , NUM_PICKED ) ; BigInteger ans = new BigInteger ( String . valueOf ( numerator [ 0 ] ) ) . multiply ( BigInteger . valueOf ( NUM_COLORS ) ) . divide ( denominator ) ; return formatFraction ( ans , DECIMALS ) ; } public static void explore ( int remain , int limit , int [ ] history , int [ ] numerator ) { if ( remain == 0 ) { int [ ] hist = new int [ NUM_COLORS ] ; for ( int x : history ) { hist [ x - 1 ] ++ ; } int count = factorial ( NUM_COLORS ) ; for ( int x : hist ) { count = divideExactly ( count , factorial ( x ) ) ; } for ( int x : hist ) { count = count . multiply ( binomial ( BALLS_PER_COLOR , x ) ) ; } int distinctColors = history . length ; numerator [ 0 ] += count . multiply ( BigInteger . valueOf ( distinctColors ) ) . intValue ( ) ; } else if ( history . length < NUM_COLORS ) { for ( int i = Math . min ( limit , remain ) ; i > 0 ; i -- ) { int [ ] newHistory = new int [ history . length + 1 ] ; System . arraycopy ( history , 0 , newHistory , 0 , history . length ) ; newHistory [ history . length ] = i ; explore ( remain - i , i , newHistory , numerator ) ; } } } public static String formatFraction ( BigInteger val , int digits ) { if ( digits <= 0 ) { throw new IllegalArgumentException ( ) ; } if ( val . compareTo ( BigInteger . ZERO ) < 0 ) { return " - " + formatFraction ( val . negate ( ) , digits ) ; } String s = String . format ( " % 0" + ( digits + 1 ) + " d " , val . multiply ( BigInteger . TEN . pow ( digits ) ) . intValue ( ) ) ; return s . substring ( 0 , s . length ( ) - digits ) + " . " + s . substring ( s . length ( ) - digits ) ; } public static int factorial ( int n ) { int result = 1 ; for ( int
int f = 1 ; String [ ] input1 = new Scanner ( System . in ) . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int s = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = new Scanner ( System . in ) . nextLine ( ) . split ( " ▁ " ) ; int h = Integer . parseInt ( input2 [ 0 ] ) ; int m = Integer . parseInt ( input2 [ 1 ] ) ; int h1 = h ; int m1 = m ; if ( h * 60 + m - s > 0 ) { System . out . println ( 0 + " ▁ " + 0 ) ; f = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { int g1 = h1 * 60 + m1 ; int g2 = h * 60 + m ; if ( g2 - g1 > 2 * s + 1 && f == 1 ) { System . out . println ( ( g1 + s + 1 ) / 60 + " ▁ " + ( g1 + s + 1 ) % 60 ) ; f = 0 ; } h1 = h ; m1 = m ; if ( i != n - 1 ) { String [ ] input = new Scanner ( System . in ) . nextLine ( ) . split ( " ▁ " ) ; h = Integer . parseInt ( input [ 0 ] ) ; m = Integer . parseInt ( input [ 1 ] ) ; } } if ( f == 1 ) { int g1 = h1 * 60 + m1 ; System . out . println ( ( g1 + s + 1 ) / 60 + " ▁ " + ( g1 + s + 1 ) % 60 ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( b == 1 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; System . out . println ( a + " ▁ " + ( a * b ) + " ▁ " + ( a * b + a ) ) ; } } } }
while ( true ) { String [ ] input = new Scanner ( System . in ) . nextLine ( ) . split ( " ▁ " ) ; String r = input [ 0 ] ; String a = input [ 1 ] ; if ( r . equals ( "0" ) ) { break ; } int h = 0 ; for ( int i = 0 ; i < r . length ( ) ; i ++ ) { if ( r . charAt ( i ) == a . charAt ( i ) ) { h ++ ; } } int b = - h ; for ( int i = 0 ; i < r . length ( ) ; i ++ ) { if ( a . contains ( String . valueOf ( r . charAt ( i ) ) ) ) { b ++ ; } } System . out . println ( h + " ▁ " + b ) ; }
``` java public class Main { static int findMaxValue ( int [ ] arr , int n ) { int MIN = - 100000000 ; if ( n < 4 ) { System . out . println ( " The ▁ array ▁ should ▁ have ▁ at ▁ least ▁ 4 ▁ elements " ) ; return MIN ; } int [ ] table1 = new int [ n + 1 ] ; int [ ] table2 = new int [ n ] ; int [ ] table3 = new int [ n - 1 ] ; int [ ] table4 = new int [ n - 2 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) { table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; } for ( int i = n - 3 ; i >= 0 ; i -- ) { table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ; } for ( int i = n - 4 ; i >= 0 ; i -- ) { table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ; } return table4 [ 0 ] ; } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 8 , 9 , 2 , 20 } ; int n = arr . length ; System . out . println ( findMaxValue ( arr , n ) ) ; } } ```
public class Main { public static void centeredHexagonalSeries ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( 3 * i * ( i - 1 ) + 1 + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 10 ; centeredHexagonalSeries ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String target = scanner . nextLine ( ) ; List < String > list_abc = Arrays . asList ( " A " , " B " , " C " ) ; List < List < Object > > old = new ArrayList < > ( ) ; List < List < Object > > new_ = new ArrayList < > ( ) ; List < List < String > > check = new ArrayList < > ( ) ; boolean flag = false ; if ( target . contains ( " ABC " ) ) { List < Object > temp = new ArrayList < > ( ) ; temp . add ( target ) ; temp . add ( new ArrayList < > ( ) ) ; old . add ( temp ) ; } while ( ! old . isEmpty ( ) && ! flag ) { for ( List < Object > i : old ) { if ( i . get ( 0 ) . equals ( " ABC " ) ) { check . add ( ( List < String > ) i . get ( 1 ) ) ; flag = true ; break ; } for ( String j : list_abc ) { String element = ( ( String ) i . get ( 0 ) ) . replace ( " ABC " , j ) ; if ( element . contains ( " ABC " ) ) { List < Object > temp = new ArrayList < > ( ) ; temp . add ( element ) ; List < String > tempList = new ArrayList < > ( ( List < String > ) i . get ( 1 ) ) ; tempList . add ( j ) ; temp . add ( tempList ) ; new_ . add ( temp ) ; } } } old = new_ ; new_ = new ArrayList < > ( ) ; } flag = false ; for ( List < String > i : check ) { String abc = " ABC " ; List < String > li = new ArrayList < > ( i ) ; Collections . reverse ( li ) ; for ( String j : li ) { abc = abc . replace ( j , " ABC " ) ; } if ( abc . equals ( target ) ) { flag = true ; } } System . out . println ( flag ? " Yes " : " No " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; String [ ] lists = new String [ n ] ; int sq = 0 ; int l = 0 ; int k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { lists [ i ] = scanner . nextLine ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { sq = lists [ i ] . length ( ) - lists [ i ] . replace ( " B " , " " ) . length ( ) ; if ( sq != 0 ) { sq = ( sq + 1 ) / 2 ; l = i ; k = lists [ i ] . indexOf ( " B " ) ; break ; } } System . out . println ( ( l + sq ) + " ▁ " + ( k + sq ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] [ ] matrix = { { 1 , 2 , 3 , 4 , - 10 } , { 5 , 6 , 7 , 8 , 6 } , { 1 , 2 , 11 , 3 , 4 } , { 5 , 6 , 70 , 5 , 8 } , { 4 , 9 , 7 , 1 , - 5 } } ; diagonalsMinMax ( matrix ) ; } public static void diagonalsMinMax ( int [ ] [ ] mat ) { int n = mat . length ; if ( n == 0 ) { return ; } int principalMin = mat [ 0 ] [ 0 ] ; int principalMax = mat [ 0 ] [ 0 ] ; int secondaryMin = mat [ n - 1 ] [ 0 ] ; int secondaryMax = mat [ n - 1 ] [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( i == j ) { if ( mat [ i ] [ j ] < principalMin ) { principalMin = mat [ i ] [ j ] ; } if ( mat [ i ] [ j ] > principalMax ) { principalMax = mat [ i ] [ j ] ; } } if ( ( i + j ) == ( n - 1 ) ) { if ( mat [ i ] [ j ] < secondaryMin ) { secondaryMin = mat [ i ] [ j ] ; } if ( mat [ i ] [ j ] > secondaryMax ) { secondaryMax = mat [ i ] [ j ] ; } } } } System . out . println ( " Principal ▁ Diagonal ▁ Smallest ▁ Element : ▁ " + principalMin ) ; System . out . println ( " Principal ▁ Diagonal ▁ Greatest ▁ Element : ▁ " + principalMax ) ; System . out . println ( " Secondary ▁ Diagonal ▁ Smallest ▁ Element : ▁ " + secondaryMin ) ; System . out . println ( " Secondary ▁ Diagonal ▁ Greatest ▁ Element : ▁ " + secondaryMax ) ; } }
int n = 5 ; public void diagonalsMinMax ( int [ ] [ ] mat ) { if ( n == 0 ) { return ; } int principalMin = mat [ 0 ] [ 0 ] ; int principalMax = mat [ 0 ] [ 0 ] ; int secondaryMin = mat [ n - 1 ] [ 0 ] ; int secondaryMax = mat [ n - 1 ] [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( mat [ i ] [ i ] < principalMin ) { principalMin = mat [ i ] [ i ] ; } if ( mat [ i ] [ i ] > principalMax ) { principalMax = mat [ i ] [ i ] ; } if ( mat [ n - 1 - i ] [ i ] < secondaryMin ) { secondaryMin = mat [ n - 1 - i ] [ i ] ; } if ( mat [ n - 1 - i ] [ i ] > secondaryMax ) { secondaryMax = mat [ n - 1 - i ] [ i ] ; } } System . out . println ( " Principal ▁ Diagonal ▁ Smallest ▁ Element : ▁ " + principalMin ) ; System . out . println ( " Principal ▁ Diagonal ▁ Greatest ▁ Element : ▁ " + principalMax ) ; System . out . println ( " Secondary ▁ Diagonal ▁ Smallest ▁ Element : ▁ " + secondaryMin ) ; System . out . println ( " Secondary ▁ Diagonal ▁ Greatest ▁ Element : ▁ " + secondaryMax ) ; } int [ ] [ ] matrix = { { 1 , 2 , 3 , 4 , - 10 } , { 5 , 6 , 7 , 8 , 6 } , { 1 , 2 , 11 , 3 , 4 } , { 5 , 6 , 70 , 5 , 8 } , { 4 , 9 , 7 , 1 , - 5 } } ; diagonalsMinMax ( matrix ) ;
public class Main { public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } public static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( " Invalid ▁ Input " ) ; return - 1 ; } int sm = 0 ; int count = 0 ; while ( n >= 1 ) { count = count + 1 ; sm = sm + n ; n = n - 2 ; } return sm / count ; } }
public class Main { public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } public static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( " Invalid ▁ Input " ) ; return - 1 ; } return ( n + 1 ) / 2 ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; if ( areElementsContiguous ( arr ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean areElementsContiguous ( int [ ] arr ) { Set < Integer > us = new HashSet < > ( ) ; for ( int i : arr ) { us . add ( i ) ; } int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( us . contains ( curr_ele ) ) { count ++ ; curr_ele -- ; } curr_ele = arr [ 0 ] + 1 ; while ( us . contains ( curr_ele ) ) { count ++ ; curr_ele ++ ; } return count == us . size ( ) ; } }
import java . util . ArrayDeque ; import java . util . Deque ; public class Main { static Deque < Integer > zero = new ArrayDeque < > ( ) ; static Deque < Integer > one = new ArrayDeque < > ( ) ; public static int getLeftMostZero ( ) { if ( zero . isEmpty ( ) ) { return - 1 ; } zero . pollFirst ( ) ; return 0 ; } public static int getLeftMostOne ( ) { if ( one . isEmpty ( ) ) { return - 1 ; } one . pollFirst ( ) ; return 1 ; } public static int getLeftMostElement ( ) { if ( zero . isEmpty ( ) && one . isEmpty ( ) ) { return - 1 ; } else if ( zero . isEmpty ( ) ) { one . pollFirst ( ) ; return 1 ; } else if ( one . isEmpty ( ) ) { zero . pollFirst ( ) ; return 0 ; } int res = zero . peekFirst ( ) < one . peekFirst ( ) ? 0 : 1 ; if ( res == 0 ) { zero . pollFirst ( ) ; } else { one . pollFirst ( ) ; } return res ; } public static void performQueries ( int [ ] arr , int n , int [ ] queries , int q ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { zero . add ( i ) ; } else { one . add ( i ) ; } } for ( int i = 0 ; i < q ; i ++ ) { int type = queries [ i ] ; if ( type == 1 ) { System . out . println ( getLeftMostZero ( ) ) ; } else if ( type == 2 ) { System . out . println ( getLeftMostOne ( ) ) ; } else if ( type == 3 ) { System . out . println ( getLeftMostElement ( ) ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 0 , 1 , 1 , 1 } ; int n = arr . length ; int [ ] queries = { 1 , 3 , 1 } ; int q = queries . length ; performQueries ( arr , n , queries , q ) ; } }
public class Main { public static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; if ( x < 0 ) { x = - 1 ; } else { x = 1 ; } System . out . print ( val * x + " ▁ 0 ▁ " ) ; if ( y < 0 ) { y = - 1 ; } else { y = 1 ; } System . out . print ( "0 ▁ " + val * y ) ; } public static void main ( String [ ] args ) { int x = 3 ; int y = 3 ; Vertices ( x , y ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 1 , 1 , 1 , 2 , 1 , 3 } ; int n = a . length ; getSum ( a , n ) ; } public static void getSum ( int [ ] a , int n ) { int [ ] P = new int [ n ] ; P [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { P [ i ] = a [ i ] + P [ i - 1 ] ; } int S = P [ n - 1 ] ; Map < Integer , Integer > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hash . put ( P [ i ] , 1 ) ; } Set < Integer > res = new HashSet < > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( S ) ; i ++ ) { if ( S % i == 0 ) { boolean pres = true ; int div1 = i ; int div2 = S / i ; for ( int j = div1 ; j <= S ; j += div1 ) { if ( ! hash . containsKey ( j ) ) { pres = false ; break ; } } if ( pres && div1 != S ) { res . add ( div1 ) ; } pres = true ; for ( int j = S / i ; j <= S ; j += S / i ) { if ( ! hash . containsKey ( j ) ) { pres = false ; break ; } } if ( pres && div2 != S ) { res . add ( div2 ) ; } } } if ( res . size ( ) == 0 ) { System . out . println ( " - 1" ) ; return ; } for ( int i : res ) { System . out . print ( i + " ▁ " ) ; } } }
public class Main { public static void originalArray ( int [ ] greater , int n ) { List < Integer > temp = new ArrayList < > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { temp . add ( i ) ; } int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int k = n - greater [ i ] - i ; arr [ i ] = temp . get ( k ) ; temp . remove ( k ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 6 , 3 , 2 , 1 , 0 , 1 , 0 } ; int n = arr . length ; originalArray ( arr , n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String x = scanner . nextLine ( ) ; int a = 0 , b = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == x . charAt ( 0 ) ) { a ++ ; } else if ( s . charAt ( j ) == x . charAt ( 1 ) ) { b ++ ; } else { ans = ans + Math . min ( a , b ) ; a = 0 ; b = 0 ; } } ans = ans + Math . min ( a , b ) ; } System . out . println ( ans ) ; } }
public class Solution { public int findRadius ( int [ ] houses , int [ ] heaters ) { Arrays . sort ( heaters ) ; int [ ] newHeaters = Arrays . copyOf ( heaters , heaters . length + 1 ) ; newHeaters [ heaters . length ] = Integer . MAX_VALUE ; int i = 0 ; int r = 0 ; Arrays . sort ( houses ) ; for ( int x : houses ) { while ( x >= ( newHeaters [ i ] + newHeaters [ i + 1 ] ) / 2.0 ) { i ++ ; } r = Math . max ( r , Math . abs ( newHeaters [ i ] - x ) ) ; } return r ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] houses = { 1 , 2 , 3 } ; int [ ] heaters = { 2 } ; int out = sObj . findRadius ( houses , heaters ) ; System . out . println ( out ) ; } }
import java . util . stream . * ; import java . util . function . * ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { IntPredicate cond = i -> ( i % 5 != 0 ) && ( ! eulerlib . isPrime ( i ) ) && ( ( i - 1 ) % findLeastDivisibleRepunit ( i ) == 0 ) ; int ans = IntStream . iterate ( 7 , i -> i + 2 ) . filter ( cond ) . limit ( 25 ) . sum ( ) ; return Integer . toString ( ans ) ; } public static int findLeastDivisibleRepunit ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) { return 0 ; } int sum = 1 ; int pow = 1 ; int k = 1 ; while ( sum % n != 0 ) { k ++ ; pow = ( pow * 10 ) % n ; sum = ( sum + pow ) % n ; } return k ; } }
import java . lang . Math ; public class Main { static int res = 0 ; public static void main ( String [ ] args ) { System . out . println ( check ( 10 , 2 ) ) ; } public static int check ( int x , int n ) { return checkRecursive ( x , x , 0 , n ) ; } public static int checkRecursive ( int num , int x , int k , int n ) { if ( x == 0 ) { res += 1 ; } int r = ( int ) Math . floor ( Math . pow ( num , ( 1.0 / n ) ) ; for ( int i = k + 1 ; i <= r ; i ++ ) { int a = x - ( int ) Math . pow ( i , n ) ; if ( a >= 0 ) { checkRecursive ( num , x - ( int ) Math . pow ( i , n ) , i , n ) ; } } return res ; } }
import java . util . Scanner ; import java . util . List ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String input = scanner . nextLine ( ) ; String [ ] inputArr = input . split ( " ▁ " ) ; List < Integer > S = new ArrayList < > ( ) ; for ( String s : inputArr ) { S . add ( Integer . parseInt ( s ) ) ; } int length = S . size ( ) - 1 ; for ( int bit = 0 ; bit < Math . pow ( 2 , length ) ; bit ++ ) { int ans = S . get ( 0 ) ; List < String > ope = new ArrayList < > ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( bit & ( 1 << i ) ) != 0 ) { ope . add ( " + " ) ; } else { ope . add ( " - " ) ; } } for ( int i = 1 ; i <= length ; i ++ ) { if ( ope . get ( i - 1 ) . equals ( " + " ) ) { ans += S . get ( i ) ; } else { ans -= S . get ( i ) ; } } if ( ans == 7 ) { System . out . printf ( " % d % s % d % s % d % s % d = 7 \n " , S . get ( 0 ) , ope . get ( 0 ) , S . get ( 1 ) , ope . get ( 1 ) , S . get ( 2 ) , ope . get ( 2 ) , S . get ( 3 ) ) ; break ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] [ ] ABs = new int [ N ] [ 2 ] ; int bsum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; ABs [ i ] [ 0 ] = Integer . parseInt ( input [ 0 ] ) ; ABs [ i ] [ 1 ] = Integer . parseInt ( input [ 1 ] ) ; bsum += ABs [ i ] [ 1 ] ; } int [ ] [ ] dp = new int [ N + 1 ] [ bsum + 1 ] ; for ( int i = 0 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= bsum ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int A = ABs [ i ] [ 0 ] ; int B = ABs [ i ] [ 1 ] ; for ( int j = i ; j >= 0 ; j -- ) { for ( int k = 0 ; k <= bsum ; k ++ ) { if ( dp [ j ] [ k ] == - 1 ) { continue ; } int nk = Math . min ( bsum , k + 2 * A - B ) ; dp [ j + 1 ] [ nk ] = Math . max ( dp [ j + 1 ] [ nk ] , dp [ j ] [ k ] + B ) ; } } } int [ ] answer = new int [ N ] ; for ( int j = 1 ; j <= N ; j ++ ) { for ( int k = 0 ; k <= bsum ; k ++ ) { if ( dp [ j ] [ k ] == - 1 ) { continue ; } answer [ j - 1 ] = Math . max ( answer [ j - 1 ] , dp [ j ] [ k ] + k ) ; } } for ( int a : answer ) { System . out . print ( a / 2 + " ▁ " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n < 10 ) { System . out . println ( n ) ; } else { int l = String . valueOf ( n ) . length ( ) - 1 ; int p = Integer . parseInt ( "9" . repeat ( l ) ) ; int t = n - p ; int s = 0 ; while ( t > 0 ) { s += t % 10 ; t /= 10 ; } System . out . println ( s + 9 * l ) ; } } }
public class Main { public static void main ( String [ ] args ) { int a = 3 ; int b = 5 ; thirdNumber ( a , b ) ; } public static boolean prime ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( i * i > n + 1 ) { break ; } if ( n % i == 0 ) { return false ; } } return true ; } public static void thirdNumber ( int a , int b ) { int summ = a + b ; int temp = 1 ; if ( ( summ & 1 ) == 1 ) { temp = 2 ; } while ( ! prime ( summ + temp ) ) { temp += 2 ; } System . out . println ( temp ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 6 ; int m = 6 ; int a = 4 ; System . out . println ( squares ( n , m , a ) ) ; } public static int squares ( int n , int m , int a ) { return ( ( m + a - 1 ) / a ) * ( ( n + a - 1 ) / a ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { String [ ] inputs = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( inputs [ 0 ] ) ; int m = Integer . parseInt ( inputs [ 1 ] ) ; if ( n >= 6 && n % m == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int a = 7 ; int b = 30 ; System . out . println ( " Count ▁ of ▁ Cubes ▁ is ▁ " + countCubes ( a , b ) ) ; } public static int countCubes ( int a , int b ) { int cnt = 0 ; for ( int i = a ; i <= b ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j * j * j > i ) { break ; } if ( j * j * j == i ) { cnt ++ ; } } } return cnt ; } }
import java . util . * ; import java . util . Map . Entry ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; List < Integer > aa = new ArrayList < > ( ) ; for ( String num : input . nextLine ( ) . split ( " ▁ " ) ) { aa . add ( Integer . parseInt ( num ) ) ; } Map < Integer , Integer > cs_a0 = new HashMap < > ( ) ; Map < Integer , Integer > cs_a1 = new HashMap < > ( ) ; for ( int i = 0 ; i < aa . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { cs_a0 . put ( aa . get ( i ) , cs_a0 . getOrDefault ( aa . get ( i ) , 0 ) + 1 ) ; } else { cs_a1 . put ( aa . get ( i ) , cs_a1 . getOrDefault ( aa . get ( i ) , 0 ) + 1 ) ; } } List < Entry < Integer , Integer > > vs_a0 = new ArrayList < > ( cs_a0 . entrySet ( ) ) ; vs_a0 . sort ( ( a , b ) -> b . getValue ( ) . compareTo ( a . getValue ( ) ) ) ; List < Entry < Integer , Integer > > vs_a1 = new ArrayList < > ( cs_a1 . entrySet ( ) ) ; vs_a1 . sort ( ( a , b ) -> b . getValue ( ) . compareTo ( a . getValue ( ) ) ) ; if ( ! vs_a0 . get ( 0 ) . getKey ( ) . equals ( vs_a1 . get ( 0 ) . getKey ( ) ) ) { System . out . println ( n - vs_a0 . get ( 0 ) . getValue ( ) - vs_a1 . get ( 0 ) . getValue ( ) ) ; } else { int res = 1 << 30 ; if ( vs_a0 . size ( ) == 1 && vs_a1 . size ( ) == 1 ) { res = n / 2 ; } if ( vs_a0 . size ( ) > 1 ) { res = Math . min ( res , n - vs_a0 . get ( 1 ) . getValue ( ) - vs_a1 . get ( 0 ) . getValue ( ) ) ; } if ( vs_a1 . size ( ) > 1 ) { res = Math . min ( res , n - vs_a0 . get ( 0 ) . getValue ( ) - vs_a1 . get ( 1 ) . getValue ( ) ) ; } System . out . println ( res ) ; } } }
public class Main { public static void subString ( String s , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int len = i + 1 ; len <= n ; len ++ ) { System . out . println ( s . substring ( i , len ) ) ; } } } public static void main ( String [ ] args ) { String s = " abcd " ; subString ( s , s . length ( ) ) ; } }
public class Main { public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } public static void countPrimePosition ( int [ ] arr ) { int c0 = 0 ; int c1 = 0 ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 && isPrime ( i ) ) { c0 ++ ; } if ( arr [ i ] == 1 && isPrime ( i ) ) { c1 ++ ; } } System . out . println ( " Number ▁ of ▁ 0s ▁ = ▁ " + c0 ) ; System . out . println ( " Number ▁ of ▁ 1s ▁ = ▁ " + c1 ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 0 , 1 , 0 , 1 } ; countPrimePosition ( arr ) ; } }
public class Main { public static void angleextcycquad ( int z ) { System . out . print ( " The ▁ exterior ▁ angle ▁ of ▁ the " ) ; System . out . print ( " cyclic ▁ quadrilateral ▁ is ▁ " ) ; System . out . print ( z + " ▁ degrees " ) ; } public static void main ( String [ ] args ) { int z = 48 ; angleextcycquad ( z ) ; } }
public class Main { public static void printMinIndexChar ( String Str , String patt ) { int minIndex = ( int ) Math . pow ( 10 , 9 ) ; int m = Str . length ( ) ; int n = patt . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( patt . charAt ( i ) == Str . charAt ( j ) && j < minIndex ) { minIndex = j ; break ; } } } if ( minIndex != ( int ) Math . pow ( 10 , 9 ) ) { System . out . println ( " Minimum ▁ Index ▁ Character ▁ = ▁ " + Str . charAt ( minIndex ) ) ; } else { System . out . println ( " No ▁ character ▁ present " ) ; } } public static void main ( String [ ] args ) { String Str = " geeksforgeeks " ; String patt = " set " ; printMinIndexChar ( Str , patt ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a != b ) { System . out . println ( " Happy ▁ Alex " ) ; break ; } } System . out . println ( " Poor ▁ Alex " ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 6358 ; int k = 1 ; System . out . println ( maxnumber ( n , k ) ) ; } public static int maxnumber ( int n , int k ) { int ans = 0 ; for ( int j = 0 ; j < k ; j ++ ) { ans = 0 ; int i = 1 ; while ( n / i > 0 ) { int temp = ( n / ( i * 10 ) ) * i + ( n % i ) ; i *= 10 ; if ( temp > ans ) { ans = temp ; } } n = ans ; } return ans ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int N = Integer . parseInt ( input [ 0 ] ) ; int M = Integer . parseInt ( input [ 1 ] ) ; int [ ] L = new int [ N * 2 ] ; Arrays . fill ( L , 0 ) ; for ( int i = 0 ; i < M ; i ++ ) { String [ ] line = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( line [ 0 ] ) ; int l = Integer . parseInt ( line [ 1 ] ) ; for ( int ll = a ; ll < a + l ; ll ++ ) { L [ ll ] = 1 ; } } for ( int i = N ; i < 2 * N ; i ++ ) { L [ i - N ] = Math . max ( L [ i - N ] , L [ i ] ) ; } int left = 0 ; int i = 0 ; while ( L [ i ] == 1 ) { left ++ ; i ++ ; if ( i == N ) { System . out . println ( N + " ▁ " + 1 ) ; System . exit ( 0 ) ; } } int [ ] A = new int [ N - i ] ; int s = 0 ; for ( int j = i ; j < N ; j ++ ) { int li = L [ j ] ; if ( li == 0 ) { if ( s != 0 ) { A [ j - i ] = s ; } s = 0 ; } else { s ++ ; } } if ( s + left != 0 ) { A [ N - i - 1 ] = s + left ; } Arrays . sort ( A ) ; int v = A [ N - i - 1 ] ; int n = 0 ; for ( int a : A ) { if ( a == v ) { n ++ ; } else { System . out . println ( v + " ▁ " + n ) ; n = 1 ; v = a ; } } System . out . println ( v + " ▁ " + n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = input . nextInt ( ) ; } int cntA = 0 , sumA = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sumA += A [ i ] ; if ( i % 2 == 0 ) { if ( sumA <= 0 ) { cntA += Math . abs ( sumA ) + 1 ; sumA += Math . abs ( sumA ) + 1 ; } } else { if ( sumA >= 0 ) { cntA += Math . abs ( sumA ) + 1 ; sumA -= Math . abs ( sumA ) + 1 ; } } } int cntB = 0 , sumB = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sumB += A [ i ] ; if ( i % 2 != 0 ) { if ( sumB <= 0 ) { cntB += Math . abs ( sumB ) + 1 ; sumB += Math . abs ( sumB ) + 1 ; } } else { if ( sumB >= 0 ) { cntB += Math . abs ( sumB ) + 1 ; sumB -= Math . abs ( sumB ) + 1 ; } } } System . out . println ( Math . min ( cntA , cntB ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 1 ; for ( int i = 1 ; i <= 10 ; i ++ ) { System . out . println ( " For ▁ N ▁ = ▁ " + i + " : ▁ " + get_last_two_digit ( i ) ) ; } } public static int get_last_two_digit ( int N ) { if ( N <= 10 ) { int ans = 0 ; int fac = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { fac = fac * i ; ans += fac ; } ans = ans % 100 ; return ans ; } else { return 13 ; } } }
String binaryNumber = "1001" ; int s = Integer . parseInt ( binaryNumber , 2 ) ; System . out . println ( s ) ;
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { double l = 0.70710678 ; double m = 0.5 ; double n = 0.5 ; if ( isPossible ( l , m , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isPossible ( double x , double y , double z ) { double a = x * x + y * y + z * z ; a = Math . round ( a * 100000000.0 ) / 100000000.0 ; if ( Math . ceil ( a ) == 1 && Math . floor ( a ) == 1 ) { return true ; } return false ; } }
public class Main { static int MAX = 1000000 ; static int MOD = ( int ) ( Math . pow ( 10 , 9 ) + 7 ) ; static int [ ] result = new int [ MAX + 1 ] ; static int [ ] fact = new int [ MAX + 1 ] ; public static void preCompute ( ) { fact [ 0 ] = 1 ; result [ 0 ] = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) { fact [ i ] = ( int ) ( ( ( long ) ( fact [ i - 1 ] % MOD ) * i ) % MOD ) ; result [ i ] = ( int ) ( ( ( long ) ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD ) ; } } public static void performQueries ( int [ ] q , int n ) { preCompute ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( result [ q [ i ] ] ) ; } } public static void main ( String [ ] args ) { int [ ] q = { 4 , 5 } ; int n = q . length ; performQueries ( q , n ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < range ; j ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] a = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( a ) ; int sum = a [ a . length - 1 ] ; int neg = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int val = neg + i * ( a [ i ] - a [ i - 1 ] ) ; sum -= val ; neg = val ; } System . out . println ( sum ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 0 , 10 , 2 , - 10 , - 20 } ; int arr_size = arr . length ; int missing = findMissing ( arr , arr_size ) ; System . out . println ( " The ▁ smallest ▁ positive ▁ missing ▁ number ▁ is ▁ " + missing ) ; } public static int segregate ( int [ ] arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } return j ; } public static int findMissingPositive ( int [ ] arr , int size ) { for ( int i = 0 ; i < size ; i ++ ) { if ( Math . abs ( arr [ i ] ) - 1 < size && arr [ Math . abs ( arr [ i ] ) - 1 ] > 0 ) { arr [ Math . abs ( arr [ i ] ) - 1 ] = - arr [ Math . abs ( arr [ i ] ) - 1 ] ; } } for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) { return i + 1 ; } } return size + 1 ; } public static int findMissing ( int [ ] arr , int size ) { int shift = segregate ( arr , size ) ; return findMissingPositive ( Arrays . copyOfRange ( arr , shift , size ) , size - shift ) ; } }
public class Main { static long mod = 1000000007 ; public static void main ( String [ ] args ) { int d = 9 ; int n = 3 ; System . out . println ( countExcluding ( n , d ) ) ; } public static long digitNumber ( int n ) { if ( n == 0 ) { return 1 ; } if ( n == 1 ) { return 9 ; } if ( n % 2 != 0 ) { long temp = digitNumber ( ( n - 1 ) / 2 ) % mod ; return ( 9 * ( temp * temp ) % mod ) % mod ; } else { long temp = digitNumber ( n / 2 ) % mod ; return ( temp * temp ) % mod ; } } public static long countExcluding ( int n , int d ) { if ( d == 0 ) { return ( 9 * digitNumber ( n - 1 ) ) % mod ; } else { return ( 8 * digitNumber ( n - 1 ) ) % mod ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = Integer . parseInt ( inputArr [ j ] ) ; } if ( a [ 0 ] + a [ 1 ] > a [ n - 1 ] ) { System . out . println ( - 1 ) ; } else { System . out . println ( 1 + " ▁ " + 2 + " ▁ " + n ) ; } } } }
public class Main { public static void convert12 ( String str ) { int h1 = str . charAt ( 0 ) - '0' ; int h2 = str . charAt ( 1 ) - '0' ; int hh = h1 * 10 + h2 ; String Meridien = " " ; if ( hh < 12 ) { Meridien = " AM " ; } else { Meridien = " PM " ; } hh %= 12 ; if ( hh == 0 ) { System . out . print ( "12" ) ; for ( int i = 2 ; i < 8 ; i ++ ) { System . out . print ( str . charAt ( i ) ) ; } } else { System . out . print ( hh ) ; for ( int i = 2 ; i < 8 ; i ++ ) { System . out . print ( str . charAt ( i ) ) ; } } System . out . println ( " ▁ " + Meridien ) ; } public static void main ( String [ ] args ) { String str = "17:35:20" ; convert12 ( str ) ; } }
public class Main { public static void main ( String [ ] args ) { String a = " xaxa " ; String b = " xaxaxaxa " ; System . out . println ( countCommonDivisors ( a , b ) ) ; } public static boolean check ( String s , int k ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i % k ) ) { return false ; } } return true ; } public static int countCommonDivisors ( String a , String b ) { int ct = 0 ; int n = a . length ( ) ; int m = b . length ( ) ; for ( int i = 1 ; i <= Math . min ( n , m ) ; i ++ ) { if ( n % i == 0 && m % i == 0 ) { if ( a . substring ( 0 , i ) . equals ( b . substring ( 0 , i ) ) ) { if ( check ( a , i ) && check ( b , i ) ) { ct = ct + 1 ; } } } } return ct ; } }
public class Main { static void printknapSack ( int W , int [ ] wt , int [ ] val , int n ) { int [ ] [ ] K = new int [ n + 1 ] [ W + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int w = 0 ; w <= W ; w ++ ) { if ( i == 0 || w == 0 ) { K [ i ] [ w ] = 0 ; } else if ( wt [ i - 1 ] <= w ) { K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; } else { K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } } int res = K [ n ] [ W ] ; System . out . println ( res ) ; int weight = W ; for ( int i = n ; i > 0 ; i -- ) { if ( res <= 0 ) { break ; } if ( res == K [ i - 1 ] [ weight ] ) { continue ; } else { System . out . println ( wt [ i - 1 ] ) ; res = res - val [ i - 1 ] ; weight = weight - wt [ i - 1 ] ; } } } public static void main ( String [ ] args ) { int [ ] val = { 60 , 100 , 120 } ; int [ ] wt = { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; printknapSack ( W , wt , val , n ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < String [ ] > q = new ArrayList < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] a = scanner . nextLine ( ) . split ( " ▁ " ) ; q . add ( a ) ; } for ( String [ ] j : q ) { for ( String [ ] k : q ) { if ( k . equals ( j ) ) { continue ; } else if ( j [ 0 ] . equals ( k [ k . length - 1 ] ) ) { count ++ ; } else { continue ; } } } System . out . println ( count ) ; } }
public class Main { public static void indexedSequentialSearch ( int [ ] arr , int n , int k ) { int [ ] elements = new int [ 20 ] ; int [ ] indices = new int [ 20 ] ; int j = 0 , ind = 0 ; for ( int i = 0 ; i < n ; i += 3 ) { elements [ ind ] = arr [ i ] ; indices [ ind ] = i ; ind ++ ; } if ( k < elements [ 0 ] ) { System . out . println ( " Not ▁ found " ) ; System . exit ( 0 ) ; } else { int start = 0 , end = 0 ; for ( int i = 1 ; i < ind + 1 ; i ++ ) { if ( k < elements [ i ] ) { start = indices [ i - 1 ] ; end = indices [ i ] ; break ; } } for ( int i = start ; i < end + 1 ; i ++ ) { if ( k == arr [ i ] ) { j = 1 ; break ; } } if ( j == 1 ) { System . out . println ( " Found ▁ at ▁ index ▁ " + i ) ; } else { System . out . println ( " Not ▁ found " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int k = 8 ; indexedSequentialSearch ( arr , n , k ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( largestPalindrome ( n ) ) ; } public static int largestPalindrome ( int n ) { int upper_limit = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { upper_limit = upper_limit * 10 ; upper_limit = upper_limit + 9 ; } int lower_limit = 1 + upper_limit / 10 ; int max_product = 0 ; for ( int i = upper_limit ; i >= lower_limit - 1 ; i -- ) { for ( int j = i ; j >= lower_limit - 1 ; j -- ) { int product = i * j ; if ( product < max_product ) { break ; } int number = product ; int reverse = 0 ; while ( number != 0 ) { reverse = reverse * 10 + number % 10 ; number = number / 10 ; } if ( product == reverse && product > max_product ) { max_product = product ; } } } return max_product ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > seq = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { seq . add ( scanner . nextInt ( ) ) ; } List < Integer > dp = new ArrayList < > ( ) ; dp . add ( seq . get ( 0 ) ) ; for ( int num : seq ) { if ( num > dp . get ( dp . size ( ) - 1 ) ) { dp . add ( num ) ; } else { int index = Collections . binarySearch ( dp , num ) ; if ( index < 0 ) { index = - index - 1 ; } dp . set ( index , num ) ; } } System . out . println ( dp . size ( ) ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int c = Integer . parseInt ( input [ 2 ] ) ; int ans = 0 ; if ( a > 0 ) { a -- ; ans ++ ; } if ( b > 0 ) { b -- ; ans ++ ; } if ( c > 0 ) { c -- ; ans ++ ; } boolean cDown = false ; if ( c > 1 ) { if ( c > 0 && b > 0 ) { c -- ; b -- ; ans ++ ; cDown = true ; } } if ( a > 0 && b > 0 ) { a -- ; b -- ; ans ++ ; } if ( c > 0 && b > 0 && ! cDown ) { c -- ; b -- ; ans ++ ; } if ( a > 0 && c > 0 ) { a -- ; c -- ; ans ++ ; } if ( a > 0 && b > 0 && c > 0 ) { ans ++ ; } System . out . println ( Math . min ( 7 , ans ) ) ; } } } ```
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( input [ i ] ) ; } int [ ] diff = new int [ n - 1 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { diff [ i ] = Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; } int [ ] [ ] dp = new int [ n - 1 ] [ 3 ] ; dp [ 0 ] [ 1 ] = diff [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { dp [ i ] [ 0 ] = Math . max ( Math . max ( dp [ i - 1 ] [ 0 ] , dp [ i - 1 ] [ 1 ] ) , dp [ i - 1 ] [ 2 ] ) ; dp [ i ] [ 1 ] = Math . max ( dp [ i - 1 ] [ 2 ] + diff [ i ] , diff [ i ] ) ; dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] - diff [ i ] ; } System . out . println ( Math . max ( Math . max ( dp [ n - 2 ] [ 0 ] , dp [ n - 2 ] [ 1 ] ) , dp [ n - 2 ] [ 2 ] ) ) ; } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 8 , 1 , 2 } ; int n = arr . length ; System . out . println ( maximumXor ( arr , n ) ) ; } public static int maximumXor ( int [ ] arr , int n ) { List < Integer > sForward = new ArrayList < > ( ) ; List < Integer > sBackward = new ArrayList < > ( ) ; int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { while ( sForward . size ( ) > 0 && arr [ i ] < arr [ sForward . get ( sForward . size ( ) - 1 ) ] ) { ans = Math . max ( ans , arr [ i ] ^ arr [ sForward . get ( sForward . size ( ) - 1 ) ] ) ; sForward . remove ( sForward . size ( ) - 1 ) ; } sForward . add ( i ) ; while ( sBackward . size ( ) > 0 && arr [ n - i - 1 ] < arr [ sBackward . get ( sBackward . size ( ) - 1 ) ] ) { ans = Math . max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward . get ( sBackward . size ( ) - 1 ) ] ) ; sBackward . remove ( sBackward . size ( ) - 1 ) ; } sBackward . add ( n - i - 1 ) ; } return ans ; } }
public class Main { public static void decToHexa ( int n ) { char [ ] hexaDeciNum = new char [ 100 ] ; int i = 0 ; while ( n != 0 ) { int temp = 0 ; temp = n % 16 ; if ( temp < 10 ) { hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ; i = i + 1 ; } else { hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ; i = i + 1 ; } n = ( int ) ( n / 16 ) ; } int j = i - 1 ; while ( j >= 0 ) { System . out . print ( hexaDeciNum [ j ] ) ; j = j - 1 ; } } public static void main ( String [ ] args ) { int n = 2545 ; decToHexa ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = scanner . nextInt ( ) ; } int [ ] C = new int [ 100000 ] ; for ( int ai : A ) { C [ ai ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < 100000 - 2 ; i ++ ) { ans = Math . max ( C [ i ] + C [ i + 1 ] + C [ i + 2 ] , ans ) ; } System . out . println ( ans ) ; } }
while ( true ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int h = Integer . parseInt ( input [ 0 ] ) ; int w = Integer . parseInt ( input [ 1 ] ) ; if ( h == 0 && w == 0 ) { break ; } Map < Character , int [ ] > mp = new HashMap < > ( ) ; for ( int r = 0 ; r < h ; r ++ ) { String s = scanner . nextLine ( ) ; for ( int c = 0 ; c < w ; c ++ ) { mp . put ( s . charAt ( c ) , new int [ ] { r , c } ) ; } } String s = scanner . nextLine ( ) ; int [ ] now = new int [ ] { 0 , 0 } ; int ans = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int [ ] to = mp . get ( s . charAt ( i ) ) ; ans += Math . abs ( now [ 0 ] - to [ 0 ] ) + Math . abs ( now [ 1 ] - to [ 1 ] ) + 1 ; now = to ; } System . out . println ( ans ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; if ( n == 1 ) { System . out . println ( " Hello ▁ World " ) ; } else { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; System . out . println ( a + b ) ; } } }
public class Main { public static void main ( String [ ] args ) { String ss = "100klh564abc365bg " ; System . out . println ( extractMaximum ( ss ) ) ; } public static int extractMaximum ( String ss ) { int num = 0 ; int res = 0 ; for ( int i = 0 ; i < ss . length ( ) ; i ++ ) { if ( ss . charAt ( i ) >= '0' && ss . charAt ( i ) <= '9' ) { num = num * 10 + Integer . parseInt ( String . valueOf ( ss . charAt ( i ) ) ) - 0 ; } else { res = Math . max ( res , num ) ; num = 0 ; } } return Math . max ( res , num ) ; } }
public class Main { static int max = 50009 ; public static void findIndices ( int [ ] arr , int n ) { int [ ] sum = new int [ max ] ; int k = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum [ i ] = sum [ i - 1 ] + arr [ k ] ; k ++ ; } int ans = - 1000000000000000 ; int index_1 = - 1 , index_2 = - 1 , index_3 = - 1 ; for ( int l = 0 ; l <= n ; l ++ ) { int index = 0 ; int vmin = 1000000000000000 ; for ( int r = l ; r <= n ; r ++ ) { if ( sum [ r ] < vmin ) { vmin = sum [ r ] ; index = r ; } if ( sum [ l ] + sum [ r ] - vmin > ans ) { ans = sum [ l ] + sum [ r ] - vmin ; index_1 = l ; index_2 = index ; index_3 = r ; } } } System . out . println ( index_1 + " ▁ " + index_2 + " ▁ " + index_3 ) ; } public static void main ( String [ ] args ) { int [ ] arr = { - 1 , 2 , 3 } ; int n = arr . length ; findIndices ( arr , n ) ; } }
public class Main { public static void printElements ( int [ ] arr , int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 1 , 5 , 4 , 9 , 8 , 7 , 5 } ; int n = arr . length ; printElements ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 7 ; int [ ] arr = { 6 , 9 , 1 , 6 , 1 , 3 , 7 } ; System . out . println ( valueofX ( arr , n ) ) ; } public static int valueofX ( int [ ] ar , int n ) { int summ = 0 ; for ( int i : ar ) { summ += i ; } if ( summ % n == 0 ) { return summ / n ; } else { int A = summ / n ; int B = summ / n + 1 ; int ValueA = 0 ; int ValueB = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ValueA += ( ar [ i ] - A ) * ( ar [ i ] - A ) ; ValueB += ( ar [ i ] - B ) * ( ar [ i ] - B ) ; } if ( ValueA < ValueB ) { return A ; } else { return B ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < n ; k ++ ) { String [ ] xy = scanner . nextLine ( ) . split ( " ▁ " ) ; int x = Integer . parseInt ( xy [ 0 ] ) ; int y = Integer . parseInt ( xy [ 1 ] ) ; String [ ] zStr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] z = new int [ zStr . length ] ; for ( int i = 0 ; i < zStr . length ; i ++ ) { z [ i ] = Integer . parseInt ( zStr [ i ] ) ; } int a = 0 ; for ( int i = 0 ; i < y ; i ++ ) { int c = 0 ; for ( int j : z ) { if ( ( j & ( 1 << i ) ) != 0 ) { c ++ ; } } if ( c > ( x - c ) ) { a += 1 << i ; } } System . out . println ( a ) ; } } }
Scanner scanner = new Scanner ( System . in ) ; List < String > s = new ArrayList < > ( Arrays . asList ( scanner . nextLine ( ) . split ( " " ) ) ) ; s . remove ( s . size ( ) - 1 ) ; for ( int i = 1 ; i < s . size ( ) ; i ++ ) { if ( s . size ( ) % 2 == 1 ) { s . remove ( s . size ( ) - 1 ) ; } else { if ( s . subList ( 0 , s . size ( ) / 2 ) . equals ( s . subList ( s . size ( ) / 2 , s . size ( ) ) ) ) { System . out . println ( s . size ( ) ) ; System . exit ( 0 ) ; } else { s . remove ( s . size ( ) - 1 ) ; } } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } public static int findNth ( int n ) { int count = 0 ; int curr = 19 ; while ( true ) { int sum = 0 ; int x = curr ; while ( x > 0 ) { sum = sum + x % 10 ; x = x / 10 ; } if ( sum == 10 ) { count += 1 ; } if ( count == n ) { return curr ; } curr += 9 ; } } }
import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } public static int findNth ( int n ) { int count = 0 ; for ( int curr : IntStream . iterate ( 0 , i -> i + 1 ) . limit ( Integer . MAX_VALUE ) ) { int sum = 0 ; int x = curr ; while ( x != 0 ) { sum = sum + x % 10 ; x = x / 10 ; } if ( sum == 10 ) { count = count + 1 ; } if ( count == n ) { return curr ; } } return - 1 ; } }
public class Main { public static void main ( String [ ] args ) { int N = 5 ; int S = 11 ; int count = countNumber ( N , S ) ; System . out . println ( count ) ; } public static int countNumber ( int N , int S ) { int countElements = 0 ; int currSum = 0 ; while ( currSum <= S ) { currSum += N ; N = N - 1 ; countElements = countElements + 1 ; } return countElements ; } }
public class Main { public static void main ( String [ ] args ) { String strr = " baaabab " ; String pattern = " * * * * * ba * * * * * ab " ; if ( strrmatch ( strr , pattern , strr . length ( ) , pattern . length ( ) ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean strrmatch ( String strr , String pattern , int n , int m ) { if ( m == 0 ) { return ( n == 0 ) ; } boolean [ ] [ ] lookup = new boolean [ n + 1 ] [ m + 1 ] ; lookup [ 0 ] [ 0 ] = true ; for ( int j = 1 ; j <= m ; j ++ ) { if ( pattern . charAt ( j - 1 ) == ' * ' ) { lookup [ 0 ] [ j ] = lookup [ 0 ] [ j - 1 ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( pattern . charAt ( j - 1 ) == ' * ' ) { lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] || lookup [ i - 1 ] [ j ] ; } else if ( pattern . charAt ( j - 1 ) == ' ? ' || strr . charAt ( i - 1 ) == pattern . charAt ( j - 1 ) ) { lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] ; } else { lookup [ i ] [ j ] = false ; } } } return lookup [ n ] [ m ] ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( ( a | b ) == 0 ) { break ; } Set < Integer > factorA = f ( a ) ; Set < Integer > factorB = f ( b ) ; if ( 2 * Collections . max ( factorA ) - factorA . stream ( ) . mapToInt ( Integer :: intValue ) . sum ( ) > 2 * Collections . max ( factorB ) - factorB . stream ( ) . mapToInt ( Integer :: intValue ) . sum ( ) ) { System . out . println ( " a " ) ; } else { System . out . println ( " b " ) ; } } } public static Set < Integer > f ( int n ) { Set < Integer > a = new HashSet < > ( ) ; int i = 2 ; while ( i * i <= n ) { while ( n % i == 0 ) { a . add ( i ) ; n /= i ; } i ++ ; } if ( n > 1 ) { a . add ( n ) ; } return a ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; int k = 3 ; int ans = nCr ( n + k - 1 , k ) + nCr ( k - 1 , n - 1 ) ; System . out . println ( ans ) ; } public static int nCr ( int n , int r ) { int [ ] fac = new int [ n + 1 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i ; } int ans = fac [ n ] / ( fac [ n - r ] * fac [ r ] ) ; return ans ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a . add ( scanner . nextInt ( ) ) ; } int mx = Collections . max ( a ) ; int hf = 0 ; for ( int x : a ) { if ( Math . abs ( mx - 2 * hf ) > Math . abs ( mx - 2 * x ) ) { hf = x ; } } System . out . println ( mx + " ▁ " + hf ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 10 ; int b = 5 ; int n = 2 ; System . out . println ( powGCD ( a , n , b ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } public static int powGCD ( int a , int n , int b ) { for ( int i = 0 ; i < n + 1 ; i ++ ) { a = a * a ; } return gcd ( a , b ) ; } }
public static int [ ] countingSort ( int [ ] A , int n ) { int k = Arrays . stream ( A ) . max ( ) . getAsInt ( ) ; int [ ] B = new int [ n ] ; int [ ] C = new int [ k + 1 ] ; for ( int j = 0 ; j < n ; j ++ ) { C [ A [ j ] ] += 1 ; } for ( int i = 1 ; i < k + 1 ; i ++ ) { C [ i ] = C [ i ] + C [ i - 1 ] ; } for ( int j = n - 1 ; j >= 0 ; j -- ) { B [ C [ A [ j ] ] - 1 ] = A [ j ] ; C [ A [ j ] ] -= 1 ; } return B ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String s = scanner . next ( ) ; System . out . println ( Math . min ( n / 11 , s . length ( ) - s . replace ( "8" , " " ) . length ( ) ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 50 ; int b = 2 ; System . out . println ( sumOfDigit ( n , b ) ) ; } public static int sumOfDigit ( int n , int b ) { int unitDigit = 0 ; int sum = 0 ; while ( n > 0 ) { unitDigit = n % b ; sum += unitDigit ; n = n / b ; } return sum ; } }
import java . lang . Math ; public class Main { public static void printLargestDivisible ( int n , int [ ] a ) { int c0 = 0 , c5 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { c0 += 1 ; } else { c5 += 1 ; } } c5 = ( int ) Math . floor ( c5 / 9 ) * 9 ; if ( c0 == 0 ) { System . out . print ( - 1 ) ; } else if ( c5 == 0 ) { System . out . print ( 0 ) ; } else { for ( int i = 0 ; i < c5 ; i ++ ) { System . out . print ( 5 ) ; } for ( int i = 0 ; i < c0 ; i ++ ) { System . out . print ( 0 ) ; } } } public static void main ( String [ ] args ) { int [ ] a = { 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 0 , 5 , 5 } ; int n = a . length ; printLargestDivisible ( n , a ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } public static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = j ; k < n ; k ++ ) { for ( int l = k ; l < n ; l ++ ) { if ( i + j + k + l == n ) { counter ++ ; } } } } } return counter ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int S = 30 ; int S1 = 10 ; System . out . println ( numberOfMinutes ( S , S1 ) + " min " ) ; } public static int numberOfMinutes ( int S , int S1 ) { int Min = 0 ; Min = ( int ) ( ( ( S - S1 ) / Math . floor ( S ) ) * 60 ) ; return Min ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] a = scanner . nextLine ( ) . split ( " ▁ " ) ; String [ ] b = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] aInt = new int [ a . length ] ; int [ ] bInt = new int [ b . length ] ; for ( int i = 0 ; i < a . length ; i ++ ) { aInt [ i ] = Integer . parseInt ( a [ i ] ) ; } for ( int i = 0 ; i < b . length ; i ++ ) { bInt [ i ] = Integer . parseInt ( b [ i ] ) ; } System . out . println ( fn ( aInt [ 0 ] , aInt [ 1 ] , aInt [ 2 ] , bInt ) ) ; } public static int fn ( int n , int m , int k , int [ ] L ) { int g = Integer . MAX_VALUE ; for ( int l : L ) { g = Math . min ( g , l ) ; } for ( int i = 0 ; i < L . length ; i ++ ) { L [ i ] -= g ; } List < Integer > op = new ArrayList < > ( ) ; for ( int i = 0 ; i < L . length - 1 ; i ++ ) { op . add ( L [ i + 1 ] - L [ i ] - 1 ) ; } Collections . sort ( op ) ; int dist = n ; for ( int gt = 0 ; gt < n - k ; gt ++ ) { dist += op . get ( gt ) ; } return dist ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 22 ; System . out . println ( onesComplement ( n ) ) ; } public static int onesComplement ( int n ) { int numberOfBits = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) + 1 ; return ( ( 1 << numberOfBits ) - 1 ) ^ n ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int test = 0 ; test < t ; test ++ ) { int w = input . nextInt ( ) ; int h = input . nextInt ( ) ; int n = input . nextInt ( ) ; int w_first = w ; int h_first = h ; if ( n == 1 ) { System . out . println ( " YES " ) ; } else if ( w % 2 == 1 && h % 2 == 1 ) { System . out . println ( " NO " ) ; } else { int num ; if ( w % 2 == 0 && h % 2 == 1 ) { int count = 0 ; while ( w % 2 == 0 ) { w /= 2 ; count ++ ; } if ( w == 1 ) { num = w_first ; } else { num = ( int ) Math . pow ( 2 , count ) ; } } else if ( h % 2 == 0 && w % 2 == 1 ) { int count = 0 ; while ( h % 2 == 0 ) { h /= 2 ; count ++ ; } if ( h == 1 ) { num = h_first ; } else { num = ( int ) Math . pow ( 2 , count ) ; } } else { int num1 = 0 ; int num2 = 0 ; int count = 0 ; while ( w % 2 == 0 ) { w /= 2 ; count ++ ; } if ( w == 1 ) { num1 = w_first ; } else { num1 = ( int ) Math . pow ( 2 , count ) ; } count = 0 ; while ( h % 2 == 0 ) { h /= 2 ; count ++ ; } if ( h == 1 ) { num2 = h_first ; } else { num2 = ( int ) Math . pow ( 2 , count ) ; } num = num1 * num2 ; } if ( num >= n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } } } ```
public class Main { public static void findPoint ( int x1 , int y1 , int x2 , int y2 ) { System . out . println ( " ( " + ( 2 * x2 - x1 ) + " , " + ( 2 * y2 - y1 ) + " ) " ) ; } public static void main ( String [ ] args ) { int x1 = 0 ; int y1 = 0 ; int x2 = 1 ; int y2 = 1 ; findPoint ( x1 , y1 , x2 , y2 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; n += 1 ; int input = scanner . nextInt ( ) ; for ( int i = 0 ; i < input ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; System . out . println ( ( ( Math . min ( Math . min ( a , n - a ) , Math . min ( b , n - b ) ) - 1 ) % 3 ) + 1 ) ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int x = 12 ; int y = 5 ; alter ( x , y ) ; } public static void alter ( int x , int y ) { while ( true ) { if ( x == 0 || y == 0 ) { break ; } if ( x >= 2 * y ) { x = x % ( 2 * y ) ; } else if ( y >= 2 * x ) { y = y % ( 2 * x ) ; } else { break ; } } System . out . println ( " X ▁ = ▁ " + x + " , ▁ Y ▁ = ▁ " + y ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int N = Integer . parseInt ( br . readLine ( ) ) ; int [ ] V = Arrays . stream ( br . readLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; System . out . println ( solve ( N , V ) ) ; } public static int solve ( int N , int [ ] V ) { Arrays . sort ( V ) ; HashMap < Integer , Integer > pos = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { pos . put ( V [ i ] , i ) ; } int best = 2 ; boolean [ ] [ ] done = new boolean [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { int a = V [ i ] ; for ( int j = i + 1 ; j < N ; j ++ ) { if ( done [ i ] [ j ] ) { continue ; } int b = V [ j ] ; int d = b - a ; int c = 2 ; done [ i ] [ j ] = true ; int k = j ; int v = b + d ; while ( pos . containsKey ( v ) ) { done [ k ] [ pos . get ( v ) ] = true ; k = pos . get ( v ) ; c ++ ; v += d ; } best = Math . max ( best , c ) ; } } return best ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int num = input . nextInt ( ) ; for ( int i = 0 ; i < num ; i ++ ) { int lenz = input . nextInt ( ) ; String text = input . next ( ) ; boolean isExist = false ; for ( int j = 0 ; j < lenz - 1 ; j ++ ) { for ( int k = j + 1 ; k < lenz ; k ++ ) { int a = text . substring ( j , k + 1 ) . replaceAll ( " [ ^ a ] " , " " ) . length ( ) ; int b = text . substring ( j , k + 1 ) . replaceAll ( " [ ^ b ] " , " " ) . length ( ) ; if ( a == b ) { System . out . println ( ( j + 1 ) + " ▁ " + ( k + 1 ) ) ; isExist = true ; break ; } } if ( isExist ) { break ; } } if ( ! isExist ) { System . out . println ( " - 1 ▁ - 1" ) ; } } } }
public class Main { static long mod = 1000000007 ; static long inv2 = 500000004 ; public static void main ( String [ ] args ) { String L = "88949273204" ; String R = "98429729474298592" ; System . out . println ( findSum ( L , R ) ) ; } public static long modulo ( String num ) { long res = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { res = ( res * 10 + Integer . parseInt ( String . valueOf ( num . charAt ( i ) ) ) - 0 ) % mod ; } return res ; } public static long findSum ( String L , String R ) { long a = modulo ( L ) ; long b = modulo ( R ) ; long l = ( ( a * ( a - 1 ) ) % mod * inv2 ) % mod ; long r = ( ( b * ( b + 1 ) ) % mod * inv2 ) % mod ; long ret = ( r % mod - l % mod ) ; if ( ret < 0 ) { ret = ret + mod ; } else { ret = ret % mod ; } return ret ; } }
public class Main { static void unsort ( int l , int r , int [ ] a , int k ) { if ( k < 1 || l + 1 == r ) { return ; } k -= 2 ; int mid = ( l + r ) / 2 ; int temp = a [ mid - 1 ] ; a [ mid - 1 ] = a [ mid ] ; a [ mid ] = temp ; unsort ( l , mid , a , k ) ; unsort ( mid , r , a , k ) ; } static void arrayWithKCalls ( int n , int k ) { if ( k % 2 == 0 ) { System . out . println ( " NO ▁ SOLUTION " ) ; return ; } int [ ] a = new int [ n + 2 ] ; a [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = i + 1 ; } k -= 1 ; unsort ( 0 , n , a , k ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 10 ; int k = 17 ; arrayWithKCalls ( n , k ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] lower_limit = { 50 , 61 , 71 , 86 , 96 } ; int [ ] upper_limit = { 60 , 70 , 85 , 95 , 100 } ; int [ ] freq = { 9 , 7 , 9 , 12 , 8 } ; int n = lower_limit . length ; System . out . println ( groupedSD ( lower_limit , upper_limit , freq , n ) ) ; } public static double mean ( int [ ] mid , int [ ] freq , int n ) { double sum = 0 ; int freqSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += mid [ i ] * freq [ i ] ; freqSum += freq [ i ] ; } return sum / freqSum ; } public static double groupedSD ( int [ ] lower_limit , int [ ] upper_limit , int [ ] freq , int n ) { double [ ] mid = new double [ n ] ; double sum = 0 ; int freqSum = 0 ; double sd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mid [ i ] = ( lower_limit [ i ] + upper_limit [ i ] ) / 2.0 ; sum += freq [ i ] * mid [ i ] * mid [ i ] ; freqSum += freq [ i ] ; } sd = Math . sqrt ( ( sum - freqSum * mean ( mid , freq , n ) * mean ( mid , freq , n ) ) / ( freqSum - 1 ) ) ; return sd ; } }
public class Main { public static void main ( String [ ] args ) { int a = 2 ; int b = 4 ; System . out . println ( gcd ( a , b ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 10 ; int b = 8 ; System . out . println ( rectangleArea ( a , b ) ) ; } public static int rectangleArea ( int a , int b ) { if ( a < 0 || b < 0 ) { return - 1 ; } return 2 * a * b ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; while ( t > 0 ) { t -- ; int n = scanner . nextInt ( ) ; int l = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; int k = n / l ; if ( r * k >= n ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( countJumps ( n ) ) ; } public static int getsum ( int x ) { return ( int ) ( ( x * ( x + 1 ) ) / 2 ) ; } public static int countJumps ( int n ) { n = Math . abs ( n ) ; int ans = 0 ; while ( getsum ( ans ) < n || ( getsum ( ans ) - n ) % 2 != 0 ) { ans ++ ; } return ans ; } }
public class Main { static int MAX = 10 ; public static void main ( String [ ] args ) { int k = 1 ; int [ ] arr1 = { 1 , 2 , 3 , 4 , 5 } ; int [ ] arr2 = { 5 , 3 , 1 , 4 , 2 } ; int n = arr1 . length ; int m = arr2 . length ; int [ ] [ ] [ ] dp = new int [ MAX ] [ MAX ] [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = 0 ; j < MAX ; j ++ ) { for ( int l = 0 ; l < MAX ; l ++ ) { dp [ i ] [ j ] [ l ] = - 1 ; } } } System . out . println ( lcs ( dp , arr1 , n , arr2 , m , k ) ) ; } public static int lcs ( int [ ] [ ] [ ] dp , int [ ] arr1 , int n , int [ ] arr2 , int m , int k ) { if ( k < 0 ) { return - ( int ) Math . pow ( 10 , 7 ) ; } if ( n < 0 || m < 0 ) { return 0 ; } int ans = dp [ n ] [ m ] [ k ] ; if ( ans != - 1 ) { return ans ; } ans = Math . max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lcs ( dp , arr1 , n , arr2 , m - 1 , k ) ) ; if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) { ans = Math . max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ) ; } ans = Math . max ( ans , lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k - 1 ) ) ; return ans ; } }
import java . math . BigDecimal ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; BigDecimal n = new BigDecimal ( scanner . next ( ) ) ; BigDecimal d = new BigDecimal ( scanner . next ( ) ) ; BigDecimal x = new BigDecimal ( scanner . next ( ) ) ; BigDecimal ans = BigDecimal . ZERO ; for ( int i = 1 ; i <= n . intValue ( ) ; i ++ ) { BigDecimal currentI = new BigDecimal ( i ) ; ans = ans . add ( ( n . subtract ( currentI ) . add ( BigDecimal . ONE ) ) . divide ( currentI , 200 , BigDecimal . ROUND_HALF_UP ) . multiply ( d . add ( x . multiply ( n . multiply ( new BigDecimal ( 2 ) ) . subtract ( BigDecimal . ONE ) . divide ( new BigDecimal ( 2 ) ) ) ) ) ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 25 ; System . out . println ( " Prime ▁ number ▁ in ▁ reverse ▁ order " ) ; if ( N == 1 ) { System . out . println ( " No ▁ prime ▁ no ▁ exist ▁ in ▁ this ▁ range " ) ; } else { reverseOrder ( N ) ; } } public static void reverseOrder ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { prime [ i ] = true ; } int p = 2 ; while ( p * p <= n ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= n ; i += p ) { prime [ i ] = false ; } } p ++ ; } for ( int i = n ; i > 1 ; i -- ) { if ( prime [ i ] ) { System . out . print ( i + " ▁ " ) ; } } } }
``` java public class Main { public static void pattern ( int min_stars , int p_height ) { int p_space = p_height - 1 ; int x = 1 ; for ( int i = 0 ; i < p_height ; i ++ ) { for ( int j = p_space ; j > i ; j -- ) { System . out . print ( " ▁ " ) ; } for ( int k = 0 ; k < min_stars ; k ++ ) { System . out . print ( " * " ) ; } for ( int n = ( p_height + p_height - 2 ) ; n >= x ; n -- ) { System . out . print ( " ▁ " ) ; } for ( int k = 0 ; k < min_stars ; k ++ ) { System . out . print ( " * " ) ; } min_stars = min_stars + 2 ; x = x + 2 ; System . out . println ( " " ) ; } } public static void main ( String [ ] args ) { int min_stars = 1 ; int p_height = 5 ; pattern ( min_stars , p_height ) ; } } ```
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int visitors_count = Integer . parseInt ( scanner . nextLine ( ) ) ; int minDay = 0 ; int maxDay = 366 ; List < String > users = new ArrayList < > ( ) ; for ( int i = 0 ; i < visitors_count ; i ++ ) { users . add ( scanner . nextLine ( ) ) ; } minDay = Integer . parseInt ( users . get ( 0 ) . split ( " ▁ " ) [ 1 ] ) ; maxDay = Integer . parseInt ( users . get ( 0 ) . split ( " ▁ " ) [ 2 ] ) ; List < List < Object > > all_users = new ArrayList < > ( ) ; for ( String user : users ) { String [ ] userInfo = user . split ( " ▁ " ) ; all_users . add ( Arrays . asList ( userInfo [ 0 ] , Integer . parseInt ( userInfo [ 1 ] ) , Integer . parseInt ( userInfo [ 2 ] ) ) ) ; if ( minDay > Integer . parseInt ( userInfo [ 1 ] ) ) { minDay = Integer . parseInt ( userInfo [ 1 ] ) ; } if ( maxDay < Integer . parseInt ( userInfo [ 2 ] ) ) { maxDay = Integer . parseInt ( userInfo [ 2 ] ) ; } } Map < Integer , List < List < Object > > > dict_counts = new HashMap < > ( ) ; for ( int i = minDay ; i <= maxDay ; i ++ ) { for ( List < Object > user : all_users ) { if ( i >= ( int ) user . get ( 1 ) && i <= ( int ) user . get ( 2 ) ) { if ( ! dict_counts . containsKey ( i ) ) { dict_counts . put ( i , new ArrayList < > ( ) ) ; } dict_counts . get ( i ) . add ( user ) ; } } } int best_match = 0 ; for ( List < List < Object > > usersList : dict_counts . values ( ) ) { int males_len = ( int ) usersList . stream ( ) . filter ( user -> user . get ( 0 ) . equals ( " M " ) ) . count ( ) ; int males_len_x2 = males_len * 2 ; int females_len = usersList . size ( ) - males_len ; int females_len_x2 = females_len * 2 ; if ( ( males_len > females_len || males_len == females_len ) && best_match < females_len_x2 ) { best_match = females_len_x2 ; } else if ( ( females_len > males_len || males_len == females_len ) && best_match < males_len_x2 ) { best_match = males_len_x2 ; } } System . out . println ( best_match ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] x = { - 1 , 1 , 3 , 2 } ; int [ ] y = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( distancesum ( x , y , n ) ) ; } public static int distancesum ( int [ ] x , int [ ] y , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ) ; } } return sum ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int k = 3 ; System . out . println ( sumFibonacci ( k ) ) ; } public static int sumFibonacci ( int k ) { int l = ( k * ( k - 1 ) ) / 2 ; int r = l + k ; int sum = calculateSum ( l , r - 1 ) ; return sum ; } public static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int l = 4 ; int r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } public static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return Math . round ( Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } public static int calculateSum ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) { sum += fib ( i ) ; } return sum ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int l = 4 ; int r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } public static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } public static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] mn = scanner . nextLine ( ) . split ( " ▁ " ) ; int m = Integer . parseInt ( mn [ 0 ] ) ; int n = Integer . parseInt ( mn [ 1 ] ) ; char [ ] k = scanner . nextLine ( ) . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a1 = Integer . parseInt ( input [ 0 ] ) ; int a2 = Integer . parseInt ( input [ 1 ] ) ; char c = input [ 2 ] . charAt ( 0 ) ; char d = input [ 3 ] . charAt ( 0 ) ; for ( int j = a1 - 1 ; j < a2 ; j ++ ) { if ( k [ j ] == c ) { k [ j ] = d ; } } } System . out . println ( String . valueOf ( k ) ) ; } }
public class Main { public static void main ( String [ ] args ) { String [ ] arr = { " for " , " " , " " , " " , " geeks " , " ide " , " " , " practice " , " " , " " , " quiz " , " " , " " } ; String string = " quiz " ; int n = arr . length ; System . out . println ( searchStr ( arr , string , 0 , n - 1 ) ) ; } public static int compareStrings ( String str1 , String str2 ) { int i = 0 ; while ( i < str1 . length ( ) - 1 && str1 . charAt ( i ) == str2 . charAt ( i ) ) { i ++ ; } if ( str1 . charAt ( i ) > str2 . charAt ( i ) ) { return - 1 ; } return str1 . charAt ( i ) < str2 . charAt ( i ) ? 1 : 0 ; } public static int searchStr ( String [ ] arr , String string , int first , int last ) { if ( first > last ) { return - 1 ; } int mid = ( last + first ) / 2 ; if ( arr [ mid ] . length ( ) == 0 ) { int left = mid - 1 ; int right = mid + 1 ; while ( true ) { if ( left < first && right > last ) { return - 1 ; } if ( right <= last && arr [ right ] . length ( ) != 0 ) { mid = right ; break ; } if ( left >= first && arr [ left ] . length ( ) != 0 ) { mid = left ; break ; } right ++ ; left -- ; } } if ( compareStrings ( string , arr [ mid ] ) == 0 ) { return mid ; } if ( compareStrings ( string , arr [ mid ] ) < 0 ) { return searchStr ( arr , string , mid + 1 , last ) ; } return searchStr ( arr , string , first , mid - 1 ) ; } }
Scanner scanner = new Scanner ( System . in ) ; String input = scanner . nextLine ( ) ; String [ ] arr = input . split ( " ▁ " ) ; String a = arr [ 0 ] ; String b = arr [ 1 ] ; b = new StringBuilder ( b ) . reverse ( ) . toString ( ) ; System . out . println ( Integer . parseInt ( a ) + Integer . parseInt ( b ) ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int ax = scanner . nextInt ( ) ; int ay = scanner . nextInt ( ) ; int bx = scanner . nextInt ( ) ; int by = scanner . nextInt ( ) ; int cx = scanner . nextInt ( ) ; int cy = scanner . nextInt ( ) ; System . out . println ( 3 ) ; System . out . println ( ( bx + cx - ax ) + " ▁ " + ( by + cy - ay ) ) ; System . out . println ( ( cx + ax - bx ) + " ▁ " + ( cy + ay - by ) ) ; System . out . println ( ( bx + ax - cx ) + " ▁ " + ( by + ay - cy ) ) ; } }
``` java import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; while ( t > 0 ) { int result = solve ( scanner ) ; sb . append ( result ) . append ( " \n " ) ; t -- ; } System . out . println ( sb . toString ( ) ) ; } public static int solve ( Scanner scanner ) { int n = scanner . nextInt ( ) ; String a = scanner . next ( ) ; char [ ] aArray = a . toCharArray ( ) ; Arrays . sort ( aArray ) ; String b = new String ( aArray ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a . charAt ( i ) != b . charAt ( i ) ) { count ++ ; } } return count ; } } ```
public class Main { public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( sumMultiples ( n ) ) ; } public static int sumAP ( int n , int d ) { n = ( int ) ( n / d ) ; return ( n ) * ( 1 + n ) * ( d / 2 ) ; } public static int sumMultiples ( int n ) { n -= 1 ; return ( int ) ( sumAP ( n , 2 ) + sumAP ( n , 5 ) - sumAP ( n , 10 ) ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int t = scanner . nextInt ( ) ; if ( t == 0 ) break ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int s = Integer . parseInt ( input [ 0 ] ) ; int f = Integer . parseInt ( input [ 1 ] ) ; t -= f - s ; } if ( t < 1 ) { System . out . println ( " OK " ) ; } else { System . out . println ( t ) ; } } } } ```
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; for ( int k = 0 ; k < n ; k ++ ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ k ] ) { s += 1 ; } } int catalan_leftBST = catalan ( s ) ; int catalan_rightBST = catalan ( n - s - 1 ) ; int totalBST = catalan_rightBST * catalan_leftBST ; System . out . print ( totalBST + " ▁ " ) ; } } public static int fact ( int num ) { int fact = 1 ; while ( num > 1 ) { fact = fact * num ; num = num - 1 ; } return fact ; } public static int catalan ( int n ) { return fact ( 2 * n ) / ( fact ( n ) * fact ( n + 1 ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int [ ] a = get ( ) ; if ( a [ 0 ] - a [ 1 ] == 1 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } public static int [ ] get ( ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] result = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { result [ i ] = Integer . parseInt ( input [ i ] ) ; } return result ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int [ ] a = get ( scanner ) ; if ( a [ 1 ] >= a [ 0 ] ) { System . out . println ( a [ 1 ] - a [ 0 ] ) ; } else { if ( ( a [ 0 ] - a [ 1 ] ) % 2 == 0 || ( a [ 0 ] + a [ 1 ] ) % 2 == 0 ) { System . out . println ( 0 ) ; } else { System . out . println ( 1 ) ; } } } } public static int [ ] get ( Scanner scanner ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] result = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { result [ i ] = Integer . parseInt ( input [ i ] ) ; } return result ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 3 , 5 } ; int n = 5 ; System . out . println ( countWays ( n , arr ) ) ; } public static int countWays ( int n , int [ ] arr ) { int [ ] count = new int [ n + 1 ] ; count [ 0 ] = 1 ; if ( n == 0 ) { return 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { int no_ways = 0 ; for ( int j : arr ) { if ( i - j >= 0 ) { no_ways += count [ i - j ] ; } } count [ i ] = no_ways ; } return count [ n ] ; } }
while ( true ) { int L = Integer . parseInt ( System . console ( ) . readLine ( ) ) ; if ( L == 0 ) { break ; } int a = 0 ; int b = 0 ; int c = 0 ; for ( int i = 0 ; i < 12 ; i ++ ) { a ++ ; String [ ] input = System . console ( ) . readLine ( ) . split ( " ▁ " ) ; int M = Integer . parseInt ( input [ 0 ] ) ; int N = Integer . parseInt ( input [ 1 ] ) ; b += M - N ; if ( c == 0 && b >= L ) { c = a ; } } System . out . println ( c != 0 ? c : " NA " ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int c = Integer . parseInt ( input [ 2 ] ) ; int [ ] arr = { a , b , c } ; Arrays . sort ( arr ) ; if ( arr [ 2 ] - arr [ 0 ] <= 2 ) { System . out . println ( 0 ) ; } else { System . out . println ( 2 * ( arr [ 2 ] - arr [ 0 ] - 2 ) ) ; } } } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > n = new ArrayList < > ( ) ; List < Integer > a = new ArrayList < > ( ) ; for ( String s : input1 ) { n . add ( Integer . parseInt ( s ) ) ; } for ( String s : input2 ) { a . add ( Integer . parseInt ( s ) ) ; } int b = n . get ( 0 ) ; int d = n . get ( 1 ) ; int waste = 0 ; int num = 0 ; for ( int i : a ) { if ( i <= b ) { waste += i ; } if ( waste > d ) { num += 1 ; waste = 0 ; } } System . out . println ( num ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int key = 10 ; System . out . println ( " Index : ▁ " + binarySearch ( arr , 0 , n , key ) ) ; } public static int binarySearch ( int [ ] arr , int low , int high , int key ) { if ( high < low ) { return - 1 ; } int mid = ( low + high ) / 2 ; if ( key == arr [ mid ] ) { return mid ; } if ( key > arr [ mid ] ) { return binarySearch ( arr , mid + 1 , high , key ) ; } return binarySearch ( arr , low , mid - 1 , key ) ; } }
public class Main { public static void equalXorSum ( int [ ] arr , int n ) { int sum = 0 ; int xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + arr [ i ] ; xor = xor ^ arr [ i ] ; } if ( sum == xor ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 6 , 3 , 7 , 10 } ; int n = arr . length ; equalXorSum ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < Integer > inl = ( ) -> Arrays . asList ( scanner . nextLine ( ) . split ( " ▁ " ) ) . stream ( ) . mapToInt ( Integer :: parseInt ) . boxed ( ) . collect ( Collectors . toList ( ) ) ; List < Integer > input = inl . get ( ) ; int n = input . get ( 0 ) ; int m = input . get ( 1 ) ; int k = input . get ( 2 ) ; Set < Integer > h = new HashSet < > ( inl . get ( ) ) ; int b = 1 ; if ( ! h . contains ( b ) ) { for ( int i = 0 ; i < k ; i ++ ) { List < Integer > uv = inl . get ( ) ; int u = uv . get ( 0 ) ; int v = uv . get ( 1 ) ; if ( b == u || b == v ) { b = ( b == v ) ? u : v ; if ( h . contains ( u ) || h . contains ( v ) ) { break ; } } } } System . out . println ( b ) ; } }
public class Main { public static void findPairs ( int [ ] arr , int n ) { int cntEven = 0 ; int cntOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { cntEven ++ ; } else { cntOdd ++ ; } } int evenPairs = 0 ; evenPairs += ( ( cntEven * ( cntEven - 1 ) ) / 2 ) ; evenPairs += ( ( cntOdd * ( cntOdd - 1 ) ) / 2 ) ; int oddPairs = 0 ; oddPairs += ( cntEven * cntOdd ) ; System . out . println ( " Odd ▁ pairs ▁ = ▁ " + oddPairs ) ; System . out . println ( " Even ▁ pairs ▁ = ▁ " + evenPairs ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; findPairs ( arr , n ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 12 , 13 , 11 , 80 } ; int [ ] b = { 4 , 6 , 15 , 60 } ; int n = a . length ; int m = b . length ; int max = minBroadcastRange ( a , b , n , m ) ; System . out . println ( max ) ; } public static int minBroadcastRange ( int [ ] houses , int [ ] towers , int n , int m ) { int leftTower = Integer . MIN_VALUE ; int rightTower = towers [ 0 ] ; int j = 0 ; int k = 0 ; int minRange = 0 ; while ( j < n ) { if ( houses [ j ] < rightTower ) { int left = houses [ j ] - leftTower ; int right = rightTower - houses [ j ] ; int localMax ; if ( left < right ) { localMax = left ; } else { localMax = right ; } if ( localMax > minRange ) { minRange = localMax ; } j ++ ; } else { leftTower = towers [ k ] ; if ( k < m - 1 ) { k ++ ; rightTower = towers [ k ] ; } else { rightTower = Integer . MAX_VALUE ; } } } return minRange ; } }
public class Main { public static void main ( String [ ] args ) { int num = 100 ; int divisor = 7 ; System . out . println ( getRemainder ( num , divisor ) ) ; } public static int getRemainder ( int num , int divisor ) { return ( num - divisor * ( num / divisor ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int z = Integer . parseInt ( input [ 2 ] ) ; int n1 = n ; int m1 = m ; int kill = 0 ; List < Integer > calls = new ArrayList < > ( ) ; List < Integer > artists = new ArrayList < > ( ) ; for ( int call = n ; call <= z ; call += n ) { calls . add ( call ) ; } for ( int artist = m ; artist <= z ; artist += m ) { artists . add ( artist ) ; } Set < Integer > intersection = new HashSet < > ( calls ) ; intersection . retainAll ( artists ) ; System . out . println ( intersection . size ( ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int m = nextInt ( scanner ) ; int n = nextInt ( scanner ) ; if ( m > 0 || n > 0 ) { int [ ] lst = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lst [ i ] = nextInt ( scanner ) ; } System . out . println ( solve ( lst , m ) ) ; } else { break ; } } } private static int nextInt ( Scanner scanner ) { return Integer . parseInt ( scanner . next ( ) ) ; } private static int check ( int [ ] lst , int L ) { int tot = 1 ; int curSum = 0 ; for ( int i : lst ) { if ( curSum + i <= L ) { curSum += i ; } else { curSum = i ; tot ++ ; } } return tot ; } private static int solve ( int [ ] lst , int m ) { int l = Integer . MIN_VALUE ; int r = 1000000 * m ; while ( l != r ) { int mid = ( l + r ) / 2 ; if ( check ( lst , mid ) <= m ) { r = mid ; } else { l = mid + 1 ; } } return l ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int wmax = scanner . nextInt ( ) ; List < double [ ] > U = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int v = scanner . nextInt ( ) ; int w = scanner . nextInt ( ) ; double u = ( double ) v / w ; U . add ( new double [ ] { - u , v , w } ) ; } U . sort ( Comparator . comparingDouble ( a -> a [ 0 ] ) ) ; double remains = wmax ; int i = 0 ; double ans = 0 ; while ( true ) { try { if ( remains > U . get ( i ) [ 2 ] ) { remains -= U . get ( i ) [ 2 ] ; ans += U . get ( i ) [ 1 ] ; i ++ ; } else { ans += U . get ( i ) [ 1 ] * remains / U . get ( i ) [ 2 ] ; break ; } } catch ( IndexOutOfBoundsException e ) { break ; } } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( " The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ " + getSingle ( arr , n ) ) ; } public static int getSingle ( int [ ] arr , int n ) { int ones = 0 ; int twos = 0 ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; int common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } }
import java . util . HashMap ; import java . util . Map ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 1 , 3 , 2 , 3 , 2 } ; int n = arr . length ; System . out . println ( maxdiff ( arr , n ) ) ; } public static int maxdiff ( int [ ] arr , int n ) { Map < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( arr [ i ] , freq . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ] ) && arr [ i ] > arr [ j ] ) { ans = Math . max ( ans , freq . get ( arr [ i ] ) - freq . get ( arr [ j ] ) ) ; } else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ j ] ) && arr [ i ] < arr [ j ] ) { ans = Math . max ( ans , freq . get ( arr [ j ] ) - freq . get ( arr [ i ] ) ) ; } } } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int num = Integer . parseInt ( input . nextLine ( ) ) ; for ( int k = 0 ; k < num ; k ++ ) { String [ ] nm = input . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nm [ 0 ] ) ; int m = Integer . parseInt ( nm [ 1 ] ) ; int [ ] [ ] l = new int [ n ] [ m ] ; for ( int a = 0 ; a < n ; a ++ ) { String [ ] line = input . nextLine ( ) . split ( " ▁ " ) ; for ( int b = 0 ; b < m ; b ++ ) { l [ a ] [ b ] = Integer . parseInt ( line [ b ] ) ; } } int ans = 0 ; int count = 0 ; int mini = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( l [ i ] [ j ] < 0 ) { count ++ ; mini = Math . min ( mini , - l [ i ] [ j ] ) ; ans += - l [ i ] [ j ] ; } else { mini = Math . min ( mini , Math . abs ( l [ i ] [ j ] ) ) ; ans += Math . abs ( l [ i ] [ j ] ) ; } } } if ( count % 2 == 0 ) { System . out . println ( ans ) ; } else { System . out . println ( ans - 2 * mini ) ; } } } }
public class Main { public static void makeAP ( int [ ] arr , int n ) { int initial_term = 0 , common_difference = 0 ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else if ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) { initial_term = arr [ 0 ] ; common_difference = arr [ 1 ] - arr [ 0 ] ; } else if ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else { common_difference = ( arr [ 3 ] - arr [ 0 ] ) / 3 ; initial_term = arr [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ( int ) ( initial_term + ( i * common_difference ) ) + " ▁ " ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 3 , 7 } ; int n = arr . length ; makeAP ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countPairs ( n ) ) ; } public static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y + x ) % ( y ^ x ) == 0 ) { count ++ ; } } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( countPairs ( n ) ) ; } public static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y * x ) % ( y + x ) == 0 ) { count ++ ; } } } return count ; } }
public class Solution { public int longestPalindrome ( String s ) { int ans = 0 ; Map < Character , Integer > charMap = new HashMap < > ( ) ; for ( char c : s . toCharArray ( ) ) { charMap . put ( c , charMap . getOrDefault ( c , 0 ) + 1 ) ; } for ( Character c : new ArrayList < > ( charMap . keySet ( ) ) ) { if ( charMap . get ( c ) % 2 == 0 ) { ans += charMap . remove ( c ) ; } else { ans += charMap . get ( c ) / 2 * 2 ; } } if ( charMap . size ( ) != 0 ) { ans += 1 ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " abccccdd " ; int out = sObj . longestPalindrome ( s ) ; System . out . println ( out ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( " Total ▁ possible ▁ expressions ▁ of ▁ length ▁ " + n + " ▁ is ▁ " + findWays ( 6 ) ) ; } public static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) { k = n - k ; } for ( int i = 0 ; i < k ; i ++ ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } public static int catalan ( int n ) { int c = binomialCoeff ( 2 * n , n ) ; return c / ( n + 1 ) ; } public static int findWays ( int n ) { if ( ( n & 1 ) != 0 ) { return 0 ; } return catalan ( n / 2 ) ; } }
import java . io . IOException ; import java . io . InputStream ; import java . util . InputMismatchException ; public class Main { public static void main ( String [ ] args ) { InputReader in = new InputReader ( System . in ) ; int t = in . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { solve ( ) ; } } public static void solve ( ) { StringBuilder sb = new StringBuilder ( ) ; String x = next ( ) ; int [ ] s = new int [ x . length ( ) ] ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == ' O ' ) { s [ i ] = 0 ; } else { s [ i ] = 1 ; } } StringBuilder result = new StringBuilder ( ) ; for ( int i = 1 ; i <= 12 ; i ++ ) { if ( 12 % i == 0 ) { if ( help ( i , 12 / i , s ) ) { result . append ( ( 12 / i ) + " x " + i + " ▁ " ) ; } } } System . out . println ( result . toString ( ) . trim ( ) ) ; } public static boolean help ( int a , int b , int [ ] l ) { int [ ] [ ] tot = new int [ b ] [ a ] ; for ( int i = 0 ; i < b ; i ++ ) { for ( int j = 0 ; j < a ; j ++ ) { tot [ i ] [ j ] = l [ i * a + j ] ; } } for ( int i = 0 ; i < a ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < b ; j ++ ) { sum += tot [ j ] [ i ] ; } if ( sum == b ) { return true ; } } return false ; } static class InputReader { private InputStream stream ; private byte [ ] buf = new byte [ 1024 ] ; private int curChar ; private int numChars ; public InputReader ( InputStream stream ) { this . stream = stream ; } public int read ( ) { if ( numChars == - 1 ) throw new InputMismatchException ( ) ; if ( curChar >= numChars ) { curChar = 0 ; try { numChars = stream . read ( buf ) ; } catch ( IOException e ) { throw new InputMismatchException ( ) ; } if ( numChars <= 0
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int d = input . nextInt ( ) ; int t = input . nextInt ( ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int da = input . nextInt ( ) ; int db = input . nextInt ( ) ; solve ( d , t , a , b , da , db ) ; } public static void solve ( int d , int t , int a , int b , int da , int db ) { for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < t ; j ++ ) { if ( a - da * i + b - db * j == d || a - da * i == d || b - db * j == d || d == 0 ) { System . out . println ( " YES " ) ; return ; } } } System . out . println ( " NO " ) ; } }
public static boolean isSumOfPowersOfTwo ( int n ) { if ( n % 2 == 1 ) { return false ; } else { return true ; } } public static void main ( String [ ] args ) { int n = 10 ; if ( isSumOfPowersOfTwo ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( countNumber ( n ) ) ; } public static int countNumber ( int n ) { int result = 0 ; for ( int i = 1 ; i < 10 ; i ++ ) { List < Integer > s = new ArrayList < > ( ) ; if ( i <= n ) { s . add ( i ) ; result ++ ; } while ( ! s . isEmpty ( ) ) { int tp = s . get ( s . size ( ) - 1 ) ; s . remove ( s . size ( ) - 1 ) ; for ( int j = tp % 10 ; j < 10 ; j ++ ) { int x = tp * 10 + j ; if ( x <= n ) { s . add ( x ) ; result ++ ; } } } } return result ; } }
int M = 100 ; public static double maxAverageOfPath ( int [ ] [ ] cost , int N ) { int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; } for ( int j = 1 ; j < N ; j ++ ) { dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; } for ( int i = 1 ; i < N ; i ++ ) { for ( int j = 1 ; j < N ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; } } return ( double ) dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ; } int [ ] [ ] cost = { { 1 , 2 , 3 } , { 6 , 5 , 4 } , { 7 , 3 , 9 } } ; System . out . println ( maxAverageOfPath ( cost , 3 ) ) ;
public class Main { static int MAX = 1000000 ; static int [ ] sieve_Prime = new int [ MAX + 4 ] ; static int [ ] sieve_count = new int [ MAX + 4 ] ; public static void form_sieve ( ) { sieve_Prime [ 1 ] = 1 ; for ( int i = 2 ; i <= MAX ; i ++ ) { if ( sieve_Prime [ i ] == 0 ) { for ( int j = i * 2 ; j <= MAX ; j += i ) { if ( sieve_Prime [ j ] == 0 ) { sieve_Prime [ j ] = 1 ; sieve_count [ i ] ++ ; } } } } } public static void main ( String [ ] args ) { form_sieve ( ) ; int n = 2 ; System . out . println ( " Count ▁ = ▁ " + ( sieve_count [ n ] + 1 ) ) ; n = 3 ; System . out . println ( " Count ▁ = ▁ " + ( sieve_count [ n ] + 1 ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int K = scanner . nextInt ( ) ; int T = scanner . nextInt ( ) ; int U = scanner . nextInt ( ) ; int V = scanner . nextInt ( ) ; int L = scanner . nextInt ( ) ; double ans = 0 ; int l = 0 ; int t = 0 ; int k = 0 ; for ( int i = 0 ; i < N + 1 ; i ++ ) { int d ; if ( i == N ) { d = L ; } else { d = scanner . nextInt ( ) ; } int length = d - l ; l = d ; while ( t > 0 || k > 0 ) { if ( t > 0 ) { if ( t * V >= length ) { double tmp = ( t * V - length ) / V ; ans += t - tmp ; t = ( int ) tmp ; if ( K > k ) { k += 1 ; } else { t = T ; } length = 0 ; break ; } else { length = length - t * V ; ans += t ; t = 0 ; if ( k > 0 ) { k -= 1 ; t = T ; } } } else if ( k > 0 ) { k -= 1 ; t = T ; } } if ( length > 0 ) { ans += length / U ; if ( K > k ) { k += 1 ; } else { t = T ; } } } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { String s = " ababa " ; System . out . println ( waysToSplit ( s ) ) ; } public static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; int [ ] prefix = new int [ n ] ; int [ ] suffix = new int [ n ] ; int [ ] seen = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int prev = ( i - 1 >= 0 ) ? prefix [ i - 1 ] : 0 ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { prefix [ i ] += ( prev + 1 ) ; } else { prefix [ i ] = prev ; } seen [ s . charAt ( i ) - ' a ' ] = 1 ; } seen = new int [ 26 ] ; suffix [ n - 1 ] = 0 ; for ( int i = n - 1 ; i > 0 ; i -- ) { int prev = suffix [ i ] ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { suffix [ i - 1 ] += ( prev + 1 ) ; } else { suffix [ i - 1 ] = prev ; } seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prefix [ i ] == suffix [ i ] ) { answer += 1 ; } } return answer ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int TURNS = 15 ; List < List < Integer > > ways = new ArrayList < > ( ) ; ways . add ( Collections . singletonList ( 1 ) ) ; for ( int i = 1 ; i <= TURNS ; i ++ ) { List < Integer > row = new ArrayList < > ( ) ; for ( int j = 0 ; j <= i ; j ++ ) { int temp = 0 ; if ( j < i ) { temp = ways . get ( i - 1 ) . get ( j ) * i ; } if ( j > 0 ) { temp += ways . get ( i - 1 ) . get ( j - 1 ) ; } row . add ( temp ) ; } ways . add ( row ) ; } int numer = 0 ; for ( int i = TURNS / 2 + 1 ; i <= TURNS ; i ++ ) { numer += ways . get ( TURNS ) . get ( i ) ; } int denom = factorial ( TURNS + 1 ) ; return String . valueOf ( denom / numer ) ; } public static int factorial ( int n ) { if ( n == 0 ) { return 1 ; } return n * factorial ( n - 1 ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] tInput = scanner . nextLine ( ) . split ( " ▁ " ) ; String [ ] aInput = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > t = new ArrayList < > ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; ArrayList < Integer > ans = new ArrayList < > ( ) ; int [ ] cnt = new int [ n + 1 ] ; t . add ( 0 ) ; for ( String s : tInput ) { t . add ( Integer . parseInt ( s ) ) ; } a . add ( 0 ) ; for ( String s : aInput ) { a . add ( Integer . parseInt ( s ) ) ; } for ( int i : a ) { cnt [ i ] ++ ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( t . get ( i ) == 1 ) { ArrayList < Integer > crt = new ArrayList < > ( ) ; int x = a . get ( i ) ; crt . add ( i ) ; while ( cnt [ x ] == 1 ) { crt . add ( x ) ; x = a . get ( x ) ; } if ( crt . size ( ) > ans . size ( ) ) { ans = new ArrayList < > ( crt ) ; } } } Collections . reverse ( ans ) ; System . out . println ( ans . size ( ) ) ; for ( int i : ans ) { System . out . print ( i + " ▁ " ) ; } } }
public class Main { public static void merge ( int [ ] ar1 , int [ ] ar2 , int m , int n ) { for ( int i = n - 1 ; i >= 0 ; i -- ) { int last = ar1 [ m - 1 ] ; int j = m - 2 ; while ( j >= 0 && ar1 [ j ] > ar2 [ i ] ) { ar1 [ j + 1 ] = ar1 [ j ] ; j -- ; } if ( j != m - 2 || last > ar2 [ i ] ) { ar1 [ j + 1 ] = ar2 [ i ] ; ar2 [ i ] = last ; } } } public static void main ( String [ ] args ) { int [ ] ar1 = { 1 , 5 , 9 , 10 , 15 , 20 } ; int [ ] ar2 = { 2 , 3 , 8 , 13 } ; int m = ar1 . length ; int n = ar2 . length ; merge ( ar1 , ar2 , m , n ) ; System . out . print ( " After ▁ Merging ▁ \n First ▁ Array : ▁ " ) ; for ( int num : ar1 ) { System . out . print ( num + " ▁ " ) ; } System . out . print ( " \n Second ▁ Array : ▁ " ) ; for ( int num : ar2 ) { System . out . print ( num + " ▁ " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int a = 62 ; int b = 132 ; int c = 237 ; System . out . println ( sameRemainder ( a , b , c ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } public static int sameRemainder ( int a , int b , int c ) { int a1 = ( b - a ) ; int b1 = ( c - b ) ; int c1 = ( c - a ) ; return gcd ( a1 , gcd ( b1 , c1 ) ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int aa = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int c = Integer . parseInt ( input [ 2 ] ) ; int d = Integer . parseInt ( input [ 3 ] ) ; int [ ] ls = { aa , b , c } ; int sum = 0 ; Arrays . sort ( ls ) ; if ( ls [ 1 ] - ls [ 0 ] < d ) { sum += ( d - ls [ 1 ] + ls [ 0 ] ) ; } if ( ls [ 2 ] - ls [ 1 ] < d ) { sum += ( d - ls [ 2 ] + ls [ 1 ] ) ; } System . out . println ( sum ) ; } }
int [ ] [ ] [ ] dp = new int [ 501 ] [ 501 ] [ 5 ] ; for ( int i = 0 ; i < 501 ; i ++ ) { for ( int j = 0 ; j < 501 ; j ++ ) { for ( int k = 0 ; k < 5 ; k ++ ) { dp [ i ] [ j ] [ k ] = - 1 ; } } } public static int countWaysUtil ( int n , int parts , int nextPart ) { if ( parts == 0 && n == 0 ) { return 1 ; } if ( n <= 0 || parts <= 0 ) { return 0 ; } if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) { return dp [ n ] [ nextPart ] [ parts ] ; } int ans = 0 ; for ( int i = nextPart ; i <= n ; i ++ ) { ans += countWaysUtil ( n - i , parts - 1 , i ) ; } dp [ n ] [ nextPart ] [ parts ] = ans ; return ans ; } public static int countWays ( int n ) { return countWaysUtil ( n , 4 , 1 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; }
public class Main { public static int findK ( int a , int b ) { if ( ( a + b ) % 2 == 0 ) { return ( a + b ) / 2 ; } return - 1 ; } public static void main ( String [ ] args ) { int a = 2 ; int b = 16 ; System . out . println ( findK ( a , b ) ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int N = 101 ; int mod = ( int ) ( 1e9 ) + 7 ; long [ ] [ ] [ ] exactsum = new long [ N ] [ N ] [ N ] ; long [ ] [ ] [ ] exactnum = new long [ N ] [ N ] [ N ] ; int x = 1 , y = 1 , z = 1 ; System . out . println ( getSum ( x , y , z , exactsum , exactnum , mod ) ) ; } public static long getSum ( int x , int y , int z , long [ ] [ ] [ ] exactsum , long [ ] [ ] [ ] exactnum , int mod ) { long ans = 0 ; exactnum [ 0 ] [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i <= x ; i ++ ) { for ( int j = 0 ; j <= y ; j ++ ) { for ( int k = 0 ; k <= z ; k ++ ) { if ( i > 0 ) { exactsum [ i ] [ j ] [ k ] = ( exactsum [ i - 1 ] [ j ] [ k ] * 10 + 4 * exactnum [ i - 1 ] [ j ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] = ( exactnum [ i ] [ j ] [ k ] + exactnum [ i - 1 ] [ j ] [ k ] ) % mod ; } if ( j > 0 ) { exactsum [ i ] [ j ] [ k ] = ( exactsum [ i ] [ j - 1 ] [ k ] * 10 + 5 * exactnum [ i ] [ j - 1 ] [ k ] ) % mod ; exactnum [ i ] [ j ] [ k ] = ( exactnum [ i ] [ j ] [ k ] + exactnum [ i ] [ j - 1 ] [ k ] ) % mod ; } if ( k > 0 ) { exactsum [ i ] [ j ] [ k ] = ( exactsum [ i ] [ j ] [ k - 1 ] * 10 + 6 * exactnum [ i ] [ j ] [ k - 1 ] ) % mod ; exactnum [ i ] [ j ] [ k ] = ( exactnum [ i ] [ j ] [ k ] + exactnum [ i ] [ j ] [ k - 1 ] ) % mod ; } ans = ( ans + exactsum [ i ] [ j ] [ k ] ) % mod ; } } } return ans ; } }
public class Main { static final int CHARS = 26 ; public static void main ( String [ ] args ) { String str = " abcbc " ; if ( isValidString ( str ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static boolean isValidString ( String str ) { int [ ] freq = new int [ CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } int freq1 = 0 ; int count_freq1 = 0 ; int i ; for ( i = 0 ; i < CHARS ; i ++ ) { if ( freq [ i ] != 0 ) { freq1 = freq [ i ] ; count_freq1 = 1 ; break ; } } int freq2 = 0 ; int count_freq2 = 0 ; int j ; for ( j = i + 1 ; j < CHARS ; j ++ ) { if ( freq [ j ] != 0 ) { if ( freq [ j ] == freq1 ) { count_freq1 ++ ; } else { count_freq2 = 1 ; freq2 = freq [ j ] ; break ; } } } for ( int k = j + 1 ; k < CHARS ; k ++ ) { if ( freq [ k ] != 0 ) { if ( freq [ k ] == freq1 ) { count_freq1 ++ ; } if ( freq [ k ] == freq2 ) { count_freq2 ++ ; } else { return false ; } } if ( count_freq1 > 1 && count_freq2 > 1 ) { return false ; } } return true ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; scanner . nextLine ( ) ; while ( t > 0 ) { char [ ] s = scanner . nextLine ( ) . toCharArray ( ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( i % 2 == 0 ) { if ( s [ i ] == ' a ' ) { s [ i ] = ' b ' ; } else { s [ i ] = ' a ' ; } } else { if ( s [ i ] == ' z ' ) { s [ i ] = ' y ' ; } else { s [ i ] = ' z ' ; } } } System . out . println ( String . valueOf ( s ) ) ; t -- ; } } } ```
public class Main { public static void main ( String [ ] args ) { String A = " aacbe " ; String B = " aceab " ; System . out . println ( findMinimumSubsequences ( A , B ) ) ; } public static int findMinimumSubsequences ( String A , String B ) { int numberOfSubsequences = 1 ; int sizeOfB = B . length ( ) ; int sizeOfA = A . length ( ) ; int inf = 1000000 ; int [ ] [ ] next = new int [ 26 ] [ sizeOfB ] ; for ( int i = 0 ; i < sizeOfB ; i ++ ) { next [ B . charAt ( i ) - ' a ' ] [ i ] = i ; } for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = sizeOfB - 2 ; j >= 0 ; j -- ) { if ( next [ i ] [ j ] == inf ) { next [ i ] [ j ] = next [ i ] [ j + 1 ] ; } } } int pos = 0 ; int i = 0 ; while ( i < sizeOfA ) { if ( pos == 0 && next [ A . charAt ( i ) - ' a ' ] [ pos ] == inf ) { numberOfSubsequences = - 1 ; break ; } else if ( pos < sizeOfB && next [ A . charAt ( i ) - ' a ' ] [ pos ] < inf ) { int nextIndex = next [ A . charAt ( i ) - ' a ' ] [ pos ] + 1 ; pos = nextIndex ; i ++ ; } else { numberOfSubsequences ++ ; pos = 0 ; } } return numberOfSubsequences ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int num = Integer . parseInt ( input . nextLine ( ) ) ; for ( int k = 0 ; k < num ; k ++ ) { String [ ] nm = input . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nm [ 0 ] ) ; int m = Integer . parseInt ( nm [ 1 ] ) ; int [ ] d = new int [ n * m ] ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { d [ index ] = Math . max ( i , n - 1 - i ) + Math . max ( j , m - 1 - j ) ; index ++ ; } } Arrays . sort ( d ) ; for ( int i = 0 ; i < d . length ; i ++ ) { System . out . print ( d [ i ] + " ▁ " ) ; } System . out . println ( ) ; } } }
public class Main { public static void FindRank ( int [ ] arr , int length ) { System . out . print ( 1 + " ▁ " ) ; for ( int i = 1 ; i < length ; i ++ ) { int rank = 1 ; for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { rank = rank + 1 ; } } System . out . print ( rank + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 88 , 14 , 69 , 30 , 29 , 89 } ; int length = arr . length ; FindRank ( arr , length ) ; } }
import java . util . * ; import java . io . * ; public class Main { static int chkprint ( Object ... args ) { Map < Integer , String > names = new HashMap < > ( ) ; for ( Map . Entry < String , Object > entry : Thread . currentThread ( ) . getStackTrace ( ) [ 2 ] . getLocals ( ) . entrySet ( ) ) { names . put ( System . identityHashCode ( entry . getValue ( ) ) , entry . getKey ( ) ) ; } for ( Object arg : args ) { System . out . print ( names . getOrDefault ( System . identityHashCode ( arg ) , " ? ? ? " ) + " ▁ = ▁ " + arg + " , ▁ " ) ; } System . out . println ( ) ; return 0 ; } static String to_bin ( int x ) { return Integer . toBinaryString ( x ) . substring ( 2 ) ; } static List < Integer > li_input ( ) { Scanner scanner = new Scanner ( System . in ) ; List < Integer > inputList = new ArrayList < > ( ) ; while ( scanner . hasNextInt ( ) ) { inputList . add ( scanner . nextInt ( ) ) ; } return inputList ; } public static void main ( String [ ] args ) { List < Integer > input = li_input ( ) ; int N = input . get ( 0 ) ; int H = input . get ( 1 ) ; List < List < Integer > > S = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { S . add ( li_input ( ) ) ; } int ans = 0 ; List < Integer > strong_throw = new ArrayList < > ( ) ; int maxcut = - 1 ; for ( List < Integer > s : S ) { if ( s . get ( 0 ) > maxcut ) { maxcut = s . get ( 0 ) ; } } for ( List < Integer > s : S ) { if ( s . get ( 1 ) > maxcut ) { strong_throw . add ( s . get ( 1 ) ) ; } } strong_throw . sort ( Collections . reverseOrder ( ) ) ; for ( int st : strong_throw ) { H -= st ; ans ++ ; if ( H <= 0 ) { break ; } } if ( H > 0 ) { ans += Math . ceil ( ( double ) H / maxcut ) ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } public static int firstkdigits ( int n , int k ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { product *= n ; } while ( ( product / Math . pow ( 10 , k ) ) != 0 ) { product = product / 10 ; } return product ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { try { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; System . out . println ( gcd ( a , b ) ) ; } catch ( Exception e ) { break ; } } } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
Map < Character , Integer > dic = new HashMap < > ( ) ; char [ ] S = new Scanner ( System . in ) . next ( ) . toCharArray ( ) ; for ( char s : S ) { if ( ! dic . containsKey ( s ) ) { dic . put ( s , 1 ) ; } else { dic . put ( s , dic . get ( s ) + 1 ) ; } } int ans = 0 ; for ( char k : dic . keySet ( ) ) { if ( dic . get ( k ) % 2 != 0 ) { ans ++ ; } } System . out . println ( ans >> 1 ) ;
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { System . out . println ( complement ( 25 ) ) ; System . out . println ( complement ( 456 ) ) ; } public static int complement ( int num ) { int i = 0 ; int len = 0 ; int comp = 0 ; int temp = num ; while ( true ) { len += 1 ; num = num / 10 ; if ( Math . abs ( num ) == 0 ) { break ; } } num = temp ; comp = ( int ) ( Math . pow ( 10 , len ) - num ) ; return comp ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } public static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; double t = Math . log ( x ^ n ) / Math . log ( 2 ) ; return ( int ) Math . floor ( t ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 2 , 4 , 4 , 4 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } public static int minOperations ( int [ ] arr , int n ) { int result = 0 ; int [ ] freq = new int [ 1000001 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] += 1 ; } int maxi = 0 ; for ( int num : arr ) { if ( num > maxi ) { maxi = num ; } } for ( int i = 1 ; i <= maxi ; i ++ ) { if ( freq [ i ] != 0 ) { for ( int j = i * 2 ; j <= maxi ; j += i ) { freq [ j ] = 0 ; } result += 1 ; } } return result ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; int M = 3 ; int X = 2 ; System . out . println ( totalWays ( N , M , X ) ) ; } public static int totalWays ( int N , int M , int X ) { int [ ] [ ] dp = new int [ N + 1 ] [ 2 ] ; if ( X == 1 ) { dp [ 0 ] [ 0 ] = 1 ; } else { dp [ 0 ] [ 1 ] = 0 ; } if ( X == 1 ) { dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = M - 1 ; } else { dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = ( M - 2 ) ; } for ( int i = 2 ; i < N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) ; } return dp [ N - 1 ] [ 0 ] ; } }
public static int getMinNum ( int a , int b , int c ) { if ( c < a || c > b ) { return c ; } int x = ( ( b / c ) * c ) + c ; return x ; } public static void main ( String [ ] args ) { int a = 2 ; int b = 4 ; int c = 4 ; System . out . println ( getMinNum ( a , b , c ) ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; String S = input . next ( ) ; int x = 0 ; int max_num = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( S . charAt ( i ) == ' I ' ) { x += 1 ; } else { x -= 1 ; } if ( x > max_num ) { max_num = x ; } } System . out . println ( max_num ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String [ ] NM = scanner . nextLine ( ) . split ( " ▁ " ) ; int N = Integer . parseInt ( NM [ 0 ] ) ; int M = Integer . parseInt ( NM [ 1 ] ) ; if ( N == 0 ) { break ; } protect ( N , M , scanner ) ; } } public static void protect ( int N , int M , Scanner scanner ) { List < int [ ] > DP = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] values = new int [ 2 ] ; values [ 0 ] = Integer . parseInt ( input [ 0 ] ) ; values [ 1 ] = Integer . parseInt ( input [ 1 ] ) ; DP . add ( values ) ; } DP . sort ( Comparator . comparingInt ( arr -> arr [ 1 ] ) ) ; int nokori = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( M > DP . get ( N - i - 1 ) [ 0 ] ) { M -= DP . get ( N - i - 1 ) [ 0 ] ; DP . remove ( N - i - 1 ) ; } else if ( M <= DP . get ( N - i - 1 ) [ 0 ] ) { nokori = ( DP . get ( N - i - 1 ) [ 0 ] - M ) * DP . get ( N - i - 1 ) [ 1 ] ; M = 0 ; DP . remove ( N - i - 1 ) ; break ; } } for ( int i = 0 ; i < DP . size ( ) ; i ++ ) { nokori += DP . get ( i ) [ 0 ] * DP . get ( i ) [ 1 ] ; } System . out . println ( nokori ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] A = new int [ 3 * N ] ; for ( int i = 0 ; i < 3 * N ; i ++ ) { A [ i ] = scanner . nextInt ( ) ; } int [ ] L = Arrays . copyOfRange ( A , 0 , N ) ; int [ ] C = Arrays . copyOfRange ( A , N , 2 * N ) ; int [ ] R = Arrays . copyOfRange ( A , 2 * N , 3 * N ) ; List < Integer > F = new ArrayList < > ( ) ; int sumL = 0 ; for ( int l : L ) { sumL += l ; } F . add ( sumL ) ; PriorityQueue < Integer > minHeapL = new PriorityQueue < > ( Arrays . asList ( L ) ) ; for ( int c : C ) { int lastF = F . get ( F . size ( ) - 1 ) ; int newF = lastF + c - minHeapL . poll ( ) ; F . add ( newF ) ; } List < Integer > B = new ArrayList < > ( ) ; int [ ] negR = new int [ R . length ] ; for ( int i = 0 ; i < R . length ; i ++ ) { negR [ i ] = - R [ i ] ; } int sumR = 0 ; for ( int r : negR ) { sumR += r ; } B . add ( sumR ) ; PriorityQueue < Integer > minHeapR = new PriorityQueue < > ( Arrays . asList ( negR ) ) ; for ( int i = C . length - 1 ; i >= 0 ; i -- ) { int lastB = B . get ( B . size ( ) - 1 ) ; int newB = lastB - C [ i ] - minHeapR . poll ( ) ; B . add ( newB ) ; } int maxSum = Integer . MIN_VALUE ; for ( int i = 0 ; i < F . size ( ) ; i ++ ) { int sum = F . get ( i ) + B . get ( B . size ( ) - 1 - i ) ; if ( sum > maxSum ) { maxSum = sum ; } } System . out . println ( maxSum ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 5 , 6 } ; int m = arr . length ; int N = 7 ; System . out . println ( " Total ▁ number ▁ of ▁ ways ▁ = ▁ " + countWays ( arr , m , N ) ) ; } public static int countWays ( int [ ] arr , int m , int N ) { int [ ] count = new int [ N + 1 ] ; count [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( i >= arr [ j ] ) { count [ i ] += count [ i - arr [ j ] ] ; } } } return count [ N ] ; } }
public class Main { public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } public static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) { return 1 ; } else { return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } } }
public class Main { public static void countFreq ( int [ ] a , int n ) { HashMap < Integer , Integer > hm = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hm . put ( a [ i ] , hm . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } int cumul = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cumul += hm . get ( a [ i ] ) ; if ( hm . get ( a [ i ] ) > 0 ) { System . out . println ( a [ i ] + " ▁ - > ▁ " + cumul ) ; } hm . put ( a [ i ] , 0 ) ; } } public static void main ( String [ ] args ) { int [ ] a = { 1 , 3 , 2 , 4 , 2 , 1 } ; int n = a . length ; countFreq ( a , n ) ; } }
public class Main { public static void possibleTripletInRange ( int L , int R ) { boolean flag = false ; int possibleA = 0 ; int possibleB = 0 ; int possibleC = 0 ; int numbersInRange = ( R - L + 1 ) ; if ( numbersInRange < 3 ) { flag = false ; } else if ( numbersInRange > 3 ) { flag = true ; if ( ( L % 2 ) > 0 ) { L += 1 ; } possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { if ( ( L % 2 ) == 0 ) { flag = true ; possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { flag = false ; } } if ( flag == true ) { System . out . println ( " ( " + possibleA + " , " + possibleB + " , " + possibleC + " ) ▁ is ▁ one ▁ such ▁ possible ▁ triplet ▁ between ▁ " + L + " ▁ and ▁ " + R ) ; } else { System . out . println ( " No ▁ Such ▁ Triplet ▁ exists ▁ between ▁ " + L + " ▁ and ▁ " + R ) ; } } public static void main ( String [ ] args ) { int L = 2 ; int R = 10 ; possibleTripletInRange ( L , R ) ; L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ; } }
``` java public class Main { public static void main ( String [ ] args ) { String alphabets = " abcdefghijklmnopqrstuvwxyz " ; String charSet = " qwertyuiopasdfghjklzxcvbnm " ; String str1 = " egrt " ; System . out . println ( conversion ( charSet , str1 ) ) ; } public static String conversion ( String charSet , String str1 ) { String s2 = " " ; String alphabets = " abcdefghijklmnopqrstuvwxyz " ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { s2 += alphabets . charAt ( charSet . indexOf ( str1 . charAt ( i ) ) ) ; } return s2 ; } } ```
import java . util . HashSet ; import java . util . Set ; public class Main { static Set < Integer > s = new HashSet < > ( ) ; public static void generateNumber ( int count , int [ ] a , int n , int num , int k ) { if ( k == count ) { s . add ( num ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { generateNumber ( count + 1 , a , n , num + a [ i ] , k ) ; } } public static void printDistinctIntegers ( int k , int [ ] a , int n ) { generateNumber ( 0 , a , n , 0 , k ) ; System . out . print ( " The ▁ " + s . size ( ) + " ▁ distinct ▁ integers ▁ are : ▁ " ) ; s . stream ( ) . sorted ( ) . forEach ( i -> System . out . print ( i + " ▁ " ) ) ; } public static void main ( String [ ] args ) { int [ ] a = { 3 , 8 , 17 , 5 } ; int n = a . length ; int k = 2 ; printDistinctIntegers ( k , a , n ) ; } }
public class Main { public static int product ( int x ) { int prod = 1 ; while ( x != 0 ) { prod *= ( x % 10 ) ; x /= 10 ; } return prod ; } public static int findNumber ( int l , int r ) { String a = String . valueOf ( l ) ; String b = String . valueOf ( r ) ; int ans = r ; for ( int i = 0 ; i < b . length ( ) ; i ++ ) { if ( b . charAt ( i ) == '0' ) { continue ; } char [ ] curr = b . toCharArray ( ) ; curr [ i ] = ( char ) ( ( ( curr [ i ] - '0' ) - 1 ) + '0' ) ; for ( int j = i + 1 ; j < curr . length ; j ++ ) { curr [ j ] = '9' ; } int num = 0 ; for ( char c : curr ) { num = num * 10 + ( c - '0' ) ; } if ( num >= l && product ( ans ) < product ( num ) ) { ans = num ; } } return ans ; } public static void main ( String [ ] args ) { int l = 1 , r = 10 ; System . out . println ( findNumber ( l , r ) ) ; l = 51 ; r = 62 ; System . out . println ( findNumber ( l , r ) ) ; } }
public class Main { static boolean [ ] isPrime = new boolean [ 100005 ] ; public static void sieveOfEratostheneses ( ) { for ( int i = 0 ; i < 100005 ; i ++ ) { isPrime [ i ] = true ; } isPrime [ 1 ] = false ; int i = 2 ; while ( i * i < 100005 ) { if ( isPrime [ i ] ) { int j = 2 * i ; while ( j < 100005 ) { isPrime [ j ] = false ; j += i ; } } i ++ ; } } public static int findPrime ( int n ) { int num = n + 1 ; while ( num < 100005 ) { if ( isPrime [ num ] ) { return num ; } num ++ ; } return 0 ; } public static int minNumber ( int [ ] arr ) { sieveOfEratostheneses ( ) ; int s = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { s += arr [ i ] ; } if ( isPrime [ s ] ) { return 0 ; } int num = findPrime ( s ) ; return num - s ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 6 , 8 , 12 } ; System . out . println ( minNumber ( arr ) ) ; } }
public class Main { static final int MAX = 25 ; public static void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 7 , 11 , 15 } ; int n = arr . length ; System . out . println ( getMinSum ( arr , n ) ) ; } public static int getMinSum ( int [ ] arr , int n ) { int [ ] bits_count = new int [ MAX ] ; int max_bit = 0 ; int sum = 0 ; int ans = 0 ; for ( int d = 0 ; d < n ; d ++ ) { int e = arr [ d ] ; int f = 0 ; while ( e > 0 ) { int rem = e % 2 ; e = e / 2 ; if ( rem == 1 ) { bits_count [ f ] += rem ; } f ++ ; } max_bit = Math . max ( max_bit , f ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = ( int ) Math . pow ( 2 , d ) ; if ( bits_count [ d ] > n / 2 ) { ans = ans + temp ; } } for ( int d = 0 ; d < n ; d ++ ) { arr [ d ] = arr [ d ] ^ ans ; sum = sum + arr [ d ] ; } return sum ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; String s = input . nextLine ( ) ; String [ ] a = { " " } ; for ( char c : s . toCharArray ( ) ) { if ( a [ a . length - 1 ] . equals ( " " ) && c == ' ▁ ' ) { continue ; } a [ a . length - 1 ] += c ; if ( c == ' ? ' || c == ' ! ' || c == ' . ' ) { String [ ] temp = new String [ a . length + 1 ] ; System . arraycopy ( a , 0 , temp , 0 , a . length ) ; temp [ a . length ] = " " ; a = temp ; } } int ans = 0 ; int last = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] . length ( ) > n ) { System . out . println ( " Impossible " ) ; System . exit ( 0 ) ; } int add = ( i + 1 != a . length ) ? a [ i ] . length ( ) + 1 : a [ i ] . length ( ) ; if ( i == 0 || ( last + add ) > n ) { ans ++ ; last = a [ i ] . length ( ) ; } else { last += add ; } } System . out . println ( ans ) ; } }
import java . util . ArrayDeque ; import java . util . Deque ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] shortcuts = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { shortcuts [ i ] = scanner . nextInt ( ) - 1 ; } int [ ] energySpent = getMinimumEnergySpent ( n , shortcuts ) ; for ( int energy : energySpent ) { System . out . print ( energy + " ▁ " ) ; } } public static int [ ] getMinimumEnergySpent ( int n , int [ ] shortcuts ) { int [ ] energySpent = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { energySpent [ i ] = i ; } Deque < Integer > queue = new ArrayDeque < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { queue . offer ( i ) ; } while ( ! queue . isEmpty ( ) ) { int idx = queue . poll ( ) ; if ( idx < n - 1 && energySpent [ idx + 1 ] > energySpent [ idx ] + 1 ) { energySpent [ idx + 1 ] = energySpent [ idx ] + 1 ; queue . offer ( idx + 1 ) ; } if ( idx > 0 && energySpent [ idx - 1 ] > energySpent [ idx ] + 1 ) { energySpent [ idx - 1 ] = energySpent [ idx ] + 1 ; queue . offer ( idx - 1 ) ; } if ( energySpent [ idx ] + 1 < energySpent [ shortcuts [ idx ] ] ) { energySpent [ shortcuts [ idx ] ] = energySpent [ idx ] + 1 ; queue . offer ( shortcuts [ idx ] ) ; } } return energySpent ; } }
public static int strangeBDParty ( int n , int m , int [ ] k , int [ ] c ) { Arrays . sort ( k ) ; int cost = 0 ; int l = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( l < m && c [ l ] < c [ k [ i ] - 1 ] ) { cost += c [ l ] ; l ++ ; } else { cost += c [ k [ i ] - 1 ] ; } } return cost ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int rep = scanner . nextInt ( ) ; for ( int i = 0 ; i < rep ; i ++ ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int [ ] k = new int [ n ] ; int [ ] c = new int [ m ] ; for ( int j = 0 ; j < n ; j ++ ) { k [ j ] = scanner . nextInt ( ) ; } for ( int j = 0 ; j < m ; j ++ ) { c [ j ] = scanner . nextInt ( ) ; } System . out . println ( strangeBDParty ( n , m , k , c ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 8 , 10 } ; int n = arr . length ; System . out . println ( findMaximumNum ( arr , n ) ) ; } public static int findMaximumNum ( int [ ] arr , int n ) { int i = n ; while ( i >= 1 ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i <= arr [ j ] ) { count ++ ; } } if ( count >= i ) { return i ; } i -- ; } return 1 ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] s = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] l = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( l [ 1 ] ) ; int b = Integer . parseInt ( l [ 2 ] ) + 1 ; if ( l [ 0 ] . equals ( " print " ) ) { for ( int j = a ; j < b ; j ++ ) { System . out . print ( s [ j ] ) ; } System . out . println ( ) ; } else if ( l [ 0 ] . equals ( " reverse " ) ) { String [ ] subArray = Arrays . copyOfRange ( s , a , b ) ; for ( int j = 0 ; j < subArray . length / 2 ; j ++ ) { String temp = subArray [ j ] ; subArray [ j ] = subArray [ subArray . length - j - 1 ] ; subArray [ subArray . length - j - 1 ] = temp ; } System . arraycopy ( subArray , 0 , s , a , subArray . length ) ; } else if ( l [ 0 ] . equals ( " replace " ) ) { for ( int j = a ; j < b ; j ++ ) { s [ j ] = l [ 3 ] ; } } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 } ; int n = arr . length ; System . out . println ( solve ( arr , n ) ) ; } public static int solve ( int [ ] A , int n ) { int [ ] [ ] dp = new int [ 2000 ] [ 2000 ] ; int flag = 1 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += A [ i ] ; } for ( int i = - sum ; i <= sum ; i ++ ) { dp [ 0 ] [ i ] = ( int ) Math . pow ( 10 , 9 ) ; } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = - sum ; j <= sum ; j ++ ) { dp [ flag ] [ j ] = ( int ) Math . pow ( 10 , 9 ) ; if ( j - A [ i - 1 ] <= sum && j - A [ i - 1 ] >= - sum ) { dp [ flag ] [ j ] = dp [ flag ^ 1 ] [ j - A [ i - 1 ] ] ; } if ( j + A [ i - 1 ] <= sum && j + A [ i - 1 ] >= - sum && dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] != ( int ) Math . pow ( 10 , 9 ) ) { dp [ flag ] [ j ] = Math . min ( dp [ flag ] [ j ] , dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] + 1 ) ; } } flag = flag ^ 1 ; } for ( int i = 0 ; i <= sum ; i ++ ) { if ( dp [ flag ^ 1 ] [ i ] != ( int ) Math . pow ( 10 , 9 ) ) { return dp [ flag ^ 1 ] [ i ] ; } } return n - 1 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { try { String input = scanner . nextLine ( ) ; if ( input . isEmpty ( ) ) { break ; } String [ ] N = input . split ( " ▁ " ) ; for ( int l = 0 ; l < N . length ; l ++ ) { String [ ] points = N [ l ] . split ( " ▁ " ) ; int [ ] P = new int [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { P [ i ] = ( int ) ( Double . parseDouble ( points [ i ] ) * Math . pow ( 10 , 5 ) ) ; } int [ ] AB = { P [ 2 ] - P [ 0 ] , P [ 3 ] - P [ 1 ] } ; int [ ] CD = { P [ 6 ] - P [ 4 ] , P [ 7 ] - P [ 5 ] } ; if ( AB [ 0 ] * CD [ 0 ] + AB [ 1 ] * CD [ 1 ] == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } catch ( Exception e ) { break ; } } } }
``` java import java . util . Scanner ; import java . util . ArrayList ; import java . util . Iterator ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int m = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; if ( m == 0 ) break ; ArrayList < Integer > player = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { player . add ( i ) ; } int p = 0 ; FizzBuzz fb = new FizzBuzz ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String inp = scanner . next ( ) ; if ( player . size ( ) > 1 ) { if ( ! inp . equals ( fb . next ( ) ) ) { player . remove ( p ) ; p = p % player . size ( ) ; } else { p = ( p + 1 ) % player . size ( ) ; } } } StringBuilder result = new StringBuilder ( String . valueOf ( player . get ( 0 ) + 1 ) ) ; if ( player . size ( ) > 1 ) { for ( int pi : player . subList ( 1 , player . size ( ) ) ) { result . append ( " ▁ " ) . append ( pi + 1 ) ; } } System . out . println ( result . toString ( ) ) ; } } static class FizzBuzz implements Iterator < String > { private int c = 1 ; @ Override public boolean hasNext ( ) { return true ; } @ Override public String next ( ) { StringBuilder res = new StringBuilder ( ) ; if ( c % 3 == 0 ) { res . append ( " Fizz " ) ; } if ( c % 5 == 0 ) { res . append ( " Buzz " ) ; } if ( res . length ( ) == 0 ) { return String . valueOf ( c ++ ) ; } else { c ++ ; return res . toString ( ) ; } } } } ```
int [ ] [ ] l = new int [ 1001 ] [ 1001 ] ; public void initialize ( ) { l [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < 1001 ; i ++ ) { l [ i ] [ 0 ] = 1 ; for ( int j = 1 ; j <= i ; j ++ ) { l [ i ] [ j ] = ( l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ) ; } } } public int nCr ( int n , int r ) { return l [ n ] [ r ] ; } initialize ( ) ; int n = 8 ; int r = 3 ; System . out . println ( nCr ( n , r ) ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; System . out . println ( Math . max ( 0 , Math . min ( b , d ) - Math . max ( a , c ) ) ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 5 , 100 , 8 } ; int [ ] b = { 2 , 3 } ; int n = a . length ; int m = b . length ; calculate ( a , b , n , m ) ; } public static void calculate ( int [ ] a , int [ ] b , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] != 0 ) { mul = mul * b [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { int x = ( int ) Math . floor ( a [ i ] / mul ) ; System . out . print ( x + " ▁ " ) ; } } }
Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int a = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . sum ( ) ; int b = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . sum ( ) ; int c = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . sum ( ) ; System . out . println ( ( a - b ) + " \n " + ( b - c ) ) ;
import java . util . ArrayDeque ; import java . lang . Math ; import java . util . Scanner ; import java . util . Random ; import java . util . Arrays ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < t ; k ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String s = scanner . nextLine ( ) ; int ans = 0 ; int left = 0 ; int right = 0 ; int i = 0 ; while ( i < n && s . charAt ( i ) != ' > ' ) { i ++ ; } int j = n - 1 ; while ( j >= 0 && s . charAt ( j ) != ' < ' ) { j -- ; } System . out . println ( Math . min ( i , n - j - 1 ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int x = 1 ; while ( Math . log ( n ) / Math . log ( 2 ) % 1 != 0 ) { x ++ ; n -= Math . pow ( 2 , ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ) ; } System . out . println ( x ) ; } }
int p_speed = Integer . parseInt ( input ) ; int d_speed = Integer . parseInt ( input ) ; int time = Integer . parseInt ( input ) ; int wait = Integer . parseInt ( input ) ; int distance = Integer . parseInt ( input ) ; int position_p = time * p_speed ; int position_d = 0 ; int counter = 0 ; int time_counter = 0 ; while ( position_p < distance && d_speed > p_speed ) { int time_d = position_p / ( d_speed - p_speed ) ; position_p += ( time_d * p_speed ) ; if ( position_p >= distance ) { break ; } int t_back = position_p / d_speed + wait ; position_p += ( t_back * p_speed ) ; counter ++ ; } System . out . println ( counter ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String currentTime = input . nextLine ( ) ; String timeDuration = input . nextLine ( ) ; int currentTimeMin = Integer . parseInt ( currentTime . substring ( 0 , 2 ) ) * 60 + Integer . parseInt ( currentTime . substring ( 3 ) ) ; int timeDurationMin = Integer . parseInt ( timeDuration . substring ( 0 , 2 ) ) * 60 + Integer . parseInt ( timeDuration . substring ( 3 ) ) ; int tMin = currentTimeMin - timeDurationMin ; if ( currentTimeMin < timeDurationMin ) { tMin = 24 * 60 - Math . abs ( tMin ) ; } String hour = ( tMin / 60 < 10 ) ? "0" + tMin / 60 : String . valueOf ( tMin / 60 ) ; String minute = ( tMin % 60 < 10 ) ? "0" + tMin % 60 : String . valueOf ( tMin % 60 ) ; System . out . println ( hour + " : " + minute ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { - 5 , - 1 , - 1 , 2 , - 2 , - 3 } ; int n = a . length ; System . out . println ( longestAlternatingSubarray ( a , n ) ) ; } public static int longestAlternatingSubarray ( int [ ] a , int n ) { int longest = 1 ; int cnt = 1 ; int i = 1 ; while ( i < n ) { if ( a [ i ] * a [ i - 1 ] < 0 ) { cnt = cnt + 1 ; longest = Math . max ( longest , cnt ) ; } else { cnt = 1 ; } i = i + 1 ; } return longest ; } }
public class Main { public static void checkTypeOfTriangle ( int a , int b , int c ) { int sqa = ( int ) Math . pow ( a , 2 ) ; int sqb = ( int ) Math . pow ( b , 2 ) ; int sqc = ( int ) Math . pow ( c , 2 ) ; if ( sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb ) { System . out . println ( " Right - angled ▁ Triangle " ) ; } else if ( sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb ) { System . out . println ( " Obtuse - angled ▁ Triangle " ) ; } else { System . out . println ( " Acute - angled ▁ Triangle " ) ; } } public static void main ( String [ ] args ) { int a = 2 ; int b = 2 ; int c = 2 ; checkTypeOfTriangle ( a , b , c ) ; } }
public class Main { public static void main ( String [ ] args ) { String s = " GFGFG " ; int n = s . length ( ) ; countSubsequence ( s , n ) ; } public static void countSubsequence ( String s , int n ) { int cntG = 0 ; int cntF = 0 ; int result = 0 ; int C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' G ' ) { cntG += 1 ; result += C ; continue ; } if ( s . charAt ( i ) == ' F ' ) { cntF += 1 ; C += cntG ; continue ; } } System . out . println ( result ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] [ ] edges = new int [ N ] [ 3 ] ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { edges [ i ] [ j ] = Integer . parseInt ( input [ j ] ) ; } } for ( int cx = 0 ; cx <= 100 ; cx ++ ) { for ( int cy = 0 ; cy <= 100 ; cy ++ ) { int htop = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int x = edges [ i ] [ 0 ] ; int y = edges [ i ] [ 1 ] ; int h = edges [ i ] [ 2 ] ; if ( h > 0 ) { htop = Math . abs ( x - cx ) + Math . abs ( y - cy ) + h ; } } for ( int i = 0 ; i < N ; i ++ ) { int x = edges [ i ] [ 0 ] ; int y = edges [ i ] [ 1 ] ; int h = edges [ i ] [ 2 ] ; if ( h == 0 ) { if ( htop - ( Math . abs ( x - cx ) + Math . abs ( y - cy ) ) > 0 ) { break ; } } if ( h > 0 ) { if ( htop - ( Math . abs ( x - cx ) + Math . abs ( y - cy ) ) != h ) { break ; } } if ( i == N - 1 ) { System . out . println ( cx + " ▁ " + cy + " ▁ " + htop ) ; System . exit ( 0 ) ; } } } } } } ```
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 150 ; System . out . println ( countSteps ( n ) ) ; } public static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . floor ( Math . cbrt ( n ) ) ; n -= ( largest * largest * largest ) ; steps ++ ; } return steps ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < double [ ] > othersResults = new ArrayList < > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { List < double [ ] > roundResults = new ArrayList < > ( ) ; for ( int j = 0 ; j < 8 ; j ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int id = Integer . parseInt ( input [ 0 ] ) ; double time = Double . parseDouble ( input [ 1 ] ) ; roundResults . add ( new double [ ] { id , time } ) ; } double [ ] [ ] result = solve ( roundResults ) ; double [ ] [ ] top2 = result [ 0 ] ; double [ ] [ ] others = result [ 1 ] ; for ( double [ ] entry : top2 ) { System . out . println ( entry [ 0 ] + " ▁ " + entry [ 1 ] ) ; } for ( double [ ] entry : others ) { othersResults . add ( entry ) ; } } double [ ] [ ] result = solve ( othersResults ) ; double [ ] [ ] top2 = result [ 0 ] ; for ( double [ ] entry : top2 ) { System . out . println ( entry [ 0 ] + " ▁ " + entry [ 1 ] ) ; } } public static double [ ] [ ] solve ( List < double [ ] > data ) { data . sort ( Comparator . comparingDouble ( arr -> arr [ 1 ] ) ) ; double [ ] [ ] top2 = new double [ 2 ] [ 2 ] ; double [ ] [ ] others = new double [ data . size ( ) - 2 ] [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { top2 [ i ] = data . get ( i ) ; } for ( int i = 2 ; i < data . size ( ) ; i ++ ) { others [ i - 2 ] = data . get ( i ) ; } return new double [ ] [ ] { top2 , others } ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > a = new ArrayList < > ( ) ; for ( String s : input ) { a . add ( Integer . parseInt ( s ) ) ; } Collections . sort ( a ) ; int x ; if ( a . get ( 0 ) . equals ( a . get ( a . size ( ) - 1 ) ) ) { x = Collections . frequency ( a , a . get ( 0 ) ) * ( Collections . frequency ( a , a . get ( a . size ( ) - 1 ) ) - 1 ) / 2 ; } else { x = Collections . frequency ( a , a . get ( 0 ) ) * Collections . frequency ( a , a . get ( a . size ( ) - 1 ) ) ; } System . out . println ( a . get ( a . size ( ) - 1 ) - a . get ( 0 ) + " ▁ " + x ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 6 } ; System . out . println ( findCount ( arr ) ) ; } public static int bitsoncount ( int x ) { return Integer . bitCount ( x ) ; } public static int findCount ( int [ ] arr ) { int ans = 0 ; for ( int i : arr ) { int x = bitsoncount ( i ) ; if ( i % x == 0 ) { ans ++ ; } } return ans ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } int s = 0 ; for ( int num : a ) { s += num ; } if ( s % ( ( n + 1 ) * n / 2 ) != 0 ) { System . out . println ( " NO " ) ; return ; } s /= ( ( n + 1 ) * n / 2 ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ ( i + 1 ) % n ] - a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] -= s ; } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] > 0 || b [ i ] % n != 0 ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 390 ; System . out . println ( maxProd ( N ) ) ; } public static int maxProd ( int N ) { if ( N == 0 ) { return 1 ; } if ( N < 10 ) { return N ; } return Math . max ( maxProd ( N / 10 ) * ( N % 10 ) , maxProd ( N / 10 - 1 ) * 9 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] s = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = scanner . nextInt ( ) ; } int max = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == 1 ) { int count = 2 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( s [ j ] == 1 ) { count ++ ; continue ; } else { break ; } } if ( count > max ) { max = count ; } } } System . out . println ( max ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = Integer . parseInt ( input . nextLine ( ) ) ; for ( int tt = 0 ; tt < t ; tt ++ ) { int n = Integer . parseInt ( input . nextLine ( ) ) ; int [ ] A = new int [ n ] ; int [ ] B = new int [ n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { String [ ] line = input . nextLine ( ) . split ( " ▁ " ) ; int x = Integer . parseInt ( line [ 0 ] ) ; int y = Integer . parseInt ( line [ 1 ] ) ; if ( x == 0 ) { B [ i / 2 ] = Math . abs ( y ) ; } else { A [ i / 2 ] = Math . abs ( x ) ; } } Arrays . sort ( A ) ; Arrays . sort ( B ) ; double ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . sqrt ( ( B [ i ] * B [ i ] ) + ( A [ i ] * A [ i ] ) ) ; } System . out . println ( ans ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countNonDecreasing ( n ) ) ; } public static int countNonDecreasing ( int n ) { int N = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count = ( int ) ( count * ( N + i - 1 ) ) ; count = ( int ) ( count / i ) ; } return count ; } }
public class Main { public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; int l = s . length ( ) ; System . out . println ( reduceString ( s , l ) ) ; } public static int reduceString ( String s , int l ) { int count = 1 ; int steps = 0 ; for ( int i = 1 ; i < l ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { count += 1 ; } else { steps += ( int ) ( count / 2 ) ; count = 1 ; } } steps += ( int ) ( count / 2 ) ; return steps ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int A = Integer . parseInt ( input [ 0 ] ) ; int B = Integer . parseInt ( input [ 1 ] ) ; if ( A <= B ) { System . out . println ( " Impossible " ) ; System . exit ( 0 ) ; } int [ ] chain = new int [ A + B ] ; int N = A + B ; for ( int i = 0 ; i < N ; i ++ ) { if ( chain . length == 0 ) { chain [ 0 ] = i ; continue ; } int last = chain [ chain . length - 1 ] ; if ( ask ( last , i , scanner ) ) { chain [ chain . length ] = i ; } else { chain = pop ( chain ) ; } } int main = pop ( chain ) ; String ret = " " ; for ( int x = 0 ; x < N ; x ++ ) { ret += ( ask ( main , x , scanner ) ? "1" : "0" ) ; } System . out . println ( " ! ▁ " + ret ) ; } public static boolean ask ( int i , int j , Scanner scanner ) { System . out . print ( " ? ▁ " + i + " ▁ " + j ) ; return scanner . nextLine ( ) . equals ( " Y " ) ; } public static int [ ] pop ( int [ ] arr ) { int [ ] newArr = new int [ arr . length - 1 ] ; for ( int i = 0 ; i < newArr . length ; i ++ ) { newArr [ i ] = arr [ i ] ; } return newArr ; } }
int x , y , a , b ; Scanner scanner = new Scanner ( System . in ) ; x = scanner . nextInt ( ) ; y = scanner . nextInt ( ) ; a = scanner . nextInt ( ) ; b = scanner . nextInt ( ) ; List < List < Integer > > c = new ArrayList < > ( ) ; for ( int i = a ; i <= x ; i ++ ) { for ( int j = b ; j <= y ; j ++ ) { if ( i > j ) { List < Integer > temp = new ArrayList < > ( ) ; temp . add ( i ) ; temp . add ( j ) ; c . add ( temp ) ; } } } System . out . println ( c . size ( ) ) ; for ( List < Integer > i : c ) { for ( Integer num : i ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; }
import java . util . * ; public class Main { static int mod = 1000000007 ; public static void main ( String [ ] args ) { int n = 19374857 ; mod = 17 ; System . out . println ( calculateFactors ( n ) ) ; } static int mult ( int a , int b ) { return ( ( a % mod ) * ( b % mod ) ) % mod ; } static int calculateFactors ( int n ) { int cnt = 0 ; int ans = 1 ; while ( n % 2 == 0 ) { cnt += 1 ; n = n / 2 ; } if ( cnt > 0 ) { ans = mult ( ans , ( cnt + 1 ) ) ; } for ( int i = 3 ; i < ( int ) Math . sqrt ( n ) ; i += 2 ) { cnt = 0 ; while ( n % i == 0 ) { cnt += 1 ; n = n / i ; } if ( cnt > 0 ) { ans = mult ( ans , ( cnt + 1 ) ) ; } } if ( n > 2 ) { ans = mult ( ans , 2 ) ; } return ans % mod ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; String result = " " ; int i = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == ' . ' ) { result += '0' ; } else { i ++ ; if ( s . charAt ( i ) == ' . ' ) { result += '1' ; } else { result += '2' ; } } i ++ ; } System . out . println ( result ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 1 , 5 , 3 } ; int n = arr . length ; System . out . println ( maxAbsDiff ( arr , n ) ) ; } public static int maxAbsDiff ( int [ ] arr , int n ) { int minEle = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minEle = Math . min ( minEle , arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } return ( maxEle - minEle ) ; } }
import java . util . * ; import java . io . * ; public class Main { static final int BIG_NUM = 2000000000 ; static final long HUGE_NUM = 99999999999999999L ; static final int MOD = 1000000007 ; static final double EPS = 0.000000001 ; enum Type { UNKOWN , OK , NOT } static class Info { int [ ] work ; public Info ( int arg_a , int arg_b , int arg_c ) { work = new int [ ] { arg_a , arg_b , arg_c } ; } } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int A = scanner . nextInt ( ) ; int B = scanner . nextInt ( ) ; int C = scanner . nextInt ( ) ; if ( A == 0 && B == 0 && C == 0 ) { break ; } Type [ ] table = new Type [ ( A + B + C ) + 1 ] ; Arrays . fill ( table , Type . UNKOWN ) ; int N = scanner . nextInt ( ) ; List < Info > info = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int result = scanner . nextInt ( ) ; if ( result == 1 ) { table [ a ] = Type . OK ; table [ b ] = Type . OK ; table [ c ] = Type . OK ; } else { info . add ( new Info ( a , b , c ) ) ; } } for ( Info anInfo : info ) { int count = 0 ; int tmp = - 1 ; for ( int k = 0 ; k < 3 ; k ++ ) { if ( table [ anInfo . work [ k ] ] == Type . OK ) { count ++ ; } else if ( table [ anInfo . work [ k ] ] == Type . UNKOWN ) { tmp = anInfo . work [ k ] ; } } if ( count != 2 || tmp == - 1 ) { continue ; } table [ tmp ] = Type . NOT ; } for ( int i = 1 ; i < ( A + B + C ) + 1 ; i ++ ) { if ( table [ i ] == Type . OK ) { System . out . println ( "1" ) ; } else if ( table [ i ] == Type . NOT ) {
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 3 , 4 } ; int [ ] b = { 2 , 3 , 4 , 5 , 8 } ; int n = a . length ; int m = b . length ; System . out . println ( minRemove ( a , b , n , m ) ) ; } public static int minRemove ( int [ ] a , int [ ] b , int n , int m ) { Map < Integer , Integer > countA = new HashMap < > ( ) ; Map < Integer , Integer > countB = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { countA . put ( a [ i ] , countA . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } for ( int i = 0 ; i < m ; i ++ ) { countB . put ( b [ i ] , countB . getOrDefault ( b [ i ] , 0 ) + 1 ) ; } int res = 0 ; for ( int x : countA . keySet ( ) ) { if ( countB . containsKey ( x ) ) { res += Math . min ( countA . get ( x ) , countB . get ( x ) ) ; } } return res ; } }
public class Main { public static void main ( String [ ] args ) { int L = 2 ; int R = 60 ; System . out . println ( count ( L , R ) ) ; L = 1 ; R = 1000 ; System . out . println ( count ( L , R ) ) ; } public static int count ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i < r ; i ++ ) { if ( i < 10 ) { cnt ++ ; } else { int n = i % 10 ; int k = i ; while ( k >= 10 ) { k = k / 10 ; } if ( n == k ) { cnt ++ ; } } } return cnt ; } }
import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int number = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ number ] ; for ( int i = 0 ; i < number ; i ++ ) { arr [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } int counter = 0 ; HashMap < String , Object > data = new HashMap < > ( ) ; data . put ( " found " , " NO " ) ; data . put ( " first " , 0 ) ; for ( int i = 0 ; i < number ; i ++ ) { int x = arr [ i ] ; if ( x == 1 ) { if ( counter == 0 ) { counter = 1 ; } if ( data . get ( " found " ) . equals ( " yes " ) ) { int y = i - ( int ) data . get ( " first " ) ; counter = counter * y ; data . put ( " first " , i ) ; } else { data . put ( " found " , " yes " ) ; data . put ( " first " , i ) ; } } } System . out . println ( counter ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countDivisor ( n ) ) ; } public static int bit ( int x ) { int ans = 0 ; while ( x > 0 ) { x /= 2 ; ans ++ ; } return ans ; } public static boolean check ( int d , int x ) { if ( bit ( x / d ) <= bit ( d ) ) { return true ; } return false ; } public static int bs ( int n ) { int l = 1 ; int r = ( int ) Math . sqrt ( n ) ; while ( l < r ) { int m = ( l + r ) / 2 ; if ( check ( m , n ) ) { r = m ; } else { l = m + 1 ; } } if ( ! check ( l , n ) ) { return ( int ) Math . floor ( l + 1 ) ; } else { return ( int ) Math . floor ( l ) ; } } public static int countDivisor ( int n ) { return n - bs ( n ) + 1 ; } }
public class Main { static int INT_MAX = 100000000 ; public static void main ( String [ ] args ) { String s = " aaaaaaaa " ; int n = s . length ( ) ; System . out . println ( minimalSteps ( s , n ) ) ; } public static int minimalSteps ( String s , int n ) { int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = INT_MAX ; } String s1 = " " ; String s2 = " " ; dp [ 0 ] = 1 ; s1 += s . charAt ( 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { s1 += s . charAt ( i ) ; s2 = s . substring ( i + 1 , i + 1 + i + 1 ) ; dp [ i ] = Math . min ( dp [ i ] , dp [ i - 1 ] + 1 ) ; if ( s1 . equals ( s2 ) ) { dp [ i * 2 + 1 ] = Math . min ( dp [ i ] + 1 , dp [ i * 2 + 1 ] ) ; } } return dp [ n - 1 ] ; } }
public class Main { public static void main ( String [ ] args ) { int num = 8 ; int dig = 3 ; if ( check ( num , dig ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean checkUtil ( int num , int dig , int base ) { if ( dig == 1 && num < base ) { return true ; } if ( dig > 1 && num >= base ) { return checkUtil ( num / base , -- dig , base ) ; } return false ; } public static boolean check ( int num , int dig ) { for ( int base = 2 ; base < 33 ; base ++ ) { if ( checkUtil ( num , dig , base ) ) { return true ; } } return false ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 5 , 2 , 4 , 3 } ; int n = arr . length ; generateArr ( arr , n ) ; } public static void printArray ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static int getMin ( int [ ] arr , int i , int j ) { int minVal = arr [ i ] ; i ++ ; while ( i <= j ) { minVal = Math . min ( minVal , arr [ i ] ) ; i ++ ; } return minVal ; } public static int getMax ( int [ ] arr , int i , int j ) { int maxVal = arr [ i ] ; i ++ ; while ( i <= j ) { maxVal = Math . max ( maxVal , arr [ i ] ) ; i ++ ; } return maxVal ; } public static void generateArr ( int [ ] arr , int n ) { if ( n == 0 ) { return ; } if ( n == 1 ) { System . out . print ( arr [ 0 ] ) ; return ; } int [ ] tmpArr = new int [ n ] ; tmpArr [ 0 ] = getMax ( arr , 1 , n - 1 ) ; for ( int i = 1 ; i < n - 1 ; i ++ ) { tmpArr [ i ] = Math . abs ( getMax ( arr , i + 1 , n - 1 ) - getMin ( arr , 0 , i - 1 ) ) ; } tmpArr [ n - 1 ] = getMin ( arr , 0 , n - 2 ) ; printArray ( tmpArr , n ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner f = new Scanner ( System . in ) ; int n = Integer . parseInt ( f . nextLine ( ) ) ; String [ ] pStr = f . nextLine ( ) . split ( " ▁ " ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = Integer . parseInt ( pStr [ i ] ) ; } String c = f . nextLine ( ) ; int [ ] v = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( c . charAt ( i ) == ' B ' ) { v [ i ] = - p [ i ] ; } else { v [ i ] = p [ i ] ; } } int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( c . charAt ( i ) == ' B ' ) { s += p [ i ] ; } } int maxSum = 0 ; int [ ] vReverse = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { vReverse [ i ] = v [ n - 1 - i ] ; } maxSum = Math . max ( 0 , Math . max ( Arrays . stream ( v ) . reduce ( 0 , Integer :: sum ) , Arrays . stream ( vReverse ) . reduce ( 0 , Integer :: sum ) ) ) ; System . out . println ( s + maxSum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; double a = Double . parseDouble ( input [ 0 ] ) ; double b = Double . parseDouble ( input [ 1 ] ) ; double c = Double . parseDouble ( input [ 2 ] ) ; double d = Double . parseDouble ( input [ 3 ] ) ; double e = Double . parseDouble ( input [ 4 ] ) ; double f = Double . parseDouble ( input [ 5 ] ) ; double g = Double . parseDouble ( input [ 6 ] ) ; double h = Double . parseDouble ( input [ 7 ] ) ; System . out . println ( ( Math . abs ( ( a - c ) * ( f - h ) - ( e - g ) * ( b - d ) ) < 1e-10 ) ? " YES " : " NO " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int a = 1 ; int b = 2 ; int n = 10 ; System . out . println ( nthXorFib ( n , a , b ) ) ; } public static int nthXorFib ( int n , int a , int b ) { if ( n == 0 ) { return a ; } if ( n == 1 ) { return b ; } if ( n == 2 ) { return a ^ b ; } return nthXorFib ( n % 3 , a , b ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) . trim ( ) ) ; int taroScore = 0 ; int hanakoScore = 0 ; for ( int turn = 0 ; turn < n ; turn ++ ) { String [ ] animals = scanner . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; if ( animals [ 0 ] . equals ( animals [ 1 ] ) ) { taroScore += 1 ; hanakoScore += 1 ; } else if ( Math . max ( Integer . parseInt ( animals [ 0 ] ) , Integer . parseInt ( animals [ 1 ] ) ) == Integer . parseInt ( animals [ 0 ] ) ) { taroScore += 3 ; } else if ( Math . max ( Integer . parseInt ( animals [ 0 ] ) , Integer . parseInt ( animals [ 1 ] ) ) == Integer . parseInt ( animals [ 1 ] ) ) { hanakoScore += 3 ; } } System . out . println ( taroScore + " ▁ " + hanakoScore ) ; } }
import static java . lang . Math . pow ; public class Main { public static void main ( String [ ] args ) { int a = 5 ; System . out . println ( Area ( a ) ) ; } public static double Area ( int a ) { if ( a < 0 ) { return - 1 ; } double h = 1.268 * a ; double A = 0.70477 * pow ( h , 2 ) ; return A ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int ans = 0 ; Stack < int [ ] > stack = new Stack < > ( ) ; stack . push ( new int [ ] { 1 , 3 , 1 , 2 } ) ; while ( ! stack . isEmpty ( ) ) { int [ ] values = stack . pop ( ) ; int leftn = values [ 0 ] ; int leftd = values [ 1 ] ; int rightn = values [ 2 ] ; int rightd = values [ 3 ] ; int d = leftd + rightd ; if ( d <= 12000 ) { int n = leftn + rightn ; ans += 1 ; stack . push ( new int [ ] { n , d , rightn , rightd } ) ; stack . push ( new int [ ] { leftn , leftd , n , d } ) ; } } return String . valueOf ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int ans ; if ( n % 2 == 0 ) { ans = ( int ) Math . pow ( 2 , n / 2 ) ; } else { ans = 0 ; } System . out . println ( ans ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int d = 3 ; System . out . println ( sumPrime ( d ) ) ; } public static void sieve ( boolean [ ] prime , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . sqrt ( n ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * p ; i <= n ; i += p ) { prime [ i ] = false ; } } } } public static int sumPrime ( int d ) { int maxVal = ( int ) Math . pow ( 10 , d ) - 1 ; boolean [ ] prime = new boolean [ maxVal + 1 ] ; for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } sieve ( prime , maxVal ) ; int sum = 0 ; for ( int i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) { sum += i ; } } return sum ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int d = 8 ; System . out . println ( sumPrime ( d ) ) ; } public static void sieve ( boolean [ ] prime , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . sqrt ( n ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * p ; i <= n ; i += p ) { prime [ i ] = false ; } } } } public static int sumPrime ( int d ) { int maxVal = ( int ) Math . pow ( 2 , d ) - 1 ; boolean [ ] prime = new boolean [ maxVal + 1 ] ; for ( int i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } sieve ( prime , maxVal ) ; int sum = 0 ; for ( int i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) { sum += i ; } } return sum ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < n ; j ++ ) { String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input1 [ 0 ] ) ; int b = Integer . parseInt ( input1 [ 1 ] ) ; int [ ] z = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( z ) ; int q = 0 ; int w = 0 ; for ( int i = a - 1 ; i >= 0 ; i -- ) { q += z [ i ] ; if ( q / ( a - i ) >= b ) { w ++ ; } } System . out . println ( w ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < int [ ] > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < 2 ; i ++ ) { String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] intArr = new int [ inputArr . length ] ; for ( int j = 0 ; j < inputArr . length ; j ++ ) { intArr [ j ] = Integer . parseInt ( inputArr [ j ] ) ; } list . add ( intArr ) ; } list . sort ( Comparator . comparingInt ( a -> a [ 0 ] ) ) ; int [ ] a = list . get ( 0 ) ; int [ ] b = list . get ( 1 ) ; int result = b [ 0 ] - a [ 0 ] + ( b [ 1 ] > a [ 1 ] || ( b [ 1 ] == a [ 1 ] && b [ 2 ] > a [ 2 ] ) ? 1 : 0 ) ; System . out . println ( result ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } public static int maxPartitions ( int [ ] arr , int n ) { int ans = 0 ; int max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) { ans += 1 ; } } return ans ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 0 , 2 , 4 , 3 , 8 , 9 } ; int n = arr . length ; System . out . println ( countMaxContiguous ( arr , n ) ) ; } public static int countMaxContiguous ( int [ ] arr , int n ) { int current_max = 0 ; int max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) { current_max = 0 ; } else { current_max += 1 ; max_so_far = Math . max ( current_max , max_so_far ) ; } } return max_so_far ; } }
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { int h = 5 ; int r = 6 ; System . out . println ( cubeSide ( h , r ) ) ; } public static double cubeSide ( int h , int r ) { if ( h < 0 && r < 0 ) { return - 1 ; } double a = ( h * r * sqrt ( 2 ) ) / ( h + sqrt ( 2 ) * r ) ; return a ; } }
public class Main { public static void pattern ( int rows_no ) { for ( int i = 1 ; i <= rows_no ; i ++ ) { for ( int k = 1 ; k < i ; k ++ ) { System . out . print ( " ▁ " ) ; } for ( int j = i ; j <= rows_no ; j ++ ) { System . out . print ( j + " ▁ " ) ; } System . out . println ( ) ; } for ( int i = rows_no - 1 ; i > 0 ; i -- ) { for ( int k = 1 ; k < i ; k ++ ) { System . out . print ( " ▁ " ) ; } for ( int j = i ; j <= rows_no ; j ++ ) { System . out . print ( j + " ▁ " ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int rows_no = 7 ; pattern ( rows_no ) ; } }
import java . util . * ; import java . io . * ; public class Main { static int INF = Integer . MAX_VALUE ; static int mod = ( int ) ( 1e9 + 7 ) ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int ans = INF ; for ( int a = 1 ; a < N ; a ++ ) { int b = N - a ; ans = Math . min ( ans , dsum ( a ) + dsum ( b ) ) ; } System . out . println ( ans ) ; } static int dsum ( int x ) { int sum = 0 ; String numStr = String . valueOf ( x ) ; for ( int i = 0 ; i < numStr . length ( ) ; i ++ ) { sum += Character . getNumericValue ( numStr . charAt ( i ) ) ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallestNumber ( N ) ) ; } public static int checkDigits ( int n ) { while ( n != 0 ) { if ( ( n % 10 ) % 2 == 0 ) { return 0 ; } n = n / 10 ; } return 1 ; } public static int smallestNumber ( int n ) { int i = n ; while ( true ) { if ( checkDigits ( i ) == 1 ) { return i ; } i ++ ; } } }
public class Main { public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallestNumber ( N ) ) ; } public static int checkDigits ( int n ) { while ( n != 0 ) { if ( ( n % 10 ) % 2 != 0 ) { return 0 ; } n = n / 10 ; } return 1 ; } public static int smallestNumber ( int n ) { for ( int i = n ; i < 2401 ; i ++ ) { if ( checkDigits ( i ) == 1 ) { return i ; } } return - 1 ; } }
public class Main { public static void triangularSeries ( int n ) { int j = 1 ; int k = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( k + " ▁ " ) ; j = j + 1 ; k = k + j ; } } public static void main ( String [ ] args ) { int n = 5 ; triangularSeries ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int [ ] lst = new int [ n ] ; Map < Integer , Integer > l = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { lst [ i ] = scanner . nextInt ( ) ; if ( ! l . containsKey ( lst [ i ] ) ) { l . put ( lst [ i ] , 1 ) ; } else { l . put ( lst [ i ] , l . get ( lst [ i ] ) + 1 ) ; } } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( l . get ( lst [ i ] ) > 1 ) { res += n - i - l . get ( lst [ i ] ) ; l . put ( lst [ i ] , l . get ( lst [ i ] ) - 1 ) ; } else { res += n - i - 1 ; } } System . out . println ( res ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int k = 4 ; System . out . println ( " Position ▁ of ▁ n ' th ▁ multiple ▁ of ▁ k ▁ in ▁ Fibonacci ▁ Series ▁ is ▁ " + findPosition ( k , n ) ) ; } public static int findPosition ( int k , int n ) { int f1 = 0 ; int f2 = 1 ; int i = 2 ; while ( i != 0 ) { int f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) { return n * i ; } i ++ ; } return 0 ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; System . out . println ( new String [ ] { " First " , " Second " } [ ( s . charAt ( 0 ) == s . charAt ( s . length ( ) - 1 ) ) ^ ( s . length ( ) % 2 == 0 ) ? 1 : 0 ] ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 } ; int k = 4 ; int n = arr . length ; System . out . println ( countMinimumMoves ( arr , n , k ) ) ; } public static int countMinimumMoves ( int [ ] arr , int n , int k ) { for ( int i = k - 1 ; i < n ; i ++ ) { if ( arr [ i ] != arr [ k - 1 ] ) { return - 1 ; } } for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != arr [ k - 1 ] ) { return i + 1 ; } } return 0 ; } }
public class Main { public static void main ( String [ ] args ) { int a = 5 ; int b = 4 ; int n = 2 ; System . out . println ( powerGCD ( a , b , n ) ) ; } public static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) == 1 ) { res = ( res * x ) % p ; } y = y >> 1 ; x = ( x * x ) % p ; } return res ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } public static int powerGCD ( int a , int b , int n ) { int e = power ( a , n , b ) ; return gcd ( e , b ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int T = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int q = scanner . nextInt ( ) ; double v = ( q - 1 ) / ( double ) q ; int tm = 1 ; double t = s / ( 1 - v ) ; while ( ( T - s ) / v - t > 0 ) { if ( ( T - s ) / v - t < 1e-10 ) { break ; } tm += 1 ; s += v * t ; t = s / ( 1 - v ) ; } System . out . println ( tm ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; System . out . println ( ( a - 2 ) * ( a - 2 ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 1 , 1 , 1 } , { 1 , 2 , 3 } , { 5 , 5 , 5 } } ; System . out . println ( countIdenticalRows ( mat ) ) ; } public static int countIdenticalRows ( int [ ] [ ] mat ) { int count = 0 ; for ( int i = 0 ; i < mat . length ; i ++ ) { HashMap < Integer , Integer > hs = new HashMap < > ( ) ; for ( int j = 0 ; j < mat [ i ] . length ; j ++ ) { hs . put ( mat [ i ] [ j ] , 1 ) ; } if ( hs . size ( ) == 1 ) { count ++ ; } } return count ; } }
``` java import java . util . * ; public class Main { public static void createSorted ( int [ ] a , int n ) { List < Integer > b = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( b . size ( ) == 0 ) { b . add ( a [ j ] ) ; } else { int start = 0 ; int end = b . size ( ) - 1 ; int pos = 0 ; while ( start <= end ) { int mid = start + ( end - start ) / 2 ; if ( b . get ( mid ) == a [ j ] ) { b . add ( Math . max ( 0 , mid + 1 ) , a [ j ] ) ; break ; } else if ( b . get ( mid ) > a [ j ] ) { pos = end = mid - 1 ; } else { pos = start = mid + 1 ; } if ( start > end ) { pos = start ; b . add ( Math . max ( 0 , pos ) , a [ j ] ) ; break ; } } } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( b . get ( i ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] a = { 2 , 5 , 4 , 9 , 8 } ; int n = a . length ; createSorted ( a , n ) ; } } ```
public class Main { public static void main ( String [ ] args ) { String string = " ABCA " ; System . out . println ( countTotalDistinct ( string ) ) ; } public static int countTotalDistinct ( String string ) { int cnt = 0 ; Set < String > items = new HashSet < > ( ) ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { String temp = " " ; Set < Character > ans = new HashSet < > ( ) ; for ( int j = i ; j < string . length ( ) ; j ++ ) { temp = temp + string . charAt ( j ) ; ans . add ( string . charAt ( j ) ) ; if ( ! items . contains ( temp ) ) { items . add ( temp ) ; cnt += ans . size ( ) ; } } } return cnt ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 98562 ; System . out . print ( firstDigit ( n ) + " ▁ " ) ; System . out . print ( lastDigit ( n ) ) ; } public static int firstDigit ( int n ) { int digits = ( int ) ( Math . log10 ( n ) ) ; n = ( int ) ( n / Math . pow ( 10 , digits ) ) ; return n ; } public static int lastDigit ( int n ) { return ( n % 10 ) ; } }
public class Main { public static void removeZeros ( int [ ] a , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { ind = i ; break ; } } if ( ind == - 1 ) { System . out . println ( " Array ▁ has ▁ leading ▁ zeros ▁ only " ) ; return ; } int [ ] b = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) { b [ i ] = a [ ind + i ] ; } for ( int i = 0 ; i < n - ind ; i ++ ) { System . out . print ( b [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] a = { 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 2 , 2 , 3 , 4 , 3 } ; int n = arr . length ; System . out . println ( findMaxm ( arr , n ) ) ; } public static int findMaxm ( int [ ] arr , int n ) { Map < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mpp . containsKey ( arr [ i ] ) ) { mpp . put ( arr [ i ] , mpp . get ( arr [ i ] ) + 1 ) ; } else { mpp . put ( arr [ i ] , 1 ) ; } } int ans = 0 ; for ( Map . Entry < Integer , Integer > entry : mpp . entrySet ( ) ) { int value = entry . getKey ( ) ; int freq = entry . getValue ( ) ; if ( value == freq ) { ans = Math . max ( ans , value ) ; } } return ans ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; String [ ] inputArr = input . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } int result = check ( n , a ) ; System . out . println ( result ) ; } public static int check ( int n , int [ ] a ) { int b = n ; int r = 0 ; int y = 0 ; int [ ] D = new int [ 2 * n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { D [ b ] += 1 ; if ( a [ i ] < x ) { r += D [ b ] ; b += 1 ; } else { b -= 1 ; r -= D [ b ] ; } y += r ; } return y ; } public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; String [ ] inputArr = input . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } Arrays . sort ( a ) ; int l = 0 ; int r = n ; int m = n / 2 ; int c = n * ( n + 1 ) / 2 ; while ( true ) { if ( check ( n , a , alpha [ m ] ) <= c / 2 ) { if ( m == n - 1 ) { break ; } else if ( check ( n , a , alpha [ m + 1 ] ) > c / 2 ) { break ; } else { l = m ; m = ( m + r ) / 2 ; } } else { m = ( m + l ) / 2 ; r = m + 1 ; } } System . out . println ( alpha [ m ] ) ; } }
public class Main { public static int sumOfDigitsSingle ( int x ) { int ans = 0 ; while ( x != 0 ) { ans += x % 10 ; x /= 10 ; } return ans ; } public static int closest ( int x ) { int ans = 0 ; while ( ans * 10 + 9 <= x ) { ans = ans * 10 + 9 ; } return ans ; } public static int sumOfDigitsTwoParts ( int N ) { int A = closest ( N ) ; return sumOfDigitsSingle ( A ) + sumOfDigitsSingle ( N - A ) ; } public static void main ( String [ ] args ) { int N = 35 ; System . out . println ( sumOfDigitsTwoParts ( N ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] badge = { " AAA " , " AA " , " A " , " B " , " C " , " D " , " E " , " NA " } ; double [ ] [ ] limit = { { 35.50 , 37.50 , 40.00 , 43.00 , 50.00 , 55.00 , 70.00 , Double . POSITIVE_INFINITY } , { 71.00 , 77.00 , 83.00 , 89.00 , 105.00 , 116.00 , 148.00 , Double . POSITIVE_INFINITY } } ; while ( scanner . hasNextLine ( ) ) { String [ ] line = scanner . nextLine ( ) . split ( " ▁ " ) ; double t500 = Double . parseDouble ( line [ 0 ] ) ; double t1000 = Double . parseDouble ( line [ 1 ] ) ; System . out . println ( badge [ Math . max ( rank ( t500 , limit [ 0 ] ) , rank ( t1000 , limit [ 1 ] ) ) ] ) ; } } public static int rank ( double time , double [ ] limit ) { for ( int i = 0 ; i < limit . length ; i ++ ) { if ( time < limit [ i ] ) { return i ; } } return - 1 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int iterations = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < iterations ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int r = Integer . parseInt ( input [ 2 ] ) ; int c = Integer . parseInt ( input [ 3 ] ) ; System . out . println ( Math . max ( Math . abs ( n - r ) , r - 1 ) + Math . max ( Math . abs ( m - c ) , c - 1 ) ) ; } } }
``` java import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < t ; k ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] a = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( a ) ; boolean flag = true ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] - a [ i - 1 ] > 1 ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } } ```
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { int n = 90 ; cal_sin ( n ) ; } public static void cal_sin ( int n ) { double accuracy = 0.0001 ; n = ( int ) ( n * ( 3.142 / 180.0 ) ) ; double x1 = n ; double sinx = n ; double sinval = Math . sin ( n ) ; int i = 1 ; while ( true ) { double denominator = 2 * i * ( 2 * i + 1 ) ; x1 = - x1 * n * n / denominator ; sinx = sinx + x1 ; i = i + 1 ; if ( accuracy <= Math . abs ( sinval - sinx ) ) { break ; } } System . out . println ( Math . round ( sinx ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] array = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = array . length ; System . out . println ( multiply ( array , n ) ) ; } public static int multiply ( int [ ] array , int n ) { int pro = 1 ; for ( int i = 0 ; i < n ; i ++ ) { pro = pro * array [ i ] ; } return pro ; } }
int [ ] l = new int [ 64 ] ; for ( int i = 0 ; i < Integer . parseInt ( input ( ) ) ; i ++ ) { String [ ] query = input ( ) . split ( " ▁ " ) ; String order = query [ 0 ] ; if ( order . equals ( "0" ) ) { System . out . println ( l [ Integer . parseInt ( query [ 1 ] ) ] != 0 ? 1 : 0 ) ; } else if ( order . equals ( "1" ) ) { l [ Integer . parseInt ( query [ 1 ] ) ] = 1 ; } else if ( order . equals ( "2" ) ) { l [ Integer . parseInt ( query [ 1 ] ) ] = 0 ; } else if ( order . equals ( "3" ) ) { l [ Integer . parseInt ( query [ 1 ] ) ] ^= 1 ; } else if ( order . equals ( "4" ) ) { System . out . println ( Arrays . stream ( l ) . allMatch ( x -> x != 0 ) ? 1 : 0 ) ; } else if ( order . equals ( "5" ) ) { System . out . println ( Arrays . stream ( l ) . anyMatch ( x -> x != 0 ) ? 1 : 0 ) ; } else if ( order . equals ( "6" ) ) { System . out . println ( Arrays . stream ( l ) . noneMatch ( x -> x != 0 ) ? 1 : 0 ) ; } else if ( order . equals ( "7" ) ) { System . out . println ( Arrays . stream ( l ) . sum ( ) ) ; } else if ( order . equals ( "8" ) ) { int tmp = 0 ; for ( int j = 63 ; j >= 0 ; j -- ) { tmp += l [ j ] * Math . pow ( 2 , j ) ; } System . out . println ( tmp ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 } ; int n = arr . length ; System . out . println ( maxSumOfBits ( arr , n ) ) ; } public static int bit ( int n ) { int count = 0 ; while ( n != 0 ) { count ++ ; n = n & ( n - 1 ) ; } return count ; } public static int maxSumOfBits ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = bit ( arr [ i ] ) ; } int incl = arr [ 0 ] ; int excl = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int exclNew ; if ( incl > excl ) { exclNew = incl ; } else { exclNew = excl ; } incl = excl + arr [ i ] ; excl = exclNew ; } if ( incl > excl ) { return incl ; } else { return excl ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int pares = 0 ; String [ ] bolo = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String camada = input . next ( ) ; bolo [ i ] = camada ; } for ( int i = 0 ; i < n ; i ++ ) { int contador = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( bolo [ i ] . charAt ( j ) == ' C ' ) { contador ++ ; } } pares += ( ( contador * ( contador - 1 ) ) / 2 ) ; } for ( int j = 0 ; j < n ; j ++ ) { int contador = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( bolo [ i ] . charAt ( j ) == ' C ' ) { contador ++ ; } } pares += ( ( contador * ( contador - 1 ) ) / 2 ) ; } System . out . println ( pares ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 6 , 10 , 12 , 15 , 2 , 4 , 5 } ; int n = arr . length ; int x = 14 ; System . out . print ( " Count ▁ = ▁ " ) ; System . out . print ( countEleLessThanOrEqual ( arr , n , x ) ) ; } public static int findMinIndex ( int [ ] arr , int low , int high ) { if ( high < low ) { return 0 ; } if ( high == low ) { return low ; } int mid = ( low + high ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) { return ( mid + 1 ) ; } if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) { return mid ; } if ( arr [ high ] > arr [ mid ] ) { return findMinIndex ( arr , low , mid - 1 ) ; } return findMinIndex ( arr , mid + 1 , high ) ; } public static int binarySearch ( int [ ] arr , int l , int h , int x ) { while ( l <= h ) { int mid = ( l + h ) / 2 ; if ( arr [ mid ] <= x ) { l = mid + 1 ; } else { h = mid - 1 ; } } return h ; } public static int countEleLessThanOrEqual ( int [ ] arr , int n , int x ) { int minIndex = findMinIndex ( arr , 0 , n - 1 ) ; if ( x <= arr [ n - 1 ] ) { return ( binarySearch ( arr , minIndex , n - 1 , x ) + 1 - minIndex ) ; } if ( ( minIndex - 1 ) >= 0 && x <= arr [ minIndex - 1 ] ) { return ( n - minIndex + binarySearch ( arr , 0 , minIndex - 1 , x ) + 1 ) ; } return n ; } }
public class Main { public static void main ( String [ ] args ) { int x = 0 ; double y = 0.5 ; double xn = 1 ; double h = 0.2 ; printFinalValues ( x , xn , y , h ) ; } public static double f ( double x , double y ) { double v = y - 2 * x * x + 1 ; return v ; } public static double predict ( double x , double y , double h ) { double y1p = y + h * f ( x , y ) ; return y1p ; } public static double correct ( double x , double y , double x1 , double y1 , double h ) { double e = 0.00001 ; double y1c = y1 ; while ( Math . abs ( y1c - y1 ) > e ) { y1 = y1c ; y1c = y + 0.5 * h * ( f ( x , y ) + f ( x1 , y1 ) ) ; } return y1c ; } public static void printFinalValues ( double x , double xn , double y , double h ) { while ( x < xn ) { double x1 = x + h ; double y1p = predict ( x , y , h ) ; double y1c = correct ( x , y , x1 , y1p , h ) ; x = x1 ; y = y1c ; } System . out . println ( " The ▁ final ▁ value ▁ of ▁ y ▁ at ▁ x ▁ = ▁ " + ( int ) x + " ▁ is : ▁ " + String . format ( " % .4f " , y ) ) ; } }
public class Main { public static void main ( String [ ] args ) { String string = " " ; int n = 9 ; System . out . println ( D_Pattern ( string , n ) ) ; } public static String D_Pattern ( String string , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j == 1 || ( ( i == 0 || i == n - 1 ) && ( j > 1 && j < n - 2 ) ) || ( j == n - 2 && i != 0 && i != n - 1 ) ) { string = string + " * " ; } else { string = string + " ▁ " ; } } string = string + " \n " ; } return string ; } }
public class Main { public static void kthString ( int n , int k ) { int total = 0 ; int i = 1 ; while ( total < k ) { total = total + n - i ; i ++ ; } int first_y_position = i - 1 ; int second_y_position = k - ( total - n + first_y_position ) ; for ( int j = 1 ; j < first_y_position ; j ++ ) { System . out . print ( " x " ) ; } System . out . print ( " y " ) ; int j = first_y_position + 1 ; while ( second_y_position > 1 ) { System . out . print ( " x " ) ; second_y_position -- ; j ++ ; } System . out . print ( " y " ) ; while ( j < n ) { System . out . print ( " x " ) ; j ++ ; } } public static void main ( String [ ] args ) { int n = 5 ; int k = 7 ; kthString ( n , k ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( countOfSubarrays ( N ) ) ; } public static int binomialCoeff ( int n , int k ) { int [ ] C = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = Math . min ( i , k ) ; j > 0 ; j -- ) { C [ j ] = C [ j ] + C [ j - 1 ] ; } } return C [ k ] ; } public static int countOfSubarrays ( int N ) { return binomialCoeff ( 2 * N - 1 , N ) ; } }
public class Solution { public int [ ] productExceptSelf ( int [ ] nums ) { int [ ] ans = new int [ nums . length ] ; for ( int i = 0 ; i < nums . length ; i ++ ) { ans [ i ] = 1 ; } for ( int i = 1 ; i < nums . length ; i ++ ) { ans [ i ] = ans [ i - 1 ] * nums [ i - 1 ] ; } int right = 1 ; for ( int i = nums . length - 1 ; i >= 0 ; i -- ) { ans [ i ] *= right ; right *= nums [ i ] ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 , 4 } ; int [ ] out = sObj . productExceptSelf ( nums ) ; for ( int num : out ) { System . out . print ( num + " ▁ " ) ; } } }
public class Main { public static void getSmallestAndLargest ( String s , int k ) { String currStr = s . substring ( 0 , k ) ; String lexMin = currStr ; String lexMax = currStr ; for ( int i = k ; i < s . length ( ) ; i ++ ) { currStr = currStr . substring ( 1 , k ) + s . charAt ( i ) ; if ( lexMax . compareTo ( currStr ) < 0 ) { lexMax = currStr ; } if ( lexMin . compareTo ( currStr ) > 0 ) { lexMin = currStr ; } } System . out . println ( lexMin ) ; System . out . println ( lexMax ) ; } public static void main ( String [ ] args ) { String str1 = " GeeksForGeeks " ; int k = 3 ; getSmallestAndLargest ( str1 , k ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int m = Integer . parseInt ( scanner . nextLine ( ) ) ; List < Integer > a = new ArrayList < > ( ) ; List < Integer > b = new ArrayList < > ( ) ; String [ ] aInput = scanner . nextLine ( ) . split ( " ▁ " ) ; String [ ] bInput = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( String s : aInput ) { a . add ( Integer . parseInt ( s ) ) ; } for ( String s : bInput ) { b . add ( Integer . parseInt ( s ) ) ; } int [ ] d = new int [ m ] ; List < Struct > bStructs = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { bStructs . add ( new Struct ( b . get ( i ) , i ) ) ; } Collections . sort ( a , Collections . reverseOrder ( ) ) ; Collections . sort ( bStructs , Comparator . comparingInt ( x -> x . value ) ) ; for ( int i = 0 ; i < m ; i ++ ) { d [ bStructs . get ( i ) . idx ] = a . get ( i ) ; } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( d [ i ] + " ▁ " ) ; } } static class Struct { int value ; int idx ; public Struct ( int value , int idx ) { this . value = value ; this . idx = idx ; } } }
public class Main { static final int INT_BITS = 32 ; public static void main ( String [ ] args ) { int [ ] set = { 9 , 8 , 5 } ; int n = set . length ; System . out . print ( " Max ▁ subset ▁ XOR ▁ is ▁ " ) ; System . out . print ( maxSubarrayXOR ( set , n ) ) ; } static int maxSubarrayXOR ( int [ ] set , int n ) { int index = 0 ; for ( int i = INT_BITS - 1 ; i >= 0 ; i -- ) { int maxInd = index ; int maxEle = - 2147483648 ; for ( int j = index ; j < n ; j ++ ) { if ( ( set [ j ] & ( 1 << i ) ) != 0 && set [ j ] > maxEle ) { maxEle = set [ j ] ; maxInd = j ; } } if ( maxEle == - 2147483648 ) { continue ; } int temp = set [ index ] ; set [ index ] = set [ maxInd ] ; set [ maxInd ] = temp ; maxInd = index ; for ( int j = 0 ; j < n ; j ++ ) { if ( j != maxInd && ( set [ j ] & ( 1 << i ) ) != 0 ) { set [ j ] = set [ j ] ^ set [ maxInd ] ; } } index = index + 1 ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res = res ^ set [ i ] ; } return res ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String input = scanner . nextLine ( ) ; String [ ] b = input . split ( " ▁ " ) ; List < String > list = Arrays . asList ( b ) ; Map < String , Integer > countMap = new HashMap < > ( ) ; for ( String word : list ) { countMap . put ( word , countMap . getOrDefault ( word , 0 ) + 1 ) ; } int maxCount = Collections . max ( countMap . values ( ) ) ; int uniqueWords = countMap . size ( ) ; System . out . println ( maxCount + " ▁ " + uniqueWords ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 60 , - 10 , 70 , - 80 , 85 } ; int n = arr . length ; minAbsSumPair ( arr , n ) ; } static int partition ( int [ ] arr , int si , int ei ) { int x = arr [ ei ] ; int i = ( si - 1 ) ; for ( int j = si ; j < ei ; j ++ ) { if ( arr [ j ] <= x ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } int temp = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ ei ] ; arr [ ei ] = temp ; return ( i + 1 ) ; } static void quickSort ( int [ ] arr , int si , int ei ) { int pi = 0 ; if ( si < ei ) { pi = partition ( arr , si , ei ) ; quickSort ( arr , si , pi - 1 ) ; quickSort ( arr , pi + 1 , ei ) ; } } static void minAbsSumPair ( int [ ] arr , int n ) { int sum , min_sum = 1000000000 ; int l = 0 ; int r = n - 1 ; int min_l = l ; int min_r = n - 1 ; if ( n < 2 ) { System . out . print ( " Invalid ▁ Input " ) ; return ; } quickSort ( arr , l , r ) ; while ( l < r ) { sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( sum ) < Math . abs ( min_sum ) ) { min_sum = sum ; min_l = l ; min_r = r ; } if ( sum < 0 ) { l ++ ; } else { r -- ; } } System . out . print ( " The ▁ two ▁ elements ▁ whose ▁ sum ▁ is ▁ minimum ▁ are ▁ " + arr [ min_l ] + " ▁ and ▁ " + arr [ min_r ] ) ; } }
public class Solution { public int firstUniqChar ( String s ) { Map < Character , Integer > countMap = new HashMap < > ( ) ; for ( char c : s . toCharArray ( ) ) { countMap . put ( c , countMap . getOrDefault ( c , 0 ) + 1 ) ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( countMap . get ( s . charAt ( i ) ) == 1 ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " leetcode " ; int out = sObj . firstUniqChar ( s ) ; System . out . println ( out ) ; } }
import java . util . LinkedList ; import java . util . Queue ; public class Main { public static void main ( String [ ] args ) { int [ ] input = { 1 , 2 , 3 } ; int [ ] output = { 2 , 1 , 3 } ; int n = 3 ; if ( checkStackPermutation ( input , output , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " Not ▁ Possible " ) ; } } public static boolean checkStackPermutation ( int [ ] ip , int [ ] op , int n ) { Queue < Integer > input = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { input . add ( ip [ i ] ) ; } Queue < Integer > output = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { output . add ( op [ i ] ) ; } LinkedList < Integer > tempStack = new LinkedList < > ( ) ; while ( ! input . isEmpty ( ) ) { int ele = input . peek ( ) ; input . poll ( ) ; if ( ele == output . peek ( ) ) { output . poll ( ) ; while ( ! tempStack . isEmpty ( ) ) { if ( tempStack . peekLast ( ) == output . peek ( ) ) { tempStack . pollLast ( ) ; output . poll ( ) ; } else { break ; } } } else { tempStack . add ( ele ) ; } } return ( input . isEmpty ( ) && tempStack . isEmpty ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Map < Character , List < Character > > s = new HashMap < > ( ) ; Map < Character , List < Character > > t = new HashMap < > ( ) ; Scanner scanner = new Scanner ( System . in ) ; char [ ] S = scanner . nextLine ( ) . toCharArray ( ) ; char [ ] T = scanner . nextLine ( ) . toCharArray ( ) ; for ( int i = 0 ; i < S . length ; i ++ ) { if ( ! s . containsKey ( S [ i ] ) ) { s . put ( S [ i ] , new ArrayList < > ( ) ) ; } if ( ! t . containsKey ( T [ i ] ) ) { t . put ( T [ i ] , new ArrayList < > ( ) ) ; } if ( ! s . get ( S [ i ] ) . contains ( T [ i ] ) ) { s . get ( S [ i ] ) . add ( T [ i ] ) ; if ( s . get ( S [ i ] ) . size ( ) >= 2 ) { System . out . println ( " No " ) ; break ; } } if ( ! t . get ( T [ i ] ) . contains ( S [ i ] ) ) { t . get ( T [ i ] ) . add ( S [ i ] ) ; if ( t . get ( T [ i ] ) . size ( ) >= 2 ) { System . out . println ( " No " ) ; break ; } } if ( i == S . length - 1 ) { System . out . println ( " Yes " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int n = 30 ; int d = 3 ; System . out . println ( getSum ( n , d ) ) ; } public static int getSum ( int n , int d ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i % 10 == d ) { sum += i ; } } return sum ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int testcases = 0 ; testcases < t ; testcases ++ ) { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int c = input . nextInt ( ) ; int r = input . nextInt ( ) ; int MINC = c - r ; int MAXC = c + r ; if ( a == b ) { System . out . println ( 0 ) ; } else if ( a < b ) { if ( a <= c && c <= b ) { System . out . println ( Math . max ( 0 , MINC - a ) + Math . max ( 0 , b - MAXC ) ) ; } else if ( c < a ) { System . out . println ( Math . min ( b - a , Math . max ( 0 , b - MAXC ) ) ) ; } else if ( c > b ) { System . out . println ( Math . min ( b - a , Math . max ( 0 , MINC - a ) ) ) ; } } else { if ( a >= c && c >= b ) { System . out . println ( Math . max ( 0 , MINC - b ) + Math . max ( 0 , a - MAXC ) ) ; } else if ( c < b ) { System . out . println ( Math . min ( a - b , Math . max ( 0 , a - MAXC ) ) ) ; } else if ( c > a ) { System . out . println ( Math . min ( a - b , Math . max ( 0 , MINC - b ) ) ; } } } } }
Scanner scanner = new Scanner ( System . in ) ; int input = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < input ; i ++ ) { String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( inputArr [ 0 ] ) ; int s = Integer . parseInt ( inputArr [ 1 ] ) ; int t = Integer . parseInt ( inputArr [ 2 ] ) ; System . out . println ( n - Math . min ( s , t ) + 1 ) ; }
public class Main { public static void main ( String [ ] args ) { int N = 10 ; int K = 2 ; System . out . println ( findSum ( N , K ) ) ; } public static int findSum ( int N , int K ) { int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += ( i % K ) ; } return ans ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } for ( int i : a ) { System . out . println ( 1 + ( ( 4 * i * ( i + 1 ) ) / gcd ( 4 * i , i + 1 ) ) / ( i + 1 ) ) ; } } public static int gcd ( int a , int b ) { while ( b > 0 ) { int temp = b ; b = a % b ; a = temp ; } return a ; } }
``` java import static java . lang . Math . pow ; import static java . lang . Math . sqrt ; public class Main { static final double PI = 3.14 ; public static void main ( String [ ] args ) { int r = 4 ; int d = 5 ; System . out . println ( findArea ( r , d ) ) ; } public static double findArea ( int r , int d ) { double R = d / PI ; R += pow ( r , 2 ) ; R = sqrt ( R ) ; double area = PI * pow ( R , 2 ) ; return area ; } } ```
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int s = 11 ; System . out . println ( minimumNumbers ( n , s ) ) ; } public static int minimumNumbers ( int n , int s ) { if ( s % n != 0 ) { return s / n + 1 ; } else { return s / n ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; int m = 1 ; System . out . println ( countTriplets ( arr , n , m ) ) ; } public static int countTriplets ( int [ ] arr , int n , int m ) { int count = 0 ; Arrays . sort ( arr ) ; for ( int end = n - 1 ; end > 1 ; end -- ) { int start = 0 ; int mid = end - 1 ; while ( start < mid ) { int prod = arr [ end ] * arr [ start ] * arr [ mid ] ; if ( prod > m ) { mid -- ; } else if ( prod < m ) { start ++ ; } else if ( prod == m ) { count ++ ; mid -- ; start ++ ; } } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int result = findIndex ( 21 ) ; System . out . println ( result ) ; } public static int findIndex ( int n ) { if ( n <= 1 ) { return n ; } int a = 0 ; int b = 1 ; int c = 1 ; int res = 1 ; while ( c < n ) { c = a + b ; res = res + 1 ; a = b ; b = c ; } return res ; } }
public class Main { public static void main ( String [ ] args ) { String st = " acaba " ; int n = st . length ( ) ; if ( isSatisfied ( st , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isVowel ( char ch ) { if ( ch == ' i ' || ch == ' a ' || ch == ' e ' || ch == ' o ' || ch == ' u ' ) { return true ; } else { return false ; } } public static boolean isSatisfied ( String st , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( isVowel ( st . charAt ( i ) ) == false && isVowel ( st . charAt ( i - 1 ) ) == false ) { return false ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( isVowel ( st . charAt ( i ) ) && isVowel ( st . charAt ( i - 1 ) ) == false && isVowel ( st . charAt ( i + 1 ) ) == false ) { return false ; } } return true ; } }
public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countWays ( n ) ) ; } public static int countWays ( int n ) { int [ ] dp = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] + 1 ; } return dp [ n ] ; } }
public class Main { public static void main ( String [ ] args ) { int m = 6 ; int n = 3 ; System . out . println ( expect ( m , n ) ) ; } public static double expect ( int m , int n ) { double ans = 0.0 ; int i = m ; while ( i > 0 ) { ans += ( Math . pow ( ( double ) i / m , n ) - Math . pow ( ( double ) ( i - 1 ) / m , n ) ) * i ; i -- ; } return ans ; } }
public class Main { public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( ProdOfPrimes ( n ) ) ; } public static int ProdOfPrimes ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { prime [ i ] = true ; } int p = 2 ; while ( p * p <= n ) { if ( prime [ p ] ) { int i = p * 2 ; while ( i <= n ) { prime [ i ] = false ; i += p ; } } p ++ ; } int prod = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] ) { prod *= i ; } } return prod ; } }
import java . time . DayOfWeek ; import java . time . LocalDate ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int ans = 0 ; for ( int y = 1901 ; y <= 2000 ; y ++ ) { for ( int m = 1 ; m <= 12 ; m ++ ) { LocalDate date = LocalDate . of ( y , m , 1 ) ; if ( date . getDayOfWeek ( ) == DayOfWeek . SUNDAY ) { ans ++ ; } } } return Integer . toString ( ans ) ; } }
public class Date { int d ; int m ; int y ; public Date ( int d , int m , int y ) { this . d = d ; this . m = m ; this . y = y ; } } public class Main { static int [ ] monthDays = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; public static int countLeapYears ( Date d ) { int years = d . y ; if ( d . m <= 2 ) { years -= 1 ; } return ( int ) ( years / 4 - years / 100 + years / 400 ) ; } public static int getDifference ( Date dt1 , Date dt2 ) { int n1 = dt1 . y * 365 + dt1 . d ; for ( int i = 0 ; i < dt1 . m - 1 ; i ++ ) { n1 += monthDays [ i ] ; } n1 += countLeapYears ( dt1 ) ; int n2 = dt2 . y * 365 + dt2 . d ; for ( int i = 0 ; i < dt2 . m - 1 ; i ++ ) { n2 += monthDays [ i ] ; } n2 += countLeapYears ( dt2 ) ; return ( n2 - n1 ) ; } public static void main ( String [ ] args ) { Date dt1 = new Date ( 1 , 2 , 2000 ) ; Date dt2 = new Date ( 1 , 2 , 2004 ) ; System . out . println ( " Difference ▁ between ▁ two ▁ dates ▁ is ▁ " + getDifference ( dt1 , dt2 ) ) ; } }
import java . util . * ; public class Main { static Set < Integer > st = new HashSet < > ( ) ; public static void generateNumbers ( int n , int num , int a , int b ) { if ( num > 0 && num < n ) { st . add ( num ) ; } if ( num >= n ) { return ; } if ( num * 10 + a > num ) { generateNumbers ( n , num * 10 + a , a , b ) ; } generateNumbers ( n , num * 10 + b , a , b ) ; } public static void printNumbers ( int n ) { for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = i + 1 ; j < 10 ; j ++ ) { generateNumbers ( n , 0 , i , j ) ; } } System . out . print ( " The ▁ numbers ▁ are : ▁ " ) ; List < Integer > l = new ArrayList < > ( st ) ; System . out . println ( l ) ; } public static void main ( String [ ] args ) { int n = 12 ; printNumbers ( n ) ; } }
Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; t = ( n * k * t ) / 100 ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( Math . min ( Math . max ( 0 , t - i * k ) , k ) + " ▁ " ) ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; if ( n == 0 && m == 0 ) { break ; } Map < Integer , Integer > d = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 1 ; j < input . length ; j ++ ) { int num = Integer . parseInt ( input [ j ] ) ; d . put ( num , d . getOrDefault ( num , 0 ) + 1 ) ; } } long ans = ( long ) Math . pow ( 10 , 20 ) ; for ( Map . Entry < Integer , Integer > entry : d . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( value > m ) { ans = key ; m = value ; } else if ( value == m ) { ans = Math . min ( ans , key ) ; } } if ( ans == ( long ) Math . pow ( 10 , 20 ) ) { ans = 0 ; } System . out . println ( ans ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 5 , 4 , 5 , 2 , 4 , 3 , 5 , 2 , 4 , 4 , 2 } ; System . out . printf ( " % d " , getOddOccurrence ( arr ) ) ; } public static int getOddOccurrence ( int [ ] arr ) { int res = 0 ; for ( int element : arr ) { res = res ^ element ; } return res ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int x = 1 << 15 + 1 << 16 ; System . out . println ( isPalindrome ( x ) ) ; x = 1 << 31 + 1 ; System . out . println ( isPalindrome ( x ) ) ; } public static boolean isKthBitSet ( int x , int k ) { if ( ( x & ( 1 << ( k - 1 ) ) ) != 0 ) { return true ; } else { return false ; } } public static boolean isPalindrome ( int x ) { int l = 1 ; int r = 2 * 8 ; while ( l < r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) { return false ; } l ++ ; r -- ; } return true ; } }
import java . lang . Math ; public class Main { public static void SieveOfEratosthenes ( int n , boolean [ ] isPrime ) { isPrime [ 0 ] = false ; isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) { isPrime [ i ] = true ; } for ( int p = 2 ; p <= Math . sqrt ( n ) ; p ++ ) { if ( isPrime [ p ] ) { for ( int i = p * 2 ; i <= n ; i += p ) { isPrime [ i ] = false ; } } } } public static void findPrimePair ( int n ) { int flag = 0 ; boolean [ ] isPrime = new boolean [ n + 1 ] ; SieveOfEratosthenes ( n , isPrime ) ; for ( int i = 2 ; i < n ; i ++ ) { int x = n / i ; if ( isPrime [ i ] && isPrime [ x ] && x != i && x * i == n ) { System . out . println ( i + " ▁ " + x ) ; flag = 1 ; break ; } } if ( flag == 0 ) { System . out . println ( " No ▁ such ▁ pair ▁ found " ) ; } } public static void main ( String [ ] args ) { int n = 39 ; findPrimePair ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 10 ; int b = 15 ; System . out . println ( " GCD ( " + a + " , " + b + " ) ▁ = " + gcd ( a , b ) ) ; a = 35 ; b = 10 ; System . out . println ( " GCD ( " + a + " , " + b + " ) ▁ = " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , " + b + " ) ▁ = " + gcd ( a , b ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 10 ; int b = 15 ; System . out . println ( " GCD ( " + a + " , " + b + " ) ▁ = " + gcd ( a , b ) ) ; a = 35 ; b = 10 ; System . out . println ( " GCD ( " + a + " , " + b + " ) ▁ = " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , " + b + " ) ▁ = " + gcd ( a , b ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int SIZE_LIMIT = 1000000 ; int TYPE_LIMIT = 10 ; int [ ] type = new int [ SIZE_LIMIT + 1 ] ; for ( int n = 3 ; n <= SIZE_LIMIT / 4 + 1 ; n ++ ) { for ( int m = n - 2 ; m > 0 ; m -= 2 ) { int tiles = n * n - m * m ; if ( tiles > SIZE_LIMIT ) { break ; } type [ tiles ] ++ ; } } int ans = 0 ; for ( int t : type ) { if ( t >= 1 && t <= TYPE_LIMIT ) { ans ++ ; } } return Integer . toString ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; while ( t > 0 ) { t -- ; String S = input . next ( ) ; char [ ] s = S . toCharArray ( ) ; int [ ] stack = new int [ s . length ] ; int [ ] pos = new int [ s . length ] ; int check0 = 0 ; for ( int i = 0 ; i < s . length ; i ++ ) { int j = s . length - i - 1 ; stack [ j ] = Character . getNumericValue ( s [ j ] ) ; if ( s [ j ] == '0' ) { if ( check0 == 0 ) { if ( pos [ 0 ] == 0 ) { stack [ j ] = 0 ; pos [ 0 ] = j ; } else { if ( pos [ pos . length - 1 ] - j > 1 ) { stack [ j ] = 0 ; pos [ pos . length - 1 ] = j ; } } if ( stack [ 0 ] == 0 ) { check0 = 1 ; } } } if ( check0 == 1 ) { if ( s [ j ] == '1' ) { if ( pos [ pos . length - 1 ] - j > 1 ) { stack [ j ] = 0 ; pos [ pos . length - 1 ] = j ; } } } } int [ ] stack2 = new int [ stack . length ] ; int check = 0 ; for ( int i = 0 ; i < stack . length - 1 ; i ++ ) { if ( stack [ i ] < stack [ i + 1 ] ) { check = 1 ; } } if ( check == 1 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int N = 14 ; System . out . println ( maxZeros ( N ) ) ; } public static int maxZeros ( int N ) { int maxm = - 1 ; int cnt = 0 ; while ( N != 0 ) { if ( ( N & 1 ) == 0 ) { cnt ++ ; N >>= 1 ; maxm = Math . max ( maxm , cnt ) ; } else { maxm = Math . max ( maxm , cnt ) ; cnt = 0 ; N >>= 1 ; } } return maxm ; } }
public class Main { public static void getLongestSeq ( int [ ] a , int n ) { int maxIdx = 0 ; int maxLen = 0 ; int currLen = 0 ; int currIdx = 0 ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > 0 ) { currLen += 1 ; if ( currLen == 1 ) { currIdx = k ; } } else { if ( currLen > maxLen ) { maxLen = currLen ; maxIdx = currIdx ; } currLen = 0 ; } } if ( maxLen > 0 ) { System . out . println ( " Index : ▁ " + maxIdx + " , ▁ Length : ▁ " + maxLen ) ; } else { System . out . println ( " No ▁ positive ▁ sequence ▁ detected . " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , - 3 , 2 , 3 , 4 , - 6 , 1 , 2 , 3 , 4 , 5 , - 8 , 5 , 6 } ; int n = arr . length ; getLongestSeq ( arr , n ) ; } }
import java . util . * ; class Node { int data ; Node right ; Node down ; public Node ( int data ) { this . data = data ; this . right = null ; this . down = null ; } } public class Main { public static Node construct ( int [ ] [ ] arr , int i , int j , int m , int n ) { if ( i > n - 1 || j > m - 1 ) { return null ; } Node temp = new Node ( arr [ i ] [ j ] ) ; temp . data = arr [ i ] [ j ] ; temp . right = construct ( arr , i , j + 1 , m , n ) ; temp . down = construct ( arr , i + 1 , j , m , n ) ; return temp ; } public static void display ( Node head ) { Node Dp = head ; while ( Dp != null ) { Node Rp = Dp ; while ( Rp != null ) { System . out . print ( Rp . data + " ▁ " ) ; Rp = Rp . right ; } System . out . println ( ) ; Dp = Dp . down ; } } public static void main ( String [ ] args ) { int [ ] [ ] arr = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int m = 3 ; int n = 3 ; Node head = construct ( arr , 0 , 0 , m , n ) ; display ( head ) ; } }
import java . util . Scanner ; import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int [ ] nums = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { nums [ i ] = input . nextInt ( ) ; } System . out . println ( countPrimes ( nums ) ) ; } public static boolean isPrime ( int num ) { if ( num < 2 ) { return false ; } else { int numSqrt = ( int ) Math . floor ( Math . sqrt ( num ) ) ; for ( int prime = 2 ; prime <= numSqrt ; prime ++ ) { if ( num % prime == 0 ) { return false ; } } return true ; } } public static int countPrimes ( int [ ] nums ) { int count = 0 ; for ( int n : nums ) { if ( isPrime ( n ) ) { count ++ ; } } return count ; } }
public class Main { public static void findNthTerm ( int N ) { int ans = 0 ; if ( N % 2 == 0 ) { ans = ( N / 2 ) * 6 + ( N / 2 ) * 2 ; } else { ans = ( N / 2 + 1 ) * 6 + ( N / 2 ) * 2 ; } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int N = 3 ; findNthTerm ( N ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 1 , b = 2 , c = 3 , d = 4 ; System . out . println ( isRectangle ( a , b , c , d ) ? " Yes " : " No " ) ; } public static boolean isRectangle ( int a , int b , int c , int d ) { if ( a == b && b == c && c == d ) { return true ; } else if ( a == b && c == d ) { return true ; } else if ( a == d && c == b ) { return true ; } else if ( a == c && d == b ) { return true ; } return false ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int a = 2 ; int b = 3 ; int m = 5 ; System . out . println ( discreteLogarithm ( a , b , m ) ) ; a = 3 ; b = 7 ; m = 11 ; System . out . println ( discreteLogarithm ( a , b , m ) ) ; } public static int discreteLogarithm ( int a , int b , int m ) { int n = ( int ) ( Math . sqrt ( m ) + 1 ) ; int an = 1 ; for ( int i = 0 ; i < n ; i ++ ) { an = ( an * a ) % m ; } int [ ] value = new int [ m ] ; int cur = an ; for ( int i = 1 ; i < n + 1 ; i ++ ) { if ( value [ cur ] == 0 ) { value [ cur ] = i ; } cur = ( cur * an ) % m ; } cur = b ; for ( int i = 0 ; i < n + 1 ; i ++ ) { if ( value [ cur ] > 0 ) { int ans = value [ cur ] * n - i ; if ( ans < m ) { return ans ; } } cur = ( cur * a ) % m ; } return - 1 ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 10 , 30 , 40 , 50 , 20 } ; int k = 3 ; int n = a . length ; int [ ] dp = new int [ n ] ; Arrays . fill ( dp , - 1 ) ; System . out . println ( findMinimumCost ( 0 , a , n , k , dp ) ) ; } public static int findMinimumCost ( int ind , int [ ] a , int n , int k , int [ ] dp ) { if ( ind == ( n - 1 ) ) { return 0 ; } else if ( dp [ ind ] != - 1 ) { return dp [ ind ] ; } else { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ind + i < n ) { ans = Math . min ( ans , Math . abs ( a [ ind + i ] - a [ ind ] ) + findMinimumCost ( ind + i , a , n , k , dp ) ) ; } else { break ; } } dp [ ind ] = ans ; return ans ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int sum = 7 ; int times = 7 ; System . out . println ( "1 ▁ / ▁ " + Probability ( sum , times ) ) ; } public static int Probability ( int sum , int times ) { double favorable = 0.0 ; double total = 36.0 ; int probability = 0 ; for ( int i = 0 ; i < 7 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( i + j ) == sum ) { favorable += 1 ; } } } int gcd1 = gcd ( ( int ) favorable , ( int ) total ) ; favorable = favorable / gcd1 ; total = total / gcd1 ; probability = ( int ) Math . pow ( total , times ) ; return probability ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
``` java import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int K = scanner . nextInt ( ) ; int N = scanner . nextInt ( ) ; int mod = 998244353 ; int [ ] X = new int [ 2 * K - 1 ] ; int [ ] frac = new int [ N + K + 1 ] ; int [ ] invf = new int [ N + K + 1 ] ; for ( int i = 0 ; i < N + K + 1 ; i ++ ) { frac [ i ] = 1 ; invf [ i ] = inved ( frac [ i ] ) ; } for ( int k = 2 ; k < K + 2 ; k ++ ) { int S = 0 ; int sign = 1 ; int l = k / 2 ; for ( int m = 0 ; m < Math . min ( l + 1 , N / 2 + 1 ) ; m ++ ) { int prod = ( int ) ( ( sign * ( frac [ l ] * frac [ N + K - 2 * m - 1 ] ) % mod ) * ( invf [ m ] * invf [ l - m ] ) % mod ) ; prod = ( int ) ( ( prod * invf [ N - 2 * m ] * invf [ K - 1 ] ) % mod ) ; S += prod ; S %= mod ; sign *= - 1 ; } X [ k - 2 ] = S ; X [ 2 * K - k ] = S ; } for ( int i = 0 ; i < 2 * K - 1 ; i ++ ) { System . out . println ( X [ i ] ) ; } } public static int inved ( int a ) { int x = 1 , y = 0 , u = 0 , v = 1 , k = a , l = 998244353 ; while ( l != 0 ) { int temp = x ; x = u ; u = temp - u * ( k / l ) ; temp = y ; y = v ; v = temp - v * ( k / l ) ; int temp2 = k ; k = l ; l = temp2 % l ; } return x % 998244353 ; } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; double c = 0 ; for ( int i = 0 ; i < N ; i ++ ) { String [ ] a = scanner . nextLine ( ) . split ( " ▁ " ) ; if ( a [ 1 ] . equals ( " BTC " ) ) { c += Double . parseDouble ( a [ 0 ] ) * 380000.0 ; } else { c += Double . parseDouble ( a [ 0 ] ) ; } } System . out . println ( c ) ; } }
public static int getCount ( int [ ] arr , int n , int num1 , int num2 ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == num1 ) { break ; } } if ( i >= n - 1 ) { return 0 ; } int j ; for ( j = n - 1 ; j > i ; j -- ) { if ( arr [ j ] == num2 ) { break ; } } if ( j == i ) { return 0 ; } return ( j - i - 1 ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 } ; int n = arr . length ; int num1 = 5 ; int num2 = 4 ; System . out . println ( getCount ( arr , n , num1 , num2 ) ) ; }
while ( true ) { int n = Integer . parseInt ( input . readLine ( ) ) ; if ( n == 0 ) break ; String [ ] inputArr = input . readLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ inputArr . length ] ; for ( int i = 0 ; i < inputArr . length ; i ++ ) { arr [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } Arrays . sort ( arr ) ; int minDiff = Integer . MAX_VALUE ; for ( int i = 0 ; i < n - 1 ; i ++ ) { minDiff = Math . min ( minDiff , arr [ i + 1 ] - arr [ i ] ) ; } System . out . println ( minDiff ) ; }
public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countSetBits ( n ) ) ; } public static int countSetBits ( int n ) { int cnt = 0 ; int [ ] setBits = new int [ n + 1 ] ; setBits [ 0 ] = 0 ; setBits [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { setBits [ i ] = setBits [ i / 2 ] ; } else { setBits [ i ] = setBits [ i - 1 ] + 1 ; } } for ( int i = 0 ; i <= n ; i ++ ) { cnt = cnt + setBits [ i ] ; } return cnt ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { 2 , 18 , 6 , 3 } ; int n = A . length ; System . out . println ( largestGCD1Subset ( A , n ) ) ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } public static int largestGCD1Subset ( int [ ] A , int n ) { int currentGCD = A [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { currentGCD = gcd ( currentGCD , A [ i ] ) ; if ( currentGCD == 1 ) { return n ; } } return 0 ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int [ ] divisors = new int [ 10_000_001 ] ; for ( int i = 2 ; i <= ( divisors . length + 1 ) / 2 ; i ++ ) { for ( int j = i * 2 ; j < divisors . length ; j += i ) { divisors [ j ] ++ ; } } int ans = 0 ; for ( int i = 2 ; i < divisors . length - 1 ; i ++ ) { if ( divisors [ i ] == divisors [ i + 1 ] ) { ans ++ ; } } return Integer . toString ( ans ) ; } }
public class Main { public static void updateArray ( int [ ] arr , int n ) { int i = n - 1 ; while ( i > 0 ) { arr [ i ] = arr [ i - 1 ] ; i -- ; } arr [ 0 ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
public class Main { public static void findEncryptedArray ( int [ ] arr , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ( sum - arr [ i ] ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; findEncryptedArray ( arr , N ) ; } }
public class Main { public static void updateArray ( int [ ] arr , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { arr [ i ] = arr [ i + 1 ] ; } arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 4 , 3 , 4 } ; int n = arr . length ; System . out . println ( findMinDifference ( arr , n ) ) ; } public static int findMinDifference ( int [ ] arr , int n ) { int min__ , secondMax , max__ , secondMin ; if ( arr [ 0 ] < arr [ 1 ] ) { min__ = secondMax = arr [ 0 ] ; } else { min__ = secondMax = arr [ 1 ] ; } if ( arr [ 0 ] < arr [ 1 ] ) { max__ = secondMin = arr [ 1 ] ; } else { max__ = secondMin = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max__ ) { secondMax = max__ ; max__ = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } else if ( arr [ i ] < min__ ) { secondMin = min__ ; min__ = arr [ i ] ; } else if ( arr [ i ] < secondMin ) { secondMin = arr [ i ] ; } } int diff = Math . min ( max__ - secondMin , secondMax - min__ ) ; return diff ; } }
``` java import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; BufferedWriter writer = new BufferedWriter ( new OutputStreamWriter ( System . out ) ) ; Set < Integer > factor = factor ( Integer . parseInt ( reader . readLine ( ) ) , Integer . parseInt ( reader . readLine ( ) ) ) ; int n = Integer . parseInt ( reader . readLine ( ) ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = reader . readLine ( ) . split ( " ▁ " ) ; a [ i ] = Integer . parseInt ( input [ 0 ] ) ; b [ i ] = Integer . parseInt ( input [ 1 ] ) ; } for ( int i = 1 ; i < n ; i ++ ) { factor = test ( a [ i ] , b [ i ] , factor ) ; } if ( factor . size ( ) == 0 ) { writer . write ( " - 1 \n " ) ; } else { for ( int i : factor ) { writer . write ( i + " \n " ) ; break ; } } writer . flush ( ) ; } public static Set < Integer > factor ( int a , int b ) { Set < Integer > ret = new HashSet < > ( ) ; int i = 2 ; while ( i <= Math . sqrt ( Math . max ( a , b ) ) ) { while ( a % i == 0 ) { ret . add ( i ) ; a /= i ; } while ( b % i == 0 ) { ret . add ( i ) ; b /= i ; } i ++ ; } if ( a >= 2 ) { ret . add ( a ) ; } if ( b >= 2 ) { ret . add ( b ) ; } return ret ; } public static Set < Integer > test ( int a , int b , Set < Integer > s ) { Set < Integer > ret = new HashSet < > ( ) ; for ( int i : s ) { if ( a % i == 0 || b % i == 0 ) { ret . add ( i ) ; } } return ret ; } } ```
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; if ( n == 0 ) { break ; } Map < Integer , Integer > stars = new HashMap < > ( ) ; for ( String s : scanner . nextLine ( ) . split ( " ▁ " ) ) { int num = Integer . parseInt ( s ) ; stars . put ( num , stars . getOrDefault ( num , 0 ) + 1 ) ; } int half_n = n / 2 ; for ( Map . Entry < Integer , Integer > entry : stars . entrySet ( ) ) { if ( entry . getValue ( ) > half_n ) { System . out . println ( entry . getKey ( ) ) ; break ; } } System . out . println ( " NO ▁ COLOR " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial ▁ of ▁ " + num + " ▁ is ▁ " + factorial ( num ) ) ; } public static int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; int x = scanner . nextInt ( ) ; int [ ] [ ] weights = new int [ d ] [ n ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { weights [ i ] [ j ] = scanner . nextInt ( ) ; } } int [ ] [ ] prices = new int [ d - 1 ] [ n ] ; for ( int i = 0 ; i < d - 1 ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { prices [ i ] [ j ] = weights [ i + 1 ] [ j ] - weights [ i ] [ j ] ; } } int bag = x ; for ( int i = 0 ; i < d - 1 ; i ++ ) { int [ ] dp = new int [ bag + 1 ] ; dp [ 0 ] = 0 ; for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < bag ; k ++ ) { if ( weights [ i ] [ j ] + k < bag + 1 && dp [ k ] != 0 ) { dp [ k + weights [ i ] [ j ] ] = Math . max ( dp [ k + weights [ i ] [ j ] ] , dp [ k ] + prices [ i ] [ j ] ) ; } } } bag += max ( dp ) ; } System . out . println ( bag ) ; } public static int max ( int [ ] arr ) { int max = arr [ 0 ] ; for ( int value : arr ) { if ( value > max ) { max = value ; } } return max ; } }
public static void solve ( ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] stones = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { stones [ i ] = scanner . nextInt ( ) ; } int [ ] total1 = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { total1 [ i ] = stones [ i - 1 ] + total1 [ i - 1 ] ; } int [ ] total2 = new int [ n + 1 ] ; Arrays . sort ( stones ) ; for ( int i = 1 ; i <= n ; i ++ ) { total2 [ i ] = stones [ i - 1 ] + total2 [ i - 1 ] ; } int m = scanner . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int [ ] x = new int [ 3 ] ; for ( int j = 0 ; j < 3 ; j ++ ) { x [ j ] = scanner . nextInt ( ) ; } if ( x [ 0 ] == 1 ) { System . out . println ( total1 [ x [ 2 ] ] - total1 [ x [ 1 ] - 1 ] ) ; } else { System . out . println ( total2 [ x [ 2 ] ] - total2 [ x [ 1 ] - 1 ] ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 1 , 4 , 4 , 7 , 4 , 1 } ; int n = a . length ; System . out . println ( findMinimumX ( a , n ) ) ; } public static int findMinimumX ( int [ ] a , int n ) { Set < Integer > st = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { st . add ( a [ i ] ) ; } if ( st . size ( ) == 1 ) { return 0 ; } if ( st . size ( ) == 2 ) { List < Integer > list = new ArrayList < > ( st ) ; int el1 = list . get ( 0 ) ; int el2 = list . get ( 1 ) ; if ( ( el2 - el1 ) % 2 == 0 ) { return ( el2 - el1 ) / 2 ; } else { return ( el2 - el1 ) ; } } if ( st . size ( ) == 3 ) { List < Integer > list = new ArrayList < > ( st ) ; int el1 = list . get ( 0 ) ; int el2 = list . get ( 1 ) ; int el3 = list . get ( 2 ) ; if ( ( el2 - el1 ) == ( el3 - el2 ) ) { return el2 - el1 ; } else { return - 1 ; } } return - 1 ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 5 ; int k = 2 ; System . out . println ( findX ( n , k ) ) ; } public static int findX ( int n , int k ) { int r = n ; int m = ( int ) Math . sqrt ( k ) + 1 ; int i = 2 ; while ( i <= m && k > 1 ) { if ( i == m ) { i = k ; } int u = 0 ; int v = 0 ; while ( k % i == 0 ) { k /= i ; v += 1 ; } if ( v > 0 ) { int t = n ; while ( t > 0 ) { t /= i ; u += t ; } r = Math . min ( r , u / v ) ; } i += 1 ; } return r ; } }
public class Main { public static void main ( String [ ] args ) { int a = 7 , b = 2 , x = 4 , y = 5 ; if ( liesInsideRectangle ( a , b , x , y ) ) { System . out . println ( " Given ▁ point ▁ lies ▁ inside ▁ the ▁ rectangle " ) ; } else { System . out . println ( " Given ▁ point ▁ does ▁ not ▁ lie ▁ on ▁ the ▁ rectangle " ) ; } } public static boolean liesInsideRectangle ( int a , int b , int x , int y ) { if ( x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 && x + y - b >= 0 ) { return true ; } return false ; } }
public class Main { static int N = 1000 ; public static void main ( String [ ] args ) { int [ ] arr = { 4 , 2 , 5 , 1 , 3 , 5 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } static int countPairs ( int [ ] arr , int n ) { int size = ( 2 * N ) + 1 ; int [ ] freq = new int [ size ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; freq [ x + N ] += 1 ; } int ans = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( freq [ i ] > 0 ) { ans += ( int ) ( ( freq [ i ] * ( freq [ i ] - 1 ) ) / 2 ) ; for ( int j = i + 2 ; j < 2001 ; j += 2 ) { if ( freq [ j ] > 0 && ( freq [ ( i + j ) / 2 ] > 0 ) ) { ans += ( freq [ i ] * freq [ j ] ) ; } } } } return ans ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } public static double getAvg ( int x , int n , double sum ) { sum = sum + x ; return ( double ) sum / n ; } public static void streamAvg ( int [ ] arr , int n ) { double avg = 0 ; double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( arr [ i ] , i + 1 , sum ) ; sum = avg * ( i + 1 ) ; System . out . print ( " Average ▁ of ▁ " + ( i + 1 ) + " ▁ numbers ▁ is ▁ " + avg ) ; } } }
``` java import java . util . * ; public class Main { static final int MAX = 10000 ; static Set < Integer > s = new HashSet < > ( ) ; public static void SieveOfEratosthenes ( ) { boolean [ ] prime = new boolean [ MAX ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p < 100 ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i < MAX ; i += p ) { prime [ i ] = false ; } } } int product = 1 ; for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) { product *= p ; s . add ( product + 1 ) ; } } } public static boolean isEuclid ( int n ) { return s . contains ( n ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isEuclid ( n ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } n = 42 ; if ( isEuclid ( n ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } ```
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String [ ] line1 = input . nextLine ( ) . split ( " ▁ " ) ; String [ ] line2 = input . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( line1 [ 0 ] ) ; int b = Integer . parseInt ( line1 [ 1 ] ) ; int [ ] l1 = new int [ line2 . length ] ; for ( int i = 0 ; i < line2 . length ; i ++ ) { l1 [ i ] = Integer . parseInt ( line2 [ i ] ) ; } int [ ] l2 = new int [ l1 . length ] ; int num_of_cuts = 0 ; for ( int i = 0 ; i < l1 . length ; i ++ ) { if ( i != 0 ) { int num_of_odds = 0 ; int num_of_evens = 0 ; for ( int j = 0 ; j < i ; j ++ ) { if ( l1 [ j ] % 2 == 0 ) { num_of_evens ++ ; } else { num_of_odds ++ ; } } if ( num_of_evens == num_of_odds ) { l2 [ i ] = Math . abs ( l1 [ i ] - l1 [ i - 1 ] ) ; } } } Arrays . sort ( l2 ) ; for ( int i : l2 ) { if ( i <= b ) { num_of_cuts ++ ; b -= i ; } } System . out . println ( num_of_cuts ) ; } }
public class Main { public static void main ( String [ ] args ) { String a = " ggkssk " ; System . out . println ( maxOperations ( a ) ) ; } public static int maxOperations ( String str ) { int i = 0 , g = 0 , gk = 0 , gks = 0 ; for ( i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' g ' ) { g += 1 ; } else if ( str . charAt ( i ) == ' k ' ) { if ( g > 0 ) { g -= 1 ; gk += 1 ; } } else if ( str . charAt ( i ) == ' s ' ) { if ( gk > 0 ) { gk -= 1 ; gks += 1 ; } } } return gks ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int a = input . nextInt ( ) ; int [ ] arr = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { arr [ i ] = input . nextInt ( ) ; } Arrays . sort ( arr ) ; int c = 0 ; for ( int i = 0 ; i < a - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) > 1 ) { c += Math . abs ( arr [ i ] - arr [ i + 1 ] ) - 1 ; } } System . out . println ( c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; List < List < Integer > > students = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { students . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; students . get ( a - 1 ) . add ( b - 1 ) ; students . get ( b - 1 ) . add ( a - 1 ) ; } List < Integer > seen = new ArrayList < > ( ) ; int bench = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! seen . contains ( i ) ) { seen . add ( i ) ; if ( students . get ( i ) . size ( ) == 0 || students . get ( i ) . size ( ) == 1 ) { continue ; } else { int root = i ; int prev = - 1 ; int curr = i ; boolean finished = false ; int clen = 1 ; while ( ! finished ) { seen . add ( curr ) ; if ( students . get ( curr ) . size ( ) == 1 ) { finished = true ; } else { if ( students . get ( curr ) . contains ( root ) && root != prev ) { finished = true ; if ( clen % 2 == 1 ) { bench ++ ; } } else { if ( ! students . get ( curr ) . get ( 0 ) . equals ( prev ) ) { prev = curr ; clen ++ ; curr = students . get ( curr ) . get ( 0 ) ; } else { prev = curr ; curr = students . get ( curr ) . get ( 1 ) ; clen ++ ; } } } } } } } if ( ( n - bench ) % 2 == 1 ) { System . out . println ( bench + 1 ) ; } else { System . out . println ( bench ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 12 , 3 , 5 , 7 , 19 } ; int n = arr . length ; int k = 2 ; System . out . println ( " K ' th ▁ smallest ▁ element ▁ is ▁ " + kthSmallest ( arr , n , k ) ) ; } public static int kthSmallest ( int [ ] arr , int n , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } }
``` java import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int d = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < d ; k ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( input [ i ] ) ; } int [ ] b = a . clone ( ) ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( b [ i ] == a [ i ] ) { int temp = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = temp ; } } if ( n == 1 ) { b = new int [ ] { - 1 } ; } else if ( b [ n - 1 ] == a [ n - 1 ] ) { int temp = b [ n - 1 ] ; b [ n - 1 ] = b [ n - 2 ] ; b [ n - 2 ] = temp ; } for ( int num : b ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; } } } ```
import java . util . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int START_NUM = 1 ; int END_NUM = 500 ; String CROAK_SEQ = " PPPPNNPPPNPPNPN " ; assert 0 <= START_NUM && START_NUM < END_NUM ; assert 1 <= CROAK_SEQ . length ( ) ; int NUM_JUMPS = CROAK_SEQ . length ( ) - 1 ; int NUM_TRIALS = ( int ) Math . pow ( 2 , NUM_JUMPS ) ; int globalnumerator = 0 ; boolean [ ] isprime = eulerlib . list_primality ( END_NUM ) ; for ( int i = START_NUM ; i <= END_NUM ; i ++ ) { for ( int j = 0 ; j < NUM_TRIALS ; j ++ ) { int pos = i ; int trialnumerator = 1 ; if ( isprime [ pos ] == ( CROAK_SEQ . charAt ( 0 ) == ' P ' ) ) { trialnumerator *= 2 ; } for ( int k = 0 ; k < NUM_JUMPS ; k ++ ) { if ( pos <= START_NUM ) { pos += 1 ; } else if ( pos >= END_NUM ) { pos -= 1 ; } else if ( ( ( j >> k ) & 1 ) == 0 ) { pos += 1 ; } else { pos -= 1 ; } if ( isprime [ pos ] == ( CROAK_SEQ . charAt ( k + 1 ) == ' P ' ) ) { trialnumerator *= 2 ; } } globalnumerator += trialnumerator ; } } int globaldenominator = ( END_NUM + 1 - START_NUM ) * ( int ) Math . pow ( 2 , NUM_JUMPS ) * ( int ) Math . pow ( 3 , CROAK_SEQ . length ( ) ) ; BigInteger numerator = BigInteger . valueOf ( globalnumerator ) ; BigInteger denominator = BigInteger . valueOf ( globaldenominator ) ; BigInteger gcd = numerator . gcd ( denominator ) ; numerator = numerator . divide ( gcd ) ; denominator = denominator . divide ( gcd ) ; return numerator . toString ( ) + " / " + denominator . toString ( ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { double lat1 = 53.32055555555556 ; double lat2 = 53.31861111111111 ; double lon1 = - 1.7297222222222221 ; double lon2 = - 1.6997222222222223 ; System . out . println ( distance ( lat1 , lat2 , lon1 , lon2 ) + " ▁ K . M " ) ; } public static double distance ( double lat1 , double lat2 , double lon1 , double lon2 ) { lon1 = Math . toRadians ( lon1 ) ; lon2 = Math . toRadians ( lon2 ) ; lat1 = Math . toRadians ( lat1 ) ; lat2 = Math . toRadians ( lat2 ) ; double dlon = lon2 - lon1 ; double dlat = lat2 - lat1 ; double a = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Math . cos ( lat1 ) * Math . cos ( lat2 ) * Math . pow ( Math . sin ( dlon / 2 ) , 2 ) ; double c = 2 * Math . asin ( Math . sqrt ( a ) ) ; double r = 6371 ; return ( c * r ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( centeredOctahedral ( n ) ) ; n = 9 ; System . out . println ( centeredOctahedral ( n ) ) ; } public static int centeredOctahedral ( int n ) { return ( 2 * n + 1 ) * ( 2 * n * n + 2 * n + 3 ) / 3 ; } }
public class Measure { private int init ; private int stationCount ; public Measure ( int init , int stationCount ) { this . init = init ; this . stationCount = stationCount ; } public int clockwise ( int pos ) { return ( this . stationCount - this . init + pos ) % this . stationCount ; } public int anticlockwise ( int pos ) { return ( this . stationCount + this . init - pos ) % this . stationCount ; } public static void main ( String [ ] args ) { } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] A = { 1 , 2 , 3 , 4 , 5 } ; int n = A . length ; sumDivPrime ( A , n ) ; } public static void sumDivPrime ( int [ ] A , int n ) { int max_val = Arrays . stream ( A ) . max ( ) . getAsInt ( ) + 1 ; boolean [ ] prime = new boolean [ max_val + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p <= Math . sqrt ( max_val ) ; p ++ ) { if ( prime [ p ] ) { for ( int i = 2 * p ; i <= max_val ; i += p ) { prime [ i ] = false ; } } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] ) { sum += A [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] && sum % A [ i ] == 0 ) { System . out . println ( " YES " ) ; return ; } } System . out . println ( " NO " ) ; } }
public class Main { public static void leftRotate ( int [ ] arr , int n , int k ) { for ( int i = k ; i < k + n ; i ++ ) { System . out . print ( arr [ i % n ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 3 , 5 , 7 , 9 } ; int n = arr . length ; int k = 2 ; leftRotate ( arr , n , k ) ; System . out . println ( ) ; k = 3 ; leftRotate ( arr , n , k ) ; System . out . println ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . println ( ) ; } }
public static int closestMultiple ( int n , int x ) { if ( x > n ) { return x ; } int z = ( int ) ( x / 2 ) ; n = n + z ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56287 ; int x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String y = scanner . nextLine ( ) ; System . out . print ( " cryeadn " . charAt ( Integer . parseInt ( y ) % 3 < 1 && ! ( y . chars ( ) . anyMatch ( c -> "2468" . contains ( String . valueOf ( ( char ) c ) ) ) < y . chars ( ) . filter ( c -> c == '0' ) . count ( ) ) ? 1 : 0 ) ) ; } } }
int [ ] [ ] dp = new int [ 901 ] [ 8101 ] ; public static int minimumNumberOfDigits ( int a , int b ) { if ( a > b || a < 0 || b < 0 || a > 900 || b > 8100 ) { return - 1 ; } if ( a == 0 && b == 0 ) { return 0 ; } if ( dp [ a ] [ b ] != - 1 ) { return dp [ a ] [ b ] ; } int ans = 101 ; for ( int i = 9 ; i > 0 ; i -- ) { int k = minimumNumberOfDigits ( a - i , b - ( i * i ) ) ; if ( k != - 1 ) { ans = Math . min ( ans , k + 1 ) ; } } dp [ a ] [ b ] = ans ; return ans ; } public static void printSmallestNumber ( int a , int b ) { for ( int i = 0 ; i < 901 ; i ++ ) { for ( int j = 0 ; j < 8101 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } dp [ 0 ] [ 0 ] = 0 ; int k = minimumNumberOfDigits ( a , b ) ; if ( k == - 1 || k > 100 ) { System . out . print ( - 1 ) ; } else { while ( a > 0 && b > 0 ) { for ( int i = 1 ; i < 10 ; i ++ ) { if ( a >= i && b >= i * i && 1 + dp [ a - i ] [ b - i * i ] == dp [ a ] [ b ] ) { System . out . print ( i ) ; a -= i ; b -= i * i ; break ; } } } } } public static void main ( String [ ] args ) { int a = 18 ; int b = 162 ; printSmallestNumber ( a , b ) ; }
int N = 5005 ; int n = 0 , k = 0 ; ArrayList < Integer > [ ] gr = new ArrayList [ N ] ; int [ ] [ ] d = new int [ N ] [ 505 ] ; int ans = 0 ; void Add_edge ( int x , int y ) { gr [ x ] . add ( y ) ; gr [ y ] . add ( x ) ; } void dfs ( int v , int par ) { d [ v ] [ 0 ] = 1 ; for ( int i : gr [ v ] ) { if ( i != par ) { dfs ( i , v ) ; for ( int j = 1 ; j <= k ; j ++ ) { ans += d [ i ] [ j - 1 ] * d [ v ] [ k - j ] ; } for ( int j = 1 ; j <= k ; j ++ ) { d [ v ] [ j ] += d [ i ] [ j - 1 ] ; } } } } n = 5 ; k = 2 ; Add_edge ( 1 , 2 ) ; Add_edge ( 2 , 3 ) ; Add_edge ( 3 , 4 ) ; Add_edge ( 2 , 5 ) ; dfs ( 1 , 0 ) ; System . out . println ( ans ) ;
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 12 , 44 , 29 , 33 , 96 , 89 } ; int n = arr . length ; System . out . println ( findSubsequence ( arr , n ) ) ; } public static int findSubsequence ( int [ ] arr , int n ) { int length = 1 ; int [ ] dp = new int [ 10 ] ; int tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; int locMax = 1 ; int [ ] cnt = new int [ 10 ] ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] ++ ; locMax = Math . max ( locMax , dp [ d ] ) ; } } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d ] == 1 ) { dp [ d ] = locMax ; } } length = Math . max ( length , locMax ) ; } return length ; } }
int n = Integer . parseInt ( input ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { input ( ) ; String [ ] arr1 = input ( ) . split ( " ▁ " ) ; String [ ] arr2 = input ( ) . split ( " ▁ " ) ; Set < String > set1 = new HashSet < > ( Arrays . asList ( arr1 ) ) ; Set < String > set2 = new HashSet < > ( Arrays . asList ( arr2 ) ) ; set1 . retainAll ( set2 ) ; System . out . println ( set1 . size ( ) ) ; }
public class Main { public static void main ( String [ ] args ) { int G = 2 ; int L = 12 ; System . out . print ( " Total ▁ possible ▁ pair ▁ with ▁ GCD ▁ " + G + " ▁ & ▁ LCM ▁ " + L + " ▁ = ▁ " + countPairs ( G , L ) ) ; } public static int totalPrimeFactors ( int n ) { int count = 0 ; if ( n % 2 == 0 ) { count ++ ; while ( n % 2 == 0 ) { n /= 2 ; } } int i = 3 ; while ( i * i <= n ) { if ( n % i == 0 ) { count ++ ; while ( n % i == 0 ) { n /= i ; } } i += 2 ; } if ( n > 2 ) { count ++ ; } return count ; } public static int countPairs ( int G , int L ) { if ( L % G != 0 ) { return 0 ; } int div = L / G ; return ( 1 << totalPrimeFactors ( div ) ) ; } }
public class Main { public static void calculateSum ( int a , int N ) { int m = N / a ; int sum = m * ( m + 1 ) / 2 ; int ans = a * sum ; System . out . println ( " Sum ▁ of ▁ multiples ▁ of ▁ " + a + " ▁ up ▁ to ▁ " + N + " ▁ = ▁ " + ans ) ; } public static void main ( String [ ] args ) { calculateSum ( 7 , 49 ) ; } }
``` java import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] line = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( line [ 0 ] ) ; int m = Integer . parseInt ( line [ 1 ] ) ; int k = Integer . parseInt ( line [ 2 ] . substring ( 2 ) ) ; Map < String , Integer > skills = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { line = scanner . nextLine ( ) . split ( " ▁ " ) ; skills . put ( line [ 0 ] , Integer . parseInt ( line [ 1 ] ) ) ; } List < String > newSkills = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { newSkills . add ( scanner . nextLine ( ) ) ; } int count = 0 ; List < String > delete = new ArrayList < > ( ) ; for ( Map . Entry < String , Integer > entry : skills . entrySet ( ) ) { int value = ( int ) ( k * entry . getValue ( ) / 100 ) ; if ( value < 100 ) { delete . add ( entry . getKey ( ) ) ; } else { skills . put ( entry . getKey ( ) , value ) ; count ++ ; } } for ( String key : delete ) { skills . remove ( key ) ; } for ( String skill : newSkills ) { if ( ! skills . containsKey ( skill ) ) { skills . put ( skill , 0 ) ; count ++ ; } } Map < String , Integer > sortedSkills = new TreeMap < > ( skills ) ; System . out . println ( count ) ; for ( Map . Entry < String , Integer > entry : sortedSkills . entrySet ( ) ) { System . out . println ( entry . getKey ( ) + " ▁ " + entry . getValue ( ) ) ; } } } ```
public class Main { public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } public static int countSolutions ( int a ) { int count = 0 ; for ( int i = 0 ; i <= a ; i ++ ) { if ( a == ( i + ( a ^ i ) ) ) { count ++ ; } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 5 , 8 , 12 } ; System . out . println ( next ( arr , 8 ) ) ; } public static int next ( int [ ] arr , int target ) { int start = 0 ; int end = arr . length - 1 ; int ans = - 1 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; if ( arr [ mid ] <= target ) { start = mid + 1 ; } else { ans = mid ; end = mid - 1 ; } } return ans ; } }
String [ ] word = { " zero " , " one " , " two " , " three " , " four " , " five " , " six " , " seven " , " eight " , " nine " } ; public static void printWordsWithoutIfSwitch ( int n ) { int [ ] digits = new int [ 10 ] ; int dc = 0 ; while ( true ) { digits [ dc ] = n % 10 ; n = n / 10 ; dc += 1 ; if ( n == 0 ) { break ; } } for ( int i = dc - 1 ; i >= 0 ; i -- ) { System . out . print ( word [ digits [ i ] ] + " ▁ " ) ; } } int n = 350 ; printWordsWithoutIfSwitch ( n ) ;
import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . io . IOException ; import java . util . StringTokenizer ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader in = new BufferedReader ( new InputStreamReader ( System . in ) ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = intIn ( ) ; int k = intIn ( ) ; int m = intIn ( ) ; int [ ] a = arrIn ( ) ; out ( solve ( n , k , m , a ) ) ; out . close ( ) ; } static int intIn ( ) throws IOException { return Integer . parseInt ( in . readLine ( ) ) ; } static int [ ] arrIn ( ) throws IOException { StringTokenizer st = new StringTokenizer ( in . readLine ( ) ) ; int [ ] arr = new int [ st . countTokens ( ) ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = Integer . parseInt ( st . nextToken ( ) ) ; } return arr ; } static double solve ( int n , int k , int m , int [ ] a ) { int [ ] sa = a . clone ( ) ; Arrays . sort ( sa ) ; int [ ] prefixSum = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { prefixSum [ i + 1 ] = sa [ i ] + prefixSum [ i ] ; } double best = 0 ; for ( int i = 0 ; i < Math . min ( n , m + 1 ) ; i ++ ) { int totalPower = prefixSum [ n ] - prefixSum [ i ] ; int remainingHeros = sa . length - i ; int maxThatCanBeAdded = Math . min ( m - i , remainingHeros * k ) ; best = Math . max ( best , ( double ) ( totalPower + maxThatCanBeAdded ) / remainingHeros ) ; } return best ; } }
public class Main { public static void solve ( String a , String b ) { int l = a . length ( ) ; int min = 0 ; int max = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( a . charAt ( i ) == ' + ' || b . charAt ( i ) == ' + ' || a . charAt ( i ) != b . charAt ( i ) ) { max += 1 ; } if ( a . charAt ( i ) != ' + ' && b . charAt ( i ) != ' + ' && a . charAt ( i ) != b . charAt ( i ) ) { min += 1 ; } } System . out . println ( min + max ) ; } public static void main ( String [ ] args ) { String s1 = " a + c " ; String s2 = " + + b " ; solve ( s1 , s2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int k = 2 ; int s = 2 ; System . out . println ( " Total ▁ Ways ▁ = ▁ " + TotalWays ( n , s , k ) ) ; } public static int TotalWays ( int n , int s , int k ) { int [ ] dp = new int [ n ] ; dp [ s - 1 ] = 1 ; for ( int i = s ; i < n ; i ++ ) { int idx = Math . max ( s - 1 , i - k ) ; for ( int j = idx ; j < i ; j ++ ) { dp [ i ] += dp [ j ] ; } } return dp [ n - 1 ] ; } }
public class Main { public static void main ( String [ ] args ) { int n = 2335453 ; int t = countEvenOdd ( n ) ; if ( t == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static int countEvenOdd ( int n ) { int even_count = 0 ; int odd_count = 0 ; while ( n > 0 ) { int rem = n % 10 ; if ( rem % 2 == 0 ) { even_count += 1 ; } else { odd_count += 1 ; } n = n / 10 ; } System . out . println ( " Even ▁ count ▁ : ▁ " + even_count ) ; System . out . println ( " \n Odd ▁ count ▁ : ▁ " + odd_count ) ; if ( even_count % 2 == 0 && odd_count % 2 != 0 ) { return 1 ; } else { return 0 ; } } }
import java . util . * ; import java . util . stream . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; List < List < Integer > > books = new ArrayList < > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { books . add ( new ArrayList < > ( ) ) ; } while ( n > 0 ) { int c = scanner . nextInt ( ) ; int g = scanner . nextInt ( ) ; books . get ( g - 1 ) . add ( c ) ; n -- ; } List < List < Integer > > booksAcc = new ArrayList < > ( ) ; for ( List < Integer > q : books ) { List < Integer > acc = new ArrayList < > ( ) ; int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { sum += q . get ( i ) + i * 2 ; acc . add ( sum ) ; } List < Integer > accWithZero = new ArrayList < > ( ) ; accWithZero . add ( 0 ) ; accWithZero . addAll ( acc ) ; booksAcc . add ( accWithZero ) ; } Map < List < Integer > , Integer > memo = new HashMap < > ( ) ; System . out . println ( combi ( 0 , k , booksAcc , memo ) ) ; } public static int combi ( int g , int remain , List < List < Integer > > booksAcc , Map < List < Integer > , Integer > memo ) { if ( g > 9 ) { return 0 ; } List < Integer > key = Arrays . asList ( g , remain ) ; if ( memo . containsKey ( key ) ) { return memo . get ( key ) ; } List < Integer > bookAcc = new ArrayList < > ( booksAcc . get ( g ) ) ; int salable = Math . min ( remain + 1 , bookAcc . size ( ) ) ; int result = IntStream . range ( 0 , salable ) . mapToObj ( i -> bookAcc . get ( i ) + combi ( g + 1 , remain - i , booksAcc , memo ) ) . max ( Integer :: compare ) . orElse ( 0 ) ; memo . put ( key , result ) ; return result ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] [ ] p = { { 1 , 1 } , { 2 , 2 } , { - 1 , - 1 } , { - 2 , 2 } } ; int n = p . length ; System . out . println ( findMin ( p , n ) ) ; } public static int findMin ( int [ ] [ ] p , int n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] [ 0 ] <= 0 ) { a ++ ; } else if ( p [ i ] [ 0 ] >= 0 ) { b ++ ; } if ( p [ i ] [ 1 ] >= 0 ) { c ++ ; } else if ( p [ i ] [ 1 ] <= 0 ) { d ++ ; } } return Math . min ( Math . min ( a , b ) , Math . min ( c , d ) ) ; } }
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { int N = 3 ; int P = 24 ; System . out . println ( maxGCD ( N , P ) ) ; } public static int maxGCD ( int N , int P ) { int ans = 1 ; HashMap < Integer , Integer > primeFactors = new HashMap < > ( ) ; for ( int i = 2 ; i <= Math . sqrt ( P ) ; i ++ ) { while ( P % i == 0 ) { if ( ! primeFactors . containsKey ( i ) ) { primeFactors . put ( i , 0 ) ; } primeFactors . put ( i , primeFactors . get ( i ) + 1 ) ; P /= i ; } } if ( P != 1 ) { primeFactors . put ( P , primeFactors . getOrDefault ( P , 0 ) + 1 ) ; } for ( int key : primeFactors . keySet ( ) ) { int value = primeFactors . get ( key ) ; ans *= Math . pow ( key , value / N ) ; } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int k = Integer . parseInt ( input [ 0 ] ) ; int [ ] b = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { b [ i ] = Integer . parseInt ( input [ i + 1 ] ) ; } int t = 0 ; for ( int i : b ) { t += 1 << i ; } for ( int i = 0 ; i < ( 1 << k ) ; i ++ ) { int tmp = 0 ; StringBuilder rs = new StringBuilder ( ) ; for ( int j = 0 ; j < k ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { tmp |= 1 << b [ j ] ; rs . append ( b [ j ] ) . append ( " ▁ " ) ; } } System . out . println ( tmp + " : " + rs . toString ( ) ) ; } } }
public class Main { public static void generateDivisors ( int curIndex , int curDivisor , int [ ] [ ] arr ) { if ( curIndex == arr . length ) { System . out . print ( curDivisor + " ▁ " ) ; return ; } for ( int i = 0 ; i <= arr [ curIndex ] [ 0 ] ; i ++ ) { generateDivisors ( curIndex + 1 , curDivisor , arr ) ; curDivisor *= arr [ curIndex ] [ 1 ] ; } } public static void findDivisors ( int n ) { int [ ] [ ] arr = new int [ ] [ ] { } ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) { int count = 0 ; while ( n % i == 0 ) { n /= i ; count ++ ; } arr [ arr . length ] = new int [ ] { count , i } ; } } if ( n > 1 ) { arr [ arr . length ] = new int [ ] { 1 , n } ; } int curIndex = 0 ; int curDivisor = 1 ; generateDivisors ( curIndex , curDivisor , arr ) ; } public static void main ( String [ ] args ) { int n = 6 ; findDivisors ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] l = new int [ 1000010 ] ; int [ ] dp = new int [ 1000010 ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; l [ a ] = b ; } if ( l [ 0 ] > 0 ) { dp [ 0 ] = 1 ; } int mx = 0 ; for ( int i = 1 ; i < 1000010 ; i ++ ) { if ( l [ i ] == 0 ) { dp [ i ] = dp [ i - 1 ] ; } else { if ( l [ i ] >= i ) { dp [ i ] = 1 ; } else { dp [ i ] = dp [ i - l [ i ] - 1 ] + 1 ; } } if ( dp [ i ] > mx ) { mx = dp [ i ] ; } } System . out . println ( n - mx ) ; } }
public class Main { public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( largestPalinSub ( s ) ) ; } public static String largestPalinSub ( String s ) { String res = " " ; char mx = s . charAt ( 0 ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { mx = ( char ) Math . max ( mx , s . charAt ( i ) ) ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == mx ) { res += s . charAt ( i ) ; } } return res ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { try { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String s = scanner . nextLine ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s = convert ( s ) ; } System . out . println ( s ) ; } catch ( Exception e ) { break ; } } } public static String convert ( String s ) { StringBuilder convertStr = new StringBuilder ( ) ; int l = s . length ( ) ; int i = 0 ; while ( i < l ) { if ( i + 1 < l ) { char word = s . charAt ( i ) ; int sequenceNum = 1 ; int j = i + 1 ; while ( j < l ) { if ( word == s . charAt ( j ) ) { sequenceNum ++ ; } else { break ; } j ++ ; } convertStr . append ( sequenceNum ) . append ( word ) ; i = i + sequenceNum - 1 ; } else { convertStr . append ( "1" ) . append ( s . charAt ( i ) ) ; } i ++ ; } return convertStr . toString ( ) ; } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; String [ ] arr = input . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( arr [ i ] ) ; } int [ ] d = new int [ 100007 ] ; int ans = 0 ; for ( int i : a ) { for ( int j = 2 ; j <= i ; j ++ ) { if ( j * j > i ) { break ; } if ( i % j == 0 ) { d [ i ] = Math . max ( d [ i ] , Math . max ( d [ i / j ] + 1 , d [ j ] + 1 ) ) ; } } d [ i ] = Math . max ( d [ i ] , 1 ) ; for ( int j = 2 ; j <= i ; j ++ ) { if ( j * j > i ) { break ; } if ( i % j == 0 ) { d [ i / j ] = d [ i ] ; d [ j ] = d [ i ] ; } } ans = Math . max ( ans , d [ i ] ) ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { 10 , 5 , 20 , 40 } ; int [ ] D = initializeDiffArray ( A ) ; update ( D , 0 , 1 , 10 ) ; printArray ( A , D ) ; update ( D , 1 , 3 , 20 ) ; update ( D , 2 , 2 , 30 ) ; printArray ( A , D ) ; } public static int [ ] initializeDiffArray ( int [ ] A ) { int n = A . length ; int [ ] D = new int [ n + 1 ] ; D [ 0 ] = A [ 0 ] ; D [ n ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { D [ i ] = A [ i ] - A [ i - 1 ] ; } return D ; } public static void update ( int [ ] D , int l , int r , int x ) { D [ l ] += x ; D [ r + 1 ] -= x ; } public static void printArray ( int [ ] A , int [ ] D ) { for ( int i = 0 ; i < A . length ; i ++ ) { if ( i == 0 ) { A [ i ] = D [ i ] ; } else { A [ i ] = D [ i ] + A [ i - 1 ] ; } System . out . print ( A [ i ] + " ▁ " ) ; } System . out . println ( " " ) ; } }
public class Main { public static void findMaxGuests ( int [ ] arrl , int [ ] exit , int n ) { Arrays . sort ( arrl ) ; Arrays . sort ( exit ) ; int guests_in = 1 ; int max_guests = 1 ; int time = arrl [ 0 ] ; int i = 1 ; int j = 0 ; while ( i < n && j < n ) { if ( arrl [ i ] <= exit [ j ] ) { guests_in ++ ; if ( guests_in > max_guests ) { max_guests = guests_in ; time = arrl [ i ] ; } i ++ ; } else { guests_in -- ; j ++ ; } } System . out . println ( " Maximum ▁ Number ▁ of ▁ Guests ▁ = ▁ " + max_guests + " ▁ at ▁ time ▁ " + time ) ; } public static void main ( String [ ] args ) { int [ ] arrl = { 1 , 2 , 10 , 5 , 5 } ; int [ ] exit = { 4 , 5 , 12 , 9 , 12 } ; int n = arrl . length ; findMaxGuests ( arrl , exit , n ) ; } }
``` java import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { solve ( ) ; } public static void solve ( ) { Scanner scanner = new Scanner ( System . in ) ; List < String > ansOut = new ArrayList < > ( ) ; while ( scanner . hasNextLine ( ) ) { String s = scanner . nextLine ( ) . trim ( ) ; if ( s . charAt ( 0 ) == ' # ' ) { break ; } int sLen = s . length ( ) ; int sep = sLen / 2 ; String [ ] result = lcs ( s . substring ( 0 , sep ) , s . substring ( sep ) , " " , 0 ) ; String ans = result [ 0 ] ; int ansLen = Integer . parseInt ( result [ 1 ] ) ; while ( sep > ansLen ) { result = lcs ( s . substring ( 0 , sLen - sep ) , s . substring ( sLen - sep ) , ans , ansLen ) ; ans = result [ 0 ] ; ansLen = Integer . parseInt ( result [ 1 ] ) ; sep -- ; result = lcs ( s . substring ( 0 , sep ) , s . substring ( sep ) , ans , ansLen ) ; ans = result [ 0 ] ; ansLen = Integer . parseInt ( result [ 1 ] ) ; } ansOut . add ( ans ) ; } for ( String s : ansOut ) { System . out . println ( s ) ; } } public static String [ ] lcs ( String x , String y , String preLcs , int preLcsLen ) { HashMap < Character , Integer > pm = new HashMap < > ( ) ; for ( char c = ' A ' ; c <= ' Z ' ; c ++ ) { pm . put ( c , 0 ) ; } for ( char c : pm . keySet ( ) ) { for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( c == x . charAt ( i ) ) { pm . put ( c , pm . get ( c ) | ( 1 << i ) ) ; } } } int V = ( 1 << x . length ( ) ) - 1 ; List < String > rec = new ArrayList < > ( ) ; for ( int i = 0 ; i < y . length ( ) ; i ++ ) { V = ( ( V + ( V & pm . get ( y . charAt ( i ) ) ) ) | ( V & ~ pm . get ( y . charAt ( i ) ) ) ) ; rec . add ( Integer . toBinaryString ( V ) . substring ( Integer . toBinaryString ( V ) . length ( ) - x . length ( ) ) ) ; } String lcsLenBinary = Integer . toBinaryString ( V ) . substring ( Integer . toBinaryString ( V ) . length ( ) - x . length ( ) ) ; int l
public class Main { public static void main ( String [ ] args ) { int n = 6 ; int r = 2 ; System . out . print ( "1 / " ) ; System . out . print ( calcFunction ( n , r ) ) ; } public static int calcFunction ( int n , int r ) { int finalDenominator = 1 ; int mx = Math . max ( r , n - r ) ; for ( int i = mx + 1 ; i <= n ; i ++ ) { int denominator = ( int ) Math . pow ( i , i ) ; int numerator = ( int ) Math . pow ( i - mx , i - mx ) ; finalDenominator = ( finalDenominator * denominator ) / numerator ; } return finalDenominator ; } }
import static java . lang . Math . sqrt ; public class Main { public static void main ( String [ ] args ) { int n = 7 ; int k = 2 ; isPerfectSquare ( n + k ) ; } public static void isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; if ( sr * sr == x ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = scanner . nextInt ( ) * N + i ; } Arrays . sort ( A ) ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int d = ( A [ i ] % N ) % 2 ; if ( d % 2 != i % 2 ) { cnt ++ ; } } System . out . println ( cnt / 2 ) ; } }
``` java import java . util . Arrays ; public class Main { public static String get ( int [ ] l ) { Arrays . sort ( l ) ; for ( int i : l ) { if ( Arrays . binarySearch ( l , i + 1 ) >= 0 && Arrays . binarySearch ( l , i + 2 ) >= 0 ) { return " YES " ; } } return " NO " ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] lst = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; System . out . println ( get ( lst ) ) ; } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int N = scanner . nextInt ( ) ; if ( N == 0 ) break ; int [ ] lst = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { lst [ i ] = scanner . nextInt ( ) ; } if ( ! isSankaku ( sum ( lst ) ) ) { System . out . println ( - 1 ) ; continue ; } int result = - 1 ; for ( int count = 0 ; count < 10000 ; count ++ ) { if ( check ( lst ) ) { result = count ; break ; } int spam = lst . length ; int [ ] temp = new int [ spam ] ; int index = 0 ; for ( int x : lst ) { if ( x - 1 > 0 ) { temp [ index ] = x - 1 ; index ++ ; } } for ( int i = index ; i < spam ; i ++ ) { temp [ i ] = spam ; } lst = temp ; } System . out . println ( result ) ; } } public static boolean isSankaku ( int v ) { double x = ( Math . sqrt ( 8 * v + 1 ) - 1 ) / 2 ; return x == ( int ) x ; } public static boolean check ( int [ ] lst ) { for ( int i = 0 ; i < lst . length ; i ++ ) { if ( lst [ i ] != i + 1 ) { return false ; } else if ( i == lst . length - 1 ) { return true ; } } return false ; } }
public class Main { public static void main ( String [ ] args ) { String s = "15645746327462384723984023940239" ; if ( isDivisible ( s ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } s = "15645746327462384723984023940235" ; if ( isDivisible ( s ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static int accumulate ( String s ) { int acc = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { acc += ( int ) s . charAt ( i ) - 48 ; } return acc ; } public static boolean isDivisible ( String s ) { int n = s . length ( ) ; if ( s . charAt ( n - 1 ) != '5' && s . charAt ( n - 1 ) != '0' ) { return false ; } int sum = accumulate ( s ) ; return ( sum % 3 == 0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int sumlimit = 10 ; while ( true ) { boolean [ ] issquare = new boolean [ sumlimit ] ; for ( int i = 0 ; i * i < issquare . length ; i ++ ) { issquare [ i * i ] = true ; } int sum = findSum ( sumlimit , issquare ) ; if ( sum != - 1 ) { sumlimit = sum ; break ; } sumlimit *= 10 ; } while ( true ) { int sum = findSum ( sumlimit , new boolean [ sumlimit ] ) ; if ( sum == - 1 ) { return String . valueOf ( sumlimit ) ; } sumlimit = sum ; } } public static int findSum ( int limit , boolean [ ] issquare ) { for ( int a = 1 ; ; a ++ ) { if ( a * a >= limit ) { break ; } for ( int b = a - 1 ; b > 0 ; b -- ) { if ( ( a + b ) % 2 != 0 ) { continue ; } int x = ( a * a + b * b ) / 2 ; int y = ( a * a - b * b ) / 2 ; if ( x + y + 1 >= limit ) { continue ; } int zlimit = Math . min ( y , limit - x - y ) ; for ( int c = ( int ) Math . sqrt ( y ) + 1 ; ; c ++ ) { int z = c * c - y ; if ( z >= zlimit ) { break ; } if ( issquare [ x + z ] && issquare [ x - z ] && issquare [ y - z ] ) { return x + y + z ; } } } } return - 1 ; } }
public class Main { public static void main ( String [ ] args ) { String s = " hello " ; int n = s . length ( ) ; int k = 2 ; System . out . println ( encryptString ( s , n , k ) ) ; } public static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } public static String encryptString ( String s , int n , int k ) { int countVowels = 0 ; int countConsonants = 0 ; String ans = " " ; for ( int l = 0 ; l <= n - k ; l ++ ) { countVowels = 0 ; countConsonants = 0 ; for ( int r = l ; r < l + k ; r ++ ) { if ( isVowel ( s . charAt ( r ) ) ) { countVowels ++ ; } else { countConsonants ++ ; } } ans += Integer . toString ( countVowels * countConsonants ) ; } return ans ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int M = scanner . nextInt ( ) ; String S = scanner . next ( ) ; String T = scanner . next ( ) ; if ( S . charAt ( 0 ) != T . charAt ( 0 ) ) { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } if ( S . length ( ) == T . length ( ) ) { if ( S . equals ( T ) ) { System . out . println ( S . length ( ) ) ; } else { System . out . println ( - 1 ) ; } System . exit ( 0 ) ; } int gcd1 = gcd ( S . length ( ) , T . length ( ) ) ; int lcm = S . length ( ) * T . length ( ) / gcd1 ; List < Integer > SS = new ArrayList < > ( ) ; List < Integer > TT = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { SS . add ( i * lcm / N + 1 ) ; } for ( int j = 0 ; j < M ; j ++ ) { TT . add ( j * lcm / M + 1 ) ; } int ind = 0 ; int ind_max = j - 1 ; for ( int i = 0 ; i < SS . size ( ) ; i ++ ) { ind = Collections . binarySearch ( TT , SS . get ( i ) , ind , j ) ; if ( ind == j ) { break ; } if ( TT . get ( ind ) == SS . get ( i ) ) { if ( S . charAt ( i ) == T . charAt ( ind ) ) { continue ; } else { System . out . println ( - 1 ) ; System . exit ( 0 ) ; } } } System . out . println ( lcm ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return Math . abs ( a ) ; } else { return gcd ( b , a % b ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; boolean [ ] [ ] black = new boolean [ n + 10 ] [ n + 10 ] ; for ( int i = 1 ; i <= m ; i ++ ) { int x = Integer . parseInt ( scanner . next ( ) ) + 5 ; int y = Integer . parseInt ( scanner . next ( ) ) + 5 ; black [ x ] [ y ] = true ; for ( int lx = x - 2 ; lx <= x + 1 ; lx ++ ) { for ( int ly = y - 2 ; ly <= y + 1 ; ly ++ ) { int cnt = 0 ; for ( int dx = 0 ; dx < 3 ; dx ++ ) { for ( int dy = 0 ; dy < 3 ; dy ++ ) { cnt += black [ lx + dx ] [ ly + dy ] ? 1 : 0 ; } } if ( cnt == 9 ) { System . out . println ( i ) ; System . exit ( 0 ) ; } } } } System . out . println ( - 1 ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String PYDEV = System . getenv ( " PYDEV " ) ; if ( PYDEV . equals ( " True " ) ) { System . setIn ( new FileInputStream ( " sample - input . txt " ) ) ; } while ( true ) { int n = Integer . parseInt ( br . readLine ( ) ) ; if ( n == 0 ) { break ; } String [ ] grid = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { grid [ i ] = br . readLine ( ) . trim ( ) ; } System . out . println ( gridLength ( n , grid ) ) ; } } public static int gridLength ( int n , String [ ] grid ) { int L = 0 ; for ( String row : grid ) { int maxRowLength = 0 ; String [ ] rowSplit = row . split ( "0" ) ; for ( String s : rowSplit ) { maxRowLength = Math . max ( maxRowLength , s . length ( ) ) ; } L = Math . max ( L , maxRowLength ) ; } for ( int c = 0 ; c < n ; c ++ ) { StringBuilder col = new StringBuilder ( ) ; for ( String s : grid ) { col . append ( s . charAt ( c ) ) ; } int maxColLength = 0 ; String [ ] colSplit = col . toString ( ) . split ( "0" ) ; for ( String s : colSplit ) { maxColLength = Math . max ( maxColLength , s . length ( ) ) ; } L = Math . max ( L , maxColLength ) ; } for ( int row = - n ; row < 2 * n ; row ++ ) { StringBuilder diag1 = new StringBuilder ( ) ; for ( int c = 0 ; c < n ; c ++ ) { if ( 0 <= row + c && row + c < n ) { diag1 . append ( grid [ row + c ] . charAt ( c ) ) ; } } int maxDiag1Length = 0 ; String [ ] diag1Split = diag1 . toString ( ) . split ( "0" ) ; for ( String s : diag1Split ) { maxDiag1Length = Math . max ( maxDiag1Length , s . length ( ) ) ; } L = Math . max ( L , maxDiag1Length ) ; StringBuilder diag2 = new StringBuilder ( ) ; for ( int c = 0 ; c < n
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } public static double fourthPowerSum ( int n ) { return ( ( 6 * Math . pow ( n , 5 ) ) + ( 15 * Math . pow ( n , 4 ) ) + ( 10 * Math . pow ( n , 3 ) ) - n ) / 30 ; } }
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 5 , 6 , 3 , 7 , 6 , 5 , 8 } ; int n = arr . length ; System . out . println ( " Maximum ▁ length ▁ subsequence ▁ = ▁ " + maxLenSub ( arr , n ) ) ; } public static int maxLenSub ( int [ ] arr , int n ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int length = 0 ; if ( um . containsKey ( arr [ i ] - 1 ) && length < um . get ( arr [ i ] - 1 ) ) { length = um . get ( arr [ i ] - 1 ) ; } if ( um . containsKey ( arr [ i ] ) && length < um . get ( arr [ i ] ) ) { length = um . get ( arr [ i ] ) ; } if ( um . containsKey ( arr [ i ] + 1 ) && length < um . get ( arr [ i ] + 1 ) ) { length = um . get ( arr [ i ] + 1 ) ; } um . put ( arr [ i ] , length + 1 ) ; if ( maxLen < um . get ( arr [ i ] ) ) { maxLen = um . get ( arr [ i ] ) ; } } return maxLen ; } }
int [ ] arr = { 1 , 3 , 5 , 2 , 4 , 6 } ; public static void rearrange ( int n ) { if ( n % 2 == 1 ) { return ; } int currIdx = ( n - 1 ) / 2 ; while ( currIdx > 0 ) { int count = currIdx ; int swapIdx = currIdx ; while ( count > 0 ) { int temp = arr [ swapIdx + 1 ] ; arr [ swapIdx + 1 ] = arr [ swapIdx ] ; arr [ swapIdx ] = temp ; swapIdx = swapIdx + 1 ; count = count - 1 ; } currIdx = currIdx - 1 ; } } int n = arr . length ; rearrange ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; while ( input . hasNextLine ( ) ) { String [ ] line = input . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( line [ 0 ] ) ; int k = Integer . parseInt ( line [ 1 ] ) ; if ( n == 0 && k == 0 ) { break ; } List < List < int [ ] > > E = new ArrayList < > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { E . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < k ; i ++ ) { String f = input . nextLine ( ) ; if ( f . charAt ( 0 ) == '0' ) { String [ ] parts = f . substring ( 2 ) . split ( " ▁ " ) ; int result = g ( n , E , Integer . parseInt ( parts [ 0 ] ) , Integer . parseInt ( parts [ 1 ] ) ) ; System . out . println ( result ) ; } else { String [ ] parts = f . substring ( 2 ) . split ( " ▁ " ) ; int c = Integer . parseInt ( parts [ 0 ] ) ; int d = Integer . parseInt ( parts [ 1 ] ) ; int e = Integer . parseInt ( parts [ 2 ] ) ; E . get ( c ) . add ( new int [ ] { e , d } ) ; E . get ( d ) . add ( new int [ ] { e , c } ) ; } } } } public static int g ( int n , List < List < int [ ] > > E , int S , int G ) { int [ ] F = new int [ n + 1 ] ; Arrays . fill ( F , 1_000_000 ) ; F [ S ] = 0 ; PriorityQueue < int [ ] > H = new PriorityQueue < > ( ( a , b ) -> a [ 0 ] - b [ 0 ] ) ; H . add ( new int [ ] { 0 , S } ) ; while ( ! H . isEmpty ( ) ) { int [ ] pair = H . poll ( ) ; int c = pair [ 0 ] ; int u = pair [ 1 ] ; if ( u == G ) { return c ; } for ( int [ ] edge : E . get ( u ) ) { int f = edge [ 0 ] ; int v = edge [ 1 ] ; int t = c + f ; if ( t < F [ v ] ) { F [ v ] = t ; H . add ( new int [ ] { t , v } ) ; } } } return - 1 ; } }
public class Main { public static void countCharacterType ( String str ) { int vowels = 0 ; int consonant = 0 ; int specialChar = 0 ; int digit = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ( ( ch >= ' a ' && ch <= ' z ' ) || ( ch >= ' A ' && ch <= ' Z ' ) ) ) { ch = Character . toLowerCase ( ch ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) { vowels ++ ; } else { consonant ++ ; } } else if ( ch >= '0' && ch <= '9' ) { digit ++ ; } else { specialChar ++ ; } } System . out . println ( " Vowels : " + vowels ) ; System . out . println ( " Consonant : " + consonant ) ; System . out . println ( " Digit : " + digit ) ; System . out . println ( " Special ▁ Character : " + specialChar ) ; } public static void main ( String [ ] args ) { String str = " geeks ▁ for ▁ geeks121" ; countCharacterType ( str ) ; } }
public class Main { public static void main ( String [ ] args ) { int l = 50 ; int b = 20 ; int h = 10 ; System . out . println ( increaseInVol ( l , b , h ) + " % " ) ; } public static double increaseInVol ( int l , int b , int h ) { double percentInc = ( ( 1 + ( l / 100.0 ) ) * ( 1 + ( b / 100.0 ) ) * ( 1 + ( h / 100.0 ) ) ) ; percentInc -= 1 ; percentInc *= 100 ; return percentInc ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 10 , 10 , 10 , 10 , 11 , 10 , 11 , 10 , 9 , 9 , 8 , 8 } ; int n = a . length ; System . out . println ( MaxTotalRectangleArea ( a , n ) ) ; } public static int MaxTotalRectangleArea ( int [ ] a , int n ) { Arrays . sort ( a ) ; int sum = 0 ; boolean flag = false ; int len = 0 ; int i = 0 ; while ( i < n - 1 ) { if ( i != 0 ) { i = i + 1 ; } if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && ! flag ) { flag = true ; len = a [ i + 1 ] ; i = i + 1 ; } else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag ) { sum = sum + a [ i + 1 ] * len ; flag = false ; i = i + 1 ; } } return sum ; } }
import java . lang . Math ; class Node { int data ; Node next ; Node prev ; public Node ( int data ) { this . data = data ; this . next = null ; this . prev = null ; } } public class Main { public static Node getNode ( int data ) { return new Node ( data ) ; } public static Node insertEnd ( Node head , Node new_node ) { if ( head == null ) { new_node . next = new_node ; new_node . prev = new_node ; head = new_node ; return head ; } Node last = head . prev ; new_node . next = head ; head . prev = new_node ; new_node . prev = last ; last . next = new_node ; return head ; } public static Node reverse ( Node head ) { if ( head == null ) { return null ; } Node new_head = null ; Node last = head . prev ; Node curr = last ; while ( curr . prev != last ) { Node prev = curr . prev ; new_head = insertEnd ( new_head , curr ) ; curr = prev ; } new_head = insertEnd ( new_head , curr ) ; return new_head ; } public static void display ( Node head ) { if ( head == null ) { return ; } Node temp = head ; System . out . print ( " Forward ▁ direction : ▁ " ) ; while ( temp . next != head ) { System . out . print ( temp . data + " ▁ " ) ; temp = temp . next ; } System . out . println ( temp . data ) ; Node last = head . prev ; temp = last ; System . out . print ( " Backward ▁ direction : ▁ " ) ; while ( temp . prev != last ) { System . out . print ( temp . data + " ▁ " ) ; temp = temp . prev ; } System . out . println ( temp . data ) ; } public static void main ( String [ ] args ) { Node head = null ; head = insertEnd ( head , getNode ( 1 ) ) ; head = insertEnd ( head , getNode ( 2 ) ) ; head = insertEnd ( head , getNode ( 3 ) ) ; head = insertEnd ( head , getNode ( 4 ) ) ; head = insertEnd ( head , getNode ( 5 ) ) ; System . out . println ( " Current ▁ list : " ) ; display ( head ) ; head = reverse ( head ) ; System . out . println ( " \n Reversed ▁ list : " ) ; display ( head ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 12345 ; lastFiveDigits ( n ) ; } public static void lastFiveDigits ( int n ) { n = ( ( int ) ( n / 10000 ) * 10000 + ( ( int ) ( n / 100 ) % 10 ) * 1000 + ( n % 10 ) * 100 + ( ( int ) ( n / 10 ) % 10 ) * 10 + ( int ) ( n / 1000 ) % 10 ) ; int ans = 1 ; for ( int i = 0 ; i < 5 ; i ++ ) { ans *= n ; ans %= 100000 ; } System . out . println ( ans ) ; } }
import java . math . BigDecimal ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int DIGITS = 100 ; BigDecimal MULTIPLIER = new BigDecimal ( 100 ) . pow ( DIGITS ) ; BigDecimal ans = BigDecimal . ZERO ; for ( int i = 0 ; i < 100 ; i ++ ) { if ( Math . pow ( eulerlib . sqrt ( i ) . doubleValue ( ) , 2 ) != i ) { String sqrtStr = eulerlib . sqrt ( i ) . multiply ( MULTIPLIER ) . toString ( ) . substring ( 0 , DIGITS ) ; BigDecimal sum = BigDecimal . ZERO ; for ( int j = 0 ; j < sqrtStr . length ( ) ; j ++ ) { sum = sum . add ( new BigDecimal ( Character . getNumericValue ( sqrtStr . charAt ( j ) ) ) ; } ans = ans . add ( sum ) ; } } return ans . toString ( ) ; } }
public class Main { public static void evaluate ( int n ) { if ( n == 1 || n == 2 ) { System . out . println ( " No ▁ Pythagoras ▁ Triplet ▁ exists " ) ; } else if ( n % 2 == 0 ) { double var = n * n / 4 ; System . out . print ( " Pythagoras ▁ Triplets ▁ exist ▁ i . e . ▁ " ) ; System . out . println ( ( int ) n + " ▁ " + ( int ) ( var - 1 ) + " ▁ " + ( int ) ( var + 1 ) ) ; } else if ( n % 2 != 0 ) { double var = n * n + 1 ; System . out . print ( " Pythagoras ▁ Triplets ▁ exist ▁ i . e . ▁ " ) ; System . out . println ( ( int ) n + " ▁ " + ( int ) ( var / 2 - 1 ) + " ▁ " + ( int ) ( var / 2 ) ) ; } } public static void main ( String [ ] args ) { int n = 22 ; evaluate ( n ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] abx = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int a = d ( abx [ 0 ] - 1 , abx [ 2 ] ) ; int b = d ( abx [ 1 ] , abx [ 2 ] ) ; System . out . println ( b - a ) ; } public static int d ( int a , int b ) { if ( a < 0 ) { return - 1 ; } else { return a / b ; } } }
public class Main { public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } public static int findNumber ( int [ ] arr , int n ) { int ans = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { ans = gcd ( ans , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == ans ) { return ans ; } } return - 1 ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( findNumber ( arr , n ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K = 4 ; System . out . println ( countKdivPairs ( A , n , K ) ) ; } public static int countKdivPairs ( int [ ] A , int n , int K ) { int [ ] freq = new int [ K ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int rem = A [ i ] % K ; if ( rem != 0 ) { ans += freq [ K - rem ] ; } else { ans += freq [ 0 ] ; } freq [ rem ] ++ ; } return ans ; } }
System . out . println ( new Scanner ( System . in ) . nextLine ( ) . replace ( " , " , " ▁ " ) ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] lst = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { lst [ i ] = scanner . nextInt ( ) ; } if ( lst [ 0 ] != lst [ n - 1 ] ) { System . out . println ( n - 1 ) ; } else { int i = 1 ; while ( i < n && lst [ i ] == lst [ 0 ] ) { i ++ ; } int j = n - 2 ; while ( j >= 0 && lst [ j ] == lst [ 0 ] ) { j -- ; } System . out . println ( Math . max ( n - i - 1 , j ) ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 } ; int n = arr . length ; System . out . println ( " Total ▁ Number ▁ of ▁ Even - Odd ▁ subarrays ▁ are ▁ " + countSubarrays ( arr , n ) ) ; } public static int countSubarrays ( int [ ] arr , int n ) { int difference = 0 ; int ans = 0 ; int [ ] hash_positive = new int [ n + 1 ] ; int [ ] hash_negative = new int [ n + 1 ] ; hash_positive [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] & 1 ) == 1 ) { difference = difference + 1 ; } else { difference = difference - 1 ; } if ( difference < 0 ) { ans += hash_negative [ - difference ] ; hash_negative [ - difference ] = hash_negative [ - difference ] + 1 ; } else { ans += hash_positive [ difference ] ; hash_positive [ difference ] = hash_positive [ difference ] + 1 ; } } return ans ; } }
public class Main { static final int SIZE = 26 ; public static void printChar ( String string , int n ) { int [ ] freq = new int [ SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ string . charAt ( i ) - ' a ' ] += 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ string . charAt ( i ) - ' a ' ] % 2 == 0 ) { System . out . print ( string . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String string = " geeksforgeeks " ; int n = string . length ( ) ; printChar ( string , n ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; printChar ( str , n ) ; } public static void printChar ( String str , int n ) { int [ ] freq = new int [ 26 ] ; Arrays . fill ( freq , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 1 ) { System . out . print ( str . charAt ( i ) ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 3 , 4 , 7 , 7 , 7 , 11 , 13 , 13 } ; int n = arr . length ; int k = 7 ; System . out . println ( countGreater ( arr , n , k ) ) ; } public static int countGreater ( int [ ] arr , int n , int k ) { int l = 0 ; int r = n - 1 ; int leftGreater = n ; while ( l <= r ) { int m = l + ( r - l ) / 2 ; if ( arr [ m ] > k ) { leftGreater = m ; r = m - 1 ; } else { l = m + 1 ; } } return ( n - leftGreater ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; if ( m == 1 ) { System . out . println ( ( int ) ( Math . pow ( 2 , n ) % 1000000 ) ) ; } else { int [ ] [ ] [ ] dp = new int [ n + 1 ] [ 3 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] [ 0 ] = 1 ; for ( int y = 0 ; y < n ; y ++ ) { for ( int x = 0 ; x < 3 ; x ++ ) { for ( int slide_limit = 0 ; slide_limit <= y ; slide_limit ++ ) { if ( x == 0 ) { dp [ y + 1 ] [ 0 ] [ slide_limit ] += dp [ y ] [ 0 ] [ slide_limit ] ; dp [ y + 1 ] [ 1 ] [ y + 1 ] += dp [ y ] [ 0 ] [ slide_limit ] ; dp [ y + 1 ] [ 2 ] [ y + 1 ] += dp [ y ] [ 0 ] [ slide_limit ] * ( y - slide_limit + 1 ) ; } if ( x == 1 ) { dp [ y + 1 ] [ 0 ] [ y + 1 ] += dp [ y ] [ 1 ] [ slide_limit ] ; dp [ y + 1 ] [ 1 ] [ slide_limit ] += dp [ y ] [ 1 ] [ slide_limit ] ; dp [ y + 1 ] [ 2 ] [ y + 1 ] += dp [ y ] [ 1 ] [ slide_limit ] ; } if ( x == 2 ) { dp [ y + 1 ] [ 0 ] [ y + 1 ] += dp [ y ] [ 2 ] [ slide_limit ] * ( y - slide_limit + 1 ) ; dp [ y + 1 ] [ 1 ] [ y + 1 ] += dp [ y ] [ 2 ] [ slide_limit ] ; dp [ y + 1 ] [ 2 ] [ slide_limit ] += dp [ y ] [ 2 ] [ slide_limit ] ; } } } } int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { sum += dp [ n ] [ i ] [ j ] ; } } for ( int slide_limit = 0 ; slide_limit <= n ; slide_limit ++ ) { sum += dp [ n ] [ 0 ] [ slide_limit ] * ( n - slide_limit ) ;
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { double N = 69.0 ; findAandB ( N ) ; } public static void findAandB ( double N ) { double val = N * N - 4.0 * N ; if ( val < 0 ) { System . out . println ( " NO " ) ; return ; } double a = ( N + Math . sqrt ( val ) ) / 2.0 ; double b = ( N - Math . sqrt ( val ) ) / 2.0 ; System . out . println ( " a ▁ = ▁ " + String . format ( " % .6f " , a ) ) ; System . out . println ( " b ▁ = ▁ " + String . format ( " % .6f " , b ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int numCases = Integer . parseInt ( input . nextLine ( ) ) ; for ( int i = 0 ; i < numCases ; i ++ ) { int n = Integer . parseInt ( input . nextLine ( ) ) ; int c = 0 ; int d = 1000000000 ; for ( int j = 0 ; j < n ; j ++ ) { String [ ] line = input . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( line [ 0 ] ) ; int b = Integer . parseInt ( line [ 1 ] ) ; if ( a > c ) { c = a ; } if ( b < d ) { d = b ; } } if ( c <= d ) { System . out . println ( 0 ) ; } else { System . out . println ( c - d ) ; } } } }
import java . util . Scanner ; import java . util . HashSet ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; ArrayList < String > ans = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String s = scanner . nextLine ( ) ; HashSet < Character > x = new HashSet < > ( ) ; for ( char c : s . toCharArray ( ) ) { x . add ( c ) ; } if ( x . contains ( ' X ' ) ) { ans . add ( s ) ; } } ArrayList < String > ans2 = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { StringBuilder sb = new StringBuilder ( ) ; for ( String s : ans ) { sb . append ( s . charAt ( i ) ) ; } HashSet < Character > x = new HashSet < > ( ) ; for ( char c : sb . toString ( ) . toCharArray ( ) ) { x . add ( c ) ; } if ( x . contains ( ' X ' ) ) { ans2 . add ( sb . toString ( ) ) ; } } System . out . println ( f ( ans2 ) ) ; } public static String f ( ArrayList < String > ans2 ) { for ( String s : ans2 ) { if ( s . contains ( " . " ) ) { return " NO " ; } } return " YES " ; } }
public class Main { static long INF = ( long ) Math . pow ( 10 , 10 ) ; static long MOD = ( long ) Math . pow ( 10 , 9 ) + 7 ; public static void solve ( String A , String B , String C ) { A = new StringBuilder ( A ) . reverse ( ) . toString ( ) ; B = new StringBuilder ( B ) . reverse ( ) . toString ( ) ; C = new StringBuilder ( C ) . reverse ( ) . toString ( ) ; long [ ] before = { 1 , 0 , 0 } ; int N = A . length ( ) ; for ( int i = 0 ; i < N ; i ++ ) { long [ ] dp = new long [ 3 ] ; int s = 0 ; if ( i == N - 1 ) { s += 1 ; } for ( int j = 0 ; j < 3 ; j ++ ) { for ( int a = s ; a < 10 ; a ++ ) { if ( ! A . equals ( " ? " ) && Integer . parseInt ( String . valueOf ( A . charAt ( i ) ) ) != a ) { continue ; } for ( int b = s ; b < 10 ; b ++ ) { if ( ! B . equals ( " ? " ) && Integer . parseInt ( String . valueOf ( B . charAt ( i ) ) ) != b ) { continue ; } for ( int c = s ; c < 10 ; c ++ ) { if ( ! C . equals ( " ? " ) && Integer . parseInt ( String . valueOf ( C . charAt ( i ) ) ) != c ) { continue ; } if ( ( j + a + b ) % 10 != c ) { continue ; } dp [ ( j + a + b ) / 10 ] += before [ j ] ; dp [ ( j + a + b ) / 10 ] %= MOD ; } } } } before = dp ; } long ans = before [ 0 ] ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { while ( true ) { Scanner scanner = new Scanner ( System . in ) ; String A = scanner . nextLine ( ) ; if ( A . equals ( "0" ) ) { return ; } String B = scanner . nextLine ( ) ; String C = scanner . nextLine ( ) ; solve ( A , B , C ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int test = scanner . nextInt ( ) ; int move = 0 ; while ( test != 1 ) { if ( test % 6 == 0 ) { test = test / 6 ; move ++ ; } else if ( test % 3 == 0 ) { test = test * 2 ; move ++ ; } else { System . out . println ( - 1 ) ; break ; } } System . out . println ( move ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int [ ] A = { 3 , 2 , 1 , 2 , 1 , 7 } ; System . out . println ( minIncrementForUnique ( A ) ) ; } public static int minIncrementForUnique ( int [ ] A ) { Map < Integer , Integer > count = new HashMap < > ( ) ; List < Integer > taken = new ArrayList < > ( ) ; int ans = 0 ; for ( int x : A ) { count . put ( x , count . getOrDefault ( x , 0 ) + 1 ) ; } for ( int x = 0 ; x < 100000 ; x ++ ) { if ( count . containsKey ( x ) && count . get ( x ) >= 2 ) { for ( int i = 0 ; i < count . get ( x ) - 1 ; i ++ ) { taken . add ( x ) ; } } else if ( ! taken . isEmpty ( ) && ! count . containsKey ( x ) ) { ans += x - taken . remove ( taken . size ( ) - 1 ) ; } } return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; n -= 1 ; if ( n < 0 ) { n = 0 ; } System . out . println ( ( int ) ( Math . pow ( 3 , n ) % 1000003 ) ) ; } }
import java . util . Arrays ; public class Main { static int MOD = ( int ) ( 1e9 + 7 ) ; public static int modulo_13 ( String s , int n ) { int [ ] [ ] dp = new int [ n + 1 ] [ 13 ] ; for ( int i = 0 ; i <= n ; i ++ ) { Arrays . fill ( dp [ i ] , 0 ) ; } dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { int nxt = ( int ) ( s . charAt ( i ) - '0' ) ; if ( s . charAt ( i ) == ' ? ' ) { nxt = j ; } for ( int k = 0 ; k < 13 ; k ++ ) { int rem = ( 10 * k + nxt ) % 13 ; dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] ; dp [ i + 1 ] [ rem ] %= MOD ; } if ( s . charAt ( i ) != ' ? ' ) { break ; } } } return dp [ n ] [ 5 ] ; } public static void main ( String [ ] args ) { String s = " ? 44" ; int n = s . length ( ) ; System . out . println ( modulo_13 ( s , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int a = 10 ; int b = 50 ; int c = 4 ; int d = 6 ; System . out . println ( countNums ( a , b , c , d ) ) ; } public static int countNums ( int a , int b , int c , int d ) { int x = b / c - ( a - 1 ) / c ; int y = b / d - ( a - 1 ) / d ; int k = ( c * d ) / gcd ( c , d ) ; int z = b / k - ( a - 1 ) / k ; return ( b - a + 1 - x - y + z ) ; } public static int gcd ( int a , int b ) { while ( b > 0 ) { int temp = b ; b = a % b ; a = temp ; } return a ; } }
import java . lang . Math ; public class Main { public static void printSubstrings ( int n ) { int s = ( int ) ( Math . log10 ( n ) ) ; int d = ( int ) ( Math . pow ( 10 , s ) ) ; int k = d ; while ( n > 0 ) { while ( d > 0 ) { System . out . println ( ( int ) ( n / d ) ) ; d = ( int ) ( d / 10 ) ; } n = ( int ) ( n % k ) ; k = ( int ) ( k / 10 ) ; d = k ; } } public static void main ( String [ ] args ) { int n = 123 ; printSubstrings ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( NthCharacter ( n ) ) ; } public static char NthCharacter ( int n ) { String s = " " ; int c = 1 ; while ( true ) { if ( c < 10 ) { s += ( char ) ( 48 + c ) ; } else { String s1 = " " ; int dup = c ; while ( dup > 0 ) { s1 += ( char ) ( ( dup % 10 ) + 48 ) ; dup /= 10 ; } s1 = new StringBuilder ( s1 ) . reverse ( ) . toString ( ) ; s += s1 ; } c ++ ; if ( s . length ( ) >= n ) { return s . charAt ( n - 1 ) ; } } } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int y = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; System . out . println ( days ( 1000 , 1 , 1 ) - days ( y , m , d ) ) ; } } public static int days ( int y , int m , int d ) { int cnt = 0 ; for ( int i = 1 ; i < y ; i ++ ) { if ( i % 3 == 0 ) { cnt += 200 ; } else { cnt += 195 ; } } for ( int i = 1 ; i < m ; i ++ ) { if ( y % 3 == 0 ) { cnt += 20 ; } else { if ( i % 2 == 0 ) { cnt += 19 ; } else { cnt += 20 ; } } } cnt += d - 1 ; return cnt ; } }
public class Main { public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( countPrimeFrequent ( s ) ) ; } public static boolean checkPrime ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return true ; } if ( n % 2 == 0 || n % 3 == 0 ) { return false ; } for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; } public static int countPrimeFrequent ( String s ) { int count = 0 ; HashMap < Character , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { mp . putIfAbsent ( s . charAt ( i ) , 0 ) ; mp . put ( s . charAt ( i ) , mp . get ( s . charAt ( i ) ) + 1 ) ; } for ( char i : mp . keySet ( ) ) { if ( checkPrime ( mp . get ( i ) ) ) { count ++ ; } } return count ; } }
import java . util . * ; import java . io . * ; class Main { static class Pair { int first , second ; Pair ( int first , int second ) { this . first = first ; this . second = second ; } } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int i = 0 , j = 0 ; while ( i < a . length && j < b . length ) { if ( a [ i ] <= b [ j ] ) { i ++ ; } j ++ ; } System . out . println ( a . length - i ) ; } }
public class Main { public static void main ( String [ ] args ) { for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( catalan ( i ) + " ▁ " ) ; } } public static int catalan ( int n ) { if ( n == 0 || n == 1 ) { return 1 ; } int [ ] catalan = new int [ n + 1 ] ; catalan [ 0 ] = 1 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) { catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] ; } } return catalan [ n ] ; } }
import eulerlib . Fraction ; import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { Fraction TARGET = new Fraction ( BigInteger . valueOf ( 15499 ) , BigInteger . valueOf ( 94744 ) ) ; BigInteger totient = BigInteger . ONE ; BigInteger denominator = BigInteger . ONE ; int p = 2 ; while ( true ) { totient = totient . multiply ( BigInteger . valueOf ( p - 1 ) ) ; denominator = denominator . multiply ( BigInteger . valueOf ( p ) ) ; while ( true ) { p ++ ; if ( eulerlib . is_prime ( p ) ) { break ; } } if ( new Fraction ( totient , denominator ) . compareTo ( TARGET ) < 0 ) { for ( int i = 1 ; i < p ; i ++ ) { BigInteger numer = BigInteger . valueOf ( i ) . multiply ( totient ) ; BigInteger denom = BigInteger . valueOf ( i ) . multiply ( denominator ) ; if ( new Fraction ( numer , denom . subtract ( BigInteger . ONE ) ) . compareTo ( TARGET ) < 0 ) { return denom . toString ( ) ; } } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String path = scanner . nextLine ( ) ; Set < String > coord = new HashSet < > ( ) ; coord . add ( " ( 0,0 ) " ) ; String temp = " ( 0,0 ) " ; for ( int i = 0 ; i < path . length ( ) ; i ++ ) { char c = path . charAt ( i ) ; if ( c == ' L ' ) { temp = " ( " + temp . charAt ( 1 ) + " , " + ( temp . charAt ( 3 ) - 1 ) + " ) " ; } else if ( c == ' R ' ) { temp = " ( " + temp . charAt ( 1 ) + " , " + ( temp . charAt ( 3 ) + 1 ) + " ) " ; } else if ( c == ' U ' ) { temp = " ( " + ( temp . charAt ( 1 ) - 1 ) + " , " + temp . charAt ( 3 ) + " ) " ; } else { temp = " ( " + ( temp . charAt ( 1 ) + 1 ) + " , " + temp . charAt ( 3 ) + " ) " ; } if ( coord . contains ( temp ) ) { System . out . println ( " BUG " ) ; System . exit ( 0 ) ; } coord . add ( temp ) ; } coord . remove ( " ( 0,0 ) " ) ; Queue < String > que = new LinkedList < > ( ) ; que . add ( " ( 0,0 ) " ) ; while ( ! que . isEmpty ( ) ) { if ( que . size ( ) > 1 ) { System . out . println ( " BUG " ) ; System . exit ( 0 ) ; } String [ ] current = que . poll ( ) . split ( " , " ) ; int x = Integer . parseInt ( current [ 0 ] . substring ( 1 ) ) ; int y = Integer . parseInt ( current [ 1 ] . substring ( 0 , 1 ) ) ; if ( coord . contains ( " ( " + ( x + 1 ) + " , " + y + " ) " ) ) { coord . remove ( " ( " + ( x + 1 ) + " , " + y + " ) " ) ; que . add ( " ( " + ( x + 1 ) + " , " + y + " ) " ) ; } if ( coord . contains ( " ( " + ( x - 1 ) + " , " + y + " ) " ) ) { coord . remove ( " ( " + ( x - 1 ) + " , " + y + " ) " ) ; que . add ( " ( " + ( x - 1 ) + " , " + y + " ) " ) ; } if ( coord . contains ( " ( " + x + " , " + ( y + 1 ) + " ) " ) ) { coord . remove ( " ( " + x + " , " + ( y + 1 ) + " ) " ) ; que . add ( " ( " + x + " , " +
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 13 ; if ( isPossible ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } if ( n == 2 ) { return true ; } if ( n % 2 == 0 ) { return false ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { if ( n % i == 0 ) { return false ; } } return true ; } public static boolean isPossible ( int n ) { if ( isPrime ( n ) && isPrime ( n - 2 ) ) { return true ; } else { return false ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Number ▁ of ▁ Dyck ▁ Paths ▁ is ▁ " + ( int ) countDyckPaths ( n ) ) ; } public static double countDyckPaths ( int n ) { double res = 1 ; for ( int i = 0 ; i < n ; i ++ ) { res *= ( 2 * n - i ) ; res /= ( i + 1 ) ; } return res / ( n + 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; if ( n <= 30 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; if ( n == 40 || n == 36 || n == 44 ) { System . out . println ( "6 ▁ 10 ▁ 15 ▁ " + ( n - 31 ) ) ; } else { System . out . println ( "6 ▁ 10 ▁ 14 ▁ " + ( n - 30 ) ) ; } } } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String input1 = scanner . nextLine ( ) ; String input2 = scanner . nextLine ( ) ; System . out . println ( solve ( input1 , input2 ) ) ; } public static int solve ( String input1 , String input2 ) { String [ ] arr = input2 . split ( " ▁ " ) ; int [ ] a = Arrays . stream ( arr ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int result = gcd ( a ) ; return result ; } public static int gcd ( int [ ] numbers ) { int result = numbers [ 0 ] ; for ( int i = 1 ; i < numbers . length ; i ++ ) { result = gcd ( result , numbers [ i ] ) ; } return result ; } public static int gcd ( int a , int b ) { while ( b > 0 ) { int temp = b ; b = a % b ; a = temp ; } return a ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { a [ i ] = Integer . parseInt ( input [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < 14 ; i ++ ) { int [ ] x = a . clone ( ) ; int n = a [ i ] / 14 ; int r = a [ i ] % 14 ; x [ i ] = 0 ; for ( int j = 0 ; j < 14 ; j ++ ) { x [ j ] += n ; } if ( r >= 13 - i ) { for ( int j = i + 1 ; j < 14 ; j ++ ) { x [ j ] += 1 ; } for ( int j = 0 ; j < r - 13 + i ; j ++ ) { x [ j ] += 1 ; } } else { for ( int j = i + 1 ; j < i + 1 + r ; j ++ ) { x [ j ] += 1 ; } } int summ = 0 ; for ( int j : x ) { if ( j % 2 == 0 ) { summ += j ; } } ans = Math . max ( ans , summ ) ; } System . out . println ( ans ) ; } }
public class Main { public static double pentdiagonal ( int a ) { if ( a < 0 ) { return - 1 ; } double d = 1.22 * a ; return d ; } public static void main ( String [ ] args ) { int a = 6 ; System . out . println ( pentdiagonal ( a ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 9 ; System . out . println ( hexDiagonal ( a ) ) ; } public static double hexDiagonal ( int a ) { if ( a < 0 ) { return - 1 ; } double d = 1.73 * a ; return d ; } }
public class Main { public static void main ( String [ ] args ) { char [ ] st = " helloABworldABGfG " . toCharArray ( ) ; translate ( st ) ; System . out . println ( " The ▁ modified ▁ string ▁ is ▁ : " ) ; System . out . println ( String . valueOf ( st ) ) ; } public static void translate ( char [ ] st ) { int l = st . length ; if ( l < 2 ) { return ; } int i = 0 ; int j = 0 ; while ( j < l - 1 ) { if ( st [ j ] == ' A ' && st [ j + 1 ] == ' B ' ) { j += 2 ; st [ i ] = ' C ' ; i ++ ; continue ; } st [ i ] = st [ j ] ; i ++ ; j ++ ; } if ( j == l - 1 ) { st [ i ] = st [ j ] ; i ++ ; } st [ i ] = ' ▁ ' ; st [ l - 1 ] = ' ▁ ' ; } }
public class Main { public static void main ( String [ ] args ) { char [ ] st = " helloABworldABGfG " . toCharArray ( ) ; translate ( st ) ; System . out . println ( " The ▁ modified ▁ string ▁ is ▁ : " ) ; System . out . println ( String . valueOf ( st ) ) ; } public static void translate ( char [ ] st ) { for ( int i = 1 ; i < st . length ; i ++ ) { if ( st [ i - 1 ] == ' A ' && st [ i ] == ' B ' ) { st [ i - 1 ] = ' C ' ; for ( int j = i ; j < st . length - 1 ; j ++ ) { st [ j ] = st [ j + 1 ] ; } st [ st . length - 1 ] = ' ▁ ' ; } } } }
import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { final int TARGET = 2000 ; int count = 2 ; int ring = 2 ; while ( true ) { if ( IntStream . of ( ring * 6 - 1 , ring * 6 + 1 , ring * 12 + 5 ) . allMatch ( Main :: isPrime ) ) { count ++ ; if ( count == TARGET ) { return String . valueOf ( ring * ( ring - 1 ) * 3 + 2 ) ; } } if ( IntStream . of ( ring * 6 - 1 , ring * 6 + 5 , ring * 12 - 7 ) . allMatch ( Main :: isPrime ) ) { count ++ ; if ( count == TARGET ) { return String . valueOf ( ring * ( ring + 1 ) * 3 + 1 ) ; } } ring ++ ; } } public static boolean isPrime ( int n ) { if ( n <= 1 ) { return false ; } for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { return false ; } } return true ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int x = Math . min ( n , m ) ; ArrayList < Pair > li = new ArrayList < > ( ) ; for ( int i = 0 ; i <= x ; i ++ ) { int x1 = ( int ) Math . pow ( i , 2 ) ; for ( int j = 0 ; j <= x ; j ++ ) { int y1 = ( int ) Math . pow ( j , 2 ) ; if ( x1 + j == n && i + y1 == m ) { li . add ( new Pair ( i , j ) ) ; } } } System . out . println ( li . size ( ) ) ; } static class Pair { int first ; int second ; public Pair ( int first , int second ) { this . first = first ; this . second = second ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 2346 ; digits ( n ) ; } public static void digits ( int n ) { int largest = 0 ; int smallest = 9 ; while ( n != 0 ) { int r = n % 10 ; largest = Math . max ( r , largest ) ; smallest = Math . min ( r , smallest ) ; n = n / 10 ; } System . out . println ( largest + " ▁ " + smallest ) ; } }
public class Main { public static void solve ( int d1 , int d2 , int d3 ) { int maxx = Math . max ( d1 , Math . max ( d2 , d3 ) ) ; int sum = ( d1 + d2 + d3 ) ; if ( 2 * maxx > sum || sum % 2 == 1 ) { System . out . println ( " - 1" ) ; return ; } int x1 = 0 ; int y1 = 0 ; int x2 = d1 ; int y2 = 0 ; int x3 = ( d1 + d2 - d3 ) / 2 ; int y3 = ( d2 + d3 - d1 ) / 2 ; System . out . println ( " ( " + x1 + " , " + y1 + " ) , ▁ ( " + x2 + " , " + y2 + " ) ▁ and ▁ ( " + x3 + " , " + y3 + " ) " ) ; } public static void main ( String [ ] args ) { int d1 = 3 ; int d2 = 4 ; int d3 = 5 ; solve ( d1 , d2 , d3 ) ; } }
public class Main { static final int MAX_CHAR = 26 ; public static void main ( String [ ] args ) { int n = 6 , k = 3 ; String string = " aacaab " ; if ( distributingBalls ( k , n , string ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static boolean distributingBalls ( int k , int n , String string ) { int [ ] a = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ string . charAt ( i ) - ' a ' ] += 1 ; } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( a [ i ] > k ) { return false ; } } return true ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < range ; j ++ ) { int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String S = scanner . nextLine ( ) ; int ctr = 0 ; for ( int i = 0 ; i < S . length ( ) ; i ++ ) { char c = S . charAt ( i ) ; if ( c == ' T ' ) { ctr ++ ; } else { ctr -- ; } if ( ctr > N / 3 || ctr < 0 ) { break ; } } System . out . println ( ctr == N / 3 ? " YES " : " NO " ) ; } } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] e = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( e ) ; boolean frag = true ; for ( int i = 1 ; i < 4 ; i ++ ) { if ( e [ 0 ] != e [ i ] ) { frag = false ; break ; } } for ( int i = 5 ; i < 8 ; i ++ ) { if ( e [ 4 ] != e [ i ] ) { frag = false ; break ; } } for ( int i = 9 ; i < 12 ; i ++ ) { if ( e [ 8 ] != e [ i ] ) { frag = false ; break ; } } System . out . println ( frag ? " yes " : " no " ) ; } }
import java . util . Arrays ; public class Main { static int R = 4 ; static int C = 4 ; static int first ( int [ ] arr , int low , int high ) { if ( high >= low ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 || arr [ mid - 1 ] == 0 ) && arr [ mid ] == 1 ) { return mid ; } else if ( arr [ mid ] == 0 ) { return first ( arr , mid + 1 , high ) ; } else { return first ( arr , low , mid - 1 ) ; } } return - 1 ; } static void rowWith0s ( int [ ] [ ] mat ) { int row_index = 0 ; int max = Integer . MIN_VALUE ; int min_row_index = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < R ; i ++ ) { int index = first ( mat [ i ] , 0 , C - 1 ) ; int cntZeroes ; if ( index == - 1 ) { cntZeroes = C ; } else { cntZeroes = index ; } if ( max < cntZeroes ) { max = cntZeroes ; row_index = i ; } if ( min > cntZeroes ) { min = cntZeroes ; min_row_index = i ; } } System . out . println ( " Row ▁ with ▁ min ▁ 0s : ▁ " + ( min_row_index + 1 ) ) ; System . out . println ( " Row ▁ with ▁ max ▁ 0s : ▁ " + ( row_index + 1 ) ) ; } public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 0 , 0 , 0 , 1 } , { 0 , 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } , { 0 , 0 , 0 , 0 } } ; rowWith0s ( mat ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 10 ; int k = 2 ; if ( bitAtGivenPosSetOrUnset ( n , k ) == 1 ) { System . out . println ( " Set " ) ; } else { System . out . println ( " Unset " ) ; } } public static int bitAtGivenPosSetOrUnset ( int n , int k ) { int new_num = n >> ( k - 1 ) ; return ( new_num & 1 ) ; } }
``` java import java . util . Scanner ; import java . util . List ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String input = scanner . nextLine ( ) ; List < Character > s = new ArrayList < > ( ) ; for ( char c : input . toCharArray ( ) ) { s . add ( c ) ; } if ( n % 4 == 0 ) { int k = n / 4 ; int a = Collections . frequency ( s , ' A ' ) ; int b = Collections . frequency ( s , ' G ' ) ; int c = Collections . frequency ( s , ' C ' ) ; int d = Collections . frequency ( s , ' T ' ) ; if ( a > k || b > k || c > k || d > k ) { System . out . println ( " = = = " ) ; } else { for ( int i = 0 ; i < k - a ; i ++ ) { s . set ( s . indexOf ( ' ? ' ) , ' A ' ) ; } for ( int j = 0 ; j < k - b ; j ++ ) { s . set ( s . indexOf ( ' ? ' ) , ' G ' ) ; } for ( int m = 0 ; m < k - c ; m ++ ) { s . set ( s . indexOf ( ' ? ' ) , ' C ' ) ; } for ( int t = 0 ; t < k - d ; t ++ ) { s . set ( s . indexOf ( ' ? ' ) , ' T ' ) ; } for ( Character ch : s ) { System . out . print ( ch ) ; } System . out . println ( ) ; } } else { System . out . println ( " = = = " ) ; } } } ```
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int [ ] [ ] mv = { { - 1 , 0 } , { 0 , 1 } , { 1 , 0 } , { 0 , - 1 } } ; Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; if ( n == 0 ) break ; String [ ] input = scanner . next ( ) . split ( " ▁ " ) ; char t1 = input [ 0 ] . charAt ( 0 ) ; char t2 = input [ 1 ] . charAt ( 0 ) ; char t3 = input [ 2 ] . charAt ( 0 ) ; int s = t1 - ' A ' ; int t = t2 - ' A ' ; int b = t3 - ' A ' ; double [ ] [ ] [ ] f = new double [ 17 ] [ 3 ] [ 3 ] ; f [ 0 ] [ s / 3 ] [ s % 3 ] = 1 ; for ( int j = 1 ; j <= n ; j ++ ) { for ( int r = 0 ; r < 3 ; r ++ ) { for ( int c = 0 ; c < 3 ; c ++ ) { for ( int i = 0 ; i < 4 ; i ++ ) { int r2 = r + mv [ i ] [ 0 ] ; int c2 = c + mv [ i ] [ 1 ] ; if ( r2 < 0 || r2 >= 3 || c2 < 0 || c2 >= 3 || 3 * r2 + c2 == b ) { r2 = r ; c2 = c ; } f [ j ] [ r2 ] [ c2 ] += f [ j - 1 ] [ r ] [ c ] / 4 ; } } } } System . out . println ( f [ n ] [ t / 3 ] [ t % 3 ] ) ; } } } ```
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int l = Integer . parseInt ( input [ 0 ] ) ; int r = Integer . parseInt ( input [ 1 ] ) ; Set < Integer > result = new HashSet < > ( ) ; for ( int x = 0 ; x < 31 ; x ++ ) { for ( int y = 0 ; y < 20 ; y ++ ) { int v = ( int ) ( Math . pow ( 2 , x ) * Math . pow ( 3 , y ) ) ; if ( l <= v && v <= r ) { result . add ( v ) ; } } } System . out . println ( result . size ( ) ) ; } }
Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int K = scanner . nextInt ( ) ; int L = 1 ; for ( int i = 0 ; i < N ; i ++ ) { L += Math . min ( L , K ) ; } System . out . println ( L ) ;
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 1 , 3 , 2 } ; int [ ] b = { 3 , 1 , 2 } ; int n = a . length ; int m = b . length ; if ( arePermutations ( a , b , n , m ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean arePermutations ( int [ ] a , int [ ] b , int n , int m ) { int sum1 = 0 , sum2 = 0 , mul1 = 1 , mul2 = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; mul1 *= a [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { sum2 += b [ i ] ; mul2 *= b [ i ] ; } return ( sum1 == sum2 ) && ( mul1 == mul2 ) ; } }
public class Main { static final int MAX_CHAR = 26 ; public static void findAndPrintUncommonChars ( String str1 , String str2 ) { int [ ] present = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { present [ i ] = 0 ; } int l1 = str1 . length ( ) ; int l2 = str2 . length ( ) ; for ( int i = 0 ; i < l1 ; i ++ ) { present [ str1 . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < l2 ; i ++ ) { if ( present [ str2 . charAt ( i ) - ' a ' ] == 1 || present [ str2 . charAt ( i ) - ' a ' ] == - 1 ) { present [ str2 . charAt ( i ) - ' a ' ] = - 1 ; } else { present [ str2 . charAt ( i ) - ' a ' ] = 2 ; } } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( present [ i ] == 1 || present [ i ] == 2 ) { System . out . print ( ( char ) ( i + ' a ' ) + " ▁ " ) ; } } } public static void main ( String [ ] args ) { String str1 = " characters " ; String str2 = " alphabets " ; findAndPrintUncommonChars ( str1 , str2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int x = 1 ; int y = 1 ; int circle_x = 0 ; int circle_y = 1 ; int rad = 2 ; if ( isInside ( circle_x , circle_y , rad , x , y ) ) { System . out . println ( " Inside " ) ; } else { System . out . println ( " Outside " ) ; } } public static boolean isInside ( int circle_x , int circle_y , int rad , int x , int y ) { if ( ( Math . pow ( ( x - circle_x ) , 2 ) + Math . pow ( ( y - circle_y ) , 2 ) <= Math . pow ( rad , 2 ) ) ) { return true ; } else { return false ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 5 , 5 , 5 , 6 } ; int n = arr . length ; int x = 3 ; System . out . println ( minSum ( arr , n , x ) ) ; } public static int minSum ( int [ ] arr , int n , int x ) { int sum = 0 ; int largestDivisible = - 1 ; int minimum = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( arr [ i ] % x == 0 && largestDivisible < arr [ i ] ) { largestDivisible = arr [ i ] ; } if ( arr [ i ] < minimum ) { minimum = arr [ i ] ; } } if ( largestDivisible == - 1 ) { return sum ; } int sumAfterOperation = ( sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible / x ) ) ; return Math . min ( sum , sumAfterOperation ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( nthTerm ( n ) ) ; n = 25 ; System . out . println ( nthTerm ( n ) ) ; n = 25000000 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; } public static int nthTerm ( int n ) { int nth = 0 ; if ( n % 2 == 0 ) { nth = 2 * ( ( n * n ) - n ) ; } else { nth = ( 2 * n * n ) - n ; } return nth ; } }
public class Node { int value ; Node next ; Node prev ; public Node ( int value ) { this . value = value ; this . next = null ; this . prev = null ; } } public class Main { public static void main ( String [ ] args ) { run ( ) ; } public static void run ( ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; Node tail = new Node ( 0 ) ; Node node = tail ; for ( int i = 0 ; i < n ; i ++ ) { String command = scanner . next ( ) ; if ( command . startsWith ( "0" ) ) { int value = Integer . parseInt ( command . substring ( 2 ) ) ; Node nn = new Node ( value ) ; nn . prev = node . prev ; nn . next = node ; if ( node . prev != null ) { node . prev . next = nn ; } node . prev = nn ; node = node . prev ; } else if ( command . startsWith ( "1" ) ) { int i = Integer . parseInt ( command . substring ( 2 ) ) ; if ( i > 0 ) { for ( int j = 0 ; j < i ; j ++ ) { node = node . next ; } } else { for ( int j = 0 ; j < - i ; j ++ ) { node = node . prev ; } } } else if ( command . startsWith ( "2" ) ) { Node p = node . prev ; Node nNode = node . next ; node . prev = null ; node . next = null ; node = nNode ; if ( p == null ) { nNode . prev = null ; } else { nNode . prev = p ; p . next = nNode ; } } else { throw new IllegalArgumentException ( " invalid ▁ command " ) ; } } Stack < Integer > stack = new Stack < > ( ) ; node = tail . prev ; while ( node != null ) { stack . push ( node . value ) ; node = node . prev ; } while ( ! stack . isEmpty ( ) ) { System . out . println ( stack . pop ( ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int k = Integer . parseInt ( input [ 1 ] ) ; String s = scanner . nextLine ( ) ; int common = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { String a = s . substring ( n - 1 - i ) ; String b = s . substring ( 0 , i + 1 ) ; if ( a . equals ( b ) ) { common = i + 1 ; continue ; } } int ans = ( n ) + ( k - 1 ) * ( n - common ) ; String finalStr = s ; for ( int i = 0 ; i < k - 1 ; i ++ ) { finalStr += ( s . substring ( common ) ) ; } System . out . println ( finalStr ) ; } }
public class newNode { int data ; newNode left , right ; public newNode ( int data ) { this . data = data ; this . left = null ; this . right = null ; } } public class BinaryTree { public static void prInorder ( newNode node ) { if ( node == null ) { return ; } prInorder ( node . left ) ; System . out . print ( node . data + " ▁ " ) ; prInorder ( node . right ) ; } public static newNode constructBinaryTreeUtil ( int [ ] pre , int [ ] preM , int preIndex , int l , int h , int size ) { if ( preIndex >= size || l > h ) { return null ; } newNode root = new newNode ( pre [ preIndex ] ) ; preIndex ++ ; if ( l == h ) { return root ; } int i ; for ( i = l ; i <= h ; i ++ ) { if ( pre [ preIndex ] == preM [ i ] ) { break ; } } if ( i <= h ) { root . left = constructBinaryTreeUtil ( pre , preM , preIndex , i , h , size ) ; root . right = constructBinaryTreeUtil ( pre , preM , preIndex , l + 1 , i - 1 , size ) ; } return root ; } public static void constructBinaryTree ( newNode root , int [ ] pre , int [ ] preMirror , int size ) { int preIndex = 0 ; int preMIndex = 0 ; root = constructBinaryTreeUtil ( pre , preMirror , preIndex , 0 , size - 1 , size ) ; prInorder ( root ) ; } public static void main ( String [ ] args ) { int [ ] preOrder = { 1 , 2 , 4 , 5 , 3 , 6 , 7 } ; int [ ] preOrderMirror = { 1 , 3 , 7 , 6 , 2 , 5 , 4 } ; int size = 7 ; newNode root = new newNode ( 0 ) ; constructBinaryTree ( root , preOrder , preOrderMirror , size ) ; } }
public class Main { static final int no_of_chars = 256 ; public static void main ( String [ ] args ) { String string = " this ▁ is ▁ a ▁ test ▁ string " ; String pat = " tist " ; System . out . println ( " Smallest ▁ window ▁ is ▁ : ▁ " ) ; System . out . println ( findSubString ( string , pat ) ) ; } static String findSubString ( String string , String pat ) { int len1 = string . length ( ) ; int len2 = pat . length ( ) ; if ( len1 < len2 ) { System . out . println ( " No ▁ such ▁ window ▁ exists " ) ; return " " ; } int [ ] hash_pat = new int [ no_of_chars ] ; int [ ] hash_str = new int [ no_of_chars ] ; for ( int i = 0 ; i < len2 ; i ++ ) { hash_pat [ pat . charAt ( i ) ] ++ ; } int start = 0 , start_index = - 1 , min_len = Integer . MAX_VALUE ; int count = 0 ; for ( int j = 0 ; j < len1 ; j ++ ) { hash_str [ string . charAt ( j ) ] ++ ; if ( hash_pat [ string . charAt ( j ) ] != 0 && hash_str [ string . charAt ( j ) ] <= hash_pat [ string . charAt ( j ) ] ) { count ++ ; } if ( count == len2 ) { while ( hash_str [ string . charAt ( start ) ] > hash_pat [ string . charAt ( start ) ] || hash_pat [ string . charAt ( start ) ] == 0 ) { if ( hash_str [ string . charAt ( start ) ] > hash_pat [ string . charAt ( start ) ] ) { hash_str [ string . charAt ( start ) ] -- ; } start ++ ; } int len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start_index = start ; } } } if ( start_index == - 1 ) { System . out . println ( " No ▁ such ▁ window ▁ exists " ) ; return " " ; } return string . substring ( start_index , start_index + min_len ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { try { double x1 = scanner . nextDouble ( ) ; double y1 = scanner . nextDouble ( ) ; double x2 = scanner . nextDouble ( ) ; double y2 = scanner . nextDouble ( ) ; double x3 = scanner . nextDouble ( ) ; double y3 = scanner . nextDouble ( ) ; double x = scanner . nextDouble ( ) ; double y = scanner . nextDouble ( ) ; double abc = tri ( x1 , y1 , x2 , y2 , x3 , y3 ) ; double abp = tri ( x1 , y1 , x2 , y2 , x , y ) ; double acp = tri ( x1 , y1 , x3 , y3 , x , y ) ; double bcp = tri ( x2 , y2 , x3 , y3 , x , y ) ; int xVal = ( int ) ( abc * Math . pow ( 10 , 5 ) ) ; int yVal = ( int ) ( ( abp + acp + bcp ) * Math . pow ( 10 , 5 ) ) ; System . out . println ( xVal >= yVal ? " YES " : " NO " ) ; } catch ( Exception e ) { break ; } } } public static double tri ( double x1 , double y1 , double x2 , double y2 , double x3 , double y3 ) { return Math . abs ( ( x2 - x1 ) * ( y3 - y1 ) - ( y2 - y1 ) * ( x3 - x1 ) ) / 2 ; } }
import java . util . Scanner ; import java . util . HashSet ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; String [ ] x = new String [ n + m ] ; for ( int i = 0 ; i < n + m ; i ++ ) { x [ i ] = scanner . nextLine ( ) ; } if ( n > m ) { System . out . println ( " YES " ) ; } else if ( n < m ) { System . out . println ( " NO " ) ; } else if ( n == m ) { HashSet < String > set = new HashSet < > ( ) ; for ( String s : x ) { set . add ( s ) ; } if ( set . size ( ) % 2 != 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class Main { static final int MAX = 100005 ; public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( find_Sum ( n ) ) ; } public static List < Integer > addPrimes ( ) { int n = MAX ; boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p <= n ; p ++ ) { if ( p * p > n ) { break ; } if ( prime [ p ] ) { for ( int i = 2 * p ; i <= n ; i += p ) { prime [ i ] = false ; } } } List < Integer > ans = new ArrayList < > ( ) ; for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] ) { ans . add ( p ) ; } } return ans ; } public static boolean is_prime ( int n ) { return n == 3 || n == 5 || n == 7 ; } public static int find_Sum ( int n ) { int Sum = 0 ; List < Integer > v = addPrimes ( ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int flag = 1 ; int a = v . get ( i ) ; while ( a != 0 ) { int d = a % 10 ; a = a / 10 ; if ( is_prime ( d ) ) { flag = 0 ; break ; } } if ( flag == 1 ) { n -= 1 ; Sum = Sum + v . get ( i ) ; } if ( n == 0 ) { break ; } } return Sum ; } }
int [ ] a = new int [ 4 ] ; int [ ] b = new int [ 2 ] ; Scanner scanner = new Scanner ( System . in ) ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } Arrays . sort ( a ) ; a = Arrays . copyOfRange ( a , 1 , a . length ) ; for ( int i = 0 ; i < 2 ; i ++ ) { b [ i ] = scanner . nextInt ( ) ; } Arrays . sort ( b ) ; b = Arrays . copyOfRange ( b , 1 , b . length ) ; System . out . println ( Arrays . stream ( a ) . sum ( ) + Arrays . stream ( b ) . sum ( ) ) ;
public class Main { public static int result ( int n , int [ ] a ) { int valid_min = 15 ; if ( a [ 0 ] > valid_min ) { return valid_min ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= valid_min ) { valid_min = 15 + a [ i ] ; } } return ( valid_min >= 90 ) ? 90 : valid_min ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } System . out . println ( result ( n , a ) ) ; } }
public class Main { static int [ ] [ ] [ ] [ ] dp ; static List < Integer > v ; public static int memo ( int index , int evenSum , int oddSum , int tight ) { if ( index == v . size ( ) ) { if ( evenSum > oddSum ) { return 1 ; } else { return 0 ; } } if ( dp [ index ] [ evenSum ] [ oddSum ] [ tight ] != - 1 ) { return dp [ index ] [ evenSum ] [ oddSum ] [ tight ] ; } int limit = tight == 1 ? v . get ( index ) : 9 ; int ans = 0 ; for ( int d = 0 ; d <= limit ; d ++ ) { int currTight = 0 ; if ( d == v . get ( index ) ) { currTight = tight ; } if ( d % 2 != 0 ) { ans += memo ( index + 1 , evenSum , oddSum + d , currTight ) ; } else { ans += memo ( index + 1 , evenSum + d , oddSum , currTight ) ; } } dp [ index ] [ evenSum ] [ oddSum ] [ tight ] = ans ; return ans ; } public static int countNum ( int n ) { v . clear ( ) ; while ( n > 0 ) { v . add ( n % 10 ) ; n /= 10 ; } Collections . reverse ( v ) ; dp = new int [ 18 ] [ 180 ] [ 180 ] [ 2 ] ; for ( int i = 0 ; i < 18 ; i ++ ) { for ( int j = 0 ; j < 180 ; j ++ ) { for ( int k = 0 ; k < 180 ; k ++ ) { for ( int l = 0 ; l < 2 ; l ++ ) { dp [ i ] [ j ] [ k ] [ l ] = - 1 ; } } } } return memo ( 0 , 0 , 0 , 1 ) ; } public static void main ( String [ ] args ) { dp = new int [ 0 ] [ 0 ] [ 0 ] [ 0 ] ; v = new ArrayList < > ( ) ; int L = 2 ; int R = 10 ; System . out . println ( countNum ( R ) - countNum ( L - 1 ) ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] [ ] lst = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 0 ; j < 3 ; j ++ ) { lst [ i ] [ j ] = Integer . parseInt ( input [ j ] ) ; } } int total = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { total += lst [ i ] [ j ] ; } } total = total / 3 ; boolean flag = true ; for ( int i = 0 ; i < 3 ; i ++ ) { int a = lst [ 0 ] [ i % 3 ] + lst [ 1 ] [ ( i + 1 ) % 3 ] + lst [ 2 ] [ ( i + 2 ) % 3 ] ; if ( a != total ) { flag = false ; } } int a = lst [ 0 ] [ 0 ] + lst [ 1 ] [ 2 ] + lst [ 2 ] [ 1 ] ; if ( a != total ) { flag = false ; } a = lst [ 1 ] [ 1 ] + lst [ 0 ] [ 2 ] + lst [ 2 ] [ 0 ] ; if ( a != total ) { flag = false ; } a = lst [ 2 ] [ 2 ] + lst [ 1 ] [ 0 ] + lst [ 0 ] [ 1 ] ; if ( a != total ) { flag = false ; } if ( flag ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } ```
``` java import java . util . Scanner ; public class Main { public static void solve ( ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int k = 0 ; k < t ; k ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] diffStr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] diff = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { diff [ i ] = Integer . parseInt ( diffStr [ i ] ) ; } int [ ] arr = new int [ n ] ; arr [ 0 ] = diff [ 0 ] ; boolean flag = false ; for ( int i = 1 ; i < n ; i ++ ) { int x = arr [ i - 1 ] + diff [ i ] ; int y = arr [ i - 1 ] - diff [ i ] ; if ( y >= 0 && x != y ) { flag = true ; break ; } else { arr [ i ] = x ; } } if ( flag ) { System . out . println ( - 1 ) ; } else { for ( int i : arr ) { System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; } } } public static void main ( String [ ] args ) { solve ( ) ; } } ```
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { return "0" ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int n = arr . length ; int result = search ( arr , n , x ) ; if ( result == - 1 ) { System . out . println ( " Element ▁ is ▁ not ▁ present ▁ in ▁ array " ) ; } else { System . out . println ( " Element ▁ is ▁ present ▁ at ▁ index ▁ " + result ) ; } } public static int search ( int [ ] arr , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { return i ; } } return - 1 ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int C = scanner . nextInt ( ) ; int [ ] [ ] XV = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { XV [ i ] [ 0 ] = scanner . nextInt ( ) ; XV [ i ] [ 1 ] = scanner . nextInt ( ) ; } int [ ] RIGHTSUM = new int [ N + 1 ] ; RIGHTSUM [ 0 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { RIGHTSUM [ i + 1 ] = RIGHTSUM [ i ] + XV [ i ] [ 1 ] ; } int [ ] LEFTSUM = new int [ N + 1 ] ; LEFTSUM [ 0 ] = 0 ; for ( int i = 0 ; i < N ; i ++ ) { LEFTSUM [ i + 1 ] = LEFTSUM [ i ] + XV [ N - i - 1 ] [ 1 ] ; } int [ ] RIGHT = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { RIGHT [ i ] = RIGHTSUM [ i + 1 ] - XV [ i ] [ 0 ] ; } int [ ] LEFT = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { LEFT [ i ] = LEFTSUM [ i + 1 ] - ( C - XV [ N - i - 1 ] [ 0 ] ) ; } int [ ] RIGHTMAX = new int [ N ] ; RIGHTMAX [ 0 ] = RIGHT [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { RIGHTMAX [ i ] = Math . max ( RIGHTMAX [ i - 1 ] , RIGHT [ i ] ) ; } int [ ] LEFTMAX = new int [ N ] ; LEFTMAX [ 0 ] = LEFT [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) { LEFTMAX [ i ] = Math . max ( LEFTMAX [ i - 1 ] , LEFT [ i ] ) ; } int ANS = Math . max ( Math . max ( RIGHT [ N - 1 ] , LEFT [ N - 1 ] ) , 0 ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( ANS < ( RIGHTSUM [ i + 1 ] - XV [ i ] [ 0 ] * 2 ) + LEFTMAX [ N - i - 2 ] ) {
public class Main { public static void main ( String [ ] args ) { int n = 42 ; int l = 2 ; int r = 5 ; System . out . println ( unsetBitsInGivenRange ( n , l , r ) ) ; } public static int toggleBitsFromLToR ( int n , int l , int r ) { int num = ( ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ) ; return ( n ^ num ) ; } public static int unsetBitsInGivenRange ( int n , int l , int r ) { int num = ( 1 << ( 4 * 8 - 1 ) ) - 1 ; num = toggleBitsFromLToR ( num , l , r ) ; return ( n & num ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 0 , - 2 , - 1 , - 3 , 4 } ; int n = a . length ; System . out . println ( minStep ( a , n ) ) ; } public static int minStep ( int [ ] a , int n ) { int positive = 0 ; int negative = 0 ; int zero = 0 ; int step = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { zero ++ ; } else if ( a [ i ] < 0 ) { negative ++ ; step = step + ( - 1 - a [ i ] ) ; } else { positive ++ ; step = step + ( a [ i ] - 1 ) ; } } if ( negative % 2 == 0 ) { step = step + zero ; } else { if ( zero > 0 ) { step = step + zero ; } else { step = step + 2 ; } } return step ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; String s = sc . next ( ) ; System . out . println ( fn ( s , n , a , b ) ) ; } public static int fn ( String s , int n , int a , int b ) { if ( s . charAt ( a - 1 ) == s . charAt ( b - 1 ) ) { return 0 ; } else { return 1 ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int iterations = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < iterations ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] v = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { v [ j ] = Integer . parseInt ( input [ j ] ) ; } Arrays . sort ( v ) ; System . out . println ( v [ n - 1 ] + v [ n - 2 ] ) ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int x1 = 1 ; int y1 = 1 ; int x2 = 4 ; int y2 = 3 ; noOfSquares ( x1 , y1 , x2 , y2 ) ; } public static void noOfSquares ( int x1 , int y1 , int x2 , int y2 ) { int dx = Math . abs ( x2 - x1 ) ; int dy = Math . abs ( y2 - y1 ) ; int ans = dx + dy - gcd ( dx , dy ) ; System . out . println ( ans ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
public class Main { public static void main ( String [ ] args ) { String s = "1337" ; int [ ] a = { 0 , 1 , 2 , 5 , 4 , 6 , 6 , 3 , 1 , 9 } ; System . out . println ( getMaximum ( s , a ) ) ; } public static String getMaximum ( String s , int [ ] a ) { char [ ] sArr = s . toCharArray ( ) ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( sArr [ i ] - '0' < a [ sArr [ i ] - '0' ] ) { int j = i ; while ( j < n && sArr [ j ] - '0' <= a [ sArr [ j ] - '0' ] ) { sArr [ j ] = ( char ) ( a [ sArr [ j ] - '0' ] + '0' ) ; j ++ ; } return new String ( sArr ) ; } } return new String ( sArr ) ; } }
public class Main { static final int MAX_DIGITS = 20 ; public static void main ( String [ ] args ) { int n = 97 ; if ( isPalindrome ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isOctal ( int n ) { while ( n != 0 ) { if ( n % 10 >= 8 ) { return false ; } else { n = n / 10 ; } } return true ; } public static boolean isPalindrome ( int n ) { int divide = isOctal ( n ) ? 8 : 10 ; List < Integer > octal = new ArrayList < > ( ) ; while ( n != 0 ) { octal . add ( n % divide ) ; n = n / divide ; } int j = octal . size ( ) - 1 ; int k = 0 ; while ( k <= j ) { if ( octal . get ( j ) != octal . get ( k ) ) { return false ; } j -- ; k ++ ; } return true ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String num = input . nextLine ( ) ; int [ ] list_is = new int [ num . length ( ) ] ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { list_is [ i ] = Integer . parseInt ( String . valueOf ( num . charAt ( i ) ) ) ; } int [ ] list_is1 = new int [ num . length ( ) / 2 ] ; int [ ] list_is2 = new int [ num . length ( ) - num . length ( ) / 2 ] ; System . arraycopy ( list_is , 0 , list_is1 , 0 , num . length ( ) / 2 ) ; System . arraycopy ( list_is , num . length ( ) / 2 , list_is2 , 0 , num . length ( ) - num . length ( ) / 2 ) ; int sum1 = 0 ; int sum2 = 0 ; for ( int i : list_is1 ) { sum1 += i ; } for ( int i : list_is2 ) { sum2 += i ; } boolean condition = false ; for ( int i : list_is ) { if ( i == 4 || i == 7 ) { condition = true ; continue ; } else { condition = false ; break ; } } if ( condition ) { if ( sum1 == sum2 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { - 10 , - 5 , 2 , 2 , 2 , 3 , 4 , 7 , 9 , 12 , 13 } ; int n = arr . length ; System . out . println ( " Fixed ▁ Point ▁ is ▁ " + binarySearch ( arr , 0 , n - 1 ) ) ; int [ ] arr1 = { - 10 , - 1 , 3 , 3 , 10 , 30 , 30 , 50 , 100 } ; int n1 = arr1 . length ; System . out . println ( " Fixed ▁ Point ▁ is ▁ " + binarySearch ( arr1 , 0 , n1 - 1 ) ) ; } public static int binarySearch ( int [ ] arr , int low , int high ) { if ( high < low ) { return - 1 ; } int mid = ( low + high ) / 2 ; int midValue = arr [ mid ] ; if ( mid == arr [ mid ] ) { return mid ; } int leftIndex = Math . min ( mid - 1 , midValue ) ; int left = binarySearch ( arr , low , leftIndex ) ; if ( left >= 0 ) { return left ; } int rightIndex = Math . max ( mid + 1 , midValue ) ; int right = binarySearch ( arr , rightIndex , high ) ; return right ; } }
public class Main { static int MAX = 10000 ; static int [ ] prodDig = new int [ MAX ] ; public static void main ( String [ ] args ) { int n = 138 ; findSeed ( n ) ; } public static int getDigitProduct ( int x ) { if ( x < 10 ) { return x ; } if ( prodDig [ x ] != 0 ) { return prodDig [ x ] ; } int prod = ( x % 10 ) * getDigitProduct ( x / 10 ) ; prodDig [ x ] = prod ; return prod ; } public static void findSeed ( int n ) { for ( int i = 1 ; i < n / 2 + 2 ; i ++ ) { if ( i * getDigitProduct ( i ) == n ) { System . out . print ( i + " ▁ " ) ; } } System . out . println ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int K = scanner . nextInt ( ) ; int [ ] X = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { X [ i ] = scanner . nextInt ( ) ; } long answer = ( long ) Math . pow ( 10 , 18 ) ; for ( int i = 0 ; i < N - K + 1 ; i ++ ) { int left = i ; int right = i + K - 1 ; int al = Math . abs ( X [ left ] ) ; int ar = Math . abs ( X [ right ] ) ; if ( X [ left ] * X [ right ] >= 0 ) { answer = Math . min ( answer , Math . max ( al , ar ) ) ; } else { answer = Math . min ( answer , Math . min ( al * 2 + ar , al + ar * 2 ) ) ; } } System . out . println ( answer ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( " Cubic ▁ root ▁ of ▁ " + n + " ▁ is ▁ " + Math . round ( cubicRoot ( n , 0.0000001 ) ) ) ; } public static double diff ( int n , double mid ) { if ( n > ( mid * mid * mid ) ) { return ( n - ( mid * mid * mid ) ) ; } else { return ( ( mid * mid * mid ) - n ) ; } } public static double cubicRoot ( int n , double e ) { double start = 0 ; double end = n ; while ( true ) { double mid = ( start + end ) / 2 ; double error = diff ( n , mid ) ; if ( error <= e ) { return mid ; } if ( ( mid * mid * mid ) > n ) { end = mid ; } else { start = mid ; } } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } int kmax = Arrays . stream ( a ) . max ( ) . getAsInt ( ) + m ; while ( m > 0 ) { Arrays . sort ( a ) ; m -- ; a [ 0 ] ++ ; } int kmin = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; System . out . println ( kmin + " ▁ " + kmax ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] num = { 3 , 4 , 5 } ; int [ ] rem = { 2 , 3 , 1 } ; int k = num . length ; System . out . println ( " x ▁ is ▁ " + findMinX ( num , rem , k ) ) ; } public static int inv ( int a , int m ) { int m0 = m ; int x0 = 0 ; int x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 = x1 + m0 ; } return x1 ; } public static int findMinX ( int [ ] num , int [ ] rem , int k ) { int prod = 1 ; for ( int i = 0 ; i < k ; i ++ ) { prod = prod * num [ i ] ; } int result = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int pp = prod / num [ i ] ; result = result + rem [ i ] * inv ( pp , num [ i ] ) * pp ; } return result % prod ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 1 , 3 , 4 , 2 } ; int n = arr . length ; System . out . println ( findMaxOR ( arr , n ) ) ; } public static int findMaxOR ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; int maxOR = arr [ n - 1 ] ; int count = 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( ( maxOR | arr [ i ] ) > maxOR ) { maxOR = maxOR | arr [ i ] ; count ++ ; } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } public static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i * ( i + 1 ) / 2 ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( aliquotSum ( n ) ) ; } public static int aliquotSum ( int n ) { int sm = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( n % i == 0 ) { sm = sm + i ; } } return sm ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } public static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int p = ( 3 * i * i - i ) / 2 ; sum = sum + p ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fifthPowerSum ( n ) ) ; } public static int fifthPowerSum ( int n ) { int sm = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sm = sm + ( i * i * i * i * i ) ; } return sm ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } public static int squaresum ( int n ) { int sm = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sm = sm + ( i * i ) ; } return sm ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } public static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i * ( i + 1 ) / 2 ; } return sum ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } public static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } public static int findSum ( int n ) { int summ = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { summ = ( int ) ( summ + ( ( i * ( i + 1 ) * ( 2 * i + 1 ) ) / 6 ) ) ; } return summ ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } public static int fourthPowerSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + ( int ) Math . pow ( i , 4 ) ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int ans = squareSum ( 8 ) ; System . out . println ( ans ) ; } public static int squareSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { sum += ( 2 * i ) * ( 2 * i ) ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( avgOfSquareN ( n ) ) ; } public static double avgOfSquareN ( int n ) { double sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += ( i * i ) ; } return sum / n ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } public static int findSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += i * ( n - i ) ; } return 2 * sum ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 8 ; SumsOfDigits ( n ) ; } public static void SumsOfDigits ( int n ) { int sum = 0 ; int N = ( int ) Math . floor ( n / 2 ) ; for ( int base = 2 ; base <= N ; base ++ ) { sum = sum + solve ( n , base ) ; } System . out . println ( sum ) ; } public static int solve ( int n , int base ) { int sum = 0 ; while ( n > 0 ) { int remainder = n % base ; sum = sum + remainder ; n = ( int ) ( n / base ) ; } return sum ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { boolean [ ] isPrime = new boolean [ 110001 ] ; Arrays . fill ( isPrime , true ) ; List < Integer > primes = new ArrayList < > ( ) ; eratos ( 110000 , isPrime , primes ) ; Scanner scanner = new Scanner ( System . in ) ; while ( true ) { try { int p = scanner . nextInt ( ) ; if ( p == 0 ) { break ; } int ans = 0 ; for ( int i = 0 ; i < p ; i ++ ) { ans += primes . get ( i ) ; } System . out . println ( ans ) ; } catch ( Exception e ) { break ; } } } public static void eratos ( int n , boolean [ ] isPrime , List < Integer > primes ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i < Math . sqrt ( n ) ; i ++ ) { if ( isPrime [ i ] ) { int j = 2 * i ; while ( j <= n ) { isPrime [ j ] = false ; j = j + i ; } } } for ( int i = 2 ; i < 110000 ; i ++ ) { if ( isPrime [ i ] ) { primes . add ( i ) ; } } } }
System . out . println ( Integer . toBinaryString ( 4 ) . replaceAll ( "0" , " " ) . length ( ) ) ; System . out . println ( Integer . toBinaryString ( 15 ) . replaceAll ( "0" , " " ) . length ( ) ) ;
public class Main { static int INT_MAX = 2147483647 ; public static void main ( String [ ] args ) { int [ ] keys = { 10 , 12 , 20 } ; int [ ] freq = { 34 , 8 , 50 } ; int n = keys . length ; System . out . println ( " Cost ▁ of ▁ Optimal ▁ BST ▁ is ▁ " + optimalSearchTree ( keys , freq , n ) ) ; } public static int optimalSearchTree ( int [ ] keys , int [ ] freq , int n ) { int [ ] [ ] cost = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { cost [ i ] [ i ] = freq [ i ] ; } for ( int L = 2 ; L <= n ; L ++ ) { for ( int i = 0 ; i < n - L + 1 ; i ++ ) { int j = i + L - 1 ; if ( i >= n || j >= n ) { break ; } cost [ i ] [ j ] = INT_MAX ; for ( int r = i ; r <= j ; r ++ ) { int c = 0 ; if ( r > i ) { c += cost [ i ] [ r - 1 ] ; } if ( r < j ) { c += cost [ r + 1 ] [ j ] ; } c += sum ( freq , i , j ) ; if ( c < cost [ i ] [ j ] ) { cost [ i ] [ j ] = c ; } } } } return cost [ 0 ] [ n - 1 ] ; } public static int sum ( int [ ] freq , int i , int j ) { int s = 0 ; for ( int k = i ; k <= j ; k ++ ) { s += freq [ k ] ; } return s ; } }
public class Main { public static void main ( String [ ] args ) { int x = 1 ; int y = 5 ; int z = 8 ; System . out . println ( get ( x , y , z ) ) ; } public static int get ( int x , int y , int z ) { if ( x > z ) { return - 1 ; } int val = z - x ; int div = ( z - x ) / y ; int ans = div * y + x ; return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = scanner . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ a [ i ] - 1 ] = i ; } int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { res += Math . abs ( b [ i ] - b [ i - 1 ] ) ; } System . out . println ( res ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( maxCoefficientValue ( n ) ) ; } public static int binomialCoeff ( int n , int k ) { int [ ] [ ] C = new int [ n + 1 ] [ k + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) { C [ i ] [ j ] = 1 ; } else { C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } return C [ n ] [ k ] ; } public static int maxCoefficientValue ( int n ) { if ( n % 2 == 0 ) { return binomialCoeff ( n , n / 2 ) ; } else { return binomialCoeff ( n , ( n + 1 ) / 2 ) ; } } }
public class Main { public static void main ( String [ ] args ) { String s = " abaebio " ; int n = s . length ( ) ; System . out . println ( vowelPairs ( s , n ) ) ; } public static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) { return true ; } else { return false ; } } public static int vowelPairs ( String s , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( isVowel ( s . charAt ( i ) ) && isVowel ( s . charAt ( i + 1 ) ) ) { cnt ++ ; } } return cnt ; } }
public class Main { public static void main ( String [ ] args ) { while ( true ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; if ( N == 0 ) { System . exit ( 0 ) ; } int W = scanner . nextInt ( ) ; int H = scanner . nextInt ( ) ; int [ ] [ ] persimmon = new int [ 100 ] [ 100 ] ; for ( int i = 0 ; i < N ; i ++ ) { int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; persimmon [ x ] [ y ] = 1 ; } int [ ] [ ] cumsum = new int [ 100 ] [ 100 ] ; for ( int x = 1 ; x < 100 ; x ++ ) { for ( int y = 1 ; y < 100 ; y ++ ) { cumsum [ x ] [ y ] = cumsum [ x - 1 ] [ y ] + cumsum [ x ] [ y - 1 ] - cumsum [ x - 1 ] [ y - 1 ] + persimmon [ x ] [ y ] ; } } int S = scanner . nextInt ( ) ; int T = scanner . nextInt ( ) ; int max_persimmon = 0 ; for ( int x = S ; x <= W ; x ++ ) { for ( int y = T ; y <= H ; y ++ ) { max_persimmon = Math . max ( max_persimmon , cumsum [ x ] [ y ] + cumsum [ x - S ] [ y - T ] - cumsum [ x ] [ y - T ] - cumsum [ x - S ] [ y ] ) ; } } System . out . println ( max_persimmon ) ; } } }
public class Main { public static void main ( String [ ] args ) { String s1 = " for " ; String s2 = " geeksforgeeks " ; int res = isSubstring ( s1 , s2 ) ; if ( res == - 1 ) { System . out . println ( " Not ▁ present " ) ; } else { System . out . println ( " Present ▁ at ▁ index ▁ " + res ) ; } } public static int isSubstring ( String s1 , String s2 ) { int M = s1 . length ( ) ; int N = s2 . length ( ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { int j ; for ( j = 0 ; j < M ; j ++ ) { if ( s2 . charAt ( i + j ) != s1 . charAt ( j ) ) { break ; } } if ( j == M ) { return i ; } } return - 1 ; } }
public class Main { public static void main ( String [ ] args ) { int angle = 65 ; double z = angleOncirCumference ( angle ) ; System . out . println ( " The ▁ angle ▁ is ▁ " + z + " ▁ degrees " ) ; } public static double angleOncirCumference ( int z ) { return ( z / 2 ) ; } }
public class Main { public static void countSubarraysof1and0 ( int [ ] a , int n ) { int count1 = 0 ; int count0 = 0 ; int number1 = 0 ; int number0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { count1 += 1 ; } else { number1 += ( ( count1 ) * ( count1 + 1 ) / 2 ) ; count1 = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { count0 += 1 ; } else { number0 += ( count0 ) * ( count0 + 1 ) / 2 ; count0 = 0 ; } } if ( count1 > 0 ) { number1 += ( count1 ) * ( count1 + 1 ) / 2 ; } if ( count0 > 0 ) { number0 += ( count0 ) * ( count0 + 1 ) / 2 ; } System . out . println ( " Count ▁ of ▁ subarrays ▁ of ▁ 0 ▁ only : ▁ " + ( int ) number0 ) ; System . out . println ( " Count ▁ of ▁ subarrays ▁ of ▁ 1 ▁ only : ▁ " + ( int ) number1 ) ; } public static void main ( String [ ] args ) { int [ ] a = { 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 } ; int n = a . length ; countSubarraysof1and0 ( a , n ) ; } }
public class Main { public static void printNumbers ( int N ) { int flag = 1 ; int x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) { flag = 0 ; } x = x / 10 ; } if ( flag == 1 ) { System . out . print ( N + " ▁ " ) ; } printNumbers ( N - 1 ) ; } } public static void main ( String [ ] args ) { int N = 20 ; printNumbers ( N ) ; } }
public class Main { public static void printPermutation ( int n , int k ) { int mx = n ; for ( int i = 1 ; i <= k ; i ++ ) { System . out . print ( mx + " ▁ " ) ; mx -- ; } for ( int i = 1 ; i <= mx ; i ++ ) { System . out . print ( i + " ▁ " ) ; } } public static void main ( String [ ] args ) { int N = 5 , K = 3 ; if ( K >= N - 1 ) { System . out . println ( " Not ▁ Possible " ) ; } else { printPermutation ( N , K ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int sum = 0 ; for ( String num : input ) { sum += Integer . parseInt ( num ) ; } l [ i ] = sum ; } int a = l [ 0 ] ; Arrays . sort ( l ) ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( l [ i ] == a ) { index = i ; break ; } } System . out . println ( index + 1 ) ; } }
public class Main { public static boolean isMember ( char [ ] list , char key ) { for ( int i = 0 ; i < list . length ; i ++ ) { if ( key == list [ i ] ) { return true ; } } return false ; } public static boolean overlap ( char [ ] list1 , char [ ] list2 ) { for ( char key : list1 ) { if ( isMember ( list2 , key ) ) { return true ; } } return false ; } public static void main ( String [ ] args ) { String s1 = " geeksforgeeks " ; String s2 = " geeks " ; char [ ] list1 = s1 . toCharArray ( ) ; char [ ] list2 = s2 . toCharArray ( ) ; String yesOrNo = String . valueOf ( overlap ( list1 , list2 ) ) ; if ( yesOrNo . equals ( " true " ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; int i = 1 ; while ( true ) { if ( i > t ) { break ; } String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int a = Integer . parseInt ( input [ 1 ] ) ; int b = Integer . parseInt ( input [ 2 ] ) ; int c = Integer . parseInt ( input [ 3 ] ) ; int d = Integer . parseInt ( input [ 4 ] ) ; if ( n * ( a - b ) > ( c + d ) || n * ( a + b ) < ( c - d ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } i = i + 1 ; } } }
public class Main { public static void findElements ( int [ ] arr , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { count = count + 1 ; } } if ( count >= 2 ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 3 ; int [ ] [ ] tri = { { 1 , 0 , 0 } , { 4 , 8 , 0 } , { 1 , 5 , 3 } } ; System . out . println ( maxPathSum ( tri , 2 , 2 ) ) ; } public static int maxPathSum ( int [ ] [ ] tri , int m , int n ) { for ( int i = m - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) { tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ; } else { tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ; } } } return tri [ 0 ] [ 0 ] ; } }
public class Main { static boolean isHeap ( int [ ] arr , int n ) { for ( int i = 0 ; i < ( n - 2 ) / 2 + 1 ; i ++ ) { if ( arr [ 2 * i + 1 ] > arr [ i ] ) { return false ; } if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) { return false ; } } return true ; } public static void main ( String [ ] args ) { int [ ] arr = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length ; if ( isHeap ( arr , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class Main { static boolean isHeap ( int [ ] arr , int i , int n ) { if ( i > ( n - 2 ) / 2 ) { return true ; } if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 * i + 2 ] && isHeap ( arr , 2 * i + 1 , n ) && isHeap ( arr , 2 * i + 2 , n ) ) { return true ; } return false ; } public static void main ( String [ ] args ) { int [ ] arr = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length - 1 ; if ( isHeap ( arr , 0 , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > V = new ArrayList < > ( ) ; for ( String s : input ) { V . add ( Integer . parseInt ( s ) ) ; } List < List < Integer > > P = new ArrayList < > ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { List < Integer > temp = new ArrayList < > ( ) ; temp . add ( V . get ( 0 ) ) ; temp . add ( V . get ( 1 ) ) ; P . add ( temp ) ; V = V . subList ( 2 , V . size ( ) ) ; } List < Integer > A = P . get ( 0 ) ; List < Integer > B = P . get ( 1 ) ; List < Integer > C = P . get ( 2 ) ; for ( int i = 1 ; i < 3 ; i ++ ) { List < Integer > temp = P . get ( i ) ; int x = temp . get ( 0 ) ; int y = temp . get ( 1 ) ; int x0 = P . get ( 0 ) . get ( 0 ) ; int y0 = P . get ( 0 ) . get ( 1 ) ; temp . set ( 0 , x - x0 ) ; temp . set ( 1 , y - y0 ) ; } List < Integer > temp1 = P . get ( 1 ) ; int a = temp1 . get ( 0 ) ; int b = temp1 . get ( 1 ) ; List < Integer > temp2 = P . get ( 2 ) ; int c = temp2 . get ( 0 ) ; int d = temp2 . get ( 1 ) ; if ( a * d - b * c == 0 ) { System . out . println ( " NO " ) ; System . exit ( 0 ) ; } System . out . println ( dist ( A , B ) == dist ( B , C ) ? " YES " : " NO " ) ; } public static int dist ( List < Integer > A , List < Integer > B ) { int x = A . get ( 0 ) - B . get ( 0 ) ; int y = A . get ( 1 ) - B . get ( 1 ) ; return x * x + y * y ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 3 , 2 } ; int n = arr . length ; System . out . println ( findMinDel ( arr , n ) ) ; } public static int findMinDel ( int [ ] arr , int n ) { int min_num = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min_num = Math . min ( arr [ i ] , min_num ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_num ) { cnt ++ ; } } return n - cnt ; } }
public class Main { public static void main ( String [ ] args ) { int res = count ( 1 , 2 ) ; if ( res == - 1 ) { System . out . println ( " INF " ) ; } else { System . out . println ( res ) ; } res = count ( 5 , 3 ) ; if ( res == - 1 ) { System . out . println ( " INF " ) ; } else { System . out . println ( res ) ; } res = count ( 3 , 5 ) ; if ( res == - 1 ) { System . out . println ( " INF " ) ; } else { System . out . println ( res ) ; } } public static int count ( int x , int y ) { int ans = 0 ; Map < Integer , Integer > m = new HashMap < > ( ) ; while ( x % y != 0 ) { x %= y ; ans += 1 ; if ( m . containsKey ( x ) ) { return - 1 ; } m . put ( x , 1 ) ; x *= 10 ; } return ans ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 40 , 50 , 90 } ; int n = 3 ; if ( isPossibleToMakeDivisible ( arr , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isPossibleToMakeDivisible ( int [ ] arr , int n ) { int remainder = 0 ; for ( int i = 0 ; i < n ; i ++ ) { remainder = ( remainder + arr [ i ] ) % 3 ; } return ( remainder == 0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int K = input . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = input . nextInt ( ) ; } int ans = 0 ; List < List < Integer > > graph = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { graph . add ( new ArrayList < > ( ) ) ; } int [ ] Par = new int [ N ] ; Arrays . fill ( Par , - 1 ) ; for ( int i = 0 ; i < N ; i ++ ) { int a = A [ i ] ; if ( i == 0 ) { if ( a != 1 ) { ans ++ ; } continue ; } Par [ i ] = a - 1 ; graph . get ( a - 1 ) . add ( i ) ; } List < int [ ] > qs = new ArrayList < > ( ) ; Stack < Integer > stack = new Stack < > ( ) ; int [ ] Depth = new int [ N ] ; Arrays . fill ( Depth , - 1 ) ; Depth [ 0 ] = 0 ; stack . push ( 0 ) ; while ( ! stack . isEmpty ( ) ) { int p = stack . pop ( ) ; for ( int np : graph . get ( p ) ) { Depth [ np ] = Depth [ p ] + 1 ; stack . push ( np ) ; } qs . add ( new int [ ] { Depth [ p ] , p } ) ; } qs . sort ( ( a , b ) -> Integer . compare ( b [ 0 ] , a [ 0 ] ) ) ; boolean [ ] checked = new boolean [ N ] ; for ( int [ ] q : qs ) { int d = q [ 0 ] ; int s = q [ 1 ] ; if ( d <= K ) break ; if ( checked [ s ] ) continue ; for ( int i = 0 ; i < K - 1 ; i ++ ) { s = Par [ s ] ; } List < Integer > que = new ArrayList < > ( ) ; que . add ( s ) ; checked [ s ] = true ; while ( ! que . isEmpty ( ) ) { List < Integer > qq = new ArrayList < > ( ) ; for ( int p : que ) { for ( int np : graph . get ( p ) ) { if ( ! checked [ np ] ) { checked [ np ] = true ; qq . add ( np ) ; } } } que = qq ; } ans ++ ; }
public class Main { public static void printCubes ( int a , int b ) { for ( int i = a ; i <= b ; i ++ ) { int j = 1 ; for ( j = 1 ; j * j * j <= i ; j ++ ) { if ( j * j * j == i ) { System . out . print ( j * j * j + " ▁ " ) ; break ; } } } } public static void main ( String [ ] args ) { int a = 1 ; int b = 100 ; System . out . println ( " Perfect ▁ cubes ▁ in ▁ given ▁ range : ▁ " ) ; printCubes ( a , b ) ; } }
public static int getModulo ( int n , int d ) { return ( n & ( d - 1 ) ) ; } int n = 6 ; int d = 4 ; System . out . println ( n + " ▁ moduo ▁ " + d + " ▁ is ▁ " + getModulo ( n , d ) ) ;
try { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int N = Integer . parseInt ( input1 [ 0 ] ) ; int d = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] nums = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { nums [ i ] = Integer . parseInt ( input2 [ i ] ) ; } Arrays . sort ( nums ) ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = N - 1 ; j >= i ; j -- ) { if ( Math . abs ( nums [ i ] - nums [ j ] ) <= d ) { ans = Math . max ( ans , j - i + 1 ) ; break ; } } } System . out . println ( N - ans ) ; } catch ( Exception e ) { System . out . println ( e ) ; }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; System . out . println ( solve ( s ) ) ; } public static int solve ( String s ) { int a = ( int ) s . charAt ( s . length ( ) - 1 ) - ( int ) ' a ' ; int n = Integer . parseInt ( s . substring ( 0 , s . length ( ) - 1 ) ) ; int [ ] od = { 4 , 5 , 6 , 3 , 2 , 1 } ; int [ ] ad = { 0 , 7 , 0 , 7 } ; int c = 16 ; int ktmp = ( n - 1 ) / 4 ; int ttmp = ( n - 1 ) % 4 ; int ans = ktmp * 16 + ad [ ttmp ] + od [ a ] ; return ans ; } }
public class Main { public static void main ( String [ ] args ) { int N = 7 ; int K = 1 ; canBePerfectCube ( N , K ) ; N = 5 ; K = 4 ; canBePerfectCube ( N , K ) ; N = 7 ; K = 2 ; canBePerfectCube ( N , K ) ; } public static boolean isPerfectCube ( int x ) { int cr = ( int ) Math . pow ( x , 1.0 / 3.0 ) ; return ( cr * cr * cr == x ) ; } public static void canBePerfectCube ( int N , int K ) { if ( isPerfectCube ( N + K ) || isPerfectCube ( N - K ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; String s = input . next ( ) ; String t = input . next ( ) ; String test = s + t ; if ( s . equals ( t ) ) { System . out . println ( s . length ( ) ) ; System . exit ( 0 ) ; } for ( int i = n ; i >= 1 ; i -- ) { test = s . substring ( 0 , s . length ( ) - i ) + t ; if ( test . substring ( 0 , n ) . equals ( s ) && test . substring ( test . length ( ) - n ) . equals ( t ) ) { System . out . println ( test . length ( ) ) ; System . exit ( 0 ) ; } } System . out . println ( s . length ( ) + t . length ( ) ) ; } }
import java . util . * ; class Graph { Map < Integer , List < Integer > > graph ; public Graph ( ) { this . graph = new HashMap < > ( ) ; } public void addEdge ( int u , int v ) { if ( ! graph . containsKey ( u ) ) { graph . put ( u , new ArrayList < > ( ) ) ; } graph . get ( u ) . add ( v ) ; } public void DFSUtil ( int v , boolean [ ] visited ) { visited [ v ] = true ; System . out . print ( v + " ▁ " ) ; for ( int i : graph . get ( v ) ) { if ( ! visited [ i ] ) { DFSUtil ( i , visited ) ; } } } public void DFS ( int v ) { boolean [ ] visited = new boolean [ Collections . max ( graph . keySet ( ) ) + 1 ] ; DFSUtil ( v , visited ) ; } } public class Main { public static void main ( String [ ] args ) { Graph g = new Graph ( ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( " Following ▁ is ▁ Depth ▁ First ▁ Traversal ▁ ( starting ▁ from ▁ vertex ▁ 2 ) " ) ; g . DFS ( 2 ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int x = 15 ; int n = 3 ; countFrequency ( x , n ) ; } public static void countFrequency ( int x , int n ) { int [ ] freq_count = new int [ 10 ] ; for ( int i = 1 ; i <= n ; i ++ ) { double val = Math . pow ( x , i ) ; countDigits ( ( int ) val , freq_count ) ; } for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( freq_count [ i ] + " ▁ " ) ; } } public static void countDigits ( int val , int [ ] arr ) { while ( val > 0 ) { int digit = val % 10 ; arr [ digit ] += 1 ; val = val / 10 ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = Integer . parseInt ( input . nextLine ( ) ) ; String [ ] arr = input . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ arr . length ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { a [ i ] = Integer . parseInt ( arr [ i ] ) ; } String ans = " NO " ; Arrays . sort ( a ) ; for ( int i = a . length - 1 ; i >= 0 ; i -- ) { if ( a [ i ] % 2 == 0 ) { a [ i ] = 0 ; } else { break ; } } Arrays . sort ( a ) ; for ( int i = 0 ; i < a . length - 1 ; i ++ ) { if ( 2 * a [ i ] > a [ i + 1 ] && a [ i ] != a [ i + 1 ] ) { ans = " YES " ; break ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int N = Integer . parseInt ( scanner . nextLine ( ) ) ; System . out . println ( Math . max ( 0 , N - 2 ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String input = scanner . nextLine ( ) ; String [ ] words = input . split ( " ▁ " ) ; if ( words . length > 1 ) { String result = " " ; for ( int i = 1 ; i < words . length ; i ++ ) { result += words [ i ] ; } for ( int i = 0 ; i < result . length ( ) ; i += 2 ) { System . out . print ( result . charAt ( i ) ) ; } } } }
int m = 6 ; int n = 4 ; public static int linearCheck ( int [ ] [ ] ar , int [ ] arr ) { for ( int i = 0 ; i < m ; i ++ ) { boolean matched = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( ar [ i ] [ j ] != arr [ j ] ) { matched = false ; break ; } } if ( matched ) { return i + 1 ; } } return - 1 ; } public static void main ( String [ ] args ) { int [ ] [ ] mat = { { 0 , 0 , 1 , 0 } , { 10 , 9 , 22 , 23 } , { 40 , 40 , 40 , 40 } , { 43 , 44 , 55 , 68 } , { 81 , 73 , 100 , 132 } , { 100 , 75 , 125 , 133 } } ; int [ ] row = { 10 , 9 , 22 , 23 } ; System . out . println ( linearCheck ( mat , row ) ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; while ( n > 0 ) { int p = scanner . nextInt ( ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] l = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { l [ i ] = Integer . parseInt ( input [ i ] ) ; } int c = 0 ; int s = 0 ; for ( int num : l ) { s += num ; } if ( s % p == 0 ) { for ( int i = 0 ; i < p ; i ++ ) { if ( l [ i ] > s / p ) { c ++ ; } } System . out . println ( c ) ; } else { System . out . println ( - 1 ) ; } n -- ; } } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] tInput = scanner . nextLine ( ) . split ( " ▁ " ) ; String [ ] vInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] t = new int [ N ] ; int [ ] v = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { t [ i ] = Integer . parseInt ( tInput [ i ] ) ; v [ i ] = Integer . parseInt ( vInput [ i ] ) ; } int time = 0 ; int sum_t = 0 ; for ( int value : t ) { sum_t += value ; } double [ ] velo_cap = new double [ 2 * sum_t + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { int start_t = time ; int goal_t = time + 2 * t [ i ] ; for ( int s = 0 ; s < 2 * sum_t + 1 ; s ++ ) { if ( s < start_t ) { velo_cap [ s ] = Math . min ( velo_cap [ s ] , 2 * v [ i ] + ( start_t - s ) ) ; } else if ( s < goal_t ) { velo_cap [ s ] = Math . min ( velo_cap [ s ] , 2 * v [ i ] ) ; } else { velo_cap [ s ] = Math . min ( velo_cap [ s ] , 2 * v [ i ] + ( s - goal_t ) ) ; } } time += 2 * t [ i ] ; } for ( int s = 0 ; s < 2 * sum_t + 1 ; s ++ ) { velo_cap [ s ] = Math . min ( velo_cap [ s ] , 2 * sum_t - s ) ; velo_cap [ s ] = Math . min ( velo_cap [ s ] , s ) ; } double sum = 0 ; for ( double value : velo_cap ) { sum += value ; } System . out . println ( sum / 4 - ( velo_cap [ 0 ] + velo_cap [ velo_cap . length - 1 ] ) / 8 ) ; } } ```
public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 4 * n - 2 ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return 7 * ( int ) Math . pow ( n , 2 ) - 7 * n + 7 ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return 5 * ( int ) Math . pow ( n , 2 ) - 5 * n ; } }
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return ( int ) ( pow ( n , 2 ) + 2 * n + 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 3 ) + ( int ) Math . pow ( n , 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) - n - 1 ; } }
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return ( int ) ( pow ( n , 2 ) - 2 * n + 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + n - 2 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; int c = Math . abs ( x ) + Math . abs ( y ) ; if ( x > 0 && y > 0 ) { System . out . println ( 0 + " ▁ " + c + " ▁ " + c + " ▁ " + 0 ) ; } if ( x < 0 && y > 0 ) { System . out . println ( - c + " ▁ " + 0 + " ▁ " + 0 + " ▁ " + c ) ; } if ( x > 0 && y < 0 ) { System . out . println ( 0 + " ▁ " + - c + " ▁ " + c + " ▁ " + 0 ) ; } if ( x < 0 && y < 0 ) { System . out . println ( - c + " ▁ " + 0 + " ▁ " + 0 + " ▁ " + - c ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; int K = Integer . parseInt ( scanner . nextLine ( ) ) ; int l = s . length ( ) ; List < String > substr = new ArrayList < > ( ) ; for ( int i = 0 ; i < l ; i ++ ) { for ( int k = 0 ; k < K ; k ++ ) { substr . add ( s . substring ( i , i + k + 1 ) ) ; if ( i + k + 1 >= l ) break ; } } Set < String > set = new HashSet < > ( substr ) ; substr = new ArrayList < > ( set ) ; Collections . sort ( substr ) ; System . out . println ( substr . get ( K - 1 ) ) ; } }
public class Solution { private List < Integer > memo ; public Solution ( ) { memo = new ArrayList < > ( ) ; memo . add ( 0 ) ; memo . add ( 1 ) ; } public int fib ( int N ) { if ( N < memo . size ( ) ) { return memo . get ( N ) ; } for ( int i = memo . size ( ) ; i <= N ; i ++ ) { memo . add ( memo . get ( i - 1 ) + memo . get ( i - 2 ) ) ; } return memo . get ( N ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int n = 2 ; int out = sObj . fib ( n ) ; System . out . println ( out ) ; } }
``` java import java . io . * ; import java . util . * ; import java . util . stream . Collectors ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; while ( t > 0 ) { GO_LIFE ( scanner ) ; t -- ; } } public static void GO_LIFE ( Scanner scanner ) { char [ ] a = scanner . next ( ) . toCharArray ( ) ; char [ ] b = scanner . next ( ) . toCharArray ( ) ; Map < Character , Integer > p = new HashMap < > ( ) ; for ( char c : a ) { p . put ( c , p . getOrDefault ( c , 0 ) + 1 ) ; } int n = a . length ; int ok = 0 ; for ( char c : b ) { if ( p . getOrDefault ( c , 0 ) == 0 ) { ok = 1 ; } } if ( ! Arrays . equals ( b , Arrays . stream ( b ) . sorted ( ) . toArray ( ) ) || ok == 1 ) { Arrays . sort ( a ) ; System . out . println ( new String ( a ) ) ; return ; } List < Integer > q1 = new ArrayList < > ( ) ; List < Integer > q2 = new ArrayList < > ( ) ; List < Integer > q = new ArrayList < > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( a [ i ] == ' c ' ) { q . add ( i ) ; } if ( a [ i ] == ' b ' ) { q1 . add ( 0 , i ) ; } } int i = 0 , j = 0 ; while ( j < q1 . size ( ) && i < q . size ( ) ) { char temp = a [ q . get ( i ) ] ; a [ q . get ( i ) ] = a [ q1 . get ( j ) ] ; a [ q1 . get ( j ) ] = temp ; i ++ ; j ++ ; } System . out . println ( new String ( a ) ) ; } } ```
public class Main { static double PI = 3.142 ; public static void main ( String [ ] args ) { int x = 50 ; int n = 5 ; System . out . println ( round ( cosXSertiesSum ( x , n ) , 6 ) ) ; } public static double cosXSertiesSum ( int x , int n ) { x = x * ( PI / 180.0 ) ; double res = 1 ; int sign = 1 ; int fact = 1 ; double pow = 1 ; for ( int i = 1 ; i <= 5 ; i ++ ) { sign = sign * - 1 ; fact = fact * ( 2 * i - 1 ) * ( 2 * i ) ; pow = pow * x * x ; res = res + sign * pow / fact ; } return res ; } public static double round ( double value , int places ) { double scale = Math . pow ( 10 , places ) ; return Math . round ( value * scale ) / scale ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; int S = 3 ; check ( N , S ) ; N = 5 ; S = 3 ; check ( N , S ) ; } public static double findNumber ( int N , int S ) { double i = ( ( N * ( N + 1 ) ) / 4 ) - ( ( S + 1 ) / 2 ) ; return i ; } public static void check ( int N , int S ) { double i = findNumber ( N , S ) ; int integerI = ( int ) i ; if ( i - integerI == 0 ) { System . out . println ( " Yes : ▁ " + integerI + " , ▁ " + ( integerI + 1 ) ) ; } else { System . out . println ( " No " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int K = 5 ; int dig0 = 3 ; int dig1 = 4 ; if ( multipleOfThree ( K , dig0 , dig1 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean multipleOfThree ( int K , int dig0 , int dig1 ) { int sum = 0 ; int temp = ( dig0 + dig1 ) % 10 ; sum = dig0 + dig1 ; if ( K == 2 ) { if ( sum % 3 == 0 ) { return true ; } else { return false ; } } sum += temp ; int numberofGroups = ( K - 3 ) / 4 ; int remNumberofDigits = ( K - 3 ) % 4 ; sum += ( numberofGroups * 20 ) ; for ( int i = 0 ; i < remNumberofDigits ; i ++ ) { temp = ( 2 * temp ) % 10 ; sum += temp ; } if ( sum % 3 == 0 ) { return true ; } else { return false ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = input . nextInt ( ) ; } int total = 0 ; for ( int num : a ) { total += num ; } Arrays . sort ( b ) ; if ( total <= b [ n - 1 ] + b [ n - 2 ] ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class Main { public static void main ( String [ ] args ) { String s = " clapc " ; System . out . println ( countOcc ( s . toLowerCase ( ) ) ) ; } public static int countOcc ( String s ) { int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) - 3 ; i ++ ) { int c = 0 , l = 0 , a = 0 , p = 0 ; for ( int j = i ; j < i + 4 ; j ++ ) { if ( s . charAt ( j ) == ' c ' ) { c ++ ; } else if ( s . charAt ( j ) == ' l ' ) { l ++ ; } else if ( s . charAt ( j ) == ' a ' ) { a ++ ; } else if ( s . charAt ( j ) == ' p ' ) { p ++ ; } } if ( c == 1 && l == 1 && a == 1 && p == 1 ) { cnt ++ ; } } return cnt ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int x = 100 ; int y = 19 ; System . out . println ( countSteps ( x , y ) ) ; } public static int countSteps ( int x , int y ) { if ( x % y == 0 ) { return ( int ) Math . floor ( x / y ) ; } return ( int ) Math . floor ( ( x / y ) + countSteps ( y , x % y ) ) ; } }
import static java . lang . Math . sqrt ; import static java . lang . Math . floor ; public class Main { public static void main ( String [ ] args ) { int n = 3 ; if ( isSunnyNum ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isPerfectSquare ( int x ) { double sr = sqrt ( x ) ; return ( ( sr - floor ( sr ) ) == 0 ) ; } public static boolean isSunnyNum ( int n ) { if ( isPerfectSquare ( n + 1 ) ) { return true ; } return false ; } }
public class Main { static double PI = 3.14159265 ; public static void main ( String [ ] args ) { int P = 3 ; int B = 4 ; int H = 5 ; System . out . println ( areaInscribed ( P , B , H ) ) ; } public static double areaInscribed ( int P , int B , int H ) { return ( ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ) ; } }
while ( true ) { int n = Integer . parseInt ( input . nextLine ( ) ) ; if ( n == 0 ) break ; Map < String , String > d = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] inputArr = input . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; d . put ( inputArr [ 0 ] , inputArr [ 1 ] ) ; } int m = Integer . parseInt ( input . nextLine ( ) ) ; for ( int i = 0 ; i < m ; i ++ ) { String e = input . nextLine ( ) . trim ( ) ; System . out . print ( d . containsKey ( e ) ? d . get ( e ) : e ) ; } System . out . println ( ) ; }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int n = 4 ; int [ ] v = new int [ n ] ; v [ 0 ] = 1 ; v [ 1 ] = 2 ; v [ 2 ] = 3 ; v [ 3 ] = 4 ; System . out . println ( getCount ( v , n ) ) ; } public static int getCount ( int [ ] v , int n ) { Arrays . sort ( v ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = n - 1 - upperBound ( v , v [ i ] - 1 ) ; if ( tmp == v [ i ] ) { cnt += 1 ; } } return cnt ; } public static int upperBound ( int [ ] arr , int key ) { int low = 0 ; int high = arr . length ; while ( low < high ) { int mid = low + ( high - low ) / 2 ; if ( key >= arr [ mid ] ) { low = mid + 1 ; } else { high = mid ; } } return low ; } }
public class Main { public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( trailingZeros ( N ) ) ; } public static int trailingZeros ( int N ) { int countOfTwo = 0 ; int countOfFive = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int val = i ; while ( val % 2 == 0 && val > 0 ) { val /= 2 ; countOfTwo += i ; } while ( val % 5 == 0 && val > 0 ) { val /= 5 ; countOfFive += i ; } } int ans = Math . min ( countOfTwo , countOfFive ) ; return ans ; } }
public class Main { public static int removeZero ( int n ) { int res = 0 ; int d = 1 ; while ( n > 0 ) { if ( n % 10 != 0 ) { res += ( n % 10 ) * d ; d *= 10 ; } n /= 10 ; } return res ; } public static boolean isEqual ( int a , int b ) { if ( removeZero ( a ) + removeZero ( b ) == removeZero ( a + b ) ) { return true ; } return false ; } public static void main ( String [ ] args ) { int a = 105 ; int b = 106 ; if ( isEqual ( a , b ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
``` java import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . List ; import java . util . StringTokenizer ; public class Main { static final int m = 1000000007 ; public static void main ( String [ ] args ) throws IOException { BufferedReader f_i = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int N = Integer . parseInt ( f_i . readLine ( ) ) ; String [ ] n_type = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { String t = f_i . readLine ( ) . trim ( ) ; n_type [ i ] = t ; } List < List < Integer > > adj = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { adj . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { StringTokenizer st = new StringTokenizer ( f_i . readLine ( ) ) ; int s = Integer . parseInt ( st . nextToken ( ) ) - 1 ; int t = Integer . parseInt ( st . nextToken ( ) ) - 1 ; adj . get ( s ) . add ( t ) ; } System . out . println ( dfs ( 0 , n_type , adj ) ) ; } static long prod ( List < Long > nums ) { long p = 1 ; for ( long n : nums ) { p = ( p * n ) % m ; } return p ; } static long dfs ( int node , String [ ] n_type , List < List < Integer > > adj ) { String nt = n_type [ node ] ; List < Integer > chld = adj . get ( node ) ; if ( nt . equals ( " E " ) ) { if ( ! chld . isEmpty ( ) ) { return prod ( chld . stream ( ) . map ( c -> dfs ( c , n_type , adj ) ) . collect ( Collectors . toList ( ) ) ) ; } else { return 1 ; } } else if ( nt . equals ( " E ? " ) ) { if ( ! chld . isEmpty ( ) ) { return ( prod ( chld . stream ( ) . map ( c -> dfs ( c , n_type , adj ) ) . collect ( Collectors . toList ( ) ) ) + 1 ) % m ; } else { return 2 ; } } else if ( nt . equals ( " A " ) ) { return chld . stream ( ) . mapToLong ( c -> dfs ( c , n_type , adj ) ) . sum ( ) % m ; } else if ( nt . equals ( " A ? " ) ) { return ( chld . stream ( ) . mapToLong ( c -> dfs ( c , n_type , adj ) ) . sum ( ) + 1
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] l = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; if ( n == 1 ) { System . out . println ( l [ 0 ] ) ; } else { int x = Math . abs ( l [ 0 ] - l [ 1 ] ) ; int m1 = Arrays . stream ( l ) . min ( ) . getAsInt ( ) ; int m2 = Arrays . stream ( l ) . max ( ) . getAsInt ( ) ; System . out . println ( ( m1 + m2 ) / 2 ) ; } } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] x = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { x [ i ] = Integer . parseInt ( input [ i ] ) ; } int a = x [ 0 ] ; int b = x [ 1 ] ; System . out . print ( Arrays . stream ( x ) . min ( ) . getAsInt ( ) + " ▁ " ) ; if ( Math . abs ( a - b ) >= 2 ) { System . out . print ( Math . abs ( a - b ) / 2 ) ; } else { System . out . print ( 0 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; int q = n / m ; int r = n % m ; int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = q ; } for ( int i = 0 ; i < r ; i ++ ) { a [ i ] += 1 ; } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( a [ i ] + " ▁ " ) ; } } }
public class Main { public static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } public static int totalPairs ( String s1 , String s2 ) { int count = 0 ; int [ ] arr1 = new int [ 7 ] ; int [ ] arr2 = new int [ 7 ] ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { int setBits = countSetBits ( ( int ) s1 . charAt ( i ) ) ; arr1 [ setBits ] += 1 ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { int setBits = countSetBits ( ( int ) s2 . charAt ( i ) ) ; arr2 [ setBits ] += 1 ; } for ( int i = 1 ; i < 7 ; i ++ ) { count += ( arr1 [ i ] * arr2 [ i ] ) ; } return count ; } public static void main ( String [ ] args ) { String s1 = " geeks " ; String s2 = " forgeeks " ; System . out . println ( totalPairs ( s1 , s2 ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { - 1 , 2 , - 2 , 1 } ; int n = a . length ; System . out . println ( countSubSeq ( 0 , 0 , 0 , a , n ) ) ; } public static int countSubSeq ( int i , int Sum , int cnt , int [ ] a , int n ) { if ( i == n ) { if ( Sum == 0 && cnt > 0 ) { return 1 ; } else { return 0 ; } } int ans = 0 ; ans += countSubSeq ( i + 1 , Sum , cnt , a , n ) ; ans += countSubSeq ( i + 1 , Sum + a [ i ] , cnt + 1 , a , n ) ; return ans ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String in_str = scanner . nextLine ( ) ; int index ; if ( n % 2 == 0 ) { index = ( int ) ( n / 2 ) - 1 ; } else { index = ( int ) ( n / 2 ) ; } char [ ] out_str = func ( in_str , index , n ) ; System . out . println ( new String ( out_str ) ) ; } public static char [ ] func ( String in_str , int index , int n ) { int j = 0 ; char [ ] in_list = in_str . toCharArray ( ) ; char [ ] out_list = new char [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { out_list [ i ] = ' ▁ ' ; } while ( in_list . length > 0 ) { if ( j == 0 ) { out_list [ index ] = in_list [ 0 ] ; in_list = removeElement ( in_list , 0 ) ; } else { if ( n % 2 != 0 ) { if ( index - j >= 0 ) { out_list [ index - j ] = in_list [ 0 ] ; in_list = removeElement ( in_list , 0 ) ; } if ( index + j < n ) { out_list [ index + j ] = in_list [ 0 ] ; in_list = removeElement ( in_list , 0 ) ; } } else { if ( index + j < n ) { out_list [ index + j ] = in_list [ 0 ] ; in_list = removeElement ( in_list , 0 ) ; } if ( index - j >= 0 ) { out_list [ index - j ] = in_list [ 0 ] ; in_list = removeElement ( in_list , 0 ) ; } } } j ++ ; } return out_list ; } public static char [ ] removeElement ( char [ ] arr , int index ) { char [ ] newArr = new char [ arr . length - 1 ] ; for ( int i = 0 , k = 0 ; i < arr . length ; i ++ ) { if ( i == index ) { continue ; } newArr [ k ++ ] = arr [ i ] ; } return newArr ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int n = Integer . parseInt ( input [ 1 ] ) ; int m = Integer . parseInt ( input [ 2 ] ) ; int count = 0 ; List < Integer > checkList = new ArrayList < > ( ) ; int i = 0 ; if ( a == 0 ) { i = 1 ; } while ( Math . pow ( ( i + a ) , n ) < m ) { checkList . add ( ( int ) Math . pow ( ( i + a ) , n ) ) ; i ++ ; } for ( int x : checkList ) { List < Integer > xl = new ArrayList < > ( ) ; for ( char c : String . valueOf ( x ) . toCharArray ( ) ) { xl . add ( Integer . parseInt ( String . valueOf ( c ) ) ) ; } int y = 0 ; for ( int num : xl ) { y += num ; } if ( x == Math . pow ( ( y + a ) , n ) ) { count ++ ; } } System . out . println ( count ) ; } }
``` java public class Main { public static void main ( String [ ] args ) { int [ ] arr1 = { 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 } ; int n = arr1 . length ; int key = 3 ; System . out . println ( " Index ▁ of ▁ the ▁ element ▁ is ▁ : ▁ " + pivotedBinarySearch ( arr1 , n , key ) ) ; } public static int pivotedBinarySearch ( int [ ] arr , int n , int key ) { int pivot = findPivot ( arr , 0 , n - 1 ) ; if ( pivot == - 1 ) { return binarySearch ( arr , 0 , n - 1 , key ) ; } if ( arr [ pivot ] == key ) { return pivot ; } if ( arr [ 0 ] <= key ) { return binarySearch ( arr , 0 , pivot - 1 , key ) ; } return binarySearch ( arr , pivot + 1 , n - 1 , key ) ; } public static int findPivot ( int [ ] arr , int low , int high ) { if ( high < low ) { return - 1 ; } if ( high == low ) { return low ; } int mid = ( low + high ) / 2 ; if ( mid < high && arr [ mid ] > arr [ mid + 1 ] ) { return mid ; } if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) { return ( mid - 1 ) ; } if ( arr [ low ] >= arr [ mid ] ) { return findPivot ( arr , low , mid - 1 ) ; } return findPivot ( arr , mid + 1 , high ) ; } public static int binarySearch ( int [ ] arr , int low , int high , int key ) { if ( high < low ) { return - 1 ; } int mid = ( low + high ) / 2 ; if ( key == arr [ mid ] ) { return mid ; } if ( key > arr [ mid ] ) { return binarySearch ( arr , ( mid + 1 ) , high , key ) ; } return binarySearch ( arr , low , ( mid - 1 ) , key ) ; } } ```
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) + 1 ; int d = 1000000007 ; int [ ] [ ] g = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { g [ i ] [ j ] = 1 ; } } for ( int i = 1 ; i < n ; i ++ ) { g [ i ] [ 0 ] = g [ i - 1 ] [ i - 1 ] ; for ( int j = 1 ; j <= i ; j ++ ) { g [ i ] [ j ] = ( g [ i ] [ j - 1 ] + g [ i - 1 ] [ j - 1 ] ) % d ; } } System . out . println ( ( g [ n - 1 ] [ n - 1 ] - g [ n - 1 ] [ 0 ] ) % d ) ; } } ```
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; List < String > answer = new ArrayList < > ( ) ; int n = input . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } int [ ] b = a . clone ( ) ; Arrays . sort ( b ) ; Map < Integer , Integer > d = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { d . put ( a [ i ] , i ) ; } int [ ] visited = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ i ] == 1 ) { continue ; } List < Integer > seq = new ArrayList < > ( ) ; seq . add ( i ) ; visited [ i ] = 1 ; int hold = a [ i ] ; while ( hold != b [ seq . get ( seq . size ( ) - 1 ) ] ) { int z = d . get ( b [ seq . get ( seq . size ( ) - 1 ) ] ) ; visited [ z ] = 1 ; seq . add ( z ) ; } StringBuilder sb = new StringBuilder ( ) ; sb . append ( seq . size ( ) ) . append ( " ▁ " ) ; for ( int x : seq ) { sb . append ( x + 1 ) . append ( " ▁ " ) ; } answer . add ( sb . toString ( ) . trim ( ) ) ; } System . out . println ( answer . size ( ) ) ; for ( String ans : answer ) { System . out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { static int [ ] [ ] vector = { { 0 , - 1 } , { 1 , 0 } , { 0 , 1 } , { - 1 , 0 } } ; public static void make_guruguru ( int d ) { char [ ] [ ] lst = new char [ d + 4 ] [ d + 4 ] ; for ( int i = 0 ; i < d + 4 ; i ++ ) { for ( int j = 0 ; j < d + 4 ; j ++ ) { lst [ i ] [ j ] = ' # ' ; } } int x = 2 ; int y = d + 1 ; lst [ y ] [ x ] = ' # ' ; int direct = 0 ; int vx = vector [ 0 ] [ 0 ] ; int vy = vector [ 0 ] [ 1 ] ; int cnt = 1 ; while ( true ) { while ( lst [ y + vy * 2 ] [ x + vx * 2 ] == ' ▁ ' ) { lst [ y + vy ] [ x + vx ] = ' # ' ; y += vy ; x += vx ; cnt ++ ; } if ( cnt <= 1 ) { break ; } direct = ( direct + 1 ) % 4 ; vx = vector [ direct ] [ 0 ] ; vy = vector [ direct ] [ 1 ] ; cnt = 0 ; } for ( int i = 2 ; i < d + 2 ; i ++ ) { for ( int j = 2 ; j < d + 2 ; j ++ ) { System . out . print ( lst [ i ] [ j ] ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; make_guruguru ( scanner . nextInt ( ) ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . println ( ) ; make_guruguru ( scanner . nextInt ( ) ) ; } } }
import java . util . function . Predicate ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int ans = 0 ; for ( int i = 0 ; i < ( 1 << 10 ) ; i ++ ) { for ( int j = i ; j < ( 1 << 10 ) ; j ++ ) { if ( eulerlib . popcount ( i ) == 6 && eulerlib . popcount ( j ) == 6 && isArrangementValid ( i , j ) ) { ans ++ ; } } } return Integer . toString ( ans ) ; } public static boolean isArrangementValid ( int a , int b ) { if ( testBit ( a , 6 ) || testBit ( a , 9 ) ) { a |= ( 1 << 6 ) | ( 1 << 9 ) ; } if ( testBit ( b , 6 ) || testBit ( b , 9 ) ) { b |= ( 1 << 6 ) | ( 1 << 9 ) ; } for ( int [ ] square : SQUARES ) { int c = square [ 0 ] ; int d = square [ 1 ] ; if ( ! ( ( testBit ( a , c ) && testBit ( b , d ) ) || ( testBit ( a , d ) && testBit ( b , c ) ) ) ) { return false ; } } return true ; } public static boolean testBit ( int x , int i ) { return ( ( x >> i ) & 1 ) != 0 ; } private static final int [ ] [ ] SQUARES = new int [ 9 ] [ 2 ] ; static { for ( int i = 1 ; i <= 9 ; i ++ ) { SQUARES [ i - 1 ] [ 0 ] = ( i * i ) / 10 ; SQUARES [ i - 1 ] [ 1 ] = ( i * i ) % 10 ; } } } class eulerlib { public static int popcount ( int x ) { return 0 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] info = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int j = 2 ; j < info . length ; j ++ ) { a [ i ] [ Integer . parseInt ( info [ j ] ) - 1 ] = 1 ; } } for ( int [ ] v : a ) { for ( int num : v ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; scanner . nextLine ( ) ; char [ ] [ ] a = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String line = scanner . nextLine ( ) ; for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = line . charAt ( j ) ; } } int count = 0 ; for ( int j = 0 ; j < m - 1 ; j ++ ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { char [ ] x = { a [ i ] [ j ] , a [ i + 1 ] [ j ] , a [ i ] [ j + 1 ] , a [ i + 1 ] [ j + 1 ] } ; if ( x [ 0 ] == ' a ' && x [ 1 ] == ' f ' && x [ 2 ] == ' c ' && x [ 3 ] == ' e ' ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String wires = scanner . nextLine ( ) ; System . out . println ( alternatingCurrent ( wires ) ) ; } public static String alternatingCurrent ( String wires ) { Stack < Character > stk = new Stack < > ( ) ; for ( int i = 0 ; i < wires . length ( ) ; i ++ ) { char upperWire = wires . charAt ( i ) ; if ( ! stk . isEmpty ( ) && stk . peek ( ) == upperWire ) { stk . pop ( ) ; continue ; } stk . push ( upperWire ) ; } if ( ! stk . isEmpty ( ) ) { return " No " ; } return " Yes " ; } }
import java . util . * ; import java . io . * ; class BipartiteMatching { int n , m ; Set < Integer > [ ] edges ; int [ ] match1 , match2 ; public BipartiteMatching ( int n , int m ) { this . n = n ; this . m = m ; edges = new HashSet [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { edges [ i ] = new HashSet < > ( ) ; } match1 = new int [ n ] ; match2 = new int [ m ] ; Arrays . fill ( match1 , - 1 ) ; Arrays . fill ( match2 , - 1 ) ; } public boolean dfs ( int v , Set < Integer > visited ) { for ( int u : edges [ v ] ) { if ( visited . contains ( u ) ) { continue ; } visited . add ( u ) ; if ( match2 [ u ] == - 1 || dfs ( match2 [ u ] , visited ) ) { match2 [ u ] = v ; match1 [ v ] = u ; return true ; } } return false ; } public void add ( int a , int b ) { edges [ a ] . add ( b ) ; } public int whois1 ( int a ) { return match1 [ a ] ; } public int whois2 ( int a ) { return match2 [ a ] ; } public int solve ( ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dfs ( i , new HashSet < > ( ) ) ) { count ++ ; } } return count ; } } public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int M = sc . nextInt ( ) ; int E = sc . nextInt ( ) ; BipartiteMatching bm = new BipartiteMatching ( N , M ) ; for ( int i = 0 ; i < E ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; bm . add ( x , y ) ; } System . out . println ( bm . solve ( ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] [ ] a = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int n = 3 ; System . out . println ( countMountains ( a , n ) ) ; } public static int countMountains ( int [ ] [ ] a , int n ) { int [ ] [ ] A = new int [ n + 2 ] [ n + 2 ] ; int count = 0 ; for ( int i = 0 ; i < n + 2 ; i ++ ) { for ( int j = 0 ; j < n + 2 ; j ++ ) { if ( i == 0 || j == 0 || i == n + 1 || j == n + 1 ) { A [ i ] [ j ] = Integer . MIN_VALUE ; } else { A [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] ; } } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( A [ i ] [ j ] > A [ i - 1 ] [ j ] && A [ i ] [ j ] > A [ i + 1 ] [ j ] && A [ i ] [ j ] > A [ i ] [ j - 1 ] && A [ i ] [ j ] > A [ i ] [ j + 1 ] && A [ i ] [ j ] > A [ i - 1 ] [ j - 1 ] && A [ i ] [ j ] > A [ i + 1 ] [ j + 1 ] && A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] && A [ i ] [ j ] > A [ i + 1 ] [ j - 1 ] ) { count ++ ; } } } return count ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { int N = 100005 ; int [ ] d = new int [ N ] ; int [ ] pre = new int [ N ] ; Positive_Divisors ( d , pre , N ) ; int n = 15 ; System . out . println ( pre [ n ] ) ; } public static void Positive_Divisors ( int [ ] d , int [ ] pre , int N ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j <= ( int ) Math . sqrt ( i ) ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) { d [ i ] ++ ; } else { d [ i ] += 2 ; } } } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( d [ i ] == d [ i - 1 ] ) { ans ++ ; } pre [ i ] = ans ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; scanner . nextLine ( ) ; String [ ] s = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = scanner . nextLine ( ) ; } int [ ] a = new int [ m ] ; int num = 1 ; for ( String command : s ) { String [ ] parts = command . split ( " ▁ " ) ; String operation = parts [ 0 ] ; if ( operation . equals ( " alloc " ) ) { alloc ( parts [ 1 ] , a , num , m ) ; num ++ ; } else if ( operation . equals ( " erase " ) ) { erase ( parts [ 1 ] , a ) ; } else if ( operation . equals ( " defragment " ) ) { defragment ( a , m ) ; } } } public static void alloc ( String x , int [ ] a , int num , int m ) { int size = Integer . parseInt ( x . split ( " ▁ " ) [ 1 ] ) ; for ( int i = 0 ; i <= m - size ; i ++ ) { boolean isFree = true ; for ( int j = i ; j < i + size ; j ++ ) { if ( a [ j ] != 0 ) { isFree = false ; break ; } } if ( isFree ) { for ( int j = i ; j < i + size ; j ++ ) { a [ j ] = num ; } System . out . println ( num ) ; return ; } } System . out . println ( " NULL " ) ; } public static void erase ( String x , int [ ] a ) { int value = Integer . parseInt ( x . split ( " ▁ " ) [ 1 ] ) ; if ( value < 1 || value > a . length ) { System . out . println ( " ILLEGAL _ ERASE _ ARGUMENT " ) ; return ; } for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == value ) { a [ i ] = 0 ; } } } public static void defragment ( int [ ] a , int m ) { int [ ] temp = new int [ a . length ] ; int index = 0 ; for ( int value : a ) { if ( value != 0 ) { temp [ index ] = value ; index ++ ; } } for ( int i = index ; i <
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 6 ; int len = 10 ; System . out . println ( Math . round ( areaOfTriangleInscribed ( n , len ) * 1000.0 ) / 1000.0 ) ; } public static double areaOfRegularPolygon ( int n , int len ) { double P = ( len * n ) ; double A = len / ( 2 * Math . tan ( ( 180 / n ) * 3.14159 / 180 ) ) ; double area = ( P * A ) / 2 ; return area ; } public static double areaOfTriangleInscribed ( int n , int len ) { double area = areaOfRegularPolygon ( n , len ) ; double triangle = area / n ; double insTri = ( triangle * 3 ) ; return insTri ; } }
public class Main { static final int MAX = 256 ; public static void main ( String [ ] args ) { String string = " GeeksForGeeks " ; int n = string . length ( ) ; System . out . println ( lastNonRepeating ( string , n ) ) ; } public static String lastNonRepeating ( String string , int n ) { int [ ] freq = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ ( int ) string . charAt ( i ) ] += 1 ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { char ch = string . charAt ( i ) ; if ( freq [ ( int ) ch ] == 1 ) { return " " + ch ; } } return " - 1" ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; int minx = 1000000000 ; int maxy = 0 ; int index = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int x = input . nextInt ( ) ; int y = input . nextInt ( ) ; minx = Math . min ( minx , x ) ; maxy = Math . max ( maxy , y ) ; a [ i ] [ 0 ] = x ; a [ i ] [ 1 ] = y ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ 0 ] == minx && a [ i ] [ 1 ] == maxy ) { index = i + 1 ; break ; } } if ( index != - 1 ) { System . out . println ( index ) ; } else { System . out . println ( - 1 ) ; } } }
public class Main { public static void main ( String [ ] args ) { double lowlimit = 0 ; double upplimit = 4 ; System . out . println ( " f ( x ) ▁ = " + Math . round ( BooleRule ( 0 , 4 ) , 4 ) ) ; } public static double y ( double x ) { return ( 1 / ( 1 + x ) ) ; } public static double BooleRule ( double a , double b ) { int n = 4 ; double h = ( ( b - a ) / n ) ; double sum = 0 ; double bl = ( 7 * y ( a ) + 32 * y ( a + h ) + 12 * y ( a + 2 * h ) + 32 * y ( a + 3 * h ) + 7 * y ( a + 4 * h ) ) * 2 * h / 45 ; sum = sum + bl ; return sum ; } }
import org . apache . commons . lang3 . ArrayUtils ; public class Main { static int maxN = 20 ; static int maxM = 256 ; static int [ ] [ ] dp = new int [ maxN ] [ maxM ] ; static int [ ] [ ] v = new int [ maxN ] [ maxM ] ; public static void main ( String [ ] args ) { int [ ] arr = { 3 , 7 , 2 , 3 } ; int n = arr . length ; int m = 3 ; int ans = findLen ( arr , 0 , ( ( 1 << 8 ) - 1 ) , n , m ) ; if ( ans == - 1 ) { System . out . println ( 0 ) ; } else { System . out . println ( ans ) ; } } public static int findLen ( int [ ] arr , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) { return 0 ; } else { return - 1 ; } } if ( v [ i ] [ curr ] == 1 ) { return dp [ i ] [ curr ] ; } v [ i ] [ curr ] = 1 ; int l = findLen ( arr , i + 1 , curr , n , m ) ; int r = findLen ( arr , i + 1 , curr & arr [ i ] , n , m ) ; dp [ i ] [ curr ] = l ; if ( r != - 1 ) { dp [ i ] [ curr ] = Math . max ( dp [ i ] [ curr ] , r + 1 ) ; } return dp [ i ] [ curr ] ; } }
import org . apache . commons . lang3 . ArrayUtils ; public class Main { static int maxN = 20 ; static int maxM = 64 ; static int [ ] [ ] dp = new int [ maxN ] [ maxM ] ; static int [ ] [ ] v = new int [ maxN ] [ maxM ] ; public static void main ( String [ ] args ) { int [ ] arr = { 3 , 7 , 2 , 3 } ; int n = arr . length ; int m = 3 ; int ans = findLen ( arr , 0 , 0 , n , m ) ; if ( ans == - 1 ) { System . out . println ( 0 ) ; } else { System . out . println ( ans ) ; } } public static int findLen ( int [ ] arr , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) { return 0 ; } else { return - 1 ; } } if ( v [ i ] [ curr ] == 1 ) { return dp [ i ] [ curr ] ; } v [ i ] [ curr ] = 1 ; int l = findLen ( arr , i + 1 , curr , n , m ) ; int r = findLen ( arr , i + 1 , curr | arr [ i ] , n , m ) ; dp [ i ] [ curr ] = l ; if ( r != - 1 ) { dp [ i ] [ curr ] = Math . max ( dp [ i ] [ curr ] , r + 1 ) ; } return dp [ i ] [ curr ] ; } }
while ( true ) { int N = Integer . parseInt ( System . console ( ) . readLine ( ) ) ; if ( N == 0 ) break ; int [ ] [ ] R = new int [ N + 1 ] [ N + 1 ] ; int dfs_max ( int cur , int pre ) { int max = - R [ cur ] [ pre ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { if ( R [ cur ] [ i ] > 0 && i != pre ) { max = Math . max ( max , dfs_max ( i , cur ) + R [ cur ] [ i ] ) ; } } return max ; } int total = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { String [ ] input = System . console ( ) . readLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int t = Integer . parseInt ( input [ 2 ] ) ; R [ a ] [ b ] = t ; R [ b ] [ a ] = t ; total += ( t * 2 ) ; } for ( int i = 2 ; i < N + 1 ; i ++ ) { int [ ] spam = Arrays . stream ( R [ i ] ) . filter ( x -> x > 0 ) . toArray ( ) ; if ( spam . length <= 1 ) { total -= ( spam [ 0 ] * 2 ) ; } } System . out . println ( ( total - dfs_max ( 1 , 0 ) ) ) ; }
import java . util . Scanner ; public class Main { static int N ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; N = scanner . nextInt ( ) ; System . out . println ( aaa ( "0" ) ) ; } static int aaa ( String n ) { if ( Integer . parseInt ( n ) > N ) { return 0 ; } int ans = ( n . contains ( "7" ) && n . contains ( "5" ) && n . contains ( "3" ) ) ? 1 : 0 ; for ( char i : "753" . toCharArray ( ) ) { ans += aaa ( n + i ) ; } return ans ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 100 , 300 , 200 , 1000 , 20 , 30 } ; int n = arr . length ; int k = 3 ; System . out . println ( minDiff ( arr , n , k ) ) ; } public static int minDiff ( int [ ] arr , int n , int k ) { int result = Integer . MAX_VALUE ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) { result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ; } return result ; } }
import java . util . * ; class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int TOTAL = Integer . parseInt ( scanner . nextLine ( ) . trim ( ) ) ; List < List < Integer > > balls = new ArrayList < > ( ) ; for ( int i = 0 ; i < TOTAL ; i ++ ) { String [ ] line = scanner . nextLine ( ) . trim ( ) . split ( " ▁ " ) ; List < Integer > ball = new ArrayList < > ( ) ; for ( String s : line ) { ball . add ( Integer . parseInt ( s ) ) ; } balls . add ( ball ) ; } for ( List < Integer > ball : balls ) { VesselClass vessel = new VesselClass ( ) ; vessel . fill ( ball ) ; vessel . DFS ( ) ; } } } class VesselClass { private List < Integer > tmp ; private List < Integer > left ; private List < Integer > right ; public VesselClass ( ) { tmp = new ArrayList < > ( ) ; left = new ArrayList < > ( ) ; right = new ArrayList < > ( ) ; left . add ( 0 ) ; right . add ( 0 ) ; } public void fill ( List < Integer > balls ) { tmp = balls ; } public void DFS ( ) { if ( tmp . size ( ) == 0 ) { System . out . println ( " YES " ) ; } else if ( left . get ( left . size ( ) - 1 ) < tmp . get ( 0 ) ) { left . add ( tmp . get ( 0 ) ) ; tmp . remove ( 0 ) ; DFS ( ) ; } else if ( right . get ( right . size ( ) - 1 ) < tmp . get ( 0 ) ) { right . add ( tmp . get ( 0 ) ) ; tmp . remove ( 0 ) ; DFS ( ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int x = scanner . nextInt ( ) ; System . out . println ( solve ( x ) ) ; } } public static int solve ( int x ) { int y = 0 ; int j = 1 ; while ( y < x ) { y += j ; if ( y == x ) { return j ; } j ++ ; } if ( y - x == 1 ) { return j ; } else { return j - 1 ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 15 , 15 , 17 , 18 , 21 } ; int n = arr . length ; System . out . println ( meanAbsoluteDeviation ( arr , n ) ) ; } public static int mean ( int [ ] arr , int n ) { int sm = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sm = sm + arr [ i ] ; } return sm / n ; } public static double meanAbsoluteDeviation ( int [ ] arr , int n ) { double absSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { absSum = absSum + Math . abs ( arr [ i ] - mean ( arr , n ) ) ; } return absSum / n ; } }
import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { final int LIMIT = ( int ) Math . pow ( 10 , 9 ) ; ArrayList < Integer > primes = eulerlib . listPrimes ( 100 ) ; return Integer . toString ( count ( 0 , 1 , primes , LIMIT ) ) ; } public static int count ( int primeIndex , int product , ArrayList < Integer > primes , int limit ) { if ( primeIndex == primes . size ( ) ) { return product <= limit ? 1 : 0 ; } else { int result = 0 ; while ( product <= limit ) { result += count ( primeIndex + 1 , product , primes , limit ) ; product *= primes . get ( primeIndex ) ; } return result ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 7 ; int l = 2 ; int r = 23 ; System . out . println ( " The ▁ output ▁ is ▁ " + maximumXOR ( n , l , r ) ) ; } public static int maximumXOR ( int n , int l , int r ) { int x = 0 ; for ( int i = ( int ) ( Math . log ( r ) / Math . log ( 2 ) ) ; i >= 0 ; i -- ) { if ( ( n & ( 1 << i ) ) != 0 ) { if ( x > r || x + ( 1 << i ) - 1 < l ) { x ^= ( 1 << i ) ; } } else { if ( ( x ^ ( 1 << i ) ) <= r ) { x ^= ( 1 << i ) ; } } } return n ^ x ; } }
public class Main { public static void main ( String [ ] args ) { int N = 40 ; System . out . println ( maxPrimefactorNum ( N ) ) ; } public static int maxPrimefactorNum ( int N ) { boolean [ ] arr = new boolean [ N + 5 ] ; for ( int k = 0 ; k < arr . length ; k ++ ) { arr [ k ] = true ; } int i = 3 ; while ( i * i <= N ) { if ( arr [ i ] ) { for ( int j = i * i ; j <= N ; j += i ) { arr [ j ] = false ; } } i += 2 ; } List < Integer > prime = new ArrayList < > ( ) ; prime . add ( 2 ) ; for ( i = 3 ; i <= N ; i += 2 ) { if ( arr [ i ] ) { prime . add ( i ) ; } } i = 0 ; int ans = 1 ; while ( ans * prime . get ( i ) <= N && i < prime . size ( ) ) { ans *= prime . get ( i ) ; i ++ ; } return ans ; } }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; int ans = countTrailingZeros ( n ) ; System . out . println ( ans ) ; } public static int countTrailingZeros ( int n ) { String bit = Integer . toBinaryString ( n ) ; bit = new StringBuilder ( bit ) . reverse ( ) . toString ( ) ; int zero = 0 ; for ( int i = 0 ; i < bit . length ( ) ; i ++ ) { if ( bit . charAt ( i ) == '0' ) { zero ++ ; } else { break ; } } return zero ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int case_1 = a + b + c ; int case_2 = a + a + b + b ; int case_3 = a + c + c + a ; int case_4 = b + c + c + b ; System . out . println ( Math . min ( Math . min ( case_1 , case_2 ) , Math . min ( case_3 , case_4 ) ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] p = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { p [ j ] = Integer . parseInt ( input [ j ] ) ; } int result = 0 ; int c = 0 ; while ( c < n - 1 ) { if ( p [ c ] > p [ c + 1 ] ) { result += 1 ; c += 1 ; } c += 1 ; } System . out . println ( result ) ; } } }
public class Main { public static void main ( String [ ] args ) { String P = " abcde " ; String Q = "12345678912345678912345678" ; int K = 5 ; int N = P . length ( ) ; System . out . println ( distinctSubstring ( P , Q , K , N ) ) ; } public static int distinctSubstring ( String P , String Q , int K , int N ) { Set < String > S = new HashSet < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int sum = 0 ; String s = " " ; for ( int j = i ; j < N ; j ++ ) { int pos = ( int ) P . charAt ( j ) - 97 ; sum = sum + ( int ) Q . charAt ( pos ) - 48 ; s += P . charAt ( j ) ; if ( sum <= K ) { S . add ( s ) ; } else { break ; } } } return S . size ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { String string = "1356425" ; char [ ] arr = string . toCharArray ( ) ; String result = new String ( makeEven ( arr , arr . length ) ) ; System . out . println ( result ) ; } public static char [ ] makeEven ( char [ ] arr , int n ) { int first_e_i = - 1 ; int last_e_i = - 1 ; int last_n_i = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Integer . parseInt ( String . valueOf ( arr [ i ] ) ) % 2 == 0 && Integer . parseInt ( String . valueOf ( arr [ i ] ) ) < Integer . parseInt ( String . valueOf ( arr [ last_n_i ] ) ) ) { first_e_i = i ; break ; } if ( Integer . parseInt ( String . valueOf ( arr [ i ] ) ) % 2 == 0 ) { last_e_i = i ; } } if ( first_e_i != - 1 ) { char temp = arr [ first_e_i ] ; arr [ first_e_i ] = arr [ last_n_i ] ; arr [ last_n_i ] = temp ; return arr ; } if ( first_e_i == - 1 && last_e_i != - 1 ) { char temp = arr [ last_e_i ] ; arr [ last_e_i ] = arr [ last_n_i ] ; arr [ last_n_i ] = temp ; return arr ; } return arr ; } }
public class Main { public static void findDivisors ( int n ) { int [ ] div = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( j * i <= n ) { div [ i * j ] += 1 ; } } } for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( div [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 10 ; findDivisors ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String a = scanner . nextLine ( ) ; String b = scanner . nextLine ( ) ; int [ ] numOf0 = new int [ b . length ( ) + 1 ] ; int [ ] numOf1 = new int [ b . length ( ) + 1 ] ; int r = 0 ; for ( int i = 0 ; i < b . length ( ) ; i ++ ) { numOf0 [ i ] = 0 ; numOf1 [ i ] = 0 ; } for ( int i = 0 ; i < b . length ( ) ; i ++ ) { numOf0 [ i ] = numOf0 [ i - 1 ] + ( b . charAt ( i ) == '0' ? 1 : 0 ) ; numOf1 [ i ] = numOf1 [ i - 1 ] + ( b . charAt ( i ) == '1' ? 1 : 0 ) ; } for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == '0' ) { r += numOf1 [ b . length ( ) - a . length ( ) + i ] - numOf1 [ i - 1 ] ; } else { r += numOf0 [ b . length ( ) - a . length ( ) + i ] - numOf0 [ i - 1 ] ; } } System . out . println ( r ) ; } }
public class Main { static final int MAX_CHAR = 256 ; public static void printDistinct ( String Str ) { int n = Str . length ( ) ; int [ ] count = new int [ MAX_CHAR ] ; int [ ] index = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = ( int ) Str . charAt ( i ) ; count [ x ] ++ ; if ( count [ x ] == 1 && x != ' ▁ ' ) { index [ x ] = i ; } if ( count [ x ] == 2 ) { index [ x ] = n ; } } Arrays . sort ( index ) ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( index [ i ] == n ) { break ; } System . out . print ( Str . charAt ( index [ i ] ) ) ; } } public static void main ( String [ ] args ) { String Str = " GeeksforGeeks " ; printDistinct ( Str ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int x = 5 ; int k = 2 ; int m = 3 ; System . out . println ( calculate ( x , k , m ) ) ; } public static int calculate ( int x , int k , int m ) { int result = x ; k = k - 1 ; while ( k > 0 ) { result = ( int ) Math . pow ( result , x ) ; if ( result > m ) { result = result % m ; } k = k - 1 ; } return result ; } }
public class Main { public static void main ( String [ ] args ) { int n = 18720 ; convertThenumber ( n ) ; } public static void convertThenumber ( int n ) { String s = String . valueOf ( n ) ; String res = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' || s . charAt ( i ) == '3' || s . charAt ( i ) == '5' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) { res += s . charAt ( i ) ; } if ( res . length ( ) == 2 ) { break ; } } if ( res . length ( ) == 2 ) { System . out . println ( res ) ; } else { System . out . println ( " - 1" ) ; } } }
``` java import java . util . Scanner ; public class Main { public static void solve ( ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String s = scanner . next ( ) ; for ( int a = 0 ; a < 26 ; a ++ ) { char c = ( char ) ( a + ' a ' ) ; if ( s . indexOf ( c ) == - 1 ) { System . out . println ( c ) ; return ; } } for ( int a = 0 ; a < 26 ; a ++ ) { char c1 = ( char ) ( a + ' a ' ) ; for ( int b = 0 ; b < 26 ; b ++ ) { char c2 = ( char ) ( b + ' a ' ) ; String c = " " + c1 + c2 ; if ( s . indexOf ( c ) == - 1 ) { System . out . println ( c ) ; return ; } } } for ( int a = 0 ; a < 26 ; a ++ ) { char c1 = ( char ) ( a + ' a ' ) ; for ( int b = 0 ; b < 26 ; b ++ ) { char c2 = ( char ) ( b + ' a ' ) ; String c4 = " " + c1 + c2 ; for ( int d = 0 ; d < 26 ; d ++ ) { char c3 = ( char ) ( d + ' a ' ) ; String c = " " + c4 + c3 ; if ( s . indexOf ( c ) == - 1 ) { System . out . println ( c ) ; return ; } } } } } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; while ( t != 0 ) { t -- ; solve ( ) ; } } } ```
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > l = new ArrayList < > ( ) ; for ( String s : input ) { l . add ( Integer . parseInt ( s ) ) ; } Set < Integer > a = new HashSet < > ( l ) ; List < Integer > l1 = new ArrayList < > ( ) ; for ( int j = 1 ; j <= n ; j ++ ) { l1 . add ( Math . max ( j , a . size ( ) ) ) ; } for ( int num : l1 ) { System . out . print ( num + " ▁ " ) ; } System . out . println ( ) ; } } }
public class Main { public static void main ( String [ ] args ) { int N = 3 ; int M = 3 ; System . out . println ( trace ( N , M ) ) ; } public static int sn ( int n , int an ) { return ( n * ( 1 + an ) ) / 2 ; } public static int trace ( int n , int m ) { int an = 1 + ( n - 1 ) * ( m + 1 ) ; int rowmajorSum = sn ( n , an ) ; an = 1 + ( n - 1 ) * ( n + 1 ) ; int colmajorSum = sn ( n , an ) ; return ( int ) ( rowmajorSum + colmajorSum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int h = scanner . nextInt ( ) ; int w = scanner . nextInt ( ) ; scanner . nextLine ( ) ; char [ ] [ ] s = new char [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { s [ i ] = scanner . nextLine ( ) . toCharArray ( ) ; } int ans = 0 ; int [ ] ci = new int [ w ] ; for ( int i = h - 1 ; i >= 0 ; i -- ) { int co = 0 ; for ( int j = w - 1 ; j >= 0 ; j -- ) { if ( s [ i ] [ j ] == ' J ' ) { ans += co * ci [ j ] ; } else if ( s [ i ] [ j ] == ' O ' ) { co ++ ; } else if ( s [ i ] [ j ] == ' I ' ) { ci [ j ] ++ ; } } } System . out . println ( ans ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 12 ; int k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } public static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( i % k == 0 ) { count ++ ; } if ( ( n / i ) % k == 0 ) { count ++ ; } } } if ( i * i == n && i % k == 0 ) { count -- ; } return count ; } }
public class Main { public static void main ( String [ ] args ) { int n = 12 ; int k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } public static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 && i % k == 0 ) { count ++ ; } } return count ; } }
public class Main { public static void main ( String [ ] args ) { int X = 6 ; int N = 14 ; int M = 9 ; System . out . println ( findModuloByM ( X , N , M ) ) ; } public static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) != 0 ) { res = ( res * x ) % p ; } y = y >> 1 ; x = ( x * x ) % p ; } return res ; } public static int findModuloByM ( int X , int N , int M ) { if ( N < 6 ) { String temp = String . valueOf ( X ) . repeat ( N ) ; int res = Integer . parseInt ( temp ) % M ; return res ; } if ( N % 2 == 0 ) { int half = findModuloByM ( X , N / 2 , M ) % M ; int res = ( half * power ( 10 , N / 2 , M ) + half ) % M ; return res ; } else { int half = findModuloByM ( X , N / 2 , M ) % M ; int res = ( half * power ( 10 , N / 2 + 1 , M ) + half * 10 + X ) % M ; return res ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = input . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { p [ j ] = input . nextInt ( ) ; } int m = input . nextInt ( ) ; int [ ] q = new int [ m ] ; for ( int j = 0 ; j < m ; j ++ ) { q [ j ] = input . nextInt ( ) ; } int [ ] even_p = new int [ n ] ; int [ ] odd_p = new int [ n ] ; int [ ] even_q = new int [ m ] ; int [ ] odd_q = new int [ m ] ; int even_p_count = 0 ; int odd_p_count = 0 ; int even_q_count = 0 ; int odd_q_count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( p [ j ] % 2 == 0 ) { even_p [ even_p_count ] = p [ j ] ; even_p_count ++ ; } else { odd_p [ odd_p_count ] = p [ j ] ; odd_p_count ++ ; } } for ( int j = 0 ; j < m ; j ++ ) { if ( q [ j ] % 2 == 0 ) { even_q [ even_q_count ] = q [ j ] ; even_q_count ++ ; } else { odd_q [ odd_q_count ] = q [ j ] ; odd_q_count ++ ; } } System . out . println ( even_q_count * even_p_count + odd_q_count * odd_p_count ) ; } } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 9 , 15 , 4 , 12 , 13 } ; int n = arr . length ; System . out . println ( findMaxDiff ( arr , n ) ) ; } public static int findMaxDiff ( int [ ] a , int n ) { if ( n < 2 ) { System . out . println ( " Invalid " ) ; return 0 ; } int min_val = Integer . MAX_VALUE ; int max_val = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] - i ) > max_val ) { max_val = a [ i ] - i ; } if ( ( a [ i ] - i ) < min_val ) { min_val = a [ i ] - i ; } } return ( max_val - min_val ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String h = " # " ; String [ ] [ ] f = new String [ ] [ ] { new String [ n + 2 ] } ; String [ ] [ ] a = new String [ f . length + n + f . length * 2 ] [ n + 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { String input = scanner . nextLine ( ) ; a [ i + 1 ] = ( h + input + h ) . split ( " " ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i + 1 ] [ j + 1 ] . compareTo ( h ) > 0 ) { for ( int [ ] pair : new int [ ] [ ] { { 2 , 0 } , { 2 , 1 } , { 2 , 2 } , { 3 , 1 } } ) { int k = pair [ 0 ] ; int l = pair [ 1 ] ; if ( a [ i + k ] [ j + l ] . equals ( h ) ) { System . out . println ( " NO " ) ; System . exit ( 0 ) ; } a [ i + k ] [ j + l ] = h ; } } } } System . out . println ( " YES " ) ; } }
public class Main { public static void main ( String [ ] args ) { int m = 3 ; int n = 3 ; System . out . println ( numberOfPaths ( m , n ) ) ; } public static int numberOfPaths ( int m , int n ) { int [ ] [ ] count = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { count [ i ] [ 0 ] = 1 ; } for ( int j = 0 ; j < n ; j ++ ) { count [ 0 ] [ j ] = 1 ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] ; } } return count [ m - 1 ] [ n - 1 ] ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int m = scanner . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int n = scanner . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = scanner . nextInt ( ) ; } int s = 0 ; for ( int num : a ) { s += num ; } if ( s % n == 0 ) { boolean containsSOverN = false ; for ( int num : a ) { if ( num == s / n ) { containsSOverN = true ; break ; } } if ( containsSOverN ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } } }
public class Main { public static void main ( String [ ] args ) { int n = 18 ; int l = 1 ; int r = 3 ; if ( bitsAreInAltPatrnInGivenRange ( n , l , r ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isKthBitSet ( int n , int k ) { if ( ( ( n >> ( k - 1 ) ) & 1 ) != 0 ) { return true ; } return false ; } public static int setKthBit ( int n , int k ) { return ( ( 1 << ( k - 1 ) ) | n ) ; } public static boolean allBitsAreSet ( int n ) { if ( ( ( n + 1 ) & n ) == 0 ) { return true ; } return false ; } public static boolean bitsAreInAltOrder ( int n ) { int num = n ^ ( n >> 1 ) ; return allBitsAreSet ( num ) ; } public static boolean bitsAreInAltPatrnInGivenRange ( int n , int l , int r ) { if ( isKthBitSet ( n , r ) ) { int num = n ; int left_shift = r ; } else { int num = setKthBit ( n , ( r + 1 ) ) ; int left_shift = r + 1 ; } num = num & ( ( 1 << left_shift ) - 1 ) ; num = num >> ( l - 1 ) ; return bitsAreInAltOrder ( num ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 , x = 4 , y = 2 ; System . out . println ( ( int ) NumberOfWays ( n , x , y ) ) ; } public static int factorial ( int n ) { if ( n <= 1 ) { return 1 ; } return n * factorial ( n - 1 ) ; } public static int nCr ( int n , int r ) { return factorial ( n ) / ( factorial ( n - r ) * factorial ( r ) ) ; } public static int NumberOfWays ( int n , int x , int y ) { return nCr ( 2 * n - x - y , n - x ) * factorial ( n ) * factorial ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { String [ ] arr = { " geeksforgeeks " , " geeks " , " geek " , " geezer " } ; int n = arr . length ; commonPrefix ( arr , n ) ; } public static void commonPrefix ( String [ ] arr , int n ) { Arrays . sort ( arr ) ; System . out . println ( commonPrefixUtil ( arr [ 0 ] , arr [ n - 1 ] ) ) ; } public static String commonPrefixUtil ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; String result = " " ; int j = 0 ; int i = 0 ; while ( i <= n1 - 1 && j <= n2 - 1 ) { if ( str1 . charAt ( i ) != str2 . charAt ( j ) ) { break ; } result += str1 . charAt ( i ) ; i ++ ; j ++ ; } return result ; } }
import java . util . * ; import java . io . * ; public class Main { static final int mod = 1000000007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] A = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } Arrays . sort ( A ) ; int ans = 0 ; for ( int i = A . length - 2 ; i >= A . length - 2 * n - 1 ; i -= 2 ) { ans += A [ i ] ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int N = input . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = input . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == 0 ) { int now = 0 ; int nex = A [ 0 ] ; count += 1 ; } else { nex = A [ nex - 1 ] ; count += 1 ; } if ( nex == 2 ) { System . out . println ( count ) ; System . exit ( 0 ) ; } } System . out . println ( - 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int a = 0 ; int b = 1 ; for ( int i = 0 ; i < 32 ; i ++ ) { int temp = a ; a = b ; b = temp + b ; } return Integer . toString ( a ) ; } }
public class Main { public static void findFrequencyUtil ( int [ ] arr , int low , int high , int [ ] freq ) { if ( arr [ low ] == arr [ high ] ) { freq [ arr [ low ] ] += high - low + 1 ; } else { int mid = ( low + high ) / 2 ; findFrequencyUtil ( arr , low , mid , freq ) ; findFrequencyUtil ( arr , mid + 1 , high , freq ) ; } } public static void findFrequency ( int [ ] arr , int n ) { int [ ] freq = new int [ n ] ; findFrequencyUtil ( arr , 0 , n - 1 , freq ) ; for ( int i = 0 ; i < arr [ n - 1 ] + 1 ; i ++ ) { if ( freq [ i ] != 0 ) { System . out . println ( " Element ▁ " + i + " ▁ occurs ▁ " + freq [ i ] + " ▁ times " ) ; } } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 1 , 2 , 3 , 3 , 5 , 5 , 8 , 8 , 8 , 9 , 9 , 10 } ; int n = arr . length ; findFrequency ( arr , n ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int [ ] totients = eulerlib . listTotients ( 10000000 - 1 ) ; int minNumer = 1 ; int minDenom = 0 ; for ( int i = 2 ; i < totients . length ; i ++ ) { int tot = totients [ i ] ; if ( i * minDenom < minNumer * tot && Arrays . equals ( sortString ( Integer . toString ( i ) ) , sortString ( Integer . toString ( tot ) ) ) ) { minNumer = i ; minDenom = totients [ i ] ; } } return Integer . toString ( minNumer ) ; } public static char [ ] sortString ( String s ) { char [ ] arr = s . toCharArray ( ) ; Arrays . sort ( arr ) ; return arr ; } } class eulerlib { public static int [ ] listTotients ( int n ) { } }
public class Main { public static void intersection ( int [ ] a , int [ ] b , int n , int m ) { int i = 0 ; int j = 0 ; while ( i < n && j < m ) { if ( a [ i ] > b [ j ] ) { j ++ ; } else { if ( b [ j ] > a [ i ] ) { i ++ ; } else { System . out . print ( a [ i ] + " ▁ " ) ; i ++ ; j ++ ; } } } } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 3 , 3 , 4 , 5 , 5 , 6 } ; int [ ] b = { 3 , 3 , 5 } ; int n = a . length ; int m = b . length ; intersection ( a , b , n , m ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] a = { 3 , 2 , 1 , 4 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } public static int findMin ( int [ ] a , int n ) { double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += Math . log ( a [ i ] ) ; } double x = Math . exp ( sum / n ) ; return ( int ) ( x + 1 ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 5 , 7 } ; int n = arr . length ; System . out . println ( minPerfectSquare ( arr , n ) ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } static int lcmOfArray ( int [ ] arr , int n ) { if ( n < 1 ) { return 0 ; } int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) ; } return lcm ; } static int minPerfectSquare ( int [ ] arr , int n ) { int lcm = lcmOfArray ( arr , n ) ; int minPerfectSq = lcm ; int cnt = 0 ; while ( lcm > 1 && lcm % 2 == 0 ) { cnt ++ ; lcm /= 2 ; } if ( cnt % 2 != 0 ) { minPerfectSq *= 2 ; } int i = 3 ; while ( lcm > 1 ) { cnt = 0 ; while ( lcm % i == 0 ) { cnt ++ ; lcm /= i ; } if ( cnt % 2 != 0 ) { minPerfectSq *= i ; } i += 2 ; } return minPerfectSq ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( subarrayCount ( arr , n ) ) ; } public static int subarrayCount ( int [ ] arr , int n ) { int result = 0 ; int fast = 0 ; int slow = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] == 1 ) { fast += 1 ; } else { int length = fast - slow + 1 ; result += length * ( length - 1 ) / 2 ; fast = i ; slow = i ; } } if ( fast != slow ) { int length = fast - slow + 1 ; result += length * ( length - 1 ) / 2 ; } return result ; } }
import java . util . * ; public class Main { static ArrayList < Integer > ans = new ArrayList < > ( ) ; public static void solve ( int n ) { int f = 0 ; int s = 0 ; boolean fs = true ; if ( ( n & 1 ) != 0 ) { n -= 1 ; fs = false ; } while ( n != 0 ) { if ( n == 4 ) { f += 3 ; s += 1 ; n = 0 ; } else if ( ( n / 2 ) % 2 != 0 ) { f += n / 2 ; s += 1 ; n = ( n / 2 ) - 1 ; } else { f += 1 ; s += 1 ; n -= 2 ; } } ans . add ( ( fs ) ? s + 1 : f ) ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; ArrayList < Integer > coins = new ArrayList < > ( ) ; int numCoins = scanner . nextInt ( ) ; for ( int i = 0 ; i < numCoins ; i ++ ) { coins . add ( scanner . nextInt ( ) ) ; } for ( int i : coins ) { if ( i == 1 ) { ans . add ( 1 ) ; } else { solve ( i ) ; } } for ( int i : ans ) { System . out . println ( i ) ; } } }
Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > a = new ArrayList < > ( ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( String s : inputArr ) { a . add ( Integer . parseInt ( s ) ) ; } System . out . println ( Collections . min ( a ) + " ▁ " + Collections . max ( a ) + " ▁ " + a . stream ( ) . mapToInt ( Integer :: intValue ) . sum ( ) ) ;
import java . util . HashMap ; public class Main { static final int MAX_CHARS = 256 ; static String findSubString ( String strr ) { int n = strr . length ( ) ; if ( n <= 1 ) { return strr ; } int dist_count = ( int ) strr . chars ( ) . distinct ( ) . count ( ) ; HashMap < Character , Integer > curr_count = new HashMap < > ( ) ; int count = 0 ; int start = 0 ; int min_len = n ; for ( int j = 0 ; j < n ; j ++ ) { char c = strr . charAt ( j ) ; curr_count . put ( c , curr_count . getOrDefault ( c , 0 ) + 1 ) ; if ( curr_count . get ( c ) == 1 ) { count ++ ; } if ( count == dist_count ) { while ( curr_count . get ( strr . charAt ( start ) ) > 1 ) { if ( curr_count . get ( strr . charAt ( start ) ) > 1 ) { curr_count . put ( strr . charAt ( start ) , curr_count . get ( strr . charAt ( start ) ) - 1 ) ; } start ++ ; } int len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start_index = start ; } } } return strr . substring ( start_index , start_index + min_len ) ; } public static void main ( String [ ] args ) { System . out . println ( " Smallest ▁ window ▁ containing ▁ all ▁ distinct ▁ characters ▁ is : ▁ " + findSubString ( " aabcbcdbca " ) ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int WATER_A = scanner . nextInt ( ) ; int WATER_B = scanner . nextInt ( ) ; int SUGER_C = scanner . nextInt ( ) ; int SUGER_D = scanner . nextInt ( ) ; int MELT_PER_100 = scanner . nextInt ( ) ; int LIMIT = scanner . nextInt ( ) ; WATER_A *= 100 ; WATER_B *= 100 ; double MELT_PERCENT_LIMIT = concentration ( 100 , MELT_PER_100 ) ; int wa = 0 ; int wb = 0 ; int sc = 0 ; int sd = 0 ; Set < Integer > waterSet = new HashSet < > ( ) ; while ( wa * WATER_A <= LIMIT ) { while ( wb * WATER_B <= LIMIT ) { int water = wa * WATER_A + wb * WATER_B ; if ( water <= LIMIT ) { waterSet . add ( water ) ; } wb ++ ; } wb = 0 ; wa ++ ; } Set < Integer > sugerSet = new HashSet < > ( ) ; while ( sc * SUGER_C <= LIMIT ) { while ( sd * SUGER_D <= LIMIT ) { int suger = sc * SUGER_C + sd * SUGER_D ; if ( suger <= LIMIT ) { sugerSet . add ( suger ) ; } sd ++ ; } sd = 0 ; sc ++ ; } int ansSugerWater = 0 ; int ansSuger = 0 ; double maxConcentration = 0 ; for ( int water : waterSet ) { for ( int suger : sugerSet ) { if ( ! ( 0 < water + suger && water + suger <= LIMIT ) ) { continue ; } double sugerPercent = concentration ( water , suger ) ; if ( maxConcentration <= sugerPercent && sugerPercent <= MELT_PERCENT_LIMIT ) { maxConcentration = sugerPercent ; ansSugerWater = water + suger ; ansSuger = suger ; } } } System . out . println ( ansSugerWater + " ▁ " + ansSuger ) ; } public static double concentration ( int water , int suger ) { return 100 * suger / ( water + suger ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String input = scanner . nextLine ( ) ; String [ ] parts = input . split ( " , " ) ; int [ ] [ ] lines = new int [ parts . length ] [ ] ; for ( int i = 0 ; i < parts . length ; i ++ ) { String [ ] nums = parts [ i ] . split ( " ▁ " ) ; lines [ i ] = new int [ nums . length ] ; for ( int j = 0 ; j < nums . length ; j ++ ) { lines [ i ] [ j ] = Integer . parseInt ( nums [ j ] ) ; } } for ( int i = 1 ; i < lines . length / 2 + 1 ; i ++ ) { for ( int j = 0 ; j < lines [ i ] . length ; j ++ ) { lines [ i ] [ j ] += Math . max ( lines [ i - 1 ] [ Math . max ( j - 1 , 0 ) ] , lines [ i - 1 ] [ Math . min ( j + 1 , lines [ i - 1 ] . length - 1 ) ] ) ; } } for ( int i = lines . length / 2 + 1 ; i < lines . length ; i ++ ) { for ( int j = 0 ; j < lines [ i ] . length ; j ++ ) { lines [ i ] [ j ] += Math . max ( lines [ i - 1 ] [ j ] , lines [ i - 1 ] [ j + 1 ] ) ; } } System . out . println ( lines [ lines . length - 1 ] [ 0 ] ) ; } }
public class Main { public static void countPairs ( int [ ] arr , int n ) { int odd = 0 ; int even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { even += 1 ; } else { odd += 1 ; } } int oddPairs = odd * ( n - 1 ) ; int evenPairs = even * ( n - 1 ) ; System . out . println ( oddPairs ) ; System . out . println ( evenPairs ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 4 , 5 } ; int n = arr . length ; countPairs ( arr , n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int h = input . nextInt ( ) ; for ( int x = 0 ; x < h ; x ++ ) { int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int n = input . nextInt ( ) ; int m = input . nextInt ( ) ; int s = Math . min ( m , b ) ; m -= s ; b -= s ; while ( a % 10 == 0 ) { b += 1 ; a = a / 10 ; } while ( n % 10 == 0 ) { m += 1 ; n = n / 10 ; } String hStr = Integer . toString ( a ) ; String kStr = Integer . toString ( n ) ; if ( hStr . length ( ) + b > kStr . length ( ) + m ) { System . out . println ( " > " ) ; } else if ( hStr . length ( ) + b < kStr . length ( ) + m ) { System . out . println ( " < " ) ; } else { if ( hStr . compareTo ( kStr ) > 0 ) { System . out . println ( " > " ) ; } else if ( hStr . compareTo ( kStr ) < 0 ) { System . out . println ( " < " ) ; } else { System . out . println ( " = " ) ; } } } } }
import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] numbers = new int [ input . length ] ; for ( int i = 0 ; i < input . length ; i ++ ) { numbers [ i ] = Integer . parseInt ( input [ i ] ) ; } int columns = numbers [ 0 ] ; int rows = numbers [ 1 ] ; int counter = - 1 ; HashMap < String , Integer > data = new HashMap < > ( ) ; int stop = 0 ; for ( int i = 0 ; i < columns ; i ++ ) { String x = scanner . nextLine ( ) ; String g = " not " ; String s = " not " ; int count = 0 ; for ( int j = 0 ; j < rows ; j ++ ) { if ( x . charAt ( j ) == ' S ' ) { if ( g . equals ( " found " ) ) { counter = count + 1 ; if ( ! data . containsKey ( String . valueOf ( counter ) ) ) { data . put ( String . valueOf ( counter ) , 1 ) ; } } else { stop = 1 ; } break ; } else if ( x . charAt ( j ) == ' G ' ) { g = " found " ; count = 0 ; } else { count ++ ; } } } System . out . println ( data . size ( ) == 0 || stop == 1 ? - 1 : data . size ( ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 20 , 80 , 30 , 60 , 50 , 110 , 100 , 130 , 170 } ; int x = 130 ; int n = arr . length ; if ( search ( arr , n , x ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean search ( int [ ] arr , int n , int x ) { int front = 0 ; int back = n - 1 ; while ( front <= back ) { if ( arr [ front ] == x || arr [ back ] == x ) { return true ; } front ++ ; back -- ; } return false ; } }
public class Main { public static void countFreq ( int [ ] arr , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , 0 ) ; } mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( arr [ i ] ) != - 1 ) { System . out . println ( arr [ i ] + " ▁ " + mp . get ( arr [ i ] ) ) ; } mp . put ( arr [ i ] , - 1 ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 } ; int n = arr . length ; countFreq ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 2 , 3 } ; int n = arr . length ; System . out . println ( minCostTree ( arr , n ) ) ; } public static int minCostTree ( int [ ] arr , int n ) { int ans = 0 ; List < Integer > st = new ArrayList < > ( ) ; st . add ( ( int ) Math . pow ( 2 , 32 ) ) ; for ( int i = 0 ; i < n ; i ++ ) { while ( st . get ( st . size ( ) - 1 ) <= arr [ i ] ) { int x = st . get ( st . size ( ) - 1 ) ; st . remove ( st . size ( ) - 1 ) ; ans += x * Math . min ( st . get ( st . size ( ) - 1 ) , arr [ i ] ) ; } st . add ( arr [ i ] ) ; } for ( int i = 2 ; i < st . size ( ) ; i ++ ) { ans += st . get ( i ) * st . get ( i - 1 ) ; } return ans ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String s = scanner . nextLine ( ) ; String t = scanner . nextLine ( ) ; Map < Character , Integer > dic_s = new HashMap < > ( ) ; Map < Character , Integer > dic_t = new HashMap < > ( ) ; for ( int i = 97 ; i < 97 + 26 ; i ++ ) { dic_s . put ( ( char ) i , 0 ) ; dic_t . put ( ( char ) i , 0 ) ; } for ( int i = 0 ; i < n ; i ++ ) { dic_s . put ( s . charAt ( i ) , dic_s . get ( s . charAt ( i ) ) + 1 ) ; dic_t . put ( t . charAt ( i ) , dic_t . get ( t . charAt ( i ) ) + 1 ) ; } if ( ! dic_s . equals ( dic_t ) ) { System . out . println ( - 1 ) ; } else { List < Integer > c = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { while ( true ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { break ; } int target = i + s . substring ( i ) . indexOf ( t . charAt ( i ) ) ; c . add ( target - 1 ) ; char temp = s . charAt ( target - 1 ) ; s = s . substring ( 0 , target - 1 ) + s . charAt ( target ) + temp + s . substring ( target + 1 ) ; } } List < Integer > cPlusOne = new ArrayList < > ( ) ; for ( int el : c ) { cPlusOne . add ( el + 1 ) ; } System . out . println ( cPlusOne . size ( ) ) ; for ( int el : cPlusOne ) { System . out . print ( el + " ▁ " ) ; } } } }
public class Main { public static void findEquation ( int a , int b ) { int summ = ( a + b ) ; int product = ( a * b ) ; System . out . println ( " x ^ 2 ▁ - ▁ ( " + summ + " x ) ▁ + ▁ ( " + product + " ) ▁ = ▁ 0" ) ; } public static void main ( String [ ] args ) { int a = 2 ; int b = 3 ; findEquation ( a , b ) ; } }
public class Main { public static void circle_equation ( int x1 , int y1 , int r ) { int a = - 2 * x1 ; int b = - 2 * y1 ; int c = ( r * r ) - ( x1 * x1 ) - ( y1 * y1 ) ; System . out . print ( " x ^ 2 ▁ + ▁ ( " + a + " x ) ▁ + ▁ " ) ; System . out . print ( " y ^ 2 ▁ + ▁ ( " + b + " y ) ▁ = ▁ " ) ; System . out . print ( c + " . " ) ; } public static void main ( String [ ] args ) { int x1 = 2 ; int y1 = - 3 ; int r = 8 ; circle_equation ( x1 , y1 , r ) ; } }
public class Main { static void uniqueCombination ( int l , int sum , int K , ArrayList < Integer > local , int [ ] A ) { if ( sum == K ) { System . out . print ( " { " ) ; for ( int i = 0 ; i < local . size ( ) ; i ++ ) { if ( i != 0 ) { System . out . print ( " ▁ " ) ; } System . out . print ( local . get ( i ) ) ; if ( i != local . size ( ) - 1 ) { System . out . print ( " , ▁ " ) ; } } System . out . println ( " } " ) ; return ; } for ( int i = l ; i < A . length ; i ++ ) { if ( sum + A [ i ] > K ) { continue ; } if ( i == 1 && A [ i ] == A [ i - 1 ] && i > l ) { continue ; } local . add ( A [ i ] ) ; uniqueCombination ( i + 1 , sum + A [ i ] , K , local , A ) ; local . remove ( local . size ( ) - 1 ) ; } } static void combination ( int [ ] A , int K ) { Arrays . sort ( A ) ; ArrayList < Integer > local = new ArrayList < > ( ) ; uniqueCombination ( 0 , 0 , K , local , A ) ; } public static void main ( String [ ] args ) { int [ ] A = { 10 , 1 , 2 , 7 , 6 , 1 , 5 } ; int K = 8 ; combination ( A , K ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] prices = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { prices [ i ] = scanner . nextInt ( ) ; } Arrays . sort ( prices ) ; int m = scanner . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int query = scanner . nextInt ( ) ; int index = Arrays . binarySearch ( prices , query ) ; if ( index < 0 ) { index = - index - 1 ; } else { while ( index < n && prices [ index ] == query ) { index ++ ; } } System . out . println ( index ) ; } } }
String z = " abcdefghijklmnopqrstuvwxyz " ; public static String f ( String x ) { for ( int i = 1 ; i < 26 ; i += 2 ) { for ( int j = 0 ; j < 26 ; j ++ ) { StringBuilder a = new StringBuilder ( ) ; for ( char c : x . toCharArray ( ) ) { if ( z . indexOf ( c ) != - 1 ) { a . append ( z . charAt ( ( z . indexOf ( c ) * i + j ) % 26 ) ) ; } else { a . append ( c ) ; } } if ( a . toString ( ) . contains ( " that " ) || a . toString ( ) . contains ( " this " ) ) { return a . toString ( ) ; } } } return " " ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( f ( scanner . nextLine ( ) ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int a = 2 ; int b = 4 ; int n = 3 ; if ( findNature ( a , b , n ) ) { System . out . print ( " Odd ▁ " ) ; } else { System . out . print ( " Even ▁ " ) ; } } public static boolean findNature ( int a , int b , int n ) { if ( n == 0 ) { return ( a & 1 ) == 1 ; } if ( n == 1 ) { return ( b & 1 ) == 1 ; } if ( ( a & 1 ) == 0 ) { if ( ( b & 1 ) == 0 ) { return false ; } else { return ( n % 3 != 0 ) ; } } else { if ( ( b & 1 ) == 0 ) { return ( ( n - 1 ) % 3 != 0 ) ; } else { return ( ( n + 1 ) % 3 != 0 ) ; } } } }
``` java import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int d = scanner . nextInt ( ) ; int e = scanner . nextInt ( ) ; if ( d == 0 ) { break ; } ArrayList < Double > data = new ArrayList < > ( ) ; for ( int i = 0 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j <= 100 ; j ++ ) { data . add ( Math . abs ( ( Math . sqrt ( i * i + j * j ) - e ) , i , j ) ) ; } } Collections . sort ( data ) ; for ( Double p : data ) { if ( p [ 1 ] + p [ 2 ] == d ) { System . out . println ( p [ 0 ] ) ; break ; } } } } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , - 2 , 4 , 3 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } public static int maxSum ( int [ ] a , int n ) { int [ ] dp = new int [ n ] ; if ( n == 1 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; } else if ( n == 2 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; dp [ 1 ] = Math . max ( a [ 1 ] , dp [ 0 ] ) ; } else if ( n >= 3 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; dp [ 1 ] = Math . max ( a [ 1 ] , Math . max ( 0 , a [ 0 ] ) ) ; dp [ 2 ] = Math . max ( a [ 2 ] , Math . max ( a [ 1 ] , Math . max ( 0 , a [ 0 ] ) ) ) ; int i = 3 ; while ( i < n ) { dp [ i ] = Math . max ( dp [ i - 1 ] , a [ i ] + dp [ i - 3 ] ) ; i ++ ; } } return dp [ n - 1 ] ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String sentence = scanner . nextLine ( ) ; int start = - 1 ; String letter = " " ; while ( true ) { if ( sentence . charAt ( start ) != ' ▁ ' && sentence . charAt ( start ) != ' ? ' ) { letter = String . valueOf ( sentence . charAt ( start ) ) ; break ; } start -- ; } if ( " aeiouy " . contains ( letter . toLowerCase ( ) ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . lang . * ; public class Main { public static void main ( String [ ] args ) { int n = 4 ; int k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 ; k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } public static int minimumX ( int n , int k ) { int mini = Integer . MAX_VALUE ; int i = 1 ; while ( i * i <= n ) { if ( n % i == 0 ) { int fir = i ; int sec = n / i ; int num1 = fir * k + sec ; int res = ( num1 / k ) * ( num1 % k ) ; if ( res == n ) { mini = Math . min ( num1 , mini ) ; } int num2 = sec * k + fir ; res = ( num2 / k ) * ( num2 % k ) ; if ( res == n ) { mini = Math . min ( num2 , mini ) ; } } i ++ ; } return mini ; } }
``` java import java . util . * ; public class Main { static boolean [ ] visited ; static Map < Integer , List < Integer > > graph ; public static int findLongest ( int node ) { visited [ node ] = true ; if ( ! graph . containsKey ( node ) ) { return 1 ; } int maxChild = 0 ; for ( int i : graph . get ( node ) ) { if ( visited [ i ] ) { continue ; } maxChild = Math . max ( maxChild , findLongest ( i ) ) ; } return maxChild + 1 ; } public static int dfs ( int node , int [ ] FF ) { int [ ] vis = new int [ FF . length ] ; Arrays . fill ( vis , 0 ) ; vis [ node ] = 1 ; int size = 1 ; int tmp = node ; while ( true ) { tmp = FF [ tmp ] ; if ( tmp == node ) { return size ; } if ( vis [ tmp ] == 1 ) { return 0 ; } vis [ tmp ] = 1 ; size ++ ; } } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int Q = scanner . nextInt ( ) ; for ( int q = 0 ; q < Q ; q ++ ) { int N = scanner . nextInt ( ) ; int [ ] FF = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { FF [ i ] = scanner . nextInt ( ) ; } graph = new HashMap < > ( ) ; visited = new boolean [ N + 1 ] ; int doubleCount = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( i == FF [ FF [ i ] ] && ! visited [ i ] ) { visited [ i ] = true ; visited [ FF [ i ] ] = true ; int dou = findLongest ( i ) + findLongest ( FF [ i ] ) ; doubleCount += dou ; } } for ( int i = 1 ; i <= N ; i ++ ) { if ( ! visited [ i ] ) { doubleCount = Math . max ( doubleCount , dfs ( i , FF ) ) ; } } System . out . println ( " Case ▁ # " + ( q + 1 ) + " : ▁ " + doubleCount ) ; } } } ```
public class Main { public static void main ( String [ ] args ) { int C = 720 ; int P = 13 ; System . out . println ( SellingPrice ( C , P ) ) ; } public static double SellingPrice ( int CP , int PP ) { double Pdecimal = 1 + ( PP / 100.0 ) ; double res = Pdecimal * CP ; return res ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int c = 0 ; c < t ; c ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] seq = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { seq [ i ] = Integer . parseInt ( input [ i ] ) ; } Integer [ ] posis = new Integer [ n + 1 ] ; for ( int u = 0 ; u < n ; u ++ ) { posis [ seq [ u ] ] = u ; } System . out . print ( 1 ) ; int l = posis [ 1 ] ; int r = posis [ 1 ] ; for ( int num = 2 ; num <= n ; num ++ ) { if ( posis [ num ] < l ) { l = posis [ num ] ; } if ( posis [ num ] > r ) { r = posis [ num ] ; } System . out . print ( num == r - l + 1 ? 1 : 0 ) ; } System . out . println ( ) ; } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int s = scanner . nextInt ( ) ; int ans = digitSum ( n , s ) ; System . out . println ( ans ) ; } public static int f ( int b , int n ) { if ( b > n ) { return n ; } return f ( b , n / b ) + ( n % b ) ; } public static int digitSum ( int n , int s ) { if ( n == s ) { return n + 1 ; } double sqrt = Math . sqrt ( n ) ; int sqrtCeil = ( int ) Math . ceil ( sqrt ) ; for ( int b = 2 ; b <= sqrtCeil ; b ++ ) { if ( f ( b , n ) == s ) { return b ; } } for ( int p = sqrtCeil ; p > 0 ; p -- ) { if ( ( n - s ) % p != 0 ) { continue ; } int b = ( n - s ) / p + 1 ; if ( b < 2 ) { continue ; } if ( f ( b , n ) == s ) { return b ; } } return - 1 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int m = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int maximum = 0 ; for ( int y = 0 ; y <= b ; y ++ ) { int sum = ( m * ( b - y ) + y ) * ( m * ( b - y ) + 1 ) * ( y + 1 ) / 2 ; if ( maximum <= sum ) { maximum = sum ; } else { break ; } } System . out . println ( maximum ) ; } }
public class Main { public static void check ( int n , int m ) { if ( m % n == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static void main ( String [ ] args ) { int n = 5 ; int m = 10 ; check ( n , m ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int j = 0 ; j < n ; j ++ ) { int x = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ x ] ; for ( int i = 0 ; i < x ; i ++ ) { a [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } int p = 0 ; for ( int i = 0 ; i < x - 2 ; i ++ ) { for ( int k = i + 2 ; k < x ; k ++ ) { if ( a [ i ] == a [ k ] ) { p = 1 ; break ; } } if ( p == 1 ) { break ; } } if ( p != 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; if ( a < b ) { System . out . println ( b - a ) ; } else if ( a > b ) { System . out . println ( a - b ) ; } else { System . out . println ( 0 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; String s = scanner . nextLine ( ) . substring ( 0 , n ) ; Map < Character , Character > ls = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { ls . put ( s . charAt ( i ) , s . charAt ( i ) ) ; } for ( int i = 0 ; i < m ; i ++ ) { String [ ] xy = scanner . nextLine ( ) . split ( " ▁ " ) ; char x = xy [ 0 ] . charAt ( 0 ) ; char y = xy [ 1 ] . charAt ( 0 ) ; if ( ! ls . containsKey ( x ) ) { ls . put ( x , x ) ; } if ( ! ls . containsKey ( y ) ) { ls . put ( y , y ) ; } char temp = ls . get ( x ) ; ls . put ( x , ls . get ( y ) ) ; ls . put ( y , temp ) ; } Map < Character , Character > ans = new HashMap < > ( ) ; for ( Map . Entry < Character , Character > entry : ls . entrySet ( ) ) { ans . put ( entry . getValue ( ) , entry . getKey ( ) ) ; } StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { result . append ( ans . get ( s . charAt ( i ) ) ) ; } System . out . println ( result . toString ( ) ) ; } }
public class Main { public static void main ( String [ ] args ) { String string = " geeks " ; char ch = ' e ' ; int N = 2 ; System . out . println ( findNthOccur ( string , ch , N ) ) ; } public static int findNthOccur ( String string , char ch , int N ) { int occur = 0 ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( string . charAt ( i ) == ch ) { occur ++ ; } if ( occur == N ) { return i ; } } return - 1 ; } }
import java . util . * ; import java . util . stream . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] list = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int o = 0 ; List < Integer > a1 = new ArrayList < > ( ) ; int b = mostFrequent ( list ) ; for ( int num : list ) { if ( num == b ) { o = o + 1 ; } else { a1 . add ( num ) ; } } if ( o == 6 ) { System . out . println ( " Elephant " ) ; } if ( o == 5 ) { System . out . println ( " Bear " ) ; } if ( o == 4 ) { if ( a1 . get ( 0 ) == a1 . get ( 1 ) ) { System . out . println ( " Elephant " ) ; } else { System . out . println ( " Bear " ) ; } } if ( 4 > o ) { System . out . println ( " Alien " ) ; } } public static int mostFrequent ( int [ ] list ) { Map < Integer , Integer > occurenceCount = new HashMap < > ( ) ; for ( int num : list ) { occurenceCount . put ( num , occurenceCount . getOrDefault ( num , 0 ) + 1 ) ; } return Collections . max ( occurenceCount . entrySet ( ) , Map . Entry . comparingByValue ( ) ) . getKey ( ) ; } }
import eulerlib ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { long LIMIT = ( long ) Math . pow ( 10 , 15 ) ; long MODULUS = ( long ) Math . pow ( 10 , 9 ) ; long splitcount = ( long ) eulerlib . sqrt ( LIMIT ) ; long splitat = LIMIT / ( splitcount + 1 ) ; long ans = 0 ; for ( long i = 1 ; i <= splitat ; i ++ ) { ans += ( i * i * ( LIMIT / i ) ) ; } for ( long i = 1 ; i <= splitcount ; i ++ ) { ans += ( sumSquares ( LIMIT / ( i + 1 ) , LIMIT / i ) * i ) ; } return String . valueOf ( ans % MODULUS ) ; } public static long sumSquares ( long s , long e ) { return ( e * ( e + 1 ) * ( 2 * e + 1 ) - s * ( s + 1 ) * ( 2 * s + 1 ) ) / 6 ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int iterations = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int _ = 0 ; _ < iterations ; _ ++ ) { String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int k = Integer . parseInt ( input1 [ 1 ] ) ; int z = Integer . parseInt ( input1 [ 2 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = Integer . parseInt ( input2 [ i ] ) ; } int ans = 0 ; int s = 0 ; int mx = 0 ; for ( int i = 0 ; i <= k ; i ++ ) { if ( i < n - 1 ) { mx = Math . max ( mx , a [ i ] + a [ i + 1 ] ) ; } s += a [ i ] ; if ( i % 2 == k % 2 ) { int tmp = ( k - i ) / 2 ; if ( tmp <= z ) { ans = Math . max ( ans , s + mx * tmp ) ; } } } System . out . println ( ans ) ; } } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = input . nextInt ( ) ; } int l = - 1 , r = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != i + 1 ) { l = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != i + 1 ) { r = i ; break ; } } int s = r + 1 ; for ( int i = l ; i < s ; i ++ ) { if ( arr [ i ] == s ) { s -- ; continue ; } else { System . out . println ( 0 + " ▁ " + 0 ) ; System . exit ( 0 ) ; } } System . out . println ( ( l + 1 ) + " ▁ " + ( r + 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; List < List < Integer > > lst = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > tempList = new ArrayList < > ( ) ; for ( String num : inputArr ) { tempList . add ( Integer . parseInt ( num ) ) ; } lst . add ( tempList ) ; } List < Integer > a_start = new ArrayList < > ( ) ; List < Integer > a_end = new ArrayList < > ( ) ; List < Integer > h_start = new ArrayList < > ( ) ; List < Integer > h_end = new ArrayList < > ( ) ; List < Integer > b_start = new ArrayList < > ( ) ; List < Integer > b_end = new ArrayList < > ( ) ; for ( List < Integer > x : lst ) { a_start . add ( x . get ( 0 ) * 60 + x . get ( 1 ) ) ; a_end . add ( x . get ( 2 ) * 60 + x . get ( 3 ) ) ; h_start . add ( x . get ( 4 ) * 60 + x . get ( 5 ) ) ; h_end . add ( x . get ( 6 ) * 60 + x . get ( 7 ) ) ; b_start . add ( x . get ( 8 ) * 60 + x . get ( 9 ) ) ; b_end . add ( x . get ( 10 ) * 60 + x . get ( 11 ) ) ; } List < Set < Integer > > a_sets = makeSets ( a_start , a_end ) ; List < Set < Integer > > h_sets = makeSets ( h_start , h_end ) ; List < Set < Integer > > b_sets = makeSets ( b_start , b_end ) ; int ans = 0 ; for ( Set < Integer > s1 : a_sets ) { for ( Set < Integer > s2 : h_sets ) { for ( Set < Integer > s3 : b_sets ) { ans = Math . max ( ans , s1 . size ( ) + s2 . size ( ) + s3 . size ( ) ) ; } } } System . out . println ( ans ) ; } public static List < Set < Integer > > makeSets ( List < Integer > start , List < Integer > end ) { List < Set < Integer > > sets = new ArrayList < > ( ) ; Set < Integer > member = new HashSet < > ( ) ; for ( int i = 0 ; i < 1440 ; i ++ ) { boolean upd = false ; for ( int j = 0 ; j < start . size ( ) ; j ++ ) { if ( start . get ( j )
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int candidateNum = scanner . nextInt ( ) ; int stoneNum = scanner . nextInt ( ) ; if ( candidateNum == 0 ) { break ; } int order = distributeStone ( candidateNum , stoneNum ) ; System . out . println ( order ) ; } } public static int [ ] getTwoInt ( ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] twoInt = new int [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { twoInt [ i ] = Integer . parseInt ( input [ i ] ) ; } return twoInt ; } public static int distributeStone ( int candidateNum , int stoneNum ) { int bowlStone = stoneNum ; int [ ] candidateList = new int [ candidateNum ] ; int i = 0 ; while ( true ) { int order = i % candidateNum ; if ( bowlStone != 0 ) { candidateList [ order ] += 1 ; bowlStone -= 1 ; } else if ( bowlStone == 0 && candidateList [ order ] == stoneNum ) { return order ; } else { bowlStone = candidateList [ order ] ; candidateList [ order ] = 0 ; } i += 1 ; } } } ```
public static int countTwoIdx ( int [ ] A , int q ) { int ans = 0 ; int left = 0 ; int csum = 0 ; for ( int right = 0 ; right < A . length ; right ++ ) { csum += A [ right ] ; while ( csum > q ) { csum -= A [ left ] ; left ++ ; } ans += right - left + 1 ; } return ans ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int M = scanner . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = scanner . nextInt ( ) ; } int [ ] X = new int [ M ] ; for ( int i = 0 ; i < M ; i ++ ) { X [ i ] = scanner . nextInt ( ) ; } for ( int q : X ) { System . out . println ( countTwoIdx ( A , q ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; for ( int i = 0 ; i < a ; i ++ ) { int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int d = Math . abs ( b - c ) ; if ( d % 10 != 0 ) { System . out . println ( d / 10 + 1 ) ; } else { System . out . println ( d / 10 ) ; } } } }
public class Main { static int maxSize = 100005 ; static boolean [ ] isFib = new boolean [ maxSize ] ; static int [ ] prefix = new int [ maxSize ] ; public static void main ( String [ ] args ) { int [ ] [ ] query = { { 1 , 11 } , { 5 , 15 } , { 2 , 24 } } ; int k = 2 ; int q = query . length ; performQueries ( k , q , query ) ; } public static void performQueries ( int k , int q , int [ ] [ ] query ) { precompute ( k ) ; for ( int i = 0 ; i < q ; i ++ ) { int l = query [ i ] [ 0 ] ; int r = query [ i ] [ 1 ] ; int cnt = prefix [ r ] - prefix [ l - 1 ] ; System . out . println ( cnt ) ; } } public static void precompute ( int k ) { generateFibonacci ( ) ; for ( int i = 1 ; i < maxSize ; i ++ ) { int sum = digitSum ( i ) ; if ( isFib [ sum ] && sum % k == 0 ) { prefix [ i ] ++ ; } } for ( int i = 1 ; i < maxSize ; i ++ ) { prefix [ i ] += prefix [ i - 1 ] ; } } public static void generateFibonacci ( ) { int prev = 0 ; int curr = 1 ; isFib [ prev ] = true ; isFib [ curr ] = true ; while ( curr < maxSize ) { int temp = curr + prev ; if ( temp < maxSize ) { isFib [ temp ] = true ; } prev = curr ; curr = temp ; } } public static int digitSum ( int num ) { int s = 0 ; while ( num != 0 ) { s = s + num % 10 ; num = num / 10 ; } return s ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int x1 = Integer . parseInt ( input1 [ 0 ] ) ; int y1 = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; int x2 = Integer . parseInt ( input2 [ 0 ] ) ; int y2 = Integer . parseInt ( input2 [ 1 ] ) ; String [ ] input3 = scanner . nextLine ( ) . split ( " ▁ " ) ; int x3 = Integer . parseInt ( input3 [ 0 ] ) ; int y3 = Integer . parseInt ( input3 [ 1 ] ) ; int alpha = 0 ; if ( y1 == y2 && y3 < y1 ) { alpha += Math . abs ( x1 - x2 ) ; } if ( y2 == y3 && y1 < y2 ) { alpha += Math . abs ( x2 - x3 ) ; } if ( y3 == y1 && y2 < y3 ) { alpha += Math . abs ( x3 - x1 ) ; } System . out . println ( alpha ) ; } } } ```
public class Main { public static void main ( String [ ] args ) { int N = 10101 ; if ( createStringAndCheckPalindrome ( N ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isPalindrome ( String s ) { int l = s . length ( ) ; for ( int i = 0 ; i < l / 2 ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( l - 1 - i ) ) { return false ; } } return true ; } public static boolean createStringAndCheckPalindrome ( int N ) { String sub = " " + ( char ) N ; String res_str = " " ; int sum = 0 ; while ( N > 0 ) { int digit = N % 10 ; sum += digit ; N = N / 10 ; } while ( res_str . length ( ) < sum ) { res_str += sub ; } if ( res_str . length ( ) > sum ) { res_str = res_str . substring ( 0 , sum ) ; } if ( isPalindrome ( res_str ) ) { return true ; } return false ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; String [ ] soots = { " S " , " H " , " C " , " D " } ; ArrayList < String > sootlist = new ArrayList < > ( ) ; ArrayList < Integer > numlist = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; String soot = input [ 0 ] ; int num = Integer . parseInt ( input [ 1 ] ) ; sootlist . add ( soot ) ; numlist . add ( num ) ; } ArrayList < String > ans_sootlist = new ArrayList < > ( ) ; ArrayList < Integer > ans_numlist = new ArrayList < > ( ) ; for ( String soot : soots ) { for ( int num = 1 ; num <= 13 ; num ++ ) { int flag = 0 ; for ( int i = 0 ; i < sootlist . size ( ) ; i ++ ) { if ( soot . equals ( sootlist . get ( i ) ) && num == numlist . get ( i ) ) { flag = 1 ; break ; } } if ( flag == 1 ) { continue ; } else { ans_sootlist . add ( soot ) ; ans_numlist . add ( num ) ; } } } for ( int i = 0 ; i < ans_sootlist . size ( ) ; i ++ ) { System . out . println ( ans_sootlist . get ( i ) + " ▁ " + ans_numlist . get ( i ) ) ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 6 , 12 , 1 , 18 , 8 } ; int n = arr . length ; System . out . println ( " Sum ▁ of ▁ even ▁ numbers ▁ at ▁ even ▁ indices ▁ is ▁ " + sumEvenAndEvenIndex ( arr , n ) ) ; } public static int sumEvenAndEvenIndex ( int [ ] arr , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i += 2 ) { if ( arr [ i ] % 2 == 0 ) { sum += arr [ i ] ; } } return sum ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String input = scanner . nextLine ( ) ; String ans = " YES " ; List < Character > characters = new ArrayList < > ( ) ; for ( int j = 0 ; j < input . length ( ) ; j ++ ) { char c = input . charAt ( j ) ; if ( characters . size ( ) > 0 && characters . get ( characters . size ( ) - 1 ) == c ) { characters . remove ( characters . size ( ) - 1 ) ; } else { characters . add ( c ) ; } } if ( characters . size ( ) > 0 ) { ans = " NO " ; } System . out . println ( ans ) ; } } }
public class Main { static void printDuplicates ( int [ ] arr , int n ) { int fl = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ arr [ i ] % n ] >= n ) { if ( arr [ arr [ i ] % n ] < 2 * n ) { System . out . print ( arr [ i ] % n + " ▁ " ) ; fl = 1 ; } } arr [ arr [ i ] % n ] += n ; } if ( fl == 0 ) { System . out . print ( " - 1" ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 6 , 3 , 1 , 3 , 6 , 6 } ; int arr_size = arr . length ; printDuplicates ( arr , arr_size ) ; } }
System . out . println ( IntStream . range ( 0 , Integer . parseInt ( input . nextLine ( ) ) ) . mapToDouble ( i -> 1.0 / ( i + 1 ) ) . sum ( ) ) ;
public class Main { public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( Sum ( n ) ) ; } public static int Sum ( int n ) { return n * ( n + 1 ) * ( n + 2 ) / 3 ; } }
public class Main { public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( maxHandshake ( n ) ) ; } public static int maxHandshake ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } }
public class Main { public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( grayCode ( n ) ) ; } public static int grayCode ( int n ) { return n ^ ( n >> 1 ) ; } }
public class Main { public static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( possibleways ( n ) ) ; } public static int possibleways ( int n ) { if ( n % 2 == 1 ) { return 0 ; } else if ( n % 4 == 0 ) { return n / 4 - 1 ; } else { return n / 4 ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( countSetBits ( n ) ) ; } public static int countSetBits ( int n ) { if ( n == 0 ) { return 0 ; } if ( ( n & 1 ) == 1 ) { return 1 + countSetBits ( n >> 1 ) ; } else { return countSetBits ( n >> 1 ) ; } } }
public class Main { public static void main ( String [ ] args ) { int m = 3 ; int n = 2 ; System . out . println ( summ ( m , n ) ) ; } public static int summ ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int m = 3 ; System . out . println ( " SUM ( " + n + " , ▁ " + m + " ) : ▁ " + SUM ( n , m ) ) ; } public static int SUM ( int n , int m ) { if ( m == 1 ) { return ( n * ( n + 1 ) / 2 ) ; } int sum = SUM ( n , m - 1 ) ; return ( int ) ( sum * ( sum + 1 ) / 2 ) ; } }
public class Main { public static int maxLCM ( int n ) { return n * ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( maxLCM ( n ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } public static int findSum ( int n ) { return ( n * ( n + 1 ) * ( n + 1 ) * ( n + 2 ) ) / 12 ; } }
public static int cntWays ( int n ) { if ( n % 2 == 1 ) { return 0 ; } else { return ( n - 2 ) / 4 ; } } public static void main ( String [ ] args ) { int n = 18 ; System . out . println ( cntWays ( n ) ) ; }
public class Main { public static void findCompositeNos ( int n ) { System . out . println ( 9 * n + " ▁ " + 8 * n ) ; } public static void main ( String [ ] args ) { int n = 4 ; findCompositeNos ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( findThirdDigit ( n ) ) ; } public static int findThirdDigit ( int n ) { if ( n < 3 ) { return 0 ; } return ( n % 10 == 1 ) ? 1 : 6 ; } }
public class Main { public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } public static int countMaxIntersect ( int n ) { return ( int ) ( n * ( n - 1 ) / 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sum ( n ) ) ; } public static int sum ( int n ) { if ( n == 1 ) { return 2 ; } else { return ( n * ( n + 1 ) + sum ( n - 1 ) ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 48 ; System . out . println ( highestPowerOf2 ( n ) ) ; } public static int highestPowerOf2 ( int n ) { return ( n & ( ~ ( n - 1 ) ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntersections ( n ) ) ; } public static int countIntersections ( int n ) { return n * ( n - 1 ) / 2 ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String S = scanner . nextLine ( ) ; for ( int i = ( int ) ' a ' ; i <= ( int ) ' z ' ; i ++ ) { if ( S . indexOf ( ( char ) i ) == - 1 ) { System . out . println ( ( char ) i ) ; System . exit ( 0 ) ; } } System . out . println ( " None " ) ; } }
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; String [ ] array = input . nextLine ( ) . split ( " ▁ " ) ; int a = 0 ; while ( a < n ) { array [ a ] = Integer . parseInt ( array [ a ] ) ; a ++ ; } int smallest = Arrays . stream ( array ) . min ( Integer :: compare ) . get ( ) ; Arrays . sort ( array ) ; int i = 1 ; boolean t_or_f = true ; while ( i < n ) { if ( array [ i ] / smallest != ( int ) ( array [ i ] / smallest ) ) { t_or_f = false ; } i ++ ; } if ( t_or_f == true ) { System . out . println ( smallest ) ; } else { System . out . println ( - 1 ) ; } } }
System . out . println ( ( Integer . parseInt ( input ) < 1200 ) ? " ABC " : " ARC " ) ;
import java . io . IOException ; public class Main { public static void main ( String [ ] args ) throws IOException { skipSpaces ( ) ; skipNonSpaces ( ) ; boolean first = true ; for ( int d : dists ( ) ) { if ( first ) { first = false ; System . out . print ( d ) ; } else { System . out . print ( " ▁ " + d ) ; } } System . out . println ( ) ; } public static char skipSpaces ( ) throws IOException { char c = ' ▁ ' ; while ( Character . isWhitespace ( c ) ) { c = ( char ) System . in . read ( ) ; } return c ; } public static char skipNonSpaces ( ) throws IOException { char c = ' _ ' ; while ( c != ' \u0000' && ! Character . isWhitespace ( c ) ) { c = ( char ) System . in . read ( ) ; } return c ; } public static Iterable < Integer > readZeros ( ) throws IOException { return ( ) -> new Iterator < > ( ) { @ Override public boolean hasNext ( ) { try { char c = skipSpaces ( ) ; if ( c == ' \u0000' ) { return false ; } return c == '0' ; } catch ( IOException e ) { return false ; } } @ Override public Integer next ( ) { return 0 ; } } ; } public static Iterable < Integer > dists ( ) throws IOException { return ( ) -> new Iterator < > ( ) { private boolean first = true ; private int k = 0 ; @ Override public boolean hasNext ( ) { try { for ( int z : readZeros ( ) ) { if ( z == 1 ) { if ( first ) { for ( int i = k ; i > 0 ; i -- ) { yield return i ; } first = false ; } else { int h = k / 2 ; for ( int i = 0 ; i <= h ; i ++ ) { yield return i ; } for ( int i = k - h - 1 ; i > 0 ; i -- ) { yield return i ; } } k = 0 ; } k ++ ; } for ( int i = 0 ; i < k ; i ++ ) { yield return i ; } return false ; } catch ( IOException e ) { return false ; } }
public class Main { public static void main ( String [ ] args ) { int x = 12 ; int y = 15 ; int z = 5 ; System . out . println ( " Minimum ▁ of ▁ 3 ▁ numbers ▁ is ▁ " + smallest ( x , y , z ) ) ; } public static int smallest ( int x , int y , int z ) { int c = 0 ; while ( x > 0 && y > 0 && z > 0 ) { x = x - 1 ; y = y - 1 ; z = z - 1 ; c = c + 1 ; } return c ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int d = scanner . nextInt ( ) ; int e = scanner . nextInt ( ) ; int f = scanner . nextInt ( ) ; int sum = a + b * 5 + c * 10 + d * 50 + e * 100 + f * 500 ; System . out . println ( sum >= 1000 ? 1 : 0 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int m = Integer . parseInt ( input [ 0 ] ) ; int r = Integer . parseInt ( input [ 1 ] ) ; double res = 0 ; double sq2 = Math . pow ( 2 , 0.5 ) ; for ( int i = 1 ; i < m ; i ++ ) { res += 2 + sq2 + 2 * sq2 * ( i - 1 ) + ( i - 1 ) * i ; } res = ( res + m ) * 2 * r ; System . out . println ( res / ( m * m ) ) ; } }
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { int a = 7 ; int b = 28 ; System . out . println ( " Count ▁ of ▁ cubes ▁ is ▁ " + countCubes ( a , b ) ) ; } public static int countCubes ( int a , int b ) { return ( int ) ( floor ( pow ( b , 1.0 / 3.0 ) ) - ceil ( pow ( a , 1.0 / 3.0 ) ) + 1 ) ; } }
import java . util . * ; public class Main { static final long INF = ( long ) Math . pow ( 10 , 20 ) ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int d = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; if ( d == 0 ) { break ; } List < List < int [ ] > > item_lst = new ArrayList < > ( ) ; for ( int i = 0 ; i < 101 ; i ++ ) { item_lst . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { int a = scanner . nextInt ( ) ; int e = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; for ( int j = r ; j < 101 ; j ++ ) { item_lst . get ( j ) . add ( new int [ ] { a , e } ) ; } } search ( item_lst , d ) ; } } public static void search ( List < List < int [ ] > > item_lst , int d ) { Map < int [ ] , Boolean > visited = new HashMap < > ( ) ; PriorityQueue < long [ ] > que = new PriorityQueue < > ( Comparator . comparingLong ( a -> a [ 0 ] ) ) ; que . add ( new long [ ] { 0 , 0 , 0 } ) ; while ( ! que . isEmpty ( ) ) { long [ ] current = que . poll ( ) ; long score = current [ 0 ] ; int a = ( int ) current [ 1 ] ; int e = ( int ) current [ 2 ] ; for ( int [ ] item : item_lst . get ( e ) ) { int da = item [ 0 ] ; int de = item [ 1 ] ; int na = a + da ; if ( na >= d ) { System . out . println ( score + 1 ) ; return ; } int ne = e + de ; if ( ne > 100 ) { ne = 100 ; } if ( ! visited . containsKey ( new int [ ] { na , ne } ) ) { visited . put ( new int [ ] { na , ne } , true ) ; que . add ( new long [ ] { score + 1 , na , ne } ) ; } } } System . out . println ( " NA " ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int triangle = 0 ; for ( int i = 1 ; ; i ++ ) { triangle += i ; if ( numDivisors ( triangle ) > 500 ) { return Integer . toString ( triangle ) ; } } } public static int numDivisors ( int n ) { int end = ( int ) Math . sqrt ( n ) ; int result = 0 ; for ( int i = 1 ; i <= end ; i ++ ) { if ( n % i == 0 ) { result += 2 ; } } if ( end * end == n ) { result -= 1 ; } return result ; } }
public class Main { public static void main ( String [ ] args ) { int a = 3 ; int b = 9 ; int c = 3 ; int d = 5 ; System . out . println ( " \u0394X ▁ = ▁ " + findDelta ( a , b , c , d ) ) ; } public static int findDelta ( int a , int b , int c , int d ) { return ( int ) ( ( b * c - a * d ) / ( d - c ) ) ; } }
public class Main { public static void SieveOfEratosthenes ( int n , boolean [ ] isPrime ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) { isPrime [ i ] = true ; } int p = 2 ; while ( p * p <= n ) { if ( isPrime [ p ] ) { int i = p * p ; while ( i <= n ) { isPrime [ i ] = false ; i += p ; } } p ++ ; } } public static void findPrimePair ( int n ) { boolean [ ] isPrime = new boolean [ n + 1 ] ; SieveOfEratosthenes ( n , isPrime ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime [ i ] && isPrime [ n - i ] ) { System . out . println ( i + " ▁ " + ( n - i ) ) ; return ; } } } public static void main ( String [ ] args ) { int n = 74 ; findPrimePair ( n ) ; } }
public class Main { public static void main ( String [ ] args ) { int x = 645 ; int d1 = 6 ; int d2 = 5 ; System . out . println ( replaceDigit ( x , d1 , d2 ) ) ; } public static int replaceDigit ( int x , int d1 , int d2 ) { int result = 0 ; int multiply = 1 ; while ( x % 10 > 0 ) { int remainder = x % 10 ; if ( remainder == d1 ) { result = ( result + d2 * multiply ) ; } else { result = ( result + remainder * multiply ) ; } multiply *= 10 ; x = ( int ) ( x / 10 ) ; } return result ; } }
public class Main { public static void printPattern ( int i , int j , int n ) { if ( j >= n ) { return ; } if ( i >= n ) { return ; } if ( j == i || j == n - 1 - i ) { if ( i == n - 1 - j ) { System . out . print ( " / " ) ; } else { System . out . print ( " \ \" ) ; } } else { System . out . print ( " * " ) ; } if ( printPattern ( i , j + 1 , n ) == 1 ) { return ; } System . out . println ( ) ; printPattern ( i + 1 , 0 , n ) ; } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( 0 , 0 , N ) ; } }
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 5 , 7 , - 1 , 5 } ; int n = arr . length ; int sum = 6 ; System . out . println ( " Count ▁ of ▁ pairs ▁ is ▁ " + getPairsCount ( arr , n , sum ) ) ; } public static int getPairsCount ( int [ ] arr , int n , int sum ) { HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( arr [ i ] ) ) { m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } else { m . put ( arr [ i ] , 1 ) ; } } int twiceCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { twiceCount += m . getOrDefault ( sum - arr [ i ] , 0 ) ; if ( sum - arr [ i ] == arr [ i ] ) { twiceCount -- ; } } return twiceCount / 2 ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 10 , 9 , 12 , 6 } ; int n = arr . length ; System . out . println ( countSubarray ( arr , n ) ) ; } public static int countSubarray ( int [ ] arr , int n ) { int subarraySum , remainingSum , count ; count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { subarraySum = 0 ; remainingSum = 0 ; for ( int k = i ; k <= j ; k ++ ) { subarraySum += arr [ k ] ; } for ( int l = 0 ; l < i ; l ++ ) { remainingSum += arr [ l ] ; } for ( int l = j + 1 ; l < n ; l ++ ) { remainingSum += arr [ l ] ; } if ( subarraySum > remainingSum ) { count ++ ; } } } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { String [ ] inputs = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( inputs [ 0 ] ) ; int x = Integer . parseInt ( inputs [ 1 ] ) ; int a = Integer . parseInt ( inputs [ 2 ] ) ; int b = Integer . parseInt ( inputs [ 3 ] ) ; int p = Math . abs ( a - b ) ; int q = p + x ; if ( q >= n - 1 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( q ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int [ ] s = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = input . nextInt ( ) ; } Arrays . sort ( s ) ; int t = 0 ; for ( int num : s ) { t += num ; } if ( t % 10 != 0 ) { System . out . println ( t ) ; System . exit ( 0 ) ; } for ( int i = 0 ; i < n ; i ++ ) { t = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( j != i ) { t += s [ j ] ; } } if ( t % 10 != 0 ) { System . out . println ( t ) ; System . exit ( 0 ) ; } } System . out . println ( 0 ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; class Main { public static void main ( String [ ] args ) throws java . lang . Exception { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int x = 0 ; x < t ; x ++ ) { int n = input . nextInt ( ) ; int k = input . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = input . nextInt ( ) ; } int res = Integer . MAX_VALUE ; for ( int color = 1 ; color <= 100 ; color ++ ) { int i = 0 ; int day = 0 ; while ( i < n ) { if ( i < n && arr [ i ] != color ) { i += k ; day ++ ; } else { i ++ ; } } res = Math . min ( res , day ) ; } System . out . println ( res ) ; } } }
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 2 , 3 , 5 , 4 } ; int n = 5 ; System . out . println ( " One ▁ of ▁ the ▁ numbers ▁ repeated ▁ in ▁ the ▁ array ▁ is : ▁ " + findRepeatingNumber ( arr , n ) ) ; } public static int findRepeatingNumber ( int [ ] arr , int n ) { double sq = Math . sqrt ( n ) ; int range = ( int ) ( n / sq ) + 1 ; int [ ] count = new int [ range ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { count [ ( int ) ( ( arr [ i ] - 1 ) / sq ) ] += 1 ; } int selectedBlock = range - 1 ; for ( int i = 0 ; i < range - 1 ; i ++ ) { if ( count [ i ] > sq ) { selectedBlock = i ; break ; } } HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n + 1 ; i ++ ) { if ( ( selectedBlock * sq ) < arr [ i ] && arr [ i ] <= ( ( selectedBlock + 1 ) * sq ) ) { m . put ( arr [ i ] , m . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; if ( m . get ( arr [ i ] ) > 1 ) { return arr [ i ] ; } } } return - 1 ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( maxPrimeFactors ( n ) ) ; n = 25698751364526 ; System . out . println ( maxPrimeFactors ( n ) ) ; } public static int maxPrimeFactors ( int n ) { int maxPrime = - 1 ; while ( n % 2 == 0 ) { maxPrime = 2 ; n >>= 1 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { maxPrime = i ; n = n / i ; } } if ( n > 2 ) { maxPrime = n ; } return maxPrime ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int n = scanner . nextInt ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = scanner . nextInt ( ) ; } int count = 0 ; for ( int i : l ) { count += i % 2 ; } System . out . println ( Math . min ( count , n - count ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String s = scanner . nextLine ( ) ; int num_0 = 0 ; int num_1 = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) { num_0 ++ ; } else { num_1 ++ ; } } System . out . println ( Math . min ( num_0 , num_1 ) * 2 ) ; } }
public class Main { public static void pythagoreanTriplet ( int n ) { for ( int i = 1 ; i <= n / 3 ; i ++ ) { for ( int j = i + 1 ; j <= n / 2 ; j ++ ) { int k = n - i - j ; if ( i * i + j * j == k * k ) { System . out . println ( i + " , ▁ " + j + " , ▁ " + k ) ; return ; } } } System . out . println ( " No ▁ Triplet " ) ; } public static void main ( String [ ] args ) { int n = 12 ; pythagoreanTriplet ( n ) ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int a = 33 ; int b = - 24 ; System . out . println ( countDigits ( a , b ) ) ; } public static int countDigits ( int a , int b ) { if ( a == 0 || b == 0 ) { return 1 ; } return ( int ) ( Math . floor ( Math . log10 ( Math . abs ( a ) ) + Math . log10 ( Math . abs ( b ) ) ) + 1 ) ; } }
public class Main { public static int indexOfFirstOne ( int [ ] arr , int low , int high ) { while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == 1 && ( mid == 0 || arr [ mid - 1 ] == 0 ) ) { return mid ; } else if ( arr [ mid ] == 1 ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; } public static int posOfFirstOne ( int [ ] arr ) { int l = 0 ; int h = 1 ; while ( arr [ h ] == 0 ) { l = h ; h = 2 * h ; } return indexOfFirstOne ( arr , l , h ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 0 , 0 , 1 , 1 , 1 , 1 } ; System . out . println ( " Index ▁ = ▁ " + posOfFirstOne ( arr ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; if ( n % 3 == 0 ) { System . out . println ( n / 3 * 2 ) ; } else if ( n < 3 ) { System . out . println ( 1 ) ; } else { System . out . println ( n / 3 * 2 + 1 ) ; } } }
while ( true ) { double n = Double . parseDouble ( System . console ( ) . readLine ( ) ) ; if ( n < 0 ) break ; if ( ( int ) ( n * 16 ) - n * 16 != 0 ) { System . out . println ( " NA " ) ; continue ; } else { String s = Integer . toBinaryString ( ( int ) ( n * 16 ) ) ; while ( s . length ( ) < 12 ) { s = "0" + s ; } System . out . println ( s . substring ( 0 , 8 ) + " . " + s . substring ( 8 ) ) ; } }
public class Main { public static int digSum ( int n ) { int sum = 0 ; int rem ; while ( n != 0 ) { rem = n % 10 ; sum = sum + rem ; n = n / 10 ; } return sum ; } public static int findX ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) { if ( i + digSum ( i ) == n ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { int n = 43 ; System . out . println ( " x ▁ = ▁ " + findX ( n ) ) ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int [ ] P = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] = scanner . nextInt ( ) ; } editorial ( N , P ) ; } public static void editorial ( int N , int [ ] P ) { if ( N == 1 ) { System . out . println ( 0 ) ; return ; } int [ ] a = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ P [ i ] ] = i ; } int tmp = 1 ; int max_len = 1 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) { tmp ++ ; max_len = Math . max ( max_len , tmp ) ; } else { tmp = 1 ; } } int ans = N - max_len ; System . out . println ( ans ) ; } public static void WA ( int N , int [ ] P ) { int tmp = 0 ; int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( i == 0 || P [ i - 1 ] + 1 == P [ i ] ) { tmp ++ ; } else { ans = Math . max ( ans , tmp ) ; tmp = 1 ; } } System . out . println ( N - ans ) ; } }
for ( int i = 0 ; i < 7 ; i ++ ) { Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; System . out . println ( a - b ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 2 , 2 , 1 } ; int [ ] [ ] q = { { 1 , 5 } , { 1 , 4 } , { 3 , 4 } } ; performQueries ( arr , q ) ; } public static void performQueries ( int [ ] A , int [ ] [ ] q ) { int n = A . length ; int [ ] prefXor = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { prefXor [ i ] = prefXor [ i - 1 ] ^ A [ i - 1 ] ; } for ( int [ ] i : q ) { int L = i [ 0 ] ; int R = i [ 1 ] ; if ( L > R ) { int temp = L ; L = R ; R = temp ; } if ( L != R && prefXor [ R ] == prefXor [ L - 1 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; int [ ] l = Arrays . stream ( br . readLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int c = 0 ; Arrays . sort ( l ) ; for ( int i : l ) { if ( i > c ) { c ++ ; } } System . out . println ( c + 1 ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] inputArray1 = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . skip ( 1 ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] inputArray2 = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . skip ( 1 ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] inputArray3 = Arrays . stream ( scanner . nextLine ( ) . split ( " ▁ " ) ) . skip ( 1 ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; Arrays . sort ( inputArray1 ) ; Arrays . sort ( inputArray2 ) ; Arrays . sort ( inputArray3 ) ; int RO = inputArray1 [ inputArray1 . length - 1 ] ; int PO = inputArray2 [ inputArray2 . length - 1 ] ; int PI = inputArray3 [ 0 ] ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int A = Integer . parseInt ( input [ 0 ] ) ; int B = Integer . parseInt ( input [ 1 ] ) ; double result = Math . pow ( Math . pow ( RO , 2 ) / ( ( ( A * PI ) / ( B * PO ) ) + 1 ) , 0.5 ) ; System . out . println ( result ) ; } }
public class Main { public static void main ( String [ ] args ) { int num = 3 ; int lterm = 1 ; int rterm = num * num + 1 ; for ( int i = num ; i >= 1 ; i -- ) { for ( int space = num ; space >= i ; space -- ) { System . out . print ( " ▁ " ) ; } for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( lterm + " * " ) ; lterm ++ ; } for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( rterm ) ; if ( j < i ) { System . out . print ( " * " ) ; } rterm ++ ; } rterm = rterm - ( i - 1 ) * 2 - 1 ; System . out . println ( ) ; } } }
public static void findPerm ( int n , int [ ] differences ) { List < Integer > ans = new ArrayList < > ( ) ; ans . add ( 0 ) ; int x = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = differences [ i ] ; x = x + diff ; ans . add ( x ) ; } List < Integer > anss = new ArrayList < > ( ans ) ; Collections . sort ( ans ) ; int flag = - 1 ; for ( int i = 1 ; i < n ; i ++ ) { int res = ans . get ( i ) - ans . get ( i - 1 ) ; if ( res != 1 ) { flag = 0 ; } } if ( flag == 0 ) { System . out . println ( " - 1" ) ; return ; } else { Map < Integer , Integer > mpp = new HashMap < > ( ) ; int j = 1 ; List < Integer > valueAtIndex = new ArrayList < > ( ) ; for ( int x : ans ) { mpp . put ( x , j ) ; j ++ ; } for ( int x : anss ) { valueAtIndex . add ( mpp . get ( x ) ) ; } for ( int x : valueAtIndex ) { System . out . print ( x + " ▁ " ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int [ ] differences = { 2 , - 3 , 2 } ; int n = differences . length + 1 ; findPerm ( n , differences ) ; }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int n = 10 ; int k = 2 ; System . out . println ( " First ▁ " + n + " ▁ " + k + " - almost ▁ prime ▁ numbers : " ) ; printKAlmostPrimes ( k , n ) ; } public static int countPrimeFactors ( int n ) { int count = 0 ; while ( n % 2 == 0 ) { n = n / 2 ; count ++ ; } int i = 3 ; while ( i <= Math . sqrt ( n ) ) { while ( n % i == 0 ) { n = n / i ; count ++ ; } i = i + 2 ; } if ( n > 2 ) { count ++ ; } return count ; } public static void printKAlmostPrimes ( int k , int n ) { int i = 1 ; int num = 2 ; while ( i <= n ) { if ( countPrimeFactors ( num ) == k ) { System . out . print ( num + " ▁ " ) ; i ++ ; } num ++ ; } } }
public class Main { public static void main ( String [ ] args ) { int N = 29 ; int K = 5 ; System . out . println ( solve ( N , K ) ) ; } public static int solve ( int N , int K ) { int [ ] combo = new int [ N + 1 ] ; combo [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) { combo [ j ] += combo [ j - i ] ; } } } return combo [ N ] ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String X = scanner . nextLine ( ) ; if ( X . equals ( "0" ) ) break ; String r = " " ; boolean minus = false ; if ( X . charAt ( 0 ) == ' - ' ) { minus = true ; X = X . substring ( 1 ) ; } int kuri = 0 ; int idx = X . length ( ) - 1 ; while ( idx >= 0 ) { int a = Character . getNumericValue ( X . charAt ( idx ) ) ; if ( minus ) { r = String . valueOf ( ( 10 - a - kuri ) % 10 ) + r ; kuri = ( kuri + a == 0 ) ? 0 : 1 ; } else { r = String . valueOf ( ( kuri + a ) % 10 ) + r ; kuri = ( kuri + a ) / 10 ; } minus = ! minus ; if ( idx == 0 && kuri > 0 ) { X = "0" + X ; } else { idx -- ; } } r = String . valueOf ( kuri ) + r ; System . out . println ( Integer . parseInt ( r ) ) ; } } } ```
import static java . lang . Math . * ; public class Main { public static void main ( String [ ] args ) { double m = - 5 ; double n = 3 ; System . out . println ( normal ( m , n ) ) ; } public static double normal ( double m , double n ) { double N = ( abs ( m ) * abs ( n ) ) / sqrt ( ( abs ( m ) * abs ( m ) ) + ( abs ( n ) * abs ( n ) ) ) ; return N ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int h = Integer . parseInt ( input [ 1 ] ) ; ArrayList < Double > ans = new ArrayList < Double > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { ans . add ( h * ( Math . pow ( ( double ) i / n , 0.5 ) ) ) ; } for ( double value : ans ) { System . out . print ( value + " ▁ " ) ; } } }
public class Main { public static void main ( String [ ] args ) { int i = 65 ; System . out . println ( countBits ( i ) ) ; } public static int countBits ( int n ) { int count = 0 ; while ( n != 0 ) { count ++ ; n >>= 1 ; } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int h = scanner . nextInt ( ) ; int w = scanner . nextInt ( ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; System . out . println ( h * w - ( a * b * ( ( h / a ) * ( w / b ) ) ) ) ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; int [ ] tlst = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { tlst [ i ] = Integer . parseInt ( scanner . nextLine ( ) ) ; } Arrays . sort ( tlst ) ; int max_t = tlst [ n - 1 ] ; int [ ] divisors = new int [ max_t ] ; int count = 0 ; for ( int i = 1 ; i <= max_t ; i ++ ) { if ( max_t % i == 0 ) { divisors [ count ] = i ; count ++ ; } } int ans = 0 ; for ( int t : tlst ) { int ind = Arrays . binarySearch ( divisors , t ) ; ans += divisors [ ind ] - t ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 4 , 9 , 7 , 18 , 29 , 11 } ; int n = arr . length ; int k = 11 ; System . out . println ( LongestSubarray ( arr , n , k ) ) ; } public static int LongestSubarray ( int [ ] arr , int n , int k ) { int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] % k ; } int max_length = 0 ; int i = 0 ; while ( i < n ) { int current_length = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr2 [ j ] == arr2 [ i ] ) { current_length ++ ; } else { break ; } } max_length = Math . max ( max_length , current_length ) ; i = i + current_length ; } return max_length ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; if ( n - m + 1 <= m && n != 1 ) { System . out . println ( m - 1 ) ; } else if ( n != 1 ) { System . out . println ( m + 1 ) ; } else { System . out . println ( 1 ) ; } } }
public class Main { public static void main ( String [ ] args ) { String s = " the ▁ big ▁ dwarf ▁ only ▁ jumps " ; int n = s . length ( ) ; System . out . println ( isHeterogram ( s , n ) ? " YES " : " NO " ) ; } public static boolean isHeterogram ( String s , int n ) { int [ ] hash = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' ▁ ' ) { if ( hash [ s . charAt ( i ) - ' a ' ] == 0 ) { hash [ s . charAt ( i ) - ' a ' ] = 1 ; } else { return false ; } } } return true ; } }
import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { List < Integer > arr = new ArrayList < > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { arr . add ( i ) ; } List < List < Integer > > permutations = new ArrayList < > ( Collections2 . permutations ( arr ) ) ; List < Integer > result = permutations . get ( 999999 ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int num : result ) { sb . append ( num ) ; } return sb . toString ( ) ; } }
public class Main { public static void main ( String [ ] args ) { int x1 = 0 , y1 = 0 , x2 = 10 , y2 = 8 ; int x = 1 , y = 5 ; if ( findPoint ( x1 , y1 , x2 , y2 , x , y ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean findPoint ( int x1 , int y1 , int x2 , int y2 , int x , int y ) { if ( x > x1 && x < x2 && y > y1 && y < y2 ) { return true ; } else { return false ; } } }
import java . util . Arrays ; public class Main { static final int INT_MAX = Integer . MAX_VALUE ; static final int MX = 2001 ; static final int OFF = 1000 ; static class Point { int x ; int y ; Point ( int x , int y ) { this . x = x ; this . y = y ; } } static int countPoints ( int n , Point [ ] points ) { int [ ] minx = new int [ MX ] ; int [ ] miny = new int [ MX ] ; int [ ] maxx = new int [ MX ] ; int [ ] maxy = new int [ MX ] ; Arrays . fill ( minx , INT_MAX ) ; Arrays . fill ( miny , INT_MAX ) ; int x , y ; for ( int i = 0 ; i < n ; i ++ ) { points [ i ] . x += OFF ; points [ i ] . y += OFF ; x = points [ i ] . x ; y = points [ i ] . y ; minx [ y ] = Math . min ( minx [ y ] , x ) ; maxx [ y ] = Math . max ( maxx [ y ] , x ) ; miny [ x ] = Math . min ( miny [ x ] , y ) ; maxy [ x ] = Math . max ( maxy [ x ] , y ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x = points [ i ] . x ; y = points [ i ] . y ; if ( x > minx [ y ] && x < maxx [ y ] ) { if ( y > miny [ x ] && y < maxy [ x ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { Point [ ] points = { new Point ( 0 , 0 ) , new Point ( 0 , 1 ) , new Point ( 1 , 0 ) , new Point ( 0 , - 1 ) , new Point ( - 1 , 0 ) } ; int n = points . length ; System . out . println ( countPoints ( n , points ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int X_low = Integer . parseInt ( input [ 0 ] ) ; int Y_up = Integer . parseInt ( input [ 1 ] ) ; int value = X_low ; int cnt = 0 ; while ( value <= Y_up ) { cnt ++ ; value *= 2 ; } System . out . println ( cnt ) ; } }
``` java public class Main { static int [ ] sticks = { 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 } ; public static int countSticks ( String string , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cnt += ( sticks [ string . charAt ( i ) - '0' ] ) ; } return cnt ; } public static void main ( String [ ] args ) { String string = "56" ; int n = string . length ( ) ; System . out . println ( countSticks ( string , n ) ) ; } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int T = input . nextInt ( ) ; for ( int t = 0 ; t < T ; t ++ ) { int n = input . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } int ctr = 0 ; int maxi = a [ 0 ] ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] < a [ i - 1 ] && a [ i - 1 ] > a [ i - 2 ] ) { ctr ++ ; if ( i != n - 1 ) { a [ i ] = Math . max ( a [ i - 1 ] , a [ i + 1 ] ) ; } else { a [ i ] = a [ i - 1 ] ; } } } System . out . println ( ctr ) ; for ( int item : a ) { System . out . print ( item + " ▁ " ) ; } System . out . println ( ) ; } } }
public class Main { static void command ( int [ ] arr , int a , int b ) { arr [ a ] ^= 1 ; arr [ b + 1 ] ^= 1 ; } static void process ( int [ ] arr , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { arr [ k ] ^= arr [ k - 1 ] ; } } static void result ( int [ ] arr , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { System . out . print ( arr [ k ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 5 ; int m = 3 ; int [ ] arr = new int [ n + 2 ] ; for ( int i = 0 ; i < n + 2 ; i ++ ) { arr [ i ] = 0 ; } command ( arr , 1 , 5 ) ; command ( arr , 2 , 5 ) ; command ( arr , 3 , 5 ) ; process ( arr , n ) ; result ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 5 , 2 , 1 , 3 , 2 , 1 } ; int n = arr . length ; System . out . println ( mostFrequent ( arr , n ) ) ; } public static int mostFrequent ( int [ ] arr , int n ) { Arrays . sort ( arr ) ; int max_count = 1 ; int res = arr [ 0 ] ; int curr_count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { curr_count += 1 ; } else { if ( curr_count > max_count ) { max_count = curr_count ; res = arr [ i - 1 ] ; } curr_count = 1 ; } } if ( curr_count > max_count ) { max_count = curr_count ; res = arr [ n - 1 ] ; } return res ; } }
public class Main { static final int MAX = 26 ; public static int maxLength ( String str , int len ) { int res = 0 ; int [ ] lastPos = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { lastPos [ i ] = - 1 ; } for ( int i = 0 ; i < len ; i ++ ) { int C = str . charAt ( i ) - ' a ' ; if ( lastPos [ C ] != - 1 ) { res = Math . max ( len - ( i - lastPos [ C ] - 1 ) - 1 , res ) ; } lastPos [ C ] = i ; } return res ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int len = str . length ( ) ; System . out . println ( maxLength ( str , len ) ) ; } }
public class Main { static final int MAX = 1000000 ; public static int ksmallest ( int [ ] arr , int n , int k ) { int [ ] b = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ arr [ i ] ] = 1 ; } for ( int j = 1 ; j < MAX ; j ++ ) { if ( b [ j ] != 1 ) { k -= 1 ; } if ( k != 1 ) { return j ; } } return - 1 ; } public static void main ( String [ ] args ) { int k = 1 ; int [ ] arr = { 1 } ; int n = arr . length ; System . out . println ( ksmallest ( arr , n , k ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 2795 ; if ( isDivisible ( N ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n + ( d * 13 ) ) ; } return ( n % 43 == 0 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 59173 ; if ( isDivisible ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 1922 ; if ( isDivisible ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 3 ) ) ; } return ( n % 31 == 0 ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 5041 ; if ( isDivisible ( N ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 7 ) ) ; } return ( n % 71 == 0 ) ; } }
public class Main { public static void main ( String [ ] args ) { int L = 1 ; int R = 5 ; System . out . println ( sumLtoR ( L , R ) ) ; } public static int Odd_Sum ( int n ) { int total = ( n + 1 ) / 2 ; int odd = total * total ; return odd ; } public static int Even_Sum ( int n ) { int total = n / 2 ; int even = total * ( total + 1 ) ; return even ; } public static int sumLtoR ( int L , int R ) { int odd_sum = Odd_Sum ( R ) - Odd_Sum ( L - 1 ) ; int even_sum = Even_Sum ( R ) - Even_Sum ( L - 1 ) ; return even_sum - odd_sum ; } }
public class Main { public static void main ( String [ ] args ) { int lowCost = 14 ; int upCost = 30 ; int lowQuant = 5 ; int upQuant = 12 ; int r = 9 ; if ( isRatioPossible ( lowCost , upCost , lowQuant , upQuant , r ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isRatioPossible ( int lowCost , int upCost , int lowQuant , int upQuant , int r ) { for ( int i = lowQuant ; i <= upQuant ; i ++ ) { int ans = i * r ; if ( lowCost <= ans && ans <= upCost ) { return true ; } } return false ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { if ( isPowerOfTwo ( 31 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } if ( isPowerOfTwo ( 64 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static double Log2 ( int x ) { if ( x == 0 ) { return false ; } return ( Math . log10 ( x ) / Math . log10 ( 2 ) ) ; } public static boolean isPowerOfTwo ( int n ) { return ( Math . ceil ( Log2 ( n ) ) == Math . floor ( Log2 ( n ) ) ) ; } }
``` java import java . util . HashSet ; import java . util . Set ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int LIMIT = 50000000 ; Set < Integer > primes = eulerlib . listPrimes ( eulerlib . sqrt ( LIMIT ) ) ; Set < Integer > sums = new HashSet < > ( ) ; sums . add ( 0 ) ; for ( int i = 2 ; i < 5 ; i ++ ) { Set < Integer > newSums = new HashSet < > ( ) ; for ( int p : primes ) { int q = ( int ) Math . pow ( p , i ) ; if ( q > LIMIT ) { break ; } for ( int x : sums ) { if ( x + q <= LIMIT ) { newSums . add ( x + q ) ; } } } sums = newSums ; } return String . valueOf ( sums . size ( ) ) ; } } ```
import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 3 , 2 } ; int n = arr . length ; System . out . println ( " Longest ▁ length ▁ subsequence ▁ = ▁ " + longLenSub ( arr , n ) ) ; } public static int longLenSub ( int [ ] arr , int n ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; int longLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len1 = 0 ; if ( um . containsKey ( arr [ i - 1 ] ) && len1 < um . get ( arr [ i - 1 ] ) ) { len1 = um . get ( arr [ i - 1 ] ) ; } if ( um . containsKey ( arr [ i ] + 1 ) && len1 < um . get ( arr [ i ] + 1 ) ) { len1 = um . get ( arr [ i ] + 1 ) ; } um . put ( arr [ i ] , len1 + 1 ) ; if ( longLen < um . get ( arr [ i ] ) ) { longLen = um . get ( arr [ i ] ) ; } } return longLen ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; System . out . println ( a + b ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum ▁ of ▁ all ▁ elements : ▁ " + calculateSum ( n ) ) ; } public static int calculateSum ( int n ) { int sum = 0 ; sum = 1 << n ; return ( sum - 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum ▁ of ▁ all ▁ elements : ▁ " + calculateSum ( n ) ) ; } public static int calculateSum ( int n ) { int sum = 0 ; for ( int row = 0 ; row < n ; row ++ ) { sum = sum + ( 1 << row ) ; } return sum ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 80 , 2 , 6 , 3 , 100 } ; int n = arr . length ; System . out . println ( " Maximum ▁ difference ▁ is ▁ " + maxDiff ( arr , n ) ) ; } public static int maxDiff ( int [ ] arr , int n ) { int diff = arr [ 1 ] - arr [ 0 ] ; int curr_sum = diff ; int max_sum = curr_sum ; for ( int i = 1 ; i < n - 1 ; i ++ ) { diff = arr [ i + 1 ] - arr [ i ] ; if ( curr_sum > 0 ) { curr_sum += diff ; } else { curr_sum = diff ; } if ( curr_sum > max_sum ) { max_sum = curr_sum ; } } return max_sum ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String s = scanner . nextLine ( ) ; if ( s . equals ( " # " ) ) break ; int ans = 1 ; char num = ' _ ' ; int cnt = 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char n = s . charAt ( i ) ; if ( n == num ) { cnt ++ ; } else { if ( num == '8' || num == '0' ) { ans = ( int ) ( ( ( long ) ans * f3 ( cnt ) ) % 100000007 ) ; } else { ans = ( int ) ( ( ( long ) ans * f5 ( cnt ) ) % 100000007 ) ; } num = n ; cnt = 1 ; } } System . out . println ( ans ) ; } } public static int f3 ( int n ) { int a = 0 , b = 0 , c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tempA = a ; int tempB = b ; a = ( tempA + tempB + c + 1 ) % 100000007 ; b = tempA ; c = tempB ; } return a ; } public static int f5 ( int n ) { int a = 0 , b = 0 , c = 0 , d = 0 , e = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tempA = a ; int tempB = b ; int tempC = c ; int tempD = d ; a = ( tempA + tempB + tempC + tempD + e + 1 ) % 100000007 ; b = tempA ; c = tempB ; d = tempC ; e = tempD ; } return a ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } public static int countPairs ( int n ) { int num = ( n / 2 ) + 1 ; int Max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( ( n % i ) % j ) % n ; if ( val == Max ) { count ++ ; } } } return count ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String n = scanner . nextLine ( ) . strip ( ) ; int l = n . length ( ) ; int [ ] x = new int [ l ] ; for ( int i = 0 ; i < l - 1 ; i ++ ) { if ( i == 0 ) { x [ i ] = 0 ; } else { x [ i ] = x [ i - 1 ] ; } if ( n . charAt ( i ) == n . charAt ( i + 1 ) ) { x [ i ] += 1 ; } } int m = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < m ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int y = Integer . parseInt ( input [ 0 ] ) ; int z = Integer . parseInt ( input [ 1 ] ) ; if ( y == 1 ) { System . out . println ( x [ z - 2 ] ) ; } else { System . out . println ( x [ z - 2 ] - x [ y - 2 ] ) ; } } } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; if ( n == 0 ) { break ; } char [ ] cups = new char [ n ] ; for ( char tray : new char [ ] { ' A ' , ' B ' , ' C ' } ) { String [ ] itr = scanner . nextLine ( ) . split ( " ▁ " ) ; for ( int i = 1 ; i < itr . length ; i ++ ) { cups [ Integer . parseInt ( itr [ i ] ) - 1 ] = tray ; } } int num = rec ( cups , n , 0 ) ; int ans = Math . min ( num , ( int ) ( Math . pow ( 3 , n ) - 1 ) - num ) ; if ( ans <= m ) { System . out . println ( ans ) ; } else { System . out . println ( - 1 ) ; } } } public static int rec ( char [ ] cups , int n , int i ) { if ( i == 0 ) { return 0 ; } char tray = cups [ n - i ] ; if ( tray == ' A ' ) { return rec ( cups , n , i - 1 ) ; } else if ( tray == ' B ' ) { return 2 * ( int ) Math . pow ( 3 , i - 1 ) - 1 - rec ( cups , n , i - 1 ) ; } else { return rec ( cups , n , i - 1 ) + 2 * ( int ) Math . pow ( 3 , i - 1 ) ; } } } ```
public class Main { static int MAX = 100000 ; public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 3 , 9 , 4 , 5 } ; int n = arr . length ; int [ ] g1 = new int [ MAX ] ; int [ ] g2 = new int [ MAX ] ; formgroups ( arr , 0 , g1 , 0 , g2 , 0 , n ) ; } public static void prints ( int [ ] g1 , int a , int [ ] g2 , int b ) { for ( int i = 0 ; i < a ; i ++ ) { System . out . print ( g1 [ i ] + " ▁ " ) ; } System . out . print ( " and ▁ " ) ; for ( int i = 0 ; i < b ; i ++ ) { System . out . print ( g2 [ i ] + " ▁ " ) ; } System . out . println ( ) ; } public static boolean checksum ( int [ ] g1 , int a , int [ ] g2 , int b ) { int x = 0 ; for ( int i = 0 ; i < a ; i ++ ) { x += g1 [ i ] ; } for ( int i = 0 ; i < b ; i ++ ) { x -= g2 [ i ] ; } return x == 0 ; } public static void formgroups ( int [ ] arr , int x , int [ ] g1 , int a , int [ ] g2 , int b , int n ) { if ( x == n ) { if ( checksum ( g1 , a , g2 , b ) ) { prints ( g1 , a , g2 , b ) ; } return ; } g1 [ a ] = arr [ x ] ; formgroups ( arr , x + 1 , g1 , a + 1 , g2 , b , n ) ; g2 [ b ] = arr [ x ] ; formgroups ( arr , x + 1 , g1 , a , g2 , b + 1 , n ) ; } }
public class Main { public static void cutRibbon ( ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ inputArr . length ] ; for ( int i = 0 ; i < inputArr . length ; i ++ ) { arr [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } int length = arr [ 0 ] ; Arrays . sort ( arr , 1 , 4 ) ; if ( length % arr [ 0 ] == 0 ) { System . out . println ( length / arr [ 0 ] ) ; return ; } int ans = 0 ; if ( arr [ 0 ] == arr [ 1 ] ) { int k = 0 ; for ( int i = 0 ; i <= length / arr [ 2 ] ; i ++ ) { int check = length - i * arr [ 2 ] ; if ( check >= 0 && check % arr [ 0 ] == 0 ) { k = check / arr [ 0 ] ; ans = Math . max ( ans , k + i ) ; } } } else { int k = 0 ; for ( int i = 0 ; i <= length / arr [ 2 ] ; i ++ ) { for ( int j = 0 ; j <= length / arr [ 1 ] ; j ++ ) { int check = length - i * arr [ 2 ] - j * arr [ 1 ] ; if ( check >= 0 && check % arr [ 0 ] == 0 ) { k = check / arr [ 0 ] ; ans = Math . max ( ans , k + i + j ) ; } } } } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { cutRibbon ( ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] input = { 0 , 1 , 0 , 0 , 1 , 0 } ; int n = input . length ; System . out . println ( maxSubseq ( input , n ) ) ; } public static int maxSubseq ( int [ ] vec , int n ) { int suffix = 0 ; int i = n - 1 ; while ( i >= 0 ) { if ( vec [ i ] == 1 ) { suffix += 1 ; vec [ i ] = suffix ; } i -= 1 ; } int res = 0 ; int zero = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( vec [ j ] == 0 ) { zero += 1 ; } if ( vec [ j ] > 0 ) { res = Math . max ( res , zero + vec [ j ] ) ; } } return Math . max ( res , zero ) ; } }
int R = 4 ; int C = 4 ; public static int countPaths ( int [ ] [ ] maze ) { if ( maze [ 0 ] [ 0 ] == - 1 ) { return 0 ; } for ( int i = 0 ; i < R ; i ++ ) { if ( maze [ i ] [ 0 ] == 0 ) { maze [ i ] [ 0 ] = 1 ; } else { break ; } } for ( int i = 1 ; i < C ; i ++ ) { if ( maze [ 0 ] [ i ] == 0 ) { maze [ 0 ] [ i ] = 1 ; } else { break ; } } for ( int i = 1 ; i < R ; i ++ ) { for ( int j = 1 ; j < C ; j ++ ) { if ( maze [ i ] [ j ] == - 1 ) { continue ; } if ( maze [ i - 1 ] [ j ] > 0 ) { maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i - 1 ] [ j ] ) ; } if ( maze [ i ] [ j - 1 ] > 0 ) { maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i ] [ j - 1 ] ) ; } } } if ( maze [ R - 1 ] [ C - 1 ] > 0 ) { return maze [ R - 1 ] [ C - 1 ] ; } else { return 0 ; } } public static void main ( String [ ] args ) { int [ ] [ ] maze = { { 0 , 0 , 0 , 0 } , { 0 , - 1 , 0 , 0 } , { - 1 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 } } ; System . out . println ( countPaths ( maze ) ) ; }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int N = 121 ; isPrime ( N ) ; } public static void isPrime ( int N ) { boolean isPrime = true ; int [ ] arr = { 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 } ; if ( N < 2 ) { isPrime = false ; } if ( N % 2 == 0 || N % 3 == 0 || N % 5 == 0 ) { isPrime = false ; } for ( int i = 0 ; i < ( int ) Math . sqrt ( N ) ; i += 30 ) { for ( int c : arr ) { if ( c > ( int ) Math . sqrt ( N ) ) { break ; } else { if ( N % ( c + i ) == 0 ) { isPrime = false ; break ; } } } if ( ! isPrime ) { break ; } } if ( isPrime ) { System . out . println ( " Prime ▁ Number " ) ; } else { System . out . println ( " Not ▁ a ▁ Prime ▁ Number " ) ; } } }
Scanner sc = new Scanner ( System . in ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int a = x2 - x1 ; int b = y2 - y1 ; System . out . println ( ( x2 - b ) + " ▁ " + ( y2 + a ) + " ▁ " + ( x1 - b ) + " ▁ " + ( y1 + a ) ) ;
public class Main { public static void main ( String [ ] args ) { String seq = " GEEKSFORGEEKS " ; int n = seq . length ( ) ; System . out . println ( " The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ " + lps ( seq , 0 , n - 1 ) ) ; } public static int max ( int x , int y ) { if ( x > y ) { return x ; } return y ; } public static int lps ( String seq , int i , int j ) { if ( i == j ) { return 1 ; } if ( seq . charAt ( i ) == seq . charAt ( j ) && i + 1 == j ) { return 2 ; } if ( seq . charAt ( i ) == seq . charAt ( j ) ) { return lps ( seq , i + 1 , j - 1 ) + 2 ; } return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } }
public class Main { public static void main ( String [ ] args ) { String st = "123123" ; System . out . println ( " Length ▁ of ▁ the ▁ substring ▁ is ▁ " + findLength ( st , st . length ( ) ) ) ; } public static int findLength ( String st , int n ) { int [ ] total = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { total [ i ] = total [ i - 1 ] + Character . getNumericValue ( st . charAt ( i - 1 ) ) - Character . getNumericValue ( '0' ) ; } int ans = 0 ; int l = 2 ; while ( l <= n ) { for ( int i = 0 ; i <= n - l ; i ++ ) { int j = i + l - 1 ; if ( total [ i + l / 2 ] - total [ i ] == total [ i + l ] - total [ i + l / 2 ] ) { ans = Math . max ( ans , l ) ; } } l += 2 ; } return ans ; } }
public class Main { public static void prints ( char [ ] a , int n , int ind ) { int i = ind ; while ( i < n + ind ) { System . out . print ( a [ i % n ] + " ▁ " ) ; i = i + 1 ; } } public static void main ( String [ ] args ) { char [ ] a = { ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' } ; int n = a . length ; prints ( a , n , 3 ) ; } }
public class Main { public static void prints ( char [ ] a , int n , int ind ) { char [ ] b = new char [ 2 * n ] ; int i = 0 ; while ( i < n ) { b [ i ] = b [ n + i ] = a [ i ] ; i = i + 1 ; } i = ind ; while ( i < n + ind ) { System . out . print ( b [ i ] + " ▁ " ) ; i = i + 1 ; } } public static void main ( String [ ] args ) { char [ ] a = { ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' } ; int n = a . length ; prints ( a , n , 3 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int e = 0 ; int o = 0 ; String [ ] arr = input . next ( ) . split ( " \\ * " ) ; for ( String s : arr ) { int l = s . length ( ) ; e += l / 2 ; o += l % 2 ; } System . out . println ( Math . min ( o + e + Math . min ( Math . min ( e , a ) , b ) , b + a ) ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { static ArrayList < String > a = new ArrayList < > ( ) ; static ArrayList < ArrayList < Integer > > b = new ArrayList < > ( ) ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; scanner . nextLine ( ) ; for ( int i = 0 ; i < n ; i ++ ) { b . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { int c = scanner . nextInt ( ) ; scanner . nextLine ( ) ; a . add ( scanner . nextLine ( ) ) ; if ( c != 0 ) { b . get ( c - 1 ) . add ( i ) ; } } f ( 0 , 0 ) ; } public static void f ( int i , int x ) { System . out . println ( " . " . repeat ( x ) + a . get ( i ) ) ; for ( int j : b . get ( i ) ) { f ( j , x + 1 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] vInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int v1 = Integer . parseInt ( vInput [ 0 ] ) ; int v2 = Integer . parseInt ( vInput [ 1 ] ) ; String [ ] tInput = scanner . nextLine ( ) . split ( " ▁ " ) ; int t = Integer . parseInt ( tInput [ 0 ] ) ; int d = Integer . parseInt ( tInput [ 1 ] ) ; int sum = 0 ; for ( int i = 0 ; i < t ; i ++ ) { sum += Math . min ( v1 + d * i , v2 + d * ( t - i - 1 ) ) ; } System . out . println ( sum ) ; } }
``` java import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; char [ ] Sherlock = scanner . nextLine ( ) . toCharArray ( ) ; char [ ] Moriarty = scanner . nextLine ( ) . toCharArray ( ) ; char [ ] copySherlock = Arrays . copyOf ( Sherlock , Sherlock . length ) ; char [ ] copyMoriarty = Arrays . copyOf ( Moriarty , Moriarty . length ) ; int minHits = 0 ; int maxHits = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( Moriarty [ j ] == - 1 ) { continue ; } if ( Moriarty [ j ] >= Sherlock [ i ] ) { Moriarty [ j ] = - 1 ; Sherlock [ i ] = - 1 ; break ; } } } for ( int i = 0 ; i < n ; i ++ ) { if ( Moriarty [ i ] != - 1 ) { minHits ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( copyMoriarty [ j ] == - 1 ) { continue ; } if ( copyMoriarty [ j ] > copySherlock [ i ] ) { maxHits ++ ; copyMoriarty [ j ] = - 1 ; break ; } } } System . out . println ( minHits ) ; System . out . println ( maxHits ) ; } } ```
import java . util . Scanner ; import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = Arrays . stream ( input ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; int [ ] cnt2 = Arrays . stream ( a ) . map ( x -> ( int ) ( ( Arrays . stream ( a ) . max ( ) . getAsInt ( ) - x ) / 2 ) ) . toArray ( ) ; int [ ] cnt1 = Arrays . stream ( a ) . map ( x -> Arrays . stream ( a ) . max ( ) . getAsInt ( ) - x - 2 * cnt2 [ Arrays . asList ( a ) . indexOf ( x ) ] ) . toArray ( ) ; int result = Arrays . stream ( cnt2 ) . sum ( ) + ( Arrays . stream ( cnt1 ) . sum ( ) == 0 ? 0 : Arrays . stream ( cnt1 ) . sum ( ) == 2 ? 2 : 1 ) ; System . out . println ( result ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = input . nextInt ( ) ; for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k <= j ; k ++ ) { if ( k == 0 || k == j ) { System . out . print ( "1 ▁ " ) ; } else { System . out . print ( "0 ▁ " ) ; } } System . out . println ( ) ; } } } }
public class Main { public static void main ( String [ ] args ) { bin ( 131 ) ; System . out . println ( ) ; bin ( 3 ) ; } public static void bin ( int n ) { if ( n > 1 ) { bin ( n >> 1 ) ; } System . out . print ( n & 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int ans = 0 ; for ( int x = 0 ; x < 1000 ; x ++ ) { if ( x % 3 == 0 || x % 5 == 0 ) { ans += x ; } } return Integer . toString ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String S = scanner . nextLine ( ) ; int A = S . length ( ) - S . replace ( " n " , " " ) . length ( ) ; int B = S . length ( ) - S . replace ( " z " , " " ) . length ( ) ; System . out . println ( "1 ▁ " . repeat ( A ) + "0 ▁ " . repeat ( B ) ) ; } }
Scanner scanner = new Scanner ( System . in ) ; int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; System . out . println ( b * 2 - a ) ;
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( Circular ( n - 1 ) ) ; } public static int Circular ( int n ) { int result = 1 ; while ( n > 0 ) { result = result * n ; n -- ; } return result ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] [ ] arr1 = { { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } , { 9 , 7 , 4 , 2 } , { 2 , 2 , 2 , 1 } } ; System . out . println ( productDiagonals ( arr1 , 4 ) ) ; int [ ] [ ] arr2 = { { 2 , 1 , 2 , 1 , 2 } , { 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 } , { 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 } } ; System . out . println ( productDiagonals ( arr2 , 5 ) ) ; } public static int productDiagonals ( int [ ] [ ] arr , int n ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { product = product * arr [ i ] [ i ] ; product = product * arr [ i ] [ n - i - 1 ] ; } if ( n % 2 == 1 ) { product = product / arr [ n / 2 ] [ n / 2 ] ; } return product ; } }
``` java import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; if ( n == 0 ) break ; HashMap < Integer , Integer > dic = new HashMap < > ( ) ; dic . put ( 0 , 0 ) ; dic . put ( 1 , 0 ) ; dic . put ( 2 , 0 ) ; dic . put ( 3 , 0 ) ; dic . put ( 4 , 0 ) ; dic . put ( 5 , 0 ) ; dic . put ( 6 , 0 ) ; dic . put ( 7 , 0 ) ; dic . put ( 8 , 0 ) ; dic . put ( 9 , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { int c = scanner . nextInt ( ) ; dic . put ( c , dic . get ( c ) + 1 ) ; } for ( int v : dic . values ( ) ) { System . out . println ( v != 0 ? " * " . repeat ( v ) : " - " ) ; } } } } ```
public class Main { static char getSecondMostFreq ( String str ) { int NO_OF_CHARS = 256 ; int [ ] count = new int [ NO_OF_CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { count [ ( int ) str . charAt ( i ) ] += 1 ; } int first = 0 , second = 0 ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] > count [ first ] ) { second = first ; first = i ; } else if ( count [ i ] > count [ second ] && count [ i ] != count [ first ] ) { second = i ; } } return ( char ) second ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; char res = getSecondMostFreq ( str ) ; if ( res != ' \0' ) { System . out . println ( " Second ▁ most ▁ frequent ▁ char ▁ is ▁ " + res ) ; } else { System . out . println ( " No ▁ second ▁ most ▁ frequent ▁ character " ) ; } } }
int [ ] a = new int [ 4001 ] ; for ( int i = 0 ; i < 2001 ; i ++ ) { a [ i ] = a [ 4000 - i ] = ( ( i + 3 ) * ( i + 2 ) * ( i + 1 ) ) / 6 - 4 * a [ i - 1001 ] * ( i > 999 ? 1 : 0 ) ; } while ( true ) { try { System . out . println ( a [ Integer . parseInt ( new Scanner ( System . in ) . nextLine ( ) ) ] ) ; } catch ( Exception e ) { break ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , 7 } ; int n = arr . length ; arr = mySort ( arr , n ) ; System . out . println ( " Modified ▁ Array ▁ : ▁ " ) ; for ( int num : arr ) { System . out . print ( num + " ▁ " ) ; } } public static int [ ] mySort ( int [ ] arr , int n ) { int [ ] arr1 = Arrays . copyOfRange ( arr , 0 , n / 2 ) ; int [ ] arr2 = Arrays . copyOfRange ( arr , n / 2 , n ) ; Arrays . sort ( arr1 ) ; Arrays . sort ( arr2 ) ; for ( int i = 0 ; i < arr2 . length / 2 ; i ++ ) { int temp = arr2 [ i ] ; arr2 [ i ] = arr2 [ arr2 . length - i - 1 ] ; arr2 [ arr2 . length - i - 1 ] = temp ; } int [ ] result = new int [ n ] ; System . arraycopy ( arr1 , 0 , result , 0 , arr1 . length ) ; System . arraycopy ( arr2 , 0 , result , arr1 . length , arr2 . length ) ; return result ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr1 = { 1 , 0 , 1 , 1 , 1 , 1 , 1 } ; int [ ] arr2 = { 0 , 1 , 1 , 1 , 1 , 0 , 0 } ; int [ ] arr3 = { 1 , 1 , 1 , 1 , 0 , 0 , 1 } ; int n = arr1 . length ; int p = 2 ; int q = 4 ; System . out . println ( minflip ( arr1 , arr2 , arr3 , p , q , n ) ) ; } public static int minflip ( int [ ] arr1 , int [ ] arr2 , int [ ] arr3 , int p , int q , int n ) { int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr1 [ i ] ^ arr2 [ i ] ) != arr3 [ i ] ) { flip += 1 ; } } return flip <= p + q ? flip : - 1 ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " Sum ▁ is ▁ " + round ( sum ( n ) , 6 ) ) ; } public static double sum ( int n ) { double s = 0.0 ; for ( int i = 1 ; i <= n ; i ++ ) { s = s + 1.0 / i ; } return s ; } public static double round ( double value , int places ) { double scale = Math . pow ( 10 , places ) ; return Math . round ( value * scale ) / scale ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int n = arr . length ; bitonicGenerator ( arr , n ) ; for ( int i : arr ) { System . out . print ( i + " ▁ " ) ; } } public static void bitonicGenerator ( int [ ] arr , int n ) { int [ ] evenArr = new int [ n ] ; int [ ] oddArr = new int [ n ] ; int evenIndex = 0 ; int oddIndex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { evenArr [ evenIndex ] = arr [ i ] ; evenIndex ++ ; } else { oddArr [ oddIndex ] = arr [ i ] ; oddIndex ++ ; } } Arrays . sort ( evenArr , 0 , evenIndex ) ; Arrays . sort ( oddArr , 0 , oddIndex ) ; reverseArray ( oddArr , oddIndex ) ; int i = 0 ; for ( int j = 0 ; j < evenIndex ; j ++ ) { arr [ i ] = evenArr [ j ] ; i ++ ; } for ( int j = 0 ; j < oddIndex ; j ++ ) { arr [ i ] = oddArr [ j ] ; i ++ ; } } public static void reverseArray ( int [ ] arr , int n ) { int start = 0 ; int end = n - 1 ; while ( start < end ) { int temp = arr [ start ] ; arr [ start ] = arr [ end ] ; arr [ end ] = temp ; start ++ ; end -- ; } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 4 , 2 , 4 , 3 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } public static int countPairs ( int [ ] arr , int n ) { int count = 0 ; int right = 0 ; int left = 0 ; boolean [ ] visited = new boolean [ n ] ; while ( right < n ) { while ( right < n && ! visited [ arr [ right ] ] ) { count += ( right - left ) ; visited [ arr [ right ] ] = true ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ right ] ] ) ) { visited [ arr [ left ] ] = false ; left ++ ; } } return count ; } }
public class TreeNode { int val ; TreeNode left ; TreeNode right ; public TreeNode ( int val ) { this . val = val ; this . left = null ; this . right = null ; } } public class Solution { public boolean isSubtree ( TreeNode s , TreeNode t ) { String sRes = preorder ( s , true ) ; String tRes = preorder ( t , true ) ; return sRes . contains ( tRes ) ; } public String preorder ( TreeNode root , boolean isLeft ) { if ( root == null ) { if ( isLeft ) { return " lnull " ; } else { return " rnull " ; } } return " # " + root . val + " ▁ " + preorder ( root . left , true ) + " ▁ " + preorder ( root . right , false ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; TreeNode root = new TreeNode ( 3 ) ; root . left = new TreeNode ( 4 ) ; root . right = new TreeNode ( 5 ) ; root . left . left = new TreeNode ( 1 ) ; root . left . right = new TreeNode ( 2 ) ; TreeNode subRoot = new TreeNode ( 4 ) ; subRoot . left = new TreeNode ( 1 ) ; subRoot . right = new TreeNode ( 2 ) ; boolean out = sObj . isSubtree ( root , subRoot ) ; System . out . println ( out ) ; } }
int M = 1001 ; int MOD = 998244353 ; int [ ] [ ] dp = new int [ M ] [ M ] ; public int solve ( int idx , int diff , int N , int M , int K ) { if ( idx > N ) { if ( diff == K ) { return 1 ; } return 0 ; } if ( dp [ idx ] [ diff ] != - 1 ) { return dp [ idx ] [ diff ] ; } int ans = solve ( idx + 1 , diff , N , M , K ) ; ans += ( M - 1 ) * solve ( idx + 1 , diff + 1 , N , M , K ) ; dp [ idx ] [ diff ] = ans % MOD ; return dp [ idx ] [ diff ] ; } public static void main ( String [ ] args ) { int N = 3 ; int M = 3 ; int K = 0 ; System . out . println ( M * solve ( 2 , 0 , N , M , K ) ) ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int NUM_SPHERES = 21 ; int [ ] sphereradii = new int [ NUM_SPHERES ] ; for ( int i = 0 ; i < NUM_SPHERES ; i ++ ) { sphereradii [ i ] = ( i + 30 ) * 1000 ; } Integer [ ] [ ] minlength = new Integer [ NUM_SPHERES ] [ ( int ) Math . pow ( 2 , NUM_SPHERES ) ] ; return String . valueOf ( findMinimumLength ( 0 , ( 1 << NUM_SPHERES ) - 1 , sphereradii , minlength ) + sphereradii [ 0 ] ) ; } public static int findMinimumLength ( int currentSphereIndex , int setOfSpheres , int [ ] sphereradii , Integer [ ] [ ] minlength ) { if ( ( setOfSpheres & ( 1 << currentSphereIndex ) ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( minlength [ currentSphereIndex ] [ setOfSpheres ] == null ) { if ( Integer . bitCount ( setOfSpheres ) == 1 ) { return sphereradii [ currentSphereIndex ] ; } else { int result = Integer . MAX_VALUE ; int newSetOfSpheres = setOfSpheres ^ ( 1 << currentSphereIndex ) ; for ( int i = 0 ; i < sphereradii . length ; i ++ ) { if ( ( newSetOfSpheres & ( 1 << i ) ) == 0 ) { continue ; } double temp = Math . sqrt ( ( sphereradii [ i ] + sphereradii [ currentSphereIndex ] - 50000 ) * 200000 ) ; temp += findMinimumLength ( i , newSetOfSpheres , sphereradii , minlength ) ; result = Math . min ( ( int ) temp , result ) ; } minlength [ currentSphereIndex ] [ setOfSpheres ] = result ; } } return minlength [ currentSphereIndex ] [ setOfSpheres ] ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] t = new int [ input . length ] ; for ( int j = 0 ; j < input . length ; j ++ ) { t [ j ] = Integer . parseInt ( input [ j ] ) ; } Arrays . sort ( t ) ; int a = t [ 0 ] * t [ 0 ] + t [ 1 ] * t [ 1 ] ; int b = t [ 2 ] * t [ 2 ] ; if ( a == b ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class Main { public static int getTotalXorOfSubarrayXors ( int [ ] arr , int N ) { if ( N % 2 == 0 ) { return 0 ; } int res = 0 ; for ( int i = 0 ; i < N ; i += 2 ) { res ^= arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } public static int getTotalXorOfSubarrayXors ( int [ ] arr , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) { res = res ^ arr [ i ] ; } } return res ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int l = scanner . nextInt ( ) ; int p = scanner . nextInt ( ) ; int q = scanner . nextInt ( ) ; double s = ( double ) l / ( p + q ) ; double x = p * s ; System . out . println ( x ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] l = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { l [ j ] = Integer . parseInt ( input [ j ] ) ; } Arrays . sort ( l ) ; System . out . println ( l [ n - 1 ] - l [ 0 ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = Integer . parseInt ( input [ i ] ) ; } int ans = 0 ; Map < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( - t [ i ] ) ) { ans += freq . get ( - t [ i ] ) ; } if ( freq . containsKey ( t [ i ] ) ) { freq . put ( t [ i ] , freq . get ( t [ i ] ) + 1 ) ; } else { freq . put ( t [ i ] , 1 ) ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int pya = Integer . parseInt ( scanner . nextLine ( ) ) ; ArrayList < String > arre = new ArrayList < > ( ) ; while ( pya > 0 ) { pya -- ; arre . add ( scanner . nextLine ( ) . toLowerCase ( ) ) ; } String oString = scanner . nextLine ( ) ; String lowString = oString . toLowerCase ( ) ; char letter1 = scanner . nextLine ( ) . toLowerCase ( ) . charAt ( 0 ) ; char letter2 = ( letter1 != ' a ' ) ? ' a ' : ' b ' ; int [ ] valid = new int [ oString . length ( ) ] ; ArrayList < Integer > setcito = new ArrayList < > ( ) ; for ( String x : arre ) { if ( lowString . indexOf ( x ) >= 0 ) { int wat = 0 ; while ( true ) { int index = lowString . indexOf ( x , wat ) ; if ( index < 0 ) { break ; } for ( int i = index ; i < index + x . length ( ) ; i ++ ) { setcito . add ( i ) ; } wat = index + 1 ; } } } char [ ] oStringArray = oString . toCharArray ( ) ; for ( int i : setcito ) { char letter = ( lowString . charAt ( i ) != letter1 ) ? letter1 : letter2 ; oStringArray [ i ] = Character . isLowerCase ( oStringArray [ i ] ) ? letter : Character . toUpperCase ( letter ) ; } for ( char x : oStringArray ) { System . out . print ( x ) ; } System . out . println ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int big_prime = 1000000007 ; int N = Integer . parseInt ( scanner . nextLine ( ) ) ; String input = scanner . nextLine ( ) . trim ( ) ; char [ ] S = input . toCharArray ( ) ; int [ ] Wn = new int [ N ] ; int [ ] En = new int [ N ] ; int Wc = 0 ; int Ec = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( S [ i ] == ' W ' ) { Wc ++ ; } else { Ec ++ ; } Wn [ i ] = Wc ; En [ i ] = Ec ; } int ans = ( int ) Math . pow ( 10 , 10 ) ; int [ ] WnWithZero = new int [ N + 1 ] ; int [ ] EnWithZero = new int [ N + 1 ] ; System . arraycopy ( Wn , 0 , WnWithZero , 1 , N ) ; System . arraycopy ( En , 0 , EnWithZero , 1 , N ) ; for ( int i = 0 ; i < N ; i ++ ) { ans = Math . min ( WnWithZero [ i ] + EnWithZero [ N ] - EnWithZero [ i + 1 ] , ans ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; ArrayList < Integer > chips = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { chips . add ( scanner . nextInt ( ) ) ; } int odd = 0 ; int even = 0 ; for ( int num : chips ) { if ( num % 2 == 0 ) { even ++ ; } else { odd ++ ; } } System . out . println ( Math . min ( even , odd ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { int N = 10100000 ; boolean [ ] temp = new boolean [ N + 1 ] ; for ( int i = 0 ; i <= N ; i ++ ) { temp [ i ] = true ; } temp [ 0 ] = temp [ 1 ] = false ; for ( int i = 2 ; i < Math . ceil ( Math . sqrt ( N + 1 ) ) ; i ++ ) { if ( temp [ i ] ) { for ( int j = i + i ; j <= N ; j += i ) { temp [ j ] = false ; } } } boolean [ ] quadruplet = { true , false , true , false , false , false , true , false , true } ; Scanner scanner = new Scanner ( System . in ) ; while ( true ) { try { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = n ; i >= 9 ; i -- ) { if ( temp [ i ] && checkQuadruplet ( temp , i , quadruplet ) ) { System . out . println ( i ) ; break ; } } } catch ( Exception e ) { break ; } } } public static boolean checkQuadruplet ( boolean [ ] temp , int start , boolean [ ] quadruplet ) { for ( int i = 0 ; i < quadruplet . length ; i ++ ) { if ( temp [ start - 8 + i ] != quadruplet [ i ] ) { return false ; } } return true ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > a = new ArrayList < > ( ) ; for ( String num : input ) { a . add ( Integer . parseInt ( num ) ) ; } List < Integer > r = new ArrayList < > ( ) ; int s = 0 ; int l = 0 ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( a . get ( i ) != 1 ) { s = s + a . get ( i ) ; int t = i + 1 - l ; int p = s - 1 * t ; if ( p % 2 == 0 ) { r . add ( 2 ) ; } else { r . add ( 1 ) ; } } else { l = l + 1 ; if ( r . size ( ) == 0 ) { r . add ( 2 ) ; } else { int q = r . get ( r . size ( ) - 1 ) ; r . add ( q ) ; } } } for ( int i = 0 ; i < r . size ( ) ; i ++ ) { System . out . println ( r . get ( i ) ) ; } } }
public class Main { public static void main ( String [ ] args ) { int n = 9 ; if ( onlyFirstAndLastAreSet ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean powerOfTwo ( int n ) { return ! ( n & ( n - 1 ) ) ; } public static boolean onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) { return true ; } return powerOfTwo ( n - 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { int m = 6 ; int n = 4 ; int [ ] X = { 2 , 1 , 3 , 1 , 4 } ; int [ ] Y = { 4 , 1 , 2 } ; System . out . println ( minimumCostOfBreaking ( X , Y , m - 1 , n - 1 ) ) ; } public static int minimumCostOfBreaking ( int [ ] X , int [ ] Y , int m , int n ) { int res = 0 ; Arrays . sort ( X ) ; Arrays . sort ( Y ) ; int hzntl = 1 ; int vert = 1 ; int i = m ; int j = n ; while ( i > 0 && j > 0 ) { if ( X [ i ] > Y [ j ] ) { res += X [ i ] * vert ; hzntl ++ ; i -- ; } else { res += Y [ j ] * hzntl ; vert ++ ; j -- ; } } int total = 0 ; while ( i > 0 ) { total += X [ i ] ; i -- ; } res += total * vert ; total = 0 ; while ( j > 0 ) { total += Y [ j ] ; j -- ; } res += total * hzntl ; return res ; } }
import java . lang . Math ; public class Main { public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return Math . gcd ( b % a , a ) ; } public static int countPairs ( int G , int L ) { int count = 0 ; int p = G * L ; for ( int a = 1 ; a <= L ; a ++ ) { if ( ( p % a == 0 ) && gcd ( a , p / a ) == G ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int G = 2 ; int L = 12 ; System . out . print ( " Total ▁ possible ▁ pair ▁ with ▁ GCD ▁ " + G ) ; System . out . print ( " ▁ & ▁ LCM ▁ " + L ) ; System . out . print ( " ▁ = ▁ " + countPairs ( G , L ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " F ( 5 ) ▁ is ▁ " + findNthTerm ( n ) ) ; } public static int [ ] [ ] multiply ( int [ ] [ ] a , int [ ] [ ] b ) { int [ ] [ ] mul = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { mul [ i ] [ j ] = 0 ; for ( int k = 0 ; k < 3 ; k ++ ) { mul [ i ] [ j ] += a [ i ] [ k ] * b [ k ] [ j ] ; } } } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = mul [ i ] [ j ] ; } } return a ; } public static int power ( int [ ] [ ] F , int n ) { int [ ] [ ] M = { { 1 , 1 , 1 } , { 1 , 0 , 0 } , { 0 , 1 , 0 } } ; if ( n == 1 ) { return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] ; } power ( F , n / 2 ) ; F = multiply ( F , F ) ; if ( n % 2 != 0 ) { F = multiply ( F , M ) ; } return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] ; } public static int findNthTerm ( int n ) { int [ ] [ ] F = { { 1 , 1 , 1 } , { 1 , 0 , 0 } , { 0 , 1 , 0 } } ; return power ( F , n - 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int x = 123 ; int y = 13 ; minimumValue ( x , y ) ; } public static void minimumValue ( int x , int y ) { if ( x > y ) { int temp = x ; x = y ; y = temp ; } int a = 1 ; int b = x - 1 ; int c = y - b ; System . out . println ( a + " ▁ " + b + " ▁ " + c ) ; } }
public class Solution { public boolean checkPossibility ( int [ ] nums ) { int brokenNum = 0 ; for ( int i = 0 ; i < nums . length - 1 ; i ++ ) { if ( nums [ i ] > nums [ i + 1 ] ) { brokenNum ++ ; if ( brokenNum >= 2 ) { return false ; } if ( i - 1 < 0 || nums [ i - 1 ] <= nums [ i + 1 ] ) { nums [ i ] = nums [ i + 1 ] ; } else { nums [ i + 1 ] = nums [ i ] ; } } } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 4 , 2 , 3 } ; boolean out = sObj . checkPossibility ( nums ) ; System . out . println ( out ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] array = { 1 , 2 , 3 , 4 } ; int n = array . length ; int K = 3 ; System . out . println ( solve ( array , n , K ) ) ; } public static boolean check ( int mid , int [ ] array , int n , int K ) { int count = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] > mid ) { return false ; } sum += array [ i ] ; if ( sum > mid ) { count ++ ; sum = array [ i ] ; } } count ++ ; if ( count <= K ) { return true ; } return false ; } public static int solve ( int [ ] array , int n , int K ) { int start = 1 ; int end = 0 ; for ( int i = 0 ; i < n ; i ++ ) { end += array [ i ] ; } int answer = 0 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; if ( check ( mid , array , n , K ) ) { answer = mid ; end = mid - 1 ; } else { start = mid + 1 ; } } return answer ; } }
import java . util . Scanner ; import java . util . HashMap ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int m = Integer . parseInt ( input [ 0 ] ) ; int n = Integer . parseInt ( input [ 1 ] ) ; if ( m == 0 ) { break ; } int [ ] objs = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { objs [ i ] = Integer . parseInt ( scanner . nextLine ( ) , 2 ) ; } int [ ] [ ] dp = new int [ 1 << m ] [ 1 << m ] ; int [ ] bits = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { bits [ i ] = 1 << i ; } for ( int mask = ( 1 << m ) - 1 ; mask >= 0 ; mask -- ) { HashMap < Integer , Integer > s = new HashMap < > ( ) ; for ( int obj : objs ) { int masked = obj & mask ; s . put ( masked , s . getOrDefault ( masked , 0 ) + 1 ) ; } for ( int masked : s . keySet ( ) ) { int value = s . get ( masked ) ; if ( value > 1 ) { int maxVal = 0 ; for ( int b : bits ) { if ( ( b & mask ) == 0 ) { maxVal = Math . max ( maxVal , Math . max ( dp [ mask | b ] [ masked ] , dp [ mask | b ] [ masked | b ] ) + 1 ) ; } } dp [ mask ] [ masked ] = maxVal ; } } } System . out . println ( dp [ 0 ] [ 0 ] ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int test = scanner . nextInt ( ) ; for ( int i = 0 ; i < test ; i ++ ) { String [ ] input = scanner . next ( ) . split ( " ▁ " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int c = ( Math . min ( a , b ) * 2 ) * ( Math . min ( a , b ) * 2 ) ; int d = ( Math . max ( a , b ) * Math . max ( a , b ) ) ; System . out . println ( Math . max ( c , d ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int t = input . nextInt ( ) ; while ( t > 0 ) { int n = input . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = input . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = input . nextInt ( ) ; } String ans = " YES " ; List < Integer > zero = new ArrayList < > ( ) ; int temp = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { zero . add ( a [ i ] ) ; continue ; } int x = a [ i ] - b [ i ] ; if ( temp == - 1 ) { temp = x ; } if ( x < 0 || x != temp ) { ans = " NO " ; break ; } } if ( n == zero . size ( ) ) { temp = Collections . max ( zero ) ; } for ( int i : zero ) { if ( i <= temp ) { continue ; } else { ans = " NO " ; break ; } } System . out . println ( ans ) ; t -- ; } } }
public static String evenOrOdd ( String N ) { int l = N . length ( ) ; if ( N . charAt ( l - 1 ) == '0' || N . charAt ( l - 1 ) == '2' || N . charAt ( l - 1 ) == '4' || N . charAt ( l - 1 ) == '6' ) { return " Even " ; } else { return " Odd " ; } } String N = "735" ; System . out . println ( evenOrOdd ( N ) ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] a = new int [ inputArr . length ] ; for ( int i = 0 ; i < inputArr . length ; i ++ ) { a [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } List < List < Integer > > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < a [ 0 ] ; i ++ ) { list . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < a [ 1 ] ; i ++ ) { String [ ] cmdArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] cmd = new int [ cmdArr . length ] ; for ( int j = 0 ; j < cmdArr . length ; j ++ ) { cmd [ j ] = Integer . parseInt ( cmdArr [ j ] ) ; } if ( cmd [ 0 ] == 0 ) { list . get ( cmd [ 1 ] ) . add ( cmd [ 2 ] ) ; } else if ( cmd [ 0 ] == 1 ) { List < String > maped = new ArrayList < > ( ) ; for ( Integer num : list . get ( cmd [ 1 ] ) ) { maped . add ( String . valueOf ( num ) ) ; } String output = String . join ( " ▁ " , maped ) ; System . out . println ( output ) ; } else if ( cmd [ 0 ] == 2 ) { list . set ( cmd [ 1 ] , new ArrayList < > ( ) ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String n = input . nextLine ( ) ; String [ ] num = input . nextLine ( ) . split ( " ▁ " ) ; int even = 0 ; for ( String i : num ) { if ( Integer . parseInt ( i ) % 2 == 0 ) { even += 1 ; } } if ( even == 1 ) { for ( String i : num ) { if ( Integer . parseInt ( i ) % 2 == 0 ) { System . out . println ( ( indexOf ( num , i ) + 1 ) ) ; } } } else { for ( String i : num ) { if ( Integer . parseInt ( i ) % 2 == 1 ) { System . out . println ( ( indexOf ( num , i ) + 1 ) ) ; } } } } public static int indexOf ( String [ ] arr , String target ) { for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] . equals ( target ) ) { return i ; } } return - 1 ; } }
public class Main { public static void main ( String [ ] args ) { int N = 4 ; String X = " abcd " ; String Y = " bcde " ; int K = 3 ; System . out . println ( solve ( X , Y , N , K ) ) ; } public static int solve ( String X , String Y , int N , int K ) { int [ ] count = new int [ N + 1 ] ; int sol = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { count [ i ] = count [ i - 1 ] + Math . abs ( ( int ) X . charAt ( i - 1 ) - ( int ) Y . charAt ( i - 1 ) ) ; } int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) { j ++ ; } sol = Math . max ( sol , i - j ) ; } return sol ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int m = scanner . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = scanner . nextInt ( ) ; while ( a != 0 ) { int temp = n ; n = a ; a = temp % a ; } } System . out . println ( ( n == 1 ) ? " Yes " : " No " ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 15 ; if ( isPrime ( n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isPrime ( int n , int i ) { if ( n <= 2 ) { return n == 2 ? true : false ; } if ( n % i == 0 ) { return false ; } if ( i * i > n ) { return true ; } return isPrime ( n , i + 1 ) ; } public static boolean isPrime ( int n ) { return isPrime ( n , 2 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 27 ; System . out . println ( minimumSum ( n ) ) ; } public static boolean isPrime ( int n ) { int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) { return false ; } i ++ ; } return true ; } public static int minimumSum ( int n ) { if ( isPrime ( n ) ) { return 1 ; } if ( n % 2 == 0 ) { return 2 ; } if ( isPrime ( n - 2 ) ) { return 2 ; } return 3 ; } }
import static java . lang . Math . sqrt ; public class Main { public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( minimumCost ( n ) ) ; } public static int minimumCost ( int n ) { if ( isPrime ( n ) ) { return 1 ; } if ( n % 2 == 1 && isPrime ( n - 2 ) ) { return 2 ; } if ( n % 2 == 0 ) { return 2 ; } return 3 ; } public static boolean isPrime ( int x ) { for ( int i = 2 ; i <= ( int ) sqrt ( x ) + 1 ; i ++ ) { if ( x % i == 0 ) { return false ; } } return true ; } }
public static int snoob ( int x ) { int next = 0 ; if ( x != 0 ) { int rightOne = x & - x ; int nextHigherOneBit = x + rightOne ; int rightOnesPattern = x ^ nextHigherOneBit ; rightOnesPattern = rightOnesPattern / rightOne ; rightOnesPattern = rightOnesPattern >> 2 ; next = nextHigherOneBit | rightOnesPattern ; } return next ; } public static void main ( String [ ] args ) { int x = 156 ; System . out . println ( " Next ▁ higher ▁ number ▁ with ▁ same ▁ number ▁ of ▁ set ▁ bits ▁ is ▁ " + snoob ( x ) ) ; }
public class Main { public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( properDivisorSum ( n ) ) ; n = 5 ; System . out . println ( properDivisorSum ( n ) ) ; } public static int properDivisorSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { if ( j * j > i ) { break ; } if ( i % j == 0 ) { if ( i / j == j ) { sum += j ; } else { sum += j + i / j ; } } } sum = sum - i ; } return sum ; } }
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMinLength ( arr , n ) ) ; } public static int getMinLength ( int [ ] arr , int n ) { int count = 0 ; int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } else { if ( count != 0 ) { result = Math . min ( result , count ) ; } count = 0 ; } } return result ; } }
public class Main { static int INT_MAX = 999999999 ; public static void main ( String [ ] args ) { String inpt = " myfirstgeekarticle " ; System . out . println ( getLevenstein ( inpt ) ) ; } public static int getLevenstein ( String inpt ) { String revInput = new StringBuilder ( inpt ) . reverse ( ) . toString ( ) ; int n = inpt . length ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { dp [ 0 ] [ i ] = i ; dp [ i ] [ 0 ] = i ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( inpt . charAt ( i - 1 ) == revInput . charAt ( j - 1 ) ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; } else { dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } } int res = INT_MAX ; int i = n ; int j = 0 ; while ( i >= 0 ) { res = Math . min ( res , dp [ i ] [ j ] ) ; if ( i < n ) { res = Math . min ( res , dp [ i + 1 ] [ j ] ) ; } if ( i > 0 ) { res = Math . min ( res , dp [ i - 1 ] [ j ] ) ; } i -- ; j ++ ; } return res ; } }
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int LIMIT = 12000 ; Integer [ ] minsumproduct = new Integer [ LIMIT + 1 ] ; factorize ( LIMIT , minsumproduct ) ; int ans = 0 ; for ( int i = 2 ; i < LIMIT * 2 + 1 ; i ++ ) { if ( minsumproduct [ i ] != null ) { ans += minsumproduct [ i ] ; } } return Integer . toString ( ans ) ; } public static void factorize ( int LIMIT , Integer [ ] minsumproduct ) { for ( int i = 2 ; i < LIMIT * 2 + 1 ; i ++ ) { int n = i ; int remain = i ; int maxfactor = i ; int sum = 0 ; int terms = 0 ; if ( remain == 1 ) { if ( sum > n ) { throw new AssertionError ( ) ; } terms += n - sum ; if ( terms <= LIMIT && ( minsumproduct [ terms ] == null || n < minsumproduct [ terms ] ) ) { minsumproduct [ terms ] = n ; } } else { for ( int j = 2 ; j <= maxfactor ; j ++ ) { if ( remain % j == 0 ) { int factor = j ; factorize ( n , remain / factor , Math . min ( factor , maxfactor ) , sum + factor , terms + 1 ) ; } } } } } }
import java . util . * ; public class Main { static int N ; static int MOD = ( int ) ( Math . pow ( 10 , 9 ) + 7 ) ; static int [ ] fact , fact_inv , inv ; public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; N = input . nextInt ( ) ; fact = new int [ N + 1 ] ; fact_inv = new int [ N + 1 ] ; inv = new int [ N + 1 ] ; int [ ] a = Arrays . stream ( input . nextLine ( ) . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . toArray ( ) ; fact [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { fact [ i ] = ( int ) ( ( long ) fact [ i - 1 ] * i % MOD ) ; } fact_inv [ N ] = pow ( fact [ N ] , MOD - 2 , MOD ) ; for ( int i = N - 1 ; i > 0 ; i -- ) { fact_inv [ i ] = ( int ) ( ( long ) fact_inv [ i + 1 ] * ( i + 1 ) % MOD ) ; } for ( int i = 1 ; i <= N ; i ++ ) { inv [ i ] = ( int ) ( ( long ) fact_inv [ i ] * fact [ i - 1 ] % MOD ) ; } int [ ] b = new int [ N ] ; int [ ] s = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { s [ i ] = ( s [ i - 1 ] + inv [ i ] ) % MOD ; } for ( int i = 0 ; i < N ; i ++ ) { b [ i ] = ( s [ i + 1 ] + s [ N - i ] - 1 ) % MOD ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans = ( ans + ( int ) ( ( long ) a [ i ] * b [ i ] % MOD ) ) % MOD ; } ans = ( int ) ( ( long ) ans * fact [ N ] % MOD ) ; System . out . println ( ans ) ; } static int pow ( int base , int exp , int mod ) { int result = 1 ; while ( exp > 0 ) { if ( exp % 2 == 1 ) { result = ( int ) ( ( long ) result *
public class Queue { private List < Integer > items ; public Queue ( ) { this . items = new ArrayList < > ( ) ; } public boolean isEmpty ( ) { return this . items . isEmpty ( ) ; } public void add ( int item ) { this . items . add ( item ) ; } public int pop ( ) { return this . items . remove ( 0 ) ; } public int front ( ) { return this . items . get ( 0 ) ; } public void printQueue ( ) { for ( int i : this . items ) { System . out . print ( i + " ▁ " ) ; } System . out . println ( " " ) ; } } public class Main { public static void reverseQueue ( Queue q ) { if ( q . isEmpty ( ) ) { return ; } int data = q . front ( ) ; q . pop ( ) ; reverseQueue ( q ) ; q . add ( data ) ; } public static void main ( String [ ] args ) { Queue q = new Queue ( ) ; q . add ( 56 ) ; q . add ( 27 ) ; q . add ( 30 ) ; q . add ( 45 ) ; q . add ( 85 ) ; q . add ( 92 ) ; q . add ( 58 ) ; q . add ( 80 ) ; q . add ( 90 ) ; q . add ( 100 ) ; reverseQueue ( q ) ; q . printQueue ( ) ; } }
public class Main { static int MAX = 1000000 ; static boolean [ ] prime = new boolean [ MAX + 1 ] ; public static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; int p = 2 ; int c = 0 ; while ( p * p <= MAX ) { c += 1 ; if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) { prime [ i ] = false ; } } p += 1 ; } } public static int findDiff ( int [ ] arr , int n ) { int min = MAX + 2 ; int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == true ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } if ( arr [ i ] < min ) { min = arr [ i ] ; } } } return max == - 1 ? - 1 : ( max - min ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 4 ; int [ ] arr = { 1 , 2 , 3 , 5 } ; int res = findDiff ( arr , n ) ; if ( res == - 1 ) { System . out . println ( " No ▁ prime ▁ numbers " ) ; } else { System . out . println ( " Difference ▁ is ▁ " + res ) ; } } }
``` java import java . util . * ; public class Main { public static int find ( int x , int [ ] par_lst ) { if ( par_lst [ x ] == x ) { return x ; } int root = find ( par_lst [ x ] , par_lst ) ; par_lst [ x ] = root ; return root ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = scanner . nextInt ( ) ; if ( n == 0 ) { break ; } int m = scanner . nextInt ( ) ; List < int [ ] > edges = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { String [ ] input = scanner . next ( ) . split ( " , " ) ; int a = Integer . parseInt ( input [ 0 ] ) ; int b = Integer . parseInt ( input [ 1 ] ) ; int d = Integer . parseInt ( input [ 2 ] ) ; edges . add ( new int [ ] { d / 100 - 1 , a , b } ) ; } edges . sort ( Comparator . comparingInt ( arr -> arr [ 0 ] ) ) ; int [ ] par_lst = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { par_lst [ i ] = i ; } int ans = 0 ; for ( int [ ] edge : edges ) { int d = edge [ 0 ] ; int a = edge [ 1 ] ; int b = edge [ 2 ] ; int par_a = find ( a , par_lst ) ; int par_b = find ( b , par_lst ) ; if ( par_a != par_b ) { par_lst [ par_a ] = par_b ; ans += d ; } } System . out . println ( ans ) ; } } } ```
List < Integer > li = new ArrayList < > ( ) ; int ind = 0 ; for ( int i = 1 ; i < 371 ; i ++ ) { List < Integer > temp = new ArrayList < > ( ) ; int p = i ; int q = i ; int count = 0 ; while ( p != 0 ) { p /= 10 ; count ++ ; } if ( count == 1 ) { li . add ( i ) ; } if ( count == 2 ) { temp . clear ( ) ; while ( q != 0 ) { int x = q % 10 ; q /= 10 ; temp . add ( x ) ; } List < Integer > reversedTemp = new ArrayList < > ( temp ) ; Collections . reverse ( reversedTemp ) ; li . addAll ( reversedTemp ) ; } if ( count == 3 ) { temp . clear ( ) ; while ( q != 0 ) { int x = q % 10 ; q /= 10 ; temp . add ( x ) ; } List < Integer > reversedTemp = new ArrayList < > ( temp ) ; Collections . reverse ( reversedTemp ) ; li . addAll ( reversedTemp ) ; } } li . remove ( li . size ( ) - 1 ) ; li . remove ( li . size ( ) - 1 ) ; Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; System . out . println ( li . get ( n - 1 ) ) ;
public class Main { public static void main ( String [ ] args ) { String S = " abba " ; int N = S . length ( ) ; System . out . println ( distinctSubstring ( S , N ) ) ; } public static int distinctSubstring ( String P , int N ) { Map < String , Integer > S = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { boolean [ ] freq = new boolean [ 26 ] ; String s = " " ; for ( int j = i ; j < N ; j ++ ) { int pos = P . charAt ( j ) - ' a ' ; if ( freq [ pos ] ) { break ; } freq [ pos ] = true ; s += P . charAt ( j ) ; S . put ( s , 1 ) ; } } return S . size ( ) ; } }
import java . util . Scanner ; import java . util . ArrayList ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input1 [ 0 ] ) ; int k = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( String s : input2 ) { a . add ( Integer . parseInt ( s ) ) ; } int ans ; if ( ( n - k ) % ( k - 1 ) == 0 ) { ans = ( n - k ) / ( k - 1 ) ; } else { ans = ( n - k ) / ( k - 1 ) + 1 ; } System . out . println ( ans + 1 ) ; } }
import java . util . * ; public class Main { static int INT_MAX = Integer . MAX_VALUE ; static int INT_MIN = Integer . MIN_VALUE ; public static int minimumAdjacentDifference ( int [ ] a , int n , int k ) { int minDiff = INT_MAX ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { int cnt = Integer . bitCount ( i ) ; if ( cnt == n - k ) { List < Integer > temp = new ArrayList < > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { temp . add ( a [ j ] ) ; } } int maxDiff = INT_MIN ; for ( int j = 0 ; j < temp . size ( ) - 1 ; j ++ ) { maxDiff = Math . max ( maxDiff , temp . get ( j + 1 ) - temp . get ( j ) ) ; } minDiff = Math . min ( minDiff , maxDiff ) ; } } return minDiff ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 2 ; int [ ] a = { 3 , 7 , 8 , 10 , 14 } ; System . out . println ( minimumAdjacentDifference ( a , n , k ) ) ; } }
public class Main { public static void difference ( int [ ] arr , int n ) { int largest = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( largest < arr [ i ] ) { largest = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = largest - arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] arr = { 10 , 5 , 9 , 3 , 2 } ; int n = arr . length ; difference ( arr , n ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] A = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K = 4 ; System . out . println ( countKdivPairs ( A , n , K ) ) ; } public static int countKdivPairs ( int [ ] A , int n , int K ) { int [ ] freq = new int [ K ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ A [ i ] % K ] ++ ; } int sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2 ; int i = 1 ; while ( i <= K / 2 && i != ( K - i ) ) { sum += freq [ i ] * freq [ K - i ] ; i ++ ; } if ( K % 2 == 0 ) { sum += ( freq [ K / 2 ] * ( freq [ K / 2 ] - 1 ) / 2 ) ; } return sum ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { String input = scanner . nextLine ( ) ; if ( input . length ( ) == 1 ) { break ; } char [ ] a = input . toCharArray ( ) ; String input2 = scanner . nextLine ( ) ; String input3 = scanner . nextLine ( ) ; a = ( input + input2 + input3 ) . toCharArray ( ) ; System . out . println ( f ( a ) ) ; } } public static String f ( char [ ] a ) { for ( char x : new char [ ] { ' b ' , ' w ' } ) { if ( countSubstring ( a , 0 , 4 , x ) == 3 || countSubstring ( a , 2 , 7 , 2 , x ) == 3 ) { return String . valueOf ( x ) ; } for ( int i = 0 ; i < 3 ; i ++ ) { if ( countSubstring ( a , i * 3 , i * 3 + 3 , x ) == 3 || countSubstring ( a , i , 3 , x ) == 3 ) { return String . valueOf ( x ) ; } } } return " NA " ; } public static int countSubstring ( char [ ] a , int start , int end , char x ) { int count = 0 ; for ( int i = start ; i < end ; i ++ ) { if ( a [ i ] == x ) { count ++ ; } } return count ; } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( " Index ▁ of ▁ 0 ▁ to ▁ be ▁ replaced ▁ is ▁ " + maxOnesIndex ( arr , n ) ) ; } public static int maxOnesIndex ( int [ ] arr , int n ) { int max_count = 0 ; int max_index = 0 ; int prev_zero = - 1 ; int prev_prev_zero = - 1 ; for ( int curr = 0 ; curr < n ; curr ++ ) { if ( arr [ curr ] == 0 ) { if ( curr - prev_prev_zero > max_count ) { max_count = curr - prev_prev_zero ; max_index = prev_zero ; } prev_prev_zero = prev_zero ; prev_zero = curr ; } } if ( n - prev_prev_zero > max_count ) { max_index = prev_zero ; } return max_index ; } }
public class Main { public static void main ( String [ ] args ) { int n , k ; n = 4 ; k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 ; k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } public static long minimumX ( int n , int k ) { long ans = ( long ) Math . pow ( 10 , 18 ) ; for ( int i = k - 1 ; i > 0 ; i -- ) { if ( n % i == 0 ) { ans = Math . min ( ans , i + ( n / i ) * k ) ; } } return ans ; } }
public class Main { public static void main ( String [ ] args ) { long a = 10123465234878998L ; long b = 65746311545646431L ; long m = 10005412336548794L ; System . out . println ( moduloMultiplication ( a , b , m ) ) ; } public static long moduloMultiplication ( long a , long b , long mod ) { long res = 0 ; a = a % mod ; while ( b != 0 ) { if ( ( b & 1 ) == 1 ) { res = ( res + a ) % mod ; } a = ( 2 * a ) % mod ; b >>= 1 ; } return res ; } }
``` java import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; if ( n == 0 ) break ; List < String [ ] > strs = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String input = scanner . nextLine ( ) ; String [ ] pair = { String . valueOf ( input . charAt ( 0 ) ) , String . valueOf ( input . charAt ( input . length ( ) - 1 ) ) } ; strs . add ( pair ) ; } int [ ] ss = new int [ 26 ] ; int [ ] ee = new int [ 26 ] ; int [ ] [ ] path = new int [ 27 ] [ 26 ] ; int [ ] u = new int [ 26 ] ; for ( String [ ] pair : strs ) { char s = pair [ 0 ] . charAt ( 0 ) ; char e = pair [ 1 ] . charAt ( 0 ) ; ss [ s - ' a ' ] ++ ; ee [ e - ' a ' ] ++ ; path [ s - ' a ' ] [ e - ' a ' ] ++ ; } boolean flag = false ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( ss [ i ] - ee [ i ] != 0 ) { flag = true ; System . out . println ( " NG " ) ; break ; } } if ( ! flag ) { int s = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( ss [ i ] != 0 ) { s = i ; break ; } } if ( ss . length == searchnode ( s , u , path ) ) { System . out . println ( " OK " ) ; } else { System . out . println ( " NG " ) ; } } } } public static int searchnode ( int i , int [ ] u , int [ ] [ ] path ) { int r = 1 ; u [ i ] = 1 ; for ( int j = 0 ; j < 26 ; j ++ ) { if ( path [ i ] [ j ] != 0 && u [ j ] == 0 ) { r += searchnode ( j , u , path ) ; } } return r ; } } ```
import java . util . Scanner ; import java . util . ArrayList ; import java . util . Collections ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int n = input . nextInt ( ) ; ArrayList < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a . add ( input . nextInt ( ) ) ; } int ma = Collections . max ( a ) ; int mai = a . indexOf ( ma ) ; int mi = Collections . min ( a ) ; int mii = a . indexOf ( mi ) ; ArrayList < String > ans = new ArrayList < > ( ) ; if ( Math . abs ( ma ) >= Math . abs ( mi ) ) { for ( int i = 0 ; i < n ; i ++ ) { a . set ( i , a . get ( i ) + ma ) ; ans . add ( ( mai + 1 ) + " ▁ " + ( i + 1 ) ) ; } for ( int i = 1 ; i < n ; i ++ ) { a . set ( i , a . get ( i ) + a . get ( i - 1 ) ) ; ans . add ( i + " ▁ " + ( i + 1 ) ) ; } } else { for ( int i = 0 ; i < n ; i ++ ) { a . set ( i , a . get ( i ) + mi ) ; ans . add ( ( mii + 1 ) + " ▁ " + ( i + 1 ) ) ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { a . set ( i , a . get ( i ) + a . get ( i + 1 ) ) ; ans . add ( ( i + 2 ) + " ▁ " + ( i + 1 ) ) ; } } System . out . println ( ans . size ( ) ) ; for ( String i : ans ) { System . out . println ( i ) ; } } }
public class Main { public static boolean checkPalindrome ( String string ) { int length = string . length ( ) ; length -= 1 ; for ( int i = 0 ; i < length ; i ++ ) { if ( string . charAt ( i ) != string . charAt ( length ) ) { return false ; } length -= 1 ; } return true ; } public static void printSolution ( String [ ] [ ] partitions ) { for ( int i = 0 ; i < partitions . length ; i ++ ) { for ( int j = 0 ; j < partitions [ i ] . length ; j ++ ) { System . out . print ( partitions [ i ] [ j ] + " ▁ " ) ; } System . out . println ( ) ; } } public static void addStrings ( ArrayList < String [ ] > v , String s , ArrayList < String > temp , int index ) { int length = s . length ( ) ; String string = " " ; ArrayList < String > current = new ArrayList < > ( temp ) ; if ( index == 0 ) { temp . clear ( ) ; } for ( int i = index ; i < length ; i ++ ) { string += s . charAt ( i ) ; if ( checkPalindrome ( string ) ) { temp . add ( string ) ; if ( i + 1 < length ) { addStrings ( v , s , new ArrayList < > ( temp ) , i + 1 ) ; } else { v . add ( temp . toArray ( new String [ 0 ] ) ) ; } temp = new ArrayList < > ( current ) ; } } } public static void partition ( String s , ArrayList < String [ ] > v ) { ArrayList < String > temp = new ArrayList < > ( ) ; addStrings ( v , s , temp , 0 ) ; printSolution ( v . toArray ( new String [ 0 ] [ 0 ] ) ) ; } public static void main ( String [ ] args ) { String s = " geeks " ; ArrayList < String [ ] > partitions = new ArrayList < > ( ) ; partition ( s , partitions ) ; } }
public class Main { static long MOD = 100000007 ; static long [ ] [ ] tbl = new long [ 1001 ] [ 1001 ] ; public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int k = 0 ; int r = scanner . nextInt ( ) ; int c = scanner . nextInt ( ) ; int a1 = scanner . nextInt ( ) ; int a2 = scanner . nextInt ( ) ; int b1 = scanner . nextInt ( ) ; int b2 = scanner . nextInt ( ) ; int dr = Math . abs ( a1 - b1 ) ; if ( dr > r - dr ) dr = r - dr ; if ( ( dr << 1 ) == r ) k += 1 ; int dc = Math . abs ( a2 - b2 ) ; if ( dc > c - dc ) dc = c - dc ; if ( ( dc << 1 ) == c ) k += 1 ; System . out . println ( ( dp ( dr + dc , Math . min ( dr , dc ) ) << k ) % MOD ) ; } public static long dp ( int n , int k ) { if ( tbl [ n ] [ k ] != 0 ) return tbl [ n ] [ k ] ; if ( ( k << 1 ) > n ) k = n - k ; long ans ; if ( k == 0 ) { ans = 1 ; } else if ( k == 1 ) { ans = n ; } else { ans = dp ( n - 1 , k ) + dp ( n - 1 , k - 1 ) ; } tbl [ n ] [ k ] = ans % MOD ; return tbl [ n ] [ k ] ; } }
import java . util . HashMap ; public class Main { public static void findSubsequence ( int [ ] arr , int n , int k ) { HashMap < Integer , Integer > M = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { M . put ( arr [ i ] , M . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; } int [ ] numCount = new int [ k + 1 ] ; for ( int p : M . keySet ( ) ) { if ( p <= k ) { int i = 1 ; while ( p * i <= k ) { numCount [ p * i ] += M . get ( p ) ; i ++ ; } } else { break ; } } int lcm = 0 , length = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { if ( numCount [ i ] > length ) { length = numCount [ i ] ; lcm = i ; } } if ( lcm == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( " LCM ▁ = ▁ " + lcm + " , ▁ Length ▁ = ▁ " + length ) ; System . out . print ( " Indexes ▁ = ▁ " ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( lcm % arr [ i ] == 0 ) { System . out . print ( i + " ▁ " ) ; } } } } public static void main ( String [ ] args ) { int k = 14 ; int [ ] arr = { 2 , 3 , 4 , 5 } ; int n = arr . length ; findSubsequence ( arr , n , k ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 9 , 14 , 6 , 2 , 11 } ; int [ ] b = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( countPairs ( a , b , n , m ) ) ; } public static int countPairs ( int [ ] a , int [ ] b , int n , int m ) { int odd1 = 0 ; int even1 = 0 ; int odd2 = 0 ; int even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) { odd1 += 1 ; } else { even1 += 1 ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 1 ) { odd2 += 1 ; } else { even2 += 1 ; } } int pairs = Math . min ( odd1 , odd2 ) + Math . min ( even1 , even2 ) ; return pairs ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 9 , 14 , 6 , 2 , 11 } ; int [ ] b = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( countPairs ( a , b , n , m ) ) ; } public static int countPairs ( int [ ] a , int [ ] b , int n , int m ) { int odd1 = 0 ; int even1 = 0 ; int odd2 = 0 ; int even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 != 0 ) { odd1 += 1 ; } else { even1 += 1 ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 != 0 ) { odd2 += 1 ; } else { even2 += 1 ; } } int pairs = ( Math . min ( odd1 , even2 ) + Math . min ( odd2 , even1 ) ) ; return pairs ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 2 , 6 , 80 , 100 } ; int size = arr . length ; System . out . println ( " Maximum ▁ difference ▁ is ▁ " + maxDiff ( arr , size ) ) ; } public static int maxDiff ( int [ ] arr , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int min_element = arr [ 0 ] ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] - min_element > max_diff ) { max_diff = arr [ i ] - min_element ; } if ( arr [ i ] < min_element ) { min_element = arr [ i ] ; } } return max_diff ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findMax ( n ) ) ; } public static int binomialCoeff ( int n , int k ) { int [ ] [ ] C = new int [ n + 1 ] [ k + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) { C [ i ] [ j ] = 1 ; } else { C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } } return C [ n ] [ k ] ; } public static int findMax ( int n ) { return binomialCoeff ( n , n / 2 ) ; } }
public class Main { static final int MAX = 26 ; public static void main ( String [ ] args ) { String str1 = " geeksforgeeks " ; int Len = str1 . length ( ) ; System . out . println ( minimumAddition ( str1 , Len ) ) ; } public static int minimumAddition ( String str1 , int Len ) { int [ ] freq = new int [ MAX ] ; for ( int i = 0 ; i < Len ; i ++ ) { freq [ str1 . charAt ( i ) - ' a ' ] ++ ; } int maxFreq = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { maxFreq = Math . max ( maxFreq , freq [ i ] ) ; } int minAddition = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 0 ) { minAddition += Math . abs ( maxFreq - freq [ i ] ) ; } } return minAddition ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String a = scanner . nextLine ( ) ; String b = scanner . nextLine ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = ans + Math . min ( 10 - Math . abs ( Integer . parseInt ( String . valueOf ( a . charAt ( i ) ) ) - Integer . parseInt ( String . valueOf ( b . charAt ( i ) ) ) , Math . abs ( Integer . parseInt ( String . valueOf ( a . charAt ( i ) ) ) - Integer . parseInt ( String . valueOf ( b . charAt ( i ) ) ) ) ) ; } System . out . println ( ans ) ; } }
public class Main { static int MAX = 32 ; static int [ ] pow2 = new int [ MAX ] ; static boolean [ ] visited = new boolean [ MAX ] ; static List < Integer > ans = new ArrayList < > ( ) ; public static void power_2 ( ) { int an = 1 ; for ( int i = 0 ; i < MAX ; i ++ ) { pow2 [ i ] = an ; an *= 2 ; } } public static int countSetBits ( int x ) { int setBits = 0 ; while ( x != 0 ) { x = x & ( x - 1 ) ; setBits += 1 ; } return setBits ; } public static void add ( int num ) { int point = 0 ; int value = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( visited [ i ] ) { continue ; } else { if ( ( num & 1 ) != 0 ) { value += ( 1 << i ) ; } num = num / 2 ; } } ans . add ( value ) ; } public static void solve ( int n , int k ) { ans . add ( k ) ; int countk = countSetBits ( k ) ; if ( pow2 [ countk ] < n ) { System . out . println ( - 1 ) ; return ; } int count = 0 ; for ( int i = 0 ; i < pow2 [ countk ] - 1 ; i ++ ) { add ( i ) ; count += 1 ; if ( count == n ) { break ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans . get ( i ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 3 ; int k = 5 ; power_2 ( ) ; solve ( n , k ) ; } }
import java . util . stream . IntStream ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int [ ] ans = IntStream . range ( - 999 , 1000 ) . boxed ( ) . flatMap ( a -> IntStream . range ( 2 , 1000 ) . mapToObj ( b -> new int [ ] { a , b } ) ) . max ( ( ab1 , ab2 ) -> Integer . compare ( countConsecutivePrimes ( ab1 ) , countConsecutivePrimes ( ab2 ) ) ) . get ( ) ; return String . valueOf ( ans [ 0 ] * ans [ 1 ] ) ; } public static int countConsecutivePrimes ( int [ ] ab ) { int a = ab [ 0 ] ; int b = ab [ 1 ] ; for ( int i = 0 ; ; i ++ ) { int n = i * i + i * a + b ; if ( ! isPrime ( n ) ) { return i ; } } } private static boolean [ ] isPrimeCache = eulerlib . listPrimality ( 1000 ) ; public static boolean isPrime ( int n ) { if ( n < 0 ) { return false ; } else if ( n < isPrimeCache . length ) { return isPrimeCache [ n ] ; } else { return eulerlib . isPrime ( n ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int range = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int i = 0 ; i < range ; i ++ ) { String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int r = Integer . parseInt ( input [ 1 ] ) ; int a = Math . min ( r , n - 1 ) ; int ans = ( a * ( a + 1 ) ) / 2 ; if ( a != r ) { ans += 1 ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { static final int MAX = 100001 ; static int [ ] isPrime = new int [ MAX ] ; public static void main ( String [ ] args ) { sieve ( ) ; int [ ] A = { 2 , 1 , 1 } ; int n = A . length ; findSubset ( A , n ) ; } static void sieve ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { isPrime [ i ] = 0 ; } for ( int p = 2 ; p <= Math . ceil ( Math . sqrt ( MAX ) ) ; p ++ ) { if ( isPrime [ p ] == 0 ) { for ( int i = 2 * p ; i < MAX ; i += p ) { isPrime [ i ] = 1 ; } } } } static void findSubset ( int [ ] a , int n ) { int cnt1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { cnt1 ++ ; } } if ( cnt1 > 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 1 && isPrime [ a [ i ] + 1 ] == 0 ) { System . out . print ( cnt1 + 1 ) ; for ( int j = 0 ; j < cnt1 ; j ++ ) { System . out . print ( "1 ▁ " ) ; } System . out . println ( a [ i ] ) ; return ; } } } if ( cnt1 >= 2 ) { System . out . print ( cnt1 ) ; for ( int i = 0 ; i < cnt1 ; i ++ ) { System . out . print ( "1 ▁ " ) ; } System . out . println ( ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( isPrime [ a [ i ] + a [ j ] ] == 0 ) { System . out . println ( 2 ) ; System . out . println ( a [ i ] + " ▁ " + a [ j ] ) ; } } } System . out . println ( - 1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int r = scanner . nextInt ( ) ; int t = scanner . nextInt ( ) ; int [ ] speed = new int [ n ] ; int [ ] point = new int [ n ] ; int [ ] bottle = new int [ r ] ; for ( int i = 0 ; i < n ; i ++ ) { speed [ i ] = scanner . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { point [ i ] = 0 ; } for ( int i = 0 ; i < r ; i ++ ) { bottle [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { point [ i ] = ( point [ i ] + speed [ i ] ) % r ; bottle [ point [ i ] ] += 1 ; } for ( int j = 0 ; j < t - 1 ; j ++ ) { int [ ] nums = new int [ r ] ; for ( int i = 0 ; i < n ; i ++ ) { bottle [ point [ i ] ] -= 1 ; point [ i ] = ( point [ i ] + speed [ i ] ) % r ; nums [ point [ i ] ] += 1 ; } for ( int i = 0 ; i < r ; i ++ ) { if ( bottle [ i ] < nums [ i ] ) { bottle [ i ] = nums [ i ] ; } bottle [ i ] += nums [ i ] ; } } int sum = 0 ; for ( int i = 0 ; i < r ; i ++ ) { sum += bottle [ i ] ; } System . out . println ( sum ) ; } }
Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( scanner . nextLine ( ) . replace ( " Hoshino " , " Hoshina " ) ) ; }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 15 , 18 , 2 , 3 , 6 , 12 } ; int n = arr . length ; System . out . println ( countRotations ( arr , 0 , n - 1 ) ) ; } public static int countRotations ( int [ ] arr , int low , int high ) { if ( high < low ) { return 0 ; } if ( high == low ) { return low ; } int mid = low + ( high - low ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) { return ( mid + 1 ) ; } if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) { return mid ; } if ( arr [ high ] > arr [ mid ] ) { return countRotations ( arr , low , mid - 1 ) ; } return countRotations ( arr , mid + 1 , high ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] input = br . readLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( input [ 0 ] ) ; int m = Integer . parseInt ( input [ 1 ] ) ; int i = 0 ; int ans = 0 ; while ( true ) { if ( i + 1 > m ) { ans = m ; break ; } m -= i + 1 ; i += 1 ; i %= n ; } System . out . println ( ans ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 7 } ; int n = arr . length ; int m = 5 ; if ( modularSum ( arr , n , m ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static boolean modularSum ( int [ ] arr , int n , int m ) { if ( n > m ) { return true ; } boolean [ ] DP = new boolean [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( DP [ 0 ] ) { return true ; } boolean [ ] temp = new boolean [ m ] ; for ( int j = 0 ; j < m ; j ++ ) { if ( DP [ j ] ) { if ( ! DP [ ( j + arr [ i ] ) % m ] ) { temp [ ( j + arr [ i ] ) % m ] = true ; } } } for ( int j = 0 ; j < m ; j ++ ) { if ( temp [ j ] ) { DP [ j ] = true ; } } DP [ arr [ i ] % m ] = true ; } return DP [ 0 ] ; } }
import java . util . Scanner ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; List < Integer > a = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a . add ( scanner . nextInt ( ) ) ; } int q = scanner . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int b = scanner . nextInt ( ) ; int e = scanner . nextInt ( ) ; int k = scanner . nextInt ( ) ; int count = 0 ; for ( int j = b ; j < e ; j ++ ) { if ( a . get ( j ) == k ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int x = scanner . nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = scanner . nextInt ( ) ; } int INF = ( 1 << 42 ) - 1 ; int [ ] [ ] cum = new int [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i ; j < N ; j ++ ) { cum [ i ] [ j ] = Math . min ( j > 0 ? cum [ i ] [ j - 1 ] : INF , A [ j ] ) ; } } int ans = INF ; for ( int k = 0 ; k < N ; k ++ ) { int score = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( j - k >= 0 ) { score += cum [ j - k ] [ j ] ; } else { score += Math . min ( cum [ 0 ] [ j ] , cum [ ( j - k ) % N ] [ N - 1 ] ) ; } } ans = Math . min ( ans , k * x + score ) ; } System . out . println ( ans ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; while ( true ) { int d = scanner . nextInt ( ) ; int w = scanner . nextInt ( ) ; if ( d + w == 0 ) break ; int [ ] [ ] pond = new int [ d ] [ w ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { pond [ i ] [ j ] = scanner . nextInt ( ) ; } } int ans = 0 ; for ( int left = 0 ; left < w - 1 ; left ++ ) { for ( int right = w - 1 ; right > left ; right -- ) { for ( int top = 0 ; top < d - 1 ; top ++ ) { for ( int under = d - 1 ; under > top ; under -- ) { int outh = 10 ; for ( int i = left ; i <= right ; i ++ ) { outh = Math . min ( outh , pond [ top ] [ i ] ) ; outh = Math . min ( outh , pond [ under ] [ i ] ) ; } int [ ] [ ] zpond = new int [ w ] [ d ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { zpond [ j ] [ i ] = pond [ i ] [ j ] ; } } for ( int i = top ; i <= under ; i ++ ) { outh = Math . min ( outh , zpond [ left ] [ i ] ) ; outh = Math . min ( outh , zpond [ right ] [ i ] ) ; } int pondh = 0 ; for ( int i = top + 1 ; i < under ; i ++ ) { for ( int j = left + 1 ; j < right ; j ++ ) { pondh = Math . max ( pondh , pond [ i ] [ j ] ) ; } } if ( pondh < outh ) { int cap = outh * ( under - top - 1 ) * ( right - left - 1 ) - sum ( pond , top + 1 , under , left + 1 , right ) ; ans = Math . max ( cap , ans ) ; } } } } } System . out . println ( ans ) ; } } public static int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] input1 = scanner . nextLine ( ) . split ( " ▁ " ) ; int num = Integer . parseInt ( input1 [ 0 ] ) ; int k = Integer . parseInt ( input1 [ 1 ] ) ; String [ ] input2 = scanner . nextLine ( ) . split ( " ▁ " ) ; List < Integer > arr = new ArrayList < > ( ) ; for ( String s : input2 ) { arr . add ( Integer . parseInt ( s ) ) ; } Set < Integer > different = new HashSet < > ( ) ; int temp = 0 ; Collections . sort ( arr ) ; for ( int x : arr ) { if ( x % k != 0 || ! different . contains ( x / k ) ) { different . add ( x ) ; } temp = Math . max ( different . size ( ) , temp ) ; } System . out . println ( temp ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; int k = 3 ; System . out . println ( sum ( k , n ) ) ; } public static int sum ( int k , int n ) { int sum = ( int ) ( Math . pow ( k , n + 1 ) - Math . pow ( k - 1 , n + 1 ) ) ; return sum ; } }
public class Main { static int [ ] [ ] [ ] dp = new int [ 18 ] [ 2 ] [ 162 ] ; public static void main ( String [ ] args ) { int count = 0 ; int Sum = 4 ; String number = "100" ; for ( int i = 0 ; i < 18 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { for ( int k = 0 ; k < 162 ; k ++ ) { dp [ i ] [ j ] [ k ] = - 1 ; } } } System . out . println ( solve ( 0 , 0 , 0 , Sum , number , number . length ( ) ) ) ; } public static int solve ( int i , int tight , int sum_so_far , int Sum , String number , int length ) { if ( i == length ) { if ( sum_so_far == Sum ) { return 1 ; } else { return 0 ; } } int ans = dp [ i ] [ tight ] [ sum_so_far ] ; if ( ans != - 1 ) { return ans ; } ans = 0 ; for ( int currdigit = 0 ; currdigit < 10 ; currdigit ++ ) { String currdigitstr = String . valueOf ( currdigit ) ; if ( tight == 0 && currdigitstr . compareTo ( String . valueOf ( number . charAt ( i ) ) ) > 0 ) { break ; } int ntight = tight | ( currdigitstr . compareTo ( String . valueOf ( number . charAt ( i ) ) ) < 0 ? 1 : 0 ) ; int nsum_so_far = sum_so_far + currdigit ; ans += solve ( i + 1 , ntight , nsum_so_far , Sum , number , length ) ; } return ans ; } }
int total = 0 ; int num_cases = Integer . parseInt ( input ( ) ) ; for ( int i = 0 ; i < num_cases ; i ++ ) { String line = input ( ) ; if ( Arrays . stream ( line . split ( " ▁ " ) ) . mapToInt ( Integer :: parseInt ) . sum ( ) >= 2 ) { total += 1 ; } } System . out . println ( total ) ;
public class newNode { int data ; newNode left , right ; public newNode ( int key ) { this . data = key ; this . left = null ; this . right = null ; } } public class Main { public static int evenOddLevelDifference ( newNode root ) { if ( root == null ) { return 0 ; } List < newNode > q = new ArrayList < > ( ) ; q . add ( root ) ; int level = 0 ; int evenSum = 0 ; int oddSum = 0 ; while ( ! q . isEmpty ( ) ) { int size = q . size ( ) ; level ++ ; while ( size > 0 ) { newNode temp = q . get ( 0 ) ; q . remove ( 0 ) ; if ( level % 2 == 0 ) { evenSum += temp . data ; } else { oddSum += temp . data ; } if ( temp . left != null ) { q . add ( temp . left ) ; } if ( temp . right != null ) { q . add ( temp . right ) ; } size -- ; } } return ( oddSum - evenSum ) ; } public static void main ( String [ ] args ) { newNode root = new newNode ( 5 ) ; root . left = new newNode ( 2 ) ; root . right = new newNode ( 6 ) ; root . left . left = new newNode ( 1 ) ; root . left . right = new newNode ( 4 ) ; root . left . right . left = new newNode ( 3 ) ; root . right . right = new newNode ( 8 ) ; root . right . right . right = new newNode ( 9 ) ; root . right . right . left = new newNode ( 7 ) ; int result = evenOddLevelDifference ( root ) ; System . out . println ( " Difference ▁ between ▁ sums ▁ is ▁ " + result ) ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 3 , 4 , 5 , 6 , 7 , 2 , 10 , 11 } ; int n = a . length ; int k = 5 ; System . out . println ( countSubarrays ( a , n , k ) ) ; } public static int countSubarrays ( int [ ] a , int n , int x ) { int count = 0 ; int number = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { count += 1 ; } else { number += ( count ) * ( count + 1 ) / 2 ; count = 0 ; } } if ( count > 0 ) { number += ( count ) * ( count + 1 ) / 2 ; } return ( int ) number ; } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } public static int minCost ( int [ ] arr , int n ) { int count_even = 0 ; int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count_even ++ ; } else { count_odd ++ ; } } return Math . min ( count_even , count_odd ) ; } }
public class Main { static void printLastOccurrence ( int [ ] a , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < 7 ; i ++ ) { mp . put ( i , 0 ) ; } for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , i ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( a [ i ] ) == i ) { System . out . print ( a [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] a = { 1 , 5 , 5 , 1 , 6 , 1 } ; int n = a . length ; printLastOccurrence ( a , n ) ; } }
while ( true ) { int n = Integer . parseInt ( new Scanner ( System . in ) . nextLine ( ) ) ; if ( n == 0 ) { break ; } String [ ] inputArr = new Scanner ( System . in ) . nextLine ( ) . split ( " ▁ " ) ; int [ ] s = new int [ inputArr . length ] ; for ( int i = 0 ; i < inputArr . length ; i ++ ) { s [ i ] = Integer . parseInt ( inputArr [ i ] ) ; } if ( Arrays . stream ( s ) . max ( ) . getAsInt ( ) < 2 ) { System . out . println ( " NA " ) ; } else { int t = ( int ) Arrays . stream ( s ) . filter ( num -> num == 0 ) . count ( ) ; System . out . println ( n - t + 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 5 ; int m = 5 ; System . out . println ( countPaths ( n , m ) ) ; } public static int countPaths ( int m , int n ) { if ( m == 1 || n == 1 ) { return 1 ; } return countPaths ( m - 1 , n ) + countPaths ( m , n - 1 ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 20 ; double a = 2.5 ; double d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } public static double sumOfAP ( double a , double d , int n ) { double sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 5 , 0 , 3 , 1 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } public static int countPairs ( int [ ] arr , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) { count ++ ; } } } return count ; } }
public class Main { static void coordinateCompression ( int [ ] arr , int n ) { Map < Integer , Integer > s = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . put ( arr [ i ] , 1 ) ; } int index = 0 ; Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int itr : new TreeSet < > ( s . keySet ( ) ) ) { index ++ ; mp . put ( itr , index ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = mp . get ( arr [ i ] ) ; } } static int query ( int [ ] BIT , int index , int n ) { int ans = 0 ; while ( index > 0 ) { ans = Math . max ( ans , BIT [ index ] ) ; index -= index & ( - index ) ; } return ans ; } static void update ( int [ ] BIT , int index , int n ) { int x = query ( BIT , index - 1 , n ) ; int value = x + 1 ; while ( index <= n ) { BIT [ index ] = Math . max ( BIT [ index ] , value ) ; index += index & ( - index ) ; } } static int findLISLength ( int [ ] arr , int n ) { coordinateCompression ( arr , n ) ; int [ ] BIT = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { update ( BIT , arr [ i ] , n ) ; } return query ( BIT , n , n ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 6 , 5 , 1 , 3 , 2 , 4 , 8 , 7 } ; int n = arr . length ; int ans = findLISLength ( arr , n ) ; System . out . println ( ans ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int i = 0 ; i < t ; i ++ ) { int n = scanner . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = new int [ n ] ; for ( int k = 0 ; k < n ; k ++ ) { a [ j ] [ k ] = scanner . nextInt ( ) ; } } boolean ans = false ; for ( int j = 0 ; j < 5 ; j ++ ) { for ( int k = 0 ; k < 5 ; k ++ ) { if ( k != j ) { int cnt1 = 0 ; int cnt2 = 0 ; int cntno = 0 ; for ( int z = 0 ; z < n ; z ++ ) { if ( a [ z ] [ j ] == 1 ) { cnt1 ++ ; } if ( a [ z ] [ k ] == 1 ) { cnt2 ++ ; } if ( a [ z ] [ j ] == 0 && a [ z ] [ k ] == 0 ) { cntno ++ ; } } if ( cnt1 >= n / 2 && cnt2 >= n / 2 && cntno == 0 ) { ans = true ; } } } } if ( ans ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } } ```
public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { int BASE = 10 ; int DIGITS = 20 ; int CONSECUTIVE = 3 ; int MAX_SUM = 9 ; int innerlen = ( int ) Math . pow ( BASE , CONSECUTIVE ) ; int [ ] [ ] ways = new int [ DIGITS + CONSECUTIVE + 1 ] [ innerlen ] ; ways [ 0 ] [ 0 ] = 1 ; for ( int digits = 1 ; digits < DIGITS + CONSECUTIVE + 1 ; digits ++ ) { int [ ] newrow = new int [ innerlen ] ; for ( int prefix = 0 ; prefix < innerlen ; prefix ++ ) { int sum = 0 ; if ( digitSum ( prefix ) <= MAX_SUM ) { for ( int nextdigit = 0 ; nextdigit < BASE ; nextdigit ++ ) { sum += ways [ digits - 1 ] [ prefix % ( ( int ) Math . pow ( BASE , CONSECUTIVE - 1 ) ) * BASE + nextdigit ] ; } } newrow [ prefix ] = sum ; } ways [ digits ] = newrow ; } int ans = ways [ ways . length - 1 ] [ 0 ] - ways [ ways . length - 2 ] [ 0 ] ; return Integer . toString ( ans ) ; } public static int digitSum ( int n ) { int sum = 0 ; String numStr = Integer . toString ( n ) ; for ( int i = 0 ; i < numStr . length ( ) ; i ++ ) { sum += Character . getNumericValue ( numStr . charAt ( i ) ) ; } return sum ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] arr = new String [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = scanner . nextLine ( ) ; } boolean exit = false ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( exit ) { break ; } for ( int j = 0 ; j < 3 ; j ++ ) { int countw = 0 ; int countb = 0 ; if ( arr [ i ] . charAt ( j ) == ' # ' ) { countb += 1 ; } else { countw += 1 ; } if ( arr [ i + 1 ] . charAt ( j ) == ' # ' ) { countb += 1 ; } else { countw += 1 ; } if ( arr [ i ] . charAt ( j + 1 ) == ' # ' ) { countb += 1 ; } else { countw += 1 ; } if ( arr [ i + 1 ] . charAt ( j + 1 ) == ' # ' ) { countb += 1 ; } else { countw += 1 ; } if ( countw >= 3 || countb >= 3 ) { System . out . println ( " YES " ) ; exit = true ; break ; } } } if ( ! exit ) { System . out . println ( " NO " ) ; } } }
public class Solution { public boolean isToeplitzMatrix ( int [ ] [ ] matrix ) { for ( int r = 0 ; r < matrix . length - 1 ; r ++ ) { for ( int c = 0 ; c < matrix [ 0 ] . length - 1 ; c ++ ) { if ( matrix [ r ] [ c ] != matrix [ r + 1 ] [ c + 1 ] ) { return false ; } } } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] [ ] matrix = { { 1 , 2 , 3 , 4 } , { 5 , 1 , 2 , 3 } , { 9 , 5 , 1 , 2 } } ; boolean out = sObj . isToeplitzMatrix ( matrix ) ; System . out . println ( out ) ; } }
import java . math . BigInteger ; public class Main { public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } public static String compute ( ) { BigInteger LIMIT = BigInteger . TEN . pow ( 9 ) ; BigInteger ans = BigInteger . ZERO ; for ( BigInteger s = BigInteger . ONE ; ; s = s . add ( BigInteger . TWO ) ) { if ( s . multiply ( s ) . compareTo ( ( LIMIT . add ( BigInteger . ONE ) ) . divide ( BigInteger . valueOf ( 3 ) ) ) > 0 ) { break ; } for ( BigInteger t = s . subtract ( BigInteger . TWO ) ; t . compareTo ( BigInteger . ZERO ) > 0 ; t = t . subtract ( BigInteger . TWO ) ) { if ( s . gcd ( t ) . equals ( BigInteger . ONE ) ) { BigInteger a = s . multiply ( t ) ; BigInteger b = ( s . multiply ( s ) . subtract ( t . multiply ( t ) ) ) . divide ( BigInteger . TWO ) ; BigInteger c = ( s . multiply ( s ) . add ( t . multiply ( t ) ) ) . divide ( BigInteger . TWO ) ; if ( a . multiply ( BigInteger . TWO ) . equals ( c . subtract ( BigInteger . ONE ) ) ) { BigInteger p = c . multiply ( BigInteger . valueOf ( 3 ) ) . subtract ( BigInteger . ONE ) ; if ( p . compareTo ( LIMIT ) <= 0 ) { ans = ans . add ( p ) ; } } if ( a . multiply ( BigInteger . TWO ) . equals ( c . add ( BigInteger . ONE ) ) ) { BigInteger p = c . multiply ( BigInteger . valueOf ( 3 ) ) . add ( BigInteger . ONE ) ; if ( p . compareTo ( LIMIT ) <= 0 ) { ans = ans . add ( p ) ; } } if ( b . multiply ( BigInteger . TWO ) . equals ( c . subtract ( BigInteger . ONE ) ) ) { BigInteger p = c . multiply ( BigInteger . valueOf ( 3 ) ) . subtract ( BigInteger . ONE ) ; if ( p . compareTo ( LIMIT ) <= 0 ) { ans = ans . add ( p ) ; } } if ( b . multiply ( BigInteger . TWO ) . equals ( c . add ( BigInteger . ONE ) ) ) { BigInteger p = c . multiply ( BigInteger . valueOf ( 3 ) ) . add ( BigInteger . ONE ) ; if ( p . compareTo ( LIMIT ) <= 0 ) { ans = ans . add ( p ) ; } } } } } return ans . toString ( ) ; } }
while ( true ) { String [ ] inputArr = scanner . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( inputArr [ 0 ] ) ; int t = Integer . parseInt ( inputArr [ 1 ] ) ; int L = Integer . parseInt ( inputArr [ 2 ] ) ; int b = Integer . parseInt ( inputArr [ 3 ] ) ; if ( n == 0 && t == 0 && L == 0 && b == 0 ) { break ; } int [ ] loses = new int [ L ] ; int [ ] backs = new int [ b ] ; for ( int i = 0 ; i < L ; i ++ ) { loses [ i ] = Integer . parseInt ( scanner . nextLine ( ) ) ; } for ( int i = 0 ; i < b ; i ++ ) { backs [ i ] = Integer . parseInt ( scanner . nextLine ( ) ) ; } double [ ] [ ] dp = new double [ 3 ] [ n + 1 ] ; int [ ] stops = new int [ n + 11 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { stops [ i ] = i ; } for ( int i = 0 ; i < 6 ; i ++ ) { stops [ n + 1 + i ] = n - 5 + i ; } for ( int i = t - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < n ; j ++ ) { double sum = 0 ; for ( int d = j + 1 ; d <= j + 6 ; d ++ ) { if ( d < stops . length ) { if ( contains ( loses , d ) ) { sum += dp [ ( i + 2 ) % 3 ] [ d ] ; } else if ( contains ( backs , d ) ) { sum += dp [ ( i + 1 ) % 3 ] [ 0 ] ; } else { sum += dp [ ( i + 1 ) % 3 ] [ d ] ; } } } dp [ i % 3 ] [ j ] = sum / 6 ; } } System . out . printf ( " % .6f \n " , dp [ 0 ] [ 0 ] ) ; }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int _ = 0 ; _ < t ; _ ++ ) { int n = Integer . parseInt ( scanner . nextLine ( ) ) ; String [ ] input = scanner . nextLine ( ) . split ( " ▁ " ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( input [ i ] ) ; } int oddCount = 0 ; int evenCount = 0 ; int oddSum = 0 ; for ( int i : arr ) { if ( i % 2 != 0 ) { oddSum += i ; oddCount ++ ; } else { evenCount ++ ; } } if ( oddSum % 2 != 0 ) { System . out . println ( " YES " ) ; } else if ( oddCount > 0 && evenCount > 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { int [ ] H = { 2 , 4 , 8 , 16 } ; int K = 3 ; int n = H . length ; System . out . println ( minInsertions ( H , n , K ) ) ; } public static int minInsertions ( int [ ] H , int n , int K ) { int inser = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) { continue ; } else { inser += Math . ceil ( ( double ) diff / K ) - 1 ; } } return inser ; } }
public class Main { public static void main ( String [ ] args ) { String str = " abc " ; int l = str . length ( ) ; System . out . println ( countWords ( str , l ) ) ; } public static int countWords ( String str , int l ) { int count = 1 ; if ( l == 1 ) { return count ; } if ( str . charAt ( 0 ) == str . charAt ( 1 ) ) { count *= 1 ; } else { count *= 2 ; } for ( int j = 1 ; j < l - 1 ; j ++ ) { if ( str . charAt ( j ) == str . charAt ( j - 1 ) && str . charAt ( j ) == str . charAt ( j + 1 ) ) { count *= 1 ; } else if ( str . charAt ( j ) == str . charAt ( j - 1 ) || str . charAt ( j ) == str . charAt ( j + 1 ) || str . charAt ( j - 1 ) == str . charAt ( j + 1 ) ) { count *= 2 ; } else { count *= 3 ; } } if ( str . charAt ( l - 1 ) == str . charAt ( l - 2 ) ) { count *= 1 ; } else { count *= 2 ; } return count ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; List < Integer > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < t ; i ++ ) { list . add ( scanner . nextInt ( ) ) ; } Collections . sort ( list ) ; int sum = 0 ; for ( int num : list ) { sum += num ; } if ( sum % 2 == 0 ) { System . out . println ( sum ) ; } else { for ( int i : list ) { if ( i % 2 != 0 ) { System . out . println ( sum - i ) ; break ; } } } } }
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 2 , 3 , 6 , 9 , 10 , 20 } ; System . out . println ( countPairs ( arr ) ) ; } public static List < Integer > getPerfectSquares ( int n ) { List < Integer > perfectSquares = new ArrayList < > ( ) ; int current = 1 ; int i = 1 ; while ( current <= n ) { perfectSquares . add ( current ) ; i ++ ; current = ( int ) Math . pow ( i , 2 ) ; } return perfectSquares ; } public static int maxPairSum ( int [ ] arr ) { int n = arr . length ; int max = 0 ; int secondMax = 0 ; if ( arr [ 0 ] > arr [ 1 ] ) { max = arr [ 0 ] ; secondMax = arr [ 1 ] ; } else { max = arr [ 1 ] ; secondMax = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { secondMax = max ; max = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } } return max + secondMax ; } public static int countPairsWith ( int n , List < Integer > perfectSquares , int [ ] nums ) { int count = 0 ; for ( int perfectSquare : perfectSquares ) { int temp = perfectSquare - n ; if ( temp > n && Arrays . stream ( nums ) . anyMatch ( num -> num == temp ) ) { count ++ ; } } return count ; } public static int countPairs ( int [ ] arr ) { int n = arr . length ; int max = maxPairSum ( arr ) ; List < Integer > perfectSquares = getPerfectSquares ( max ) ; int [ ] nums = Arrays . copyOf ( arr , n ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { count += countPairsWith ( arr [ i ] , perfectSquares , nums ) ; } return count ; } }
public class Main { public static void main ( String [ ] args ) { int side1 = 3 ; int side2 = 4 ; System . out . println ( findHypotenuse ( side1 , side2 ) ) ; } public static double findHypotenuse ( int side1 , int side2 ) { double h = Math . sqrt ( ( side1 * side1 ) + ( side2 * side2 ) ) ; return h ; } }
public class Main { static void printTwoOdd ( int [ ] arr , int size ) { int xor2 = arr [ 0 ] ; int set_bit_no = 0 ; int n = size - 2 ; int x = 0 , y = 0 ; for ( int i = 1 ; i < size ; i ++ ) { xor2 = xor2 ^ arr [ i ] ; } set_bit_no = xor2 & ~ ( xor2 - 1 ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( ( arr [ i ] & set_bit_no ) != 0 ) { x = x ^ arr [ i ] ; } else { y = y ^ arr [ i ] ; } } System . out . println ( " The ▁ two ▁ ODD ▁ elements ▁ are ▁ " + x + " ▁ & ▁ " + y ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 } ; int arr_size = arr . length ; printTwoOdd ( arr , arr_size ) ; } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int t = scanner . nextInt ( ) ; for ( int T = 0 ; T < t ; T ++ ) { int n = scanner . nextInt ( ) ; int [ ] nums = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { nums [ i ] = scanner . nextInt ( ) ; } System . out . println ( solve ( n , nums ) ) ; } } public static int solve ( int n , int [ ] nums ) { int maxIndex = 0 ; int minIndex = 0 ; for ( int i = 1 ; i < nums . length ; i ++ ) { if ( nums [ i ] > nums [ maxIndex ] ) { maxIndex = i ; } if ( nums [ i ] < nums [ minIndex ] ) { minIndex = i ; } } int ans = Integer . MAX_VALUE ; ans = Math . min ( ans , Math . max ( maxIndex , minIndex ) + 1 ) ; ans = Math . min ( ans , n - Math . min ( maxIndex , minIndex ) ) ; ans = Math . min ( ans , maxIndex + 1 + n - minIndex ) ; ans = Math . min ( ans , minIndex + 1 + n - maxIndex ) ; return ans ; } } ```
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int [ ] days = { 28 , 30 , 31 } ; String [ ] week = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String a = scanner . nextLine ( ) ; String b = scanner . nextLine ( ) ; int ind = 0 ; for ( int i = 0 ; i < week . length ; i ++ ) { if ( week [ i ] . equals ( a ) ) { ind = i ; break ; } } boolean flag = false ; for ( int mo : days ) { if ( week [ ( ind + mo ) % 7 ] . equals ( b ) ) { flag = true ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int kolvomest = scanner . nextInt ( ) ; int k = 0 ; String [ ] spisok = new String [ kolvomest ] ; for ( int stroka = 0 ; stroka < kolvomest ; stroka ++ ) { String ryad = scanner . next ( ) ; if ( ryad . contains ( " OO " ) && k == 0 ) { k = 1 ; ryad = ryad . replaceFirst ( " OO " , " + + " ) ; } spisok [ stroka ] = ryad ; } if ( k == 1 ) { System . out . println ( " YES " ) ; for ( int stroka = 0 ; stroka < kolvomest ; stroka ++ ) { System . out . println ( spisok [ stroka ] ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . lang . Math ; class Node { int data ; Node next ; Node ( int data ) { this . data = data ; this . next = null ; } } public class Main { static void prList ( Node head ) { if ( head == null ) { return ; } Node temp = head ; System . out . print ( temp . data + " - > " ) ; temp = temp . next ; while ( temp != head ) { System . out . print ( temp . data + " - > " ) ; temp = temp . next ; } System . out . println ( head . data ) ; } static void deleteK ( Node head_ref , int k ) { Node head = head_ref ; if ( head == null ) { return ; } Node curr = head ; Node prev = null ; while ( true ) { if ( curr . next == head && curr == head ) { break ; } prList ( head ) ; for ( int i = 0 ; i < k ; i ++ ) { prev = curr ; curr = curr . next ; } if ( curr == head ) { prev = head ; while ( prev . next != head ) { prev = prev . next ; } head = curr . next ; prev . next = head ; head_ref = head ; } else if ( curr . next == head ) { prev . next = head ; } else { prev . next = curr . next ; } } } static Node insertNode ( Node head_ref , int x ) { Node head = head_ref ; Node temp = new Node ( x ) ; if ( head == null ) { temp . next = temp ; head_ref = temp ; return head_ref ; } else { Node temp1 = head ; while ( temp1 . next != head ) { temp1 = temp1 . next ; } temp1 . next = temp ; temp . next = head ; } return head ; } public static void main ( String [ ] args ) { Node head = null ; head = insertNode ( head , 1 ) ; head = insertNode ( head , 2 ) ; head = insertNode ( head , 3 ) ; head = insertNode ( head , 4 ) ; head = insertNode ( head , 5 ) ; head = insertNode ( head , 6 ) ; head = insertNode ( head , 7 ) ; head = insertNode ( head , 8 ) ; head = insertNode ( head ,
``` java public class Main { public static int steps ( int cur , int x , int n ) { if ( x == 0 ) { return Integer . MAX_VALUE ; } else if ( x > 0 ) { return Math . abs ( ( n - cur ) / x ) ; } else { return Math . abs ( ( cur - 1 ) / x ) ; } } public static int countSteps ( int curx , int cury , int n , int m , int [ ] [ ] moves ) { int count = 0 ; int k = moves . length ; for ( int i = 0 ; i < k ; i ++ ) { int x = moves [ i ] [ 0 ] ; int y = moves [ i ] [ 1 ] ; int stepct = Math . min ( steps ( curx , x , n ) , steps ( cury , y , m ) ) ; count += stepct ; curx += stepct * x ; cury += stepct * y ; } return count ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 , x = 1 , y = 1 ; int [ ] [ ] moves = { { 1 , 1 } , { 1 , 1 } , { 0 , - 2 } } ; System . out . println ( countSteps ( x , y , n , m , moves ) ) ; } } ```
Scanner sc = new Scanner ( System . in ) ; String [ ] n = sc . nextLine ( ) . split ( " ▁ " ) ; int num1 = Integer . parseInt ( n [ 0 ] ) ; int num2 = Integer . parseInt ( n [ 1 ] ) ; int num3 = Integer . parseInt ( n [ 2 ] ) ; int [ ] arr = { num1 , num2 , num3 } ; Arrays . sort ( arr ) ; System . out . println ( ( arr [ 1 ] - arr [ 0 ] ) + ( arr [ 2 ] - arr [ 1 ] ) ) ;
import java . util . Arrays ; public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( cntSubArr ( arr , n ) ) ; } static int cntSubArr ( int [ ] arr , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int curr_gcd = 0 ; for ( int j = i ; j < n ; j ++ ) { curr_gcd = gcd ( curr_gcd , arr [ j ] ) ; ans += ( curr_gcd == 1 ) ? 1 : 0 ; } } return ans ; } static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } else { return gcd ( b , a % b ) ; } } }
public class Main { public static void main ( String [ ] args ) { String Str = " geeksforgeeks " ; int n = Str . length ( ) ; if ( isVowelPrime ( Str , n ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } public static boolean isVowelPrime ( String Str , int n ) { boolean [ ] prime = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { prime [ i ] = true ; } prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p < n ; p ++ ) { if ( p * p > n ) { break ; } if ( prime [ p ] ) { for ( int i = 2 * p ; i < n ; i += p ) { prime [ i ] = false ; } } } for ( int i = 0 ; i < n ; i ++ ) { if ( isVowel ( Str . charAt ( i ) ) && ! prime [ i ] ) { return false ; } } return true ; } }
public class Main { public static void main ( String [ ] args ) { String str = "2553432" ; System . out . println ( minStepToDeleteString ( str ) ) ; } public static int minStepToDeleteString ( String str ) { int N = str . length ( ) ; int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ; for ( int l = 1 ; l <= N ; l ++ ) { int i = 0 ; int j = l - 1 ; while ( j < N ) { if ( l == 1 ) { dp [ i ] [ j ] = 1 ; } else { dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ; if ( str . charAt ( i ) == str . charAt ( i + 1 ) ) { dp [ i ] [ j ] = Math . min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) ; } for ( int k = i + 2 ; k <= j ; k ++ ) { if ( str . charAt ( i ) == str . charAt ( k ) ) { dp [ i ] [ j ] = Math . min ( dp [ i + 1 ] [ k - 1 ] + dp [ k + 1 ] [ j ] , dp [ i ] [ j ] ) ; } } } i ++ ; j ++ ; } } return dp [ 0 ] [ N - 1 ] ; } }
public class Main { static int limit = 1000000 ; static int [ ] position = new int [ limit + 1 ] ; public static void sieve ( ) { position [ 0 ] = - 1 ; position [ 1 ] = - 1 ; int pos = 0 ; for ( int i = 2 ; i <= limit ; i ++ ) { if ( position [ i ] == 0 ) { pos ++ ; position [ i ] = pos ; for ( int j = i * 2 ; j <= limit ; j += i ) { position [ j ] = - 1 ; } } } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 11 ; System . out . println ( position [ n ] ) ; } }
int DP_s = 9 ; public int getNumMonotone ( int ln ) { int [ ] [ ] DP = new int [ ln ] [ DP_s ] ; for ( int i = 0 ; i < DP_s ; i ++ ) { DP [ 0 ] [ i ] = i + 1 ; } for ( int i = 0 ; i < ln ; i ++ ) { DP [ i ] [ 0 ] = 1 ; } for ( int i = 1 ; i < ln ; i ++ ) { for ( int j = 1 ; j < DP_s ; j ++ ) { DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; } } return DP [ ln - 1 ] [ DP_s - 1 ] ; } System . out . println ( getNumMonotone ( 10 ) ) ;
int DP_s = 9 ; public int getNumMonotone ( int ln ) { int [ ] [ ] DP = new int [ ln ] [ DP_s ] ; for ( int i = 0 ; i < DP_s ; i ++ ) { DP [ 0 ] [ i ] = i + 1 ; } for ( int i = 0 ; i < ln ; i ++ ) { DP [ i ] [ 0 ] = 1 ; } for ( int i = 1 ; i < ln ; i ++ ) { for ( int j = 1 ; j < DP_s ; j ++ ) { DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; } } return DP [ ln - 1 ] [ DP_s - 1 ] ; } System . out . println ( getNumMonotone ( 10 ) ) ;
public class Main { public static void main ( String [ ] args ) { int [ ] a = { 2 , 1 , 2 , 3 , 2 , 2 , 1 } ; int l = 1 ; int r = 1 ; int n = a . length ; System . out . println ( maxCost ( a , n , l , r ) ) ; } public static int maxCost ( int [ ] a , int n , int l , int r ) { int mx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mx = Math . max ( mx , a [ i ] ) ; } int [ ] count = new int [ mx + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { count [ a [ i ] ] += 1 ; } int [ ] res = new int [ mx + 1 ] ; res [ 0 ] = 0 ; l = Math . min ( l , r ) ; for ( int num = 1 ; num < mx + 1 ; num ++ ) { int k = Math . max ( num - l - 1 , 0 ) ; res [ num ] = Math . max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) ; } return res [ mx ] ; } }
public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int num_test_cases = Integer . parseInt ( scanner . nextLine ( ) ) ; for ( int test_case = 0 ; test_case < num_test_cases ; test_case ++ ) { boolean val = test ( ) ; if ( val ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } public static boolean test ( ) { Scanner scanner = new Scanner ( System . in ) ; String [ ] dimensions = scanner . nextLine ( ) . split ( " ▁ " ) ; int nrow = Integer . parseInt ( dimensions [ 0 ] ) ; int ncol = Integer . parseInt ( dimensions [ 1 ] ) ; List < List < Integer > > arr = new ArrayList < > ( ) ; int val = 100000000000 ; int lr = 0 ; int lc = 0 ; for ( int row_id = 0 ; row_id < nrow ; row_id ++ ) { String [ ] temp = scanner . nextLine ( ) . split ( " " ) ; arr . add ( new ArrayList < > ( ) ) ; for ( int col_id = 0 ; col_id < ncol ; col_id ++ ) { if ( temp [ col_id ] . equals ( " R " ) ) { int temp2 = row_id + col_id ; arr . get ( row_id ) . add ( temp2 ) ; if ( temp2 < val ) { val = temp2 ; lr = row_id ; lc = col_id ; } } else { arr . get ( row_id ) . add ( 0 ) ; } } } for ( int i = 0 ; i < lr ; i ++ ) { List < Integer > temp = arr . get ( i ) ; if ( Collections . max ( temp ) > 0 ) { return false ; } } for ( int i = 0 ; i < nrow ; i ++ ) { for ( int j = 0 ; j < lc ; j ++ ) { if ( arr . get ( i ) . get ( j ) > 0 ) { return false ; } } } return true ; } }
public class Main { public static void main ( String [ ] args ) { System . out . printf ( " Area ▁ is ▁ % .6f " , findArea ( 5 ) ) ; } public static double findArea ( double r ) { double PI = 3.142 ; return PI * ( r * r ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; String [ ] nk = input . nextLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( nk [ 0 ] ) ; int k = Integer . parseInt ( nk [ 1 ] ) ; int [ ] s = new int [ n ] ; String [ ] sValues = input . nextLine ( ) . split ( " ▁ " ) ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = Integer . parseInt ( sValues [ i ] ) ; } List < List < Integer > > e = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { e . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { String [ ] xy = input . nextLine ( ) . split ( " ▁ " ) ; int x = Integer . parseInt ( xy [ 0 ] ) - 1 ; int y = Integer . parseInt ( xy [ 1 ] ) - 1 ; e . get ( x ) . add ( y ) ; e . get ( y ) . add ( x ) ; } List < Integer > q = new ArrayList < > ( ) ; int [ ] fa = new int [ n ] ; Arrays . fill ( fa , - 1 ) ; fa [ 0 ] = 0 ; q . add ( 0 ) ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { int x = q . get ( i ) ; for ( int y : e . get ( x ) ) { if ( fa [ y ] == - 1 ) { fa [ y ] = x ; q . add ( y ) ; } } } int [ ] dp = new int [ n ] ; int k2 = k * 2 ; for ( int i = q . size ( ) - 1 ; i >= 0 ; i -- ) { int x = q . get ( i ) ; for ( int y : e . get ( x ) ) { if ( fa [ y ] == x ) { int val = s [ y ] ; s [ x ] += val ; dp [ x ] += dp [ y ] + ( val > k ? k2 - val : val ) ; } } } System . out . println ( dp [ 0 ] ) ; } }
public class Main { public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } public static int nthTerm ( int N ) { return Math . abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) ; } }
public class Main { public static int getHeight ( int X ) { return ( 2 * X ) ; } public static void main ( String [ ] args ) { int X = 35 ; System . out . println ( getHeight ( X ) ) ; } }
public class Main { static int V = 4 ; public static void main ( String [ ] args ) { int [ ] [ ] graph = { { 0 , 1 , 1 , 1 } , { 0 , 0 , 0 , 1 } , { 0 , 0 , 0 , 1 } , { 0 , 0 , 0 , 0 } } ; int u = 0 ; int v = 3 ; int k = 2 ; System . out . println ( countwalks ( graph , u , v , k ) ) ; } public static int countwalks ( int [ ] [ ] graph , int u , int v , int k ) { if ( k == 0 && u == v ) { return 1 ; } if ( k == 1 && graph [ u ] [ v ] == 1 ) { return 1 ; } if ( k <= 0 ) { return 0 ; } int count = 0 ; for ( int i = 0 ; i < V ; i ++ ) { if ( graph [ u ] [ i ] == 1 ) { count += countwalks ( graph , i , v , k - 1 ) ; } } return count ; } }
import java . lang . Math ; public class Main { public static void main ( String [ ] args ) { System . out . println ( findDigits ( 4 , 16 ) ) ; System . out . println ( findDigits ( 5 , 8 ) ) ; System . out . println ( findDigits ( 12 , 16 ) ) ; System . out . println ( findDigits ( 19 , 13 ) ) ; } public static int findDigits ( int n , int b ) { if ( n < 0 ) { return 0 ; } double M_PI = 3.141592 ; double M_E = 2.7182 ; if ( n <= 1 ) { return 1 ; } double x = ( ( n * ( Math . log10 ( n / M_E ) ) + Math . log10 ( 2 * M_PI * n ) / 2.0 ) ) / ( Math . log10 ( b ) ) ; return ( int ) Math . floor ( x ) + 1 ; } }
public class Bit { private int N ; private int [ ] bit ; public Bit ( int N ) { this . N = N ; this . bit = new int [ N + 1 ] ; } public void add ( int a , int w ) { int x = a ; while ( x <= N ) { bit [ x ] += w ; x += x & - x ; } } public int sum ( int a ) { int ret = 0 ; int x = a ; while ( x > 0 ) { ret += bit [ x ] ; x -= x & - x ; } return ret ; } public int rangeSum ( int x , int y ) { int ret1 = sum ( y ) ; int ret2 = sum ( x - 1 ) ; return ret1 - ret2 ; } public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; int N = scanner . nextInt ( ) ; int q = scanner . nextInt ( ) ; Bit bit = new Bit ( N ) ; for ( int i = 0 ; i < q ; i ++ ) { int mode = scanner . nextInt ( ) ; int x = scanner . nextInt ( ) ; int y = scanner . nextInt ( ) ; if ( mode == 0 ) { bit . add ( x , y ) ; } else { int ret = bit . rangeSum ( x , y ) ; System . out . println ( ret ) ; } } } }
``` java import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { long mod = ( long ) Math . pow ( 10 , 9 ) + 7 ; Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; int [ ] dp = new int [ 61 ] ; dp [ 60 ] = 1 ; for ( int d = 59 ; d >= 0 ; d -- ) { int [ ] next = new int [ 3 ] ; for ( int s = 0 ; s < 3 ; s ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { int s2 = Math . min ( 2 , 2 * s + nthBit ( n , d ) - k ) ; if ( s2 >= 0 ) { next [ s2 ] = ( next [ s2 ] + dp [ s ] ) % mod ; } } } dp = next ; } int ans = ( dp [ 0 ] + dp [ 1 ] + dp [ 2 ] ) % mod ; System . out . println ( ans ) ; } public static int nthBit ( int n , int d ) { return ( n >> d ) & 1 ; } } ```
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; List < Integer > ans = new ArrayList < > ( ) ; while ( true ) { int p = scanner . nextInt ( ) ; int q = scanner . nextInt ( ) ; int a = scanner . nextInt ( ) ; int n = scanner . nextInt ( ) ; if ( p == 0 ) { break ; } ans . add ( solve ( p , q , a , n ) ) ; } for ( int num : ans ) { System . out . println ( num ) ; } } static int solve ( int p , int q , int a , int n ) { return _solve ( p , q , n , 1 , 1 ) ; } static int _solve ( int num , int dem , int d , int m , int s ) { if ( num == 0 ) { return 1 ; } if ( d == 0 ) { return 0 ; } if ( num * a / m < dem ) { return 0 ; } int sum = 0 ; for ( int i = s ; i <= Math . min ( dem * n / num , a / m ) ; i ++ ) { sum += _solve ( num * i - dem , dem * i , d - 1 , m * i , i ) ; } return sum ; } }
``` java public class Main { public static void main ( String [ ] args ) { int m = 5 , n = 2 , i = 8 ; System . out . println ( findCharacter ( n , m , i ) ) ; } public static String binaryConversion ( String s , int m ) { while ( m > 0 ) { int temp = m % 2 ; s += String . valueOf ( temp ) ; m = m / 2 ; } return new StringBuilder ( s ) . reverse ( ) . toString ( ) ; } public static int findCharacter ( int n , int m , int i ) { String s = " " ; s = binaryConversion ( s , m ) ; String s1 = " " ; for ( int x = 0 ; x < n ; x ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '1' ) { s1 += "10" ; } else { s1 += "01" ; } } s = s1 ; s1 = " " ; } int e = ( int ) s . charAt ( i ) ; int r = ( int ) '0' ; return e - r ; } } ```
public class Main { public static void main ( String [ ] args ) { int [ ] arr = { 4 , 2 , 1 , 9 , 2 , 6 , 5 , 3 } ; int n = arr . length ; System . out . println ( " Number ▁ of ▁ subsets ▁ = ▁ " + countSubSets ( arr , n ) ) ; } public static int countSubSets ( int [ ] arr , int n ) { Set < Integer > us = new HashSet < > ( ) ; int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { us . add ( arr [ i ] ) ; } } even_count = us . size ( ) ; return ( int ) ( Math . pow ( 2 , even_count ) - 1 ) ; } }
public class Main { static int MAX = 1000 ; static int [ ] f = new int [ MAX ] ; public static void main ( String [ ] args ) { int a = 3 ; int b = 12 ; System . out . println ( findLCMFibonacci ( a , b ) ) ; } public static int fib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 || n == 2 ) { f [ n ] = 1 ; return f [ n ] ; } if ( f [ n ] != 0 ) { return f [ n ] ; } int k = ( n + 1 ) / 2 ; if ( ( n & 1 ) == 1 ) { f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) ; } else { f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; } return f [ n ] ; } public static int gcd ( int a , int b ) { if ( a == 0 ) { return b ; } return gcd ( b % a , a ) ; } public static int findLCMFibonacci ( int a , int b ) { return ( fib ( a ) * fib ( b ) ) / fib ( gcd ( a , b ) ) ; } }
public class Main { public static void main ( String [ ] args ) { int n = 3 ; int w = 4 ; System . out . println ( findNumbers ( n , w ) ) ; } public static int findNumbers ( int n , int w ) { int x = 0 ; int sum = 0 ; if ( w >= 0 && w <= 8 ) { x = 9 - w ; } else if ( w >= - 9 && w <= - 1 ) { x = 10 + w ; } sum = ( int ) Math . pow ( 10 , n - 2 ) ; sum = x * sum ; return sum ; } }
public class Main { public static void main ( String [ ] args ) { String s = " ab2c3" ; int k = 5 ; System . out . println ( findKthChar ( s , k ) ) ; } public static char findKthChar ( String s , int k ) { int len1 = s . length ( ) ; int i = 0 ; int total_len = 0 ; while ( i < len1 ) { if ( Character . isLetter ( s . charAt ( i ) ) ) { total_len ++ ; if ( total_len == k ) { return s . charAt ( i ) ; } i ++ ; } else { int n = 0 ; while ( i < len1 && ! Character . isLetter ( s . charAt ( i ) ) ) { n = n * 10 + ( s . charAt ( i ) - '0' ) ; i ++ ; } int next_total_len = total_len * n ; if ( k <= next_total_len ) { int pos = k % total_len ; if ( pos == 0 ) { pos = total_len ; } return findKthChar ( s , pos ) ; } else { total_len = next_total_len ; } } } return ( char ) - 1 ; } }
public class Main { public static void main ( String [ ] args ) { String s = " abcde " ; System . out . println ( countNonEmptySubstr ( s ) ) ; } public static int countNonEmptySubstr ( String str ) { int n = str . length ( ) ; return ( int ) ( n * ( n + 1 ) / 2 ) ; } }
