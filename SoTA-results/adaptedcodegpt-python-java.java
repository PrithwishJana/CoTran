import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; dp [ 0 ] = 1 ; for ( int


import java . util . * ; public class GFG { static int count9s ( String number ) { int n = number . length ( ) ; int d [ ] = new int [ 9 ] ; d [ 0 ] = 1 ; int result = 0 ; int mod_sum = 0 ; int continuous_zero = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( number . charAt ( i ) - '0' ) == 0 ) continuous_zero ++ ; else continuous_zero = 0 ; mod_sum += number . charAt ( i ) - '0' ; mod_sum %= 9 ; result += d [ mod_sum ] ; d [ mod_sum ] += 1 ; result -= continuous_zero ; } return result ; } public static void main ( String [ ] args ) { System . out . println ( count9s ( "01809" ) ) ; System . out . println ( count9s ( "1809" ) ) ; System . out . println ( count9s ( "4189" ) ) ; System . out . println ( count9s ( "
public class GFG { static long fastPow ( long N , long K ) { if ( K == 0 ) return 1 ; long temp = fastPow ( N , K / 2 ) ; if ( K % 2 == 0 ) return temp * temp ; else return N * temp * temp ; } static long countWays ( long N , long K ) { return K * fastPow ( K - 1 , N - 1 ) ; } public static void main ( String [ ] args ) { long N = 3 , K = 3 ; System . out . println ( countWays ( N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == - 1 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ arr [ i ] ] = 7 - ans [ arr [ i ] ] ; } System . out . println ( ans [ 0 ] ^ ans [ n - 1 ] ) ; } } }
import java . util . * ; public class GFG { static int MAX = 10000 ; static boolean [ ] prime = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static boolean
import java . util . * ; public class GFG { static boolean prime [ ] = new boolean [ MAX_ ] ; static void SieveOfEratosthenes ( ) { for ( int p = 2 ; p * p <= MAX_ ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static boolean isPrimorialPrime ( int n ) { if ( prime [ n ] == true ) return false ; int product = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) product *= i ; if ( product + 1 == n || product
import java . util . * ; public class GFG { static int mul_table ( int N , int i ) { if ( i > 10 ) return N ; System . out . print ( N + " * " + i + " = ▁ " + N * i ) ; return mul_table ( N , i + 1 ) ; } public static void main ( String [ ] args ) { int N = 8 ; mul_table ( N , 1 ) ; } }
public class GFG { static int closestNumber ( int n , int m ) { int q = ( n / m ) ; n1 = m * q ; if ( ( n * m ) > 0 ) { n2 = ( m * ( q + 1 ) ) ; } else { n2 = ( m * ( q - 1 ) ) ; } if ( Math . abs ( n - n1 ) < Math . abs ( n - n2 ) ) { return n1 ; } return n2 ; } public static void main ( String [ ] args ) { int n = 13 , m = 4 , n = - 15 ; System . out . println ( closestNumber ( n , m ) ) ; n = - 15 ; m = 6 ; System . out . println ( closestNumber ( n , m ) ) ; n = - 18 ; m = - 7 ; System . out . println ( closestNumber ( n , m ) ) ; n = 0 ; m = 8 ; System . out . println ( closestNumber ( n , m ) ) ; n = 0 ; m = - 9 ; System . out . println ( closestNumber ( n , m ) ) ; n = 0 ; m = - 10 ; System . out . println ( closestNumber ( n , m ) ) ; n = 0 ; m = - 12 ; System . out . println
import java . io . * ; public class GFG { static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) return 0 ; else if ( ( ang * n ) % 180 != 0 ) return 0 ; int ans = 1 ; int freq = ( ang * n ) / 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; } public static void main ( String [ ] args ) { int ang = 90 ; int n = 4 ; System . out . println ( solve ( ang , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] count = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { count [ s . charAt ( i )
import java . util . * ; public class GFG { static void checkIfSortRotated ( int arr [ ] , int n ) { int minEle = Integer . MAX_VALUE ; int maxEle = Integer . MIN_VALUE ; int minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) { minEle = arr [ i ] ; minIndex = i ; } } int flag1 = 1 , flag2 = 2 , for ( int i = 0 ; i < minIndex ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag1 = 0 ; break ; } flag2 = 2 ; for ( int i = minIndex + 1 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag2 =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] >= arr [ i + 1 ] ) { ans += ( arr [ i ] - arr [ i + 1 ] ) / d ; arr [ i + 1 ] = 0 ; } else { ans += ( arr [ i ] - arr [ i + 1 ] ) / d ; arr [ i + 1 ] = 0 ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String a = sc . next ( ) ; String b = sc . next ( ) ; String c = sc . next ( ) ; String ans = " " ; if ( a . equals ( " A " ) && b . equals ( " Z " ) && c . equals ( " A " ) && c . equals ( " Z " ) ) { ans = " - 1" ; } else if ( a . equals ( " A " ) && b . equals ( " Z " ) && c . equals ( " A " ) && c . equals ( " Z " ) ) { ans = " - 1" ; } else if ( a . equals ( " A " ) && b . equals ( " Z " ) && c . equals ( " A " ) && c . equals ( " Z " ) ) { ans = " - 1" ; } else if ( a . equals ( " A " ) && b . equals ( " Z " ) && c . equals ( " A " ) && c . equals ( " Z " ) ) { ans = " - 1" ; } else if ( a . equals ( " A " ) && b . equals ( " Z " ) && c . equals ( " A " ) && c . equals ( " Z " ) ) { ans = " - 1" ; } else if ( a . equals ( " A " ) && b . equals ( " Z " ) && c . equals ( " A " ) && c . equals ( " Z " ) ) { ans = " - 1" ; } else if ( a . equals ( " A " ) && b . equals ( " Z " ) && c . equals ( " A " ) && c . equals ( " Z " ) ) { ans = " - 1" ; } else if ( a . equals ( " A " )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int curr = arr [ i ] ; int next = arr [ i ] ; while ( curr > 0 ) { curr -- ; next = next + curr ; max = Math . max ( max , next ) ; } min = Math . min ( min , next ) ; } System . out . println ( max - min ) ; } } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += x [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum += y [ i ] ; } System . out . println ( sum >= n ? " Yes " : " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( k -- > 0 ) { ans [ i ++ ] = arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; if ( i != n - 1 ) { System . out . println ( " RIGHT " ) ; } } } }
import java . util . * ; public class GFG { static void printDistSum ( int arr [ ] , int n ) { int sum = arr [ 0 ] ; int dp [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = true ; } for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ arr [ i - 1 ] ] = true ; for ( int j = 1 ; j <= sum ; j ++ ) { if ( dp [ i - 1 ] [ j ] == true ) { dp [ i ] [ j ] = true ; dp [ i ] [ j + arr [ i - 1 ] ] = true ; } } } for ( int j = sum ; j <= sum ; j ++ ) { if ( dp [ n ] [ j ] == true ) { System . out . print ( j + " ▁ "
public class GFG { static int Subtract ( int a , int b ) { int c = a + ( ~ b + 1 ) ; return c ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; System . out . println ( Subtract ( a , b ) ) ; a = b ; b = 9 ; System . out . println ( Subtract ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static String nextZero ( int i , int occurrences ) { while ( i < 26 ) { if ( occurrences [ i ] == 0 ) return i ; i ++ ; } return - 1 ; } static int getModifiedString ( String str ) { int n = str . length ( ) ; if ( n > 26 ) return " - 1" ; char ch = str . charAt ( n - 1 ) ; ch = list ( ch ) ; int occurrences [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) occurrences [ ch - ' a ' ] ++ ; int index = nextZero ( 0 , occurrences ) ; for ( int i = 0 ; i < n ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = sc . nextInt ( ) ; int sum = 0 ; for ( int j = 0 ; j < k ; j ++ ) { sum += a [ j ] ; } max = Math . max ( max , sum ) ; min = Math . min ( min , sum ) ; } System . out . println ( max - min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n == 1 ) System . out . println ( 3 ) ; else if ( n % 2 == 1 ) System . out . println ( 1 ) ; else System . out . println ( n / 2 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; ans [ i ] = sum ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { ans [ i ] = ans [ i + 1 ] + arr [ i ] ; } int ans1 = 0 ; int ans2 = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans1 += ans [ i ] ; ans2 += ans2 ; } int ans2 = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans2 += ans2 ; ans1 += ans1 ; } System . out . println ( ans1 ) ; } }
import java . util . * ; public class GFG { static void printMax ( int arr [ ] , int n , int k ) { int i , j , k ; int li [ ] = new int [ k ] ; for ( i = 0 ; i < k ; i ++ ) li [ i ] = arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) { while ( li [ i ] >= li [ i - 1 ] ) li [ i ] = li [ i ] + li [ i - 1 ] ; while ( li [ i ] <= i - k ) li [ i ] = li [ i ] + li [ i - 1 ] ; print ( li [ i ] ) ; } for ( i = 0 ; i < k ; i ++ ) System . out . print ( " ▁ " ) ; for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] ) ; System . out . println ( ) ; } public static void main ( String [ ] args )
import java . util . * ; public class GFG { static int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( b % 2 == 1 ) res += a ; a = a << 1 ; b = b >> 1 ; } return res ; } public static void main ( String [ ] args ) { System . out . println ( russianPeasant ( 18 , 1 ) ) ; System . out . println ( russianPeasant ( 20 , 12 ) ) ; } }
public class GFG { static boolean isValid ( String str , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i - 1 ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = "0110" ; int len = str . length ( ) ; if ( isValid ( str , len ) ) System . out . println ( " Valid " ) ; else System . out . println ( " Invalid " ) ; } }
import java . util . * ; public class GFG { static int lehmann ( int n , int t ) { int a = ( int ) Math . pow ( 2 , n - 1 ) ; int e = ( n - 1 ) / 2 ; while ( t > 0 ) { int result = ( ( int ) ( a * e ) ) % n ; if ( ( result % n ) == 1 || ( result % n ) == ( n - 1 ) ) { a = random . randint ( 2 , n - 1 ) ; t -= 1 ; } else return - 1 ; } return 1 ; } public static void main ( String [ ] args ) { int n = 13 , t = 10 ; if ( n == 2 ) System . out . println ( "2 ▁ is ▁ Prime . " ) ; if ( n % 2 == 0 ) System . out . println ( n + " ▁ is ▁ Composite " ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; while ( a <= b ) { ans += a / b ; a -= a / b * b ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int k = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { max = Math . max ( max , k - i - 1 ) ; } } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static int N = 3 ; static int MaxTraceSub ( int mat [ ] [ ] ) { int max_trace = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int r = i ; int s = j ; int trace = 0 ; while ( r < N && s < N ) { trace += mat [ r ] [ s ] ; r ++ ; s += 1 ; max_trace = Math . max ( trace , max_trace ) ; } } } return max_trace ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 10 , 2 , 5 } , { 6 , 10 , 4 } , { 2 , 7 , -10 } } ; System . out . println ( MaxTraceSub ( mat ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { double xa = sc . nextDouble ( ) ; double ya = sc . nextDouble ( ) ; double xb = sc . nextDouble ( ) ; double yb = sc . nextDouble ( ) ; double xa1 = xa ; double ya1 = ya ; double xa2 = xa2 ; double ya2 = ya2 ; double xb1 = xb ; double ya1 = ya ; double xb2 = xb ; double yb1 = yb ; double xb2 = xb2 ; double yb2 = yb ; double xa = xa ; double ya = ya ; double xa2 = xa2 ; double ya2 = ya2 ; double xb1 = xb ; double yb1 = yb ; double xb2 = xb2 ; double yb2 = yb ; double xa2 = xa2 ; double ya2 = ya2 ; double xb2 = xb2 ; double yb2 = yb2 ; double xa1 = xa1 ; double ya1 = ya1 ; double xa2 = xa2 ; double ya2 = ya2 ; double xb1 = xb1 ; double yb1 = yb1 ; double xb2 = xb2 ; double yb2 = yb2 ; double xa = xa ; double ya = ya ; double xa2 = xa2 ; double yb2 = yb2 ; double

public class GFG { static int OddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; i ++ ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; j ++ ) { if ( i % j == 0 ) divCount ++ ; } if ( divCount % 2 == 1 ) res ++ ; } return res ; } public static void main ( String [ ] args ) { int a = 1 , b = 10 ; System . out . println ( OddDivCount ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > max ) { ans = i + 1 ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void printArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . println ( ) ; } static void replacedArray ( int N , int arr [ ] ) { int pos_sum = 0 , neg_sum = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum ) ; if ( arr [ i ] > 0 ) pos_sum = pos_sum + arr [ i ] ; else neg_sum = neg_sum + arr [ i ] ; arr [ i ] = Math . abs ( diff ) ; } N = 5 ; arr = new int [ 5 ] ; arr [ 1 ] = - 1 ; arr [ 2 ] = 3 ; arr [ 3 ] =
import java . util . * ; public class GFG { static void printArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . print ( " \n " ) ; } static void replacedArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) { int pos_sum = 0 , neg_sum = 0 ; for ( int j = i + 1 ; j < N ; j ++ ) { if ( arr [ j ] > 0 ) pos_sum += arr [ j ] ; else neg_sum += arr [ j ] ; } int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum )
public class GFG { static int countDivisbleby4 ( String s ) { int n = s . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '4' || s . charAt ( i ) == '8' || s . charAt ( i ) == '0' ) count ++ ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { int h = ( s . charAt ( i ) - '0' ) * 10 + ( s . charAt ( i + 1 ) - '0' ) ; if ( h % 4 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = "1" ; int count = countDivisbleby4 ( s ) ; System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int max = arr [ 0 ] ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] + arr [ i - 1 ] > max ) { max = arr [ i ] + arr [ i - 1 ] ; } if ( arr [ i ] + arr [ i - 1 ] < min ) min = arr [ i ] + arr [ i - 1 ] ; } System . out . println ( max - min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= n ) { ans = arr [ i ] ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { if ( arr [ i ] == k ) { ans [ i ++ ] = 1 ; } else { ans [ i ++ ] = 0 ; } } if ( ans [ 0 ] == 1 && ans [ n - 1 ] == 1 ) { System . out . println ( " yes " ) ; } else { System . out . println ( " no " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ 256 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] map = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = dp [
import java . util . * ; public class GFG { static boolean arraySortedOrNot ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] > arr [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 20 , 23 , 23 , 45 , 78 , 88 } ; int n = arr . length ; if ( arraySortedOrNot ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int max = arr [ i ] ; while ( max > min ) { int mid = ( max + min ) / 2 ; if ( arr [ mid ] < arr [ i ] ) { min = mid ; } else { max = mid ; } } arr [ i ] = min ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static void printKDistinct ( int arr [ ] , int size , int KthIndex ) { HashMap < Integer , Integer > dict = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( dict . get ( arr [ i ] ) == null ) dict . put ( arr [ i ] , 1 ) ; else dict . put ( arr [ i ] , 1 ) ; } for ( int i = 0 ; i < size ; i ++ ) { if ( dict . get ( arr [ i ] ) > 1 ) continue ; else { KthIndex = KthIndex - 1 ; } if ( KthIndex == 0 ) return arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 1 , 3 , 4 , 2 } ; int size = arr . length ; printKDistinct ( arr , size , 2 ) ; } }
public class GFG { static int fib ( int f [ ] , int n ) { int f [ ] = new int [ 61 ] ; f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 ; return f [ n % 60 ] ; } static int findLastDigit ( int n ) { int f [ ] = new int [ 61 ] ; fib ( f , 60 ) ; return f [ n % 60 ] ; } public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( findLastDigit ( n ) ) ; n = 61 ; System . out . println ( findLastDigit ( n ) ) ; n = 7 ; System . out . println ( findLastDigit ( n ) ) ; n = 67 ; System . out . println ( findLastDigit ( n ) ) ; n = 6 ; System . out . println ( findLastDigit ( n ) ) ; n = 6 ; System . out . println ( findLastDigit ( n ) ) ; n = 7 ; System . out . println ( findLastDigit ( n ) ) ; n = 6 ; System . out . println ( findLastDigit (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } if ( sum == 17 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] f = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ i ] = Math . max ( f [ i ] , d [ i ] ) ; } int [ ] f2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f2 [ i ] = Math . min ( f2
public class GFG { static void countEleLessThanOrEqual ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { for ( int i = 0 ; i < m ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr2 [ j ] <= arr1 [ i ] ) count ++ ; } System . out . print ( count + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 2 , 3 , 4 , 7 , 9 } ; int arr2 [ ] = { 0 , 1 , 2 , 1 , 1 , 4 } ; int m = arr1 . length ; int n = arr2 . length ; countEleLessThanOrEqual ( arr1 , arr2 , m , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( k == 1 ) { min = Math . min ( arr [ 0 ] , arr [ arr - 1 ] ) ; } else if ( k == 2 ) { min = Math . max ( arr [ 0 ] , arr [ arr - 1 ] ) ; } else { min = Math . min ( arr [ 0 ] , arr [ arr - 1 ] ) ; } } System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } System . out . println ( solve ( a , b , c ) ) ; sc . close ( ) ; } static int solve ( int [ ] a , int [ ] b , int [ ] c ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { count ++ ; } } return count ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { ans += sc . nextInt ( ) ; } System . out . println ( ans % p ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = a [ i ] ; int r = b [ i ] ; int d = c [ l ] ; int cnt = 0 ; while ( r - l > 1 ) { int mid = ( l + r ) / 2 ; if ( d > mid ) { mid = d - mid ; } else { r = mid + 1 ; } cnt ++ ; } ans += mid * ( r - mid ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static String str ; static int lps ( String str ) { int n = str . length ( ) ; int L [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] [ i ] = 1 ; for ( int i = 0 ; i < n - str . length ( ) ; i ++ ) { for ( int j = 0 ; j < n - str . length ( ) - 1 ; j ++ ) { int k = i + str . charAt ( j ) - 1 ; if ( str . charAt ( i ) == str . charAt ( j ) && k == str . charAt ( k + 1 ) ) L [ i ] [ j ] = 2 ; else if ( str . charAt ( i ) == str . charAt (
import java . io . * ; public class GFG { static void printConsecutive ( int last , int first ) { System . out . print ( first + " ▁ " ) ; first ++ ; for ( int x = first ; x <= last ; x ++ ) { System . out . print ( " ▁ + " ) ; System . out . print ( x + " , ▁ " ) ; } } static void findConsecutive ( int N ) { for ( int last = 1 ; last <= N ; last ++ ) { for ( int first = 0 ; first <= last ; first ++ ) { if ( 2 * N == ( last - first ) * ( last + first + 1 ) ) { System . out . print ( N + " = ▁ " ) ; System . out . printConsecutive ( last , first + 1 ) ; return ; } } } System . out . print ( - 1 ) ; } public static void main ( String [ ] args ) { int n = 12 ; findConsecutive ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( Math . abs ( a - b ) > 1 || Math . abs ( a + b ) == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) / ( s * s ) ; return ( int ) ans ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) / ( s * s ) ; return ( int ) ans ; } public static void main ( String [ ] args ) { int m = 265 , n = 60 ; System . out . println ( NumberOfSquares ( m , n ) ) ; } }
import java . util . * ; public class GFG { static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; int [ ] c = new int [ n ] ; Arrays . sort ( c ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] != s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = " aabbbcc " ; if ( isAlphabaticOrder ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static void printMax ( int arr [ ] , int n , int k ) { int max = 0 ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) { max = arr [ i ] ; for ( int j = 1 ; j < k ; j ++ ) { if ( arr [ i + j ] > max ) max = arr [ i + j ] ; } System . out . print ( max + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int k = 3 ; printMax ( arr , n , k ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= Math . sqrt ( a ) ; i ++ ) { if ( a % i == 0 ) { ans = i ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i == j ) continue ; if ( p [ i ] <= p [ j ] ) { dp [ i ] [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { dp [ i ] [ j ] = arr [ i ] ; } } for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = dp [ i ] [ j + 1 ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( dp [ i ] [ 0 ] + " ▁ " ) ; } System . out . println ( ) ; } }
import java . util . * ; public class GFG { static void pre_process ( String s , String s1 ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String dup = " " ; for ( int j = 0 ; j < n ; j ++ ) dup += s . charAt ( j ) ; String substrings = dup ; Arrays . sort ( substrings ) ; return substrings ; } substrings = new String [ n ] ; substrings = pre_process ( substrings , s ) ; queries = new String [ queries . length ] ; for ( int i = 0 ; i < queries . length ; i ++ ) { System . out . println ( substrings [ queries [ i ] - 1 ] ) ; } } public static void main ( String [ ] args ) { String s = " geek " ; String s1 = " geek1 " ; pre_process ( s , s1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; if ( w == 0 && h == 0 ) { break ; } int [ ] [ ] dp = new int [ h + 1 ] [ w + 1 ] ; dp [ 0 ] [ 0 ] =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( n - 1 - i ) ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { String s = sc . next ( ) ; if ( s . equals ( "0" ) ) break ; int a = 0 ; int b = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' ) a ++ ; else b ++ ; } if ( a > b ) { a ++ ; b ++ ; } System . out . println ( a + " ▁ " + b ) ; } } }
public class GFG { static int fact ( int N ) { int product = 1 ; for ( int i = 1 ; i <= N ; i ++ ) product = product * i ; return product ; } static int nthTerm ( int N ) { return ( N * N ) * fact ( N ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int longestSubArray ( int arr [ ] , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZeroPresent = true ; break ; } } if ( isZeroPresent ) return n ; return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 0 , 1 , 2 , 0 } ; int n = arr . length ; System . out . println ( longestSubArray ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; System . out . println ( ( n - 1 ) * 9 + x ) ; } } }
public class GFG { static int maximumArea ( int l , int b , int x , int y ) { int left = x * b ; int right = ( l - x - 1 ) * b ; int above = ( l * y ) ; int below = ( b - y - 1 ) * l ; System . out . println ( Math . max ( max ( left , right ) , Math . max ( above , below ) ) ) ; } public static void main ( String [ ] args ) { int l = 8 , b = 8 , x = 0 , y = 0 ; maximumArea ( l , b , x , y ) ; } }
public class GFG { static int MAX_OF_CHARS = 256 ; static int max_distinct_char ( String str , int n ) { int count [ ] = new int [ MAX_OF_CHARS ] ; for ( int i = 0 ; i < n ; i ++ ) count [ str . charAt ( i ) - ' A ' ] ++ ; int max_distinct = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s1 = sc . next ( ) ; String s2 = sc . next ( ) ; System . out . println ( f ( n , s1 , s2 ) ) ; } } static boolean f ( int n , String s1 , String s2 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( s1 . charAt ( i ) != s2 . charAt ( i ) ) return false ; } return true ; } }
public class GFG { static int findNumberOfEvenCells ( int n , int q [ ] [ ] , int size ) { int row [ ] = new int [ size ] ; int col [ ] = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { row [ i ] = q [ i ] [ 0 ] ; col [ i ] = q [ i ] [ 1 ] ; } int r1 = 0 , r2 = 0 , c1 = 0 , c2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( row [ i ]
public class GFG { static void checkType ( int arr [ ] , int n ) { if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] <= arr [ n - 1 ] ) System . out . println ( " Increasing ▁ " + " ▁ then ▁ decreasing ▁ " + " ▁ then ▁ increasing ▁ " ) ; else if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] <= arr [ n - 1 ] ) System . out . println ( " Decreasing ▁ " + " ▁ then ▁ increasing ▁ " + " ▁ then ▁ decreasing ▁ " ) ; else System . out . println ( " INCREASING ▁ " + " ▁ then ▁ increasing ▁ " + " ▁ then ▁ decreasing ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; checkType ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int min = Math . min ( a , Math . min ( b , c ) ) ; int max = Math . max ( a , Math . max ( b , c ) ) ; int min2 = Math . min ( a , Math . min ( b , c ) ) ; int max2 = Math . max ( a , Math . max ( b , c ) ) ; int min3 = Math . min ( a , Math . min ( b , c ) ) ; int max3 = Math . max ( a , Math . max ( b , c ) ) ; int min4 = Math . min ( a , Math . min ( b , c ) ) ; int max4 =
public class GFG { static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
import java . util . * ; public class GFG { static void rearrange ( int arr [ ] , int n ) { int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } System . out . println ( arr ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 } ; int n = arr . length ; rearrange ( arr , n ) ; } }
import java . io . * ; public class GFG { static int centered_square_num ( int n ) { return n * n + ( ( n - 1 ) * ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( " % sth ▁ Centered ▁ square ▁ number : " + centered_square_num ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += arr [ i ] ; System . out . println ( ans ) ; } }
public class GFG { static int maxSubArraySum ( int arr [ ] , int size ) { int max_so_far = arr [ 0 ] ; int curr_max = arr [ 0 ] ; for ( int i = 1 ; i < size ; i ++ ) curr_max = Math .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int p = arr [ i ] ; int c = arr [ i ] ; if ( c > max ) { max = c ; } } System . out . println ( max ) ; } }
public class GFG { static int find ( int dividend , int divisor , int start , int end ) { if ( start > end ) return ( 0 ) ; int mid = start + ( end - start ) / 2 ; int n = dividend - divisor * mid ; if ( n > divisor ) { start = mid + 1 ; } else if ( n < 0 ) { end = mid - 1 ; } else { if ( n == divisor ) { mid ++ ; n = 0 ; } return ( mid , n ) ; } return find ( dividend , divisor , start , end ) ; } static int divide ( int dividend , int divisor ) { return find ( dividend , divisor , 1 , dividend ) ; } public static void main ( String [ ] args ) { int dividend = 10 , divisor = 3 ; int ans = divide ( dividend , divisor ) ; System . out . println ( ans + " , ▁ " +
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int max = Integer . MIN_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { max = Math . max ( max , arr [ j ] - arr [ j + 1 ] ) ; } else { max = Math . max ( max , arr [ j ] - arr [ j + 1 ] ) ; } } min = Math . min ( min , max ) ; } System . out . println ( min + " ▁ " + max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { min = j + 1 ; break ; } max = Math . max ( max , arr [ j ] - arr [ j + 1 ] ) ; } int ans = 0 ; for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( arr [ j ] != arr [ j + 1 ] ) { ans ++ ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = 0 ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { ans [ m ++ ] = 0 ; } else { ans [ m ++ ] = arr [ i ] ; } } for ( int i = 0 ; i < m ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
import java . io . * ; public class GFG { static int minSum ( int arr [ ] , int n ) { int sum = arr [ 0 ] ; int prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= prev ) { prev = prev + 1 ; sum = sum + prev ; } else sum = sum + arr [ i ] ; prev = arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 3 , 5 , 6 } ; int n = arr . length ; System . out . println ( minSum ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void findN ( int k ) { if ( k == 0 ) { System . out . println ( 3 ) ; } if ( k == 1 ) { System . out . println ( 1 ) ; } else if ( k % 4 == 0 ) { System . out . println ( k - 1 ) ; } else { System . out . println ( - 1 ) ; } return ; } public static void main ( String [ ] args ) { int k = 7 ; findN ( k ) ; if ( findN ( k ) == - 1 ) { System . out . println ( " Not ▁ possible " ) ; } else { System . out . println ( findN ( k ) ) ; } } }
import java . util . *
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int [ ] [ ] p = new int [ d ] [ g ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < g ; j ++ ) { p [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 1000000 ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < g ; j ++ ) { if ( i == j ) continue ; if ( p [ i ] [ j ] == p [ j ] [ i ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } if ( sum == m ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; if ( arr [ i ] < min ) min = arr [ i ] ; } if ( max == min ) System . out . println ( 0 ) ; else System . out . println ( max - min ) ; } }
import java . io . * ; public class GFG { static int minAbsDiff ( int n ) { int left = ( int ) Math . pow ( 2 , Math . floor ( Math . log ( n ) ) ) ; int right = left * 2 ; return Math . min ( ( n - left ) , ( right - n ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( minAbsDiff ( n ) ) ; } }
import java . util . * ; public class GFG { static int LCIS ( int arr [ ] , int n , int arr1 [ ] , int arr2 [ ] , int m ) { int table [ ] = new int [ m ] ; for ( int j = 0 ; j < m ; j ++ ) table [ j ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr1 [ i ] == arr2 [ j ] ) { if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ; } if (
public class GFG { static int countSetBits ( int n ) { int bitCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) bitCount += countSetBitsUtil ( i ) ; return bitCount ; } static int countSetBitsUtil ( int x ) { if ( x <= 0 ) return 0 ; return ( 0 ) + countSetBitsUtil ( x / 2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Total ▁ set ▁ bit ▁ count ▁ is ▁ " + countSetBits ( n ) ) ; } }
import java . util . * ; public class GFG { static void partition ( int arr [ ] , int low , int high ) { int pivot = arr [ low ] ; int i = low - 1 ; int j = high + 1 ; while ( true ) { i ++ ; while ( arr [ i ] < pivot ) i ++ ; j -- ; while ( arr [ j ] > pivot ) j -- ; if ( i >= j ) return ; arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ i ] = arr [ i ] ; } } static void quickSort ( int arr [ ] , int low , int high ) { if ( low < high )
import java . util . * ; public class GFG { static int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high ; j ++ ) { if ( arr [ j ] <= pivot ) i ++ ; arr [ i ] = arr [ j ] , arr [ i ] = arr [ j ] ; arr [ i + 1 ] = arr [ high ] ; } arr [ i + 1 ] = arr [ high ] ; return ( i + 1 ) ; } static void quickSort ( int arr [ ] , int low , int high ) { if ( low < high ) { int pi = partition ( arr , low , high ) ; quickSort ( arr , low , pi - 1 ) ; quickSort ( arr ,
public class GFG { static int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = - 10 * ( int ) Math . pow ( 10 , 9 ) ; int max_ending_here = 0 ; for ( int i = 0 ; i < size ; i ++ ) max_ending_here = max_ending_here + a [ i ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; return max_so_far ; } static int minPossibleSum ( int a [ ] , int n , int x ) { int mxSum = maxSubArraySum ( a , n ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; sum = sum - mxSum
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ min ] ) { min = i ; max = i ; } } System . out
import java . util . * ; public class GFG { static void printArray ( int N , int SUM , int K ) { int minSum = ( N * ( N + 1 ) ) / 2 ; int maxSum = ( N * K ) - ( N * ( N - 1 ) ) / 2 ; if ( minSum > SUM || maxSum < SUM ) { System . out . println ( " Not ▁ Possible " ) ; return ; } int arr [ ] = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) arr [ i ] = i ; for ( int i = 1 ; i <= N ; i ++ ) { arr [ i ] = i ; }
public class GFG { static int maxItems ( int x , int y , int z ) { int type1 = x / COST ; int x %= COST ; int type2 = y / COST ; int y %= COST ; int type3 = z / COST ; int z %= COST ; int type4 = Math . min ( x , Math . min ( y , z ) ) ; int maxItems = type1 + type2 + type3 + type4 ; return maxItems ; } public static void main ( String [ ] args ) { int x = 4 , y = 5 , z = 6 ; System . out . println ( maxItems ( x , y , z ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] d = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] == d [ i ] ) { ans ++ ; } } System . out . println ( ans
import java . io . * ; public class GFG { static void line ( int x0 , int y0 ) { int c = 2 * y0 * x0 ; System . out . println ( " { : 1 f } " . format ( y0 ) + " x " + " ▁ + " + " { : 1 f } " . format ( x0 ) + " y ▁ = ▁ " + " { : 1 f } " . format ( c ) ) ; } public static void main ( String [ ] args ) { int x0 = 4 , y0 = 3 ; line ( x0 , y0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }

import java . util . * ; public class GFG { static boolean isAnyNotPalindrome ( String s ) { Set < Character > unique = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) unique . add ( s . charAt ( i ) ) ; if ( unique . size ( ) > 1 ) return true ; else return false ; } public static void main ( String [ ] args ) { String s = " aaaaab " ; if ( isAnyNotPalindrome ( s ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class GFG { static int findMajority ( int arr [ ] , int n ) { return arr [ n / 2 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = arr . length ; System . out . println ( findMajority ( arr , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s - a [ i ] == 20000 ) { ans = Math . max ( ans , a [ i ] ) ; s -= a [ i ] ; } else if ( s - a [ i ] == 0 ) { ans = Math . max ( ans , a [ i ]
public class GFG { static int countSubArrays ( int arr [ ] , int n , int K ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k <= j ; k ++ ) { bitwise_or = bitwise_or | arr [ k ] ; } if ( bitwise_or >= K ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; int k = 6 ; System . out . println ( countSubArrays ( arr , n , k ) ) ; } }
public class GFG { static boolean canBeEqual ( int a [ ] , int b [ ] , int c [ ] , int k ) { int arr [ ] = new int [ 3 ] ; arr [ 0 ] = a ; arr [ 1 ] = b ; arr [ 2 ] = c ; arr . sort ( ) ; int diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ; k = k - diff ; if ( k < 0 || k % 3 != 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int a1 = 6 , b1 = 3 , c1 = 2 , k1 = 7 ; if ( canBeEqual ( a1 , b1 , c1 , k1 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { min = Math . min ( min , b [ i ] ) ; } } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static int lcsOf3 ( int X , int Y , int Z , int m , int n , int o ) { int L [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { for ( int j = 0 ; j < m + 1 ; j ++ ) { L [ i ] [ j ] = 0 ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = Math . abs ( arr [ 0 ] - arr [ n - 1 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { ans += Math . abs ( arr [ i ] - arr [ i - 1 ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean isSpiltPossible ( int n , int a [ ] ) { int sum = 0 ; int c1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( a [ i ] == 1 ) c1 ++ ; } if ( sum % 2 == 0 ) return false ; if ( ( sum / 2 ) % 2 == 0 ) return true ; if ( ( sum / 2 ) % 2 == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; int a [ ] = { 1 , 1 , 2 } ; if ( isSpiltPossible ( n , a ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { max = Math . max ( max , arr [ i ] ) ; min = Math . min ( min , arr [ i ] ) ; } else { min = Math . min ( min , arr [ i ] ) ; } } System . out . println ( max - min ) ; } }
import java . util . * ; public class GFG { static int count_even_odd ( int min , int max , int steps [ ] [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; System . out . println ( ( n / m ) * ( n % m ) + 1 ) ; } }
import java . util . * ; public class GFG { static void printKPFNums ( int A [ ] , int B [ ] , int K ) { boolean [ ] prime = new boolean [ B + 1 ] ; for ( int p = 2 ; p <= B + 1 ; p ++ ) { if ( prime [ p ] == false ) { for ( int i = p ; i <= B + 1 ; i += p ) prime [ i ] = true ; } } for ( int i = A [ 14 ] ; i <= B + 1 ; i ++ ) { if ( prime [ i ] == false ) { for ( int i = p ; i <= B + 1 ; i += p ) prime [ i ] = true ; } } for ( int i = A [ 18 ] ; i <= B + 1 ; i ++ ) { if ( prime [ i ] == false ) { for ( int i = p ; i <= B + 1 ; i += p ) prime [ i ] = true ; } } for ( int i = A [ 18 ] ; i <= B + 1 ; i ++ ) { if ( prime [ i ] == false ) { for ( int i = p ; i <= B + 1 ; i += p ) prime [ i ] = true ; } } for ( int i = A [ 18 ] ; i <= B + 1 ; i ++
import java . util . * ; public class GFG { static void reverserWords ( String str ) { String st = new String [ str . length ( ) ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { st . append ( str . charAt ( i ) ) ; } for ( int i = 0 ; i < str . length ( ) ; i ++ ) { System . out . print ( st . charAt ( i ) ) ; } while ( st . length ( ) > 0 ) { System . out . print ( st . charAt ( st . length ( ) - 1 ) ) ; st . pop ( ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { String str = " Geeks ▁ for ▁ Geeks " ; reverserWords ( str ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { ans = i ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; arr [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = arr [ i - 1 ] + 1 ; } int ans = 0 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { String s = sc . next ( ) ; int [ ] arr = new int [ s . length ( ) ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = Integer . parseInt ( s . charAt ( i ) + " " ) ; } int [ ] ans = new int [ s . length ( ) ] ; int i = 0 ; while ( i < arr . length ) { ans [ i ] = arr [ i ] ; i ++ ; } for ( int j = 0 ; j < arr . length ; j ++ ) { ans [ j ] = Math . max ( ans [ j ] , ans [ j + 1 ] ) ; } System . out . println ( ans [ s . length ( ) - 1 ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( x % k != 0 ) { ans = x ; break ; } } System . out . println ( ans ) ; } }
public class GFG { static void findNthTerm ( int n ) { if ( n % 2 == 0 ) { n /= 2 ; System . out . println ( 3 * ( n - 1 ) ) ; } else { n = ( n / 2 ) + 1 ; System . out . println ( 2 * ( n - 1 ) ) ; } } public static void main ( String [ ] args ) { int N = 4 ; findNthTerm ( N ) ; N = 11 ; findNthTerm ( N ) ; } }
public class GFG { static int countNonIncreasing ( int arr [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i + 1 ] >= arr [ i ] ) { len ++ ; } else { cnt += ( ( ( len + 1 ) * len ) / 2 ) ; len = 1 ; } } if ( len > 1 ) { cnt += ( ( ( len - 1 ) * len ) / 2 ) ; len = 1 ; } return cnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 7 , 1 , 1 } ; int n = arr . length ; System . out . println ( countNonIncreasing ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int maximize ( int A1 [ ] , int A2 [ ] , int n , int x , int y ) { int c [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = A2 [ i ] - A1 [ i ] ; sum += A1 [ i ] ; } Arrays . sort ( c ) ; int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += c [ i ] ; if ( i + 1 >= ( n - x ) ) { maxi = Math . max ( sum , maxi ) ; } } return maxi ; } public static void main ( String [ ] args ) { int A1 [ ] = { 1 , 2 , 3 , 4 , 5 } ; int A2 [ ] = { 5 , 4 , 3 , 2 , 1 } ; int n = 5 ; int x = 3 , y = 3 ; System . out . println ( maximize ( A1 , A2 , n , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i ; } if ( ans % 10 == 0 ) { ans += 1 ; } else { ans += 1 ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] cost = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cost [ i ] [ j ] = sc . nextInt ( ) ; } } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; int c = sc . nextInt ( ) - 1 ; int d = sc . nextInt ( ) - 1 ; cost [ a ] [ b ] = c ; cost [ b ] [ a ] = d ; cost [ a ] [ b ] = c ; } int [ ] [ ] dp = new int [ n
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int r1 = sc . nextInt ( ) ; int r2 = sc . nextInt ( ) ; int c1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ 4 ] [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { dp [ 0 ] [ 0 ] = 1 ; dp [ 0 ] [ 1 ] = 1 ; dp [ 0 ] [ 2 ] = 1 ; dp [ 0 ] [ 3 ] = 1 ; } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( i == j ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i + 1 ] [ j ] + c1 - r2 ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i + 1 ] [ j + c1 - r2 ] ) ; } } } int ans = 0 ; for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 0 && m == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i <
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ]
import java . util . * ; public class GFG { static boolean startsWith ( String str , int pre [ ] , int suff [ ] ) { int len = str . length ( ) ; int suff [ ] = suff . clone ( ) ; int i , j ; for ( i = 0 ; i < len ; i ++ ) { if ( suff [
public class GFG { static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 ) { for ( int k = 1 ; k < n ; k ++ ) { if ( k % 3 != 0 && ( i + j + k ) == n ) { System . out . print ( i + " ▁ " + j + " ▁ " + k ) ; return ; } } } } } } } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }
import java . io . * ; public class GFG { static int countIntegralSolutions ( int n ) { int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { if ( i + j + k == n ) result ++ ; } } } return result ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }
public class GFG { static int TEN = 10 ; static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % TEN ; n /= TEN ; } return sum ; } static int getNthTerm ( int n ) { int sum = digitSum ( n ) ; if ( sum % TEN == 0 ) return ( n * TEN ) ; int extra = TEN - ( sum % TEN ) ; return ( ( n * TEN ) + extra ) ; } static int firstNTerms ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( getNthTerm ( i ) + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 10 ; firstNTerms ( n ) ; } }
public class GFG { static int power ( int x , int a ) { int res = 1 ; while ( a > 0 ) { if ( a % 2 == 1 ) res = res * x ; x = x * x ; a >>= 1 ; } return res ; } static int breakInteger ( int N ) { if ( N == 2 ) return 1 ; if ( N == 3 ) return 2 ; int maxProduct = 0 ; if ( N % 3 == 0 ) maxProduct = power ( 3 , int ( N / 3 ) ) ; return maxProduct ; int elif ( N % 3 == 1 ) maxProduct = 2 * 2 * power ( 3 , N / 3 ) ; return maxProduct ; } static int maxProduct = breakInteger ( 10 ) ; System . out . println ( maxProduct ) ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( "1 ▁ 2 ▁ 3" ) ; }
import java . util . * ; public class Main {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; System . out . println ( s . substring ( 4 , 5 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ arr [ i ] - ' a ' ] > 1 ) { System . out . print ( arr [ i ] + " ▁ " ) ; cnt ++ ; break ; } } System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { int curr = arr [ i ] ; int next = arr [ i ] ; while ( curr != next ) { ans [ cur
import java . util . * ; public class GFG { static int solve ( int n , int m , int obstacles [ ] , int rangee [ ] ) { int val = Math . min ( n , m ) ; int rangee [ ] = new int [ obstacles - 1 ] ; for ( int i = 0 ; i < obstacles - 1 ; i ++ ) { rangee [ i ] = 2 * rangee [ i ] ; val -= rangee [ i ] ; if ( val <= 0 ) return - 1 ; else return - 1 ; } if ( val > 0 ) return - 1 ; return - 1 ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 , obstacles = 3 , rangee [ ] = new int [ ] { 1 , 1.25 , 1.15 } ; System . out . println ( solve ( n , m , obstacles , rangee ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( m == l && r == r ) { System . out . println ( " U " ) ; } else if ( m == l && r == r ) { System . out . println ( " M " ) ; } else if ( m == l && r == r ) { System . out . println ( " L " ) ; } else { System . out . println ( " I " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [
import java . util . * ; public class Main { public static void
public class GFG { static int flipSign ( int a
import java . util . * ; public class GFG { static int factorial ( int n ) { int i = n ; int fact = 1 ; while ( n / i != n ) { fact = fact * i ; i -- ; } return fact ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial ▁ of ▁ " + num + " ▁ is ▁ " + factorial ( num ) ) ; } }
public class GFG { static int CntDivbyX ( int arr [ ] , int n , int x ) { int number = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { number = number * 2 + arr [ i ] ; if ( ( number % x == 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 1 , 0 , 1 , 1 , 0 } ; int n = arr . length ; int x = 2 ; System . out . println ( CntDivbyX ( arr , n , x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { dp [ a [ i ] ] += dp [ a [ i ] ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += dp [ i ] ; } System . out . println ( ans ) ; } }
public class GFG { static int min_noOf_operation ( int arr [ ] , int n , int k ) { int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int noOfSubtraction = 0 ; if ( arr [ i ] > arr [ i - 1 ] ) noOfSubtraction = ( arr [ i ] - arr [ i - 1 ] ) / k ; if ( ( arr [ i ] - arr [ i - 1 ] ) % k != 0 ) noOfSubtraction ++ ; arr [ i ] = arr [ i ] - k * noOfSubtraction ; } res = res + noOfSubtraction ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 } ; int N = arr . length ; int k = 5 ; System . out . println ( min_noOf_operation ( arr , N , k ) ) ; } }
public class GFG { static int CountSubSet ( int arr [ ] , int n , int X ) { int N = 2 << N ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i & ( 1 << j ) ) { if ( arr [ j ] == X ) count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 6 , 7 } ; int X = 5 ; int n = arr . length ; System . out . println ( CountSubSet ( arr , n , X ) ) ; } }


public class GFG { static int smallestIndexsum ( int arr [ ] , int n ) { int i = n - 1 ; while ( i >= 0 && arr [ i ] % 2 == 1 ) i -- ; int sum = 0 ; for ( int j = 0 ; j < i + 1 ; j ++ ) sum += arr [ j ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 6 , 3 , 3 } ; int n = arr . length ; System . out . println ( smallestIndexsum ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int y1 = sc . nextInt ( ) ; int m1 = sc . nextInt ( ) ; int d1 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int m2 = sc . nextInt ( ) ; int d2 = sc . nextInt ( ) ; int res = Math . abs ( y2 - y1 ) ; System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; int q = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' Q ' ) { count ++ ; } else if ( s . charAt ( i ) == ' A ' ) { count ++ ; } else { q ++ ; } } System . out . println ( count ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; if ( n % s == 0 ) { ans = n ; } else { ans = n + 1 ; } System . out . println ( ans ) ; } }
public class GFG { static int multiply ( int v [ ] , int x ) { int carry = 0 ; int size = v . length ; for ( int i = 0 ; i < size ; i ++ ) { int res = carry + v [ i ] * x ; v [ i ] = res % 10 ; carry = res / 10 ; } while ( carry != 0 ) { int v [ ] = carry % 10 ; carry /= 10 ; } while ( carry != 0 ) { int v [ ] = carry % 10 ; carry /= 10 ; } return v [ size - 1 ] ; } public static void main ( String [ ] args ) { int n = 1000 ; System . out . println ( findSumOfDigits ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ n
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; int [ ] cnt = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int t = arr [ l - 1 ] ; while ( t > 0 ) { ans [ t - 1 ] = x ; cnt [ t - 1 ] ++ ; t -- ; } } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int cur = arr [ i ] ; if ( cur > max ) max = cur ; if ( cur < min ) min = cur ; } System . out . println ( max - min ) ; } }
public class GFG { static int pell ( int n ) { if ( n <= 2 ) return n ; return ( 2 * pell ( n - 1 ) + pell ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pell ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int i = 1 ; int j = 1 ; while ( i < j ) { System . out . print ( i + " ▁ " + j ) ; i ++ ; j -- ; } } }
import java . util . * ; public class GFG { static void binary_search ( int arr [ ] , int low , int high , int ele ) { while ( low < high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == ele ) return mid ; else if ( arr [ mid ] > ele ) high = mid ; else low = mid + 1 ; } return - 1 ; } static void printSmall ( int arr [ ] , int asize , int n ) { int copy_arr [ ] = arr . clone ( ) ; copy_arr [ asize ] . sort ( Comparator . comparingInt ( Comparator . naturalOrder ( ) ) ) ; for ( int i = 0 ; i < asize ; i ++ ) { if ( binary_search ( copy_arr , low , high , arr [ i ] ) > - 1 ) System . out . print ( arr [ i ] + " ▁ " ) ; } } public static
import java . io . * ; public class GFG { static int countNumbers ( int n ) { int k = 0 ; int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) count += ( int ) Math . pow ( 2 , k ) ; k += 1 ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( countNumbers ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { max = Math . max ( max , a [
public class GFG { static int MAX = 26 ; static int updateFreq ( String str , int freq [ ] ) { int lenn = str . length ( ) ; for ( int i = 0 ; i < lenn ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; return freq [ MAX ] ; } static int maxCount ( String str , int patt ) { int [ ] freq = new int [ MAX ] ; updateFreq ( str , freq ) ; int pattFreq [ ] = new int [ MAX ] ; updateFreq ( patt , pattFreq ) ; int ans = 10 * ( int ) Math . pow ( 10 , 9 ) ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( pattFreq [ i ] == 0 ) continue ; ans = Math . min ( ans , freq [ i ] / pattFreq [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { String str = " geeksforge
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int L = sc . nextInt ( ) ; int R = sc . nextInt ( ) ; int Q = sc . nextInt ( ) ; int [ ] W = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { W [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i - j >= 0 ) { dp [ i - j ] [ j ] = Math . min ( dp [ i - j ] [ j ] , dp [ i - j ] [ i - j - 1 ] + W [ i - j ] * Q )
import java . io . * ; public class GFG { static int wastedWater ( int V , int M , int N ) { int amt_per_min = M - N ; int time_to_fill = V / amt_per_min ; int wasted_amt = N * time_to_fill ; return wasted_amt ; } public static void main ( String [ ] args ) { int V = 700 , M = 10 , N = 3 ; System . out . println ( wastedWater ( V , M , N ) ) ; V = 1000 ; M = 100 ; N = 50 ; System . out . println ( wastedWater ( V , M , N ) ) ; } }
public class GFG { static int maxSubStr ( String str , int n ) { int count0 = 0 , count1 = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '0' ) count0 ++ ; else count1 ++ ; if ( count0 != count1 ) return - 1 ; } return cnt ; } public static void main ( String [ ] args ) { String str = "0100110101" ; int n = str . length ( ) ; System . out . println ( maxSubStr ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int min = Math . min ( a , b ) ; int max = Math . max ( a , b ) ; int minIdx = Math . min ( a , b ) ; int maxIdx = Math . max ( a , b ) ; int minId = Math . min ( a , b ) ; int maxIdx = Math . max ( a , b ) ; int minIdx2 = Math . min ( a , b ) ; int maxIdx2 = Math . max ( a , b ) ; int minIdx3 = Math . min ( a , b ) ; int maxIdx3 = Math . max ( a , b ) ; int minIdx4 = Math . min ( a , b ) ; int maxIdx4 = Math . max ( a , b ) ; int minIdx5 = Math . min ( a , b ) ; int maxIdx5 = Math . max ( a , b ) ; int minIdx6 = Math . min ( a , b ) ; int maxIdx6 = Math . max ( a , b ) ; int maxIdx7 = Math . max ( a , b ) ; int minIdx8 = Math . min ( a , b ) ; int maxIdx8 = Math . max ( a , b ) ; int minIdx9 = Math . min ( a , b ) ; int maxIdx9 = Math . max ( a , b ) ; int minIdx10 = Math . min ( a , b ) ; int maxIdx10 = Math . max ( a , b ) ; int maxIdx11 = Math . max ( a , b ) ; int minIdx12 = Math . min ( a , b ) ; int minIdx13 = Math . min ( a , b ) ; int minIdx14 = Math . min ( a , b ) ; int minIdx
import java . util . * ; public class GFG { static int findS ( String s ) { int sum = 0 ; int n = 1 ; while ( sum < s . length ( ) ) { sum += n ; n ++ ; } n -= 1 ; if ( sum == s . length ( ) ) return n ; return - 1 ; } public static void main ( String [ ] args ) { String s = "15" ; int n = findS ( s ) ; if ( n == - 1 ) System . out . println ( " - 1" ) ; else System . out . println ( n ) ; } }
import java . util . * ; public class GFG { static int maximumAbsolute ( int arr [ ] , int n ) { int mn = 10 * 10 * 10 ; int mx = - 10 * 10 * 10 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arr [ i ] == - 1 && arr [ i - 1 ] != - 1 ) mn = Math . min ( mn , arr [ i - 1 ] ) ; else mn = Math . max
import java . util . * ; public class GFG { static long MOD = 1000000007 ; static long countStrings ( int N ) { long [ ] [ ] dp = new long [ N + 1 ] [ 3 ] ; dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = 1 ; dp [ 1 ] [ 2 ] = 0 ; for ( int i = 2 ; i <= N ; i ++ ) { dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] % MOD ; dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] % MOD ; } long ans = ( dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ) % MOD ; return ans ; } public
import java . util . * ; public class GFG { static int longest_subseq ( int n , int k , String s ) { int [ ] dp = new int [ n ] ; int max_length = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr = s . charAt ( i ) - ' a ' ; int lower = Math . max ( 0 , curr - k ) ; int upper = Math . min ( 25 , curr + k ) ; for ( int j = lower ; j <= upper ; j ++ ) { dp [ i ] = Math . max ( dp [ i ] , Math . max_length [ j ] + 1 ) ; } max_length [ curr ] = Math . max ( dp [ i ] , Math . max_length [ curr ] ) ; } return max ( dp ) ; } static int max ( int [ ] dp ) { int max = 0 ; for ( int i = 0 ; i < dp . length ; i ++ ) { max = Math . max ( max , dp [ i ] ) ; } return max ; } public static void main ( String [ ] args
public class GFG { static int longestFibonacciSubarray ( int n , int a [ ] ) { if ( n <= 2 ) return n ; int len = 2 ; int mx = - 10 * ( int ) Math . pow ( 10 , 9 ) ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) len ++ ; else len = 2 ; mx = Math . max ( mx , len ) ; } return mx ; } public static void main ( String [ ] args ) { int n = 5 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; System . out . println ( longestFibonacciSubarray ( n , a ) ) ; } }
import java . io . * ; public class GFG { static int minimumSubarrays ( int ar [ ] , int n ) { int se [ ] = new int [ n ] ; int cnt = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( se [ i ] == 0 ) se [ i ] = ar [ i ] ; else cnt ++ ; se [ i ] = ar [ i ] ; } return cnt ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 1 , 3 , 4 , 2 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4
import java . util . * ; public class GFG { static boolean check ( String s ) { int freq [ ] = new int [ 10 ] ; while ( s != 0 ) { int r = s % 10 ; s = s / 10 ; freq [ r ] ++ ; } int xor = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { xor = xor ^ freq [ i ] ; } if ( xor == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { String s = "122233" ; if ( check ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans / a ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans = i ; break ; } } if ( ans == - 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans + " ▁ " + arr [ ans ] ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int hh = sc . nextInt ( ) ; int mm = sc . nextInt ( ) ; int ans = 0 ; while ( m > 0 ) { int t = m % 10 ; m /= 10 ; if ( t == hh ) { ans ++ ; } else { mm /= 10 ; if ( mm == 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { ans = i + 1 ; break ; } } if ( ans == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int times ( int steps [ ] , int n ) { int current_level = 0 ; int previous_level = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { previous_level = current_level ; current_level = current_level + steps [ i ] ; if ( ( previous_level < 0 && current_level >= 0 ) || ( previous_level > 0 && current_level <= 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int steps [ ] = { 1 , - 1 , 0 , 0 , 1 , 1 , - 3 , 2 } ; int n = steps . length ; System . out . println ( times ( steps , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] > max ) { max = a [ i ] [ j ] ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( ( sum % 1000 == 0 ) ? " Petr " : " Nik " ) ; } }
import java . util . * ; public class GFG { static String smallest ( String s ) { int l = s . length ( ) ; String ans = " " ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i + 1 ) ) { for ( int j = l ; j < l ; j ++ ) { if ( i != j ) ans += s . charAt ( j ) ; } } return ans ; } ans = s . substring ( 0 , l - 1 ) ; return ans ; } public static void main ( String [ ] args ) { String s = " abcda " ; System . out . println ( smallest ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int [ ] [ ] a = new int [ x + 1 ] [ y + 1 ] ; for ( int i = 1 ; i <= x ; i ++ ) { for ( int j = 1 ; j <= y ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } if ( x == y ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static int FindMinNumber ( int arr [ ] , int n , int k ) { int i = 0 , j = 0 ; int min_num = 10 * 10 * 10 ; int found = false ; int sum = 0 ; while ( i < n ) { sum += arr [ i ] ; if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } else if ( sum > k ) { while ( sum > k ) { sum = sum - arr [ j ] ; j ++ ; } if ( sum == k ) { min_num = Math . min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } } i ++ ; } if ( found ) return min_num ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static void nthPalindrome ( int n , int k ) { if ( k % 2 == 1 ) { int temp = k / 2 ; int d = ( k / 2 ) ; System . out . print ( ( d * 10 ) + "th ▁ palindrome ▁ of ▁ " + ( k / 2 ) + " ▁ digit ▁ = ▁ " ) ; nthPalindrome ( n , k ) ; System . out . print ( ) ; } else { nthPalindrome ( n , k ) ; System . out . print ( "th ▁ palindrome ▁ of ▁ " + ( k / 2 ) + " ▁ digit ▁ = ▁ " )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += arr [ i ] * x ;
public class GFG { static int MAX = 10000 ; static int [ ] hashTable = new int [ MAX ] ; static int minOperations ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { hashTable [ arr [ i ] ] ++ ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( hashTable [ arr [ i ] ] % arr [ i ] == 0 ) { for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] % arr [ i ] == 0 ) { hashTable [ arr [ j ] ] = 0 ; } } res ++ ; } } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 6 , 2 , 8 , 7 , 21 , 24 , 49 , 44 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int p1 = sc . nextInt ( ) ; int p2 = sc . nextInt ( ) ; int p3 = sc . nextInt ( ) ; int p4 = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int min = Math . min ( p1 , p2 ) ; int max = Math . max ( p1 , p2 ) ; int min2 = Math . min ( p2 , p3 ) ; int max2 = Math . max ( p2 , p3 ) ; int min3 = Math . min ( p3 , p4 ) ; int max3 = Math . max ( p3 , p4 ) ; int min4 = Math . min ( p4 , p1 ) ; int max4 = Math . max ( p4 , p1 ) ; int ans = 0 ; if ( a == b ) { ans = Math . min ( min2 , Math . max ( min3 , min4 ) ) ; } else { ans = Math . min ( min2 , Math . max ( min3 , min4 ) ) ; } if ( a == b ) { ans = Math
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int MOD = 1000000007 ; public String run ( ) { int numer = 1 , denom = 1 ; for ( int d = 10 ; d <= 10 ; d ++ ) { for ( int n = 10 ; n <= d ; n ++ ) { numer *= n ; denom *= d ; } } return String . valueOf ( numer / MOD ) ; } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int countOfOddPascal ( int n ) { int c = countSetBits ( n ) ; return ( int ) Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddPascal ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int max = Math . max ( a * x , b * y ) ; int min = Math . min ( a * x , b * y ) ; int maxI = Math . max ( a * x , b * y ) ; int minI = Math . min ( a * x , b * y ) ; int maxJ = Math . max ( a * x , b * y ) ; int minJ = Math . min ( a * x , b * y ) ; int minI = Math . max ( a * x , b * y ) ; int maxJ = Math . max ( a * x , b * y ) ; int minI = Math . max ( a * x , b * y ) ; int maxJ = Math . max ( a * x , b * y ) ; int minI = Math . max ( a * x , b * y ) ; int minJ = Math . max ( a * x , b * y ) ; int minI = Math . max ( a * x , b * y ) ; int maxJ = Math . max ( a * x , b * y ) ; int minJ = Math . max ( a * x , b * y ) ; int minI = Math . max ( a * x , b * y ) ; int maxJ = Math . max ( a * x , b * y ) ; int minI = Math . max ( a * x , b * y ) ; int maxJ = Math . max ( a * x , b * y ) ; int minJ = Math . max ( a * x , b * y ) ; int minI = Math . max (
import java . util . * ; public class GFG { static int minSwaps ( int arr [ ] ) { int n = arr . length ; Arrays . sort ( arr ) ; int [ ] arrPos = new int [ n ] ; Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] || arrPos [ i ] [ 0 ] == i ) continue ; int cycle_size = 0 ; int j = i ; while ( ! vis [ j ] || arrPos [ j ] [ 0 ] == i ) cycle_size ++ ; if cycle_size > 0 ; ans += ( cycle_size - 1 ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 4 , 3 , 2 } ; System . out . println ( minSwaps ( arr ) ) ; } }
import java . util . * ; public class GFG { static int N = 1000005 ; static boolean prime [ ] = new boolean [ N ] ; static void sieve ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int i = 2 ; i * i <= N ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * 2 ; j <= N ; j += i ) prime [ j ] = false ; } } } static int sumTruncatablePrimes ( int n ) { int sum = 0 ; for ( int i = 2 ; i < n ; i ++ ) { int num = i ; int flag = true ; while ( num > 0 ) { if ( prime [ num % num
public class GFG { static void findWeights ( int X ) { int sum = 0 ; int power = 0 ; while ( sum < X ) { sum = ( int ) Math . pow ( 3 , power + 1 ) - 1 ; sum /= 2 ; power ++ ; } int ans = 1 ; for ( int i = 1 ; i <= power ; i ++ ) { System . out . print ( ans + " ▁ " ) ; ans = ans * 3 ; } } public static void main ( String [ ] args ) { int X = 2 ; findWeights ( X ) ; } }
import java . util . * ; public class GFG { static void addToArrayForm ( int A [ ] , int K ) { int v [ ] = new int [ A . length ] ; int ans [ ] = new int [ A . length ] ; int rem = 0 ; for ( int i = 0 ; i < A . length ; i ++ ) { v [ i ] = A [ i ] + ( K % 10 ) + rem ; if ( v [ i ] > 9 ) { rem = 1 ; ans [ i ] = v [ i ] ; } else { ans [ i ] =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = s . charAt ( j ) - ' a ' ; } } int [ ] [ ] b = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] [ j ] = s . charAt ( j ) - ' a ' ; } } int [ ] [ ] c = new int [ n ] [ m ] ; for ( int i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - '0' ] ++ ; } for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( arr [ j ] == 0 ) { arr [ j ] = 1 ; } } } for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int max = Math . max ( a , b ) ; int min = Math . min ( a , b ) ; if ( max - min > 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static void precisionCompute ( int x , int y , int n ) { if ( y == 0 ) { System . out . print ( " Infinite " ) ; return ; } if ( x == 0 ) { System . out . print ( 0 ) ; return ; } if ( n <= 0 ) { System . out . print ( x / y ) ; return ; } if ( ( ( x > 0 ) && ( y < 0 ) ) || ( ( x < 0 ) && ( y > 0 ) ) ) { System . out . print ( " - " ) ; if ( x <= 0 ) x = - x ; if ( y <= 0 ) y = - y ; } } public static
public class GFG { static int gcd ( int a , int b ) {
import java . util . * ; public class GFG { static class Node { int s [ ] ; int q [ ] ; Node left , right ; public Node ( int s [ ] , int q [ ] ) { this . s = s ; this . q = q ; this . left = left ; this . right = right ;
public class GFG { static void hollowSquare ( int [ ] rows ) { for ( int i = 1 ; i <= rows . length ; i ++ ) { if ( i == 1 || i == rows . length ) { for ( int j = 1 ; j <= rows . length ; j ++ ) { System . out . print ( " * " ) ; } } else { for ( int j = 1 ; j <= rows . length ; j ++ ) { System . out . print ( " ▁ " ) ; } } System . out . println ( ) ; } } static void printPattern ( int [ ] rows ) { for ( int i = 1 ; i <= rows . length ; i ++ ) { for ( int j = 1 ; j <= rows . length ; j ++ ) { System . out . print ( " * " ) ; } System . out . println ( )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; System . out . println ( " abcd " ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( " abc " ) ; } System . out . println ( ) ; } } }
import java . util . *
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( a <= x && x <= a + b ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int findLargest ( int arr [ ] , int n ) { int gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) gcd = __gcd ( arr [ i ] , gcd ) ; return gcd ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 6 , 9 } ; int n = arr . length ; System . out . println ( findLargest ( arr , n ) ) ; } }
public class GFG { static void findWinner ( int n ) { if ( ( n - 1 ) % 6 == 0 ) System . out . println ( " Second ▁ Player ▁ wins ▁ the ▁ game " ) ; else System . out . println ( " First ▁ Player ▁ wins ▁ the ▁ game " ) ; } public static void main ( String [ ] args ) { int n = 7 ; findWinner ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] graph = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { graph [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] graph = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { graph [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++
import java . util . * ; public class GFG { static void getElements ( int a [ ] , int arr [ ] , int n ) { int elements [ ] = new int [ n + 1 ] ; elements [ 0 ] = a ; for ( int i = 1 ; i <= n ; i ++ ) { elements [ i + 1 ] = arr [ i ] ^ elements [ i ] ; } for ( int i = 0 ; i <= n ; i ++ ) System . out . print ( elements [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 2 , 6 , 1 } ; int n = arr . length ; int a [ ] = 5 ; getElements ( a , arr , n ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { ans += b [ i ] [ j ] ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void printRepeating ( int arr [ ] , int size ) { int S = 0 , P = 1 , n = size - 2 ; for ( int i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; } static int fact ( int n ) { if ( n == 0 ) return 1 ; else return ( n * fact ( n - 1 ) ) ; } static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; printRepeating ( arr , arr_size ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] + 2 * x [ i ] ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] >= dp [ i + 1 ] [ j ] ) { ans = Math . max ( ans , dp [ i ] [ j ] - dp [ i + 1 ] [ j + 1 ] ) ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { count ++ ; } } if ( count > 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int maxi = arr [ i ] ; int mini = arr [ i ] ; while ( maxi > mini ) { int mid = ( maxi + mini ) / 2 ; if ( arr [ mid ] * arr [ mid + 1 ] > arr [ mid ] * arr [ mid - 1 ] ) { maxi = mid ; mini = mid ; } else { break ; } } arr [ i ] = maxi ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( arr [ i ] ) ; } } } }
import java . util . * ; public class GFG { static int __gcd ( int x , int y ) { if ( x > y ) { int small = y ; int d = __gcd ( small , x ) ; int g = __gcd ( g , x ) ; for ( int i = 1 ; i <= small ; i ++ ) { if ( ( x % i == 0 ) && ( y % i == 0 ) ) g = __gcd ( i , y ) ; } return __gcd ( g , i ) ; } return __gcd ( g , y ) ; } static int FindLCM ( int a ,
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String ans = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { ans = s . substring ( i , i + 1 ) + t . substring ( i + 1 ) ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int smallestKFreq ( int arr [ ] , int n , int k ) { int mp [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ; int res = Integer . MAX_VALUE ; res = Math . min ( res , k ) ; for ( int key = 0 ; key < arr [ 0 ] ; key ++ ) { if ( arr [ 0 ] == key ) res = Math . min ( res , arr [ key ] ) ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 1 , 3 , 1 } ; int k = 2 ; int n = arr . length ; System . out . println ( smallestKFreq ( arr , n , k ) ) ; } }
import java . util . * ; public class GFG { static boolean areVowelsInOrder ( String s ) { int n = s . length ( ) ; int c = ( int ) ( ( long ) ( 64 ) ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' e ' || s . charAt ( i ) == ' i ' || s . charAt ( i ) == ' o ' || s . charAt ( i ) == ' u ' ) { if ( s . charAt ( i ) < c ) return false ; else c = s . charAt ( i ) ; } } return true ; } public static void main ( String [ ] args ) { String s = " aabbbddeecc " ; if ( areVowelsInOrder ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; d [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <
public class GFG { static int countOfLetters ( String str ) { int letter = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( ( str . charAt ( i ) >= ' A ' && str . charAt ( i ) <= ' Z ' ) || ( str . charAt ( i ) >= ' a ' && str . charAt ( i ) <= ' z ' ) ) letter ++ ; } return letter ; } static boolean check ( String str ) { if ( countOfLetters ( str ) == countOfNumbers ( str ) ) return true ; else return false ; } public static void main ( String [ ] args ) { String str = " GeeKs01324" ; check ( str ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; System . out . println ( a ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( x == 1 || x == 2 * n - 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static int MAX = 100001 ; static int perfectDiv [ ] = new int [ MAX ] ; static int precomputeCounts ( ) { int i = 1 ; while ( i * i < MAX ) { for ( int j = i * i ; j < MAX ; j += i * i ) perfectDiv [ j ] ++ ; i ++ ; } } static int countPerfectDivisors ( int n ) { return perfectDiv [ n ] ; } if ( __name__ == " _ _ main _ " ) precomputeCounts ( ) ; n = 16 ; System . out . println ( " Total ▁ perfect ▁ divisors ▁ of ▁ " + perfectDiv [ n ] + " = ▁ " + countPerfectDivisors ( n ) ) ; n = 12 ; System . out . println ( " Total ▁ perfect ▁ divisors ▁ of ▁ " + n + " = ▁ " + countPerfectDivisors ( n ) ) ; } public static void main ( String [ ] args ) { int precomputeCounts ( ) ; int n = 16 ; System . out . println ( " Total ▁ perfect ▁ divisors ▁ of ▁ " + n + " = ▁ " + countPerfect
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { sum += b [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] + t >= e ) { ans = i + 1 ; break ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static double cal_IST ( double h , double r ) { double I = ( h * r * 1.0 ) / 360 ; double I2 = ( h * r * 1.0 ) / 360 ; double I3 = ( h * r * 1.0 ) / 360 ; double I4 = ( h * r * 1.0 ) / 360 ; double I5 = ( h * r * 1.0 ) / 360 ; double I6 = ( h * r * 1.0 ) / 360 ; double I7 = ( h * r * 1.0 ) / 360 ; double I8 = ( h * r * 1.0 ) / 360 ; double I9 = ( h * r * 1.0 ) / 360 ; double I10 = ( h * r * 1.0 ) / 360 ; double I11 = ( h * r * 1.0 ) / 360 ; double I12 = ( h * r * 1.0 ) / 360 ; double I13 = ( h * r * 1.0 ) / 360 ; double I14 = ( h * r * 1.0 ) / 360 ; double I15 = ( h * r * 1.0 ) / 360 ; double I16 = ( h * r * 1.0 ) / 360 ; double I17 = ( h * r * 1.0 ) / 360 ; double I18 = ( h * r * 1.0 ) / 360 ; double I19 = ( h * r * 1.0 ) / 360 ; double I20 = ( h * r * 1.0 ) / 360 ; double I21 = ( h * r * 1.0 ) /
import java . io . * ; public class GFG { static void printRoots ( int n ) { double theta = Math . PI * 2 / n ; for ( int k = 0 ; k < n ; k ++ ) { double real = Math . cos ( k * theta ) ; double img = Math . sin ( k * theta ) ; System . out . print ( " { : . 3f } " . format ( real ) + " ▁ " ) ; if ( img >= 0 ) System . out . print ( " ▁ + ▁ i ▁ " ) ; else System . out . print ( " ▁ - ▁ i ▁ " ) ; System . out . print ( " \n " ) ; if ( img >= 0 ) System . out . print ( " ▁ - ▁ i ▁ " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; } } public static void main ( String [ ] args ) { printRoots ( 1 ) ; printRoots ( 2 ) ; printRoots ( 3 ) ; } }
import java . io . * ; public class GFG { static void findCart ( int arr1 [ ] , int arr2 [ ] , int n , int n1 ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n1 ; j ++ ) System . out . print ( " { ▁ " + arr1 [ i ] + " , ▁ " + arr2 [ j ] + " } , ▁ " + sep = " " ) ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 2 , 3 } ; int arr2 [ ] = { 4 , 5 , 6 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; findCart ( arr1 , arr2 , n1 , n2 ) ; } }
public class GFG { static int no_of_ways ( String s ) { int n = s . length ( ) ; int count_left = 0 , count_right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( 0 ) ) count_left ++ ; else break ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( n - 1 ) ) count_right ++ ; else break ; } if ( s . charAt ( 0 ) == s . charAt ( n - 1 ) ) return ( ( count_left + 1 ) * ( count_right + 1 ) ) ; else return ( count_left + count_right + 1 ) ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( no_of_ways ( s
public class GFG { static int MAX = 100000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] ) { int i = p * 2 ; while ( i <= MAX ) { prime [ i ] = false ; i += p ; } } } } static int SumOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k ==
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ MAX + 1 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void solve ( int arr [ ] , int n , int k ) { int c = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) sum += arr [ i ] ; } } System . out . println ( sum ) ; } public static void main ( String [ ]
import java . util . * ; public class GFG { static int MAX = 1000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int productOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) c ++ ; if ( c %
import java . util . * ; public class GFG { static void findAllSequences ( int diff , int out [ ] , int start , int end ) { if ( Math . abs ( diff ) > ( end - start + 1 ) / 2 ) return ; if ( start > end ) { if ( diff == 0 ) System . out . print ( " " + out [ start ] + " ▁ " ) ; else System . out . print ( "1 ▁ " + out [ end ] + " ▁ " ) ; findAllSequences ( diff + 1 , out , start + 1 , end - 1 ) ; } else { if ( diff == 0 ) System . out . print ( " " + out [ start ] + " ▁ " ) ; else System . out . print ( "1 ▁ " + out [ end ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int min = a [ 0 ] ; int max = a [ n - 1 ] ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; count ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static void printList ( Node node ) { while ( node != null ) { System . out . print ( node . data + " - > ▁ " ) ; node = node . next ; } System . out .
public class GFG { static int maxSubStrings ( String s , int k ) { int maxSubStrings = 0 ; int n = s . length ( ) ; for ( int c = 0 ; c < 27 ; c ++ ) { char ch = ( char ) ( ' a ' + c ) ; int curr = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { if ( s . charAt ( i ) != ch ) continue ; int cnt = 0 ; while ( i < n && s . charAt ( i ) == ch && cnt != k ) { i ++ ; cnt ++ ; } i -- ; if ( cnt == k ) curr ++ ; } maxSubStrings = Math . max ( maxSubStrings , curr ) ; } return maxSubStrings ; } public static void main ( String [ ] args ) { String s = " aaacaabbaa " ; int k = 2 ; System . out . println ( maxSubStrings ( s , k ) ) ; } }
public class GFG { static int N = 100 ; static int ansQueries ( int prefeven [ ] , int prefodd [ ] , int l [ ] , int r [ ] ) { if ( ( r - l + 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] % 2 == 0 ) { ans += Math . min ( d [ i ] /
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] ans = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { ans [ i ] [ j ] = arr [ i ] [ j ] ; ans [ i ] [ j ] = arr [ i ] [ j + 1 ] ; } } int [ ] [ ] ans2 = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { ans2 [ i ] [ j ] = ans [ i ] [ j ] + ans2 [ i ] [ j + 1 ] ; } } int [ ] [ ] ans2i = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2
public class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } static void removeMin ( int arr [ ] , int n ) { int minVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) minVal = Math . min ( minVal , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ 2 ] ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' i ' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int minOperations ( int ar [ ] , int k ) { Arrays . sort ( ar ) ; int opsNeeded = 0 ; for ( int i = 0 ; i < k ; i ++ ) opsNeeded += ar [ k - 1 ] - ar [ i ] ; int ans = opsNeeded ; for ( int i = k ; i < ar . length ; i ++ ) { opsNeeded = opsNeeded - ( ar [ i - 1 ] - ar [ i - k ] ) ; opsNeeded += ( k - 1 ) * ( ar [ i ] - ar [ i - k ] ) ; ans = Math . min ( ans , opsNeeded ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 9 , 100 } ; int n = arr . length ; int k = 3 ; System . out . println ( minOperations ( arr , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = arr [ i ] ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] == 0 ) { c ++ ; } } if ( c == m ) { System . out . println ( " Digit ▁ Character ▁ " ) ; } else if ( c == k ) { System . out . println ( " Special ▁ Character ▁ " ) ; } else { System . out . println ( " Digit ▁ Character ▁ " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { c [ i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { ans [ i ] = arr [ i ] ; i ++ ; } while ( i < n ) { ans [ i ] = arr [ i ] - 1 ; i ++ ; } for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( ans [ j ] + " ▁ " ) ; } System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int
public class GFG { static int sameOccurrence ( int arr [ ] , int n , int x , int y ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int ctX = 0 , ctY = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] == x ) ctX ++ ; else if ( arr [ j ] == y ) ctY ++ ; if ( ctX == ctY ) result ++ ; } } return ( result ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 , 4 , 1 } ; int n = arr . length ; int x = 2 , y = 3 ; System . out . println ( sameOccurrence ( arr , n , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int n = s . length ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { cnt ++ ; } } if ( cnt < n - cnt ) System . out . println ( cnt ) ; else if ( cnt > n - cnt ) System . out . println ( n - cnt ) ; else System . out . println ( 0 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; System . out . println ( ( n + m + k + l + r ) % 5 ) ; } }
import java . util . * ; public class GFG { static int [ ] arr = new int [ 31 ] ; static int [ ] length = new int [ 31 ] ; static int totalCount = 0 ; public static void main ( String [ ] args ) { int target = 93 ; int arr [ ] = { 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 } ; int length = arr . length ; int totalCount = 0 ; for ( int i = 0 ; i < length - 2 ; i ++ ) { if ( target % arr [ i ] == 0 ) { for ( int j = i + 1 ; j < length - 1 ; j ++ ) { if ( target % arr [ i ] * arr [ j ] == 0 ) { int toFind = target / ( arr [ i ] * arr [ j ] ) ; for ( int k = j + 1 ; k < length ; k ++ ) { if ( arr [ k ] == toFind ) totalCount ++ ; } } } } } System . out . println ( " Total ▁ number ▁ of ▁ triplets ▁ found : ▁ " + totalCount ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = - arr [ i ] * n ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = - arr [ i ] * n ; } System . out . println ( ans [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
import java . util . * ; public class GFG { static int finalNum ( int arr [ ] , int n ) { int result = arr [ 0 ] ; for ( int i = 1 ; i < arr . length ; i ++ ) result = __gcd ( result , arr [ i ] ) ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 9 , 6 , 36 } ; int n = arr . length ; System . out . println ( finalNum ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int N = 1000 ; static int lastElement ( int [ ] a , int n ) { int steps = 1 ; int v [ ] = new int [ n ] ; if ( n == 1 ) return a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) v [ steps ] = a [ i ] | a [ i + 1 ] ; while ( v [ steps ] > 1 ) { steps ++ ; for ( int i = 0 ; i < steps - 1 ; i ++ ) { if ( steps & 1 ) v [ steps ] . append ( v [ steps - 1 ] [ i ] | v [ steps
import java . io . * ; public class GFG { static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) / 6 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( number_cake ( n ) ) ; n = 8 ; System . out . println ( number_cake ( n ) ) ; n = 25 ; System . out . println ( number_cake ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] f = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ i ] = sc . nextInt ( ) ; } int [ ] f2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f2 [ i ] = sc . nextInt ( ) ; } int [ ] f3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f3 [ i ] = sc . nextInt ( ) ; } int [ ] f4 = new int [ n ] ; for ( int i
import java . io . * ; public class GFG { static void pattern ( int N ) { int k = 0 , space = 0 , rows = 1 , n ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( " * " ) ; } if ( i != rows ) { for ( int k = 1 ; k <= space ; k ++ ) System . out . print ( " ▁ " ) ; space ++ ; } System . out . print ( " \n " ) ; } System . out . print ( " \n " ) ; } public static void main ( String [ ] args ) { int N = 6 ; pattern ( N ) ; } }
public class GFG { static int maximum_middle_value ( int n , int k , int [ ] arr ) { int ans = - 1 ; int low = ( n + 1 - k ) / 2 ; int high = ( n + 1 - k ) / 2 + k ; for ( int i = low ; i <= high ; i ++ ) ans = Math . max ( ans , arr [ i - 1 ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; int [ ] arr = { 9 , 5 , 3 , 7 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr ) ) ; n = k = 9 , 3 ; arr1 [ 2 ] = { 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr1 ) ) ; } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Solution sObj =
import java . util . * ; public class GFG { static int getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) s += arr [ i ] ; System . out . println ( Math . min ( s , x ) ) ; return s ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int x = 5 ; int arr_size = arr . length ; getmax ( arr , arr_size , x ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 8 ) { ans [ cnt ] = i ; cnt ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int m = 0 ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { m = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { m = i ; break ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( m == 0 ) { ans ++ ; break ; } for ( int j = i ; j < n ; j ++ ) { if ( a [ j
public class GFG { static int maxOR ( int arr [ ] , int n ) { int maxVal = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { maxVal = Math . max ( maxVal , arr [ i ] | arr [ j ] ) ; } } return maxVal ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; System . out . println ( maxOR ( arr , n ) ) ; } }
import java . util . * ; public class Solution { public int numJewelsInStones ( String J , String S ) { int i ; int j ; int out ; int num ; for ( i = 0 ; i < J . length ( ) ; i ++ ) { if ( S . charAt ( i ) == ' a ' ) { out = 0 ; break ; } else { num = 0 ; for ( j = i + 1 ; j < J . length ( ) ; j ++ ) { if ( S . charAt ( j ) == ' a ' ) { num ++ ; break ; } } out += num ; } } return out ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String J = " aA " ; String S = " aAAbb " ; int out = sObj . numJewelsInStones ( J , S ) ; System . out . println ( out ) ; } }
public class GFG { static int MAX = 100 ; static int n = 0 ; static int [ ] store = new int [ MAX ] ; static boolean [ ] is_clique (
import java . io . * ; public class GFG { static int setBitNumber ( int n ) { int k = ( int ) Math . log ( n ) ; return 2 * k ; } public static void main ( String [ ] args ) { int n = 273 ; System . out . println ( setBitNumber ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < s ) { ans = i ; break ; } } if ( ans == - 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int subsetPairNotDivisibleByK ( int arr [ ] , int N , int K ) { int f [ ] = new int [ K ] ; for ( int i = 0 ; i < K ; i ++ ) f [ arr [ i ] % K ] ++ ; if ( K % 2 == 0 ) f [ K / 2 ] = Math . min ( f [ K / 2 ] , 1 ) ; int res = Math . min ( f [ 0 ] , 1 ) ; for ( int i = 1 ; i < K / 2 ; i ++ ) res += Math . max ( f [ i ] , f [ K - i ] ) ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 7 , 2 , 9 , 1 } ; int N = arr . length ; int K = 3 ; System . out . println ( subsetPairNotDivisibleByK ( arr , N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int max = 0 ; int min = 0 ; int count = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { count ++ ; } else { min = Math . min ( min , k ) ; max = Math . max ( max , n ) ; } } System . out . println ( max - min ) ; } }
import java . util . * ; public class GFG { static void printRoots ( int a , int b , int c ) { System . out . print ( 1 + " , ▁ " + c / ( a * 1.0 ) ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , c = - 5 ; printRoots ( a , b , c ) ; } }
import java . util . * ; public class GFG { static int [ ] [ ] dp = new int [ 2 ] [ 32 ] ; static int [ ] [ ] memo = new int [ 2 ]

import java . util . * ; public class GFG { static void createHash ( int hash1 , int maxElement ) { int prev , curr = 0 , i ; hash1 . add ( prev ) ; hash1 . add ( curr ) ; while ( curr < maxElement ) { int temp = curr + prev ; hash1 . add ( temp ) ; prev = curr ; curr = temp ; } } static void findFibonacciPair ( int n ) { HashSet < Integer > hash1 = new HashSet < Integer > ( ) ; createHash ( hash1 , n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i != hash1 . size ( ) - 1 ) System . out . print ( i + " , ▁ " + hash1 . size ( ) ) ; System . out . print ( " \n " ) ; return ; } System . out . print ( - 1 ) ; } public static void main ( String [ ] args ) { int N = 90 ; findFibonacciPair ( N ) ; } }
import java . util . * ; public class GFG { static int countgroup ( int a [ ] , int n ) { int xs = 0 ; for ( int i = 0 ; i < n ; i ++ ) xs = xs ^ a [ i ] ; if ( xs == 0 ) return ( 1 << ( n - 1 ) ) - 1 ; return 0 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 } ; int n = a . length ; System . out . println ( countgroup ( a , n ) ) ; } }
import java . util .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <=
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { sum += k * i ; } if ( sum <= n ) System . out . println ( 0 ) ; else System . out . println ( sum - n ) ; } }
public class GFG { static boolean isPrime ( int k ) { if ( k <= 1 ) return false ; for ( int i = 2 ; i * i <= k ; i ++ ) if ( k % i == 0 ) return false ; return true ; } static int findCount ( int a , int b , int k ) { int count = 0 ; if ( ! isPrime ( k ) ) return 0 ; else { for ( int i = a ; i <= b ; i ++ ) { int ans = findCount ( i , b , k ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( k == 1 && count == n ) { System . out . println ( - 1 ) ; } else { System . out . println ( arr [ k - 1 ] + arr [ k - 2 ] ) ; } } }
import java . util . * ; public class GFG { static int maxn = 16 ; static int precompute ( ) { int [ ] dp = new int [ maxn ] ; dp [ 0 ] = 0 ; int v = new int [ 4 , 6 , 9 ] ; for ( int i = 1 ; i < maxn ; i ++ ) { for ( int k = 3 ; k <= Math . sqrt ( v ) ; k ++ ) { int j = v [ k ] ; if ( i >= j && dp [ i - j ] != - 1 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i - j ] + 1 ) ; } } return dp [ maxn ] ; } static int Maximum_Summands ( int dp [ ] , int n ) { if ( n < maxn ) return dp [ n ] ;
import java . io . * ; public class GFG { static int countSquares ( int n ) { return ( ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( " Count ▁ of ▁ squares ▁ is ▁ " + countSquares ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; int [ ] ans1 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { ans1 [ arr [ i ] ] = ans [ arr [ i ] ] + 1 ; } for ( int i = 0 ; i < m ; i ++ ) { ans1 [ arr [ i ] ] = ans1 [ arr [ i ] ] % m ; } int ans2 = 0 ; for ( int i = 0 ; i < m ; i ++ ) { ans2 += ans1 [ arr [ i ] ] ; ans2 %= m ; } System . out . println ( ans2 ) ; } }

import java . io . * ; public class GFG { static void Loss ( int SP , int P ) { int loss = 0 ; loss = ( ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) ) ; System . out . println ( " Loss ▁ = ▁ " + loss ) ; } public static void main ( String [ ] args ) { int SP = 2400 , P = 30 ; Loss ( SP , P ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int min = Math . min ( n , m - n ) ; int max = Math . max ( n , m - n ) ; System . out . println ( min + max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { min = Math . min ( min , arr [ i ] ) ; max = Math . max ( max , arr [ i + 1 ] ) ; } else { min = Math . min ( min , arr [ i ] ) ; max = Math . max ( max , arr [ i + 1 ] ) ; } } System . out . println ( max * 2 ) ; } }
import java . util . * ; public class GFG { static int compute ( ) { int ans = 0 ; int sum = 1 ; for ( int i = 1 ; i <= 1000000 ; i ++ ) { ans = sum ( i ) ; sum = sum ( sum ) ; } return ans ; } static int square_digit_sum ( int n ) { int result = 0 ; while ( n != 0 ) { result += square_digit_sum ( n ) ; n /= 1000 ; } return result ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact *= i ; return fact ; } static int countStrings ( String str , int n ) { int distinct_char = set ( ) ; for ( int i = 0 ; i < n ; i ++ ) distinct_char . add ( str . charAt ( i ) ) ; return fact ( distinct_char ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; System . out . println ( countStrings ( str , n ) ) ; } }
import java . util . * ; public class GFG { static void printCommonElements ( int mat [ ] [ ] ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int j = 0 ; j < mat [ 0 ] . length ; j ++ ) { mp . put ( mat [ 0 ] [ j ] , 1 ) ; } for ( int i = 1 ; i < M ; i ++ ) { for ( int j = 0 ; j < mat [ i ] . length ; j ++ ) { if ( mp . get ( mat [ i ] [ j ] ) == i ) mp . put ( mat [ i ] [ j ] , i + 1 ) ; if ( i == M - 1 ) System . out . print ( mat [ i ] [ j ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 1 , 4 , 8 } , { 3 , 7 , 8 , 5 , 1 } , { 8 , 7 , 7 , 3 , 1 } , { 8 , 1 , 2 , 7 , 9 } } ; printCommonE

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) { dp [ i ] [ j
import java . io . * ; public class GFG { static int sumOfAP ( int a , int d , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a ; return sum ; } public static void main ( String [ ] args ) { int n = 20 ; int a = 2.5 ; int d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } }
import java . util . * ; public class GFG { static void find3Numbers ( int arr [ ] , int n ) { int small = + 2147483647 ; int large = + 2147483647 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) { small = arr [ i ] ; } else if ( arr [ i ] <= large ) { large = arr [ i ] ; } else break ; } if ( i == n ) { System . out . println ( " No ▁ such ▁ triplet ▁ found " ) ; return ; } for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] < large ) { large = arr [ j ] ; break ; } } System . out . println ( " " + small + " ▁ " + large + " ▁ " + arr [ i ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 7 , 4 , 8 }
public class GFG { static void numbersWith3Divisors ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } System . out . println ( " Numbers ▁ with ▁ 3 ▁ divisors ▁ : " ) ; for ( int i = 0 ; i * i <= n ; i ++ ) { if ( prime [ i ] ) System . out . print ( i * i + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 96 ; numbersWith3Divisors ( n ) ; } }
public class GFG { static int findPairCount ( int N , int K ) { int count = 0 ; int rem [ ] = new int [ K ] ; rem [ 0 ] = N / K ; rem [ 0 ] = N % K ; for ( int i = 1 ; i < K ; i ++ ) rem [ i ] = ( N - i ) / K + 1 ; if ( K % 2 == 0 ) count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; for ( int i = 1 ; i < K / 2 ; i ++ ) count += rem [ i ] * rem [ K - i ] ; return count ; } public static void main ( String [ ] args ) { int N = 10 , K = 4 ; System . out . println ( findPairCount ( N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 0 && m == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { max = Math . max ( max , arr [ i ] ) ; } } if ( max == 0 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . io . * ; public class GFG { static int fib ( int n ) { if ( n < 6 ) return fib ( n ) ; int t = 5 ; int fn = 5 ; while ( t < n ) fn = fn * PHI ; t += 1 ; return fn ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( n + " th ▁ Fibonacci ▁ Number ▁ = ▁ " + fib ( n ) ) ; } }
public class GFG { static int kthSmallest ( int n , int k ) { return 2 * k ; } public static void main ( String [ ] args ) { int n = 8 ; int k = 4 ; System . out . println ( kthSmallest ( n , k ) ) ; } }
public class GFG { static void printSumTricky ( int mat [ ] [ ] , int k ) { int n ; if ( k > n ) return ; int [ ] [ ] sum = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sum [ i ] [ i ] = 0 ; for ( int j = 0 ; j < n ; j ++ ) sum [ i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i
public class GFG { static int ncr ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i ++ ) ans *= ( n - r + i ) ; return ans ; } static int totalWays ( int X , int Y , int M , int W ) { return ( ncr ( M , X ) * ncr ( W , Y ) ) ; } public static void main ( String [ ] args ) { int X = 4 , Y = 3 , M = 6 , W = 5 ; System . out . println ( totalWays ( X , Y , M , W ) ) ; } }
public class GFG { static int nextPowerOf2 ( int n ) { int count = 0 ; if ( n == 0 && ! ( n & 1 ) ) return n ; while ( n != 0 ) { n >>= 1 ; count ++ ; } return 1 << count ; } static int removeElement ( int n ) { if ( n == 1 || n == 2 ) return 0 ; int a = nextPowerOf2 ( n ) ; if ( n == a || n == a - 1 ) return 1 ; else if ( n == a - 2 ) return 0 ; else if ( n % 2 == 0 ) return 1 ; else return 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeElement ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ p ] ; for ( int i = 0 ; i < p ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int t = 0 ; for ( int j = 0 ; j < p ; j ++ ) { if ( a [ j ] % 2 == 1 ) { t ++ ; } else { t = 1 ; } } if ( t % 2 ==
public class GFG { static int modInverse ( int a , int m ) { int a = a % m ; for ( int x = 1 ; x <= m ; x ++ ) { if ( ( a * x ) % m == 1 ) return x ; } return 1 ; } public static void main ( String [ ] args ) { int a = 3 , m = 11 ; System . out . println ( modInverse ( a , m ) ) ; } }
public class GFG { static int sumOfDigits ( int x ) { int sum = 0 ; while ( x != 0 ) { sum += x % 10 ; x = x / 10 ; } return sum ; } static int countNumbers ( int l , int r ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % 2 == 0 && sumOfDigits ( i ) % 3 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int l = 1000 , r = 6000 ; System . out . println ( countNumbers ( l , r ) ) ; } }
public class GFG { static void findGreater ( int a , int b ) { int x = a * ( Math . log ( b ) ) ; int y = b * ( Math . log ( a ) ) ; if ( y > x ) System . out . println ( " a ^ b ▁ is ▁ greater " ) ; else if ( y < x ) System . out . println ( " b ^ a ▁ is ▁ greater " ) ; else System . out . println ( " a ^ b ▁ is ▁ greater " ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 2 , d = 4 ; findGreater ( a , b ) ; findGreater ( c , d ) ; } }
import java . util . * ; public class GFG { static int findAnswer ( String str1 , String str2 , int n ) { int l = 0 , r = 0 ; int ans = 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { l = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( str1 . charAt ( i ) != str2 . charAt ( i + 1 ) ) { r = i ; break ; } } if ( r <
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int min = Math . min ( x , m ) ; int max = Math . max ( x , m ) ; int minIdx = 0 ; int maxIdx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( l <= r && l <= max ) { min = Math . min ( l , r ) ; max = Math . max ( l , r ) ; } else { minIdx = i ; } } System . out . println ( minIdx - 1 ) ; } } }
public class GFG { static boolean bitsAreInAltpatrnInGivenTRange ( int n , int l , int r ) { int num = n >> ( l - 1 ) ; int prev = num & 1 ; num = num >> 1 ; for ( int i = 1 ; i < ( r - l ) ; i ++ ) { int curr = num & 1 ; if ( curr == prev ) return false ; prev = curr ; num = num >> 1 ; } return true ; } public static void main ( String [ ] args ) { int n = 18 , l = 1 , r = 3 ; if ( bitsAreInAltpatrnInGivenTRange ( n , l , r ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < m ; i ++ ) { int min1 = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( c [ j ] < min1 ) { min1 = c [ j ] ; } } if ( min1 <= a [ i ] ) { min = min1 ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( a [ i ] % 2 == 0 ) { System . out . print ( "1 \n " ) ; } else { System . out . print ( "0 \n " ) ; } } System . out . println ( ) ; } }
import java . io . * ; public class GFG { static int nth_group ( int n ) { return n * ( 2 * pow ( n , 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( nth_group ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] min = new int [ n ] ; int [ ] max = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { min [ i ] = arr [ i ] ; max [ i ] = arr [ i ] ; } int [ ] ans = new int [ n ] ; int [ ] minSum = new int [ n ] ; int [ ] maxSum = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++
public class GFG { static int MAX = 1000000 ; static int maximumOccurredElement ( int L [ ] , int R [ ] , int n ) { int arr [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ L [ i ] ] ++ ; int msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] += arr [ i - 1 ] ; int msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] += arr [ i - 1 ] ; int msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] += arr [ i - 1 ] ; int sum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) sum += arr [ i ] ; int sum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) sum += arr [ i ] ; int sum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) sum += arr [ i ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { String t = sc . next ( ) ; if ( t . equals ( s ) ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n < 1 ) { System . out . println ( " Impossible " ) ; return ; } int min = Math . min ( n , m ) ; int max = Math . max ( n , m ) ; if ( m <= n ) { System . out . println ( min + " ▁ " + max ) ; return ; } System . out . println ( min + " ▁ " + max ) ; } }
import java . util . * ; public class GFG { static float func ( float x ) { return ( float ) ( 1 / ( 1 + x * x ) ) ; } static float calculate ( int lower_limit , int upper_limit , int interval_limit ) { float interval_size = ( upper_limit - lower_limit ) / interval_limit ; float sum = func ( lower_limit ) + func ( upper_limit ) ; for ( int i = 1 ; i <= interval_limit ; i ++ ) { if ( i % 3 == 0 ) sum = sum + 2 * func ( lower_limit + i * interval_size ) ; else sum = sum + 3 * func ( lower_limit + i * interval_size ) ; } return ( ( float ) ( 3 * interval_size ) / 8 ) * sum ; } public static void main ( String [ ] args ) { float interval_limit = 10 ; int lower_limit = 1 ; int upper_limit = 10 ; float integral_res = calculate ( lower_limit , upper_limit , interval_limit ) ; System . out . println ( " "
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( n <= k ) { ans = x * y ; } else { ans = k * x + ( n - k ) * y ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { double x = sc . nextDouble ( ) ; if ( x == 0 ) break ; double h = sc . nextDouble ( ) ; double l = sc . nextDouble ( ) ; double sqrt = Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( l , 2 ) ) ; double ans = ( ( sqrt * ( sqrt + 1 ) ) * ( sqrt + 1 ) ) / 2 ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int sum = 0 ; while ( k > 0 ) { sum += 9 ; k -- ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int MAX = 100000 ; static boolean prime [ ] = new boolean [ MAX ] ; static void sieve ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void printPrimeQuad ( int n ) { for ( int i = 0 ; i < n - 7 ; i ++ ) { if ( prime [ i ] && prime [ i + 2 ] && prime [ i + 6 ] && prime [ i + 8 ] ) System . out . println ( i + " ▁ " + i + " ▁ " + i + " ▁ " + i + 8 ) ; } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 20 ; printPrimeQuad ( n ) ; } }
public class GFG { static int MAX = 1000 ; static int maxSubsequenceSubstring ( char x [ ] , char y [ ] , int n , int m ) { int dp [ ] [ ] = new int [ MAX ] [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ; return ans ; } public static void main ( String [ ] args ) { char x [ ] = " ABCD " . toCharArray ( ) ; int y [ ] = " BAC
public class GFG { static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % a == 0 || i % b == 0 ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 , a = 3 , b = 5 ; System . out . println ( findSum ( n , a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] ) ; } } for ( int i = 0 ; i < n
public class GFG { static int MAX = 1000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { sequence [ i ] = 0 ; } for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j < MAX ; j ++ ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getNthTerm ( int n ) { return sequence [ n ] ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 6 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; } }
public class GFG { static int MAX = 10000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getCount ( int n ) { int count = 1 ; int i = n - 1 ; while ( sequence [ i + 1 ] != 0 ) { count ++ ; i = i - sequence [ i + 1 ] ; } return count ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
public class GFG { static int MAX = 10000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getCount ( int n ) { int nthTerm = sequence [ n - 1 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sequence [ i ] == nthTerm ) count ++ ; } return count ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
public class GFG { static int nthElement ( int a , int b , int n ) { int lcm = ( a * b ) / ( int ) Math . gcd ( a , b ) ; int l = 1 , r = Math . min ( a , b ) * n ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; int val = ( int ) ( mid / a ) + ( mid / b ) - ( mid / lcm ) ; if ( val == n ) return ( int ) Math . max ( ( int ) ( mid / a ) * a , ( int ) ( mid / b ) * b ) ; if ( val < n ) l = mid + 1 ; else r = mid - 1 ; } a = 5 ; b = 3 ; n = 5 ; System . out . println ( nthElement ( a , b , n ) ) ; } public static void main ( String [ ] args ) { int a = 5 , b = 3 , n = 5 ; System . out . println ( nthElement ( a , b , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = 1 ; dp [ i ] [ 1 ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( j == 0 ) { dp [ i ] [ j ] = 1 ; } else { dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i ] [ j - 1 ] ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] [ 0 ] == 1 ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] ; } } int [ ] [ ] c = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] ; } } int [ ] [ ] dp = new int [ n ] [ 3 ] ; dp
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int findValue ( int x , int y , int z ) { int g = __gcd ( y , z ) ; return ( x * g ) / __gcd ( x , g ) ; } public static void main ( String [ ] args ) { int x = 30 , y = 40 , z = 400 ; System . out . println ( " % d " ) ; System . out . println ( " % d " ) ; System . out . println ( findValue ( x , y , z ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int z1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int z2 = sc . nextInt ( ) ; int ans = 0 ; if ( a == 1 ) { ans = ( x1 + x2 ) / 2 ; } else if ( b == 1 ) { ans = ( y1 + y2 ) / 2 ; } else if ( c == 1 ) { ans = ( z1 + z2 ) / 2 ; } else if ( x1 > x2 ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String ans = " NO " ; if ( s . charAt ( 0 ) == t . charAt ( 0 ) && s . charAt ( 1 ) == t . charAt ( 1 ) && s . charAt ( 2 ) == t . charAt ( 2 ) ) { ans = " YES " ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int getMinimumOps ( int ar [ ] ) { int n = ar . length ; int small = Math . min ( ar [ 0 ] , ar [ 1 ] ) ; int large = Math . max ( ar [ 1 ] , ar [ 2 ] ) ; int dp [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math . abs ( ar [ 0 ] - j ) ; for ( int j = 0 ; j < small ; j ++ ) { min = Math . min ( min , dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = min + Math . abs ( ar [ i ] - j ) ; } dp [ i ] [ j ] = min + Math . abs ( ar [ i ] - j ) ; } int ans = 10 * dp [ n - 1 ] [ n - 1 ] ; for ( int j = 0 ; j < n ; j ++ )
import java . io . * ; public class GFG { static double PI = 3.14159265 ; static double area_leaf ( double a ) { return ( a * a * ( PI / 2 - 1 ) ) ; } public static void main ( String [ ] args ) { double a = 7 ; System . out . println ( area_leaf ( a ) ) ; } }
public class GFG { static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n / 2 ) - 1 ; else return 2 * removeAlternate ( ( ( n - 1 ) / 2 ) + 1 ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeAlternate ( n ) ) ; n = 10 ; System . out . println ( removeAlternate ( n ) ) ; } }
import java . util . * ; public class GFG { static void check ( int n , int m ) { if ( n == 2 || m == 2 || n % m == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int n = 9 , m = 9 ; check ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( m % 2 == 1 ) { if ( sum >= k ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } else { if ( sum >= k ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static int negProdSubArr ( int arr [ ] , int n ) { int positive = 1 , negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) arr [ i ] = 1 ; else arr [ i ] = - 1 ; if ( i > 0 ) arr [ i ] *= arr [ i - 1 ] ; if ( arr [ i ] == 1 ) positive ++ ; else negative ++ ; } return ( positive * negative ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out . println ( negProdSubArr ( arr , n ) ) ; } }
public class GFG { static int negProdSubArr ( int arr [ ] , int n ) { int positive = 1 , negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) arr [ i ] = 1 ; else arr [ i ] = - 1 ; if ( i > 0 ) arr [ i ] *= arr [ i - 1 ] ; if ( arr [ i ] == 1 ) positive ++ ; else negative ++ ; } return ( positive * negative ) ; } static int posProdSubArr ( int arr [ ] , int n ) { int total = ( n * ( n + 1 ) ) / 2 ; int cntNeg = negProdSubArr ( arr , n ) ; return ( total - cntNeg ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; while ( n > 0 ) { ans += ( n - k ) / k ; n -= k ; } System . out . println ( ans ) ; } } }
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) , a = in . nextInt ( ) , b = in . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += ( ( a % b ) / m ) ; a /= m ; } pw . println ( ans ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static int minRemove ( int arr [ ] , int n ) { int LIS [ ] = new int [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LIS [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ; } len = Math . max ( len , LIS [ i ] ) ; } return ( n - len ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 5 , 4 } ; int n = arr . length ; System . out . println ( minRemove ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void print_max ( int [ ] a , int n , int k ) { int max_upto [ ] = new int [ n ] ; int s [ ] = new int [ n ] ; s [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { while ( s [ i ] < s [ i - 1 ] ) { max_upto [ s [ i - 1 ] ] = i - 1 ; s [ i ] = s [ i - 1 ] + 1 ; } s [ i ] = s [ i - 1 ] + 1 ; } while ( s [ n - k + 1 ] < s [ k - 1 ] ) { s [ k - 1 ] = n - 1 ; s [ k - 1 ] = s [ k ] + 1 ; } for ( int i =
import java . util . * ; public class GFG { static int compute ( ) { int ans = 0 ; for ( int i = 0 ; i < 100 ; i ++ ) { ans = Math . max ( ans , ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int )
import java . util . * ; public class GFG { static int countWindowDistinct ( int win [ ] , int k ) { int dist_count = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int j = 0 ; while ( j < i ) { if ( win [ i ] == win [ j ] ) break ; else j ++ ; } if ( j == i ) { dist_count ++ ; } } return dist_count ; } static int countDistinct ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n - k + 1 ; i ++ ) { System . out . println ( countWindowDistinct ( arr [ i ] , k ) ) ; } return dist_count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 1 , 3 , 4 , 2 , 3 } ; int k = 4 ; int n = arr . length ; countDistinct ( arr , n , k ) ; } }
public class GFG { static int evenNumSubstring ( String str ) { int length = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < length ; i ++ ) { int temp = str . charAt ( i ) - '0' ; if ( temp % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String str = "1" ; int [ ] arr = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 31 , 37 , 39 , 41 , 43 , 44 , 45 , 46 , 47 , 58 , 59 , 61 , 67 , 69 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 , 81 ,
import java . util . * ; public class GFG { static int max = 4 ; static int countWays ( int index , int cnt , int dp [ ] [ ] , int n , int m , int k ) { if ( index == n ) { if ( cnt == k ) return 1 ; else return 0 ; } if ( dp [ index ] [ cnt ] != - 1 ) return dp [ index ] [ cnt ] ; int ans = 0 ; ans += countWays ( index + 1 , cnt , dp , n , m , k ) ; ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k ) ; dp [ index ] [ cnt ] = ans ; return dp [ index ] [ cnt ] ; } public static void main ( String [ ] args ) { int n = 3 , m = 3 , k = 2 ; int
import java . util . * ; public class GFG { static int getSum ( int n ) { int summ = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) summ += i ; else summ += n / i ; } } return summ - n ; } static void printAliquot ( int n ) { System . out . print ( n + " ▁ " ) ; HashSet < Integer > s = new HashSet < > ( ) ; s . add ( n ) ; int nextt = 0 ; while ( n > 0 ) { n = getSum ( n ) ; if ( s . contains ( n ) ) { System . out . print ( " Repeats ▁ with ▁ " + n ) ; break ; } nextt = nextt + 1 ; } System . out . print ( n + " ▁ " ) ; s . add ( n ) ; } public static void main ( String [ ] args
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] + 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == 0 ) { System . out . print ( 1 + " ▁ " ) ; } else { System . out . print ( 2 + " ▁ " ) ; } } System . out . println ( ) ; } }
import java . util . * ; public class GFG { static void reverseArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n / 2 ; i ++ ) { arr [ i ] = arr [ ( n + ~ i + 1 ) + ~ 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
public class GFG { static void printSeriesSum ( int N ) { int sum = 0 ; int a = 1 ; int cnt = 0 ; int flag = true ; sum += a ; while ( cnt < N ) { nextElement = null ; if ( flag ) nextElement = a * 2 ; sum += nextElement ; flag = ! flag ; } int a = nextElement ; int cnt = 1 ; System . out . println ( sum ) ; } public static void main ( String [ ] args ) { int N = 8 ; printSeriesSum ( N ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long gcd = gcd ( a , b ) ; long g = gcd ( a , b ) ; long ans = 0 ; if ( a % gcd == 0 ) { ans = a / gcd ; } else { ans = a * b / gcd ; } System . out . println ( ans ) ; } } static long gcd ( long a , long b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } }
public class GFG { static int sz = ( int ) 1e5 ; static boolean [ ] isPrime = new boolean [ sz +
public class GFG { static int getMaxLength ( int arr [ ] , int n ) { int start = 0 , preCnt = 0 ; while ( start < n && arr [ start ] == 1 ) { preCnt ++ ; start = start + 1 ; } int end = n - 1 ; int suffCnt = 0 ; while ( end >= 0 && arr [ end ] == 1 ) { suffCnt ++ ; end = end - 1 ; } int result = 0 ; while ( i <= end ) { if ( arr [ i ] == 1 ) { result = Math . max ( result , Math . max ( result , preCnt + suffCnt ) ) ; } else { result = Math . max ( result , preCnt + suffCnt ) ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count == n ? " YES " : " NO " ) ; } }
import java . util . * ; public class GFG { static int sqroot ( int s ) { int pSq = 0 ; int N = 0 ; for ( int i = 0 ; i < s ; i ++ ) { for ( int j = 1 ; j < i ; j ++ ) { if ( j * j == i ) { pSq = i ; N = j ; break ; } } if ( pSq > 0 ) break ; } int d = s - pSq ; int P = d / ( 2.0 * N ) ; int A = N + P ; int sqrt_of_s = A - ( ( P * P ) / ( 2.0 * A ) ) ; return sqrt_of_s ; } public static void main ( String [ ] args ) { int num = 9.2345 ; int sqroot_of_num = sqroot ( num ) ; System . out . println ( " Square ▁ root ▁ of ▁ " + num + " ▁ = ▁ " + sqroot_of_num + " �
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; if ( arr2 [ i ] % 2 == 0 ) { count ++ ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] > max ) { max = arr2 [ i ] ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int r = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( ( r | n ) == 0 ) break ; int [ ] [ ] map = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += arr [ i ] ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; System . out . println ( "0" ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( "0" ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static int maxAlternateSum ( int arr [ ] , int n ) { if ( n == 1 ) return arr [ 0 ] ; int dec [ ] = new int [ n + 1 ] ; int inc [ ] = new int [ n + 1 ] ; int dec [ ] = new int [ n + 1 ] ; int inc [ ] = new int [ n + 1 ] ; int dec [ ] = new int [ n + 1 ] ; int flag = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j
public class GFG { static void generateArr ( int arr [ ] , int n ) { if ( n == 1 ) { System . out . print ( arr [ 0 ] ) ; return ; } int arr [ ] = new int [ n ] ; arr [ 0 ] = arr [ 0 ] & arr [ 1 ] ; arr [ n - 1 ] = arr [ n - 1 ] & arr [ n - 2 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i - 1 ] & arr [ i + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; generateArr ( arr , n ) ; } }
public class GFG { static void ReplaceElements ( int arr [ ] , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev ^ arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev ^ arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } }
public class GFG { static void ReplaceElements ( int arr [ ] , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev + arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev + arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } }
import java . io . * ; public class GFG { static int countTriplets ( int A , int B , int C ) { int ans = 0 ; for ( int i = 1 ; i <= A ; i ++ ) { for ( int j = 1 ; j <= B ; j ++ ) { for ( int k = 1 ; k <= C ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } } return ans ; } public static void main ( String [ ] args ) { int A = 3 , B = 2 , C = 2 ; System . out . println ( countTriplets ( A , B , C ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 100000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int smallestPrime (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] * dp [ i - 1 ] [ j ] ) ; } } System . out . println ( dp [ n ] [ m ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int sum = n * ( n + 1 ) / 2 ; System . out . println ( sum ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; int [ ] arr = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } else { count = 0 ; break ; } } if ( count % 2 == 0 ) { System . out . println ( " First " ) ; } else { System . out . println ( " Second " ) ; } } }
public class GFG { static int reverse ( int n ) { int rev = 0 ; while ( n != 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n /= 10 ; } return rev ; } static void getSum ( int n ) { int n = reverse ( n ) ; int sumOdd = 0 ; sumEven = 0 ; int c = 1 ; while ( n != 0 ) { if ( c % 2 == 0 ) sumOdd ++ ; else sumEven ++ ; n /= 10 ; c += 1 ; } System . out . println ( " Sum ▁ odd ▁ = ▁ " + sumOdd ) ; System . out . println ( " Sum ▁ even ▁ = ▁ " + sumEven ) ; } public static void main ( String [ ] args ) { int n = 457892 ; getSum ( n ) ; } }
public class GFG { static int disp ( int row_no , int block ) { System . out . println ( row_no * block ) ; } static int row ( int ht , int h ) { return ht / h ; } static int calculate ( int l , int w , int h , int a , int ht ) { int no_block = ( 4 * a ) / l ; if ( h < w ) { row_no = row ( ht , w ) ; } else { row_no = row ( ht , h ) ; } disp ( row_no , no_block ) ; } public static void main ( String [ ] args ) { int l = 50 , w = 20 , h = 35 ; int a = 700 , ht = 140 ; calculate ( l , w , h , a , ht ) ; } }
import java . util . * ; public class GFG { static String maxFreq ( String s ) { int binary = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) binary += bin [ ( int ) s . charAt ( i ) - '0' ] ; binary = binary . substring ( 0 , binary . length ( ) - 1 ) ; int count = 1 ; int prev = - 1 ; for ( int i = 0 ; i < binary ; i ++ ) { if ( binary . charAt ( i ) == '1' ) count ++ ; prev = j ; } return count ; } public static void main ( String [ ] args ) { String octal = "13" ; System . out . println ( maxFreq ( octal ) ) ; } }
import java . util . * ; public class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } static String encryptString ( String s , int n , int k ) { String [ ] cv = new String [ n ] ; int cc = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cv [ i ] = s .
import java . io . * ; public class GFG { static int harmonicMean ( int arr [ ] , int freq [ ] , int n ) { int sm = 0 ; int frequency_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sm = sm + freq [ i ] / arr [ i ] ; frequency_sum = frequency_sum + freq [ i ] ; } return ( int ) Math . round ( frequency_sum / sm , 4 ) ; } public static void main ( String [ ] args ) { int num [ ] = { 13 , 14 , 15 , 16 , 17 } ; int freq [ ] = { 2 , 5 , 13 , 7 , 3 } ; int n = num . length ; System . out . println ( " { : . 4 f } " . format ( harmonicMean ( num , freq , n ) ) ) ; } }
import java . io . * ; public class GFG { static double polyarea ( int n , int a ) { if ( a < 0 && n < 0 ) return - 1 ; double A = ( a * a * n ) / ( 4 * Math .tan ( ( 180 / n ) * Math . PI / 180 ) ) ; return A ; } public static void main ( String [ ] args ) { int a = 9 ; int n = 6 ; System . out . println ( " { : . 3 f } " . format ( polyarea ( n , a ) ) ) ; } }
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int lcm ( int a , int b ) { return ( a / __gcd ( a , b ) * b ) ; } static int getMinValue ( int c ) { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= Math . pow ( c , 1 / 2 ) ; i ++ ) { if ( c % i == 0 && lcm ( i , c / i ) == c ) ans = Math . min ( ans , Math . max ( i , c / i ) ) ; } return ans ; } public static void main (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int M = sc . nextInt ( ) ; int N = sc . nextInt ( ) ; if ( M + N == 0 ) break ; int [ ] [ ] p = new int [ M + N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { p [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ M + 1 ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( j + 1 < N ) { dp [ i + 1 ] [ j + 1 ] = dp [ i ] [ j + 1 ] + p [ i ] [ j ] ; } else { dp [ i + 1 ] [ j ] = dp [ i ] [ j ] + p [ i ] [ j + 1 ] ; } } } System . out . println ( dp [ N ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( a > 31 ) { ans = 31 ; } else if ( a < 30 ) { ans = 30 ; } else if ( a < 31 ) { ans = 31 ; } else { ans = 32 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = arr [ i ] ; arr [ i ] = arr2 [ i ] + 1 ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < m ; i ++ ) { ans [ arr2 [ i ] ] = ans [ arr2 [ i ] ] + 1 ; } System . out . println ( ans [ 0 ] + " ▁ " + ans [ m - 1 ] ) ; } } }
import java . io . * ; public class GFG { static int findIndex ( int n ) { int fibo = 2.078087 * Math . log ( n ) + 1.672276 ; return ( int ) Math . round ( fibo ) ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( findIndex ( n ) ) ; } }

public class GFG { static int minSwaps ( String s1 , String s2 ) { int c0 = 0 , c1 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == '0' && s2 . charAt ( i ) == '1' ) c0 ++ ; else if ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '0' ) c1 ++ ; } int ans = c0 / 2 + c1 / 2 ; if ( c0 % 2 == 0 && c1 % 2 == 0 ) return ans ; else if ( ( c0 + c1 ) % 2 == 0 ) return - 1 ; else return - 1 ; } public static void main ( String [ ] args ) { String s1 = "0011" ; String s2 = "1111" ; int ans = minSwaps ( s1 , s2 ) ; System . out .

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } int left = 0 ; int right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { right = i ; break ; } } if ( right == 0 ) { System . out . println ( " left " ) ; } else { System . out . println ( " right " ) ; } } }
public class GFG { static void normalSieve ( int n ) { int [ ] prime = new int [ n / 2 ] ; for ( int i = 3 ; i * i < n ; i += 2 ) prime [ i / 2 ] = 1 ; for ( int j = 0 ; j < n ; j += i * 2 ) prime [ j / 2 ] = 1 ; System . out . print ( 2 + " ▁ " ) ; for ( int i = 3 ; i < n ; i += 2 ) { if ( prime [ i / 2 ] == 0 ) System . out . print ( i + " ▁ " ) ; else System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int n = 100 ; normalSieve ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= 48 && s . charAt ( i ) <= 57 ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int frequencyOfSmallest ( int n , int arr [ ] ) { int mn = arr [ 0 ] ; int freq = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < mn ) { mn = arr [ i ] ; freq = 1 ; } else if ( arr [ i ] == mn ) { freq ++ ; } } return freq ; } public static void main ( String [ ] args ) { int N = 5 ; int arr [ ] = { 3 , 2 , 3 , 4 , 4 , 4 } ; System . out . println ( frequencyOfSmallest ( N , arr ) ) ; } }
public class GFG { static boolean isSubArray ( int A [ ] , int B [ ] , int n , int m ) { int i = 0 ; int j = 0 ; while ( i < n && j < m ) { if ( A [ i ] == B [ j ] ) { i ++ ; j ++ ; if ( j == m ) return true ; } else { i = i - j + 1 ; j = 0 ; } } return false ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 3 , 0 , 5 , 1 , 1 , 2 } ; int n = A . length ; int B [ ] = { 3 , 0 , 5 , 1 } ; int m = B . length ; if ( isSubArray ( A , B , n , m ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += Math . abs ( arr [ i ] - arr [ i + 1 ] ) + 1 ; arr [ i ] = arr [ i + 1 ] ; } System . out . println ( ans ) ; } }
public class GFG { static int calculateSum ( int n , int k ) { int res = 1 ; int MOD = 1000000007 ; for ( int i = 0 ; i < k ; i ++ ) res = ( res * n ) % MOD ; return res ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; System . out . println ( calculateSum ( n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( i + 1 ) % n ; } } int [ ] [ ] cnt = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { cnt [ i ] [ j ] = ( cnt [ i - 1 ] [ j ] + dp
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; sum += a * n ; } System . out . println ( sum / n + 0.5 ) ; } }
public class GFG { static int MAX = 100 ; static int binomialCoeff ( int n , int k ) { int C [ ] = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = Math . min ( i , k ) ; j <= Math . max ( i , k ) ; j ++ ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; } static int sumOfproduct ( int n ) { return binomialCoeff ( 2 * n , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfproduct ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String ans = " Yes " ; if ( s . equals ( t ) ) { ans = " No " ; } else { if ( s . length ( ) != t . length ( ) ) { ans = " No " ; } else { ans = " Yes " ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int pairCount ( int arr [ ] , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_val ) max_val = arr [ i ] ; } int prime [ ] = new int [ max_val + 1 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int count = 0 ; for (
import java . util . * ; public class GFG { static int getPrime ( int arr [ ] , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] > max_val ) max_val = arr [ i ] ; } int prime [ ] = new int [ max_val + 1 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int maximum = - 1 ; for ( int i = 0 ; i < n ; i ++

import java . util . * ; public class GFG { static void findElements ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
public class GFG { static void printDistinct ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { while ( i < n - 1 && ( arr [ i ] == arr [ i + 1 ] ) ) i ++ ; } else { System . out . print ( arr [ i ] + " ▁ " ) ; } } arr = new int [ 6 ] ; System . out . print ( arr [ 6 ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; int n = arr . length ; printDistinct ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a * b ) ; } }
public class GFG { static int nth_term ( int a [ ] , int b [ ] , int n ) { int z = 0 ; if ( n % 6 == 1 ) z = a [ 0 ] ; else if ( n % 6 == 2 ) z = b [ 0 ] ; else if ( n % 6 == 3 ) z = b - a [ 0 ] ; else if ( n % 6 == 4 ) z = - a [ 0 ] ; if ( n % 6 == 0 ) z = - ( b - a [ 0 ] ) ; return z ; } public static void main ( String [ ] args ) { int a [ ] = { 10 , b [ ] , n } ; int nth_term ( int a [ ] , int b [ ] , int n ) { int z = 0 ; if ( n % 6 == 1 ) z = a [ 0 ] ; else if ( n % 6 == 2 ) z = b [ 0 ] ; else if ( n % 6 == 3 ) z = b - a [ 0 ] ; else if ( n % 6 == 4 ) z = - a [ 0 ] ; if ( n % 6 == 0 ) z = - ( b - a [ 0 ] ) ; return z ; } } }
public class GFG { static int findSubSequence ( String s , int num ) { int res = 0 ; int i = 0 ; while ( num > 0 ) { if ( num % 2 == 1 ) res += s . charAt ( i ) - '0' ; i ++ ; num = num >> 1 ; } return res ; } static int combineSum ( String s ) { int n = s . length ( ) ; int c_sum = 0 ; int ran = ( 1 << n ) - 1 ; for ( int i = ran + 1 ; i <= n ; i ++ ) c_sum += findSubSequence ( s , i ) ; return c_sum ; } public static void main ( String [ ] args ) { String s = "123" ; System . out . println ( combineSum ( s ) ) ; } }
import java . io . * ; public class GFG { static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 , dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumCost ( a , n ) ) ; } }
import java . io . * ; public class GFG { static int countMultiples ( int n ) { return n / 3 + n / 7 - n / 21 ; } public static void main ( String [ ] args ) { int n = ( int ) ( countMultiples ( 25 ) ) ; System . out . println ( " Count ▁ = ▁ " + n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] freq = new int [ 26 ] ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; freq [ c - ' a ' ] ++ ; if ( freq [ c - ' a ' ] > max ) { max = freq [ c - ' a ' ] ; } } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int c = s . charAt ( i ) ; if ( freq [ c - ' a ' ] > max ) { max = freq [ c - ' a ' ] ; ans = i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= 500 ) { ans += a [ i ] - a [ i + 1 ] ; } else { ans += a [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Solution { public String toHex ( int num ) { if ( num == 0 ) return "0" ; int mp = '0123456789abcdef ' ; int ans = ' ' ; for ( int i = 0 ; i < 8 ; i ++ ) { int n = num & 15 ; int c = mp [ n ] ; ans = c + ans ; num = num >> 4 ; } return ans . lstrip ( '0' ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int num = 26 ; int out = sObj . toHex ( num ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i + 1 ] ) { count ++ ; } } if ( count < arr [ n - 1 ] ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } } }
public class GFG { static String longestString ( String str1 , String str2 ) { int count1 [ ] = new int [ 26 ] ; int count2 [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) count1 [ str1 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) count2 [ str2 . charAt ( i ) - ' a ' ] ++ ; String result = " " ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 1 ; j < Math . min ( count1 [ i ] , count2 [ i ] ) + 1 ; j ++ ) result = result + ( char ) ( ' a ' ) + i ; } System . out . println ( result ) ; return result ; } public static void main ( String [ ] args ) { String str1 = " geeks " ; String str2 = " cake " ; longestString ( str1 , str2 ) ; } }
import java . util . * ; public class GFG { static int msb ( int x ) { int ret = 0 ; while ( ( x >> ( ret + 1 ) ) != 0 ) ret += 1 ; return ret ; } static

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) dp [ i ] [ j ] = sc . nextInt ( ) ; int [ ] [ ] dp2 = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1
import java . util . * ; public class GFG { static void findTime ( int T , int K ) { int minutes = ( ( T - T ) * 10 + T ) * 60 + T ; int hour = ( int ) ( minutes / 60 ) % 24 ; int min = minutes % 60 ; if ( hour < 10 ) { System . out . print ( 0 + hour + " : " ) ; } else { System . out . print ( hour + " : " ) ; } if ( min < 10 ) { System . out . print ( 0 + min ) ; } else { System . out . print ( min ) ; } } public static void main ( String [ ] args ) { int T = 21 ; int K = 43 ; findTime ( T , K ) ; } }
public class GFG { static int maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = Integer . MIN_VALUE , maxSum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - m ; i ++ ) { int product = 1 , sum = 0 ; for ( int j = i ; j < m + i ; j ++ ) { product = product * ( str . charAt ( j ) - '0' ) ; sum = sum + ( str . charAt ( j ) - '0' ) ; } maxProd = Math . max ( maxProd , product ) ; maxSum = Math . max ( maxSum , sum ) ; } System . out . println ( " Maximum ▁ Product ▁ = ▁ " + maxProd ) ; System . out . println ( " Maximum ▁ Sum ▁ = ▁ " + maxSum ) ; return maxProd ; } public static void main ( String [ ] args ) { String str = "3675356291" ; int m = 5 ; int maxProductSum = Integer
import java . util . * ; public class GFG { static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( n < 0 || m < 0 ) return Integer . MAX_VALUE ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } static int min ( int x , int y , int z ) { if ( x < y ) return x ; else if ( x < z ) return y ; else return z ; } public static void main ( String [ ] args ) { int x = 3 , y = 8 , z = 1 ; System . out . println ( minCost ( Arrays . stream ( cost ) . mapToInt ( Integer :: parseInt ) . min ( ) . getAsInt ( ) , Arrays . stream ( cost ) . mapToInt ( Integer :: parseInt ) . min ( )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += arr [ j ] ; } min = Math . min ( min , sum ) ; } System . out . println ( min ) ; } }

public class GFG { static int sumDivisibles ( int A , int B , int M ) { int sum = 0 ; for ( int i = A ; i <= B ; i ++ ) { if ( i % M == 0 ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int A = 6 , B = 15 , M = 3 ; System . out . println ( sumDivisibles ( A , B , M ) ) ; } }
import java . util . * ; public class GFG { static int countNumbersWith4 ( int n ) { if ( n < 4 ) return 0 ; int d = ( int ) Math . log10 ( n ) ; int a [ ] = new int [ d + 1 ] ; a [ 0 ] = 0 ; if ( n > 1 ) a [ 1 ] = 1 ; for ( int i = 2 ; i <= d ; i ++ ) a [ i ] = a [ i - 1 ] * 9 + ( int ) Math . ceil ( Math . pow ( 10 , i - 1 ) ) ; int p = ( int ) Math . ceil ( Math . pow ( 10 , d ) ) ; int msd = n / p ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += arr [ i ] % 1000000007 ; arr [ i ] = arr [ i + 1 ] % 1000000007 ; } System . out . println ( ans % 1000000007 ) ; } }
public class GFG { static int INT_MIN = - 2 * Math . min ( - 2 * Math . max ( 0 , - 2 * n ) ) ; static int INT_MAX = 2 * Math . max ( 0 , - 2 * n ) ; static int findPostOrderUtil ( int pre [ ] , int n , int minval , int maxval , int preIndex ) { if ( preIndex [ 0 ] == n ) return ; if ( pre [ preIndex [ 0 ] ] < minval || pre [ preIndex [ 0 ] ] > maxval ) return ; int val = pre [ preIndex [ 0 ] ] ; preIndex [ 0 ] ++ ; findPostOrderUtil ( pre , n , minval , val , preIndex ) ; findPostOrderUtil ( pre , n , val , maxval , preIndex ) ; System . out . println ( val + " ▁ " ) ; } static int findPostOrder ( int pre [ ] , int n , int min
import java . util . * ; public class GFG { static int countWays ( int n , int arr [ ] , int k ) { if ( k <= 0 || k >= n ) return 0 ; Set < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) s . add ( arr [ i ] ) ; if ( s . size ( ) <= k ) return 0 ; return s . size ( ) - k ; } public static void main ( String [ ] args ) { int arr [ ] = { 100 , 200 , 400 , 50 } ; int k = 3 ; int n = arr . length ; System . out . println ( countWays ( n , arr , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( s . charAt ( i - 1 ) == '1' ) { dp [ i ] [ j
public class GFG { static boolean isPrime ( int n ) { boolean flag = true ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) flag = false ; i ++ ; } return ( flag == true ) ; } static boolean isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } static int countInterestingPrimes ( int n ) { int answer = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( isPrime ( i ) != null ) { int j = 1 ; while ( j * j * j * j <= i ) { if ( isPerfectSquare ( i - j * j * j * j ) ) answer ++ ; j ++ ; } } } return answer ; } public static void main
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b [ i ] [ j ] == 0 ) { ans ++ ; } } } if ( ans == 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static int findNum ( int div [ ] , int rem [ ] , int N ) { int num = rem [ N - 1 ] ; int i = N - 2 ; while ( i >= 0 ) { num = num * div [ i ] + rem [ i ] ; i -= 1 ; } return num ; } public static void main ( String [ ] args ) { int div [ ] = { 8 , 3 } ; int rem [ ] = { 2 , 2 } ; int N = div . length ; System . out . println ( findNum ( div , rem , N ) ) ; } }
public class GFG { static void segregate0and1 ( int arr [ ] , int size ) { int type0 = 0 , type1 = size - 1 ; while ( type0 < type1 ) { if ( arr [ type0 ] == 1 ) { arr [ type0 ] = arr [ type1 ] ; arr [ type1 ] = arr [ type0 ] ; type1 -- ; } else { type0 ++ ; } } arr = new int [ arr . length ] ; System . arraycopy ( arr , 0 , arr , 0 , arr . length ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 1 , 0 , 1 , 1 , 1 , 1 } ; int arr_size = arr . length ; segregate0and1 ( arr , arr_size ) ; System . out . print ( " Array ▁ after ▁ segregation ▁ is ▁ " + arr_size + " \n " ) ; for ( int i = 0 ; i < arr_size ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int x = Math . abs ( s . charAt ( 0 ) - t . charAt ( 0 ) ) ; int y = Math . abs ( s . charAt ( 1 ) - t . charAt ( 1 ) ) ; int z = Math . abs ( s . charAt ( 2 ) - t . charAt ( 2 ) ) ; int x1 = Math . abs ( s . charAt ( 0 ) - t . charAt ( 0 ) ) ; int y1 = Math . abs ( s . charAt ( 1 ) - t . charAt ( 1 ) ) ; int z1 = Math . abs ( s . charAt ( 2 ) - t . charAt ( 2 ) ) ; int x2 = Math . abs ( s . charAt ( 0 ) - t . charAt ( 0 ) ) ; int y2 = Math . abs ( s . charAt ( 1 ) - t . charAt ( 1 ) ) ; int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp2 = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { dp2 [ i ] [ j ] = dp [ i ] [ j ] + dp [ i - 1 ] [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( j == 0 ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } else { dp2 [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } } for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( j == 0 ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } else { dp2 [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b [ i ] [ j ] == 1 || b [ i ] [ j ] == 0 ) { flag = true ; break ; } } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = 0 ; if ( a % 2 == 0 ) { c = a / 2 ; } else { c = a / 2 + 1 ; } if ( b % 2 == 0 ) { c = b / 2 ; } else { c = b / 2 + 1 ; } System . out . println ( c ) ; System . out . println ( c ^ c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; ans [ i ] = sum ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { ans [ i ] = sum ; } } System . out . println ( ans [ n - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int a = sc . nextInt ( ) ; int en = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( en == - 1 && b == - 1 ) break ; int ans = 0 ; if ( en == - 1 && b == - 1 ) { ans = a + b ; } else if ( en == - 1 && b == - 1 ) { ans = a * b ; } else if ( en == - 1 && b == - 1 ) { ans = a - b ; } else if ( en == - 1 && b == - 1 ) { ans = a * b + b ; } else if ( en == - 1 && b == - 1 ) { ans = a * b + a ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int cur = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { cur = arr [ i + 1 ] - arr [ i ] ; if ( cur < 0 ) { ans [ i ] = cur ; } else { ans [ i ] = cur + 1 ; } cur = arr [ i + 1 ] - arr [ i ] ; } System . out . println ( ans [ n - 1 ] ) ; } }
public class GFG { static int MAX = 256 ; static int countPairs ( String s ) { int cnt [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) cnt [ s . charAt ( i ) - ' a ' ] ++ ; int ans = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) ans += cnt [ i ] * cnt [ i ] ; return ans ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( countPairs ( s ) ) ; } }
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ i ] == true ) { for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) { prime [ i ] = false ; } } } } } } static void sortedArray ( int arr [ ]
import java . util . * ; public class GFG { static int createHash ( int [ ] arr , int maxElement ) { int prev , curr = 0 , 1 ; int hash1 = prev ; int [ ] arr = new int [ maxElement ] ; while ( curr <= maxElement ) { int temp = curr + prev ; if ( temp <= maxElement ) arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr ] ] ] ] ] ] ] ] ] ++ ; prev = curr ; curr = temp ; } arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr [ arr
import java . io . * ; public class GFG { static float find_Area ( float a ) { float R = a * ( 2.0 - Math . sqrt ( 2 ) ) ; float area = 3.14 * R * R / 2.0 ; return area ; } public static void main ( String [ ] args ) { float a = 4 ; System . out . println ( " Area ▁ of ▁ semicircle ▁ = ▁ " + find_Area ( a ) ) ; } }
import java . util . * ; public class GFG { static int findQuadruples ( int a [ ] , int b [ ] , int c [ ] , int d [ ] , int x , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int l = 0 ; l < n ; l ++ ) { if ( ( a [ i ] ^ b [ j ] ^ c [ k ] ^ d [ l ] ) == x ) count ++ ; } } } } return count ; } public static void main ( String [ ] args ) { int x = 3 , a [ ] = { 0 , 1 } , b [ ] = { 2 , 1 } , c [ ] = { 0 , 1 } , d [ ] = { 0 , 1 } , n = a . length ; System . out . println ( findQuadruples ( a , b , c , d , x , n ) ) ; } }
import java . util . * ; public class GFG { static void findSmallest ( String s , int q [ ] [ ] , int m ) { int N = s . length ( ) ; int H [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { H [ i ] [ s . charAt ( i - 1 ) - ' a ' ] ++ ; for ( int j = 0 ; j < N ; j ++ ) { H [ i ] [ j ] ++ ; } } for ( int j = 0 ; j < N ; j ++ ) { H [ i ] [ j ] += H [ i - 1 ] [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . min ( a [ i ] , b [ j ] ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 3 == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ arr [ i ] ] = n / arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ arr [ i ] ] + " ▁ " ) ; } System . out . println ( ) ; } }
import java . util . * ; public class GFG { static void printPairs ( int arr [ ] , int n ) { Vector < Integer > v = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( arr [ i ] ) == Math . abs ( arr [ j ] ) ) { v . add ( Math . abs ( arr [ i ] ) ) ; } } if ( v . size ( ) == 0 ) return ; v . sort ( Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) System . out . print ( v . get ( i ) + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , - 4 , 1 , - 1 , - 8 , - 9 } ; int n = arr . length ; printPairs ( arr , n ) ; } }
import java . io . * ; public class GFG { static double factorial ( int n ) { if ( n == 0 || n == 1 ) return 1 ; return n * doublefactorial ( n - 2 ) ; } public static void main ( String [ ] args ) { System . out . println ( " Double ▁ factorial ▁ is ▁ " + factorial ( 5 ) ) ; } }
public class GFG { static boolean isPalindrome ( String str ) { int l = 0 , h = str . length ( ) - 1 ; while ( h > l ) { if ( str . charAt ( l ) != str . charAt ( h ) ) return false ; l ++ ; h -- ; } return true ; } static int minRemovals ( String str ) { if ( str . charAt ( 0 ) == ' ' ) return 0 ; if ( isPalindrome ( str ) ) return 1 ; return 2 ; } public static void main ( String [ ] args ) { String str = "010010" ; System . out . println ( minRemovals ( str ) ) ; System . out . println ( minRemovals ( str ) ) ; } }
import java . util . * ; public class GFG { static int sumOfSubstrings ( String num ) { int n = num . length ( ) ; int sumofdigit [ ] = new int [ n ] ; sumofdigit [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { numi = num . charAt ( i ) ; sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ; } return sumofdigit [ 0 ] ; } public static void main ( String [ ] args ) { String num = "1234" ; System . out . println ( sumOfSubstrings ( num ) ) ; } }
public class GFG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * ( a / n ) * ( b / n ) ; ans += ( a / n ) * ( b % n ) ; ans += ( a % n ) * ( b / n ) ; ans += ( ( ( a % n ) + ( b % n ) ) / n ) ; return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 , n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int LIMIT = 1000000 ; private static int maxnumer = 0 , maxdenom = 1 ; public String run ( ) { int n = 0 ; int maxnumer = 0 ; int maxdenom = 1 ; for ( int d = 1 ; d <= LIMIT ; d ++ ) { n = d * 3 / 7 ; if ( d % 7 == 0 ) { n -- ; } if ( n * maxnumer > d * maxnumer ) { maxnumer = n ; maxdenom = d ; } } return Integer . toString ( maxnumer ) ; } }
import java . util . * ; public class GFG { static int [ ] c = new int [ 100 ] ; static int coef ( int n ) { c [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { c [ 1 + i ] = 1 ; for ( int j = i ; j < n ; j ++ ) { c [ j ] = c [ j - 1 ] - c [ j ] ; } c [ 0 ] = - c [ 0 ] ; } } static boolean isPrime ( int n ) { int coef = 0 ; int [ ] c = new int [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) { coef += ( ( n - 1 ) * ( i + 1 ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { coef += ( ( n - 1 ) * ( i + 1 ) ) ; } return coef < 0 ; } public static void main ( String [ ] args ) { int n = 37 ; if (
public class GFG { static int count_greater ( int arr [ ] , int n ) { int min = Integer . MAX_VALUE ; int counter = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > min ) counter ++ ; if ( arr [ i ] <= min ) min = arr [ i ] ; } return counter ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 2 , 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( count_greater ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] - x <= 0 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { ans ++ ; } } if ( ans == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int t = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; if ( t == 0 && d == 0 && l == 0 ) break ; int [ ] [ ] a = new int [ t ] [ d ] ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < t ; i ++ ) { int x = 0 ; for ( int j = 0 ; j < d ; j ++ ) { if ( a [ i ] [ j ] > a [ j + 1 ] [ i ] ) { x = a [ i ] [ j ] ; } } if ( x < d ) { ans += x - d ; } else { ans += x - d + 1 ; } } System . out . println ( ans ) ; } } }
public class GFG { static int minimumSwaps ( int arr [ ] ) { int count = 0 ; int i = 0 ; while ( i < arr . length ) { if ( arr [ i ] != i + 1 ) { while ( arr [ i ] != i + 1 ) { int temp = 0 ; temp = arr [ arr [ i ] - 1 ] ; arr [ arr [ arr [ i ] - 1 ] = arr [ i ] ; arr [ i ] = temp ; count ++ ; } } i ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 1 , 5 } ; System . out . println ( minimumSwaps ( arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] ans2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; ans2 [ i ] = ans [ i ] * arr [ i ] ; } int [ ] ans2a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans2a [ i ] = ans [ i ] * arr [ i ] ; ans2a [ i ] = ans2a [ i ] * arr [ i ] ; } int [ ] ans2b = new int [ n ] ; for ( int i = 0 ; i <
import java . util . * ; public class GFG { static void findUniquePair ( int arr [ ] , int n ) { int XOR = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) XOR ^= arr [ i ] ; int set_bit_no = XOR & ~ ( XOR - 1 ) ; int x = 0 ; int y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & set_bit_no ) { x = x ^ arr [ i ] ; } else { y = y ^ arr [ i ] ; } } System . out . println ( " The ▁ unique ▁ pair ▁ is ▁ ( " + x + " , ▁ " + y + " , ▁ " + x + " , ▁ " + y + " ) " + sep = " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 1 , 3 , 5 , 1 , 3 , 7 , 6 } ; int n = arr . length ; findUniquePair ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + 1 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } System . out . println ( ans [ 0 ] + " ▁ " + ans [ n - 1 ] ) ; } } }
import java . util . * ; public class GFG { static boolean isMajority ( int a [ ] ) { Vector < Integer > mp = new Vector < Integer > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( mp . contains ( a [ i ] ) ) mp . add ( a [ i ] ) ; else mp . add ( a [ i ] ) ; } for ( int x : mp ) { if ( mp . contains ( x ) ) return true ; } return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 9 , 2 , 2 } ; System . out . println ( " Yes " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ w + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { if ( j < dp [ i ] [ j ] ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - dp [ i ] [ j ] ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - dp [ i ] [ j - dp [ i - 1 ] [ j - dp [ i - 1 ] [ j - dp [ i - 1 ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double [ ] x = new double [ n ] ; double [ ] y = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextDouble ( ) ; y [ i ] = sc . nextDouble ( ) ; } double [ ] [ ] dp = new double [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . atan2 ( y [ i ] , x [ j ] ) ; } } double ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += dp [ i ] [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans += dp [ i ] [ 1 ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void printKMissing ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int i = 0 ; while ( i < n && arr [ i ] <= 0 ) i ++ ; int count = 0 ; int curr = 1 ; while ( count < k && i < n ) { if ( arr [ i ] != curr ) { System . out . print ( curr + " ▁ " ) ; count ++ ; } else { i ++ ; } curr = curr + 1 ; } while ( count < k ) { System . out . print ( curr + " ▁ " ) ; curr ++ ; count ++ ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 } ; int n = arr . length ; int k = 3 ; printKMissing ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static void printNumbers ( int a [ ] , int n ) { HashMap < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; for ( int j = 1 ; j * j <= num ; j ++ ) { if ( j * j > num ) break ; if ( mpp . containsKey ( j ) ) { mpp . put ( j , mpp . get ( j ) + 1 ) ; } if ( ( num / j ) != j ) mpp . put ( num / j , mpp . get ( num / j ) + 1 ) ; } int maxi = 0 ; for ( Map . Entry < Integer , Integer > entry : mpp . entrySet ( ) ) maxi = Math . max ( maxi , entry . getValue ( ) ) ; for (
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = s . substring ( s . length ( ) - 1 ) ; System . out . println ( t . equals ( s ) ? " : " : t . equals ( s . replaceAll ( " a " , " " ) ) ? " : " : " : " " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 1000001 ; int idx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; idx = i ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == max ) { ans ++ ; } } System . out . println ( idx ) ; } }
public class GFG { static boolean checkIfStartsWithCapital ( String str ) { if ( str . charAt ( 0 ) >= ' A ' && str . charAt ( 0 ) <= ' Z ' ) return true ; else return false ; } static boolean check ( String str ) { if ( str . charAt ( 0 ) >= ' A ' && str . charAt ( 0 ) <= ' Z ' ) return true ; else return false ; } public static void main ( String [ ] args ) { String str = " Geeksforgeeks " ; check ( str ) ; str = " geeksforgeeksforgeeks " ; check ( str ) ; } }
public class GFG { static int getAvg ( int prev_avg , int x [ ] , int n ) { return ( ( prev_avg * n + x [ n ] ) / ( n + 1 ) ) ; } static int streamAvg ( int arr [ ] , int n ) { int avg = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( avg , arr [ i ] , i ) ; System . out . println ( "Average ▁ of ▁ " + i + " ▁ numbers ▁ is ▁ " + " { : . 1 f } " . format ( avg ) ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; int streamAvg ( arr , n ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int LIMIT = 100_000_000 ; public String run ( ) { int sum = 0 ; int [ ] primes = new int [ LIMIT + 1 ] ; for ( int i = 0 ; i < primes . length ; i ++ ) { primes [ i ] = 999999 ; } for ( int i = 0 ; i < primes . length ; i ++ ) { sum += primes [ i ] ; primes [ i ] = 1 ; for ( int j = i + 1 ; j < primes . length ; j ++ ) { sum += primes [ j ] ; primes [ j ] = 1 ; if ( sum >= primes . length ) break ; if ( isprime ( sum ) && primes [ sum ] > consecutive ) { sum = sum ; consecutive = true ; } } } return Integer . toString ( sum ) ; } private static final int LIMIT = 100_000_000 ; public String run ( ) { int sum = 0 ; int [ ] primes = new int [ LIMIT + 1 ] ; for ( int i = 0 ; i < primes . length ; i ++
import java . util . * ; public class GFG { static int lis ( int arr [ ] , int n ) { int i , j , maxm = 0 , i , j , max ; lst = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && lst [ i ] < lst [ j ] + 1 ) { lst [ i ] = lst [ j ] + 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( maxm < lst [ i ] ) maxm = lst [ i ] ; } return maxm ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 } ; int n = arr . length ; System . out . println ( " Length ▁ of ▁ lst ▁ is ▁ " + lis ( arr , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( ( a + b ) * ( c + d ) == ( a + b ) * ( c + d ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class GFG { static int fix ( int [ ] A ) { Set < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) s . add ( A [ i ] ) ; for ( int i = 0 ; i < A . length ; i ++ ) { if ( s . contains ( A [ i ] ) ) { A [ i ] = - 1 ; } else { A [ i ] = - 1 ; } } return A [ A . length - 1 ] ; } public static void main ( String [ ] args ) { int [ ] A = { - 1 , - 1 , 6 , 1 , 9 , 3 , 2 , - 1 , 4 , - 1 } ; System . out . println ( fix ( A ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = Math . abs ( a - b ) ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( i == j ) continue ; int now = 0 ; for ( int t = 0 ; t < 4 ; t ++ ) { if ( t == i || t == j ) now += a ; else now -= a ; } if ( Math . abs ( now ) < ans ) ans = Math . abs ( now ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node next ; Node prev ; Node next ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; if ( n == 0 && s == 0 ) break ; int [ ] [ ] dp
import java . util . * ; public class GFG { static long fact ( long n ) { long res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static long nCr ( long n , long r ) { return fact ( n ) / ( fact ( r ) * fact ( n - r ) ) ; } static long powmod ( long a , long n ) { if ( n == 0 ) return 1 ; long pt
public class GFG { static int MAX = 1000001 ; static int MAX = 1000001 ; static int SieveOfEratosthenes ( ) { int [ ] isPrime = new int [ MAX ] ; isPrime [ 0 ] = 1 ; isPrime [ 1 ] = 0 ; for ( int i = 2 ; i < MAX ; i ++ ) { if ( isPrime [ i ] == 1 ) { for ( int j = i * 2 ; j < MAX ;
public class GFG { static int countOperations ( int n ) { int i = 2 ; while ( ( i * i ) < n && ( n % i ) > 0 ) i ++ ; if ( ( i * i ) > n ) i = n ; return ( 1 + ( n - i ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countOperations ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < q ; i ++ ) { int l = sc . nextInt ( ) - 1 ; int r = sc . nextInt ( ) - 1 ; System . out . println ( dp [ l ] [ r ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; System . out . println ( l * 2 ) ; } } }
import java . util . * ; public class GFG { static int LIMIT = 5000 ; static int MODULUS = 10 ; static int count [ ] = new int [ LIMIT ] ; static int count [ ] [ ] = new int [ LIMIT ] [ LIMIT ] ; public static void compute ( ) { int MODULUS = 1000000007 ; int count [ ] [ ] = new int [ LIMIT ] [ LIMIT ] ; for ( int i = 0 ; i < LIMIT ; i ++ ) { for ( int j = 0 ; j < LIMIT ; j ++ ) { count [ i ] [ j ] = ( count [ i ] [ j ] + count [ i ] [ j ] ) % MODULUS ; } } int isprime = Library . listPrimality ( LIMIT ) ; int ans = sum ( count [ i ] ) ; int ans = count [ i ] ; if ( isprime == isprime ) { ans = ( ans + MODULUS ) % MODULUS ; } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int countOddNumber ( int row_num ) { int count = 0 ; while ( row_num != 0 ) { count += row_num & 1 ; row_num >>= 1 ; } return ( 1 << count ) ; } static void gouldSequence ( int n ) { for ( int row_num = 0 ; row_num != 0 ; row_num >>= 1 ) System . out . print ( countOddNumber ( row_num ) + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 16 ; gouldSequence ( n ) ; } }
public class GFG { static void findMin ( int V ) { int deno [ ] = new int [ V ] ; int n = V - 1 ; while ( n >= 0 ) { deno [ n ] = deno [ n - 1 ] ; n -- ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( deno [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 93 ; System . out . print ( " Following ▁ is ▁ minimal ▁ number " + " of ▁ change ▁ for ▁ " + n + " ▁ : ▁ " ) ; findMin ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == a [ i + 1 ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
public class GFG { static int count ( int arr [ ] , int n , int x ) { if ( x == 1 ) { int ans = ( int ) Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) count ++ ; } int ans = ( int ) Math . pow ( 2 , count ) - 1 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 5 } ; int n = arr . length ; int x = 1 ; System . out . println ( count ( arr , n , x ) ) ; } }
public class GFG { static int findEle ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == sum - arr [ i ] ) return arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 6 } ; int n = arr . length ; System . out . println ( findEle ( arr , n ) ) ; } }
public class GFG { static int findExtraCharacter ( char strA [ ] , char strB [ ] ) { int m1 = { 0 , 1 } ; for ( int i = 0 ; i < strB . length ; i ++ ) { if ( i == 0 ) { m1 [ i ] ++ ; } else { m1 [ i ] = 1 ; } } for ( int i = 0 ; i < strA . length ; i ++ ) { m1 [ i ] -- ; } for ( int h1 = 0 ; h1 < m1 . length ; h1 ++ ) { if ( m1 [ h1 ] == 1 ) { return h1 ; } } return 0 ; } public static void main ( String [ ] args ) { char strA [ ] = ' abcd ' . toCharArray ( ) ; char strB [ ] = ' cbdad ' . toCharArray ( ) ; System . out . println ( findExtraCharacter ( strA , strB ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] == 0 ) continue ; if ( a [ i ] [ j ] == 1 ) { max = Math . max ( max , a [ i ] [ j ] ) ; } } } System . out . println ( max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans [ count ] = 1 ; } else { ans [ count ] = 0 ; } count ++ ; } if ( count == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int maxSumPair ( int arr1 [ ] , int n1 [ ] , int arr2 [ ] , int n2 [ ] ) { int max1 = Integer . MIN_VALUE , max2 = Integer . MIN_VALUE ; for ( int i = 0 ; i < n1 . length ; i ++ ) { if ( arr1 [ i ] > max1 ) { max1 = arr1 [ i ] ; } } for ( int i = 0 ; i < n2 . length ; i ++ ) { if ( arr2 [ i ] > max2 ) { max2 = arr2 [ i ] ; } } return max1 + max2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 3 } ; int arr2 [ ] = { 3 , 4 , 7 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) ; } }
import java . util . * ; public class GFG { static void operations ( int op [ ] , int n , int k ) { int i , count = 0 , nVal = 0 , min = 10 * 60 * 60 , i ; int minimum = 100000 ; for ( i = 0 ; i < n ; i ++ ) { nVal += op [ i ] ; minimum = Math . min ( minimum , nVal ) ; if ( ( k + nVal ) <= 0 ) return ( i + 1 ) ; } if ( nVal >= 0 ) return - 1 ; int times = ( k - Math . abs ( minimum ) ) / Math . abs ( nVal ) ; k = ( k - ( times * Math . abs ( nVal ) ) ) ; count = ( times * n ) ; while ( k > 0 ) { for ( i = 0 ; i < n ; i ++ ) { k = k + op [ i ] ; count += 1 ; if ( k <= 0 ) break ;
public class GFG { static int [ ] pref = new int [ 100010 ] ; static int isPerfectCube ( int x ) { int cr = ( int ) Math . round ( x * Math . pow ( Math . sqrt ( x ) , 3 ) ) ; int rslt = x * Math . pow ( Math . sqrt ( x ) , 3 ) ; return rslt ; } static void printSum ( int L , int R ) { int sum = pref [ R ] - pref [ L - 1 ] ; System . out . println ( sum + " ▁ " ) ; } public static void main ( String [ ] args ) { compute ( ) ; int Q = 4 ; int arr [ ] = { 1 , 10 } , arr [ 1 ] = { 1 , 100 } , arr [ 2 ] = { 2 , 25 } , arr [ 4 , 50 ] = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { printSum ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ; } } int [ ] [ ] dp2 = new int [ n + 1 ] [ n + 1 ] ; for ( int i
import java . io . * ; public class GFG { static int centered_cube ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( n + " th ▁ Centered ▁ cube ▁ number : ▁ " + centered_cube ( n ) ) ; n = 10 ; System . out . println ( n + " th ▁ Centered ▁ cube ▁ number : ▁ " + centered_cube ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; } int [ ] arr3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr3 [ i ] = arr2 [ i ] ; } int [ ] arr4 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr4 [ i ] = arr3 [ i ] ; } int [ ] arr5 = new int [ n ]
public class GFG { static int nthTerm ( int N ) { int nth = 0 ; for ( int i = 0 ; i < N ; i ++ ) nth += ( int ) Math . pow ( i , i ) ; return nth ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) { pow = pow * x ; } return ( pow == y ) ; } public static void main ( String [ ] args ) { int x = 1 ; int y = 1 ; if ( isPower ( 10 , 1 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 1 , 20 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; } }
public class GFG { static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) { pow = pow * x ; } return ( pow == y ) ; } public static void main ( String [ ] args ) { int x = 1 , y = 1 ; if ( isPower ( 10 , 1 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 1 , 20 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; } }
public class GFG { static int minimumValue ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int answer = 0 ; for ( int i = 0 ; i < k ; i ++ ) answer += arr [ i ] * arr [ i ] ; return answer * ( 2 * k - 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 21 , 5 , 3 , 8 } ; int k = 3 ; int n = arr . length ; System . out . println ( minimumValue ( arr , n , k ) ) ; } }

public class GFG { static int countWays ( int N ) { int E = ( N * ( N - 1 ) ) / 2 ; if ( N == 1 ) return 0 ; return ( int ) Math . pow ( 2 , E - 1 ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( countWays ( N ) ) ; } }
public class GFG { static int findLCM ( int arr [ ] , int n ) { int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) lcm = ( lcm * arr [ i ] ) / Math . gcd ( arr [ i ] , lcm ) ; return lcm ; } static int countNumbers ( int arr [ ] , int n , int l , int r ) { int lcm = ( int ) findLCM ( arr , n ) ; int count = ( r / lcm ) - ( ( l - 1 ) / lcm ) ; System . out . println ( count ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 } ; int n = arr . length ; int l = 1 , r = 10 ; int countNumbers ( arr , n , l , r ) ; System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int min = a [ 0 ] ; int max = a [ n - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } else { min
import java . util . * ; public class GFG { static int MinDeletion ( int a [ ] , int n ) { Map < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { map . put ( a [ i ] , map . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } int ans = 0 ; for ( Map . Entry < Integer , Integer > entry : map . entrySet ( ) ) { int x = entry . getKey ( ) ; int frequency = entry . getValue ( ) ; if ( x <= frequency ) ans += ( frequency - x ) ; else ans += frequency ; } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 2 , 3 , 4 , 4 , 4 , 5 } ; int n = a . length ; System . out . println ( MinDeletion ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int fromStart ( char [ ] inp , int del11 ) { int inp1 = inp [ 0 ] ; int inp2 = inp [ del11 - 1 ] ; return inp1 + inp2 ; } static int fromEnd ( char [ ] inp , int del1 ) { inp1 = inp [ 0 ] ; inp [ del1 - 1 ] = inp [ del1 - 1 ] ; return inp1 + inp2 ; } static void print ( int num_d ) { int num_e = 0 ; for ( int i = 0 ; i < inp . length ; i ++ ) { num_e += inp [ i ] - '0' ; } System . out . println ( num_e ) ; } public static void main ( String [ ] args ) { char [ ] inp = { ' a ' , ' b ' , ' c ' , ' d ' , ' e ' , ' f ' , ' g ' , ' h ' , ' i ' , ' j ' , ' k ' , ' l ' , ' m ' , ' n ' , ' o ' , ' p ' , ' q ' , ' r ' , ' s ' , ' t
public class GFG { static int nondecdigits ( int n ) { int x = 0 ; for ( int x = 0 ; x < n ; x ++ ) { int no = x ; int flag = true ; while ( no != 0 ) { if ( ( no % 10 ) == 11 ) { flag = false ; break ; } no /= 10 ; } if ( flag == true ) break ; } return x ; } public static void main ( String [ ] args ) { int n = 200 ; System . out . println ( nondecdigits ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = Math . abs ( a - b ) + Math . abs ( c - d ) ; if ( ans == - 1 ) { ans = Math . abs ( a - b ) + Math . abs ( c - d ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Math . min ( n , m ) ; int max = Math . max ( n , m ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { ans = i ; min = arr [ i ] ; } } if ( ans < k ) { System . out . println ( " Ciel " ) ; } else { System . out . println ( " Hanako " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans [ i ] = 0 ; } else { ans [ i ] = 1 ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] == 1 ) { System . out . print ( " B " ) ; } else { System . out . print ( " W " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { max = Math . max ( max , arr [ i ] ) ; min = Math . min ( min , arr [ i ] ) ; } else { if ( arr [ i ] == 1 ) { min = Math . min ( min , arr [ i ] ) ; } else { max = Math . max ( max , arr [ i ] ) ; } } } System . out . println ( max - min ) ; } }
import java . util . * ; public class GFG { static int countDistictSubarray ( int arr [ ] , int n ) { HashMap < Integer , Integer > vis = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) vis . put ( arr [ i ] , 1 ) ; int k = arr . length ; int vid [ ] = new int [ k ] ; int ans = 0 ; int right = 0 ; int window = 0 ; for ( int left = 0 ; left < n ; left ++ ) { while ( right < n && window < k ) { if ( vis . get ( arr [ right ] ) == 1 ) { ans ++ ; right ++ ; } else { vid [ arr [ right ] ] ++ ; if ( vid [ arr [ right ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; max = Math . max ( max , a + b ) ; } System . out . println ( max ) ; } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; } return true ; } static int primeBitsInRange ( int l , int r ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { int tot_bit = bin ( i ) . count ( '1' ) ; if ( isPrime ( tot_bit ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int l = 6 , r = 10 ; System . out . println ( primeBitsInRange ( l , r ) ) ; } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int pairs ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = countSetBits ( arr [ i ] ) + countSetBits ( arr [ j ] ) ; if ( sum == k ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 4 ; System . out . println ( pairs ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans ++ ; } } if ( ans % 2 == 1 ) { System . out . println ( " errorgorn " ) ; } else { System . out . println ( " maomao90 " ) ; } } } }
public class GFG { static int xorCalc ( int k ) { if ( k == 1 ) return 2 ; if ( ( ( k + 1 ) & k ) == 0 ) return k / 2 ; return 1 ; } public static void main ( String [ ] args ) { int k = 31 ; System . out . println ( xorCalc ( k ) ) ; } }
public class Solution { public boolean isPerfectSquare ( int num ) { int low = 1 , high = num ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int midSquare = mid * mid ; if ( midSquare == num ) return true ; else if ( midSquare < num ) low = mid + 1 ; else high = mid - 1 ; } return false ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int num = 16 ; int out = sObj . isPerfectSquare ( num ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( ( a + b + c ) - ( a + b + c ) == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; ans [ i ] = sum ; } for ( int i = 0 ; i < n ; i ++ ) { if ( sum - arr [ i ] >= 0 ) { ans [ i ] = sum - arr [ i ] ; } } System . out . println ( ans [ n - 1 ] ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] > 0 ) { ans += d [ i ] ; } } System . out . println ( ans ) ; } }
public class GFG { static int findElement ( int arr [ ] , int ranges [ ] , int rotations , int index ) { for ( int i = 0 ; i < rotations - 1 ; i ++ ) { int left = ranges [ i ] [ 0 ] ; int right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) { if ( index == left ) { index = right ; } else { index = index - 1 ; } } } return arr [ index ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int rotations = 2 ; int ranges [ ] = { 0 , 2 } ; int index = 1 ; System . out . println ( findElement ( arr , ranges , rotations , index ) ) ; } }

import java . util . * ; public class GFG { static boolean isExists ( int a [ ] , int n ) { int freq [ ] = new int [ a [ 0 ] ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; sum += a [ i ] ; } if ( sum % 2 == 0 ) { if ( freq [ sum / 2 ] == 1 ) return true ; } return false ; } public static void main ( String [ ] args ) { int a [ ] = { 5 , 1 , 2 , 2 } ; int n = a . length ; if ( isExists ( a , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static float areaOfKite ( float d1 , float d2 ) { float area = ( d1 * d2 ) / 2 ; return area ; } public static void main ( String [ ] args ) { float d1 = 4 , d2 = 6 ; System . out . println ( " Area ▁ of ▁ Kite ▁ = ▁ " + areaOfKite ( d1 , d2 ) ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n % 2 == 0 ) { n /= 2 ; } if ( n == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static boolean productEqual ( int n ) { if ( n < 10 ) return false ; int prodOdd = 1 ; prodEven = 1 ; while ( n > 0 ) { int digit = n % 10 ; prodOdd *= digit ; n = n / 10 ; if ( n == 0 ) break ; digit = n % 10 ; prodEven *= digit ; n = n / 10 ; } if ( prodOdd == prodEven ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 4324 ; if ( productEqual ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; String s = sc . next ( ) ; int i = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) >= ' a ' && s . charAt ( i ) <= ' z ' ) { if ( s . charAt ( i ) >= ' a ' && s . charAt ( i ) <= ' z ' ) { if ( s . charAt ( i ) >= ' a ' && s . charAt ( i ) <= ' z ' ) { System . out . print ( s . charAt ( i ) ) ; System . out . print ( ' ▁ ' ) ; System . out . print ( s . charAt ( i ) ) ; System . out . print ( ' ▁
public class GFG { static void checkEVENodd ( int arr [ ] , int n , int l , int r ) { if ( arr [ r ] == 1 ) { System . out . println ( " odd " ) ; } else { System . out . println ( " even " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 1 } ; int n = arr . length ; checkEVENodd ( arr , n , 1 , 3 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( x - r < 0 || y - r < 0 || x + r > w || y + r > h ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } static int findPrime ( int n ) { int num = n + 1 ; while ( num > 0 ) { if ( isPrime ( num ) ) return num ; num ++ ; } return 0 ; } static int minNumber ( int arr [ ] ) { int s = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { s += arr [ i ] ; } if ( isPrime ( s ) ) return 0 ; int num = findPrime ( s ) ; return num - s ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 12 } ; System . out . println ( minNumber ( arr ) ) ; } }
import java . util . * ; public class GFG { static int compositeProduct ( int arr [ ] , int n ) { int max_val = Math . max ( arr [ 0 ] , arr [ 1 ] ) ; int prime [ ] = new boolean [ max_val + 1 ] ; prime [ 0 ] = true ; prime [ 1 ] = true ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == false ) product *= arr [ i ] ; } return product ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( compositeProduct ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x == 0 && y == 0 ) break ; int [ ] [ ] map = new int [ x + 1 ] [ y + 1 ] ; for ( int i = 1 ; i <= x ; i ++ ) { for ( int j = 1 ; j <= y ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } Arrays . sort ( map ) ; System . out . println ( map [ 0 ] [ map [ 1 ] ] + " ▁ " + map [ 1 ] [ map [ 0 ] ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n == 1 ) { System . out . println ( " JAPANESE " ) ; } else if ( n == 2 ) { System . out . println ( " KOREAN " ) ; } else { System . out . println ( " JAPANESE " ) ; } } } }
import java . util . * ; public class GFG { static int findSum ( int arr [ ] , int n , int left , int right ) { int k = right - left ; int d = arr [ 1 ] - arr [ 0 ] ; int ans = arr [ left - 1 ] * ( k + 1 ) ; ans = ans + ( d * ( k * ( k + 1 ) ) ) / 2 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 } ; int queries = 3 ; int q [ ] = { 2 , 4 } , [ 2 , 6 } , { 5 , 6 } ; int n = arr . length ; for ( int i = 0 ; i < queries ; i ++ ) System . out . println ( findSum ( arr , n , q [ i ] [ 0 ] , q [ i ] [ 1 ] ) ) ; } }
public class GFG { static int maxResult ( int n , int a , int b , int c ) { int maxVal = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { for ( int j = 0 ; j < n - i + 1 ; j ++ ) { int z = ( n - ( i + j ) ) / c ; if ( ( int ) Math . floor ( z ) == ceil ( z ) ) { int x = i / a ; int y = j / b ; maxVal = Math . max ( maxVal , x + y + int ( z ) ) ; } } } return maxVal ; } public static void main ( String [ ] args ) { int n = 10 , a = 5 , b = 3 , c = 4 ; System . out . println ( maxResult ( n , a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 1 ; i < n ; i ++ ) { System . out . println ( arr [ i ] ) ; } } }
import java . util . * ; public class GFG { static int fact ( int n ) { int ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) ans = ans * i ; return ans ; } static int numberOfPossiblePallindrome ( String str , int n ) { HashMap < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( str . charAt ( i ) , mp . getOrDefault ( str . charAt ( i ) , 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { cnt ++ ; } } System . out . println ( cnt ) ; } }
public class GFG { static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } public static void main ( String [ ] args ) { int n = 107 ; int m = 4 ; System . out . println ( toggleLastMBits ( n , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' ) count ++ ; else count -- ; } if ( count > 0 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static String first_substring ( String s ) { int n = s . length ( ) ; int c = 0 ; int mpp [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ▁ ' || s . charAt ( i ) == ' # ' ) { mpp [ s . charAt ( i ) ] = 1 ; c = i + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ▁ ' )
public class GFG { static int countConsecutive ( int n ) { String s = n ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 44522255 ; System . out . println ( countConsecutive ( n ) ) ; } }
public class GFG { static void findAngle ( int n ) { int perimeter = 360 / n ; perimeter = Math . max ( perimeter , 360 / n ) ; System . out . println ( " Outer ▁ angle : ▁ " + perimeter ) ; System . out . println ( " Exterior ▁ angle : ▁ " + perimeter ) ; } public static void main ( String [ ] args ) { int n = 10 ; findAngle ( n ) ; } }
public class GFG { static int nDigitPerfectSquares ( int n ) { System . out . print ( ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n - 1 ) ) ) , 2 ) + " ▁ " ) ; System . out . print ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n ) ) - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; nDigitPerfectSquares ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int len = s . length ( ) ; int ans = 0 ; for ( int i = 0 ; i < len ; i ++ ) { char c = s . charAt ( i ) ; if ( c == ' ▁ ' ) { ans ++ ; } } if ( ans > len ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' b ' || s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' b ' ) { count ++ ; } } System . out . println ( count ) ; System . out . println ( s ) ; } }


import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = s . charAt ( j ) - ' J ' + 1 ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { a [ i ] [ j ] = a [ i ] [ j + 1 ] ; max = Math . max ( max , a [ i ] [ j ] ) ; } } } System . out . println ( max ) ; }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while (
import java . util . * ; public class GFG { static int nonDecNums ( int n ) { int a [ ] [ ] = new int [ 10 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { a [ 0 ] [ i ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] [ 9 ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 8 ; j <= n ; j ++ ) { a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } return a [ n ] [ 0 ] ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( " Non - decreasing ▁ digits ▁ = ▁ " + nonDecNums ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % n != 0 ) { ans [ i ] = 1 ; break ; } else { count ++ ; } } if ( count == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Solution { public int minMoves ( int [ ] nums ) { if ( nums . length == 0 ) return 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] == 0 ) continue ; min = Math . min ( min , nums [ i ] ) ; } return min ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 } ; int out = sObj . minMoves ( nums ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a <= 0 && b <= 0 ) { System . out . println ( " Zero " ) ; } else if ( a < 0 && b < 0 ) { System . out . println ( " Negative " ) ; } else { System . out . println ( " Positive " ) ; } } }
public class GFG { static int firstSetBit ( int n ) { int x = n & ( n - 1 ) ; return ( n ^ x ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( firstSetBit ( n ) ) ; } }
public class GFG { static int MAX_CHAR = 256 ; static int maximumChars ( String str ) { int n = str . length ( ) ; int res = - 1 ; int firstInd = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { firstInd = firstInd [ str . charAt ( i ) ] ; if ( firstInd == - 1 ) firstInd [ str . charAt ( i ) ] = i ; else res = Math . max ( res , Math . abs ( i - first_ind - 1 ) ) ; } return res ; } public static void main ( String [ ] args ) { String str = " abba " ; System . out . println ( maximumChars ( str ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; int y = arr [ i ] ; if ( x < y ) { max = Math . max ( x , y ) ; min = Math . min ( x , y ) ; } else { if ( x > y ) { x = y ; } else { y = x ; } } } System . out . println ( max - min ) ; } }
import java . io . * ; public class GFG { static float findArea ( float a ) { float area = 5 * ( float ) Math . sqrt ( 3 ) * a * a * a ; return area ; } static float findVolume ( float a ) { float volume = ( float ) ( ( 5 / 12 ) * ( 3 + Math . sqrt ( 5 ) ) * a * a * a ) ; return volume ; } public static void main ( String [ ] args ) { float a = 5 ; System . out . println ( " Area : ▁ " + " { : . 2 f } " . format ( findArea ( a ) ) ) ; System . out . println ( " Volume : ▁ " + " { : . 2 f } " . format ( findVolume ( a ) ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long ans = 0 ; if ( n % 2 == 0 ) { ans = n / 2 ; } else { ans = n / 2 + 1 ; } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int solve ( int M , int N , int s ) { if ( N % s == 0 ) { N = N / s ; } else { N = ( N / s ) + 1 ; } if ( M % s == 0 ) { M = M / s ; } else { M = ( M / s ) + 1 ; } return M * N ; } public static void main ( String [ ] args ) { int N = 12 , M = 13 , S = 4 ; System . out . println ( solve ( M , N , S ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } static int countPairs ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( lcm ( arr [ i ] , arr [ j ] ) == gcd ( arr [ i ] , arr [ j ] ) ) ans ++ ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } int [ ] b = new int [ n ] ; int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; sum2 += b [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum - sum2 >= a [ i ] ) { ans ++ ; } } if ( ans == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int _popcnt32 ( int number ) { int counter = 0 ; while ( number > 0 ) { if ( number % 2 == 1 ) counter ++ ; number = number / 2 ; } return counter ; } static int maximize ( int a ) { int n = _popcnt32 ( a ) ; int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) res |= ( 1 << ( 32 - i ) ) ; return Math . abs ( res ) ; } public static void main ( String [ ] args ) { int a = 1 ; System . out . println ( maximize ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 = sc . nextInt ( ) ; int a2 = sc . nextInt ( ) ; int ans = 0 ; if ( a1 == 1 && a2 == 1 ) { ans = 0 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 1 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 2 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 3 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 4 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 5 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 6 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 7 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 8 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 9 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 10 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 11 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 12 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 13 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 14 ; } else if ( a1 == 1 && a2 == 1 ) { ans =
import java . util . * ; public class Solution { public int [ ] xorQueries ( int [ ] arr , int queries [ ] ) { int [ ] pref = new int [ arr . length ] ; for ( int i = 0 ; i < arr . length ; i ++ ) pref [ i ] = arr [ i ] ^ pref [ arr . length - 1 ] ; int ans [ ] = new int [ arr . length ] ; for ( int l = 0 ; l < arr . length ; l ++ ) ans [ l ] = pref [ l ] ^ pref [ arr . length - 1 ] ; return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] arr = { 1 , 3 , 4 , 8 } ; int queries [ ] = { 0 , 1 } ; int out = sObj . xorQueries ( arr , queries ) ; System . out . println ( out ) ; } }
public class GFG { static String encodedChar ( String str , int k ) { int exp = 0 ; int i = 0 ; while ( i < str . length ( ) ) { String temp = " " ; exp = 0 ; while ( i < str . length ( ) && str . charAt ( i ) >= ' a ' && str . charAt ( i ) <= ' z ' ) { temp += str . charAt ( i ) ; i ++ ; } while ( i < str . length ( ) && str . charAt ( i ) >= '1' && str . charAt ( i ) <= '9' ) { exp = exp * 10 + str . charAt ( i ) - '0' ; i ++ ; } for ( int j = 1 ; j < exp ; j ++ ) { exp = exp * 10 + str . charAt ( j ) - '0
public class GFG { static void printPossible ( int a , int b , int c ) { if ( ( a + b + c ) % 2 != 0 || a + b < c ) System . out . println ( " NO " ) ; else System . out . println ( " YES " ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 , c = 2 ; printPossible ( a , b , c ) ; } }
public class GFG { static int summation ( int n ) { int abs_sum = n * ( n + 1 ) / 2 ; int sign = 1 ; if ( ( n + 1 ) % 2 == 0 ) { sign = 1 ; } int result_sum = sign * Math . abs_sum ; return result_sum ; } public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( summation ( N ) ) ; } }
import java . util . * ; public class GFG { static void sortSquare ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] * arr [ i ] ; Arrays . sort ( arr ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 6 , - 3 , - 1 , 2 , 4 , 5 } ; int n = arr . length ; System . out . println ( " Before ▁ sort ▁ " + arr [ n ] ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; sortSquare ( arr , n ) ; System . out . print ( " After ▁ sort ▁ " + arr [ n ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] - 1 < t ) { ans = 1 ; break ; } } if ( ans == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { ans [ i ] = 2 ; count ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == 0 ) { ans [ i ] = 1 ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static boolean isTriangular ( int num ) { if ( num < 0 ) return false ; int c = ( int ) Math . sqrt ( num ) ; int b = 1 , a = 1 ; int d = ( int ) Math . sqrt ( num ) ; if ( d < 0 ) return false ; int root1 = ( int ) Math . floor ( d ) ; int root2 = ( int ) Math . sqrt ( d ) ; if ( root1 > 0 && ( Math . floor ( root1 ) == root1 ) ) return true ; if ( root2 > 0 && ( Math . floor ( root2 ) == root2 ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 55 ; if ( isTriangular ( n ) ) System . out . println ( " The ▁ number ▁ is ▁ a ▁ triangular ▁ number " ) ; else
import java . util . * ; public class GFG { static void printNumberWithDR ( int k , int d ) { if ( d == 0 && k != 1 ) System . out . print ( - 1 + " ▁ " ) ; else System . out . print ( d + " ▁ " ) ; k -- ; while ( k > 0 ) { System . out . print ( 0 + " ▁ " ) ; k -- ; } } public static void main ( String [ ] args ) { int k = 4 , d = 4 ; printNumberWithDR ( k , d ) ; } }
public class GFG { static void rotateMatrix ( int mat [ ] [ ] , int i , int j ) { int i = i - 1 , j = j - 1 ; while ( i >= 0 ) { int k = i - 1 , l = j - 1 ; while ( k >= 0 ) { System . out . print ( mat [ i ] [ j ] + " ▁ " ) ; k -- ; j -- ; } System . out . print ( ) ; i = i - 1 ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; rotateMatrix ( mat ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( n % 500 ) ; } }
import java . util . * ; public class GFG { static int getProduct ( int n ) { int product = 1 ; while ( n != 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } return product ; } public static void main ( String [ ] args ) { int n = 4513 ; System . out . println ( getProduct ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int b = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; if ( t == 0 ) break ; int coins = ( b * 5 + r * 3 + s ) * ( 15 - 2 ) ; int coins_common = ( b * 5 + r * 3 ) * ( 15 - 2 ) ; int coins_common_common = ( 15 - 2 ) * 3 ; int coins_common_common = ( 100 - t ) * 3 ; int coins_common_common = ( 100 - c ) * 3 ; int coins_common_common_common = ( 100 - s ) * 3 ; int coins_common_common_common = ( 100 - g ) * 3 ; int coins_common_common_common = ( 100 - c ) * 3 ; int coins_common_common_common = ( 100 - s ) * 3 ; int coins_common_common_common = ( 100 - c ) * 3 ; int coins_common_common_common = ( 100 - g ) * 3 ; int coins_common_common_common = ( 100 - c ) * 3 ; int coins_common_common_common = ( 100 - s ) * 3 ; int coins_common_common_common = ( 100 - c ) * 3 ; int coins_common_common_common = ( 100 - c ) * 3 ; int coins_common_common
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = 1 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) % mod ; } } System . out . println ( dp [ n ] [ n ] ) ; } }
import java . io . * ; public class GFG { static double PI = 3.14159265 ; static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { double r = 7 ; System . out . println ( length_rope ( r ) ) ; } }
public class GFG { static int reverseDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } static boolean isPalindrome ( int n ) { int rev_n = reverseDigits ( n ) ; if ( rev_n == n ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 4562 ; if ( isPalindrome ( n ) == 1 ) System . out . println ( " Is ▁ " + n + " ▁ Palindrome ▁ number ? ▁ - > ▁ " + " ▁
import java . util . * ; public class Solution { public int addStrings ( String num1 , String num2 ) { int res [ ] = new int [ num1 . length ( ) ] ; int pos1 = 0 , pos2 = 0 ; int carry = 0 ; while ( pos1 >= 0 ) { pos1 -- ; carry = 0 ; while ( pos2 >= 0 ) { carry = carry + ( num1 . charAt ( pos1 ) - '0' ) ; if ( carry > 0 ) { carry = ( num1 . charAt ( pos1 ) - '0' ) ; } res [ pos1 ] ++ ; pos2 -- ; } } return res [ 0 ] ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String num1 = "11" ; String num2 = "123" ; int out = s
import java . util . * ; public class GFG { static boolean isPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) sum += i + n / i ; } return ( sum == n && n != 1 ) ; } public static void main ( String [ ] args ) { int n = 2 ; for ( int i = 10000 ; i >= 0 ; i -- ) { if ( isPerfect ( n ) ) System . out . println ( n + " ▁ is ▁ a ▁ perfect ▁ number " ) ; } } }
import java . util . * ; public class GFG { static boolean isPower ( int n ) { if ( n <= 1 ) return true ; for ( int x = 2 ; x <= ( int ) Math . sqrt ( n ) ; x ++ ) { int p = x ; while ( p <= n ) { p = p * x ; if ( p == n ) return true ; } } return false ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . print ( " Case ▁ # " + ( n + 1 ) + " : ▁ " ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( isPower ( i ) ) System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; } }
import java . util . * ; public class GFG { static boolean isPower ( int n ) { if ( n == 1 ) return true ; for ( int x = 2 ; x <= ( int ) Math . sqrt ( n ) ; x ++ ) { int y = 2 ; int p = ( int ) ( Math . pow ( x , y ) ) ; while ( p <= n && p > 0 ) { if ( p == n ) return true ; y = y + 1 ; p = Math . pow ( x , y ) ; } } return false ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( " Case ▁ # " + n + " : ▁ " ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( isPower ( i ) ) System . out . print ( i + " ▁ " ) ; } } }
public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static void findTwoNumbers ( int sum , int gcd ) { if ( __gcd ( gcd , sum - gcd ) == gcd && sum != gcd ) { System . out . println ( " a ▁ = ▁ " + Math . min ( gcd , sum - gcd ) + " , ▁ b ▁ = ▁ " + Math . min ( sum - gcd , sum - gcd ) ) ; } else System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { int sum = 8 ; int gcd = 2 ; findTwoNumbers ( sum , gcd ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int rb = sc . nextInt ( ) ; int cd = sc . nextInt ( ) ; int rd = sc . nextInt ( ) ; int cb = sc . nextInt ( ) ; int cd = sc . nextInt ( ) ; int r = rb + cd + rd + cb + cd ; System . out . println ( r ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = Math . max ( n / a , n / b ) * c ; int y = Math . max ( n / c , n / d ) * d ; System . out . println ( x * y ) ; } }
import java . util . * ; public class GFG { static int totalPairs ( int arr [ ] , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = Integer . parseInt ( arr [ i ] ) ; int m [ ] = new int [ x ] ; for ( int j = 0 ; j < x ; j ++ ) { m [ j ] = m . get ( x , 0 ) + 1 ; } int result = 0 ; for ( int it = 0 ; it < m . size ( ) ; it ++ ) { result += ( m [ it ] * ( m [ it ] - 1 ) ) / 2 ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 5 , 3 , 9 , 1 , 2 } ; int n = arr . length ; System . out . println ( totalPairs ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int center_hexadecagonal_num ( int n ) { return 8 * n * n - 8 * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( n + " th ▁ centered ▁ hexadecagonal ▁ " + " number ▁ : ▁ " + center_hexadecagonal_num ( n ) ) ; n = 12 ; System . out . println ( n + " th ▁ centered ▁ hexadecagonal ▁ " + " number ▁ : ▁ " + center_hexadecagonal_num ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , h * 2 + s * 2 + d * 2 ) ; } } int min = Math . min ( dp [ 0 ] [ 0 ] , dp [ 0 ] [ 1 ] ) ; int max = Math . max ( dp [ 0 ] [ 0 ] , dp [ 0 ] [ 2 ] ) ; int ans = n * min + ( max - min ) * ( max - min ) ; System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) { K = 0 ; } int totalnumbers = R - L + 1 ; int factor9 = totalnumbers / 9 ; int rem = totalnumbers % 9 ; int ans = factor9 ; for ( int i = R ; i <= R - rem ; i ++ ) { rem1 = i % 9 ; if ( rem1 == K ) { ans ++ ; } } return ans ; } public static void main ( String [ ] args ) { int L = 10 , R = 22 , K = 3 ; System . out . println ( countNumbers ( L , R , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; System . out . println ( solve ( a , b , c , d , e , f ) ) ; } sc . close ( ) ; } static int solve ( int a , int b , int c , int d , int e , int f ) { int min = Math . min ( a , d ) ; int ans = min * min ; int min2 = Math . min ( b , c ) ; int min3 = Math . min ( e , f ) ; int min4 = Math . min ( a , b ) ; int min5 = Math . min ( c
import java . util . * ; public class Solution { public int Solve ( int [ ] A ) { int ans = 2 ; int n = A . length ; Arrays . sort ( A ) ; for ( int j = n - 2 ; j >= 0 ; j -- ) { int i = j - 1 ; int k = j + 1 ; while ( i >= 0 && k < n ) { if ( A [ i ] + A [ k ] == 2 * A [ j ] ) { ans = Math . max ( ans , k ) ; ans = Math . max ( ans , k ) ; i -= 1 ; k += 1 ; } else if ( A [ i ] + A [ k ] < 2 * A [ j ] ) { k ++ ; } else { i -- ; } } } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] A = { 9 , 4 ,
import java . util . * ; public class GFG { static int minimumChanges ( int arr [ ] , int n , int d ) { int maxFreq = Integer . MIN_VALUE ; int freq [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int a0 = arr [ i ] - i * d ; if ( freq [ a0 ] > maxFreq ) { maxFreq = freq [ a0 ] ; } } return ( n - maxFreq ) ; } public static void main ( String [ ] args ) { int n = 5 ; int arr [ ] = { 1 , 3 , 3 , 4 , 6 } ; int ans = minimumChanges ( arr , n , d ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int minIdx = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < arr [ j + 1 ] ) { min = Math . min ( min , arr [ j ] ) ; minIdx = j ; } } if ( minIdx == - 1 ) { min = Integer . MAX_VALUE ; break ; } } System . out . println ( minIdx + 1 ) ; } }
import java . util . * ; public class GFG { static int countPoints ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) count ++ ; else j ++ ; } } return count ; } public static void main ( String [ ] args ) { int x = 1 , y = 4 ; int a [ ] = { 1 , 5 } ; int n = a . length ; int b [ ] = { 1 , 1 , 2 } ; int m = b . length ; System . out . println ( countPoints ( n , m , a , b , x , y ) ) ; } }
public class GFG { static int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; } public static void main ( String [ ] args ) { int x = 4 ; System . out . println ( multiplyWith3Point5 ( x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int mid = ( i + n ) / 2 ; if ( s - a [ mid ] <= s ) { min = mid ; max = mid ; } } if
public class GFG { static int longestSubstring ( String s ) { int cnt = 1 ; int maxi = 1 ; int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) cnt ++ ; else maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } maxi = Math . max ( cnt , maxi ) ; return maxi ; } public static void main ( String [ ] args ) { String s = " ccccdeededff " ; System . out . println ( longestSubstring ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < k ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } }
public class GFG { static int zeroUpto ( int digits ) { int first = ( int ) ( Math . pow ( 10 , digits ) - 1 ) / 9 ; int second = ( int ) ( Math . pow ( 9 , digits ) - 1 ) / 8
import java . io . * ; public class GFG { static double cone ( double a ) { if ( a < 0 ) return - 1 ; double r = ( a * Math . sqrt ( 2 ) ) / 3 ; double h = ( 2 * a ) / 3 ; double v = 3.14 * Math . pow ( r , 2 ) * h ; return v ; } public static void main ( String [ ] args ) { double a = 5 ; System . out . println ( " { : . 4 f } " . format ( cone ( a ) ) ) ; } }
import java . util . * ; public class GFG { static boolean Prime ( int n ) { if ( n == 1 ) return false ; for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean checkSumPrime ( String str ) { int summ = 0 ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) summ += Math . abs ( str . charAt ( i - 1 ) - str . charAt ( i ) ) ; if ( Prime ( summ ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int num = 142 ; String str = str ( num ) ; int s = str . length ( ) ; if ( checkSumPrime ( str ) ) System . out . println ( " Prime " ) ; else System . out . println ( " Not ▁ Prime " ) ; } }
import java . io . * ; public class GFG { static int sum ( int n ) { if ( n < 2 ) return 1 ; else return 1 / n + ( sum ( n - 1 ) ) ; } public static void main ( String [ ] args ) { System . out . println ( " { : . 3 f } " . format ( sum ( 8 ) ) ) ; System . out . println ( " { : . 3 f } " . format ( sum ( 10 ) ) ) ; } }
public class GFG { static int countElements ( int p [ ] , int n ) { int ans = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( p [ i - 1 ] > p [ i ] && p [ i ] > p [ i + 1 ] ) ans ++ ; else if ( p [ i - 1 ] < p [ i ] && p [ i ] < p [ i + 1 ] ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int p [ ] = { 2 , 5 , 1 , 3 , 4 } ; int n = p . length ; System . out . println ( countElements ( p , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; if ( s . equals ( t ) ) { System . out . println ( " = " ) ; } else { System . out . println ( " > " ) ; } } }
public class GFG { static int findVolume ( int l , int b , int h ) { return ( ( l * b * h ) / 2 ) ; } public static void main ( String [ ] args ) { int l = 18 , b = 12 , h = 9 ; System . out . println ( " Volume ▁ of ▁ triangular ▁ prism : ▁ " + findVolume ( l , b , h ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' A ' ] ++ ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += k * arr [ s . charAt ( i ) - ' A ' ] ; } System . out . println ( ans ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int MAX = ( int ) 1e5 + 7 ; public String run ( ) { int triangle = ( int ) ( ( ( double ) ( ( double ) ( ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ) ) ) ) ) / 2 ) ) ) ) ) ) * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ) ) ) ) ) ) ) ) ) ) ) ) ) * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ) ) ) ) ) ) ) ) ) ) ) * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle * ( triangle
import java . util . * ; public class GFG { static int maxPrimefactorNum ( int N ) { if ( N < 2 ) return 0 ; int arr [ ] = new int [ N + 1 ] ; Arrays . fill ( arr , 1 ) ; int prod = 1 ; int res = 0 ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( arr [ p ] == true ) { for ( int i = p * 2 ; i <= N ; i += p ) arr [ i ] = false ; prod *= p ; if ( prod > N ) return res ; res ++ ; } prod *= p ; if ( prod > N ) return res ; res ++ ; } return res ; } public static void main ( String [ ] args ) { int N = 500 ; System . out . println ( maxPrimefactorNum ( N ) ) ; } }
import java . util . * ; public class GFG { static boolean checkDivisors ( int a [ ] , int n ) { int X = Math . max ( a [ 0 ] , a [ 1 ] ) ; int b [ ] = new int [ X ] ; for ( int i = 1 ; i <= X ; i ++ ) { if ( X % i == 0 ) b [ i ] = i ; if ( X / i != i ) b [ i ] = X / i ; } if ( b [ n ] != a [ n ] ) return false ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != a [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 2 , 12 , 48
public class GFG { static void subArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = i ; k < j ; k ++ ) { System . out . print ( arr [ k ] + " ▁ " ) ; } System . out . print ( " \n " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . print ( " All ▁ Non - empty ▁ Subarrays " ) ; subArray ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( k > 0 ) { ans [ i % 2 == 0 || k % 2 == 0 ) { ans [ i % 2 ] = arr [ i % 2 ] ; i ++ ; k -- ; } } System . out . println ( ans [ n / 2 ] ) ; } } }
import java . io . * ; public class GFG { static int maxSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] * i ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 6 , 1 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
public class GFG { static int maxSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) sum += arr [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
public class GFG { static int findAnswer ( int n , int arr [ ] ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) sum += ( ( arr [ i ] + arr [ n - i - 1 ] ) * ( arr [ i ] + arr [ n - i - 1 ] ) ) ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 53 , 28 , 143 , 5 } ; int n = arr . length ; System . out . println ( findAnswer ( n , arr ) ) ; } }
import java . util . * ; public class GFG { static int findSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = arr [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) sum += arr [ i + 1 ] ; } return sum ; } static int main ( ) { int arr [ ] = { 1 , 2 , 3 , 1 , 1 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }


import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } }
public class GFG { static void printRatio ( int a , int b , int c , int d ) { if ( b * c > a * d ) { int swap ( c , d ) ; swap ( a , b ) ; } int lcm = ( a * c ) / Math . gcd ( a , c ) ; int x = lcm / a ; int y = lcm / c ; int d = ( d * y ) ; int k = ( int ) Math . gcd ( b , d ) ; b = ( b / k ) ; d = ( d / k ) ; System . out . println ( b + " : ▁ " + d ) ; } public static void main ( String [ ] args ) { int a = 4 , b = 3 , c = 2 , d = 2 ; printRatio ( a , b , c , d ) ; } }
import java . io . * ; public class GFG { static int maxsum_SIS ( int arr [ ] , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) current_sum = current_sum + arr [ i ] ; else max_sum = Math . max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } return max_sum ; } static int max_sum ( int arr [ ] , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) current_sum = current_sum + arr [ i ] ; else max_sum = Math . max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( " Maximum
public class GFG { static int GCD ( int a , int b ) { if ( b == 0 ) return a ; return GCD ( b , a % b ) ; } static int findMaxSumUtil ( int arr [ ] , int n ) { int finalGCD = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) finalGCD = GCD ( arr [ i ] , finalGCD ) ; return finalGCD ; } static int findMaxSum ( int arr [ ] , int n ) { int maxElement = findMaxSumUtil ( arr , n ) ; return ( maxElement * n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 20 , 12 , 36 } ; int n = arr . length ; System . out . println ( findMaxSum ( arr , n ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { while ( b != 0 ) { int t = b ; b = a % b ; a = t ; } return a ; } static int findMinDiff ( int a , int b , int x , int y ) { int g = gcd ( a , b ) ; int diff = Math . abs ( x - y ) % g ; return Math . min ( diff , g - diff ) ; } public static void main ( String [ ] args ) { int a = 20 , b = 52 , x = 5 , y = 7 ; System . out . println ( findMinDiff ( a , b , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int xc = sc . nextInt ( ) ; int yc = sc . nextInt ( ) ; int xh = sc . nextInt ( ) ; int yh = sc . nextInt ( ) ; if ( xc <= x + w && yc <= y + h && xh <= x + w && yh <= y + h ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int divisibleby37 ( int n ) { int l = n ; if ( n == 0 ) return 1 ; if ( l % 3 == 1 ) n = "00" + n ; else if ( l % 3 == 2 ) n = "0" + n ; int gSum = 0 ; while ( l != 0 ) { int group = n . intValue ( ) ; l = l - 3 ; gSum = gSum + group ; } if ( gSum >= 1000 ) return ( divisibleby37 ( gSum ) ) ; else return ( gSum % 37 == 0 ) ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( divisibleby37 ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = - 1 ; if ( y < n || ( n - 1 + y ) < x ) { ans = - 1 ; } else { ans = ( n - 1 + y ) * ( n - 1 ) + ( y - n + 1 ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int lcs ( String X , String Y , int m , int n ) { int L [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m + 1 ; i ++ ) { for ( int j = 0 ; j < n + 1 ; j ++ ) { if ( i == 0 || j == 0 ) L [ i ] [ j ] = 0 ; else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) L [
import java . io . * ; public class GFG { static int numberOfSquares ( int base ) { base = ( base - 2 ) ; base = base / 2 ; return ( int ) base * ( base + 1 ) / 2 ; } public static void main ( String [ ] args ) { int base = 8 ; System . out . println ( numberOfSquares ( base ) ) ; } }
import java . io . * ; public class GFG { static double rmsValue ( int arr [ ] , int n ) { double square = 0 ; double mean = 0.0 ; int root = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) { square += ( arr [ i ] * Math . sqrt ( n ) ) ; } mean = ( square / ( double ) ( n ) ) ; root = Math . sqrt ( mean ) ; return root ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 4 , 6 , 8 } ; int n = arr . length ; System . out . println ( " { : . 4 f } " . format ( rmsValue ( arr , n ) ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] p = new int [ n + 1 ] ; int [ ] c = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } for ( int i


public class GFG { static void FindPoints ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int x4 , int y4 ) { int x5 = Math . max ( x1 , x3 ) ; int y5 = Math . min ( y1 , y3 ) ; int x6 = Math . min ( x2 , x4 ) ; int y6 = Math . min ( y2 , y4 ) ; if ( x5 > x6
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int x = 0 ; int y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' X ' ) { x = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' Y ' ) { y = i ; break ; } } System . out . println ( x +
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += arr [ j ] ; } if ( sum > max ) { max = sum ; } if ( sum < min ) { min = sum ; } } System . out . println ( max - min ) ; } }
public class GFG { static int knapSack ( int W , int Wt [ ] , int val [ ] , int n ) { int maxratio = - 1 ; int maxindex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( val [ i ] / Wt [ i ] ) > maxratio ) { maxratio = ( val [ i ] / Wt [ i ] ) ; maxindex = i ; } } return ( W * maxratio ) ; } public static void main ( String [ ] args ) { int W = 50 ; int Wt [ ] = { 6 , 7 , 9 , 8 } ; int n = Wt . length ; int Wt [ ] = { 6 , 7 , 9 , 8 } ; int n = n - 1 ; int Wt [ ] = { 6 , 7 , 9 , 8 } ; int nt [ ] = { n - 1 , 7 , 9 , 8 } ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( Wt [ i ] / Wt [ i ] ) > max ) { max = ( Wt [ i ] / Wt [ i ] ) ; maxindex = i ; } } System . out . println ( knapSack ( W , Wt , n , max ) ) ; } }
import java . util . * ; public class GFG { static void AlternateRearrange ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int v1 = arr [ 0 ] ; int v2 = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { v1 . add ( arr [ i ] ) ; } else { v2 . add ( arr [ i ] ) ; } } int index = 0 ; int j = 0 ; int flag = false ; if ( arr [ 0 ] % 2 == 0 ) { flag = true ; } while ( index < n ) { if ( flag == true ) { arr [ index ] = v1 . charAt ( j )
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a <= c && b <= c ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class GFG { static int decToBinary ( int n ) { int [ ] binaryNum = new int [ 32 ] ; for ( int i = 0 ; i < 32 ; i ++ ) binaryNum [ i ] = n % 2 ; n = n / 2 ; for ( int j = i - 1 ; j >= 0 ; j -- ) binaryNum [ j ] = binaryNum [ j ] + ( binaryNum [ j ] % 2 ) ; return binaryNum ; } static void findOccurrence (
public class GFG { static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) x += arr [ i ] & 1 ; System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearrayequal ( arr , n ) ; } }
import java . util . * ; public class Solution { public int findKthLargest ( int [ ] nums , int k ) { int [ ] pivot = new int [ nums . length ] ; int left = 0 ; for ( int i = 0 ; i < pivot . length ; i ++ ) { pivot [ i ] = nums [ i ] ; if ( pivot [ i ] <= k ) { pivot [ left ] = pivot [ i ] ; left ++
public class GFG { static boolean isDivisible ( int n ) { int temp = n ; while ( n > 0 ) { int k = n % 10 ; if ( temp % k == 0 ) return true ; n /= 10 ; } return false ; } public static void main ( String [ ] args ) { int n = 9876543 ; System . out . println ( isDivisible ( n ) ) ; } }
public class GFG { static boolean isDivisible ( int n ) { int temp = n ; int sum = 0 ; while ( n > 0 ) { int k = n % 10 ; sum += k ; n /= 10 ; } if ( temp % sum == 0 ) return true ; return " NO " ; } public static void main ( String [ ] args ) { int n = 123 ; System . out . println ( isDivisible ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > b ) System . out . println ( " LESS " ) ; else if ( a < b ) System . out . println ( " EQUAL " ) ; else System . out . println ( " GRAY " ) ; } }
public class GFG { static int calculateAreaSum ( int l , int b ) { int size = 1 ; int maxSize = Math . min ( l , b ) ; int totalArea = 0 ; for ( int i = 1 ; i <= maxSize ; i ++ ) { totalSquares = ( ( l - size + 1 ) * ( b - size + 1 ) ) ; totalArea += totalSquares * size * size ; totalArea += totalArea * size ; totalArea += 1 ; } return totalArea ; } public static void main ( String [ ] args ) { int l = 4 , b = 3 ; System . out . println ( calculateAreaSum ( l , b ) ) ; } }
public class GFG { static void arrange ( int N ) { if ( N == 1 ) { System . out . print ( "1" ) ; return ; } if ( N == 2 || N == 3 ) { System . out . print ( " - 1" ) ; return ; } int even = - 1 , odd = - 1 ; if ( N % 2 == 0 ) even = N ; else odd = N ; while ( odd >= 1 ) { System . out . print ( odd + " ▁ " ) ; odd = odd - 2 ; } while ( even >= 2 ) { System . out . print ( even + " ▁ " ) ; even = even - 2 ; } } public static void main ( String [ ] args ) { int N = 5 ; arrange ( N ) ; } }
import java . util . * ; public class GFG { static int findMinEqualSums ( int a [ ] , int N ) { int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) sum += a [ i ] ; sum1 = 0 ; sum2 = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum1 += a [ i ] ; sum2 = sum - sum1 ; if ( Math . abs ( sum1 - sum2 ) < min ) { min = Math . abs ( sum1 - sum2 ) ; } if ( min == 0 ) break ; } return min ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 5 , 7 , 8 } ; int N = a . length ; System . out . println ( findMinEqualSums ( a , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n == 1 || n == 2 ) { System . out . println ( n ) ; } else { int ans = n / 3 ; int ans1 = n % 3 ; int ans2 = n / 3 ; System . out . println ( ans + " ▁ " + ans2 ) ; } } } }
import java . util . * ; public class GFG { static int findOptimalSolution ( int a [ ] , int N ) { Arrays . sort ( a ) ; int points = 0 ; for ( int i = 0 ; i < N ; i ++ ) { points += a [ i ] * i ; } return points ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 2 , 3 , 9 } ; int N = a . length ; System . out . println ( findOptimalSolution ( a , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] t = new int [ n ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; d [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( t [ i ] >= d [ i ] ) { max = Math . max ( t [ i ] , max ) ; } } System . out . println ( max + " ▁ " + d [ n - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; max = Math . max ( max , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; max = Math . max ( max , arr [ i ] ) ; } if ( sum + max < n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int getPairs ( int a [ ] ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < a . length ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 3 , 1 } ; System . out . println ( getPairs ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } else { count = 0 ; break ; } } if ( k == 0 ) { System . out . println ( count ) ; } else { System . out . println ( 0 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { if ( b [ i ] [ j ] == 1 ) { ans = 1 ; break ; } else { ans = 0 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; long [ ] b = new long [ n ] ; long [ ] c = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextLong ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = ( ans % MOD ) % MOD ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = a [ i ] * ( a [ i ] + 1 ) / 2 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { cnt ++ ; break ; } else { cnt += b [ i ] ; } } System . out . println ( cnt ) ; } } }
import java . util . * ; public class GFG { static int LongestIncreasingSubsequenceLength ( int A [ ] , int size ) { int tailTable [ ] = new int [ size + 1 ] ; int len = 0 ; tailTable [ 0 ] = A [ 0 ] ; len = 1 ; for ( int i = 1 ; i < size ; i ++ ) { if ( A [ i ] < tailTable [ 0 ] ) { tailTable [ 0 ] = A [ i ] ; } else if ( A [ i ] > tailTable [ len - 1 ] ) { tailTable [ len ] = A
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int max = x [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( x [ j ] - x [ i ] < max ) { max = x [ j ] - x [ i ] ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static int compute ( ) { int LIMIT = 10 ; int ans = 0 ; for ( int i = 0 ; i < LIMIT ; i ++ ) { ans += ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int )
public class GFG { static intcolour [ ] = new int [ K + 1 ] ; static intcolour [ ] [ ] = new int [ K + 1 ] [ K + 1 ] ; static int max = height [ K - 1 ] ; static int arr [ ] = new int [ max ] ; static int maxi = 0 ; static int ans = 0 ; public static void main ( String [ ] args ) { int height = 0 ; int col = 1 ; int k = 1 ; int i = K - 2 ; while ( i >= 0 ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ col ] = 1 ; } i -- ; } for ( i = 1 ; i <= K ; i ++ ) { if ( arr [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean checkPowerof8 ( int n ) { int i = ( int ) Math . log ( n ) ; return ( i - ( int ) Math . log ( i ) < 0.000001 ) ; } public static void main ( String [ ] args ) { int n = 65 ; if ( checkPowerof8 ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == b ) { System . out . println ( ( a + b ) / 4 ) ; } else { System . out . println ( ( a + b ) / 4 + 1 ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 0 && m == 0 ) break ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == 0 ) { max = Math . max ( max , arr [ i ] [ j ] ) ; } } } System . out . println ( max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = arr [ i ] ; int r = arr [ i ] ; if ( l <= r ) { max = Math . max ( max , l + 1 ) ; } else { max = Math . max ( max , r + 1 ) ; } } System . out . println ( max ) ; } } }
public class GFG { static int countWays ( int n , int m ) { int count [ ] = new int [ n + 2 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) count [ i ] = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i < n + 1 ; i ++ ) { if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ; else if ( i < m ) count [ i ] = 1 ; else count [ i ] = 2 ; } return count [ n ] ; } public static void main ( String [ ] args ) { int n = 7 , m = 4 ; System . out . println ( " Number ▁ of ▁ ways ▁ = ▁ " + countWays ( n , m ) ) ; } }
import java . util . * ; public class GFG { static void bomb_required ( int n ) { System . out . print ( n + n / 2 ) ; for ( int i = 2 ; i <= n ; i ++ ) System . out . print ( i + " ▁ " ) ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( i + " ▁ " ) ; for ( int i = 2 ; i <= n ; i ++ ) System . out . print ( i + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 3 ; bomb_required ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( ( n + 1 ) & ( n + 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' || s . charAt ( i ) == '1' ) { sb . append ( s . charAt ( i ) ) ; } else { sb . append ( s . charAt ( i ) ) ; } } System . out . println ( sb . toString ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( n == 0 && x == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum == x ) count ++ ; } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i % 2 == 0 ) { dp [ i ] [ j ] = Math . max ( dp [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } System . out . println ( min ) ; } }
public class GFG { static int equivalentBase4 ( int bin ) { if ( bin == 0 ) return 0 ; if ( bin == 1 ) return 1 ; if ( bin == 2 ) return 2 ; if ( bin == 3 ) return 3 ; if ( bin == 4 ) return 4 ; if ( bin == 5 ) return 5 ; if ( bin == 6 ) return 6 ; if ( bin == 7 ) return 7 ; if ( bin == 8 ) return 8 ; if ( bin == 9 ) return 9 ; if ( bin == 10 ) return 10 ; if ( bin == 11 ) return 11 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ n ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int minIdx = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] < arr [ j + 1 ] ) { min = Math . min ( min , arr [ j ] ) ; minIdx = j ; } } if ( minIdx == - 1 ) { min = arr [ 0 ] ; } } int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int maxIdx = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { max = Math . max ( max , arr [ j ] ) ; maxIdx = j ; } } if ( maxIdx == - 1 ) { max = arr [ 0 ] ; } } System . out . println ( minIdx + " ▁ " + maxIdx ) ; } }
public class G
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = ( x - a ) % b ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { ans [ i ] = arr [ i ] ; i ++ ; } if ( k == 1 ) { ans [ 0 ] = - 1 ; return ; } if ( ans [ k - 1 ] == ans [ k - 1 ] ) { System . out . println ( ans [ k - 1 ] ) ; return ; } int cnt = 0 ; while ( ans [ k - 1 ] != ans [ k - 1 ] ) { cnt ++ ; ans [ k - 1 ] = ans [ k - 1 ] ; k -- ; } System . out . println
import java . util . * ; public class GFG { static void fun ( int n ) { return n & ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( " The ▁ number ▁ after ▁ unsetting ▁ the ▁ rightmost ▁ set ▁ bit " + " ▁ " + fun ( n ) ) ; } }
import java . util . * ; public class GFG { static int LongestFibSubseq ( int A [ ] , int n ) { HashSet < Integer > S = new HashSet < Integer > ( ) ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = A [ j ] ; int y = A [ i ] + A [ j ] ; int length = 2 ; while ( y != 0 ) { int z = x + y ; x = y ; y = z ; length ++ ; maxLen = Math . max ( maxLen , length ) ; } } } return maxLen ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = A . length ; System . out . println ( LongestFibSubseq ( A , n ) ) ; } }
import java . util . * ; public class GFG { static int countPairs ( int a [ ] , int b [ ] , int n , int m ) { HashMap < Integer , Integer > cnt = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { int sum = a [ i ] + b [ j ] ; if ( sum != cnt . get ( sum ) ) cnt . put ( sum , 1 ) ; } } return cnt . size ( ) ; } public static void main ( String [ ] args ) { int a [ ] = { 12 , 2 , 7 } ; int n = a . length ; int b [ ] = { 4 , 3 , 8 } ; int m = b . length ; System . out . println ( countPairs ( a , b , n , m ) ) ; } }
import java . util . * ; public class GFG { static boolean check ( int a [ ] , int y ) { int sum = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { int x = Math . sqrt ( a [ i ] ) ; if ( ( Math . floor ( x ) == Math . ceil ( x ) ) ) sum += a [ i ] ; } if ( sum % y == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 4 , 9 , 10 } ; int x = 13 ; if ( check ( a , x ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = arr [ j ] ; } } for ( int i = 0 ; i < q ; i ++ ) { int q1 = sc . nextInt ( ) ; int q2 = sc . nextInt ( ) ; int [ ] arr2 = new int [ q1 ] ; for ( int j = 0 ; j < q1 ; j ++ ) { arr2 [ j ] = sc . nextInt ( ) ; } for ( int j = 0 ; j < q2 ; j ++ ) { dp
public class GFG { static int calculate_min_sum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int min_sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) { min_sum += Math . abs ( a [ i ] - a [ i - 1 ] ) ; } return min_sum ; } static int calculate_max_sum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int max_sum = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { max_sum += Math . abs ( a [ n - 1 - i ] - a [ i ] ) ; } return max_sum ; } public static void main ( String [ ] args ) { int a [ ] = { 10 , - 10 , 20 , - 40 } ; int n = a . length ; System . out . println ( " The ▁ minimum ▁ sum ▁ of ▁ pairs ▁ is ▁ " + calculate_min_sum
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] c = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( a [ i ] < b [ i ] ) { ans = 1 ; break ; } else if ( a [ i ] > b [ i ] ) { ans = 1 ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int odd = 0 ; int even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { even ++ ; } else { odd ++ ; } } if ( even >= odd || odd >= even - 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class GFG { static boolean isPalindrome ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt (
import java . util . * ; public class GFG { static int count_numbers ( int k , int n ) { int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = k - 1 ; for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] ) * ( k - 1 ) ; } return dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ; } public static void main ( String [ ] args ) { int k = 10 ; int n = 3 ; System . out . println ( count_numbers ( k , n ) ) ; } }
public class GFG { static int minCost ( int n , int arr [ ] , int cost ) { int sum = 0 , totalCost = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } totalCost += cost * sum ; arr [ n - 1 ] += sum ; totalCost += ( 2 * cost * arr [ n - 1 ] ) ; return totalCost ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 } ; int n = arr . length ; int cost = 1 ; System . out . println ( minCost ( n , arr , cost ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; while ( q -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( a > 0 && b > 0 && c > 0 ) { ans = Math . min ( a , Math . min ( b , c ) ) ; } if ( a > 0 && b > 0 && c > 0 ) { ans = Math . min ( a , Math . min ( b , c ) ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = sc . nextInt ( ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) c [ i ] = a [ i ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int val = arr [ i ] ; int val2 = arr [ i + 1 ] ; if ( val % 25 == 0 ) { val = ( int ) Math . min ( val , n - i - 2 ) ; } else { val = ( int ) Math . min ( val , n - i - 1 ) ; } min = Math . min ( min , val2 ) ; } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static class Node { int data ; Node left , right ; } ; static Node insert ( Node root , int data ) { if ( root == null ) return newNode ( data ) ; else if ( data < root . data ) { root . left = insert ( root . left , data ) ; } if ( data > root . data ) { root . right = insert ( root . right , data ) ; } return root ; } static void inOrder ( Node root ) { if ( root == null ) return ; inOrder ( root . left ) ; System . out . print ( root . data + " ▁ " ) ; inOrder ( root .
public class GFG { static int MAX_CHAR = 26 ; static char removeChars ( String str , int k ) { char [ ] hash = new char [ MAX_CHAR ] ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } int res = " " ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] >= k ) res += str . charAt ( i ) ; } return res ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int k = 2 ; System . out . println ( removeChars ( str , k ) ) ; } }
public class GFG { static int LCSubStr ( int X [ ] , int Y [ ] , int m , int n ) { int LCSuff [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LCSuff [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) LCSuff [ i ] [ j ] = LCuff [ i - 1 ] [ j - 1 ] + 1 ; else LCSuff [ i ] [ j ] = 0 ; } } return result ; } public static void main ( String [ ] args ) { int X [ ] = { ' OldSite ' , ' NewSite ' , ' M ' , ' N
public class GFG { static int countOccurrences ( int x , int d ) { int count = 0 ; while ( x > 0 ) { if ( x % 10 == d ) { count ++ ; x = x / 10 ; } else { int result = 0 ; int max_count = 1 ; for ( int d = 0 ; d < 10 ; d ++ ) { count = countOccurrences ( x , d ) ; if ( count >= max_count ) { max_count = count ; result = d ; } } } return result ; } static int maxOccurring ( int x ) { if ( x < 0 ) { x = - x ; } int result = 0 ; int max_count = 1 ; for ( int d = 0 ; d <= 10 ; d ++ ) { count = countOccurrences ( x , d ) ; if ( count >= max_count ) { max_count = count ; result = d ; } } return result ; } public static void main ( String [ ] args ) { int x = 1223355 ; System . out . println ( " Max ▁ occurring ▁ digit ▁ is ▁ " + maxOccurring ( x ) ) ; } }
public class GFG { static void printLogestIncSubArr ( int arr [ ] , int n ) { int m = 1 , l = 1 , maxIndex = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) l = l + 1 ; else if ( m < l ) m = l ; maxIndex = i - m ; l = 1 ; } if ( m < l ) m = l ; maxIndex = n - m ; for ( int i = maxIndex ; i < ( m + maxIndex ) ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 3 , 5 , 7 , 8 , 9 , 1 , 2 } ; int n = arr . length ; printLogestIncSubArr ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; System . out . println ( n + " ▁ " + ( n % 2 == 0 ? "0" : " " ) + ( n / 2 ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int count = 0 ; for ( int j = l ; j < r ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { count ++ ; } } if ( count == x ) { ans [ i ] = 1 ; } else { ans [ i ] = 0 ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( ans [ i ] == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
import java . util . * ; public class GFG { static int Max_Sum ( int a [ ] , int n ) { int b [ ] = new int [ n ] ; int S = 0 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = res ; int ans = S ; ans = Math . max ( ans , Math . max ( ans , - S ) ) ; int g = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { g -= a [ i ] ; ans = Math . max ( ans , g + b [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { - 6 , 10 , - 3 , 10 , - 2 } ; int n = a . length ; System . out . println ( " Maximum ▁ sum ▁ is : ▁ " + Max_Sum ( a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int [ ] arr = new int [ x + 1 ] ; for ( int i = 1 ; i <= x ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 1 ; i <= x ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { ans ++ ; } } System . out . println ( ans ) ; } } }
public class GFG { static void reverse ( String str1 , int x ) { int n = ( str1 . length - x ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( str1 . charAt ( i ) + " ▁ " ) ; for ( int i = n + x - 1 ; i < n - 1 ; i ++ ) System . out . print ( str1 . charAt ( i ) + " ▁ " ) ; System . out . print ( str1 . charAt ( n + x - 1 ) ) ; } public static void main ( String [ ] args ) { String str1 = " geeksforgeeks " ; int x = 3 ; reverse ( str1 , x ) ; } }
import java . util . * ; public class GFG { static int lps ( String str ) { int n = str . length ( ) ; int [ ] [ ] L = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { L [ i ] [ i ] = 1 ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int k = i + j - 1 ; if ( str . charAt ( i ) == str . charAt ( j )
public class GFG { static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 14 ; if ( bit_check ( n ) ) System . out . println ( "1" ) ; else System . out . println ( "0" ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int minIdx = - 1 ; int maxIdx = - 1 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { min = Math . min ( min , arr [ j ] ) ; max = Math . max ( max , arr [ j + 1 ] ) ; minIdx = j ; max = Math . max ( maxIdx , arr [ j + 1 ] ) ; } } if ( minIdx == - 1 ) { min = Math . min ( min , arr [ 0 ] ) ; max = Math . max ( max , arr [ 0 ] ) ; } } System . out . println ( minIdx + 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int l = 0 ; int r = n - 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; if ( arr [ mid ] < arr [ l ] ) { mid = mid + 1 ; } else if ( arr [ mid ] > arr [ l ] ) { l = mid - 1 ; } else

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = 0 ; int j = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == '9' ) { j ++ ; } else { i ++ ; } } System . out . println ( j ) ; } }
public class GFG { static boolean isPeak ( int arr [ ] , int n , int num , int i , int j ) { if ( i >= 0 && arr [ i ] > num ) return false ; if ( j < n && arr [ j ] > num ) return false ; return true ; } static void printPeaksTroughs ( int arr [ ] , int n ) { System . out . print ( " Peaks ▁ : ▁ " ) ; for ( int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { ans [ i ] = - 1 ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == - 1 ) { ans [ i ] = - 1 ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == - 1 ) { ans [ i ] = - 1 ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == - 1 ) { ans [ i ] = - 1 ; break ; } } System . out . println ( ans [ n - 1 ] + " ▁ " + ans [ n - 1 ] ) ; } }
public class GFG { static int frequency ( int a [ ] , int x ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( i == x ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 5 , 5 , 5 , 4 } ; int x = 5 ; System . out . println ( frequency ( a , x ) ) ; } }
import java . util . * ; public class GFG { static boolean isNumBalanced ( int N ) { String str = N ; int [ ] freq = new int [ 10 ] ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - '0' ] ++ ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( freq [ i ] != freq [ i + 1 ] ) { isBalanced = false ; } } if ( isBalanced ) return true ; else return false ; } public static void main ( String [ ] args ) { int N = 1234567890 ; int flag = isNumBalanced ( N ) ; if ( flag == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; int k = ( int ) Math . sqrt ( n ) +
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int MOD = 1000000007 ; public String run ( ) { int [ ] numerator = new int [ 100 ] ; int denominator = 0 ; for ( int i = 0 ; i < numerator . length ; i ++ ) { numerator [ i ] = numerator [ i ] * denominator + denominator ; denominator = numerator [ i ] / 3 ; } int sum = 0 ; for ( int i = 0 ; i < numerator . length ; i ++ ) { sum += numerator [ i ] ; } return Integer . toString ( sum ) ; } }
import java . util . * ; public class GFG { static int LCM ( int x , int y , int z ) { int ans = ( x * y ) / ( gcd ( x , y ) ) ; return ( z * ans ) / ( gcd ( ans , z ) ) ; } static int findDivisible ( int n , int x , int y , int z ) { int lcm = LCM ( x , y , z ) ; int ndigitnumber = ( int ) Math . pow ( 10 , n - 1 ) ; int reminder = ndigitnumber % lcm ; if reminder == 0 ) return ndigitnumber ; int reminder = reminder % lcm ; if reminder == 0 ) return ndigitnumber ; int ndigitnumber = reminder ; if ( ndigitnumber < Math . pow ( 10 , n ) ) return ndigitnumber ; else return 0 ; } public static void main ( String [ ] args ) { int n = 4 , x = 2 , y
import java . util . * ; public class GFG { static int prime [ ] = new int [ 100001 ] ; static void SieveOfEratosthenes ( ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= 100000 ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= 100000 ; i += p ) prime [ i ] = false ; } } } static void common_prime ( int a , int b ) { int gcd = gcd ( a , b ) ; for ( int i = 2 ; i <= gcd ; i += i ) { if ( prime [ i ] % i == 0 ) { System . out . print ( i + " ▁ " ) ; } } } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int a = 6 , b = 12 ; common_prime ( a , b ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] [ 0 ] = 1 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] [ 0 ] = Math . max ( dp [ i ] [ j ] [ 0 ] , dp [ i - 1 ] [ j ] [ 1 ] ) ; } } int [ ] [ ] dp2 = new
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] ans = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { ans [ i ] [ j ] = arr [ i ] [ j ] + arr [ i ] [ j + 1 ] + arr [ i ] [ j + 1 ] + arr [ i ] [ j + 1 ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { ans [ i ] = arr [ i ] ; i ++ ; } i = 0 ; while ( i < n ) { ans [ i ] = arr [ i ] ; i ++ ; } int cnt = 0 ; while ( i < n ) { ans [ i ] = ans [ i ] + ( arr [ i ] / k ) * 5 ; i ++ ; } System . out . println ( ans [ n - 1 ] + " ▁ " + ans [ n - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n + 1 ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans [ i ] = 0 ; break ; } else { ans [ i ] = arr [ i ] ; i ++ ; } } for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { System . out . println ( " WA " ) ; } else { System . out . println ( " AC " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int c = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] ^ b [ j ] == 0 ) { c ++ ; } } if ( c == l ) { min = Math . min ( min , c ) ; } } System . out . println ( min ) ; } } }

import java . io . * ; public class GFG { static double sum ( double x , double y , double n ) { double sum1 = ( x * x * x * x - 1 ) / ( x * x * x - 1 ) ; double sum2 = ( x * y * y * y * y - 1 ) / ( x * y - 1 ) ; return ( sum1 + sum2 ) ; } public static void main ( String [ ] args ) { double x = 2 , y = 2 ; double n = 2 ; System . out . println ( sum ( x , y , n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { n -= 1 ; int sum = 0 ; sum += ( n * ( n + 1 ) ) / 2 ; sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
public class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + ( n % 10 ) ; n = n / 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }
public class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ m + 1 ] [ 5 * n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < 5 * n ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < l ; i ++ ) { for ( int j = 0 ; j < 5 * n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] ) ; } } System . out . println ( dp [ m ] [ l ] ) ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] w = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { w [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] r = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { r [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( r [ i ] [ j ] == 1 ) { ans
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; String [ ] [ ] arr = new String [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { String s = sc . next ( ) ; arr [ i ] [ 0 ] = s ; arr [ i ] [ 1 ] = s ; } int max = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( arr [ i ] [ j ] . equals ( " B " ) ) { max = Math . max ( max , Math . abs ( arr [ i ] [ j ] ) + Math . abs ( arr [ i ] [ j ] ) ) ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static void minReplacement ( char [ ] str ) { if ( str . length > 26 ) { System . out . println ( " IMPOSSIBLE " ) ; } else { Hash [ ] = new Hash [ 26 ] ; for ( int i = 0 ; i < str . length ; i ++ ) { Hash [ str [ i ] - ' a ' ] ++ ; } int count = 0 ; for ( int i = 0 ; i < str . length ; i ++ ) { if ( Hash [ str [ i ] - ' a ' ] > 1 ) { for ( int j = 0 ; j < str [ i ] - ' a ' ; j ++ ) { if ( Hash [ j ] == 0 ) { Hash [ str [ i ] - ' a ' ] -- ; str [ i ] = j + str [ i ] - ' a ' ; Hash [ j ] = 1 ; break ; } }
import java . util . *
import java . util . * ; public class GFG { static void sieveOfEratosthenes ( int N , int s [ ] ) { boolean prime [ ] = new boolean [ N + 1 ] ; for ( int i = 2 ; i <= N ; i ++ ) prime [ i ] = false ; for ( int i = 3 ; i <= N ; i ++ ) { if ( prime [ i ] == false ) s [ i ] = i ; for ( int j = i ; j <= N / i ; j += i ) { if ( prime [ j ] == false ) prime [ j ] = true ; s [ i * j ] =
public class GFG { static int longestSubarray ( int a [ ] , int n ) { int hash [ ] [ ] = new int [ 10 ] [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { hash [ i ] [ a [ i ] % 10 ] = 1 ; } int longest = - 1 ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] && hash [ i + 1 ] [ j ] ) { count ++ ; break ; } } if ( j == 10 ) longest = Math . max ( longest , count + 1 ) ; count = 0 ; } longest = Math . max ( longest , count + 1 ) ; return longest ; } public static void main ( String [ ] args ) { int a [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( ( a + b + c ) / 2 ) ; } } }
public class GFG { static int Divisors ( int x ) { int c = 0 ; int v [ ] = new int [ 3 ] ; for ( int i = 0 ; i < x ; i ++ ) { v [ i ] = i ; } while ( x % 2 == 0 ) { c ++ ; x /= 2 ; } v [ 0 ] = v [ 1 ] = 1 ; while ( x % 3 == 0 ) { c ++ ; x /= 3 ; } v [ 1 ] = v [ 2 ] = 1 ; while ( x % 7 == 0 ) { c ++ ; x /= 7 ; } v [ 2 ] = v [ 3 ] = 1 ; return v [ 0 ] + Math . abs ( v [ 1 ] - v [ 2 ] ) + Math .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a == 1 ) { max = Math . max ( max , c ) ; } else if ( a == b ) { max = Math . max ( max , c ) ; } else { max = Math . max ( max , c * a ) ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; while ( a > 0 ) { ans += 1 ; a -= 1 ; } while ( b > 0 ) { ans += 1 ; b -= 1 ; } System . out . println ( ans ) ; } }
public class GFG { static int getSum ( int n ) { int sm = 0 ; while ( n != 0 ) { sm = sm + n % 10 ; n = n / 10 ; } return sm ; } static int largestDigitSumdivisior ( int n ) { int res = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) res = Math . max ( res , getSum ( i ) ) ; res = Math . max ( res , getSum ( n / i ) ) ; } return res ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( largestDigitSumdivisior ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int ans = 0 ; int [ ] arr = new int [ l ] ; for ( int i = 0 ; i < l ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < r ; i ++ ) { ans = Math . max ( ans , arr [ i ] * 10 ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
import java . util . * ; public class GFG { static boolean isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; return ( sr - Math . floor ( sr ) ) == 0 ; } static boolean isProduct ( int num ) { int cnt = 0 ; int i = 2 ; while ( cnt < 2 && i * i <= num ) { while ( num % i == 0 ) { num /= i ; cnt ++ ; } i ++ ; } if ( num > 1 ) cnt ++ ; return cnt == 2 ; } static void findNumbers ( int N ) { Vector < Integer > vec = new Vector < Integer > ( ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( isProduct ( i ) && ! isPerfectSquare ( i ) ) vec . add ( i ) ; } for ( int i = 0 ; i < vec

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int count = 0 ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { while ( arr [ i ] > 0 ) { count ++ ; arr [ i ] = arr [ i ] * 10 + i ; } } System . out . println ( count ) ; } } }
public class GFG { static int divSum ( int n ) { int sum = 1 ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) sum = ( sum + i + Math . floor ( n / i ) ) ; i += 1 ; } return sum ; } static boolean areEquivalent ( int num1 , int num2 ) { return divSum ( num1 ) == divSum ( num2 ) ; } public static void main ( String [ ] args ) { int num1 = 559 , num2 = 703 ; if ( areEquivalent ( num1 , num2 ) == true ) System . out . println ( " Equivalent " ) ; else System . out . println ( " Not ▁ Equivalent " ) ; } }
public class GFG { static int findY ( int x ) { if ( x > 2 ) return x - 2 ; return x + 2 ; } public static void main ( String [ ] args ) { int x = 5 ; System . out . println ( findY ( x ) ) ; } }
import java . util . * ; public class GFG { static long modFact ( long n , long m ) { long result = 1 ; for ( int i = 1 ; i <= m ; i ++ ) result = ( result * i ) % MOD ; return result ; } public static void main ( String [ ] args ) { long n = 3 , m = 2 ; System . out . println ( modFact ( n , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { count ++ ; arr [ j ] = arr [ i ] ; arr [ i ] = 0 ; } } } System . out . println ( count ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
import java . util . Scan
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + a [ i ] ) ; } } for ( int i = 1 ; i <= n ; i ++ ) { System . out . println ( dp [ i ] [ i ] ) ; } } }
public class GFG { static double circlearea ( double a , double b ) { if ( a < 0 || b < 0 ) return - 1 ; double A = ( ( 3.14 * Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) / ( 4 * ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) ) ) ; return A ; } public static void main ( String [ ] args ) { double a = 8 , b = 10 ; System . out . println ( circlearea ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int K_String ( String s , int k ) { int n = s . length ( ) ; int fre [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) fre [ s . charAt ( i ) - ' a ' ] ++ ; int str = " " ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( fre [ i ] % k == 0 ) { str = fre [ i ] / k ; while ( str != 0 ) { str += char ( i + ' a ' ) ; i += 1 ; } } else return " - 1" ; } return str ; } public static void main ( String [ ] args ) { String s = " aabb " ; int k = 2 ; System . out . println ( K_String ( s , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ 100001 ] [ 100001 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 100001 ; j ++ ) { dp [ i ] [ j ] = 1 ; } } for ( int i = 0 ; i < 100001 ; i ++ ) { dp [ 0 ] [ i ] = 1 ; } for ( int i = 1 ; i < 100001 ; i ++ ) { for ( int j = 0 ; j < 100001 ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] * ( j + dp [ i - 1 ] [ j ] ) ) ; } } while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; System . out . println ( dp [ n ] [ n ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a * 10 ; } System . out . println ( sum ) ; } } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( n == 0 && k == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = arr [ j ] ; } } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int max = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] < min ) { min = dp [ i ] [ j ] ; max = j ; } } if ( max < min ) min = max ; } System . out . println ( min >= 0 ? " Yes " : " No " ) ; } } }
public class GFG { static int maxFreq ( String s , int a , int b ) { int [ ] fre = new int [ 10 ] ; int n = s . length ( ) ; if ( a > b ) { int swap ( a , b ) ; } for ( int i = 0 ; i < n ; i ++ ) { a = s . charAt ( i ) - '0' ; fre [ a ] ++ ; } if ( fre [ a ] == 0 && fre [ b ] == 0 ) return - 1 ; else if ( fre [ a ] >= fre [ b ] ) return a ; else return b ; } public static void main ( String [ ] args ) { int a = 4 , b = 7 ; s = "47744" ; System . out . println ( maxFreq ( s , a , b ) ) ; } }
public class GFG { static int maxZeros ( int n ) { if ( n == 0 || ( n & ( n - 1 ) ) == 0 ) return - 1 ; int setBit = 1 ; int prev = 0 ; int i = 1 ; while ( i < 33 ) { prev ++ ; if ( ( n & setBit ) == setBit ) { setBit = setBit << 1 ; break ; } setBit = setBit << 1 ; } int max0 = - 10 * ( int ) Math . pow ( 2 , 9 ) ; int cur = prev ; for ( int j = i + 1 ; j < 33 ; j ++ ) { cur += 1 ; if ( ( n & setBit ) == setBit ) { if ( max0 < ( cur - prev - 1 ) ) max0 = cur - prev - 1 ; prev = cur ; } cur = cur ; } int max = max0 ; int cur = cur ; for ( int j = i + 1 ; j < 33 ; j ++ ) { cur += 1 ; if ( ( n & setBit ) == setBit ) { if ( max < ( cur - prev
public class GFG { static int sumPowersK ( int n , int k ) { int sum = 0 ; int num = 1 ; while ( num <= n ) { sum += num ; num *= k ; } return sum ; } static int getSum ( int n , int k ) { int pwrK = sumPowersK ( n , k ) ; int sumAll = ( n * ( n + 1 ) ) / 2 ; return ( sumAll - pwrK ) ; } public static void main ( String [ ] args ) { int n = 10 , k = 3 ; System . out . println ( getSum ( n , k ) ) ; } }
import java . io . * ; public class GFG { static int XandYandZintercept ( int A , int B , int C , int D ) { int x = - D / A ; int y = - D / B ; int z = - D / C ; return new int [ x ] { x , y , z } ; } public static void main ( String [ ] args ) { int A = 2 , B = 5 , C = 7 , D = 8 ; System . out . println ( XandYandZintercept ( A , B , C , D ) ) ; } }
import java . util . * ; public class GFG { static int maxSum ( int arr [ ] , int n ) { int s = 0 ; int l [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) s += Math . abs ( arr [ i ] ) ; if ( arr [ i ] >= 0 ) continue ; if ( i == 0 ) l [ 0 ] = i + 1 ; else l [ 0 ] = i + 1 ; l [ 0 ] += arr [ i ] ; System . out . println ( s ) ; System . out . print ( " * " ) ; return l [ 0 ] ; } public static void main ( String [ ] args ) { int n = 4 ; int arr [ ] = { 1 , - 2 , - 3 , 4 } ; int maxSum ( int arr [ ] , int n ) { int s = 0 ; int l [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) s += Math . abs ( arr [ i ] ) ; if ( arr [ i ] >= 0 ) continue ; if ( i == 0 ) l [ 0 ] = i + 1 ; else l [ 0 ] = i + 1 ; l [ 0 ] += arr [ i ] ; System . out . println ( s ) ; System . out . print ( " * " ) ; return l [ 0 ] ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static void replaceSpaces ( String str ) { str = str . substring ( 0 , str . length ( ) - 1 ) ; int i = str . length ( ) ; int space_count = str . count ( ' ▁ ' ) ; int new_length = i + space_count * 2 ; if ( new_length > MAX ) return - 1 ; int index = new_length - 1 ; String str = str . substring ( 0 , index ) ; for ( int j = index - 2 ; j >= 0 ; j -- ) { if ( str . charAt ( j ) == ' ▁ ' ) str = str . substring ( index + 1 ) ; else str = str . substring ( index + 2 , str . length ( ) ) ; index =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { ans [ i ] = 1 ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans [ i ] = 0 ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == 0 ) { System . out . println ( "0" ) ; break ; } } } }
import java . util . * ; public class GFG { static boolean check ( int n ) { int m = n ; while ( n != 0 ) { int r = n % 10 ; if ( r > 0 ) { if ( ( m % r ) != 0 ) return false ; } n = n / 10 ; } return true ; } static int count ( int l , int r ) { int ans = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( check ( i ) ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int l = 10 , r = 20 ; System . out . println ( count ( l , r ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 9 && b [ i ] == 1 ) { ans = i ; break ; } } if ( ans == - 1 ) { ans = - 1 ; } System . out . println ( ans + " ▁ " + ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] > max ) { max = arr [ i ] - arr [ i - 1 ] ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 4 == 0 ) System . out . println ( "4" ) ; else System . out . println ( "0" ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < arr [ i ] ; j ++ ) { sum += arr [ j ] - arr [ i ] ; } if ( sum >= k ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = n ; int i = 0 ; while ( x % k != 0 ) { x /= k ; i ++ ; } if ( x % k == 0 ) { System . out . println ( i + 1 ) ; return ; } if ( x % k == 0 ) { System . out . println ( i + 1 ) ; return ; } if ( x % k == 0 ) { System . out . println ( i + 1 ) ; return ; } if ( x % k == 1 ) { System . out . println ( i + 1 ) ; return ; } if ( x % k == 2 ) { System . out . println ( i + 1 ) ; return ; } System . out . println ( i + 1 ) ; } }
import java . util . * ; public class GFG { static int digSum ( int n ) { int sum = 0 ; while ( n > 0 || sum > 9 ) { if ( n == 0 ) n = sum ; sum += n % 10 ; n = n / 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 1234 ; System . out . println ( digSum ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + 1 ) ; } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i < n ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + dp [
import java . io . * ; public class GFG { static int centered_heptagonal_num ( int n ) { return ( 7 * n * n - 7 * n + 2 ) / 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " % sth ▁ Centered ▁ heptagonal ▁ number ▁ : ▁ " + centered_heptagonal_num ( n ) ) ; } }
import java . util . * ; public class GFG { static int missingNum ( int arr [ ] , int n ) { int minvalue = Integer . MAX_VALUE ; int xornum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xornum ^= ( minvalue ) ^ arr [ i ] ; minvalue = minvalue + 1 ; } return xornum ^ minvalue ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 12 , 11 , 15 } ; int n = arr . length ; System . out . println ( missingNum ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static String smallestPermute ( int n ) { String res [ ] = new String [ n + 1 ] ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = " " + ( char ) ( 48 + i + 2 ) ; else res [ i ] = ( char ) ( 48 + i ) ; } } else { for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = ( char ) ( 48 + i + 2 ) ; else res [ i ] = ( char ) ( 48 + i ) ; } res [ n - 1 ] = ( char ) ( 48 + n - 2 ) ; res [ n - 2 ]
import java . util . * ; public class GFG { static int minOperations ( int a [ ] , int n , int K ) { Map < Integer , Boolean > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( a [ i ] ) == true ) return 0 ; map . put ( a [ i ] , true ) ; } int b [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = a [ i ] & K ; Map < Integer , Boolean > map = new HashMap < > ( ) ;

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n > 360 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ m ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int t = ( a [ i ] + b [ i ] ) / 60 ; int t1 = ( a [ i ] + b [ i ] ) % 60 ; int t2 = ( a [ i ] + b [ i ] ) % 60 ; if ( t1 + t2 > t ) { ans = t1 + t
import java . util . Scanner ; public class test288 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int t = in . nextInt ( ) ; for ( int j = 0 ; j < t ; j ++ ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; if ( a == 1 ) { System . out . println ( " YES " ) ; System . out . println ( a + " ▁ " + b ) ; } else { System . out . println ( " NO " ) ; System . out . println ( a + " ▁ " + b ) ; } } in . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int r = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; if ( r == 0 && a == 0 ) break ; int [ ] [ ] dp = new int [ r ] [ a ] ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < a ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < a ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) continue ; if ( j == a - 1 ) { dp [ i ] [ j ] += dp [ i + 1 ] [ j ] ; } else { dp [ i ] [ j ] += dp [ i + 1 ] [ j ] + dp [ i + 1 ] [ j - 1 ] ; } ans += dp [ i ] [ j ] ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int findMaxValue ( int arr [ ] , int n ) { if ( n < 4 ) System . out . println ( " The ▁ array ▁ should ▁ have ▁ 4 ▁ elements " ) ; return MIN ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , 2 , 20 } ; int n = arr . length ; int min =
public class GFG { static void centeredHexagonalSeries ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( 3 * i * ( i - 1 ) + 1 + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 10 ; centeredHexagonalSeries ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] arr = s . split ( " " ) ; int [ ] arr1 = new int [ arr . length ] ; int [ ] arr2 = new int [ arr . length ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr1 [ i ] = Integer . parseInt ( arr [ i ] ) ; arr2 [ i ] = arr1 [ i ] ; } int count = 0 ; for ( int i = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { ans ++ ; break ; } } System . out . println ( ans + " ▁ " + m + " ▁ " + arr [ n - 1 ] ) ; } }
import java . util . * ; public class GFG
import java . util . * ; public class GFG { static int n = 5 ; static int diagonalsMinMax ( int mat [ ] [ ] ) { if ( n == 0 ) return 1 ; int principalMin = mat [ 0 ] [ 0 ] ; int
import java . io . * ; public class GFG { static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( " Invalid ▁ Input " ) ; return - 1 ; } int sm = 0 ; int count = 0 ; while ( n >= 1 ) { count = count + 1 ; sm = sm + n ; n = n - 2 ; } return sm / count ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } }
import java . io . * ; public class GFG { static void averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( " Invalid ▁ Input " ) ; return ; } return ( n + 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } }
import java . util . * ; public class GFG { static boolean areElementsContiguous ( int arr [ ] ) { HashSet < Integer > us = new HashSet < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) us . add ( arr [ i ] - 1 ) ; int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( curr_ele != 0 ) { count ++ ; curr_ele -- ; } curr_ele = arr [ 0 ] + 1 ; while ( curr_ele != 0 ) { count ++ ; curr_ele -- ; } return ( count == us . size ( ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; if ( areElementsContiguous ( arr ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }

public class GFG { static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; if ( x < 0 ) { x = - 1 ; } else { x = 1 ; } System . out . print ( val * x + " ▁ " ) ; if ( y < 0 ) { y = - 1 ; } else { y = 1 ; } System . out . print ( "0" + " ▁ " ) ; } public static void main ( String [ ] args ) { int x = 3 , y = 3 ; Vertices ( x , y ) ; } }
import java . util . * ; public class GFG { static void get
import java . util . * ; public class GFG { static void originalArray ( int greater , int n ) { Vector < Integer > temp = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) temp . add ( i ) ; Vector < Integer > arr = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) arr . add ( i ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr . get ( i ) + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 2 , 1 , 0 , 1 , 0 } ; int n = arr . size ( ) ; originalArray ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math . min ( arr [ i ] , arr [ i + 1 ] ) ; int max = Math . max ( arr [ i ] , arr [ i + 1 ] ) ; if ( max == min ) { ans += max - min ; } else { ans += min + max ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Solution { public int findRadius ( int [ ] houses , int [ ] heaters ) { int [ ] r = new int [ houses . length ] ; int i = 0 ; for ( int x = 0 ; x < houses . length ; x ++ ) { while ( x >= 0 ) { r [ i ] = Math . max ( r [ i ] , Math . abs ( heaters [ i ] - x ) ) ; i ++ ; } } return r [ i ] ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] houses = { 1 , 2 , 3 } ; int [ ] heaters = { 2 , 3 } ; int out = sObj . findRadius ( houses , heaters ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static int compute ( ) { int sum = 0 ; int count = 0 ; for ( int i = 5 ; i <= 9 ; i ++ ) { if ( i % 5 == 0 ) { sum += i ; count ++ ; } } return sum ; } static int find_least_divisible_repunit ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) return 0 ; int sum = 1 ; int pow = 1 ; int k = 1 ; while ( sum % n != 0 ) { k ++ ; pow = pow * 10 % n ; sum = ( sum + pow ) % n ; } return k ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static int res = 0 ; static int checkRecursive ( int num , int x , int k , int n ) { int res = 0 ; if ( x == 0 ) res ++ ; int r = ( int ) Math . floor ( Math . pow ( num , ( 1 / n ) ) ) ; for ( int i = k + 1 ; i <= r ; i ++ ) { int a = x - ( int ) Math . pow ( i , n ) ; if ( a >= 0 ) checkRecursive ( num , x - ( int ) Math . pow ( i , n ) , i , n ) ; } return res ; } static int check ( int x , int n ) { return checkRecursive ( x , x , 0 , n ) ; } public static void main ( String [ ] args ) { System . out . println ( check ( 10 , 2 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] == 7 ) { ans += a [ i ] ; } else { ans -= a [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean prime ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( i * i > n + 1 ) break ; if ( n % i == 0 ) return false ; } return true ; } static int thirdNumber ( int a , int b ) { int sum = 0 ; int temp = 0 ; temp = a + b ; temp = 1 ; if ( sum % 2 == 1 ) { temp = 2 ; } while ( prime ( sum + temp ) == false ) { temp += 2 ; } System . out . println ( temp ) ; return true ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 ; thirdNumber ( a , b ) ; } }
public class GFG { static int Squares ( int n , int m , int a ) { return ( ( ( m + a - 1 ) / a ) * ( ( n + a - 1 ) / a ) ) ; } public static void main ( String [ ] args ) { int n = 6 , m = 6 , a = 4 ; System . out . println ( Squares ( n , m , a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n >= 6 && n % m == 0 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
public class GFG { static int countCubes ( int a , int b ) { int cnt = 0 ; for ( int i = a ; i <= b ; i ++ ) { for ( int j = i + 1 ; j <= b ; j ++ ) { if ( j * j * j * j > i ) break ; if ( j * j * j * j == i ) cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int a = 7 , b = 30 ; System . out . println ( " Count ▁ of ▁ Cubes ▁ is ▁ " + countCubes ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc
import java . util . * ; public class GFG { static void subString ( String s , int n ) { for ( int i = 0 ; i <= n ; i ++ ) { for ( int len = i + 1 ; len <= n ; len ++ ) System . out . print ( s . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String s = " abcd " ; subString ( s , s . length ( ) ) ; } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static int countPrimePosition ( int arr [ ] ) { int c0 = 0 , c1 = 0 ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 && isPrime ( i ) ) c0 ++ ; if ( arr [ i ] == 1 && isPrime ( i ) ) c1 ++ ; } System . out . println ( " Number ▁ of ▁ 0s ▁ = ▁ " + c0 ) ; System . out . println ( " Number ▁ of ▁ 1s ▁ = ▁ " + c1 ) ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0
public class GFG { static void angleextcycquad ( int z ) { System . out . print ( " The ▁ " + " the ▁ perimeter ▁ of ▁ the ▁ " + " ▁ cyclic ▁ quadrilateral ▁ is ▁ " + z + " ▁ degrees " ) ; System . out . print ( z + " ▁ " ) ; } public static void main ( String [ ] args ) { int z = 48 ; angleextcycquad ( z ) ; } }
public class GFG { static void printMinIndexChar ( String str , int patt ) { int minIndex = 10 * 10 * 10 ; int m = str . length ( ) ; int n = str . charAt ( m ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( str . charAt ( i ) == str . charAt ( j ) && j < minIndex ) { minIndex = j ; break ; } } if ( minIndex != 10 * 10 ) { System . out . println ( " Minimum ▁ Index ▁ Character ▁ = ▁ " + str . charAt ( minIndex ) ) ; } else { System . out . println ( " No ▁ character ▁ present " ) ; } } str = " geeksforgeeks " ; patt = " set " ; printMinIndexChar ( str , patt ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int patt = " set " ; printMinIndexChar ( str , patt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == b ) { System . out . println ( " Happy ▁ Alex " ) ; } else { System . out . println ( " Poor ▁ Alex " ) ; } } } }
import java . util . * ; public class GFG { static int maxnumber ( int n , int k ) { for ( int i = 0 ; i < k ; i ++ ) { int ans = 0 ; for ( int i = 1 ; i * i <= n ; i ++ ) { ans = ( n / ( i * 10 ) ) * i + ( n % i ) ; n = ans ; } return ans ; } public static void main ( String [ ] args ) { int n = 6358 ; int k = 1 ; System . out . println ( maxnumber ( n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += a [ j ] ; if ( sum >= min ) { min = sum ; } } } System . out . println ( min ) ; } }
import java . io . * ; public class GFG { static int get_last_two_digit ( int N ) { if ( N <= 10 ) { int ans = 0 ; fac = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { fac = fac * i ; ans += fac ; } ans = ans % 100 ; return ans ; } else return 13 ; } public static void main ( String [ ] args ) { int N = 1 ; for ( int N = 1 ; N <= 11 ; N ++ ) { System . out . println ( " For ▁ N ▁ = ▁ " + N + " : ▁ " + get_last_two_digit ( N ) + " : ▁ " + get_last_two_digit ( N ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( n ) ; } }
public class GFG { static boolean isPossible ( int x , int y , int z ) { int a = x * x + y * y + z * z ; a = round ( a , 8 ) ; if ( ( ( ( ( ( ( ( a ) % 2 ) == 1 ) && ( ( ( ( ( ( a ) % 2 ) == 1 ) ) ) ) ) { return true ; } return false ; } public static void main ( String [ ] args ) { int l = 0.70710678 ; int m = 0.5 ; int n = 0.5 ; if ( isPossible ( l , m , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static int MOD = 1000000 ; static int result [ ] = new int [ MAX + 1 ] ; static void preCompute ( ) { result [ 0 ] = 1 ; result [ 0 ] = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) { result [ i ] = ( ( result [ i - 1 ] % MOD ) * i ) % MOD ; result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( result [ i ] % MOD ) ) % MOD ; } } static void performQueries ( int q [ ] , int n ) { preCompute ( ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( result [ q [ i ] ] ) ; } } public static void main ( String [ ] args ) { int q [ ] = { 4 , 5 } ; int n = q . length ; performQueries ( q , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int sum2 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum2 += arr [ j ] ; if ( sum2 > min ) min = sum2 ; } sum = sum2 ; } System . out . println ( sum ) ; } } }
import java . util . * ; public class GFG { static int segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) arr [ i ] = arr [ j ] ; arr [ j ++ ] = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; } return j ; } static int findMissing ( int arr [ ] , int size ) { int shift = segregate ( arr , size ) ; return findMissingPositive ( arr , shift ) ; } public static void main ( String [ ] args ) { int arr
import java . util . * ; public class GFG { static long mod = 1000000007 ; static long digitNumber ( long n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 9 ; if ( n % 2 != 0 ) { long temp = digitNumber ( ( n - 1 ) / 2 ) % mod ; return ( 9 * ( temp * temp ) % mod ) % mod ; } else { long temp = digitNumber ( n / 2 ) % mod ; return ( temp * temp ) % mod ; } } static long countExcluding ( long n , long d ) { if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; } public static void main ( String [ ] args ) { long n = 3 ; System . out . println ( countExcluding ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr2 [ i ] = arr [ i ] + arr2 [ i - 1 ] ; int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] + arr2 [ i ] > arr [ i + 1 ] ) ans = i ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int ans = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { ans = i ; break ; } } System . out . println ( ans + " ▁ " + t ) ; } }
public class GFG { static boolean check ( String s , int k ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i % k ) ) return false ; } return true ; } static int countCommonDivisors ( String a , String b ) { int ct = 0 ; int n = a . length ( ) ; int m = b . length ( ) ; for ( int i = 1 ; i <= Math . min ( n , m ) ; i ++ ) { if ( n % i == 0 && m % i == 0 ) { if ( a . charAt ( 0 ) == b . charAt ( 0 ) ) { if ( check ( a , i ) && check ( b , i ) ) ct ++ ; } } } return ct ; } public static void main ( String [ ] args ) { String a = " xaxa " ; String b = " xaxaxa " ; System . out . println ( countCommonDivisors ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == arr [ i ] ) { count ++ ; } } } System . out . println ( count ) ; } }
public class GFG { static void indexedSequentialSearch ( int arr [ ] , int n , int k ) { int elements [ ] = new int [ 20 ] ; int indices [ ] = new int [ n ] ; int j , ind = 0 ; for ( int i = 0 ; i < n ; i ++ ) { elements [ ind ] = arr [ i ] ; indices [ ind ] = i ; ind ++ ; } if ( k < elements [ 0 ] ) { System . out . println ( " Not ▁ found " ) ; return ; } else { for ( int i = 1 ; i <= ind ; i ++ ) { if ( k < elements [ i ] ) {
public class GFG { static int larrgestPalindrome ( int n ) { int upper_limit = 0 ; for ( int i = 1 ; i <= n ; i ++ ) upper_limit = upper_limit * 10 ; upper_limit = upper_limit + 9 ; int lower_limit = 1 + upper_limit / 10 ; int max_product = 0 ; for ( int i = upper_limit ; i <= lower_limit - 1 ; i ++ ) { for ( int j = i ; j <= lower_limit - 1 ; j ++ ) { product = i * j ; if ( product < max_product ) break ; int number = product ; int reverse = 0 ; while ( number != 0 ) { reverse = reverse * 10 + number % 10 ; number = number / 10 ; } if ( product == reverse && product > max_product ) max_product = product ; } } return max_product ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( larrgestPalindrome ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = arr [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] [ i ] > 0 ) { ans = i ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int min = Math . min ( a , Math . min ( b , c ) ) ; int max = Math . max ( a , Math . max ( b , c ) ) ; int ans = 0 ; if ( a > 0 ) { ans += 1 ; } if ( b > 0 ) { ans += 1 ; } if ( c > 0 ) { ans += 1 ; } if ( min > max )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] + arr [ i ] - arr [ j ] ) ; } } System . out . println ( dp [ n - 2 ] [ 0 ] ) ; } }
import java . util . * ; public class GFG { static int maximumXor ( int arr [ ] , int n ) { int sForward [ ] = new int [ n ] ; int sBackward [ ] = new int [ n ] ; int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { while ( sForward [ i ] > 0 ) { ans = Math . max ( ans , arr [ i ] ^ arr [ sForward [ i ] ] ) ; sForward [ i ] -- ; } sForward [ i ] -- ; while ( sBackward [ n - i - 1 ] > 0 ) { ans = Math . max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward [ n - 1 ] ] ) ; sBackward [ n - i - 1 ] -- ; } sBackward [ n - i - 1 ] -- ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 2
public class GFG { static void decToHexa ( int n ) { char hexaDeciNum [ ] = new char [ 100 ] ; int i = 0 ; while ( n != 0 ) { int temp = n % 16 ; if ( temp < 10 ) hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ; else hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ; n = n / 16 ; } int j = i - 1 ; while ( j >= 0 ) { System . out . print ( ( hexaDeciNum [ j ] ) + " ▁ " ) ; j = j - 1 ; } } public static void main ( String [ ] args ) { int n = 2545 ; decToHexa ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , a [ i ] ) ; } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; if ( h == 0 && w == 0 ) break ; int [ ] [ ] map = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] [ ] dp = new int [ h ] [ w ] [ 2 ] ; dp [ 0 ] [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { dp [ i ] [ j ] [ 0 ] = dp [ i ] [ j ] [ 1 ] + dp [ i ] [ j ] [ 0 ] ; dp [ i ] [ j ] [ 1 ] = Math . abs ( map [ i ] [ j ] [ 1 ] - map [ i ] [ j ] [ 0 ] ) + Math . abs ( map [ i ] [ j ] [ 1 ] - map [ i ] [ j ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n == 1 ) { System . out . println ( " Hello ▁ World " ) ; } else { System . out . println ( " My ▁ World " ) ; } } }
import java . io . * ; public class GFG { static int extractMaximum ( String ss ) { int num = 0 , res = 0 ; for ( int i = 0 ; i < ss . length ( ) ; i ++ ) { if ( ss . charAt ( i ) >= '0' && ss . charAt ( i ) <= '9' ) num = num * 10 + int ( ss . charAt ( i ) - 0 ) ; else res = Math . max ( res , num ) ; num = 0 ; } return Math . max ( res , num ) ; } public static void main ( String [ ] args ) { String ss = "100klh564abc365bg " ; System . out . println ( extractMaximum ( ss ) ) ; } }
public class GFG { static int max = 50009 ; static int find_Indices ( int arr [ ] , int n ) { int sum [ ] = new int [ max ] ; int k = 0 ; for ( int i = 0 ; i < max ; i ++ ) { sum [ i ] = sum [ i - 1 ] + arr [ k ] ; k ++ ; } int ans = - ( 1e15 ) ; int index_1 = index_2 = index_3 = - 1 ; for ( int l = 1 ; l <= n ; l ++ ) { int index = 0 ; int vmin = ( 1e15 ) ; for ( int r = l ; r <= n ; r ++ ) { if ( sum [ r ] < vmin ) vmin = sum [ r ] ; index =
public class GFG { static void printElements ( int arr [ ] , int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 1 , 5 , 4 , 9 , 8 , 7 , 5 } ; int n = arr . length ; printElements ( arr , n ) ; } }
import java . util . * ; public class GFG { static int valueofX ( int ar [ ] , int n ) { int sum = 0 ; if ( sum % n == 0 ) return sum / n ; else { int A = sum / n ; int B = sum / n + 1 ; int valueA = 0 ; int valueB = 0 ; for ( int i = 0 ; i < n ; i ++ ) { valueA += ( ar [ i ] - A ) * ( ar [ i ] - A ) ; valueB += ( ar [ i ] - B ) * ( ar [ i ] - B ) ; } if ( valueA < valueB ) return A ; else return B ; } public static void main ( String [ ] args ) { int n = 7 ; int arr [ ] = { 6 , 9 , 1 , 6 , 1 , 3 , 7 } ; System . out . println ( valueofX ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { count ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( count % 2 == 1 ) { ans [ i ] = ans [ i ] + 1 ; } } System . out . println ( ans [ n - 1 ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( s . length ( ) - 1 - i ) ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int findNth ( int n ) { int count = 0 ; int curr = 19 ; while ( true ) { int sum = 0 ; int x = curr ; while ( x > 0 ) { sum = sum + x % 10 ; x = x / 10 ; } if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; curr += 9 ; } return - 1 ; } public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } }
public class GFG { static int findNth ( int n ) { int count = 0 ; for ( int curr = 0 ; curr < n ; curr ++ ) { int sum = 0 ; int x = curr ; while ( x > 0 ) { sum = sum + x % 10 ; x = x / 10 ; } if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; } return - 1 ; } public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } }
public class GFG { static int countNumber ( int N , int S ) { int countElements = 0 ; int currentSum = 0 ; int currSum = 0 ; while ( currSum <= S ) { currSum += N ; N = N - 1 ; countElements = countElements + 1 ; } return countElements ; } public static void main ( String [ ] args ) { int N = 5 , S = 11 ; int count = countNumber ( N , S ) ; System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static void strrmatch ( String str , String pattern , int n , int m ) { if ( m == 0 ) return ; int lookup [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; lookup [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= m ; i ++ ) { for
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { max = Math . max ( max , b [ i ] ) ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( max == 0 ) { System . out . println ( " a ▁ " + sum ) ; } else { System . out . println ( " b ▁ " + sum ) ; } } }
import java . util . * ; public class GFG { static int nCr ( int n , int r ) { int fac [ ] = new int [ n + 1 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i ; int ans = fac [ n ] / ( fac [ n - r ] * fac [ r ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 , k = 3 ; int ans = nCr ( n + k - 1 , k ) + nCr ( k - 1 , n - 1 ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( arr [ i ] - 2 * arr [ i ] ) > Math . abs ( arr [ i ] - 2 * arr [ i ] ) ) { min = Math . abs ( arr [ i ] - 2 * arr [ i ] ) ; max = Math . max ( max , arr [ i ] ) ; } } System . out . println ( max + " ▁ " + min ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int powGCD ( int a , int n , int b ) { for ( int i = 0 ; i < n ; i ++ ) { a = a * a ; } return gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 5 ; int n = 2 ; System . out . println ( powGCD ( a , n , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] f = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ i ] = f [ i ] + f [ i - 1 ] ; } int [ ] f2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f2 [ i ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '8' ) count ++ ; } System . out . println ( Math . min ( n / 11 , count ) ) ; } }
public class GFG { static int sumOfDigit ( int n , int b ) { int unitDigit = 0 ; int sum = 0 ; while ( n > 0 ) { unitDigit = n % b ; sum += unitDigit ; n = n / b ; } return sum ; } public static void main ( String [ ] args ) { int n = 50 ; int b = 2 ; System . out . println ( sumOfDigit ( n , b ) ) ; } }
import java . util . * ; public class GFG { static void printLargestDivisible ( int n , int a [ ] ) { int c0 = 0 , c5 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) c0 ++ ; else c5 ++ ; } c5 = ( c5 / 9 ) * 9 ; if ( c0 == 0 ) System . out . print ( - 1 + " ▁ " ) ; else if ( c5 == 0 ) System . out . print ( 0 + " ▁ " ) ; else { for ( int i = 0 ; i < c5 ; i ++ ) System . out . print ( 5 + " ▁ " ) ; for ( int i = 0 ; i < c0 ; i ++ ) System . out . print ( 0 + " ▁ " ) ; System . out . println ( ) ; } } public static void main
public class GFG { static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { for ( int k = j ; k <= n ; k ++ ) { for ( int l = k ; l <= n ; l ++ ) { if ( i + j + k + l == n ) counter ++ ; } } } return counter ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }
public class GFG { static int numberOfMinutes ( int S , int S1 ) { int Min = 0 ; Min = ( ( S - S1 ) / Math . floor ( S ) ) * 60 ; return Min ; } public static void main ( String [ ] args ) { int S = 30 , S1 = 10 ; System . out . println ( numberOfMinutes ( S , S1 ) + " min " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j =
import java . io . * ; public class GFG { static int onesComplement ( int n ) { int number_of_bits = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) + 1 ) + 1 ; return ( ( 1 << number_of_bits ) - 1 ) ^ n ; } public static void main ( String [ ] args ) { int n = 22 ; System . out . println ( onesComplement ( n ) ) ; } }

public class GFG { static void findPoint ( int x1 , int y1 , int x2 , int y2 ) { System . out . println ( " ( " + 2 * x2 - x1 + " , " + " , " + 2 * y2 - y1 + " ) " ) ; } public static void main ( String [ ] args ) { int x1 = 0 , y1 = 0 , x2 = 1 , y2 = 1 ; findPoint ( x1 , y1 , x2 , y2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( ( max - min ) % 3 + 1 ) ; } } }
import java . util . * ; public class GFG { static void alter ( int x , int y ) { while ( true ) { if ( x == 0 || y == 0 ) break ; if ( x >= 2 * y ) x = x % ( 2 * y ) ; else if ( y >= 2 * x ) y = y % ( 2 * x ) ; else break ; } System . out . println ( " X ▁ = ▁ " + x + " , ▁ " + " Y ▁ = ▁ " + y ) ; } public static void main ( String [ ] args ) { int x = 12 , y = 5 ; alter ( x , y ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { count ++ ; break ; } } } if ( count == n ) { System . out . println ( " - 1 ▁ - 1" ) ; } else { System . out . println ( " - 1 ▁ - 1" ) ; } } } }
public class GFG { static int mod = 1000000007 ; static long inv2 = 500000004 ; static long modulo ( long num ) { long res = 0 ; for ( int i = 0 ; i < num ; i ++ ) res = ( res * 10 + ( num [ i ] - 0 ) ) % mod ; return res ; } static long findSum ( int L , int R ) { long a = modulo ( L ) ; long b = modulo ( R ) ; long l = ( ( a * ( a - 1 ) ) % mod * inv2 ) % mod ; long r = ( ( b * ( b + 1 ) ) % mod * inv2 ) % mod ; long ret = ( r % mod - l % mod ) ; if ( ret < 0 ) ret = ret + mod ; else ret = ret % mod ; return ret ; } public static void main ( String [ ] args ) { int L = "88949273204" ; int R = "98
import java . util . * ; public class GFG { static void unsort ( int l , int r , int a [ ] , int k ) { if ( k < 1 || l + 1 == r ) return ; k -= 2 ; int mid = ( l + r ) / 2 ; int temp = a [ mid - 1 ] ; a [ mid - 1 ] = a [ mid ] ; a [ mid ] = temp ; unsort ( l , mid , a , k ) ; unsort ( mid , r , a , k ) ; } static void arrayWithKCalls ( int n , int k ) { if ( k % 2 == 0 ) System . out . println ( " NO ▁ SOLUTION " ) ; else { int [ ] a = new int [ n + 2 ] ; a [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = i + 1
import java . util . * ; public class GFG { static int mean ( int mid [ ] , int freq [ ] , int n ) { int sum = 0 ; int freqSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + mid [ i ] * freq [ i ] ; freqSum = freqSum + freq [ i ] ; } return sum / freqSum ; } static int groupedSD ( int lower_limit [ ] , int upper_limit [ ] , int freq [ ] , int n ) { int mid [ ]
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 ; System . out . println ( gcd ( a , b ) ) ; } }
public class GFG { static int rectanglearea ( int a , int b ) { if ( a < 0 || b < 0 ) return - 1 ; return 2 * a * b ; } public static void main ( String [ ] args ) { int a = 10 , b = 8 ; System . out . println ( rectanglearea ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int k = n / l ; if ( r * k >= n ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } } }
public class GFG { static int getsum ( int x ) { return ( x * ( x + 1 ) ) / 2 ; } static int countJumps ( int n ) { n = Math . abs ( n ) ; int ans = 0 ; while ( getsum ( ans ) < n || ( getsum ( ans ) - n ) & 1 ) ans ++ ; return ans ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( countJumps ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x1 = ( int ) Math . pow ( i , 2 ) ; int x2 = ( int ) Math . pow ( i , 2 ) ; int x3 = ( int ) Math . pow ( i , 2 ) ; int x4 = ( int ) Math . pow ( i , 2 ) ; int x5 = ( int ) Math . pow ( i , 2 ) ; int x6 = ( int ) Math . pow ( i , 2 ) ; int x7 = ( int ) Math . pow ( i , 2 ) ; int x8 = ( int ) Math . pow ( i , 2 ) ; int x9 = ( int ) Math . pow ( i , 2 ) ; int x10 = ( int ) Math . pow ( i , 2 ) ; int x11 = ( int ) Math . pow ( i , 2 ) ; int x12 = ( int ) Math . pow ( i , 2 ) ; int x13 = ( int ) Math . pow ( i , 2 ) ; int x14 = ( int ) Math . pow ( i , 2 ) ; int x15 = ( int ) Math . pow ( i , 2 ) ; int x16 = ( int ) Math . pow ( i , 2 ) ; int x17 = ( int ) Math . pow ( i
import java . util . * ; public class GFG { static void Reverseorder ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = ( p * 2 ) ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int p = n ; p < n ; p ++ ) { if ( prime [ p ] ) System . out . print ( p + " ▁ " ) ; } } public static void main ( String [ ] args ) { int N = 25 ; System . out . println ( " Prime ▁ number ▁ in ▁ reverse ▁ order " ) ; if ( N == 1 ) System . out . println ( " No ▁ prime ▁ no ▁ exist ▁ in ▁ this ▁ range " ) ; else Reverseorder ( N ) ; } }
public class GFG { static void pattern ( int min_stars , int p_height ) { int p_space = p_height - 1 ; int x = 1 , for ( int i = 0 ; i < p_height ; i ++ ) { for ( int j = p_space ; j < p_space ; j ++ ) System . out . print ( " ▁ " ) ; for ( int k = 0 ; k < min_stars ; k ++ ) System . out . print ( " * " ) ; for ( int n = ( p_height + p_height - 2 ) ; n <= x - 1 ; n ++ ) System . out . print ( " ▁ " ) ; min_stars = min_stars + 2 ; x = x + 2 ; System . out . print ( " " ) ; } } public static void main ( String [ ] args ) { int min_stars = 1 , p_height = 5 ; pattern ( min_stars , p_height ) ; } }

public class GFG { static int distancesum ( int x [ ] , int y [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { sum += Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ; } } return sum ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( distancesum ( x , y , n ) ) ; } }
import java . io . * ; public class GFG { static int MAX = 1000000 ; static int fib ( int n ) { int phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) Math . pow ( phi , n ) / Math . sqrt ( 5 ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } static int sumFibonacci ( int k ) { int l = ( k * ( k - 1 ) ) / 2 ; int r = l + k ; sum = calculateSum ( l , r - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int k = 3 ; System . out . println ( sumFibonacci ( k ) ) ; } }
public class GFG { static int fib ( int n ) { int phi = ( ( 1 + ( 5 * ( 1 / 2 ) ) ) / 2 ) ; return ( phi * phi ) ; } static int calculateSum ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) { sum += fib ( i ) ; } return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }
import java . util . * ; public class GFG { static int fib ( int n ) { int phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) Math . pow ( phi , n ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { ans [ arr [ i ] - 1 ] = i ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == ans [ i ] ) { ans [ i ] = j ; } } } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
import java . util . * ; public class GFG { static int compare
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + b ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . next
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; System . out . println ( sum ) ; } } }
import java . io . * ; public class GFG { static int sumAP ( int n , int d ) { n = n / d ; return ( n ) * ( 1 + n ) * ( d / 2 ) ; } static int sumMultiples ( int n ) { n -- ; return ( int ) sumAP ( n , 2 ) + sumAP ( n , 5 ) - sumAP ( n , 10 ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( sumMultiples ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int t = sc . nextInt ( ) ; if ( t == 0 ) break ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int s = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s - a [ i ] < f ) { ans = i ; break ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int fact ( int num ) { int fact = 1 ; while ( num > 1 ) { fact = fact * num ; num = num - 1 ; } return fact ; } static int catalan ( int n ) { return fact ( 2 * n ) / ( fact ( n ) * fact ( n + 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int k = 0 ; k < n ; k ++ ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ k ] ) s ++ ; } int catalan_leftBST = catalan ( s ) ; catalan_rightBST = catalan ( n - s - 1 ) ; int totalBST = catalan_leftBST * catalan_leftBST ; System . out . println ( totalBST + " ▁ " + catalan_leftB
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] == 1 ) { flag = true ; break ; } } if ( flag ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= arr [ 0 ] ) { ans [ cnt ++ ] = arr [ i ] - arr [ 0 ] ; } else { ans [ cnt ++ ] = arr [ i ] + arr [ 0 ] ; } } System . out . println ( ans [ cnt ] ) ; } } }
import java . util . * ; public class GFG { static int countWays ( int n , int arr [ ] ) { int count [ ] = new int [ n + 1 ] ; count [ 0 ] = 1 ; if ( n == 0 ) return 1 ; for ( int i = 1 ; i <= n ; i ++ ) { int no_ways = 0 ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( i - j >= 0 ) no_ways += count [ i - j ] ; count [ i ] = no_ways ; } count [ n ] = no_ways ; } return count [ n ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 } ; int n = 5 ; System . out . println ( countWays ( n , arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] >= a [ i ] ) { ans = Math . max ( ans , c [ i ] ) ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] arr = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; if ( c - a <= 2 ) { ans = 2 * ( c - a - 2 ) ; } else { ans = 2 * ( c - a - 2 ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= b ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int binarySearch ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; if ( key == arr [ ( mid ) ] ) return mid ; if ( key > arr [ ( mid + 1 ) ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return binarySearch ( arr , low , ( mid - 1 ) , key ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int key = 10 ; System . out . println ( " Index : ▁ " + binarySearch ( arr , 0 , n , key ) ) ; } }
public class GFG { static int equal_xor_sum ( int arr [ ] , int n ) { int sum = 0 ; int Xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + arr [ i ] ; Xor = Xor ^ arr [ i ] ; } if ( sum == Xor ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 7 , 10 } ; int n = arr . length ; equal_xor_sum ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; int count = 0 ; for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] == 1 ) { ans [ count ] = arr [ i ] ; count ++ ; } } for ( int i = 0 ; i < k ; i ++ ) { if ( ans [ count ] == 1 ) { ans [ count ] = arr [ i ] ; count ++ ; } } System . out . println ( ans [ count ] ) ; } }
public class GFG { static void findPairs ( int arr [ ] , int n ) { int cntEven = 0 ; int cntOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) cntEven ++ ; else cntOdd ++ ; } int evenPairs = 0 ; int evenPairs += ( ( cntEven * ( cntEven - 1 ) ) / 2 ) ; int oddPairs = 0 ; int oddPairs += ( cntEven * cntOdd ) / 2 ; System . out . println ( " Even ▁ pairs ▁ = ▁ " + oddPairs ) ; System . out . println ( " Odd ▁ pairs ▁ = ▁ " + evenPairs ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; findPairs ( arr , n )
import java . util . * ; public class GFG { static int minBroadcastRange ( int houses [ ] , int arr [ ] , int n , int m ) { int leftTower = - 1 , rightTower = arr [ 0 ] ; int j , k ; int min_range = Integer . MAX_VALUE ; while ( j < n ) { if ( houses [ j ] < rightTower ) { left = houses [ j ] - leftTower ; right = rightTower - houses [ j ] ; if ( left < right ) min_range = Math . min ( min_range , right
public class GFG { static int getRemainder ( int num , int divisor ) { return ( num - divisor * ( num / divisor ) ) ; } public static void main ( String [ ] args ) { int num = 100 ; int divisor = 7 ; System . out . println ( getRemainder ( num , divisor ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } int [ ] arr3 = new int [ z + 1 ] ; for ( int i = 0 ; i < z + 1 ; i ++ ) { arr3 [ arr1 [ arr1 [ arr1 [ arr1 [ arr1 ] ] ] ] = arr2 [ arr1 [ arr1 [ arr1 ] ] ] ; } int [ ] arr4 = new int [ m + 1 ] ; for ( int i = 0 ; i < m + 1 ; i ++ ) { arr4 [ arr1 [ arr1 [ arr1 [ arr1 ] ] ] = arr2 [ arr1 [ arr1 ] ] ; } int [ ] arr5 = new int [ m + 1 ] ; for ( int i = 0 ; i < m + 1 ; i ++ ) { arr5 [ arr1 [ arr1 [ arr1 ] ] = arr2 [ arr1 [ arr1 ] ] ; } int [ ] arr6 = new int [ m + 1 ] ; for ( int i = 0 ; i < m
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { ans += a [ i ] [ j ] * w ; } else { ans += a [ i ] [ j ] * b [ j ] ; } } } System . out . println ( ans )
public class GFG { static int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; for ( int i = 0 ; i < n ; i ++ ) twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; int common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; twos &= ~ common_bit_mask ; int ones = twos | ( ones & arr [ i ] ) ; ones ^= arr [ i ] ; twos &= ~ common_bit_mask ; int twos = twos | ( twos & arr [ i ] ) ; twos ^= arr [ i ] ; twos &= ~ common_bit_mask ; int ones = twos | ( ones & arr [ i ] ) ; twos ^= arr [ i ] ; twos &= ~ common_bit_mask ; int ones = twos | ( ones & arr [ i ] ) ; twos ^= arr [ i ] ; twos &= ~ common_bit_mask ; int ans = ones ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( " The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ " + getSingle ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int maxdiff ( int arr [ ] , int n ) { int freq [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = Math . max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] ) ; else if ( freq [ arr [ i ] > freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = Math . max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( a
import java . util . * ; public class GFG { static void makeAP ( int arr [ ] , int n ) { int initial_term , common_difference ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else if ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) { initial_term = arr [ 0 ] ; common_difference = arr [ 1 ] - arr [ 0 ] ; } else if ( ( arr [ 2 ] - arr [ 0 ] ) == arr [ 3 ] - arr [ 2 ] ) { initial_term = arr [ 2 ] - arr [ 1 ] ; initial_difference = arr [ 2 ] - arr [
public class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y + x ) % ( y ^ x ) == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countPairs ( n ) ) ; } }
public class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y * x ) % ( y + x ) == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( countPairs ( n ) ) ; } }
import java . util . * ; public class Solution { public int longestPalindrome ( String s ) { int ans = 0 ; char [ ] [ ] map = new char [ s . length ( ) ] [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { map [ i ] = s . charAt ( i ) ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( map [ i ] % 2 == 0 ) ans ++ ; else ans += map [ i ] / 2 * 2 ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " abccccccdd " ; int out = sObj . longestPalindrome ( s ) ; System . out . println ( out ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = k ; i < k ; i ++ ) res *= ( n - i ) ; res /= ( i + 1 ) ; return ( int ) res ; } static int catalan ( int n ) { int c = binomialCoeff ( 2 * n , n ) ; return ( c / ( n + 1 ) ) ; } static int findWays ( int n ) { if ( n % 2 == 0 ) return 0 ; return catalan ( n / 2 ) ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( " Total ▁ possible ▁ expressions ▁ of ▁ length ▁ " + n + " ▁ is ▁ " + findWays ( n ) ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int i = 0 ; while ( true ) { if ( a - b * i + c - d * e == 0 || a - b * i == 0 || b - c * i == 0 || c - d * e == 0 || d - e * i == 0 || d - e * i == 0 ) { System . out . println ( " YES " ) ; System . exit ( 0 ) ; } if ( a - b * i + c - d * e == 0 || a - b * i == 0 || b - c * i == 0 || c - d * e == 0 ) { System . out . println ( " NO " ) ; System . exit ( 0 ) ; } i ++ ; } System . out . println ( " NO " ) ; } } }
public class GFG { static boolean isSumOfPowersOfTwo ( int n ) { if ( n % 2 == 1 ) return false ; else return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isSumOfPowersOfTwo ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int countNumber ( int n ) { int result = 0 ; for ( int i = 1 ; i <= 10 ; i ++ ) { String s [ ] = new String [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { s [ i ] = String . valueOf ( i ) ; if ( i <= n ) s [ i ] += s [ i ] ; while ( s [ s [ i ] . length ( ) - 1 ] . length ( ) != 0 ) { int tp = s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ ] ] ] ] ] ] ] ] ; s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s ] ] ] ] ] ] ] = tp ) ; for ( int j = tp % 10 ; j <= 9 ; j += tp ) { int x = tp * 10 + j ; if ( x <= n ) s [ s [ s [ s [ s [ s [ s [ s [ s ] ] ] ] ] = x ; result ++ ; } } } } return result ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( count
import java . util . * ; public class GFG { static int N = 100 ; static int maxAverageOfPath ( int cost [ ] [ ] , int N ) { int dp [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( int i = 1 ; i <= N ; i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( int j = 1 ; j <= N ; j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= N ; j ++ ) dp [ 0 ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int u = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int ans = 0 ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc .
public class GFG { static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; prefix [ ] = new int [ n ] ; suffix [ ] = new int [ n ] ; seen [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ )
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int TURNS = 15 ; public String run ( ) { int [ ] [ ] ways = new int [ TURNS + 1 ] [ TURNS + 1 ] ; for ( int i = 1 ; i <= TURNS ; i ++ ) { for ( int j = 1 ; j <= TURNS ; j ++ ) { ways [ i ] [ j ] = 1 ; } } int numer = sum ( ways [ TURNS ] [ i ] ) ; int denominator = sum ( ways [ TURNS ] [ i ] ) ; return numer / denominator ; } private static int sum ( int [ ] [ ] ways ) { int numer = 0 ; for ( int [ ] [ ] p : ways ) { numer += p [ 0 ] [ 0 ] * p [ 1 ] ; } return numer / numer ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] == 1 ) { ans = Math . max ( ans , c [ i ] ) ; } }
import java . util . * ; public class GFG { static void merge ( int ar1 [ ] , int ar2 [ ] , int m , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { int last = ar1 [ m - 1 ] ; int j = m - 2 ; while ( j >= 0 && ar1 [ j ] > ar2 [ i ] ) { ar1 [ j + 1 ] = ar1 [ j ] ; j -- ; } if ( j != m - 2 || last > ar2 [ i ] ) { ar1 [ j + 1 ] = ar2 [ i ] ; ar2 [ i ] = last ; } } int ar1 [ ] = { 1 , 5 , 9 , 10 , 15 , 20 } ; int ar2 [ ] = { 2 , 3 , 8 , 13 } ; int m = ar1 . length ; int n = ar2 . length ; merge ( ar
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int sameRemainder ( int a , int b , int c ) { int a1 = ( b - a ) ; int b1 = ( c - b ) ; c1 = ( c - a ) ; return gcd ( a1 , gcd ( b1 , c1 ) ) ; } public static void main ( String [ ] args ) { int a = 62 , b = 132 , c = 237 ; System . out . println ( sameRemainder ( a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int sum = 0 ; if ( a == b ) { sum += c ; } else if ( a == c ) { sum += d ; } else { sum += d - a ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int [ ] [ ] [ ] dp = new int [ 5 ] [ 5 ] [ 5 ] ; static int countWaysUtil ( int n , int parts , int nextPart ) { if ( parts == 0 && n == 0 ) return 1 ; if ( n <= 0 || parts <= 0 ) return 0 ; if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) return dp [ n ] [ nextPart ] [ parts ] ; int ans = 0 ; for ( int i = nextPart ; i <= n ; i ++ ) { ans += countWaysUtil ( n - i , parts - 1 , i ) ; } dp [ n ] [ nextPart ] [ parts ] = ans ; return ( ans ) ; } static int countWaysUtil ( int n , int parts , int nextPart ) { if ( parts == 0 && n == 0 ) return 1 ; if ( n <= 0 || parts <= 0 ) return 0 ; if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) return dp
public class GFG { static int find_k ( int a , int b ) { if ( ( a + b ) % 2 == 0 ) return ( ( a + b ) / 2 ) ; return - 1 ; } public static void main ( String [ ] args ) { int a = 2 , b = 16 ; System . out . println ( find_k ( a , b ) ) ; } }


import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' a ' ) { s . substring ( i , i + 1 ) ; } else { s . substring ( i , i + 1 ) ; } } System . out . println ( s ) ; } } }
import java . util . * ; public class GFG { static int findMinimumSubsequences ( int A [ ] , int B [ ] ) { int numberOfSubsequences = 1 ; int sizeOfB
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] > arr [ j ] ) { max = Math . max ( max , arr [ i ] ) ; min = Math . min ( min , arr [ j ] ) ; } } } System . out . println ( max + " ▁ " + min ) ; } } }
public class GFG { static void FindRank ( int arr [ ] , int length ) { System . out . print ( 1 + " ▁ " ) ; for ( int i = 1 ; i < length ; i ++ ) { int rank = 1 ; for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) rank = rank + 1 ; } System . out . print ( rank + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 88 , 14 , 69 , 30 , 29 , 89 } ; int length = arr . length ; FindRank ( arr , length ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int
public class GFG { static int firstkdigits ( int n , int k ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( product / pow ( 10 , k ) ) != 0 ) { product = product / 10 ; } return product ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == 0 && b == 0 ) break ; int gcd = gcd ( a , b ) ; System . out . println ( gcd ) ; } } public static int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int complement ( int num ) { int i = 0 ; int len = 0 ; int comp = 0 ; temp = num ; while ( true ) { len ++ ; num = num / 10 ; if ( Math . abs ( num ) == 0 ) break ; } num = temp ; comp = ( int ) Math . pow ( 10 , len ) - num ; return comp ; } public static void main ( String [ ] args ) { System . out . println ( complement ( 25 ) ) ; System . out . println ( complement ( 456 ) ) ; } }
import java . io . * ; public class GFG { static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; t = ( ( ( ( ( double ) x ^ n ) ) * ( double ) x ^ n ) ) ; return ( ( ( double ) x ^ n ) * ( double ) x ^ n ) ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } }
public class GFG { static int minOperations ( int arr [ ] , int n ) { int result = 0 ; int freq [ ] = new int [ 1000001 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; int maxi = Math . max ( arr ) ; for ( int i = 1 ; i <= maxi ; i ++ ) { if ( freq [ i ] != 0 ) { for ( int j = i * 2 ; j <= maxi ; j += i ) freq [ j ] = 0 ; result ++ ; } } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 2 , 4 , 4 , 4 , 4 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int totalWays ( int N , int M , int X ) { int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ; if ( X == 1 ) dp [ 0 ] [ 0 ] = 1 ; else dp [ 0 ] [ 1 ] = 0 ; if ( X == 1 ) dp [ 1 ] [ 0 ] = 1 ; else dp [ 1 ] [ 1 ] = M - 1 ; for ( int i = 2 ; i <= N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i -
import java . util . * ; public class GFG { static int getMinNum ( int a , int b , int c ) { if ( c < a || c > b ) return c ; int x = ( b / c ) * c ; return x ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 , c = 4 ; System . out . println ( getMinNum ( a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' I ' ) { max = Math . max ( max , i ) ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 0 && m == 0 ) break ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j -
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] + a [ i ] ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j + a [ i ] > n ) { dp [ i ] [ j + a [ i ] ] = Math . max ( dp [ i ] [ j + a [ i ] ] , dp [ i ] [ j + a
public class GFG { static int countWays ( int arr [ ] , int m , int N ) { int count [ ] = new int [ N + 1 ] ; count [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ; } } return count [ N ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 6 } ; int m = arr . length ; int N = 7 ; System . out . println ( " Total ▁ number ▁ of ▁ ways ▁ = ▁ " + countWays ( arr , m , N ) ) ; } }
public class GFG { static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
import java . util . * ; public class GFG { static int countFreq ( int a [ ] , int n ) { HashMap < Integer , Integer > hm = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) hm . put ( a [ i ] , hm . get ( a [ i ] ) + 1 ) ; int cumul = 0 ; for ( int i = 0 ; i < n ; i ++ ) cumul += hm . get ( a [ i ] ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += hm . get ( a [ i ] ) ; if ( hm . get ( a [ i ] ) > 0 ) System . out . println ( a [ i ] + " - > " + cumul ) ; hm . put ( a [ i ] , 0 ) ; return 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 2 , 4 , 2 , 1 } ; int n = a . length ; countFreq ( a , n ) ; } }
import java . util . * ; public class GFG { static void possibleTripletInRange ( int L , int R ) { boolean flag = false ; int possibleA = 0 , possibleB = 0 , possibleC = 0 ; int numbersInRange = ( R - L + 1 ) ; if ( numbersInRange < 3 ) { flag = false ; } else if ( numbersInRange > 3 ) { flag = true ;
import java . util . * ; public class GFG { static char conversion ( charSet , char str1 ) { String s2 = " " ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) s2 += alphabets [ charSet . indexOf ( i ) ] ; return s2 ; } public static void main ( String [ ] args ) { char set = ' a ' ; char str1 = ' e ' ; System . out . println ( conversion ( set , str1 ) ) ; } }
import java . util . * ; public class GFG { static void generateNumber ( int count , int [ ] a , int n , int [ ] num , int k ) { if ( k == count ) { int s [ ] = num ; return ; } for ( int i = 0 ; i < n ; i ++ ) { generateNumber ( count + 1 , a , n , num + a [ i ] , k ) ; } } static void printDistinctIntegers ( int k , int [ ] a , int n ) { generateNumber ( 0 , a , n , 0 , k ) ; System . out . println ( " The ▁ " + ( n + 1 ) + " ▁ distinct ▁ integers ▁ are : ▁ " ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] a = { 3 , 8 , 17 , 5 } ; int n = a . length ; int k = 2 ; printDistinctIntegers ( k , a , n ) ; } }
import java . util . * ; public class GFG { static int product ( int x ) { int prod = 1 ; while ( x > 0 ) { prod *= ( x % 10 ) ; x /= 10 ; } return prod ; } static int findNumber ( int l , int r ) { String str = l + " " ; String str1 = r + " " ; int ans = r ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == '0' ) continue ; String str2 = str . substring ( i
import java . util . * ; public class GFG { static int [ ] isPrime = new int [ 100005 ] ; static void sieveOfEratostheneses ( ) { isPrime [ 1 ] = false ; for ( int i = 2 ; i * i < 100005 ; i ++ ) { if ( isPrime [ i ] ) { int j = 2 * i ; while ( j < 100005 ) { isPrime [ j ] = false ; j += i ; } } } } static int findPrime ( int n ) { int num = n + 1 ; while ( num != 0 ) { if ( isPrime [ num ] ) return num ; num ++ ; } return 0 ; } static int minNumber ( int arr [ ] ) { sieveOfEratostheneses ( ) ; int s = 0 ; for ( int i = 0
public class GFG { static int MAX = 25 ; static int getMinSum ( int arr [ ] , int n ) { int bits_count [ ] = new int [ MAX ] ; int max_bit = 0 ; int sum = 0 ; for ( int d = 0 ; d < n ; d ++ ) { int rem = d % 2 ; int e = e / 2 ; if ( rem == 1 ) { bits_count [ e ] ++ ; } else { bits_count [ e ] = 0 ; } max_bit = Math . max ( max_bit , e ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = ( int ) Math . pow ( 2 , d ) ; if ( bits_count [ d ] > n / 2 ) { ans = ans
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ? ' ) { count ++ ; } else { if ( s . charAt ( i ) == ' ▁ ' ) { count ++ ; } else { if ( s . charAt ( i ) == ' . ' ) { count ++ ; } else { count += 1 ; } } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { ans += a [ i ] ; a [ i ] = b [ i ] ; b [ i ] = a [ i ] ; } } System . out . println ( ans ) ; } } }
public class GFG { static int findMaximumNum ( int arr [ ] , int n ) { int i = n ; while ( i >= 1 ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i <= arr [ j ] ) count ++ ; } if ( count >= i ) return i ; i -- ; } return 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 8 , 10 } ; int n = arr . length ; System . out . println ( findMaximumNum ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; } int [ ] arr3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr3 [ i ] = arr2 [ i ] + arr3 [ i ] ; } int [ ] arr4 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr4 [ i ] = arr3 [ i ] + arr4 [ i ] ; } int [ ] arr5 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr5 [ i ] = arr5 [ i ] + arr5 [ i ] ; } int [ ] arr6 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr6 [ i ] = arr6 [ i ] + arr6 [ i ] ; } int [ ] arr7 = new int
import java . util . * ; public class GFG { static int solve ( int A [ ] , int n ) { int [ ] dp = new int [ n ] ; int flag = 1 ; int sum = 0 ; for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] p = new int [ 8 ] [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { p [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ 8 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( m == 0 && n == 0 ) break ; int [ ] [ ] a = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) ; } } int [ ] [ ] c = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { c [ i ] [ j ] = ( c [ i - 1 ] [ j ] + c [ i - 1 ] [ j - 1 ] ) ; } } int [ ] [ ] dp2 = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp2 [ i ] [ j ] = ( dp2 [ i - 1 ] [ j ] + dp2 [ i - 1 ] [ j - 1 ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( a > b ) { ans = Math . max ( 0 , Math . max ( a - b , c - d ) ) ; } else { ans = Math . max ( 0 , Math . max ( a - b , c - d ) ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void calculate ( int a [ ] , int b [ ] , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] != 0 ) mul *= b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { int x = Math . floor ( a [ i ] / mul ) ; System . out . print ( x + " ▁ " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 100 , 8 } ; int b [ ] = { 2 , 3 } ; int n = a . length ; int m = b . length ; calculate ( a , b , n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } int [ ] b = new int [ n ] ; int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; sum2 += b [ i ] ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; sum2 += c [ i ] ; } System . out . println ( sum - sum2 - sum1 + " ▁ " + sum1 - sum2 + " ▁ " + sum1 - sum2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int min = Integer . MAX_VALUE ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int c = sc . nextInt ( ) ; if ( s . charAt ( i ) == ' > ' ) { min = Math . min ( min , c ) ; } else { max = Math . max ( max , c ) ; } } System . out . println ( min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 1 ; while ( n > 0 ) { ans *= 2 ; n -- ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] d = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int t = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( d [ j ] > t ) { t = d [ j ] ; } } if ( t < a [ i ] ) { ans ++ ; } } System . out . println (
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int min = Integer . parseInt ( s . substring ( 0 , 2 ) ) ; int hour = Integer . parseInt ( t . substring ( 0 , 2 ) ) ; int minute = Integer . parseInt ( t . substring ( 3 , 5 ) ) ; int second = Integer . parseInt ( s . substring ( 6 , 8 ) ) ; int ans = 0 ; if ( hour < 10 ) { ans = ( minute + ( hour % 10 ) ) / 60 ; } else { ans = ( minute + ( hour % 10 ) ) % 60 ; } if ( min < 10 ) { ans = ( second + ( min % 10 ) ) / 60 ; } else { ans = ( second + ( min % 10 ) ) % 60 ; } System . out . println ( ans ) ; sc . close ( ) ; } }
public class GFG { static int longestAlternatingSubarray ( int a [ ] , int n ) { int longest = 1 ; int cnt = 1 ; int i = 1 ; while ( i < n ) { if ( a [ i ] * a [ i - 1 ] < 0 ) cnt ++ ; else cnt = 1 ; i ++ ; } return longest ; } public static void main ( String [ ] args ) { int a [ ] = { - 5 , - 1 , - 1 , 2 , - 2 , - 3 } ; int n = a . length ; System . out . println ( longestAlternatingSubarray ( a , n ) ) ; } }
public class GFG { static void checkTypeOfTriangle ( int a , int b , int c ) { int sqa = ( int ) Math . pow ( a , 2 ) ; int sqb = ( int ) Math . pow ( b , 2 ) ; int sqc = ( int ) Math . pow ( c , 2 ) ; if ( sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb ) { System . out . println ( " Right - angled ▁ Triangle " ) ; } else if ( sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb ) { System . out . println ( " Obtuse - angled ▁ Triangle " ) ; } else { System . out . println ( " Acute - angled ▁ Triangle " ) ; } } public static void main ( String [ ] args ) { int a = 2 , b = 2 , c = 2 ; checkTypeOfTriangle ( a , b , c ) ; } }
public class GFG { static int MAX = 100 ; static int countSubsequence ( String s , int n ) { int cntG = 0 , cntF = 0 ; int result = 0 ; int C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' G ' ) cntG ++ ; result += C ; continue ; } if ( s . charAt ( i ) == ' F ' ) cntF ++ ; else cntF ++ ; System . out . println ( result ) ; } public static void main ( String [ ] args ) { String s = " GFGFG " ; int n = s . length ( ) ; countSubsequence ( s , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { int x = a [ i ] [
import java . io . * ; public class GFG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . floor ( n / 3.0 ) ; n -= largest * largest * largest ; steps ++ ; } return steps ; } public static void main ( String [ ] args ) { int n = 150 ; System . out . println ( countSteps ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] [ j ] =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += arr [ i ] ; System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int bitsoncount ( int x ) { return ( int ) ( Math . pow ( x , 2 ) ) ; } static int find_count ( int arr [ ] ) { int ans = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int x = bitsoncount ( arr [ i ] ) ; if ( i % x == 0 ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; System . out . println ( find_count ( arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( sum % ( n + 1 ) != 0 ) { System . out . println ( " NO " ) ; return ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] - sum ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] -= sum ; } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] > 0 || b [ i ] % n != 0 ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
public class GFG { static int maxProd ( int N ) { if ( N == 0 ) return 1 ; if ( N < 10 ) return N ; return max ( maxProd ( N / 10 ) * ( N % 10 ) , maxProd ( N / 10 - 1 ) * 9 ) ; } public static void main ( String [ ] args ) { int N = 390 ; System . out . println ( maxProd ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { max = Math . max ( max , arr [ i ] ) ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 * n ; j ++ ) { dp [ i ] [ j ] = Math . abs ( a [ i ] - b [ j ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = Math . abs ( a [ i ] - b [ 0 ] ) ; dp [ i ] [ 1 ] = Math . abs ( a [ i ] - b [ 1 ] ) ; } System
import java . io . * ; public class GFG { static int countNonDecreasing ( int n ) { int N = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count = ( int ) ( count * ( N + i - 1 ) ) ; count = ( count / i ) ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countNonDecreasing ( n ) ) ; } }
public class GFG { static int reduceString ( String s , int l ) { int count = 1 ; int steps = 0 ; for ( int i = 1 ; i < l ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) count ++ ; else steps += ( int ) ( count / 2 ) ; count = 1 ; } steps += ( int ) ( count / 2 ) ; return steps ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; int l = s . length ( ) ; System . out . println ( reduceString ( s , l ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a <= b ) { System . out . println ( " Impossible " ) ; return ; } int [ ] [ ] dp = new int [ a + 1 ] [ b + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { if ( i == j ) continue ; if ( dp [ i ] [ j ] == 0 ) continue ; dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ; } } System . out . println ( " ! ▁ " + dp [ a
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j ] ; } } System . out . println ( dp [ n ] [ m ] ) ; } }
import java . util . * ; public class GFG { static long mod = 1000000007 ; static long mult ( long a , long b ) { return ( ( a % mod ) * ( b % mod ) ) % mod ; } static long calculate_factors ( long n ) { long cnt = 0 ; long ans = 1 ; while ( n % 2 == 0 ) { cnt ++ ; n = n / 2 ; } if ( cnt > 0 ) ans = mult ( ans , ( cnt + 1 ) ) ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { cnt = 0 ; while ( n % i == 0 ) { cnt ++ ; n = n / i ; } if ( cnt > 0 ) ans = mult ( ans , ( cnt + 1 ) ) ; } if ( n > 2 ) ans = mult
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' . ' ) { count ++ ; } else { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int maxAbsDiff ( int arr [ ] , int n ) { int minEle = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minEle = min ( minEle , arr [ i ] ) ; maxEle = max ( maxEle , arr [ i ] ) ; } return ( maxEle - minEle ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 5 , 3 } ; int n = arr . length ; System . out . println ( maxAbsDiff ( arr , n ) ) ; } }

import java . util . * ; public class GFG { static int minRemove ( int a [ ] , int b [ ] , int n , int m ) { HashMap < Integer , Integer > countA = new HashMap < > ( ) ; HashMap < Integer , Integer > countB = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { countA . put ( a [ i ] , countA . get ( a [ i ] ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { countB . put ( b [ i ] , countB . get ( b [ i ] ) + 1 ) ; } int res = 0 ; for ( int x = 0 ; x < countA . size ( ) ; x ++ ) { if ( countA . get ( x ) == countB . get ( x ) ) { res += Math . min ( countA . get ( x ) , countB . get ( x ) ) ; } } return res ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 4 } ; int b [ ] = { 2 , 3 , 4
import java . io . * ; public class GFG { static int count ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i < r ; i ++ ) { if ( i < 10 ) cnt ++ ; else { int n = i % 10 ; int k = i ; while ( k >= 10 ) { k = k / 10 ; } if ( n == k ) cnt ++ ; } } return ( cnt ) ; } public static void main ( String [ ] args ) { int L = 2 , R = 60 ; System . out . println ( count ( L , R ) ) ; L = 1 ; R = 1000 ; System . out . println ( count ( L , R ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int bit ( int x ) { int ans = 0 ; while ( x > 0 ) { x /= 2 ; ans ++ ; } return ans ; } static boolean check ( int d , int x ) { if ( bit ( x / d ) <= bit ( d ) ) return true ; return false ; } static int bs ( int n ) { int l = 1 , r = ( int ) Math . sqrt ( n ) ; while ( l < r ) { int m = ( l + r ) / 2 ; if ( check ( m , n ) ) r = m ; else l = m + 1 ; } if ( check ( l , n ) == false ) return ( l + 1 ) ; else return ( l + 1 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( count
import java . util . * ; public class GFG { static int INT_MAX = 100000000 ; static int minimalSteps ( String s , int n ) { int [ ] dp = new int [ n ] ; String s1 = " " ; s1 += s . charAt ( 0 ) ; s1 += s . charAt ( 1 ) ; for ( int i = 1 ; i < n ; i ++ ) s1 += s . charAt ( i ) ; dp [ 0 ] = 1 ; s1 += s . charAt ( 0 ) ; for ( int i = 1 ; i < n ; i ++ ) s1 += s . charAt ( i ) ; dp [ i ] = Math . min ( dp [ i ] , dp [ i - 1 ] + 1 ) ; if ( s1 == s2 ) dp [ i * 2 + 1 ] = Math . min ( dp [ i ] + 1 , dp [ i * 2 + 1 ] ) ; return dp [ n - 1 ] ; } public static void main ( String [ ] args ) { String s = " aaaaaaaa " ; int n = s . length ( ) ; System . out . println ( minimalSteps
import java . util . * ; public class GFG { static boolean checkUtil ( int num , int dig , int base ) { if ( dig == 1 && num < base ) return true ; if ( dig > 1 && num >= base ) return checkUtil ( num / base , - dig , base ) ; return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base <= 33 ; base ++ ) { if ( checkUtil ( num , dig , base ) ) return true ; } return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base <= 33 ; base ++ ) { if ( checkUtil ( num , dig , base ) ) return true ; } return false ; } public static void main ( String [ ] args ) { int num = 8 , dig = 3 ; if ( checkUtil ( num , dig ) == true ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } static void getMin ( int arr [ ] , int i , int j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { min = i ; break ; } max = Math . max ( max , a [ i ] ) ; } int [ ] b = new int [ max ] ; for ( int i = 0 ; i < max ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ min ] ; for ( int i = 0 ; i < min ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { double a = sc . nextDouble ( ) ; double b = sc . nextDouble ( ) ; double c = sc . nextDouble ( ) ; double d = sc . nextDouble ( ) ; double e = sc . nextDouble ( ) ; double f = sc . nextDouble ( ) ; double h = sc . nextDouble ( ) ; double g = sc . nextDouble ( ) ; double hh = Math . abs ( a - c ) * ( b - d ) ; double mm = Math . abs ( a - c ) * ( b - d ) ; double ans = Math . min ( Math . abs ( hh - mm ) , Math . abs ( h - c ) * ( b - d ) ) ; System . out . println ( ans ) ; } } }
public class GFG { static int nthXorFib ( int n , int a , int b ) { if ( n == 0 ) return a ; if ( n == 1 ) return b ; if ( n == 2 ) return a ^ b ; return nthXorFib ( n % 3 , a , b ) ; } public static void main ( String [ ] args ) { int a = 1 , b = 2 ; int n = 10 ; System . out . println ( nthXorFib ( n , a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { max = Math . max ( max , b [
public class GFG { static int Area ( int a ) { if ( a < 0 ) return - 1 ; int h = 1.268 * a ; int A = 0.70477 * Math . pow ( h , 2 ) ; return A ; } public static void main ( String [ ] args ) { int a = 5 ; System . out . print ( Area ( a ) + " \n " ) ; } }
import java . util . * ; public class GFG { static int compute ( ) { int ans = 0 ; Stack < Integer > stack = new Stack < Integer > ( ) ; while ( stack . size ( ) > 0 ) { int left = stack . pop ( ) ; int right = stack . pop ( ) ; int d = left + right ; if ( d <= 12000 ) { int n = left + right ; ans ++ ; stack . add ( n , d , right ) ; stack . add ( ( left + right ) , n , d ) ; } } return ans ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( 2 * n / 2 ) ; } else { System . out . println ( 0 ) ; } } }
public class GFG { static int sieve ( boolean prime [ ] , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } return sumPrime ( prime ) ; } static int sumPrime ( int d ) { int maxVal = ( int ) Math . pow ( 10 , d ) - 1 ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) { sum += i ; } } return sum ; } public static void main ( String [ ] args ) { int d = 3 ; System . out . println ( sumPrime ( d ) ) ; } }
import java . util . * ; public class GFG { static int sieve ( boolean prime [ ] , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } return sieve ( prime , n ) ; } static int sumPrime ( int d ) { int maxVal = ( int ) Math . pow ( 2 , d ) ; int [ ] prime = new int [ maxVal + 1 ] ; sieve ( prime , maxVal ) ; int sum = 0 ; for ( int i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int d = 8 ; System . out . println ( sumPrime ( d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == c [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
public class GFG { static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 ; int max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } }
public class GFG { static int countMaxContiguous ( int arr [ ] , int n ) { int current_max = 0 ; int max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) current_max = 0 ; else current_max += 1 ; max_so_far = Math . max ( current_max , max_so_far ) ; } return max_so_far ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 4 , 3 , 8 , 9 } ; int n = arr . length ; System . out . println ( countMaxContiguous ( arr , n ) ) ; } }
public class GFG { static double cubeSide ( double h , double r ) { if ( h < 0 && r < 0 ) return - 1 ; double a = ( ( h * r * Math . sqrt ( 2 ) ) / ( h + Math . sqrt ( 2 ) * r ) ) ; return a ; } public static void main ( String [ ] args ) { double h = 5 , r = 6 ; System . out . println ( cubeSide ( h , r ) + " \n " ) ; } }
import java . io . * ; public class GFG { static void pattern ( int rows_no ) { for ( int i = 1 ; i <= rows_no ; i ++ ) { for ( int k = 1 ; k <= i ; k ++ ) System . out . print ( " ▁ " ) ; for ( int j = i ; j <= rows_no ; j ++ ) System . out . print ( j ) ; System . out . print ( " \n " ) ; for ( int i = 0 ; i < rows_no - 1 ; i ++ ) System . out . print ( " ▁ " ) ; System . out . print ( " \n " ) ; for ( int i = 0 ; i < rows_no - 1 ; i ++ ) System . out . print ( " ▁ " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; for ( int i = 0 ; i < rows_no - 1 ; i ++ ) System . out . print ( " ▁ " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; for ( int i = 0 ; i < rows_no - 1 ; i ++ ) System . out . print ( " ▁ "
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += a [ j ] ; } min = Math . min ( min , sum ) ; } System . out . println ( min ) ; } }
public class GFG { static int check_digits ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) % 2 == 0 ) return 0 ; n = n / 10 ; } return 1 ; } static int smallest_number ( int n ) { int i ; while ( true ) { if ( check_digits ( i ) ) return i ; i ++ ; } } public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallest_number ( N ) ) ; } }
public class GFG { static int check_digits ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) % 2 == 1 ) return 0 ; n = n / 10 ; } return 1 ; } static int smallest_number ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( check_digits ( i ) == 1 ) return i ; } return 0 ; } public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallest_number ( N ) ) ; } }
import java . io . * ; public class GFG { static void triangular_series ( int n ) { int j = 1 , k = 1 ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( k + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 5 ; triangular_series ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans [ count ] = i ; count ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] != 0 ) { count ++ ; ans [ i ] = ans [ i ] + 1 ; } } System . out . println ( count ) ; } }
public class GFG { static int findPosition ( int k , int n ) { int f1 = 0 , f2 = 1 , i = 2 ; while ( i != 0 ) { f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) return n * i ; i ++ ; } return n * i ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 4 ; System . out . println ( " Position ▁ of ▁ n " + " th ▁ multiple ▁ of ▁ k ▁ in ▁ Fibonacci ▁ Series ▁ is ▁ " + findPosition ( k , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( s . charAt ( i - 1 ) == s . charAt ( j - 1 ) ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } else { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } } System . out . println ( dp [ n ] [ 2 ] ) ; } }
public class GFG { static int countMinimumMoves ( int arr [ ] , int n , int k ) { for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != arr [ k - 1 ] ) return - 1 ; } for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != arr [ k - 1 ] ) return i + 1 ; } return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int K = 4 ; int n = arr . length ; System . out . println ( countMinimumMoves ( arr , n , K ) ) ; } }
public class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y % 2 == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y % 2 == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } public static void main ( String [ ] args ) { int a = 5 , b = 4 , n = 2 ; System . out . println ( power ( a , b , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int ans = 0 ; while ( t -- > 0 ) { int tm = sc . nextInt ( ) ; int tq = sc . nextInt ( ) ; int tt = tm / q ; int ttq = tq / s ; ans += tt * ttq ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( ( n - 2 ) * ( n - 2 ) ) ; } }
import java . util . * ; public class GFG { static int countIdenticalRows ( int mat [ ] [ ] ) { int count = 0 ; for ( int i = 0 ; i < mat . length ; i ++ ) { int hs = dict ( ) ; for ( int j = 0 ; j < mat [ i ] . length ; j ++ ) { hs [ mat [ i ] [ j ] ] = 1 ; } if ( hs == 1 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 1 , 1 } , { 1 , 2 , 3 } , { 5 , 5 , 5 } } ; System . out . println ( countIdenticalRows ( mat ) ) ; } }
import java . util . * ; public class GFG { static void createSorted ( int [ ] a , int n ) { int [ ] b = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { b [ j ] = a [ j ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( b [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int [ ] a = { 2 , 5 , 4 , 9 , 8 } ; int n = a . length ; createSorted ( a , n ) ; } }
import java . util . * ; public class GFG { static int countTotalDistinct ( String str ) { HashSet < Character > cnt = new HashSet < > ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { String temp = " " ; for ( int j = 0 ; j < str . length ( ) ; j ++ ) { temp = temp + str . charAt ( j ) ; ans = set ( ) ; for ( int j = i ; j < str . length ( ) ; j ++ ) { temp = temp + str . charAt ( j ) ; ans . add ( str . charAt ( j ) ) ; if ( temp != ' . ' ) cnt . add ( temp ) ; } } } return cnt . size ( ) ; } public static void main ( String [ ] args ) { String str = " ABCA " ; System . out . println ( countTotalDistinct ( str ) ) ; } }
import java . io . * ; public class GFG { static int firstDigit ( int n ) { int digits = ( int ) ( Math . log10 ( n ) ) ; n = ( int ) ( n / Math . pow ( 10 , digits ) ) ; return n ; } static int lastDigit ( int n ) { return ( n % 10 ) ; } public static void main ( String [ ] args ) { int n = 98562 ; System . out . println ( firstDigit ( n ) + " ▁ " + lastDigit ( n ) ) ; System . out . println ( lastDigit ( n ) ) ; } }
import java . util . * ; public class GFG { static void removeZeros ( int a [ ] , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) ind = i ; break ; } if ( ind == - 1 ) System . out . println ( " Array ▁ has ▁ leading ▁ zeros ▁ only " ) ; else { int b [ ] = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) b [ i ] = a [ ind + i ] ; for ( int i = 0 ; i < n - ind ; i ++ ) System . out . print ( b [ i ] + " ▁ " ) ; } int a [ ] = { 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } }
import java . util . * ; public class GFG { static int find_maxm ( int arr [ ] , int n ) { int mpp [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == mpp [ arr [ i ] ] ) mpp [ arr [ i ] ] ++ ; else mpp [ arr [ i ] ] = 1 ; } int ans = 0 ; for ( int value = 0 ; value < mpp . length ; value ++ ) { if ( value == mpp [ arr [ i ] ] ) ans = Math . max ( ans , value ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 2 , 2 , 3 , 4 , 3 } ; int n = arr . length ; System . out . println ( find_maxm ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . next
public class GFG { static int sumOfDigitsSingle ( int x ) { int ans = 0 ; while ( x > 0 ) ans += x % 10 ; x /= 10 ; } static int closest ( int x ) { int ans = 0 ; while ( ans * 10 + 9 <= x ) ans = ans * 10 + 9 ; return ans ; } static int sumOfDigitsTwoParts ( int N ) { int A = closest ( N ) ; return sumOfDigitsSingle ( A ) + sumOfDigitsSingle ( N - A ) ; } public static void main ( String [ ] args ) { int N = 35 ; System . out . println ( sumOfDigitsTwoParts ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] > max ) { max = a [ i ] [ j ] ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int ans = Math . max ( Math . abs ( n - r ) , Math . abs ( m - c ) ) ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int c = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] - arr [ i + 1 ] > 1 ) { c ++ ; break ; } } if ( c == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static double cal_sin ( double n ) { double accuracy = 0.0001 ; double n = n * ( 3.142 / 180.0 ) ; double x1 = n ; double sinx = n ; double cosval = Math . cos ( n ) ; double i = 1 ; while ( true ) { double denominator = 2 * i * ( 2 * i + 1 ) ; double x1 = - x1 * n * n / denominator ; double sinx = sinx + x1 ; double i = i + 1 ; if ( accuracy <= Math . abs ( sinval - sinx ) ) break ; } System . out . println ( Math . round ( sinx ) ) ; } public static void main ( String [ ] args ) { double n = 90 ; cal_sin ( n ) ; } }
public class GFG { static int multiply ( int [ ] array , int n ) { int pro = 1 ; for ( int i = 0 ; i < n ; i ++ ) pro = pro * array [ i ] ; return pro ; } public static void main ( String [ ] args ) { int array [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = array . length ; System . out . println ( multiply ( array , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i <
public class GFG { static int bit ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n = n & ( n - 1 ) ; } return count ; } static int maxSumOfBits ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = bit ( arr [ i ] ) ; } int incl = arr [ 0 ] ; int excl = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( incl > excl ) excl = excl ; else excl = excl + arr [ i ] ; } if ( incl > excl ) return excl ; else return excl ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 } ; int n = arr .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] c = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { c [ i ] [ j ] = s . charAt ( j ) - ' C ' ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( c [ i ] [ j ] == ' C ' ) { ans ++ ; } } } System . out . println ( ans ) ; } }

public class GFG { static void f ( int x , int y ) { int v = y - 2 * x * x + 1 ; return v ; } static void predict ( int x , int y , int h ) { int y1p = y + h * f ( x , y ) ; return ; } static void correct ( int x , int y , int x1 , int
import java . util . * ; public class GFG { static String D_Pattern ( String str , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j == 1 || ( ( i == 0 || i == n - 1 ) && ( j > 1 && j < n - 2 ) ) || ( j == n - 2 && i != 0 && i != n - 1 ) ) { str = str + " * " ; } else str = str + " ▁ " ; } } return ( str ) ; } public static void main ( String [ ] args ) { String str = " " ; int n = 9 ; System . out . println ( D_Pattern ( str , n ) ) ; } }
public class GFG { static void kthString ( int n , int k ) { int total = 0 ; int i = 1 ; while ( total < k ) { total = total + n - i ; i ++ ; } int first_y_position = i - 1 ; int second_y_position = k - ( total - n + first_y_position ) ; for ( int j = 1 ; j < first_y_position ; j ++ ) { System . out . print ( " x " ) ; } System . out . print ( " y " ) ; System . out . print ( " x " ) ; System . out . print ( " y " ) ; System . out . print ( " x " ) ; System . out . print ( " y " ) ; } public static void main ( String [ ] args ) { int n = 5 , k = 7 ; kthString ( n , k ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = Math . min ( i , k ) ; j <= Math . max ( i , k ) ; j ++ ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; } static int count_of_subarrays ( int N ) { int count = binomialCoeff ( 2 * N - 1 , N ) ; return count ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( count_of_subarrays ( N ) ) ; } }
import java . util . * ; public class Solution { public int productExceptSelf ( int [ ] nums ) { int ans [ ] = new int [ nums . length ] ; for ( int i = 0 ; i < nums . length ; i ++ ) ans [ i ] = ans [ i - 1 ] * nums [ i - 1 ] ; int right = 1 ; for ( int i = 0 ; i < nums . length - 1 ; i ++ ) ans [ i ] = ans [ i - 1 ] * nums [ i - 1 ] ; for ( int i = 0 ; i < nums . length - 1 ; i ++ ) ans [ i ] *= right ; return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 , 4 } ; int out = sObj . productExceptSelf ( nums ) ; System . out . println ( out ) ; } }
public class GFG { static int getSmallestAndLargest ( String s , int k ) { int currStr = s . charAt ( k ) ; int lexMin = currStr ; int lexMax = currStr ; for ( int i = k ; i < s . length ( ) ; i ++ ) { currStr = currStr + s . charAt ( i ) ; if ( lexMax < currStr ) { lexMax = currStr ; } if ( lexMin > currStr ) { lexMin = currStr ; } } System . out . println ( lexMin ) ; System . out . println ( lexMax ) ; return lexMax ; } public static void main ( String [ ] args ) { String str1 = " GeeksForGeeks " ; int k = 3 ; getSmallestAndLargest ( str1 , k ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { dp [ 0 ] [ i ] = 0 ; } for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j < n - 1 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j + 1 ] , dp [ i ] [ j ] + a [ j ] ) ; } else { dp [ i ] [ j ] = Math . max (
import java . util . * ; public class GFG { static int MAX_BITS = 32 ; static int maxSubarrayXOR ( int [ ] set , int n ) { int index = 0 ; for ( int i = 0 ; i < MAX_BITS - 1 ; i ++ ) { int maxEle = - 2147483648 ; for ( int j = 0 ; j < index ; j ++ ) { if ( ( set [ j ] & ( 1 << i ) ) != 0 && set [ j ] > maxEle ) maxEle = set [ j ] ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( max ) ; } }

import java . util . * ; public class Solution { public int firstUniqChar ( String s ) { int count_map = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) count_map [ s . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( count_map [ s . charAt ( i ) - ' a ' ] == 1 ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " leetcode " ; int out = sObj . firstUniqChar ( s ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { ans [ i ] = arr
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] arr = s . split ( " " ) ; String [ ] arrt = t . split ( " " ) ; int [ ] arr = new int [ arrt . length ] ; for ( int i = 0 ; i < arrt . length ; i ++ ) { arr [ i ] = Integer . parseInt ( arrt [ i ] ) ; } int [ ] arrt = t . split ( " " ) ; for ( int i = 0 ; i < arrt . length ; i ++ ) { arr [ arrt . length - i - 1 ] = Integer . parseInt ( arrt [ i ] ) ; } int [ ] ans = new int [ arr . length ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { ans [ arr [ i ] ] = arr [ i ] ; } for ( int i = 0 ; i < arrt . length ; i ++ ) { if ( arrt [ i ] == arr [ i ] )
public class GFG { static int getSum ( int n , int d ) { int sum = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { if ( i % 10 == d ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 30 , d = 3 ; System . out . println ( getSum ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int min = Math . min ( a , Math . min ( b , c ) ) ; int max = Math . max ( a , Math . max ( b , c ) ) ; int minC = Math . min ( a , Math . min ( c , r ) ) ; int maxC = Math
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; System . out . println ( n - Math . min ( s , t ) + 1 ) ; } } }
public class GFG { static int findSum ( int N , int K ) { int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) ans += ( i % K ) ; return ans ; } public static void main ( String [ ] args ) { int N = 10 ; int K = 2 ; System . out . println ( findSum ( N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { gcd = gcd ( arr [ i ] , arr [ i + 1 ] ) ; } System . out . println ( gcd ) ; } static int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } }
import java . io . * ; public class GFG { static double PI = 3.14 ; public double find_area ( double r , double d ) { double R = d / PI ; R += PI * Math . pow ( r , 2 ) ; R = Math . sqrt ( R ) ; area = PI * Math . pow ( R , 2 ) ; return area ; } public static void main ( String [ ] args ) { double r = 4 , d = 5 ; System . out . println ( find_area ( r , d ) ) ; } }
public class GFG { static int minimumNumbers ( int n , int s ) { if ( s % n ) return s / n + 1 ; else return s / n ; } public static void main ( String [ ] args ) { int n = 5 , s = 11 ; System . out . println ( minimumNumbers ( n , s ) ) ; } }
public class GFG { static int countTriplets ( int arr [ ] , int n , int m ) { int count = 0 ; Arrays . sort ( arr ) ; for ( int start = 0 ; start < n - 1 ; start ++ ) { int mid = end - 1 ; while ( start < mid ) { int prod = ( arr [ end ] * arr [ start ] * arr [ mid ] ) ; if ( prod > m ) mid -- ; else if ( prod < m ) start ++ ; else if ( prod == m ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; int m = 1 ; System . out . println ( countTriplets ( arr , n , m ) ) ; } }
import java . util . * ; public class GFG { static int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 ; int res = 1 ; while ( c < n ) { c = a + b ; res = res + 1 ; a = b ; b = c ; } return res ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( findIndex ( n ) ) ; } }
import java . util . * ; public class GFG { static boolean isVowel ( char ch ) { if ( ch >= ' a ' && ch <= ' e ' ) return true ; else return false ; } static boolean isSatisfied ( char st [ ] , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( isVowel ( st [ i ] ) == false && isVowel ( st [ i - 1 ] ) == false ) return false ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( isVowel ( st [ i ] ) && isVowel ( st [ i - 1 ] ) == false && isVowel ( st [ i + 1 ] ) == false ) return false ; } return true ; } public static void main ( String [ ] args ) { char st [ ] = { ' a ' , ' e ' , ' o ' , ' u '
import java . io . * ; public class GFG { static int countWays ( int n ) { int dp [ ] = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] + 1 ; return dp [ n ] ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countWays ( n ) ) ; } }
import java . util . * ; public class GFG { static int expect ( int m , int n ) { int ans = 0 ; for ( int i = m ; i < n ; i ++ ) ans += ( ( ( ( ( ( int ) Math . pow ( i / m , n ) - ( ( int ) Math . pow ( ( i - 1 ) / m , n ) ) * i ) ) * i ) ; return ans ; } public static void main ( String [ ] args ) { int m = 6 , n = 3 ; System . out . println ( expect ( m , n ) ) ; } }
import java . util . * ; public class GFG { static int ProdOfPrimes ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i ; j <= n ; j += i ) prime [ j ] = false ; } } int prod = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] ) prod *= i ; } return prod ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( ProdOfPrimes ( n ) ) ; } }
import java . util . * ; public class GFG { static int compute ( ) { int ans = 0 ; for ( int y = 1 ; y <= 9 ; y ++ ) ans += ( y * ( y + 1 ) ) ; return ans ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] mx = new int [ m ] ; for ( int i =
import java . util . * ; public class GFG { static void generateNumbers ( int n , int num , int a , int b ) { if ( num > 0 && num < n ) { int st = new int [ num * 10 + a ] ; int i = 0 ; for ( int j = 0 ; j < i ; j ++ ) { st [ j ] = i ; } if ( num >= n ) { return ; } if ( num * 10 + a > num ) { generateNumbers ( n , num * 10 + a , a , b ) ; } generateNumbers ( n , num * 10 + b , a , b ) ; } generateNumbers ( n , num * 10 + b , a , b ) ; } public static void main ( String [ ] args ) { int n = 12 ; generateNumbers ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int min = Math . min ( t , n * k ) ; int max = Math . max ( t , n * k ) ; System . out . println ( min + " ▁ " + max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { ans = Math . min ( ans , b [ i ] ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int getOddOccurrence ( int arr [ ] ) { int res = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) res = res ^ arr [ i ] ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 4 , 5 , 2 , 4 , 3 , 5 , 2 , 4 , 2 } ; System . out . println ( " % d " ) ; } }
public class GFG { static boolean isKthBitSet ( int x , int k ) { if ( ( x & ( 1 << ( k - 1 ) ) ) != 0 ) return true ; else return false ; } static boolean isPalindrome ( int x ) { int l = 1 , r = 2 * 8 ; while ( l < r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return false ; l ++ ; r -- ; } return true ; } public static void main ( String [ ] args ) { int x = 1 << 15 + 1 ; System . out . println ( isPalindrome ( x ) ) ; x = 1 << 31 + 1 ; System . out . println ( isPalindrome ( x ) ) ; } }
public class GFG { static void SieveOfEratosthenes ( int n , boolean isPrime [ ] ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) { isPrime [ i ] = true ; } for ( int p = 2 ; p * p <= n ; p ++ ) { if ( isPrime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) { isPrime [ i ] = false ; } } } } static int findPrimePair ( int n ) { boolean flag = false ; int isPrime [ ] = new int [ n +
import java . util . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " , ▁ " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " , ▁ " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( ▁ " + a + " , ▁ " + b + " , ▁ " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; } }
import java . util . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " , ▁ " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " , ▁ " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( ▁ " + a + " , ▁ " + b + " , ▁ " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int SIZE_LIMIT = 1000000 ; private static int type [ ] = new int [ SIZE_LIMIT + 1 ] ; public String run ( ) { int sum = 1 ; for ( int n = 3 ; n <= SIZE_LIMIT / 4 ; n ++ ) { for ( int m = n - 2 ; m >= 0 ; m -- ) { for ( int t = n - m ; t <= SIZE_LIMIT ; t ++ ) { int tiles = n * n - m * m ; if ( tiles > SIZE_LIMIT ) break ; type [ tiles ] ++ ; } } sum = sum + 1 ; } return Integer . toString ( sum ) ; } private static int toString ( int n ) { return Integer . toString ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int n =
public class GFG { static int maxZeros ( int N ) { int maxm = - 1 ; int cnt = 0 ; while ( N > 0 ) { if ( N % 2 == 1 ) { cnt ++ ; N >>= 1 ; maxm = Math . max ( maxm , cnt ) ; } else { maxm = Math . max ( maxm , cnt ) ; cnt = 0 ; N >>= 1 ; } } return maxm ; } public static void main ( String [ ] args ) { int N = 14 ; System . out . println ( maxZeros ( N ) ) ; } }
import java . util . * ; public class GFG { static void getLongestSeq ( int a [ ] , int n ) { int maxIdx = 0 , maxLen = 0 ; int currLen = 0 ; int currIdx = 0 ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > 0 ) currLen ++ ; if ( currLen == 1 ) currIdx = k ; else if ( currLen > maxLen ) maxLen = currLen ; currLen = 0 ; } if ( maxLen > 0 ) System . out . println ( " Index ▁ : ▁ " + maxIdx + " , ▁ " + maxLen + " , ▁ " + maxLen ) ; else System . out . println ( " No ▁ positive ▁ sequence ▁ detected . " ) ; } public static void main ( String [ ] args ) { int arr [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = i + 1 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; break ; } } System . out . println ( count ) ; } }
public class GFG { static int findNthTerm ( int N ) { int ans = 0 ; if ( N % 2 == 0 ) ans = ( N / 2 ) * 6 + ( N / 2 ) * 2 ; else ans = ( N / 2 + 1 ) * 6 + ( N / 2 ) * 2 ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int N = 3 ; findNthTerm ( N ) ; } }
public class GFG { static boolean isRectangle ( int a , int b , int c , int d ) { if ( a == b == c ) return true ; else if ( a == d && c == b ) return true ; else if ( a == c && d == b ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 1 , b = 2 , c = 3 , d = 4 ; System . out . println ( " Yes " ) ; System . out . println ( "1 ▁ 2 ▁ 3 ▁ 4 ▁ " + "1 ▁ " + "2 ▁ 3 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "1 ▁ " + "2 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "2 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "1 ▁ " + "2 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "1 ▁ " + "2 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "2 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "2 ▁ " + "3 ▁ " + "4 ▁ " + "1 ▁ " + "2 ▁ " + "3
public class GFG { static int discreteLogarithm ( int a , int b , int m ) { int n = ( int ) Math . sqrt ( m ) + 1 ; int an = 1 ; for ( int i = 0 ; i < n ; i ++ ) an = ( an * a ) % m ; int value [ ] = new int [ n ] ; int cur = an ; for ( int i = 1 ; i < n ; i ++ ) { if ( value [ cur ] == 0 ) { value [ cur ] = i ; } cur = ( cur * an ) % m ; } cur = b ; for ( int i = 1 ; i < n ; i ++ ) { if ( value [ cur ] > 0 ) { int ans = value [ cur ] * n - i ; if (
import java . util . * ; public class GFG { static int FindMinimumCost ( int ind , int a [ ] , int n , int k , int dp [ ] ) { if ( ind == ( n - 1 ) ) return 0 ; else if ( dp [ ind ] != - 1 ) return dp [ ind ] ; else { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ind + i < n ) ans = Math . min ( ans , Math . abs ( a [ ind + i ] - a [ ind + i ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) ; else break ; } dp [ ind ] = ans ; return ans ; } } public static void main ( String [ ] args ) { int a [ ] = { 10 , 30 , 40 , 50 , 20 } ; int k = 3 ; int n = a . length ; int
import java . util . * ; public class GFG { static int Probability ( int sum , int times ) { int favorable = 0 , total = 0 ; for ( int i = 0 ; i < 7 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( i + j ) == sum ) { favorable += 1 ; } } } int gcd1 = gcd ( int facto , int total ) ; int facto = facto / gcd1 ; total = total / gcd1 ; probability = Math . pow ( total , times ) ; return ( probability ) ; } public static void main ( String [ ] args ) { int sum = 7 , times = 7 ; System . out . println ( "1 ▁ " + " / " + Probability ( sum , times ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scan
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }
public class GFG { static int getCount ( int arr [ ] , int n , int num1 , int num2 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == num1 ) break ; } if ( i >= n - 1 ) return 0 ; for ( int j = n - 1 ; j >= i ; j -- ) { if ( arr [ j ] == num2 ) break ; } if ( j == i ) return 0 ; return ( j - i - 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 } ; int n = arr . length ; int num1 = 5 , num2 = 4 ; System . out . println ( getCount ( arr , n , num1 , num2 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; int min = a [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i + 1 ] - a [ i ] < min ) min = a [ i + 1 ] - a [ i ] ; } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static int countSetBits ( int n ) { int cnt = 0 ; int setBits [ ] = new int [ n + 1 ] ; setBits [ 0 ] = 0 ; setBits [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { setBits [ i ] = setBits [ i / 2 ] ; } else { setBits [ i ] = setBits [ i - 1 ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { cnt = cnt + setBits [ i ] ; } return cnt ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countSetBits ( n ) ) ; } }
public class GFG { static int gcd ( int a [ ] , int b [ ] ) { if ( a [ 0 ] == 0 ) return b [ 0 ] ; return gcd ( b [ 0 ] % a , a [ 0 ] ) ; } static int largestGCD1Subset ( int A [ ] , int n ) { int currentGCD = A [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) currentGCD = gcd ( currentGCD , A [ i ] ) ; if ( currentGCD == 1 ) return n ; return 0 ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 18 , 6 , 3 } ; int n = A . length ; System . out . println ( largestGCD1Subset ( A , n ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int MOD = 1000000007 ; public String run ( ) { int [ ] divisors = new int [ 2 ] ; for ( int i = 2 ; i <= Math . sqrt ( divisors [ 0 ] ) ; i ++ ) { for ( int j = i * 2 ; j <= Math . sqrt ( divisors [ j ] ) ; j += i ) { divisors [ j ] ++ ; } } int ans = 0 ; for ( int i = 2 ; i <= Math . sqrt ( divisors [ i ] ) ; i ++ ) { for ( int j = i * 2 ; j <= Math . sqrt ( divisors [ j ] ) ; j += i ) { ans += divisors [ j ] ; } } return Integer . toString ( ans ) ; } }
public class GFG { static void updateArray ( int arr [ ] , int n ) { int i = n - 1 ; while ( i > 0 ) { arr [ i ] = arr [ i - 1 ] ; i -- ; } arr [ 0 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
public class GFG { static void findEncryptedArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( sum - arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; findEncryptedArray ( arr , N ) ; } }
public class GFG { static void updateArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
public class GFG { static int findMinDifference ( int arr [ ] , int n ) { if ( arr [ 0 ] < arr [ 1 ] ) { int min__ = secondMax = arr [ 0 ] ; } else { int min__ = secondMax = arr [ 1 ] ; } if ( arr [ 0 ] < arr [ 1 ] ) { int max__ = secondMin = arr [ 1 ] ; } else { int max__ = secondMin = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max__ ) { max__ = arr [ i ] ; } else
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int [ ] ans = new int [ n ] ; int [ ] cnt = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int s = arr [ i ] ; int c = 0 ; while ( s > 0 ) { c ++ ; s /= 2 ; } if ( cnt [ s ] == 0 ) { ans [ i ] = s ; } else { ans [ i ] = cnt [ s ] ; } } int ans2 = n / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == 0 ) { ans [ i ] = ans2 ; } } int ans3 = n / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ans3 == 0 ) { ans3 = ans2 ; } else { ans3 = ans2 + ans3 ; } } if ( ans2 == ans3 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class GFG { static int factorial ( int n ) { return 1 + ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial ▁ of ▁ " + num + " ▁ is ▁ " + factorial ( num ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = new int [ n ] ; arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] > arr [ j ] [ i ] ) { max = Math . max (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ 3 ] ; for ( int j = 0 ;
import java . util . * ; public class GFG { static int findMinimumX ( int a [ ] , int n ) { HashSet < Integer > st = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) st . add ( a [ i ] ) ; if ( st . size ( ) == 1 ) return 0 ; if ( st . size ( ) == 2 ) st . add ( a [ 0 ] ) ; if ( st . size ( ) == 3 ) st . add ( a [ 0 ] ) ; if ( st . size ( ) == 4 ) st . add ( a [ 1 ] ) ; if ( st . size ( ) == 5
public class GFG { static int findX ( int n , int k ) { int r = n ; int m = ( int ) Math . sqrt ( k ) ; int i = 2 ; while ( i <= m && k > 1 ) { if ( i == m ) { i = k ; } int u = 0 ; int v = 0 ; while ( k % i == 0 ) { k /= i ; v ++ ; } if ( v > 0 ) { int t = n ; while ( t > 0 ) { t /= i ; u ++ ; } r = Math . min ( r , u / v ) ; } i += 1 ; } return r ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; System . out . println ( findX ( n , k ) ) ; } }
public class GFG { static boolean LiesInsieRectangle ( int a , int b , int x , int y ) { if ( x - y - b <= 0 && x - y + b >= 0 && x + y - b >= 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 7 , b = 2 , x = 4 , y = 5 ; if LiesInsieRectangle ( a , b , x , y ) { System . out . println ( " Given ▁ point ▁ points ▁ are ▁ inside " + " the ▁ rectangle " ) ; } else { System . out . println ( " Given ▁ point ▁ does ▁ not ▁ lie " + " on ▁ the ▁ rectangle " ) ; } } }
import java . util . * ; public class GFG { static int N = 1000 ; static int countPairs ( int arr [ ] , int n ) { int size = ( 2 * N ) + 1 ; int freq [ ] = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { int x = arr [ i ] ; freq [ x + N ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( freq [ i ] > 0 ) ans += ( ( freq [ i ] ) * ( freq [ i ] - 1 ) ) / 2 ; for ( int j = i + 2 ; j < 2001 ; j ++ ) { if ( freq [ j ] > 0 && freq [ j ] > 0 ) ans += freq [ j ] * freq [ j ] ; } } return ans ; } public static void main ( String [ ]
public class GFG { static int getAvg ( int x [ ] , int n , int sum ) { int sum = sum + x [ 0 ] ; return ( sum ) / n ; } static void streamAvg ( int arr [ ] , int n ) { int avg = 0 ; sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( arr [ i ] , i + 1 , sum ) ; sum = avg * ( i + 1 ) ; System . out . print ( " Avg ▁ of ▁ " + i + " ▁ " ) ; System . out . print ( i + 1 + " ▁ " ) ; System . out . print ( " ▁ numbers ▁ is ▁ " + end ) ; System . out . print ( avg ) ; } return ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }
import java . util . * ; public class GFG { static int MAX = 10000 ; static boolean [ ] s = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { prime [ 0 ] = true ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } int product = 1 ; for ( int p = 2 ; p <= MAX ; p ++ ) { if ( prime [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] bs = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { bs [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == bs [ i ] ) { ans ++ ; } }
public class GFG { static int maxOperations ( String str ) { int i , g , gk , ggs = 0 , gk = 0 , gks = 0 ; for ( i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' g ' ) g ++ ; else if ( str . charAt ( i ) == ' k ' ) { if ( g > 0 ) gk -- ; gk ++ ; } else if ( str . charAt ( i ) == ' s ' ) { if ( gk > 0 ) gk -- ; gks ++ ; } } return gks ; } public static void main ( String [ ] args ) { String str = " ggsk " ; System . out . println ( maxOperations ( str ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) > 1 ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int
import java . util . * ; public class GFG { static int kthSmallest ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 3 , 5 , 7 , 19 } ; int n = arr . length ; int k = 2 ; System . out . println ( " Kth ▁ smallest ▁ element ▁ is ▁ " + kthSmallest ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; } int [ ] arr3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr3 [ i ] = arr2 [ i ] ; } Arrays . sort ( arr3 ) ; int [ ] arr4 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr4 [ i ] = arr3 [ i ] ; } int [ ] arr5 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr5 [ i ] = arr4 [ i ] ; } Arrays . sort ( arr5 ) ; int [ ] arr6 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr6 [ i ] = arr5 [ i ] ; } System . out .

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double x1 = sc . nextDouble ( ) ; double y1 = sc . nextDouble ( ) ; double x2 = sc . nextDouble ( ) ; double y2 = sc . nextDouble ( ) ; double x = Math . cos ( Math . toRadians ( x1 ) ) ; double y = Math . sin ( Math . toRadians ( y1 ) ) ; double x2 = Math . cos ( Math . toRadians ( x2 ) ) ; double y2 = Math . sin ( Math . toRadians ( y2 ) ) ; double x = Math . cos ( Math . toRadians ( x2 ) ) ; double y = Math . sin ( Math . toRadians ( y2 ) ) ; double x2a = Math . cos ( Math . toRadians ( x2 ) ) ; double y2a = Math . sin ( Math . toRadians ( y2 ) ) ; double x
import java . io . * ; public class GFG { static double centeredOctahedral ( int n ) { return ( 2 * n + 1 ) * ( 2 * n * n + 2 * n + 3 ) / 3 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( centeredOctahedral ( n ) ) ; n = 9 ; System . out . println ( centeredOctahedral ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ;
import java . util . * ; public class GFG { static int SumDivPrime ( int A [ ] , int n ) { int max_val = 0 ; boolean [ ] prime = new boolean [ max_val + 1 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = 2 * p ; i <= max_val ; i += p ) prime [ i ] = false ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] ) sum += A [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] && sum % A [ i ] == 0 ) { System . out . println ( " YES " ) ; return ;
import java . util . * ; public class GFG { static void leftRotate ( int arr [ ] , int n , int k ) { for ( int i = k ; i < k + n ; i ++ ) System . out . print ( arr [ i % n ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 7 , 9 } ; int n = arr . length ; int k = 2 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; k = 3 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; k = 5 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; k = 6 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; k = 7 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; k = 8 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; k = 9 ; leftRotate ( arr , n , k ) ; System . out . print ( " " ) ; } }
public class GFG { static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; int z = ( int ) ( x / 2 ) ; n = n + z ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56287 ; int x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 3 == 0 ) { count ++ ; } } System . out . println ( count >= 2 ? " Yes " : " No " ) ; } } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } int [ ] [ ] dp2 = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n
public class GFG { static int findSubsequence ( int arr [ ] , int n ) { int length = 1 ; int dp [ ] = new int [ 10 ] ; int tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; int locMax = 1 ; int cnt [ ] = new int [ 10 ] ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set . add ( sc . next ( ) ) ; } System . out . println ( set . size ( ) ) ; } } }
public class GFG { static int totalPrimeFactors ( int n ) { int count = 0 ; if ( ( n % 2 ) == 0 ) count ++ ; while ( ( n % 2 ) == 0 ) n /= 2 ; int i = 3 ; while ( i * i <= n ) { if ( ( n % i ) == 0 ) count ++ ; while ( ( n % i ) == 0 ) n /= i ; } i = 3 ; while ( i * i <= n ) { if ( ( n % i ) == 0 ) count ++ ; while ( ( n % i ) == 0 ) n /= i ; } if ( n > 2 ) count ++ ; return count ; } static int countPairs ( G , int L ) { if ( L % G != 0 ) return 0 ; int div = L / G ;
import java . util . * ; public class GFG { static int calculate_sum ( int a [ ] , int N ) { int m = N / a ; int sum = m * ( m + 1 ) / 2 ; int ans = a [ 0 ] * sum ; System . out . println ( " Sum ▁ of ▁ multiples ▁ of ▁ " + a [ 0 ] + " ▁ up ▁ to ▁ " + N + " ▁ = ▁ " + ans ) ; } public static void main ( String [ ] args ) { int a [ ] = { 7 , 49 } ; int n = a . length ; System . out . println ( " Sum ▁ of ▁ multiples ▁ of ▁ " + a [ n ] + " ▁ up ▁ to ▁ " + N + " ▁ = ▁ " + ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ m ] ; for ( int i
public class GFG { static int countSolutions ( int a ) { int count = 0 ; for ( int i = a + 1 ; i <= a ; i ++ ) { if ( a == ( i + ( a ^ i ) ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }
public class GFG { static int next ( int arr [ ] , int target ) { int start = 0 , end = arr . length - 1 ; int ans = - 1 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; if ( arr [ mid ] <= target ) { start = mid + 1 ; } else { ans = mid ; end = mid - 1 ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 5 , 8 , 12 } ; System . out . println ( next ( arr , 8 ) ) ; } }
import java . util . * ; public class GFG { static void printWordsWithoutIfSwitch ( int n ) { int digits [ ] = new int [ 10 ] ; int dc = 0 ; while ( true ) { digits [ dc ] = n % 10 ; n = n / 10 ; dc ++ ; if ( n == 0 ) break ; } for ( int i = 0 ; i < dc - 1 ; i ++ ) System . out . print ( digits [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 350 ; printWordsWithoutIfSwitch ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s1 = sc . next ( ) ; String s2 = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == ' + ' || s1 . charAt ( i ) == ' + ' || s1 . charAt ( i ) != s2 . charAt ( i ) ) { count ++ ; } } System . out . println ( Math . min ( count , Math . max ( 0 , count - 1 ) ) ) ; } }
public class GFG { static int TotalWays ( int n , int s , int k ) { int dp [ ] = new int [ n ] ; dp [ s - 1 ] = 1 ; for ( int i = s ; i < n ; i ++ ) { int idx = Math . max ( s - 1 , i - k ) ; for ( int j = idx ; j < i ; j ++ ) { dp [ j ] += dp [ j ] ; } } return dp [ n - 1 ] ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; int s = 2 ; System . out . println ( " Total ▁ Ways ▁ = ▁ " + TotalWays ( n , s , k ) ) ; } }
import java . util . * ; public class GFG { static int countEvenOdd ( int n ) { int even_count = 0 ; int odd_count = 0 ; while ( n > 0 ) { int rem = n % 10 ; if ( rem % 2 == 0 ) even_count ++ ; else odd_count ++ ; n = n / 10 ; } System . out . println ( " Even ▁ count ▁ : ▁ " + even_count ) ; System . out . println ( " \n Odd ▁ count ▁ : ▁ " + odd_count ) ; if ( even_count % 2 == 0 && odd_count % 2 != 0 ) return 1 ; else return 0 ; } public static void main ( String [ ] args ) { int n = 2335453 ; int t = countEvenOdd ( n ) ; if ( t == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] min = new int [ n ] ; int max = 0 ; for ( int i = 0 ; i < n ; i ++
import java . util . * ; public class GFG { static int findmin ( int p [ ] [ ] , int n ) { int a = 0 , b = 0 , c = 0 , d = 0 , i , j ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] [ 0 ] <= 0 ) { a ++ ; } else if ( p [ i ] [ 0 ] >= 0 ) { b ++ ; } if ( p [ i ] [ 1 ] >= 0 ) { c ++ ; } else if ( p [ i ] [ 1 ] >= 0 ) { d ++ ; } } return Math . min ( a , b , c , d ) ; } public static void main ( String [ ] args ) { int p [ ] [ ] = { { 1 , 1 } , { 2 , 2 } , { - 1 , - 1 } , { - 2 , 2 } } ; int n = p . length ; System . out . println ( findmin ( p , n ) ) ; } }
import java . util . * ; public class GFG { static int maxGCD ( int N , int P ) { int ans = 1 ; int prime_factors [ ] = new int [ 2 ] ; for ( int i = 2 ; i <= Math . sqrt ( P ) ; i ++ ) { while ( P % i == 0 ) { if ( i != prime_factors [ i ] ) prime_factors [ i ] = 0 ; prime_factors [ i ] ++ ; P /= i ; } } if ( P != 1 ) prime_factors [ P ] ++ ; for ( int key = 0 ; key < prime_factors . length ; key ++ ) ans *= Math . pow ( key , key / N ) ; return ans ; } public static void main ( String [ ] args ) { int N = 3 , P = 24 ; System . out . println ( maxGCD ( N , P ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum %= 2 ; } System . out . println ( sum + " : ▁ " + a [ n - 1 ] ) ; } }
public class GFG { static void generateDivisors ( int curIndex , int curDivisor , int arr [ ] ) { if ( curIndex == arr . length ) { System . out . print ( curDivisor + " ▁ " ) ; return ; } for ( int i = 0 ; i < arr . length ; i ++ ) { generateDivisors ( curIndex + 1 , curDivisor , arr ) ; curDivisor *= arr [ curIndex ] [ 1 ] ; } } static int findDivisors ( int n ) { int arr [ ] = new int [ n ] ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) { int count = 0 ; while ( n % i == 0 ) { n /= i ; count ++ ; } arr [ count ] = i ; } if ( n > 1 )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + 1 ) ; } } int max = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( dp [ i ] [
public class GFG { static String largestPalinSub ( String s ) { String res = " " ; int mx = s . charAt ( 0 ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { mx = Math . max ( mx , s . charAt ( i ) ) ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == mx ) res += s . charAt ( i ) ; } return res ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( largestPalinSub ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( n == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count ++ ; else break ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) ans ++ ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + 1 ) ; } } int max = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i % j == 0 ) { dp [ i ]
import java . util . * ; public class GFG { static void initializeDiffArray ( int [ ] A ) { int n = A . length ; int [ ] D = new int [ n + 1 ] ; D [ 0 ] = A [ 0 ] ; D [ n ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) D [ i ] = A [ i ] - A [ i - 1 ] ; return D ; } static void printArray ( int [ ] A , int [ ] D ) { for ( int i = 0 ; i < A . length ; i ++ ) { if ( i == 0 ) A [ i ] = D [ i ] ; else A [ i ] = D [ i ] + A [ i - 1 ]
import java . util . * ; public class GFG { static void findMaxGuests ( int arr [ ] , int exit [ ] , int n ) { Arrays . sort ( arr ) ; exit . sort ( ) ; guest_in = 1 ; int max_guests = 1 ; int time = arr [ 0 ] ; int i = 1 ; int j = 0 ; while ( i < n && j < n ) { if ( arr [ i ] <= exit [ j ] ) { guest_in = guest_in + 1 ; if ( guest_in > max_guests ) max_guests = guest_in ; time = arr [ i ] ; } i = i + 1 ; } System . out . println ( " Maximum ▁ Number ▁ of ▁ Guests ▁ = ▁ " + max_guests + " ▁ at ▁ time ▁ = ▁ "

public class GFG { static int calcFunction ( int n , int r ) { final int denominator = 1 ; int mx = Math . max ( r , n - r ) ; for ( int i = mx + 1 ; i <= n ; i ++ ) { int numerator = ( int ) Math . pow ( i , i ) ; int denominator = ( int ) Math . pow ( i - mx , i - mx ) ; finalDenominator = ( finalDenominator * denominator ) / numerator ; } return finalDenominator ; } public static void main ( String [ ] args ) { int n = 6 , r = 2 ; System . out . print ( "1 / " + " \n " ) ; System . out . print ( calcFunction ( n , r ) ) ; } }
public class GFG { static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; if ( sr * sr == x ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int n = 7 ; int k = 2 ; isPerfectSquare ( n + k ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count / 2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = sc . nextInt ( ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) c [ i ] = sc . nextInt ( ) ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ;
import java . util . * ; public class GFG { static int accumulate ( String s ) { int acc = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) acc += ( char ) ( s . charAt ( i ) - 48 ) ; return acc ; } static boolean isDivisible ( String s ) { int n = s . length ( ) ; if ( s . charAt ( n - 1 ) != '5' && s . charAt ( n - 1 ) != '0' ) return false ; int sum = accumulate ( s ) ; return ( sum % 3 == 0 ) ; } public static void main ( String [ ] args ) { String s = "15645746327462384723984023940239" ; if ( isDivisible ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; s = "156457463274674672384723984023940235" ; if ( isDivisible ( s ) ) System . out .
import java . util . *
public class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } static void encryptString ( String s , int n , int k ) { int countVowels = 0 ; int countConsonants = 0 ; int ans = " " ; for ( int l = 0 ; l < n - k + 1 ; l ++ ) { countVowels = 0 ; countConsonants = 0 ; for ( int r = l ; r < r + k ; r ++ ) { if ( isVowel ( s . charAt ( r ) ) == true ) countVowels ++ ; else countConsonants ++ ; } ans += ( ( countVowels * countConsonants ) ) ; } return ans ; } public static void main ( String [ ] args ) { String s = " hello " ; int n = s . length ( ) ; int k = 2
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] [ 2 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] [ 0 ] = 1 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] [ 1 ] = 1 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 1 ] + dp [ i - 1 ] [ j - 1 ] [ 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int
public class GFG { static int fourthPowerSum ( int n ) { return ( ( 6 * n * n * n * n * n ) + ( 15 * n * n * n * n ) + ( 10 * n * n * n ) - n ) / 30 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int maxLenSub ( int arr [ ] , int n ) { int um [ ] = new int [ n ] ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { um [ i ] = arr [ i ] - 1 ; maxLen = Math . max ( maxLen , um [ arr [ i ] - 1 ] ) ; if ( arr [ i ] > um [ arr [ i ] - 1 ] ) { um [ arr [ i ] ] = um [ arr [ i ] - 1 ] ; } if ( arr [ i ] + 1 ) in um [ arr [ i ] ] = um [ arr [ i ] + 1 ] ; um [ arr [ i ] ] = Math . max ( um [ arr [ i ] ] , max
import java . util . * ; public class GFG { static void rearrange ( int n ) { if ( n % 2 == 1 ) return ; int currIdx = ( n - 1 ) / 2 ; while ( currIdx > 0 ) { int count = currIdx ; int swapIdx = currIdx ; while ( count > 0 ) { int temp = arr [ swapIdx + 1 ] ; arr [ swapIdx + 1 ] = arr [ swapIdx ] ; arr [ swapIdx ] = temp ; swapIdx = swapIdx + 1 ; count = count - 1 ; } currIdx = currIdx - 1 ; } } public static void main ( String [ ] args ) { int n = arr . length ; rearrange ( n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( " ▁ " + arr [ i ] + " ▁ " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [
public class GFG { static void countCharacterType ( String str ) { int vowels = 0 ; consonant = 0 ; specialChar = 0 ; digit = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ( ch >= ' a ' && ch <= ' z ' ) || ( ch >= ' A ' && ch <= ' Z ' ) ) { vowels ++ ; } else { consonant ++ ; } } System . out . println ( " Vowels : ▁ " + vowels ) ; System . out . println ( " Consonant : ▁ " + consonant ) ; System . out . println ( " Digit : ▁ " + digit ) ; System . out . println ( " Special ▁ Character : ▁ " + specialChar ) ; } public static void main ( String
import java . io . * ; public class GFG { static int increaseInVol ( int l , int b , int h ) { int percentInc = ( ( 1 + ( l / 100 ) ) * ( 1 + ( b / 100 ) ) * ( 1 + ( h / 100 ) ) ) ; percentInc -= 1 ; int percentInc *= 100 ; return percentInc ; } public static void main ( String [ ] args ) { int l = 50 , b = 20 , h = 10 ; System . out . println ( increaseInVol ( l , b , h ) + " % " ) ; } }
public class GFG { static int MaxTotalRectangleArea ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; int flag = false ; int len = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( i != 0 ) { i = i + 1 ; } if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag == false ) { flag = true ; len = a [ i + 1 ] ; i = i + 1 ; } else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag == true ) { sum = sum + a [ i + 1 ] * len ; flag = false ; len = a [ i + 1 ] ; } } return sum ; } public static void main ( String [ ] args ) { int a [ ]

import java . io . * ; public class GFG { static int lastFiveDigits ( int n ) { n = ( ( int ) ( n / 10000 ) * 10000 + ( ( int ) ( n / 100 ) % 10 ) * 1000 + ( ( int ) ( n / 10 ) % 10 ) * 10 + ( ( int ) ( n / 1000 ) % 10 ) ) ; int ans = 1 ; for ( int i = 5 ; i < n ; i ++ ) ans *= n ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int n = 12345 ; lastFiveDigits ( n ) ; } }
import java . io . * ; public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int compute ( ) { int DIGITS = 100 ; int MULTIPLIER = 100 ; int ans = 0 ; int sum = 0 ; int i ; for ( i = 0 ; i < 100 ; i ++ ) { sum += i ; if ( i * MULTIPLIER == i ) { ans = sum ; } } return ans ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static void evaluate ( int n ) { if ( n == 1 || n == 2 ) { System . out . println ( " No ▁ Pythagoras " + " ▁ Triplet ▁ exists " ) ; } else if ( n % 2 == 0 ) { System . out . println ( " Pythagoras ▁ Triplets ▁ exist ▁ i . e . ▁ " + " ▁ " + n ) ; System . out . println ( " ▁ " + n ) ; System . out . println ( " ▁ " + n ) ; } else if ( n % 2 != 0 ) { System . out . println ( " Pythagoras ▁ Triplets ▁ " + " ▁ exist ▁ i . e . " + " ▁ " + n ) ; System . out . println ( " ▁ " + n ) ; System . out . println ( " ▁ " + n ) ; } } public static void main ( String [ ] args ) { int n = 22 ; evaluate ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = Math . max ( a , Math . max ( b , c ) ) ; System . out . println ( ans ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int findNumber ( int arr [ ] , int n ) { int ans = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) ans = gcd ( ans , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == ans ) return ans ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( findNumber ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int countKdivPairs ( int A [ ] , int n , int K ) { int freq [ ] = new int [ K ] ; int ans = 0 ; for ( int i = 0 ; i < K ; i ++ ) { int rem = A [ i ] % K ; if ( rem != 0 ) ans += freq [ K - rem ] ; else ans += freq [ 0 ] ; freq [ rem ] ++ ; } return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K = 4 ; System . out . println ( countKdivPairs ( A , n , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; System . out . println ( s . replaceAll ( " , " ▁ " ) . replaceAll ( " , " ▁ " ) . replaceAll ( " , " ▁ " ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { max = Math . max ( max , i ) ; min = Math . min ( min , i + 1 ) ; } } System . out . println ( max - min ) ; } }
import java . util . * ; public class GFG { static int countSubarrays ( int arr [ ] , int n ) { int difference = 0 ; int ans = 0 ; int hash_positive [ ] = new int [ n + 1 ] ; int hash_negative [ ] = new int [ n + 1 ] ; int hash_positive [ ] = new int [ n + 1 ] ; int hash_negative [ ] = new int [ n + 1 ] ; int hash_positive [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & 1 == 1 ) { difference = difference + 1 ; } else difference = difference - 1 ; if ( difference < 0 ) { ans += hash_negative [ - difference ] ; hash_negative [ - difference ] = hash_negative [ - difference ] + 1 ; } else { ans += hash_positive [ - difference ] ; hash_positive [ - difference ]
public class GFG { static void printChar ( char [ ] str , int n ) { int freq [ ] = new int [ SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str [ i ] - ' a ' ] % 2 == 0 ) System . out . print ( str [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { char [ ] str = " geeksforgeeks " . toCharArray ( ) ; int n = str . length ; printChar ( str , n ) ; } }
import java . util . * ; public class GFG { static void printChar ( String str_ , int n ) { int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str_ . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str_ . charAt ( i ) - ' a ' ] % 2 == 1 ) System . out . print ( " ▁ " + str_ . charAt ( i ) ) ; else System . out . print ( " ▁ " + str_ . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str_ = " geeksforgeeks " ; int n = str_ . length ( ) ; printChar ( str_ , n ) ; } }
public class GFG { static int countGreater ( int arr [ ] , int n , int k ) { int l = 0 , r = n - 1 ; int leftGreater = n ; while ( l <= r ) { int m = ( l + r - l ) / 2 ; if ( arr [ m ] > k ) leftGreater = m ; else l = m + 1 ; } return ( n - leftGreater ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 4 , 7 , 7 , 7 , 11 , 13 , 13 } ; int n = arr . length ; int k = 7 ; System . out . println ( countGreater ( arr , n , k ) ) ; } }

import java . io . * ; public class GFG { static void findAandB ( int N ) { int val = N * N - 4.0 * N ; if ( val < 0 ) { System . out . println ( " NO " ) ; return ; } int a = ( N + Math . sqrt ( val ) ) / 2.0 ; int b = ( N - Math . sqrt ( val ) ) / 2.0 ; System . out . println ( " a ▁ = ▁ " + a ) ; System . out . println ( " b ▁ = ▁ " + b ) ; } public static void main ( String [ ] args ) { int N = 69.0 ; findAandB ( N ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > b [ i ] ) { c = a [ i ] ; } else { c = b [ i ] ; } } if ( c <= d ) System . out . println ( 0 ) ; else System . out . println ( c - d ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' X ' ) { arr [ i ] = arr [ i ] + 1 ; } else { arr [ i ] = arr [ i ] + 1 ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( s . charAt ( i ) == ' . ' ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 6 == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int minIncrementForUnique ( int A [ ] ) { int count [ ] = new int [ 100000 ] ; int ans = 0 ; for ( int x = 0 ; x < 100000 ; x ++ ) { count [ x ] = 0 ; for ( int i = 0 ; i < 100000 ; i ++ ) { if ( count [ x ] >= 2 ) { count [ x ] *= ( count [ x ] - 1 ) ; } else if ( count [ x ] == 0 ) ans += x - count [ x ] ; } } return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 3 , 2 , 1 , 2 , 1 , 7 } ; System . out . println ( minIncrementForUnique ( A ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( ( 3 * ( n - 1 ) ) % 1000003 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) % 13 ; } } System . out . println ( dp [ n ] [ 5 ] ) ; } }
public class GFG { static int countNums ( int a , int b , int c , int d ) { int x = b / c - ( a - 1 ) / c ; int y = b / d - ( a - 1 ) / d ; int k = ( c * d ) / gcd ( c , d ) ; return ( b - a + 1 - x - y + z ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 50 , c = 4 , d = 6 ; System . out . println ( countNums ( a , b , c , d ) ) ; } }
public class GFG { static void printSubstrings ( int n ) { int s = ( int ) Math . log10 ( n ) ; int d = ( int ) Math . pow ( 10 , s ) ; int k = d ; while ( n > 0 ) { while ( d > 0 ) { System . out . print ( n / d ) ; d = d / 10 ; } n = n % k ; k = k / 10 ; d = k ; } if ( __name . equals ( "123" ) ) { n = 123 ; printSubstrings ( n ) ; } } public static void main ( String [ ] args ) { int n = 123 ; printSubstrings ( n ) ; } }
import java . util . * ; public class GFG { static int NthCharacter ( int n ) { String s = " " ; int c = 1 ; while ( true ) { if ( c < 10 ) s += ( char ) ( 48 + c ) ; else s1 = " " ; dup = c ; while ( dup > 0 ) { s1 += ( char ) ( ( dup % 10 ) + 48 ) ; dup /= 10 ; } s1 = " " . join ( reversed ( s1 ) ) ; s += s1 ; } return s . length ( ) >= n ? s . charAt ( n - 1 ) : s . substring ( 0 , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( NthCharacter ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += a [ j ] ; } if ( sum % 3 == 0 ) { ans += 200 ; } else { ans += 20 ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static boolean check_prime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i <= n ; i += 2 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; } return true ; } static int countPrimeFrequent ( String s ) { int count = 0 ; int mp = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) mp [ s . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < mp . length ; i ++ ) { if ( mp [ i ] == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } Arrays . sort ( c ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= b [ i ] ) { ans
import java . util . * ; public class GFG { static void catalan ( int n ) { if ( n == 0 || n == 1 ) return ; catalan = new int [ n + 1 ] ; catalan [ 0 ] = 1 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) catalan [ i ] = 0 ; catalan [ n ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) catalan [ i ] = catalan [ i ] + catalan [ j ] * catalan [ i - j - 1 ] ; return catalan [ n ] ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . print ( catalan ( n ) + " ▁ " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math . min ( a [ i ] , b [ i ] ) ; int max = Math . max ( a [ i ] , b [ i ] ) ; if ( min > max ) { ans = max - min ; } } System . out .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int [ ] arr = new int [ s . length ( ) ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int count = 0 ; int [ ] ans = new int [ s . length ( ) ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] == ' L ' ) { count ++ ; } else { ans [ count ] = arr [ i ] ; count ++ ;
import java . util . * ; public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 ) return true ; if ( n % 2 == 0 ) return false ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { if ( n % i == 0 ) return false ; } return true ; } static boolean isPossible ( int n ) { if ( isPrime ( n ) && isPrime ( n - 2 ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 13 ; if ( isPossible ( n ) == true ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class GFG { static int countDyckPaths ( int n ) { int res = 1 ; for ( int i = 0 ; i < n ; i ++ ) res *= ( 2 * n - i ) ; return res / ( n + 1 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Number ▁ of ▁ Dyck ▁ Paths ▁ is ▁ " + countDyckPaths ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n <= 30 ) { System . out . println ( " YES " ) ; System . out . println ( "6 ▁ 10 ▁ 15 ▁ " + n - 30 ) ; } else { System . out . println ( " NO " ) ; System . out . println ( "6 ▁ 10 ▁ 14 ▁ " + n - 30 ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == a [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += a [ j ] ; } if ( sum % 2 == 0 ) { max = Math . max ( max , sum ) ; } } System . out . println ( max ) ; } }
public class GFG { static int pentdiagonal ( int a ) { if ( a < 0 ) return - 1 ; int d = 1.22 * a ; return d ; } public static void main ( String [ ] args ) { int a = 6 ; System . out . println ( pentdiagonal ( a ) ) ; } }
import java . io . * ; public class GFG { static int hexDiagonal ( int a ) { if ( a < 0 ) return - 1 ; int d = 1.73 * a ; return d ; } public static void main ( String [ ] args ) { int a = 9 ; System . out . println ( hexDiagonal ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - ' A ' ; } int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == ' A ' && arr [ i + 1 ] == ' B ' ) { cnt ++ ; } else { cnt = 0 ; break ; } } if ( cnt == 0 ) { System . out . println ( " The ▁ modified ▁ string ▁ is ▁ : ▁ " ) ; System . out . println ( arr [ n - 1 ] ) ; } else { System . out . println ( " The ▁ modified ▁ string ▁ is ▁ : ▁ " + arr [ n - 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' && s . charAt ( i + 1 ) == ' B ' ) { sb . append ( " C " ) ; for ( int j = i ; j < s . length ( ) - 1 ; j ++ ) { sb . append ( s . charAt ( j ) ) ; } sb . append ( " ▁ " ) ; } else { sb . append ( " hello " ) ; } } System . out . println ( sb . toString ( ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int TARGET = 2000 ; private static int count = 2 ; private static int [ ] map ; private static int [ ] prime ; private static int [ ] discount ; public String run ( ) { int count = 0 ; for ( int i = 2 ; i <= TARGET ; i ++ ) { if ( ! Library . isPrime ( i ) ) { count ++ ; } if ( count == TARGET ) { return i * 3 + 2 ; } if ( count == TARGET ) { return i * 3 + 1 ; } } if ( count == TARGET ) { return i * 3 + 1 ; } return count * 3 + 1 ; } private static int Library . isPrime ( int n ) { if ( n == 1 ) { return 1 ; } else { return Library . multiply ( Library . divide ( Library . pow ( 6 , n - 1 ) , n - 2 ) , n - 3 ) ; } } private static int Library . divide ( int n , int n ) { int result = 0 ; for ( int i = 2 ; i <= n ; i ++
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int x = Math . min ( arr [ i ] , m ) ; for ( int j = 0 ; j < n ; j ++ ) { int y = Math . max ( arr [ j ] , arr [ j + 1 ] ) ; if ( x + y == n && arr [ j ] == x ) { min = Math . min ( min , j ) ; break ; } } } System . out . println ( min ) ; } }
public class GFG { static int Digits ( int n ) { int largest = 0 ; int smallest = 9 ; while ( n > 0 ) { int r = n % 10 ; largest = Math . max ( r , largest ) ; smallest = Math . min ( r , smallest ) ; n = n / 10 ; } System . out . println ( largest + " ▁ " + smallest ) ; } public static void main ( String [ ] args ) { int n = 2346 ; Digits ( n ) ; } }
import java . util . * ; public class GFG { static void solve ( int d1 , int d2 , int d3 ) { int maxx = Math . max ( d1 , Math . max ( d2 , d3 ) ) ; int sum = ( d1 + d2 + d3 ) ; if ( 2 * maxx > sum || sum % 2 == 1 ) { System . out . println ( " - 1" ) ; return ; } int x1 = 0 , y1 = 0 , x2 = d1 , y2 = 0 , x3 = ( d1 + d2 - d3 ) / 2 ; y3 = ( d2 + d3 - d1 ) / 2 ; System . out . println ( " ( " + x1 + " , ▁ " + y1 + " , ▁ " + x2 + " , ▁ " + y2 + " ) ▁ and ▁ ( " + x3 , " , ▁ " + y3 + " , ▁ " + x1 + " , ▁ " + y2 + " ) ▁ and ▁ ( " + x2 , " , ▁ " + y1 + " ,
public class GFG { static int MAX_CHAR = 26 ; static boolean distributingBalls ( int k , int n , char [ ] arr ) { int a [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) a [ arr [ i ] - ' a ' ] ++ ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) if ( a [ i ] > k ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 6 , k = 3 ; char [ ] arr = { ' aecaab ' , ' aecaab ' , ' aecaab ' } ; if ( distributingBalls ( k , n , arr ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' T ' ) c ++ ; else c -- ; } System . out . println ( ( c == n / 3 ) ? " YES " : " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != a [ i + 1 ] ) { c ++ ; break ; } } if ( c == 0 ) { System . out . println ( " yes " ) ; } else { System . out . println ( " no " ) ; } } }

import java . util . * ; public class GFG { static void bitAtGivenPosSetOrUnset ( int n , int k ) { int new_num = n >> ( k - 1 ) ; return ( new_num & 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; int k = 2 ; if ( bitAtGivenPosSetOrUnset ( n , k ) ) System . out . println ( " Set " ) ; else System . out . println ( " Unset " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' A ' ) count ++ ; else if ( s . charAt ( i ) == ' G ' ) count ++ ; else if ( s . charAt ( i ) == ' C ' ) count ++ ; else if ( s . charAt ( i ) == ' T ' ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < 30 ; i ++ ) { for ( int j = 0 ; j < 20 ; j ++ ) { if ( l <= j ) { count += 2 ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += Math . min ( k , i ) ; } System . out . println ( ans ) ; } }
public class GFG { static boolean arePermutations ( int a [ ] , int b [ ] , int n , int m ) { int sum1 = 0 , sum2 = 0 , mul1 = 0 , mul2 = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; mul1 *= a [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { sum2 += b [ i ] ; mul2 *= b [ i ] ; } return ( ( sum1 == sum2 ) && ( mul1 == mul2 ) ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 2 } ; int b [ ] = { 3 , 1 , 2 } ; int n = a . length ; int m = b . length ; if ( arePermutations ( a , b , n , m ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int MAX_CHAR = 26 ; static void findAndPrintCommonChars ( String str1 , String str2 ) { int [ ] present = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) present [ i ] = 0 ; int l1 = str1 . length ( ) ; int l2 = str2 . length ( ) ; for ( int i = 0 ; i < l1 ; i ++ ) { present [ str1 . charAt ( i ) -
public class GFG { static boolean isInside ( int circle_x , int circle_y , int rad , int x , int y ) { if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad ) return true ; else return false ; } public static void main ( String [ ] args ) { int x = 1 , y = 1 ; int circle_x = 0 , circle_y = 0 ; int rad = 2 ; if ( isInside ( circle_x , circle_y , rad , x , y ) ) System . out . println ( " Inside " ) ; else System . out . println ( " Outside " ) ; } }
public class GFG { static int minSum ( int arr [ ] , int n , int x ) { int sum = 0 ; int largestDivisible = arr [ 0 ] ; int minimum = - 1 , arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( arr [ i ] % x == 0 && largestDivisible < arr [ i ] ) largestDivisible = arr [ i ] ; if ( arr [ i ] < minimum ) minimum = arr [ i ] ; } if ( largestDivisible == - 1 ) return sum ; int sumAfterOperation = ( sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible / x ) ) ; return Math . min ( sumAfterOperation , sum ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 5 , 5 , 5 , 6 } ; int n = arr . length ; int x = 3 ; System . out . println ( minSum ( arr , n , x ) ) ; } }
public class GFG { static int nthTerm ( int n ) { int nth = 0 ; if ( n % 2 == 0 ) nth = 2 * ( ( n * n ) - n ) ; else nth = ( 2 * n * n ) - n ; return nth ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( nthTerm ( n ) ) ; n = 25 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm (

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; int next = curr + k ; if ( next == curr ) { ans = i + 1 ; break ; } curr = next ; } System . out . println ( ans ) ; } }


import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( Math . abs ( x - y1 ) < Math . abs ( x - y2 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans ++ ; } } if ( ans % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int MAX = 100005 ; static boolean prime [ ] = new boolean [ MAX ] ; static int addPrimes ( ) { int n = MAX ; boolean [ ] prime = new boolean [ MAX ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { prime [ i ] = true ; } for
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = 15 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= max ) { ans = i ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { ans [ i ] = arr [ i ] ; i ++ ; } for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( ans [ j ] + " ▁ " ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; if ( n == 1 ) { ans = 0 ; } else { ans = n - 1 ; } System . out . println ( ans ) ; } }
public class GFG { static void search ( int arr [ ] , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int n = arr . length ; int result = search ( arr , n , x ) ; if ( result == - 1 ) System . out . println ( " Element ▁ is ▁ not ▁ present ▁ in ▁ array " ) ; else System . out . println ( " Element ▁ is ▁ present ▁ at ▁ index ▁ " + result ) ; } }

public class GFG { static int toggleBitsFromLToR ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; return ( n ^ num ) ; } static int unsetBitsInGivenRange ( int n , int l , int r ) { int num = ( 1 << ( 4 * 8 - 1 ) ) - 1 ; num = toggleBitsFromLToR ( num , l , r ) ; return ( n & num ) ; } public static void main ( String [ ] args ) { int n = 42 ; int l = 2 , r = 5 ; System . out . println ( unsetBitsInGivenRange ( n , l , r ) ) ; } }
public class GFG { static int MinStep ( int a [ ] , int n ) { int positive = 0 , negative = 0 ; int zero = 0 ; int step = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) zero ++ ; else if ( a [ i ] < 0 ) negative ++ ; step = step + ( - 1 - a [ i ] ) ; else positive ++ ; step = step + ( a [ i ] - 1 ) ; } if ( negative % 2 == 0 ) { step = step + zero ; } else { if ( zero > 0 ) { step = step + zero ; } else { step = step + 2 ; } } return step ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , - 2 , - 1 , - 3 , 4 } ; int n = a . length ; System . out .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i == j ) continue ; if ( i == a ) continue ; if ( j == a ) continue ; if ( i == b ) continue ; if ( j == b ) continue ; dp [ i ] [ j ] = Math . min ( dp [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; System . out . println ( arr [ n - 1 ] + arr [ n - 2 ] ) ; } } }
public class GFG { static int noOfSquares ( int x1 , int y1 , int x2 , int y2 ) { int dx = Math . abs ( x2 - x1 ) ; int dy = Math . abs ( y2 - y1 ) ; int ans = dx + dy - gcd ( dx , dy ) ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int x1 = 1 , y1 = 4 , x2 = 3 , y2 = 3 ; noOfSquares ( x1 , y1 , x2 , y2 ) ; } }
import java . util . * ; public class GFG { static String get_maximum ( String s , int a [ ] ) { String s = " " ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) - s . charAt ( i - 1 ) < a [ s . charAt ( i ) - s . charAt ( i - 1 ) ] ) { int j = i ; while ( j < n && ( s . charAt ( j ) - s . charAt ( j ) - s . charAt ( j ) ) <= a [ s . charAt ( j ) - s . charAt ( j ) ] ) { s = s . charAt ( j ) + a [ s . charAt ( j ) - s . charAt ( j ) ] ; j ++ ; } return s ; } } return " " ; } public static void main ( String [ ] args ) { String s = "1337" ; int a [ ] = { 0 , 1 , 2
public class GFG { static int MAX_DIGITS = 20 ; static boolean isOctal ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) >= 8 ) return false ; else n = n / 10 ; } return true ; } static boolean isPalindrome ( int n ) { int divide = 8 ; if ( isOctal ( n ) == false ) divide = 10 ; int [ ] [ ] octal = new int [ MAX_DIGITS ] [ MAX_DIGITS ] ; while ( n != 0 ) { octal [ 0 ] = n % divide ; n = n / divide ; } for ( int i = 1 ; i < MAX_DIGITS ; i ++ ) { for ( int j = 0 ; j < MAX_DIGITS ; j ++ ) { octal [ j ] = octal [ j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum2 += arr [ i ] ; } if ( sum2 == sum ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int binarySearch ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; int midValue = arr [ mid ] ; if ( mid == arr [ mid ] ) return mid ; int leftindex = Math . min ( mid - 1 , midValue ) ; int left = binarySearch ( arr , low , leftindex ) ; if ( left >= 0 ) return left ; int rightindex = Math . max ( mid + 1 , midValue ) ; right = binarySearch ( arr , rightindex , high ) ; return right ; } public static void main ( String [ ] args ) { int arr [ ] = { - 10 , - 5 , 2 , 2 , 2 , 3 , 4 , 7 , 9 , 12 , 13 }
public class GFG { static int MAX = 10000 ; static int prodDig [ ] = new int [ MAX ] ; static void getDigitProduct ( int x ) { if ( x < 10 ) return x ; if ( prodDig [ x ] != 0 ) return prodDig [ x ] ; prod = ( int ) ( x % 10 ) * getDigitProduct ( x / 10 ) ; prodDig [ x ] = prod ; return prod ; } static void findSeed ( int n ) { int res [ ] = new int [ MAX ] ; for ( int i = 1 ; i <= n / 2 ; i ++ ) { if ( i * getDigitProduct ( i ) == n ) res [ i ] = i ; } if ( res [ 0 ] == 0 ) System . out . println ( " NO ▁ seed ▁ exists " ) ; else { for ( int i = 0 ; i < res [ 0 ] ; i ++ ) System . out . print (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( x [ i ] * x [ j ] >= 0 ) { dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , Math . abs ( x [ i ] * x [ j ] ) ) ; } else { dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , Math . abs ( x [ i ] * x [ j ] ) ) ; } } } System . out . println ( dp [ n ] [ k ] ) ; } }
public class GFG { static int diff ( int n , int mid ) { if ( n > ( mid * mid * mid ) ) return ( n - ( mid * mid * mid ) ) ; else return ( mid * mid * mid - n ) ; } static int cubicRoot ( int n ) { int start = 0 , end = n ; int e = 0.0000001 ; while ( true ) { int mid = ( start + end ) / 2 ; int error = Math . diff ( n , mid ) ; if ( error <= e ) return mid ; if ( ( mid * mid * mid ) > n ) end = mid ; else start = mid ; } n = 3 ; System . out . println ( " Cubic ▁ root ▁ of ▁ " + n + " ▁ is ▁ " + ( squareRoot ( n ) + " ▁ is ▁ " + squareRoot ( e ) + " ▁ is ▁ " + squareRoot ( start ) ) ) ; return n ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( "Cubic ▁ root ▁ of ▁ " + n + " ▁ is ▁ " + square
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; min = i ; } } System . out . println ( min + " ▁ " + max ) ; } }
import java . util . * ; public class GFG { static int inv ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) x1 = x1 + m0 ; return x1 ; } static int findMinX ( int num [ ] , int rem [ ] , int k ) { int prod = 1 ; for ( int i = 0 ; i < k ; i ++ ) prod = prod * num [ i ] ; int result =
public class GFG { static int findMaxOR ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int maxOR = arr [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( ( maxOR | arr [ i ] ) > maxOR ) { maxOR = maxOR | arr [ i ] ; count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 4 , 2 } ; int n = arr . length ; System . out . println ( findMaxOR ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } }
import java . io . * ; public class GFG { static int aliquotSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( n % i == 0 ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( aliquotSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int p = ( 3 * i * i - i ) / 2 ; sum = sum + p ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } }
public class GFG { static int fifthPowerSum ( int n ) { int sm = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sm = sm + ( i * i * i * i * i ) ; return sm ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fifthPowerSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int squaresum ( int n ) { int sm = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sm = sm + ( i * i ) ; return sm ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }
import java . io . * ; public class GFG { static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } }
import java . io . * ; public class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( 2 * i - 1 ) * ( 2 * i - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum = ( sum + ( ( i * ( i + 1 ) * ( 2 * i + 1 ) ) / 6 ) ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
public class GFG { static int fourthPowerSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum = sum + ( i * i * i * i ) ; return sum ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int squareSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String [ ] args ) { int ans = squareSum ( 8 ) ; System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int AvgofSquareN ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += i * ( n - i ) ; return 2 * sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int solve ( int n , int base ) { int sum = 0 ; while ( n > 0 ) { int remainder = n % base ; sum = sum + remainder ; n = n / base ; } return sum ; } static int SumsOfDigits ( int n ) { sum = 0 ; int N = 8 ; SumsOfDigits ( n ) ; } public static void main ( String [ ] args ) { int n = 8 ; SumsOfDigits ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int pw = p [ i ] ; int cnt = 0 ; while ( pw != 0 ) { cnt ++ ; pw /= 10 ; } for ( int j = 0 ; j < cnt ; j ++ ) { ans += pw ; pw = p [ j ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 1 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int MAX = 2147483647 ; static int optimalSearchTree ( int [ ] [ ] freq , int n ) { int [ ]
public class GFG { static int get ( int x , int y , int z ) { if ( x > z ) return - 1 ; int val = z - x ; int div = ( z - x ) / y ; int ans = div * y + x ; return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 5 , z = 8 ; System . out . println ( get ( x , y , z ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . abs ( arr [ i ] - arr [ i - 1 ] ) ; } System . out . println ( ans ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int maxcoefficientvalue ( int n ) { if ( n % 2 == 0 ) return binomialCoeff ( n , int ( n / 2 ) ) ; else return binomialCoeff ( n , ( n + 1 ) / 2 ) ; } public static void main ( String [ ]
import java . util . * ; public class GFG { static boolean isVowel ( char ch ) { if ( ch >= ' a ' && ch <= ' e ' ) return true ; else return false ; } static boolean vowelPairs ( String s , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( isVowel ( s . charAt ( i ) ) && isVowel ( s . charAt ( i + 1 ) ) ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { String s = " abaebio " ; int n = s . length ( ) ; System . out . println ( vowelPairs ( s , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ;
public class GFG { static boolean isSubstring ( String s1 , String s2 ) { int M = s1 . length ( ) ; int N = s2 . length ( ) ; for ( int i = 0 ; i < N - M + 1 ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( s2 . charAt ( i + j ) != s1 . charAt ( j ) ) break ; } if ( j + 1 == M ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { String s1 = " for " ; String s2 = " geeksforgeeks " ; int res = isSubstring ( s1 , s2 ) ; if ( res == - 1 ) System . out . println ( " Not ▁ present " ) ; else System . out . println ( " Present ▁ at ▁ index ▁ " + res ) ; } }
import java . io . * ; public class GFG { static double angleOncirCumference ( double z ) { return ( z / 2 ) ; } public static void main ( String [ ] args ) { double angle = 65 ; double angle = angleOncirumference ( angle ) ; System . out . println ( " The ▁ angle ▁ is ▁ " + angle + " degrees " ) ; } }
public class GFG { static int countSubarraysof1and0 ( int a [ ] , int n ) { int count1 = 0 ; int count0 = 0 ; int number1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) count1 ++ ; else number1 += ( ( count1 ) * ( count1 + 1 )
public class GFG { static void printNumbers ( int N ) { int flag = 1 ; int x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) flag = 0 ; x = x / 10 ; } if ( flag == 1 ) { System . out . print ( N + " ▁ " ) ; } System . out . print ( N - 1 ) ; } } public static void main ( String [ ] args ) { int N = 20 ; printNumbers ( N ) ; } }
public class GFG { static void printPermutation ( int n , int k ) { int mx = n ; for ( int i = 1 ; i <= k ; i ++ ) System . out . print ( mx + " ▁ " ) ; for ( int i = 1 ; i <= mx ; i ++ ) System . out . print ( i + " ▁ " ) ; } public static void main ( String [ ] args ) { int N = 5 , K = 3 ; if ( K >= N - 1 ) System . out . print ( " Not ▁ Possible " ) ; else printPermutation ( N , K ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static boolean is_member ( List < Integer > list , int key ) { for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( key == list . get ( i ) ) return true ; } return false ; } static boolean overlap ( List1 , List2 ) { for ( int key = 0 ; key < list . size ( ) ; key ++ ) { if ( is_member ( List2 , key ) ) return true ; } return false ; } public static void main ( String [ ] args ) { String s1 = " geeksforgeeks " ; String s2 = " geeks " ; List1 = new ArrayList ( ) ; List2 = new ArrayList ( ) ; List1 . add ( s1 ) ; List2 . add ( s2 ) ; boolean yes_or_no = false ; if ( yes_or_no ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( n * ( a - b ) > ( c + d ) || n * ( a + b ) < ( c - d ) ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } } }
import java . util . * ; public class GFG { static void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ i ] ) count ++ ; } if ( count >= 2 ) System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
public class GFG { static int N = 3 ; static int maxPathSum ( int tri [ ] [ ] , int m , int n ) { for ( int i = 0 ; i < m - 1 ; i ++ ) { for ( int j = i + 1 ; j < m ; j ++ ) { if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ; else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ; } } return tri [ 0 ] [ 0 ] ; } public static void main ( String [ ] args ) { int tri [ ] [ ] = { { 1 , 0 , 0 } , { 4 , 8 , 0 } , { 1 , 5 , 3 } } ; int n = 2 ; System . out . println ( maxPathSum ( tri , n , n ) ) ; } }
public class GFG { static boolean isHeap ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false ; if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length ; if ( isHeap ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isHeap ( int arr [ ] , int i , int n ) { if ( i > ( n - 2 ) / 2 ) return true ; if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 * i + 2 ] && isHeap ( arr , 2 * i + 1 , n ) && isHeap ( arr , 2 * i + 2 , n ) ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length - 1 ; if ( isHeap ( arr , 0 , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( a * b - y * c == 0 ) { System . out . println ( " YES " ) ; System . exit ( 0 ) ; } if ( x * y - y * c == 0 ) { System . out . println ( " YES " ) ; System . exit ( 0 ) ; } if ( x * y - y * c == a * b - y * c ) { System . out . println ( " YES " ) ; System . exit ( 0 ) ; } if ( x * y - y * c == b * c ) { System . out . println ( " YES " ) ; System . exit ( 0 ) ; } if ( x *
public class GFG { static int findMinDel ( int arr [ ] , int n ) { int min_num = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min_num = Math . min ( arr [ i ] , min_num ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_num ) cnt ++ ; } return n - cnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 2 } ; int n = arr . length ; System . out . println ( findMinDel ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int count ( int x , int y ) { int ans = 0 ; int m = dict ( ) ; while ( x % y != 0 ) { x %= y ; ans ++ ; if ( x == m ) return - 1 ; m [ x ] = 1 ; x *= 10 ; } return ans ; } public static void main ( String [ ] args ) { int res = count ( 1 , 2 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( res ) ; res = count ( 5 , 3 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( res ) ; res = count ( 3 , 5 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( res ) ; res = count ( 3 , 5 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( res ) ; } }
public class GFG { static boolean isPossibleToMakeDivisible ( int arr [ ] , int n ) { int remainder = 0 ; for ( int i = 0 ; i < n ; i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ; return ( remainder == 0 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 40 , 50 , 90 } ; int n = 3 ; if ( isPossibleToMakeDivisible ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc
import java . io . * ; public class GFG { static void printCubes ( int a , int b ) { for ( int i = a ; i <= b ; i ++ ) { int j = 1 ; for ( j * j * j ; j * j == i ; j * j * j == i ) { if ( j * j * j == i ) { System . out . print ( j * j * j + " ▁ " ) ; break ; } } } } public static void main ( String [ ] args ) { int a = 1 , b = 100 ; printCubes ( a , b ) ; } }
public class GFG { static int getModulo ( int n , int d ) { return ( n & ( d - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 6 ; int d = 4 ; System . out . println ( n + " moduo " + d + " is ▁ " + getModulo ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( arr [ i ] - arr [ j ] ) <= d ) { max = Math . max ( max , j - i + 1 ) ; break ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . charAt ( i ) - ' a ' ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = s . charAt ( i ) - ' a ' ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += ( ( ( a [ i ] - 1 ) / 4 ) * 16 ) ; } System . out . println ( ans ) ; } }
public class GFG { static boolean isPerfectCube ( int x ) { int cr = ( int ) Math . sqrt ( x * x * x ) ; return ( cr * cr * cr == x ) ; } static void canBePerfectCube ( int N , int K ) { if ( isPerfectCube ( N + K ) || isPerfectCube ( N - K ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } public static void main ( String [ ] args ) { int N = 7 , K = 1 , canBePerfectCube ( N , K ) ; N = 5 , K = 4 , canBePerfectCube ( N , K ) ; N = 7 ; K = 2 ; canBePerfectCube ( N , K ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( n - 1 - i ) ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = i + 1 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j
public class GFG { static int countDigits ( int val , int arr [ ] ) { while ( val > 0 ) { int digit = val % 10 ; arr [ int ( digit ) ] ++ ; val = val / 10 ; } return ; } static int countFrequency ( int x , int n ) { int freq_count [ ] = new int [ 10 ] ; for ( int i = 1 ; i <= n ; i ++ ) { int val = ( int ) Math . pow ( x , i ) ; countDigits ( val , freq_count ) ; } for ( int i = 0 ; i < 10 ; i ++ ) System . out . print ( freq_count [ i ] + " ▁ " ) ; return ; } public static void main ( String [ ] args ) { int x = 15 ; int n = 3 ; countFrequency ( x , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ^ a [ i + 1 ] ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == b [ i + 1 ] ) { c ++ ; } } System . out . println ( c == n ? " YES " : " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; System . out . println ( Math . max ( 0 , n - 2 ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { ans [ arr [ i ] ] = sc . nextInt ( ) ; } System . out . println ( ans [ 0 ] ) ; } }
public class GFG { static int linearCheck ( int ar [ ] [ ] , int arr [ ] [ ] ) { for ( int i = 0 ; i < ar . length ; i ++ ) { boolean matched = true ; for ( int j = 0 ; j < arr [ 0 ] . length ; j ++ ) { if ( ar [ i ] [ j ] != arr [ j ] [ j ] ) matched = false ; } if ( matched ) return i + 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 0 , 1 , 0 } , { 10 , 9 , 22 , 23 } , { 40 , 40 , 40 , 40 } , { 43 , 44 , 55 , 68 } , { 81 , 73 , 100 , 132 } , { 100 , 75 , 125 , 133 } , { 100 , 80 , 121 , 144 , 160 } , { 80 , 121 , 144 , 160 , 100 } , { 80 , 121 , 144 , 160 , 100 } , { 43 , 44 , 55 , 68 } , { 81 , 73 , 100 , 132 } , { 81 , 73 , 100 , 132 } , { 81 , 81 , 81 , 81 , 81 , 81
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < a ; i ++ ) { sum += sc . nextInt ( ) ; } if ( sum % a == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( sum / a ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 4 * n - 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 7 * ( int ) Math . pow ( n , 2 ) - 7 * n + 7 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 5 * ( int ) Math . pow ( n , 2 ) - 5 * n ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 2 * n + 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 3 ) + Math . pow ( n , 2 ) ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) - n - 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) - 2 * n + 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + n - 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( x < 0 ) { ans = - x ; } else if ( x > 0 ) { ans = Math . abs ( x ) + Math . abs ( y ) ; } else { ans = Math . abs ( x ) + Math . abs ( y ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < k ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Solution { public int [ ] fib ( int n ) { int [ ] memo = new int [ n + 1 ] ; memo [ 0 ] = 1 ; memo [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { memo [ i ] = memo [ i - 1 ] + memo [ i - 2 ] ; } return memo ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int n = 2 ; int [ ] out = sObj . fib ( n ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [
public class GFG { static double PI = 3.142 ; static double cosXSertiesSum ( double x , int n ) { double x = x * ( PI / 180.0 ) ; double res = 1 ; double sign = 1 ; double fact = 1 ; double pow = 1 ; for ( int i = 1 ; i < 5 ; i ++ ) { sign = sign * - 1 ; fact = fact * ( 2 * i - 1 ) * ( 2 * i ) ; pow = pow * x * x ; res = res + sign * pow / fact ; } return res ; } public static void main ( String [ ] args ) { double x = 50 ; int n = 5 ; System . out . println ( cosXSertiesSum ( x , n ) ) ; } }
public class GFG { static int findNumber ( int N , int S ) { int i = ( ( N ) * ( N + 1 ) ) / 4 ; return i ; } static boolean check ( int N , int S ) { int i = findNumber ( N , S ) ; int integerI = i ; if ( i - integerI == 0 ) { System . out . println ( " Yes " ) ; System . out . println ( " , ▁ " + integerI + " , ▁ " + integerI + 1 ) ; } else { System . out . println ( " No " ) ; } return i ; } public static void main ( String [ ] args ) { int N = 4 , S = 3 ; check ( N , S ) ; N = 5 ; S = 3 ; check ( N , S ) ; } }
import java . util . * ; public class GFG { static boolean multipleOfThree ( int K , int dig0 , int dig1 ) { int sum = 0 ; int temp = ( dig0 + dig1 ) % 10 ; sum = dig0 + dig1 ; if ( K == 2 ) { if ( sum % 3 == 0 ) return true ; else return false ; } sum += temp ; int numberofGroups = ( K - 3 ) / 4 ; int remNumberofDigits = ( K - 3 ) % 4 ; sum += ( numberofGroups * 20 ) ; for ( int i = 0 ; i < remNumberofDigits ; i ++ ) { int temp = ( 2 * temp ) % 10 ; sum += temp ; } if ( sum % 3 == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int K =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; sum += b [ i ] ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; if ( sum >= n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int countOcc ( String s ) { int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) - 3 ; i ++ ) { c = 0 ; for ( int j = i ; j < s . length ( ) - 3 ; j ++ ) { if ( s . charAt ( j ) == ' c ' ) c ++ ; else if ( s . charAt ( j ) == ' l ' ) l ++ ; else if ( s . charAt ( j ) == ' a ' ) a ++ ; else if ( s . charAt ( j ) == ' p ' ) p ++ ; } if ( c == 1 && l == 1 && a == 1 && p == 1 && p == 1 ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { String s = " clapc " ; System . out . println ( countOcc ( s . toLowerCase ( ) ) ) ; } }
public class GFG { static int countSteps ( int x , int y ) { if ( x % y == 0 ) return ( x / y ) ; return ( x / y ) + countSteps ( y , x % y ) ; } public static void main ( String [ ] args ) { int x = 100 , y = 19 ; System . out . println ( countSteps ( x , y ) ) ; } }
public class GFG { static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } static boolean isSunnyNum ( int n ) { if ( isPerfectSquare ( n + 1 ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isSunnyNum ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class GFG { static double PI = 3.14159265 ; static double area_inscribed ( double P , double B , double H ) { return ( ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ) ; } public static void main ( String [ ] args ) { double P = 3 , B = 4 , H = 5 ; System . out . println ( area_inscribed ( P , B , H ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] map = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = map [ i ] [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = dp [ i ] [ j + 1 ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { System . out . print ( dp [ i ] [ j ] + " ▁ " ) ; } System . out . println ( ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static int getCount ( int v [ ] , int n ) { int v [ ] = new int [ n ] ; Arrays . sort ( v ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = n - 1 - upper_bound ( v , v [ i ] - 1 ) ; if ( v [ i ] == v [ i ] ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { int n = 4 ; int v [ ] = { { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } , { 1 , 2 , 3 , 4 } ,
import java . io . * ; public class GFG { static int trailing_zeros ( int N ) { int count_of_two = 0 ; int count_of_five = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int val = i ; while ( val % 2 == 0 && val > 0 ) val /= 2 ; count_of_two ++ ; while ( val % 5 == 0 && val > 0 ) val /= 5 ; } int ans = Math . min ( count_of_two , count_of_five ) ; return ans ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( trailing_zeros ( N ) ) ; } }
import java . util . * ; public class GFG { static boolean isEqual ( int a , int b ) { if ( removeZero ( a ) + removeZero ( b ) == removeZero ( a + b ) ) return true ; return false ; } static int isEqual ( int a , int b ) { if ( removeZero ( a ) + removeZero ( b ) == removeZero ( a + b ) ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 105 , b = 106 ; if ( isEqual ( a , b ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int max = Integer . MIN_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > max ) max = arr [ j ] ; } min = Math . min ( min , max ) ; } System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = Math . abs ( a [ 0 ] - b [ 0 ] ) ; int max = Math . abs ( a [ n - 1 ] - b [ n - 1 ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > Math . abs ( a [ i ] - b [ i ] ) ) { min = Math . abs ( a [ i ] - b [ i ] ) ; } if ( max < Math . abs ( a [ i ] - b [ i ] ) ) { max = Math . abs ( a [ i ] - b [ i ] ) ; } } System . out . println ( min + " ▁ " + max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( ans [ arr [ i ] ] + " ▁ " ) ; } } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int totalPairs ( String s1 , String s2 ) { int count = 0 ; int arr1 [ ] = new int [ 7 ] ; arr1 [ 0 ] = 0 ; arr2 [ 0 ] = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { arr1 [ i ] = countSetBits ( s1 . charAt ( i ) ) ; arr1 [ arr1 [ i ] ] ++ ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { arr2 [ arr2 [ i ] ] ++ ; } for ( int i = 0 ; i < 7 ; i ++ ) { count +=
import java . util . * ; public class GFG { static int countSubSeq ( int i , int sum , int cnt , int a [ ] , int n ) { if ( i == n ) { if ( sum == 0 && cnt > 0 ) return 1 ; else return 0 ; } int ans = 0 ; ans += countSubSeq ( i + 1 , sum , cnt , a , n ) ; ans += countSubSeq ( i + 1 , sum + a [ i ] , cnt + 1 , a , n ) ; return ans ; } public static void main ( String [ ] args ) { int a [ ] = { - 1 , 2 , - 2 , 1 } ; int n = a . length ; System . out . println ( countSubSeq ( 0 , 0 , a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; int y = arr [ i ] ; if ( x == y ) { count ++ ; } } System . out . println ( count ) ; } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) % dp [ i - 1 ] [ j ] ; } } System . out . println ( dp [ n ] [ n ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] cnt = new int [ n ] ; for ( int i = 0 ; i < n ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i =
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int LIMIT = Library . nextInt ( ) ; private static final int [ ] [ ] comb = new int [ LIMIT + 1 ] [ LIMIT + 1 ] ; private static final int [ ] [ ] dp = new int [ LIMIT + 1 ] [ LIMIT + 1 ] ; private static final int MOD = 1000000007 ; public String run ( ) { int count = 0 ; for ( int i = 1 ; i <= LIMIT ; i ++ ) { for ( int j = 1 ; j <= LIMIT ; j ++ ) { if ( i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] ans = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { ans [ i ] [ j ] = arr [ i ] [ j ] ; ans [ i ] [ j ] = arr [ i ] [ j - 1 ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] [ 0 ] + ans [ i ] [ 1 ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int count = 0 ; for ( int i = 0 ; i < m - 1 ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( a [ i ] [ j ] == a [ i + 1 ] [ j ] ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] ; a [ i + 1 ] [ j ] = a [ i ] [ j + 1 ] ; a [ i + 1 ] [ j + 1 ] = a [ i ] [ j + 1 ] ; } else { a [ i ] [ j ] = a [ i + 1 ] [ j ] ; a [ i + 1 ] [ j + 1 ] = a [ i ] [ j + 1 ] ; a [ i + 1 ] [ j + 1 ] = a [ i ] [ j + 1 ] ; } } } System . out . println (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] f = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ i ] = sc . nextInt ( ) ; } int [ ] f2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f2 [ i ] = sc . nextInt ( ) ; } int [ ] f3

import java . util . * ; public class GFG { static int MAX = 100 ; static int countMountains ( int [ ] a , int n ) { int [ ] A = new int [ n + 2 ] ; for ( int
import java . util . * ; public class GFG { static int N = 100005 ; static int [ ] [ ] pre = new int [ N ] [ N ] ; static int Positive_Divisors ( ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j <= Math . sqrt ( i ) ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) { pre [ i ] [ j ] ++ ; } else { pre [ i ] [ j ] += 2 ; } } } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( pre [ i ] [ i ] == pre [ i - 1 ] [ i ] ) ans ++ ; pre [ i ] [ i ] = ans ; } if ( __name ( ) . equals ( " _ main _ " ) ) Positive_Divisors ( ) ; N = 15 ; System . out . println ( pre [ N ] ) ; } public static void main ( String [ ] args ) { Positive_Divisors ( ) ; int N =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m
import java . io . * ; public class GFG { static double area_of_regular_polygon ( int n , int len ) { double P = ( len * n ) ; double A = len / ( 2 * Math .tan ( ( 180 / n ) * 3.14159 / 180 ) ) ; double area = ( P * A ) / 2 ; return area ; } static double area_of_triangle_inscribed ( int n , int len ) { double area = area_of_regular_polygon ( n , len ) ; triangle = area / n ; double ins_tri = ( triangle * 3 ) ; return ins_tri ; } public static void main ( String [ ] args ) { int n = 6 , len = 10 ; System . out . println ( area_of_triangle_inscribed ( n , len ) ) ; } }
public class GFG { static int MAX = 256 ; static int lastNonRepeating ( String str , int n ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) ] ++ ; for ( int i = n - 1 ; i >= 0 ; i -- ) { char ch = str . charAt ( i ) ; if ( freq [ ch ] == 1 ) return ( " " + ch ) ; } return - 1 ; } public static void main ( String [ ] args ) { String str = " GeeksForGeeks " ; int n = str . length ( ) ; System . out . println ( lastNonRepeating ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int min = 1000000000 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int min2 = Math . min ( x , y ) ; int max2 = Math . max ( x , y ) ; if ( min2 == min ) { System . out . println ( i + 1 ) ; break ; } else { if ( max2 == max ) { System . out . println ( i + 1 ) ; break ; } else { min2 = Math . min ( x , y ) ; max2 = Math . max ( x , y ) ; } } } if ( max2 == max ) { System . out . println ( - 1 ) ; } else { System . out . println ( max2 - min2 ) ; } } }
import java . io . * ; public class GFG { static int y ( int x ) { return ( 1 / ( 1 + x ) ) ; } static int BooleRule ( int a , int b ) { int n = 4 ; int h = ( ( b - a ) / n ) ; int sum = 0 ; int bl = ( 7 * y ( a ) + 32 * y ( a + h ) + 12 * y ( a + 2 * h ) + 32 * y ( a + 3 * h ) + 7 * y ( a + 4 * h ) ) * 2 * h / 45 ; sum = sum + bl ; return sum ; } public static void main ( String [ ] args ) { int lowlimit = 0 , upplimit = 4 ; System . out . println ( " f ( x ) ▁ = ▁ " + BooleRule ( lowlimit , upplimit , 4 ) ) ; } }
import java . util . * ; public class GFG { static int maxN = 20 ; static int maxM = 256 ; static int dp [ ] [ ] = new int [ maxN ] [ maxM ] ; static int findLen ( int arr [ ] , int i , int curr , int n , int m ) { if ( i == n ) {
import java . util . * ; public class GFG { static int maxN = 20 ; static int maxM = 64 ; static int dp [ ] [ ] = new int [ maxN ] [ maxM ] ; static int findLen ( int arr [ ] , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) return
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) dp [ i ] [ j ] = sc . nextInt ( ) ; int max = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( dp [ i ] [ j ] > 0 )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 7 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int minDiff ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) { result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 100 , 300 , 200 , 1000 , 20 , 30 } ; int n = arr . length ; int k = 3 ; System . out . println ( minDiff ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) ans ++ ; } System . out . println ( ans ) ; } } }
public class GFG { static int Mean ( int arr [ ] , int n ) { int sm = 0 ; for ( int i = 0 ; i < n ; i ++ ) sm += arr [ i ] ; return sm / n ; } static int meanAbsoluteDeviation ( int arr [ ] , int n ) { int absSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) absSum = absSum + Math . abs ( arr [ i ] - Mean ( arr , n ) ) ; return absSum / n ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 15 , 15 , 17 , 18 , 21 } ; int n = arr . length ; System . out . println ( meanAbsoluteDeviation ( arr , n ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int LIMIT = 1000000 ; private static int primes [ ] = new int [ LIMIT ] ; private static int count ( int primeindex , int product ) { if ( primeindex == primes . length ) return 1 ; else { int result = 0 ; while ( product <= LIMIT ) { result += count ( primeindex + 1 , product ) ; product *= primes [ primeindex ] ; } return result ; } } private static int count ( int index , int product ) { if ( index == primes . length ) return 1 ; else return 0 ; } }
public class GFG { static int maximumXOR ( int n , int l , int r ) { int x = 0 ; for ( int i = 0 ; i < Math . log2 ( r ) ; i ++ ) { if ( n & ( 1 << i ) ) { if ( x > r ) { x ^= ( 1 << i ) ; } } else { if ( x ^ ( 1 << i ) ) <= r ; x ^= ( 1 << i ) ; } } return n ^ x ; } public static void main ( String [ ] args ) { int n = 7 ; int l = 2 , r = 23 ; System . out . println ( " The ▁ output ▁ is ▁ " + maximumXOR ( n , l , r ) ) ; } }
import java . util . * ; public class GFG { static int maxPrimefactorNum ( int N ) { boolean arr [ ] = new boolean [ N + 5 ] ; for ( int i = 3 ; i * i <= N ; i ++ ) arr [ i ] = false ; int i = 3 ; while ( i * i <= N ) { if ( arr [ i ] ) { for ( int j = i * i ; j < N + 1 ; j += i ) arr [ j ] = false ; } i ++ ; } int prime [ ] = new int [ N + 1 ] ; prime [ 0 ] = 2 ; for ( int i = 3 ; i <= N ; i += 2 ) { if ( arr [ i ] ) prime [ i ] = i ; } for ( int i = 0 ; i < N ; i += 2 ) { if ( arr [ i ] ) prime [ i ] = i ; } int ans = 1 ; while ( ans * prime [ i ] <= N && i < prime . length ) { ans *= prime [ i ] ; i ++ ; } return ans ; } public static void main ( String [ ] args ) { int
import java . io . * ; public class GFG { static int CountTrailingZeros ( int n ) { int bit = ( int ) ( Math . pow ( n , 2 ) ) ; int zero = 0 ; for ( int i = 0 ; i < bit ; i ++ ) { if ( bit . charAt ( i ) == '0' ) zero ++ ; else break ; } return zero ; } public static void main ( String [ ] args ) { int n = 4 ; int ans = CountTrailingZeros ( n ) ; System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int min = Math . min ( a , Math . min ( b , c ) ) ; int max = Math . max ( a , Math . max ( b , c ) ) ; System . out . println ( min + " ▁ " + max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int count = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) count ++ ; else count = 0 ; max = Math . max ( max , count ) ; } System . out . println ( max ) ; } } }
import java . util . * ; public class GFG { static String distinctSubstring ( String P , String Q , int K , int N ) { Set < String > S = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String sum = 0 ; String s = " " ; for ( int j = 0 ; j < N ; j ++ ) { int pos = P . charAt ( j ) - 97 ; sum = sum + P . charAt ( pos ) - 48 ; s += P . charAt ( pos ) ; if ( sum <= K ) { S . add ( s ) ; } else break ; } } return S . size ( ) ; } public static void main ( String [ ] args ) { String P = " abcde " ; String Q = "12345678912345678912345678" ; int K = 5 ; int N = P . length ( ) ; System . out . println ( distinctSubstring ( P , Q , K , N ) ) ; } }
import java . util . * ; public class GFG { static void makeEven ( int arr [ ] , int n ) { int first_e_i = - 1 , last_e_i = - 1 , last_n_i = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( arr [ i ] ) % 2 == 0 && ( arr [ i ] ) < arr [ last_n_i ] ) { first_e_i = i ; break ; } if ( ( arr [ i ] ) % 2 == 0 ) last_e_i = i ; } if ( first_e_i !=
public class GFG { static void findDivisors ( int n ) { int [ ] div = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( j * i <= n ) div [ i * j ] ++ ; } } for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( div [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 10 ; findDivisors ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int [ ] arr = new int [ s . length ( ) + 1 ] ; arr [ 0 ] = 0 ; arr [ s . length ( ) - 1 ] = 0 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { arr [ i ] = arr [ i - 1 ] + ( t . charAt ( i - 1 ) == '0' ? 1 : 0 ) ; } int ans = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( arr [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
public class GFG { static int MAX_CHAR = 256 ; static void printDistinct ( String str ) { int n = str . length ( ) ; int [ ] [ ] count = new int [ MAX_CHAR ] [ MAX_CHAR ] ; int index [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { char x = str . charAt ( i ) ; count [ x ] ++ ; if ( count [ x ] == 1 && x != ' ▁ ' ) { index [ x ] = i ; } if ( count [ x ] == 2 ) { index [ x ] = n ; } } int index [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( index [ i ] == n ) break ; System . out . print ( str . charAt ( index [ i ] ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { String str = " GeeksforGeeks " ; printDistinct ( str ) ; } }
public class GFG { static int calculate ( int x , int k , int m ) { int result = x ; k = k - 1 ; while ( k > 0 ) { result = ( result * ( x - 1 ) ) % m ; k -- ; } return result ; } public static void main ( String [ ] args ) { int x = 5 , k = 2 , m = 3 ; System . out . println ( calculate ( x , k , m ) ) ; } }
import java . util . * ; public class GFG { static void converthenumber ( int n ) { String s = Integer . toString ( n ) ; String res = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' || s . charAt ( i ) == '3' || s . charAt ( i ) == '5' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) res += s . charAt ( i ) ; if ( s . length ( ) == 2 ) break ; } if ( s . length ( ) == 2 ) System . out . println ( res ) ; else System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { int n = 18720 ; converthenumber ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } int [ ] ans = new int [ 26 ] ; for ( int i = 0 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = arr [ i ] ; arr [ i ] = arr [ max ] ; arr [ max ] = temp ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } System . out . println ( max ) ; } } }
import java . io . * ; public class GFG { static int sn ( int n , int an ) { return ( n * ( 1 + an ) ) / 2 ; } static int trace ( int n , int m ) { int an = 1 + ( n - 1 ) * ( m + 1 ) ; int row majorSum = sn ( n , an ) ; an = 1 + ( n - 1 ) * ( n + 1 ) ; int col majorSum = sn ( n , an ) ; return ( row majorSum + col majorSum ) ; } public static void main ( String [ ] args ) { int N = 3 , M = 3 ; System . out . println ( trace ( N , M ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] [ ] a = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { String t = sc . next ( ) ; for ( int j = 0 ; j < w ; j ++ ) { a [ i ] [ j ] = t . charAt ( j ) - 48 ; } } int ans = 0 ; for ( int i = 0 ; i < h - 1 ; i ++ ) { for ( int j = 0 ; j < w - 1 ; j ++ ) { if ( a [ i ] [ j ] == ' J ' ) { ans += ( a [ i ] [ j ] == ' O ' ) ? 1 : 0 ; } else if ( a [ i ] [ j ] == ' I ' ) { ans += ( a [ i ] [ j ] == ' I ' ) ? 1 : 0 ; } } } System . out . println ( ans ) ; } }
public class GFG { static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( i % k == 0 ) count ++ ; if ( ( n / i ) % k == 0 ) count ++ ; } } if ( ( n / i ) % k == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int n = 12 , k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } }
public class GFG { static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 && i % k == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 12 , k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } }
public class GFG { static long power ( long x , long y , long p ) { long res = 1 ; x = x % p ; while ( y > 0 ) { if ( y == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static long findModuloByM ( long X , long N , long M ) { if ( N < 6 ) { long temp = ( long ) Math . pow ( 48 + X , M ) ; long res = ( long ) Math . pow ( M , 2 ) ; return res ; } if ( N % 2 == 0 ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } int [ ] arr3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr3 [ i ] = sc . nextInt ( ) ; } int [ ] arr4 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr4 [ i ] = sc . nextInt ( ) ; } int [ ] arr5 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr5 [ i ] = sc . nextInt ( ) ; } int [ ] arr6 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr6 [ i ]
import java . util . * ; public class GFG { static int findMaxDiff ( int a [ ] , int n ) { if ( n < 2 ) { System . out . println ( " Invalid ▁ " ) ; return 0 ; } int min_val = Integer . MAX_VALUE ; int max_val = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] - i ) > max_val ) { max_val = a [ i ] - i ; } if ( ( a [ i ] - i ) < min_val ) { min_val = a [ i ] - i ; } } return ( max_val - min_val ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 15 , 4 , 12 , 13 } ; int n = arr . length ; System . out . println ( findMaxDiff ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { System . out . println ( " NO " ) ; return ; } } } System . out .
import java . util . * ; public class GFG { static int numberOfPaths ( int m , int n ) { int count [ ] [ ] = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { count [ i ] [ 0 ] = 1 ; } for ( int j = 0 ; j < n ; j ++ ) { count [ 0 ] [ j ] = 1 ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] ; } } return count [ m - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int m = 3 , n = 3 ; System . out . println ( numberOfPaths ( m , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % n == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static boolean isKthBitSet ( int n , int k ) { if ( ( n >> ( k - 1 ) ) & 1 ) return true ; return false ; } static int setKthBit ( int n , int k ) { return ( ( 1 << ( k - 1 ) ) | n ) ; } static int allBitsAreSet ( int n ) { if ( ( n + 1 ) &
import java . util . * ; public class GFG { static int factorial ( int n ) { if ( n <= 1 ) return 1 ; return n * factorial ( n - 1 ) ; } static int nCr ( int n , int r ) { return ( factorial ( n ) / ( factorial ( n - r ) * factorial ( r ) ) ) ; } static int NumberOfWays ( int n , int x , int y ) { return ( nCr ( 2 * n - x - y , n - x ) * factorial ( n ) * factorial ( n ) ) ; } public static void main ( String [ ] args ) { int n = 5 , x = 4 , y = 2 ; System . out . println ( NumberOfWays ( n , x , y ) ) ; } }
public class GFG { static String commonPrefixUtil ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; String result = " " ; for ( int i = 0 ; i < n1 - 1 ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( j ) ) break ; result += ( str1 . charAt ( i ) ) ; i ++ ; j ++ ; } return ( result ) ; } static String commonPrefix ( String arr [ ] , int n ) { Arrays . sort ( arr ) ; int i , j , k ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] . charAt ( j ) != arr [ k ] . charAt ( i ) ) break ; k ++ ; } return ( result ) ; } public static void main ( String [ ] args ) { String arr [ ] = { " geeksforgeeks " , " geeks " , " geek " , " geezer " } ; int n = arr . length
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } else { count += 1 ; } } System . out . println ( count ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int a = 0 , b = 1 ; for ( int i = 0 ; i < 32 ; i ++ ) { a = b ; b = a + b ; } return Integer . toString ( a ) ; } }
public class GFG { static void findFrequencyUtil ( int arr [ ] , int low , int high , int freq [ ] ) { if ( arr [ low ] == arr [ high ] ) { freq [ arr [ low ] ] ++ ; } else { int mid = ( low + high ) / 2 ; findFrequencyUtil ( arr , mid , freq ) ; findFrequencyUtil ( arr , mid + 1 , high , freq ) ; } } static void findFrequency ( int arr [ ] , int n ) { int freq [ ] = new int [ n ] ; findFrequencyUtil ( arr , 0 , n - 1 , freq ) ; for ( int i = 0 ; i < arr [ n - 1 ] ; i ++ ) { if ( freq [ i ] != 0 ) { System .
import java . util . * ; public class GFG { static int compute ( ) { int totients = eulerlib . list_totients ( 10 * 7 - 1 ) ; int minnumer = 1 ; int mindenom = 0 ; for ( int i = 0 ; i < totients ; i ++ ) { if ( i * mindenom < minnumer * totients [ 2 ] ) { mindenom = totients [ i ] ; } } return totients ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static void intersection ( int [ ] a , int [ ] b , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( a [ i ] > b [ j ] ) j ++ ; else { if ( b [ j ] > a [ i ] ) i ++ ; else System . out . print ( a [ i ] + " ▁ " ) ; i ++ ; j ++ ; } } } public static void main ( String [ ] args ) { int [ ] a = { 1 , 2 , 3 , 3 , 4 , 5 , 5 , 6 } ; int [ ] b = { 3 , 3 , 5 } ; int n = a . length ; int m = b . length ; intersection ( a , b , n , m ) ; } }
import java . util . * ; public class GFG { static int findMin ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += m . log ( a [ i ] ) ; } int x = m . exp ( ( sum / n ) ) ; return ( int ) x + 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 4 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int lcmOfArray ( int arr [ ] , int n ) { if ( n < 1 ) return 0 ; int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) ; return lcm ; } static int minPerfectSquare ( int arr [ ] , int n ) { int lcm = lcmOfArray
public class GFG { static int subarrayCount ( int arr [ ] , int n ) { int result = 0 ; int fast = 0 , slow = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] == 1 ) fast ++ ; else slow ++ ; result += fast * ( fast - slow + 1 ) / 2 ; fast = i ; slow = i ; } if ( fast != slow ) { int length = fast - slow + 1 ; result += length * ( length - 1 ) / 2 ; fast = slow ; slow = i ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( subarrayCount ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) min = arr [ i ] ; } System . out . println ( min ) ; } }
import java . util . * ; public class GFG { static int MAX_CHARS = 256 ; static int findSubString ( String str ) { int n = str . length ( ) ; if ( n <= 1 ) return str . charAt ( 0 ) ; int dist_count = str . length ( ) ; int curr_count = 0 ; int min_len = n ; for ( int j = 0 ; j < n ; j ++ ) { curr_count ++ ; if ( curr

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { c [ i ] [ j ] = Math . max ( a [ i ] [ j ] , b [ i ] [ j ] ) ; } } System . out . println ( c [ n - 1 ] [ 0 ] ) ; } }
import java . io . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } odd_pairs = odd * ( n - 1 ) ; even_pairs = even * ( n - 1 ) ; System . out . println ( odd_pairs ) ; System . out . println ( even_pairs ) ; return odd_pairs ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 } ; int n = arr . length ; countPairs ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 10 == 0 ) { ans ++ ; } } if ( ans < m ) { System . out . println ( " > " ) ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { if ( arr [ i ] == 0 ) { count ++ ; } else { count = 1 ; } } else { if ( arr [ i ] == 0 ) { count ++ ; } else { count = 0 ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static boolean search ( int arr [ ] , int n , int x ) { int front = 0 , back = n - 1 ; while ( front <= back ) { if ( arr [ front ] == x || arr [ back ] == x ) return true ; front ++ ; back -- ; } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 80 , 30 , 60 , 50 , 110 , 100 , 130 , 170 } ; int x = 131 ; int n = arr . length ; if ( search ( arr , n , x ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static void countFreq ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( arr [ i ] ) != - 1 ) { System . out . println ( arr [ i ] + " ▁ " + mp . get ( arr [ i ] ) ) ; } mp . put ( arr [ i ] , - 1 ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 } ; int n = arr . length ; countFreq ( arr , n ) ; } }
import java . util . * ; public class GFG { static int MinCostTree ( int arr [ ] , int n ) { int ans = 0 ; int st [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { while ( st [ - 1 ] <= arr [ i ] ) { st [ - 1 ] = st [ - 1 ] ; st [ ++ arr [ i ] ] ; ans += st [ i ] * st [ i - 1 ] ; } st [ i ] = arr [ i ] ; } for ( int i = 2 ; i < st . length ; i ++ ) ans += st [ i ] * st [ i - 1 ] ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 } ; int n = arr . length ; System . out . println ( MinCostTree ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i
import java . io . * ; public class GFG { static void findEquation ( int a , int b ) { int sum = ( a + b ) ; int product = ( a * b ) ; System . out . println ( " x ^ 2 ▁ - ▁ ( " + product + " ) ▁ + " + " + product + " ) ▁ = ▁ 0" ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; findEquation ( a , b ) ; } }
public class GFG { static void circle_equation ( int x1 , int y1 , int r ) { int a = - 2 * x1 ; int b = - 2 * y1 ; int c = ( r * r ) - ( x1 * x1 ) - ( y1 * y1 ) ; System . out . print ( " x ^ 2 ▁ + ▁ ( " + a + " , ▁ " + b + " ) ▁ + ▁ " + " , ▁ " ) ; System . out . print ( " y ^ 2 ▁ + ▁ ( " + c + " , ▁ " + y ) ▁ = ▁ " + end ) ; System . out . print ( " x ^ 2 ▁ + ▁ ( " + b + " , ▁ " + c ) + " , ▁ " + end ) ; System . out . print ( " y ^ 2 ▁ + ▁ ( " + c + " , ▁ " + y ) + " , ▁ " + end ) ; } public static void main ( String [ ] args ) { int x1 = 2 , y1 = - 3 , r = 8 ; circle_equation ( x1 , y1 , r ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math . max ( ans , arr [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = " abcdefghijklmnopqrstuvwxyz " ; for ( int i = 1 ; i < 26 ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { s += " a " ; } for ( int k = 0 ; k < n ; k ++ ) { s += " this " ; } } System . out . println ( s ) ; } }
public class GFG { static void findNature ( int a , int b , int n ) { if ( n == 0 ) return ( a & 1 ) ; if ( n == 1 ) return ( b & 1 ) ; if ( ( a & 1 ) == 0 ) { if ( ( b & 1 ) == 0 ) return false ; else return true ; } else { if ( ( b & 1 ) == 0 ) return true ; else return false ; } } public static void main ( String [ ] args ) { int a = 2 , b = 4 , n = 3 ; if ( findNature ( a , b , n ) == true ) System . out . print ( " Odd " ) ; else System . out . print ( " Even " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; if ( d == 0 ) break ; int [ ] [ ] dp = new int [ 101 ] [ 101 ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { dp [ i ] [ j ] = Math . abs ( ( i * i + j * j ) - e ) ; } } int [ ] [ ] dp2 = new int [ d + 1 ] [ d + 1 ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { dp2 [ i ] [ j ] = Math . abs ( ( i * i + j * j ) - e ) ; } } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= d ; i ++ ) { for ( int j = 1 ; j <= d ; j ++ ) { dp [ i ] [ j ] = Math . abs ( ( i * i + j * j ) - e ) ; } } int [ ] [ ] dp3 = new int [ d + 1 ] [ d + 1 ] ; for ( int i = 1 ; i <= d ; i ++ ) { for ( int j =
import java . util . * ; public class GFG { static int max_sum ( int arr [ ] , int n ) { int dp [ ] = new int [ n ] ; if ( n == 1 ) dp [ 0 ] = 0 ; else if ( n == 2 ) dp [ 0 ] = Math . max ( 0 , arr [ 0 ] ) ; else if ( n >= 3 ) dp [ 0 ] = Math . max ( 0 , arr [ 0 ] ) ; else if ( n >= 2 ) dp [ 0 ] = Math . max ( 0 , arr [ 0 ] ) ; else if ( n >= 3 ) dp [ 0 ] = Math . max ( 0 , arr [ 0 ] ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = s . indexOf ( " a " ) ; int j = s . indexOf ( " e " , j + 1 ) ; int k = s . indexOf ( " i " , j + 1 ) ; int l = s . indexOf ( " o " , j + 1 ) ; int m = s . indexOf ( " u " , j + 1 ) ; if ( m == - 1 && l == - 1 && k == - 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } sc . close ( ) ; } }
public class GFG { static int minimumX ( int n , int k ) { int mini = Integer . MAX_VALUE ; int i = 1 ; while ( i * i <= n ) { if ( n % i == 0 ) { int fir = i ; int sec = n / i ; int num1 = fir * k + sec ; int res = ( num1 / k ) * ( num1 % k ) ; if ( res == n ) { mini = Math . min ( num1 , mini ) ; } num2 = sec * k + fir ; res = ( num2 / k ) * ( num2 % k ) ; if ( res == n ) { mini = Math . min ( num2 , mini ) ; } } i ++ ; } return mini ; } public static void main ( String [ ] args ) { int n = 4 , k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 ; k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } }

import java . io . * ; public class GFG { static int sellingPrice ( int CP , int P ) { int Pdecimal = 1 + ( P / 100 ) ; int res = Pdecimal * CP ; return res ; } public static void main ( String [ ] args ) { int C = 720 , P = 13 ; System . out . println ( sellingPrice ( C , P ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; } int [ ] arr3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr3 [ i ] = arr2 [ i ] ; } int [ ] arr4 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr4 [ i ] = arr3 [ i ] ; } int [ ] arr5 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr5 [ i ] = arr4 [ i ] ; } int [ ] arr6 = new int [ n ] ; for ( int i = 0 ; i <
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a > s ) { ans = Math . max ( ans , b - a ) ; } else if ( a < s ) { ans = Math . max ( ans , c - a ) ; } else { ans = Math . max (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < k ; j ++ ) { sum += arr [ j ] * arr [ j ] ; } if ( sum >= m ) { max = sum ; } } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static void check ( int n , int m ) { if ( m % n == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static void main ( String [ ] args ) { int n = 5 , m = 10 ; check ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { count ++ ; } } if ( count != 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a < b ) { System . out . println ( b - a ) ; } else if ( a > b ) { System . out . println ( 0 ) ; } else { System . out . println ( a - b ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String [ ] s1 = s . split ( " ▁ " ) ; for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = Integer . parseInt ( s1 [ j ] ) ; } } int [ ] [ ] dp = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { dp [ i ] [ j ] = arr [ i ] [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == 0 ) { dp [ i ] [ j ] = dp [ i ] [ j + 1 ] + dp [ i ] [ j + 1 ] ;
public class GFG { static int findNthOccur ( String str , char ch , int N ) { int occur = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ch ) { occur ++ ; } if ( occur == N ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { String str = " geeks " ; char ch = ' e ' ; int N = 2 ; System . out . println ( findNthOccur ( str , ch , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ 6 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 6 ; j ++ ) { if ( a [ i ] == b [ j ] ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + 1 ; } else { dp
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long m = sc . nextLong ( ) ; long ans = 0 ; long [ ] [ ] dp = new long [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) % 6 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) % 6 ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; min = i ; } } int ans = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] > min ) { ans = Math . max ( ans , arr [ i ] + arr [ i + 1 ] ) ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int l = - 1 , r = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { l = i ; break ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { r = i ; break ; } } System . out . println ( l + " ▁ " + r + " ▁ " + ( l + 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 0 && m == 0 ) break ; int [ ] [ ] bowls = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { bowls [ i ] = sc . nextInt ( ) ; } int [ ] [ ] bowls2 = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { bowls2 [ i ] = sc . nextInt ( ) ; } int [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; int [ ] d = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( c [ j ] == cnt ) { cnt ++ ; } else { cnt = 0 ; } } if ( cnt == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = Math . abs ( a - c ) ; if ( d % 10 != 0 ) System . out . println ( d / 10 + 1 ) ; else System . out . println ( d / 10 ) ; } } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int a = Math . abs ( x1 - x2 ) ; int b = Math . abs ( y1 - y2 ) ; int c = Math . abs ( x3 - x2 ) ; int d = Math . abs ( y3 - y2 ) ; int ans = Math . min ( Math . abs ( x1 - x2 ) , Math . abs ( y1 - y2 ) ) + Math . abs ( x3 - x2 ) + Math . abs ( y3 - y2 ) ; System . out . println ( ans ) ; } } }
public class GFG { static boolean isPalindrome ( String s ) { int l = s . length ( ) ; for ( int i = l / 2 ; i < l ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( l - 1 - i ) ) return false ; } return true ; } static String createStringAndCheckPalindrome ( int N ) { char sub = ' " + ( char ) ( N ) ; String res_str = " " ; int sum = 0 ; while ( N > 0 ) { int digit = N % 10 ; sum += digit ; N = N / 10 ; } while ( res_str . length ( ) < sum ) res_str += sub ; if ( res_str . length ( ) > sum ) res_str = res_str
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ )
import java . io . * ; public class GFG { static int sum_even_and_even_index ( int arr [ ] , int n ) { int i = 0 ; int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 12 , 1 , 18 , 8 } ; int n = arr . length ; System . out . println ( " Sum ▁ of ▁ even ▁ numbers ▁ at ▁ " + " even ▁ indices ▁ is ▁ " + sum_even_and_even_index ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { flag = true ; break ; } } if ( flag ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
public class GFG { static void printDuplicates ( int arr [ ] , int n ) { int fl = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ arr [ i ] % n ] >= n ) { if ( arr [ arr [ arr [ i ] % n ] < 2 * n ) { System . out . print ( arr [ arr [ arr [ arr [ i ] % n ] ] + " ▁ " ) ; fl = 1 ; } } arr [ arr [ arr [ i ] % n ] += n ; } if ( fl == 0 ) { System . out . println ( " - 1" ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 6 , 3 , 1 , 3 , 6 , 6 } ; int n = arr . length ; printDuplicates ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + i ; } System . out . println ( sum ) ; } }
public class GFG { static int Sum ( int n ) { return n * ( n + 1 ) * ( n + 2 ) / 3 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( Sum ( n ) ) ; } }
import java . io . * ; public class GFG { static int maxHandshake ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( maxHandshake ( n ) ) ; } }
import java . io . * ; public class GFG { static int grayCode ( int n ) { return n ^ ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( grayCode ( n ) ) ; } }
public class GFG { static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }
public class GFG { static int possibleways ( int n ) { if ( n % 2 == 1 ) return 0 ; else if ( n % 4 == 0 ) return n / 4 - 1 ; else return n / 4 ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( possibleways ( n ) ) ; } }
public class GFG { static int CountSetBits ( int n ) { if ( n == 0 ) return 0 ; if ( ( n & 1 ) == 1 ) return 1 + CountSetBits ( n >> 1 ) ; else return CountSetBits ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( CountSetBits ( n ) ) ; } }
import java . util . * ; public class GFG { static int summ ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } public static void main ( String [ ] args ) { int m = 3 , n = 2 ; System . out . println ( summ ( m , n ) ) ; } }
import java . io . * ; public class GFG { static int SUM ( int n , int m ) { if ( m == 1 ) return ( n * ( n + 1 ) / 2 ) ; int sum = SUM ( n , m - 1 ) ; return sum * ( sum + 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 5 , m = 3 ; System . out . println ( " SUM ( " + n + " , ▁ " + m + " ) : ▁ " + SUM ( n , m ) ) ; } }
public class GFG { static int maxLCM ( int n ) { return ( n * ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( maxLCM ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { return ( ( n * ( n + 1 ) * ( n + 1 ) * ( n + 2 ) ) / 12 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int cntWays ( int n ) { if ( n % 2 == 1 ) return 0 ; else return ( n - 2 ) / 4 ; } public static void main ( String [ ] args ) { int n = 18 ; System . out . println ( cntWays ( n ) ) ; } }
public class GFG { static void find_composite_nos ( int n ) { System . out . println ( 9 * n + " ▁ " + 8 * n ) ; } public static void main ( String [ ] args ) { int n = 4 ; find_composite_nos ( n ) ; } }
public class GFG { static int findThirdDigit ( int n ) { if ( n < 3 ) return 0 ; return 1 ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( findThirdDigit ( n ) ) ; } }
public class GFG { static int countMaxIntersect ( int n ) { return ( n * ( n - 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } }
import java . util . * ; public class GFG { static int sum ( int n ) { if ( n == 1 ) return 2 ; else return ( n * ( n + 1 ) + sum ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sum ( n ) ) ; } }
public class GFG { static int highestPowerOf2 ( int n ) { return ( n & ( ~ ( n - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 48 ; System . out . println ( highestPowerOf2 ( n ) ) ; } }
import java . io . * ; public class GFG { static int countIntersections ( int n ) { return n * ( n - 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntersections ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' z ' || s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' z ' || s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' a ' ) { break ; } i ++ ; } System . out . println ( s . substring ( i , s . length ( ) ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = Integer . MAX_VALUE ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] / min != arr [ i ] / min ) { min = arr [ i ] / min ; index = i ; } } if ( index == n ) { System . out . println ( - 1 ) ; } else { System . out . println ( index ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String str = br . readLine ( ) ; int a = Integer . parseInt ( str ) ; System . out . println ( " ARC " ) ; } }
import java . util . Scanner ; public class Main { public static void main
public class GFG { static int smallest ( int x , int y , int z ) { int c = 0 ; while ( x != 0 && y != 0 && z != 0 ) { x = x - 1 ; y = y - 1 ; z = z - 1 ; c = c + 1 ; } return c ; } public static void main ( String [ ] args ) { int x = 12 , y = 15 , z = 5 ; System . out . println ( " Minimum ▁ of ▁ 3 ▁ numbers ▁ is ▁ " + smallest ( x , y , z ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int sum = a + b * 5 + c * 10 + d * 50 + e * 100 + f * 500 ; System . out . println ( sum >= 1000 ? 1 : 0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; double ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { ans += 2 * Math . pow ( 2 , i ) + Math . pow ( 2 , r ) ; } System . out . println ( ans / ( m * m ) ) ; } }
import java . io . * ; public class GFG { static int countCubes ( int a , int b ) { return ( int ) Math . floor ( b * ( 1. / 3. ) ) - ceil ( a * ( 1. / 3. ) ) + 1 ; } public static void main ( String [ ] args ) { int a = 7 , b = 28 ; System . out . println ( " Count ▁ of ▁ cubes ▁ is ▁ " + countCubes ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int d = sc . nextInt ( ) ; if ( d == 0 ) break ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [
import java . util . * ; public class GFG { static int compute ( ) { int triangle = 0 ; for ( int i = 0 ; i < 10000 ; i ++ ) triangle += i ; if ( triangle % 500 == 0 ) return triangle ; return triangle ; } static int num_divisors ( int n ) { int end = eulerlib . sqrt ( n ) ; int result = sum ( 2 , 2 * ( end + 1 ) ) ; if ( n % i == 0 ) { result -- ; } return result ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . io . * ; public class GFG { static int findDelta ( int a , int b , int c , int d ) { return ( b * c - a * d ) / ( d - c ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 9 , c = 3 , d = 5 ; System . out . println ( " \u0394 X ▁ = ▁ " + findDelta ( a , b , c , d ) ) ; } }
public class GFG { static void SieveOfEratosthenes ( int n , boolean isPrime [ ] ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) { isPrime [ i ] = true ; } int p = 2 ; while ( p * p <= n ) { if ( isPrime [ p ] == true ) { p = p * p ; while ( i <= n ) { isPrime [ i ] = false ; i += p ; } } p ++ ; } } static int findPrimePair ( int n ) { boolean isPrime [ ] = new boolean [ n + 1 ] ; SieveOfEratosthenes ( n , isPrime ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPrime [ i ] && isPrime [ n - i ] ) { System . out . print ( i + " ▁ " ) ; return ; } } return ; } public static void main ( String [ ] args ) { int n =
public class GFG { static int replaceDigit ( int x , int d1 , int d2 ) { int result = 0 ; int multiply = 1 ; while ( x % 10 > 0 ) { int remainder = x % 10 ; if ( remainder == d1 ) result = ( result + d2 * multiply ) ; else result = ( result + remainder * multiply ) ; multiply *= 10 ; x = x / 10 ; } return result ; } public static void main ( String [ ] args ) { int x = 645 ; int d1 = 6 ; int d2 = 5 ; System . out . println ( replaceDigit ( x , d1 , d2 ) ) ; } }
public class GFG { static void printPattern ( int i , int j , int n ) { if ( j >= n ) return 0 ; if ( i >= n ) return 1 ; if ( j == i || j == n - 1 - j ) { if ( i == n - 1 - j ) System . out . print ( " / " ) ; else System . out . print ( " \ " ) ; } else System . out . print ( " * " ) ; if ( printPattern ( i , j + 1 , n ) == 1 ) return ; System . out . print ( " \n " ) ; } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( 0 , 0 , N ) ; } }
import java . util . * ; public class GFG { static int getPairsCount ( int arr [ ] , int n , int sum ) { int m [ ] = new int [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] ++ ; int twice_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) twice_count += m [ sum - arr [ i ] ] ; int return_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) return_count += m [ sum - arr [ i ] ] ; return return_count / 2 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 7 , - 1 , 5 } ; int n = arr . length ; int sum = 6 ; System . out . println ( " Count ▁ of ▁ pairs ▁ is ▁ " + getPairsCount ( arr , n , sum ) ) ; } }
public class GFG { static int Count_subarray ( int arr [ ] , int n ) { int subarray_sum = 0 , remaining_sum = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { subarray_sum = 0 ; remaining_sum = 0 ; for ( int k = i ; k < j ; k ++ ) { subarray_sum += arr [ k ] ; } for ( int l = i ; l < j ; l ++ ) { subarray_sum += arr [ l ] ; } if ( subarray_sum > remaining_sum ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 9 , 12 , 6 } ; int n = arr . length ; System . out . println ( Count_subarray ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int p = Math . abs ( a - b ) ; int q = Math . abs ( p + x ) ; if ( q >= n - 1 ) System . out . println ( n - 1 ) ; else System . out . println ( q ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % 10 != 0 ) { System . out . println ( sum ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; while ( i < n && arr [ i ] != arr [ i + 1 ] ) { i ++ ; cnt ++ ; } max = Math . min ( max , cnt ) ; min = Math . min ( min , cnt ) ; } System . out . println ( max - min ) ; } } }
import java . util . * ; public class GFG { static int findRepeatingNumber ( int arr [ ] , int n ) { int sq = ( int ) Math . sqrt ( n ) ; int range__ = ( int ) ( ( n / sq ) + 1 ) ; int count [ ] = new int [ range__ ] ; for ( int i = 0 ; i < range__ ; i ++ ) count [ ( int ) ( n / sq ) + 1 ] ++ ; int selected_block = range__ - 1 ; for ( int
import java . io . * ; public class GFG { static int maxPrimeFactors ( int n ) { int maxPrime = - 1 ; while ( n % 2 == 0 ) { maxPrime = 2 ; n >>= 1 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { maxPrime = i ; n = n / i ; } } if ( n > 2 ) { maxPrime = n ; } return maxPrime ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( maxPrimeFactors ( n ) ) ; n = 25698751364526 ; System . out . println ( maxPrimeFactors ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) sum += arr [ j ] % 2 ; min = Math . min ( min , sum ) ; } System . out . println ( min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { min = Math . min ( min , Math . abs ( s . charAt ( i ) - '0' ) ) ; } } System . out . println ( min ) ; } }
import java . io . * ; public class GFG { static void pythagoreanTriplet ( int n ) { for ( int i = 1 ; i <= n / 3 ; i ++ ) { for ( int j = i + 1 ; j <= n / 2 ; j ++ ) { int k = n - i - j ; if ( i * i + j * j == k * k ) { System . out . print ( i + " ▁ " + j + " ▁ " + j + " ▁ " + k + " ▁ " + k ) ; return ; } } } System . out . println ( " No ▁ Triplet " ) ; } public static void main ( String [ ] args ) { int n = 12 ; pythagoreanTriplet ( n ) ; } }
import java . util . * ; public class GFG { static int countDigits ( int a , int b ) { if ( a == 0 || b == 0 ) return 1 ; return ( int ) Math . floor ( Math . log10 ( Math . abs ( a ) + Math . log10 ( Math . abs ( b ) ) ) + 1 ) ; } public static void main ( String [ ] args ) { int a = 33 , b = - 24 ; System . out . println ( countDigits ( a , b ) ) ; } }
public class GFG { static int indexOfFirstOne ( int arr [ ] , int low , int high ) { while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == 1 && ( mid == 0 || arr [ mid - 1 ] == 0 ) ) break ; else if ( arr [ mid ] == 1 ) high = mid - 1 ; else low = mid + 1 ; } return mid ; } static int posOfFirstOne ( int arr [ ] ) { int l = 0 , h = 1 ; while ( arr [ h ] == 0 ) { l = h ; h = 2 * h ; } return indexOfFirstOne ( arr , l , h ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 0 , 1 , 1 , 1 , 1 } ; System . out . println ( " Index ▁ = ▁ " + posOfFirstOne ( arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n % 3 == 0 ) { System . out . println ( n / 3 * 2 ) ; } else if ( n % 3 == 1 ) { System . out . println ( 1 ) ; } else { System . out . println ( n / 3 * 2 + 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = sc . nextInt ( ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) c [ i ] = a [ i ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) d [ i ] = b [ i ] ; int [ ] f = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) f [ i ] = c [ i ] ; int [ ] f2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) f2 [ i ] = d [ i ] ; int [ ] f3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) f3 [ i ] = f [ i ] ; int [ ] f4 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) f4 [ i ] = f [ i ] ; int [ ] f5 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) f5 [ i ] = f [ i ] ; int [ ] f6 = new int [ n ] ;
public class GFG { static int digSum ( int n ) { int sum = 0 ; int rem = 0 ; while ( n > 0 ) { rem = n % 10 ; sum = sum + rem ; n = n / 10 ; } return sum ; } static int findX ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) { if ( i + digSum ( i ) == n ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int n = 43 ; System . out . println ( " x ▁ = ▁ " + findX ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( p [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a - b ) ; } } }
import java . util . * ; public class GFG { static void performQueries ( int A [ ] , int q ) { int n = A . length ; int pref_xor [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; for ( int i = 0 ; i < q ; i ++ ) { int L = i [ 0 ] , R = i [ 1 ] ; if ( L > R ) L = R ; if ( L != R && pref_xor [ R ] == pref_xor [ L - 1 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int Arr [ ] = { 1 , 1 , 2 , 2 , 1 }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; count = 1 ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int z1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int z2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int z3 = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . nextInt ( ) ; int z4 = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int z2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int z3 = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int x = sc . nextInt (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] f = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ i ] = sc . nextInt ( ) ; } int [ ] f2 = new int [ n ] ; for ( int i =
import java . util . * ; public class GFG { static void findPerm ( int n , int [ ] [ ] diff ) { int ans [ ] = new int [ n ] ; int x = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = diff [ i ] ; x = x + diff ; ans [ i ] = x ; } int anss [ ] = new int [ n ] ; int j = 1 ; int value_at_index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { value_at_
public class GFG { static int countPrimeFactors ( int n ) { int count = 0 ; while ( n % 2 == 0 ) { n = n / 2 ; count ++ ; } int i = 3 ; while ( i <= Math . sqrt ( n ) ) { while ( n % i == 0 ) { n = n / i ; count ++ ; } i = i + 2 ; } if ( n > 2 ) { count ++ ; } return ( count ) ; } static void printKAlmostPrimes ( int k , int n ) { int i = 1 ; int num = 2 ; while ( i <= n ) { if ( countPrimeFactors ( num ) == k ) { System . out . print ( num + " ▁ " ) ; System . out .
import java . util . * ; public class GFG { static int solve ( int N , int K ) { int [ ] [ ] combo = new int [ N + 1 ] [ N + 1 ] ; combo [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) { combo [ j ] += combo [ j - i ] ; } } } return combo [ N ] ; } public static void main ( String [ ] args ) { int N = 29 , K = 5 ; System . out . println ( solve ( N , K ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int X = sc . nextInt ( ) ; if ( X == 0 ) break ; int [ ] [ ] dp = new int [ X + 1 ] [ X + 1 ] ; for ( int i = 0 ; i < X ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < X ; j ++ ) { dp [ i ] [ j ] = s . charAt ( j ) - '0' ; } } int ans = 0 ; for ( int i = 0 ; i < X ; i ++ ) { int k = 0 ; for ( int j = 0 ; j < X ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) { k ++ ; continue ; } dp [ i ] [ j ] = k % 10 ; k = k / 10 ; } d
public class GFG { static double normal ( double m , double n ) { double N = ( Math . abs ( m ) * Math . sqrt ( ( Math . abs ( m ) * Math . abs ( n ) ) + ( Math . abs ( n ) * Math . abs ( n ) ) ) ) ; return N ; } public static void main ( String [ ] args ) { double m = - 5 , n = 3 ; System . out . println ( normal ( m , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += ( ( ( i / n ) * ( ( i / n ) + 1 ) ) ) ; } System . out . println ( ans ) ; } }
public class GFG { static int countBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += 1 ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int i = 65 ; System . out . println ( countBits ( i ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] a = new int [ h ] ; int [ ] b = new int [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < w ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { if ( a [ i ] * b [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp = arr [ i ] ; arr [ i ] = arr [ max ] ; arr [ max ] = temp ; ans += temp ; } System . out . println ( ans ) ; } }
public class GFG { static int LongestSubarray ( int arr [ ] , int n , int k ) { int arr2 [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr2 [ i ] = arr [ i ] % k ; int max_length = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current_length = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr2 [ j ] == arr2 [ i ] ) current_length ++ ; else break ; } max_length = Math . max ( max_length , current_length ) ; i = j ; i += 1 ; } return max_length ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 9 , 7 , 18 , 29 , 11 } ; int n = arr . length ; int k = 11 ; System . out . println ( LongestSubarray ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 1 ) { System . out . println ( m - 1 ) ; } else { System . out . println ( m + 1 ) ; } } }
import java . util . * ; public class GFG { static boolean isHeterogram ( String s , int n ) { int [ ] hash = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' ▁ ' ) { hash [ s . charAt ( i ) - ' a ' ] = 1 ; } else return false ; } return true ; } public static void main ( String [ ] args ) { String s = " the ▁ big ▁ dwarf ▁ only ▁ jumps " ; int n = s . length ( ) ; System . out . println ( " YES " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
public class GFG { static boolean FindPoint ( int x1 , int y1 , int x2 , int y2 , int x , int y ) { if ( x > x1 && x < x2 && y > y1 && y < y2 ) return true ; else return false ; } public static void main ( String [ ] args ) { int x1 = 1 , y1 = 5 , x2 = 1 , y2 = 1 , x = 5 , y = 1 , y1 = 5 ; if ( FindPoint ( x1 , y1 , x2 , y2 , x , y ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; while ( x <= y ) { ans += 2 ; x *= 2 ; y *= 2 ; } System . out . println ( ans ) ; } }
public class GFG { static int sticks [ ] = { 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 } ; static int countSticks ( String str , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cnt += ( sticks [ str . charAt ( i ) - '0' ] ) ; } return cnt ; } public static void main ( String [ ] args ) { String str = "56" ; int n = str . length ( ) ; System . out . println ( countSticks ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) { min = Math . min ( min , arr [ i - 1 ] ) ; } else { max = Math . max ( max , arr [ i - 1 ] ) ; } } System . out . println ( max + " ▁ " + min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n + 2 ] [ m + 2 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] result = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { result [ i ] [ j ] = arr [ i ] [ j ] ^ arr [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { result [ i ] [ j ] = result [ i - 1 ] [ j ] ^ result [ i - 1 ] [ j - 1 ] ; } } for ( int
import java . util . * ; public class GFG { static int mostFrequent ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int max_count = 1 ; int res = arr [ 0 ] ; int curr_count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++ ; else if ( curr_count > max_count ) max_count = curr_count ; curr_count = 1 ; } if ( curr_count > max_count ) max_count = curr_count ; res = arr [ n - 1 ] ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 2 , 1 , 3 , 2 , 1 } ; int n = arr . length ; System . out . println ( mostFrequent ( arr , n ) ) ; } }
public class GFG { static int MAX = 26 ; static int maxLength ( String str , int len ) { int res = 0 ; int lastPos [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { lastPos [ i ] = - 1 ; } for ( int i = 0 ; i < len ; i ++ ) { int C = str . charAt ( i ) - ' a ' ; if ( lastPos [ C ] != - 1 ) { res = Math . max ( len - ( i - lastPos [ C ] - 1 ) - 1 , res ) ; } lastPos [ C ] = i ; } return res ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int len = str . length ( ) ; System . out . println ( maxLength ( str , len ) ) ; } }
public class GFG { static int MAX = 1000000 ; static int ksmallest ( int arr [ ] , int n , int k ) { int b [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) b [ arr [ i ] ] = 1 ; for ( int j = 1 ; j < MAX ; j ++ ) { if ( b [ j ] != 1 ) k -- ; if ( k != 1 ) return j ; } k = 1 ; arr = new int [ MAX ] ; n = arr . length ; System . out . println ( ksmallest ( arr , n , k ) ) ; } public static void main ( String [ ] args ) { int k = 1 ; int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n + ( d * 13 ) ) ; } return ( n % 43 == 0 ) ; } public static void main ( String [ ] args ) { int N = 2795 ; if ( isDivisible ( N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } public static void main ( String [ ] args ) { int n = 59173 ; if ( isDivisible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 3 ) ) ; } return ( n % 31 == 0 ) ; } public static void main ( String [ ] args ) { int n = 1925 ; if ( isDivisible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 7 ) ) ; } return ( n % 71 == 0 ) ; } public static void main ( String [ ] args ) { int N = 5041 ; if ( isDivisible ( N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int Odd_Sum ( int n ) { int total = ( n + 1 ) / 2 ; int odd = total * total ; return odd ; } static int Even_Sum ( int n ) { int total = n / 2 ; int even = total * ( total + 1 ) ; return even ; } static int sumLtoR ( int L , int R ) { int odd_sum = Odd_Sum ( R ) - Odd_Sum ( L - 1 ) ; int even_sum = Even_Sum ( R ) - Even_Sum ( L - 1 ) ; return even_sum - odd_sum ; } public static void main ( String [ ] args ) { int L = 1 , R = 5 ; System . out . println ( sumLtoR ( L , R ) ) ; } }
public class GFG { static boolean isRatioPossible ( int lowCost , int upCost , int lowQuant , int upQuant , int r ) { for ( int i = lowQuant ; i <= upCost ; i ++ ) { int ans = i * r ; if ( lowCost <= ans && ans <= upCost ) return true ; } return false ; } public static void main ( String [ ] args ) { int lowCost = 14 , upCost = 30 , lowQuant = 5 , upQuant = 12 , r = 9 ; if ( isRatioPossible ( lowCost , upCost , lowQuant , upQuant , r ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int Log2 ( int x ) { if ( x == 0 ) return 0 ; return ( int ) Math . log10 ( x ) / Math . log10 ( 2 ) ; } static boolean isPowerOfTwo ( int n ) { return ( Math . ceil ( Log2 ( n ) ) == Math . floor ( Log2 ( n ) ) ) ; } public static void main ( String [ ] args ) { int n = 31 ; if ( isPowerOfTwo ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; if ( isPowerOfTwo ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int LIMIT = 50000000 ; static int primes [ ] = new int [ LIMIT ] ; static void compute ( ) { int MAX = 50000 ; int sum = 0 ; for ( int i = 2 ; i < MAX ; i ++ ) { int newsums = new int [ MAX ] ; for ( int p = 0 ; p < primes . length ; p ++ ) { int q = p * p ; if ( q > LIMIT ) break ; for ( int x = 0 ; x <= LIMIT ; x ++ ) { if ( x + q <= LIMIT ) newsums [ x + q ] ++ ; } } sum = sum + newsums ; } return Integer . toString ( sum ) ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static long lenSub ( int arr [ ] , int n ) { long um = defaultdict ( ) ; long len = 0 ; for ( int i = 0 ; i < n ; i ++ ) len += arr [ i ] ; if ( arr [ i ] > um && len < um [ arr [ i ] - 1 ] ) len = um [ arr [ i ] - 1 ] ; um [ arr [ i ] ] = len ; if ( arr [ i ] + 1 > um [ arr [ i ] ] ) len = um [ arr [ i ] + 1 ] ; um [ arr [ i ] ] = len ; if ( longLen < um [ arr [ i ] ] ) longLen = um [ arr [ i ] ] ; return longLen ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 3 , 2 } ; int n = arr . length ; System . out . println ( " Longest ▁ length ▁ subsequence ▁ = ▁ " + len
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + b ) ; } } }
public class GFG { static int calculateSum ( int n ) { int sum = 0 ; sum = 1 << n ; return ( sum - 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum ▁ of ▁ all ▁ elements : ▁ " + calculateSum ( n ) ) ; } }
public class GFG { static int calculateSum ( int n ) { int sum = 0 ; for ( int row = 0 ; row < n ; row ++ ) sum += ( 1 << row ) ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum ▁ of ▁ all ▁ elements : ▁ " + calculateSum ( n ) ) ; } }
public class GFG { static int maxDiff ( int arr [ ] , int n ) { int diff = arr [ 1 ] - arr [ 0 ] ; int curr_sum = diff ; int max_sum = curr_sum ; for ( int i = 1 ; i < n - 1 ; i ++ ) { diff = arr [ i + 1 ] - arr [ i ] ; if ( curr_sum > 0 ) curr_sum += diff ; else curr_sum = diff ; if ( curr_sum > max_sum ) max_sum = curr_sum ; } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 80 , 2 , 6 , 3 , 100 } ; int n = arr . length ; System . out . println ( " Maximum ▁ difference ▁ is ▁ " + maxDiff ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { String s = sc . next ( ) ; if ( s . equals ( " # " ) ) break ; int n = s . length ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( ( i + j ) % 100000007 ) % 100000007 ; } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j
import java . io . * ; public class GFG { static int countPairs ( int n ) { int num = ( ( n / 2 ) + 1 ) ; int Max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( ( n % i ) % j ) % n ; if ( val == Max ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] =
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 0 && m == 0 ) break ; int [ ] [ ] cup = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { cup [ i ] [ 0 ] = sc . nextInt ( ) ; cup [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] d
import java . util . * ; public class Main { public static void main ( String [ ] args
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] )
import java . util . * ; public class GFG { static int maxSubseq ( Vector < Integer > vec , int n ) { int suffix = 0 ; int i = n - 1 ; while ( i >= 0 ) { if ( vec . get ( i ) == 1 ) suffix ++ ; vec . set ( i , suffix ) ; i -- ; } int res = 0 ; int zero = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( vec . get ( i ) == 0 ) zero ++ ; if ( vec . get ( i ) > 0 ) res = Math . max ( res , zero + vec . get ( i ) ) ; } return Math . max ( res , zero ) ; } public static void main ( String [ ] args ) { Vector < Integer > vec = new Vector < Integer > ( ) ; System . out . println ( maxSubseq ( vec , n ) ) ; } }
public class GFG { static int R = 4 ; static int C = 4 ;
public class GFG { static boolean isPrime ( int N ) { boolean isPrime = true ; int arr [ ] = new int [ 7 ] ; arr [ 0 ] = 1 ; arr [ 1 ] = 2 ; arr [ 2 ] = 3 ; arr [ 3 ] = 4 ; arr [ 4 ] = 5 ; arr [ 5 ] = 6 ; arr [ 6 ] = 7 ; arr [ 7 ] = 8 ; arr [ 8 ] = 9 ; isPrime = false ; for ( int i = 0 ; i < Math . sqrt ( N ) ; i ++ ) { for ( int c = 0 ; c < Math . sqrt ( N ) ; c ++ ) { if ( c > 0 ) { break ; } else { if ( N % ( c + i ) == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { System
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int a = Math . max ( x1 - x2 , y1 - y2 ) ; int b = Math . max ( x1 - x2 , y1 - y2 ) ; System . out . println ( x1 + " ▁ " + y1 + " ▁ " + x2 + " ▁ " + y2 + " ▁ " + a ) ; } }
public class GFG { static int max ( int x , int y ) { if ( x > y ) return x ; return y ; } static int lps ( int seq [ ] , int i , int j ) { if ( i == j ) return 1 ; if ( seq [ i ] == seq [ j ] && i + 1 == j ) return 2 ; if ( seq [ i ] == seq [ j ] ) return lps ( seq , i + 1 , j - 1 ) + 2 ; return Math . max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } public static void main ( String [ ] args ) { int seq [ ] = { " GEEKSFORGEEKS " , 0 , 0 } ; int n = seq . length ; System . out . println ( " The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ " + lps ( seq , 0 , n - 1 ) ) ; } }
import java . util . * ; public class GFG { static int findLength ( String str , int n ) { int total [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) total [ i ] = ( total [ i - 1 ] + int ( str . charAt ( i - 1 ) ) - str . charAt ( i ) ) ; int ans = 0 ; int l = 2 ; while ( l <= n ) { for ( int i = 0 ; i < n - l + 1 ; i ++ ) { int j = i + l - 1 ; if ( total [ i + int ( l / 2 ) ] - total [ i ] == total [ i + l ] - total [ i + l / 2 ] ) ans = Math . max ( ans , l ) ; } l = l + 2 ; } return ans ; } public static void main ( String [ ] args ) { String str = "123123" ; System . out . println ( " Length ▁ of ▁ the ▁ substring ▁ is ▁ " + findLength ( str , str . length ( ) ) ) ; } }
import java . io . * ; public class GFG { static void print ( String a [ ] , int n , int ind ) { int i = ind ; while ( i < n + ind ) { System . out . print ( a [ ( i % n ) ] + " ▁ " ) ; i ++ ; } } public static void main ( String [ ] args ) { String a [ ] = { " A " , " B " , " C " , " D " , " E " , " F " } ; int n = a . length ; print ( a , n , 3 ) ; } }
import java . util . * ; public class GFG { static void print ( int a [ ] , int n , int ind ) { int b [ ] = new int [ n ] ; int i = 0 ; while ( i < n ) { b [ i ] = b [ n + i ] = a [ i ] ; i = i + 1 ; } i = ind ; while ( i < n + ind ) { System . out . print ( b [ i ] + " ▁ " ) ; i ++ ; } } public static void main ( String [ ] args ) { int a [ ] = { ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' } ; int n = a . length ; print ( a , n , 3 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int min = Math . min ( n , a ) ; int max = Math . max ( n , b ) ; int min2 = Math . min ( n , a ) ; int max2 = Math . max ( n , b ) ; int min3 = Math . min ( n , a ) ; int max3 = Math . max ( n , b ) ; int min4 = Math . min ( n , a ) ; int max4 = Math . max ( n , b ) ; int max = Math . max ( n , a ) ; int min5 = Math . min ( n , b ) ; int max5 = Math . max ( n , a ) ; int min6 = Math . min ( n , b ) ; int max6 = Math . max ( n , a ) ; int min7 = Math . min ( n , b ) ; int max7 = Math . max ( n , a ) ; int min8 = Math . min ( n , b ) ; int max8 = Math . max ( n , a ) ; int min9 = Math . min ( n , b ) ; int max9 = Math . max ( n , a ) ; int min10 = Math . min ( n , b ) ; int max10 = Math . max ( n , a ) ; int min11 = Math . min ( n , b ) ; int max11 = Math . max ( n , a ) ; int min12 =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] cnt = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { cnt [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { int cnt2 = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cnt [ j ] == 0 ) { cnt2 ++ ; } } if ( cnt2 != 0 ) { ans [ i ] = cnt2 ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < t ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == arr [ i ] ) { min = Math . min ( min , arr [ j ] ) ; max = Math .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] - b [ i ] >= 2 * c [ i ] ) { ans += 2 * c [ i ] ; } else { ans += 2 * b [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i == j ) { System . out . print ( 1 + " ▁ " ) ; } else { System . out . print ( 0 + " ▁ " ) ; } } System . out . println ( ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i % 2 == 1 ) { ans = i ; break ; } } System . out . println ( ans ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 0 ; i < 1000 ; i ++ ) { sum += ( ( ( ( 3 * i ) % 3 ) == 0 ) ? ( ( 3 * i ) / 3 ) : 0 ) ; } return Integer . toString ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a * 2 - b ) ) ; } }
public class GFG { static int Circular ( int n ) { int Result = 1 ; while ( n > 0 ) { Result = Result * n ; n -- ; } return Result ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( Circular ( n - 1 ) ) ; } }
import java . util . * ; public class GFG { static int productDiagonals ( int arr [ ] [ ] , int n ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product = product * arr [ i ] [ i ] ; product = product * arr [ i ] [ n - i - 1 ] ; return product ; } public static void main ( String [ ] args ) { int arr1 [ ] = { { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } , { 9 , 7 , 4 , 2 } , { 2 , 2 , 2 , 1 , 2 } , { 2 , 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { c [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp2 = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp2 [ i ] [ j ] = dp [ i ] [ j ] + c [ i ] [ j ] ; } } int [ ] [ ] c2 = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { c2 [ i ] [ j ] = c [ i ] [ j ] + dp2 [ i ] [ j ] ; } } int [ ] [ ] dp3 = new int [ n ] [ n ] ; for
public class GFG { static int getSecondMostFreq ( String str ) { int NO_OF_CHARS = 256 ; int count [ ] = new int [ NO_OF_CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) count [ str . charAt ( i ) ] ++ ; int first = 0 , second = 0 ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] > count [ first ] ) { second = first ; first = i ; } else if ( count [ i ] > count [ second ] && count [ i ] != count [ first ] ) { second = i ; } } return ( char ) ( second ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int res = getSecondMostFreq ( str ) ; if ( res != ' \ 0' ) System . out
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void mySort ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; arr [ n / 2 ] = arr [ n / 2 ] ; arr [ n / 2 ] = arr [ n / 2 + 1 ] ; arr [ n / 2 ] = arr [ n / 2 + 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , 7 } ; int n = arr . length ; Arrays . sort ( arr ) ; System . out . println ( " Modified ▁ Array ▁ : ▁ " ) ; System . out . println ( arr ) ; } }
public class GFG { static int minflip ( int arr1 [ ] , int arr2 [ ] , int arr3 [ ] , int p , int q , int n ) { int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] ^ arr2 [ i ] != arr3 [ i ] ) flip ++ ; } return flip ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int arr2 [ ] = { 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int arr3 [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 } ; int n = arr1 . length ; int p = 2 ; int q = 4 ; System . out . println ( minflip ( arr1 , arr2 , arr3 , p , q , n ) ) ; } }
public class GFG { static int sum ( int n ) { int i = 1 ; int s = 0 ; for ( i = 1 ; i <= n ; i ++ ) s += 1 / i ; return s ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " Sum ▁ is ▁ " + sum ( n ) + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " + " \n " +
import java . util . * ; public class GFG { static void bitonicGenerator ( int arr [ ] , int n ) { int evenArr [ ] = new int [ n ] ; int oddArr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i % 2 ) == 0 ) evenArr [ i ] = arr [ i ] ; else oddArr [ i ] = arr [ i ] ; } int evenArr [ ] = new int [ n ] ; int oddArr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i % 2 ) == 0 ) evenArr [ i ] = arr [ i ] ; else oddArr [ i ] = arr [ i ] ; } int evenArr [ ] = new int [ n ] ; int
public class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; int right = 0 ; int left = 0 ; int visited [ ] = new boolean [ n ] ; while ( right < n ) { while ( right < n && visited [ arr [ right ] ] == false ) { count ++ ; visited [ arr [ right ] ] = true ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ left ] ] == true ) ) { visited [ arr [ left ] ] = false ; left ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 , 4 , 3 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int n = sObj . n ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sObj . n . arr [ i ] ; } int [ ] left = new int [ n ] ; int [ ] right = new int [ n ] ; for ( int i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 1 ; j <= N ; j ++ ) { if ( i == j ) continue ; if ( j == i ) continue ; if ( i == j - 1 ) continue ; if ( j == i + 1 ) continue ; if ( j == N - 1 ) continue ; dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ; } } long ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += dp
import java . util . * ; public class GFG {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int m = arr [ 0 ] ; int k = arr [ n - 1 ] ; if ( m == k ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { if ( N % 2 == 0 ) return 0 ; int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) res ^= arr [ i ] ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int s = ( p + q ) / ( p + q ) ; System . out . println ( ( ( ( ( ( n * ( n + 1 ) / 2 ) * ( n + 1 ) / 2 ) ) * ( n + 1 ) / 2 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] - arr [ n - 1 ] ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int [ ] freq = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ arr [ i ] ] > 0 ) { ans += freq [ arr [ i ] ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == s . charAt ( 0 ) ) { count ++ ; } } System . out .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { min = Math . min ( min , arr [ i ] ) ; } } System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int [ ] [ ] a = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { b [ i ] [ j ] = Math . max ( b [ i ] [ j ] , b [ i - 1 ] [ j ] ) ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int i = 0 ; while ( i < n ) { ans [ i ] = arr [ i ] ; i ++ ; } while ( i < n ) { System . out . println ( ans [ i ] ) ; } } }
import java . util . * ; public class GFG { static int powerOfTwo ( int n ) { return ( n & n - 1 ) ; } static boolean onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) return true ; return powerOfTwo ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 9 ; if ( onlyFirstAndLastAreSet ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int minimumCostOfBreaking ( int X [ ] , int Y [ ] , int m , int n ) { int res = 0 ; Arrays . sort ( X ) ; Arrays . sort ( Y ) ; int hzntl = 1 ; int vert = 1 ; for ( int i = 0 ; i < m && j < n ; i ++ ) { if ( X [ i ] > Y [ j ] ) { res += X [ i ] * vert ; hzntl ++ ; i += 1 ; } else { res += Y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += X [ i ] ; i ++ ; } res += total * vert ; total = 0 ; while ( j < n ) {
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int countPairs ( int G , int L ) { int count = 0 ; int p = G * L ; for ( int a = 1 ; a <= L ; a ++ ) { if ( ! ( p % a ) && ( Math . gcd ( a , p / a ) == G ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int G = 2 , L = 12 ; System . out . println ( " Total ▁ possible ▁ pair ▁ with ▁ GCD ▁ " + G + " ▁ G = ▁ " + countPairs ( G , L ) ) ; System . out . println ( " ▁ = ▁ " + countPairs ( G , L ) ) ; } }
public class GFG { static int multiply ( int a [ ] , int b [ ] ) { int mul [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) mul [ i ] [ j ] = 0
public class GFG { static int MinimumValue ( int x , int y ) { if ( x > y ) { x = y ; y = x ; } int a = 1 , b = x - 1 ; int c = y - b ; System . out . println ( a + " ▁ " + b + " ▁ " + c ) ; } public static void main ( String [ ] args ) { int x = 123 , y = 13 ; MinimumValue ( x , y ) ; } }
import java . util . * ; public class Solution { public boolean checkPossibility ( int [ ] nums ) { int broken_num = 0 ; for ( int i = 0 ; i < nums . length - 1 ; i ++ ) { if ( nums [ i ] > nums [ i + 1 ] ) broken_num ++ ; if ( i - 1 < 0 || nums [ i - 1 ] <= nums [ i + 1 ] ) return false ; if ( i - 1 < 0 || nums [ i - 1 ] <= nums [ i + 1 ] ) return false ; } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 4 , 2 , 3 } ; int out = sObj . checkPossibility ( nums ) ; System . out . println ( out ) ; } }
public class GFG { static boolean check ( int mid , int [ ] array , int n , int K ) { int count = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] > mid ) return false ; sum += array [ i ] ; if ( sum > mid ) count ++ ; sum = array [ i ] ; } count ++ ; if ( count <= K ) return true ; return false ; } static int solve ( int [ ] array , int n , int K ) { int start = 1 , end = 0 ; for ( int i = 0 ; i < n ; i ++ ) { end += array [ i ] ; } int answer = 0 ; while ( start <=
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( ( m | n ) == 0 ) break ; int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) dp [ i ] [ j ] = sc . nextInt ( ) ; int [ ] [ ] [ ] dp2 = new int [ m + 1 ] [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) dp2 [ i ] [ j ] = dp [ i - 1 ] [ j ] ; for ( int i = 1 ; i <= m ; i ++ ) { int [ ] [ ] dp2i = new int [ m + 1 ] [ n + 1 ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( Math . max ( a , Math . max ( b , c ) ) * 2 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { max = Math . max ( max , arr [ i ] ) ; min = Math . min ( min , arr [ i ] ) ; } } int maxi = 0 ; int mini = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { maxi = Math . max
import java . io . * ; public class GFG { static String even_or_odd ( int N ) { int l = N ; if ( N . charAt ( l - 1 ) == '0' || N . charAt ( l - 1 ) == '2' || N . charAt ( l - 1 ) == '4' || N . charAt ( l - 1 ) == '6' ) return " Even " ; else return " Odd " ; } public static void main ( String [ ] args ) { int N = "735" ; System . out . println ( even_or_odd ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] f = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f [ i ] = sc . nextInt ( ) ; } int [ ] f2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { f2 [ i ] = sc . nextInt ( ) ; } int [ ] f3 = new int [ n ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int solve ( int X , int Y , int N , int K ) { int count [ ] = new int [ N + 1 ] ; int sol = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) count [ i ] = ( count [ i - 1 ] + Math . abs ( X [ i - 1 ] - Y [ i - 1 ] ) ) ; int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) j ++ ; sol = Math . max ( sol , i - j ) ; } return sol ; } public static void main ( String [ ] args ) { int N = 4 , X = " abcd " ; int Y = " bcde " ; int K = 3 ; System . out . println ( solve ( X , Y , N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; while ( m -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
public class GFG { static boolean isPrime ( int n , int i ) { if ( n <= 2 ) return true ; if ( n == 2 ) return false ; if ( i * i > n ) return true ; return isPrime ( n , i + 1 ) ; } public static void main ( String [ ] args ) { int n = 15 ; if ( isPrime ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isPrime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static int minimumSum ( int n ) { if ( isPrime ( n ) ) return 1 ; if ( n % 2 == 0 ) return 2 ; if ( isPrime ( n - 2 ) ) return 2 ; return 3 ; } public static void main ( String [ ] args ) { int n = 27 ; System . out . println ( minimumSum ( n ) ) ; } }
public class GFG { static boolean isPrime ( int x ) { for ( int i = 2 ; i <= Math . sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) return false ; } return true ; } static int minimumCost ( int n ) { if ( isPrime ( n ) ) return 1 ; if ( n % 2 == 1 && isPrime ( n - 2 ) ) return 2 ; if ( n % 2 == 0 ) return 2 ; return 3 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( minimumCost ( n ) ) ; } }
import java . util . * ; public class GFG { static int snoob ( int x ) { int next = 0 ; if ( x > 0 ) { int rightOne = x & - ( x ) ; nextHigherOneBit = x + ( int ) ( rightOne ) ; nextHigherOne = ( int ) ( nextHigherOneBit | rightOnesPattern ) ; nextHigherOne = ( int ) ( nextHigherOne | rightOnesPattern ) ; nextHigherOne = ( int ) ( nextHigherOne | rightOnesPattern ) >> 2 ; next = nextHigherOneBit | rightOnesPattern ; } return next ; } public static void main ( String [ ] args ) { int x = 156 ; System . out . println ( " Next ▁ higher ▁ number ▁ with ▁ " + " same ▁ number ▁ of ▁ set ▁ bits ▁ is ▁ " + snoob ( x ) ) ; } }
public class GFG { static int properDivisorSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { if ( j * j > i ) break ; if ( i % j == 0 ) { if ( i / j == j ) sum += j ; else sum += j + i / j ; } } sum = sum - i ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( properDivisorSum ( n ) ) ; n = 5 ; System . out . println ( properDivisorSum ( n ) ) ; } }
public class GFG { static int getMinLength ( int arr [ ] , int n ) { int count = 0 ; int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count ++ ; else if ( count != 0 ) result = Math . min ( result , count ) ; count = 0 ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;
import java . util . * ; public class GFG { static int compute ( ) { int LIMIT = 12000 ; int minsumroduct [ ] = new int [ LIMIT + 1 ] ; int factorize ( int n , int remain , int maxfactor , int sum , int terms ) { if ( remain == 1 ) { if ( sum > n ) { raise AssertionError ( ) ; } terms += n - sum ; if ( terms <= LIMIT && ( minsumroduct [ terms ] == null || n < minsumroduct [ terms ] ) ) { minsumroduct [ terms ] = n ; } } else { for ( int i = 2 ; i <= maxfactor ; i ++ ) { if remain % i == 0 ) { factorize ( n , remain / factor , min ( factor , maxfactor ) , sum +
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] a = new long [ n ] ; for
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new
import java . util . * ; public class GFG { static int MAX = 1000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; for ( int i = 2 ; i * i <= MAX ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * 2 ; j <= MAX ; j += i ) prime [ j ] = false
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] ans = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { ans [ i ] [ j ] = dp [ i ] [ j ] ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] c = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { c [ i ] [ j ] =
import java . util . * ; public class GFG { static String distinctSubstring ( String S , int N ) { HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { char [ ] S = S . toCharArray ( ) ; for ( int j = 0 ; j < N ; j ++ ) { int pos = S [ j ] - ' a ' ; if ( freq . containsKey ( pos ) ) { break ; } freq . put ( pos , 1 ) ; S [ S [ S [ S [ S [ S [ S [ S [ S [ S [ S [ S [ S [ S [ S [ S [ S ] ] ] ] ] ] ] = 1 ) ; } } return S ; } public static void main ( String [ ] args ) { String S = " abba " ; int N = S . length ( ) ; System . out . println ( distinctSubstring ( S , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( n - k ) % ( k - 1 ) == 0 ) { ans ++ ; } else { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int INT_MAX = Integer . MAX_VALUE ; static int INT_MIN = Integer . MIN_VALUE ; static int minimumAdjacentDifference ( int a [ ] , int n , int k ) { int min = INT_MAX ; for ( int i = 1 << n ; i < k ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { cnt ++ ; } int maxDiff = INT_MIN ; for ( int j = 0 ; j < cnt ; j ++ ) { maxDiff = Math . max ( maxDiff , a [ j + 1 ] - a [ j ] ) ; } min = Math . min ( min , maxDiff )
public class GFG { static void difference ( int arr [ ] , int n ) { int largest = arr [ 0 ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( largest < arr [ i ] ) largest = arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) arr [ i ] = largest - arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 5 , 9 , 3 , 2 } ; int n = arr . length ; difference ( arr , n ) ; } }
import java . util . * ; public class GFG { static int countKdivPairs ( int A [ ] , int n , int K ) { int freq [ ] = new int [ K ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ A [ i ] % K ] ++ ; int sum = freq [ 0 ] * freq [ 0 ] ; for ( int i = 1 ; i <= K / 2 ; i ++ ) { sum += freq [ i ] * freq [ K - i ] ; i ++ ; } int sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2 ; int i = 1 ; while ( i <= K / 2 && i != ( K - i ) ) { sum += freq [ i ] * freq [ K - i ] ; i ++ ; } if ( K % 2 == 0 ) sum += ( freq [ K / 2 ] * ( freq [ K / 2 ] - 1 ) / 2 ) ; return sum ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { String s = sc . next ( ) ; if ( s . length ( ) == 1 ) break ; String [ ] ss = s . split ( " " ) ; int [ ] arr = new int [ ss . length ] ; for ( int i = 0 ; i < arr . length ; i ++ ) arr [ i ] = Integer . parseInt ( ss [ i ] ) ; int [ ] ans = new int [ arr . length ] ; int i = 0 ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( arr [ j ] == 3 || arr [ j ] == 7 ) ans [ i ++ ] = arr [ j ] ; } for ( i = 0 ; i < arr . length ; i ++ ) { if ( ans [ i ] == 0 ) ans [ i ] = arr [ i ] ; } System . out . println ( ans [ arr . length - 1 ] ) ; } } }
public class GFG { static int maxOnesIndex ( int arr [ ] , int n ) { int max_count = 0 ; int max_index = 0 ; int prev_zero = - 1 ; int prev_prev_zero = - 1 ; for ( int curr = 0 ; curr < n ; curr ++ ) { if ( arr [ curr ] == 0 ) { if ( curr - prev_prev_zero > max_count ) { max_count = curr - prev_prev_zero ; max_index = prev_zero ; } prev_prev_zero = prev_zero ; prev_zero = curr ; } } if ( n - prev_prev_zero > max_count ) { max_index = prev_zero ; } return max_index ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1
import java . util . * ; public class GFG { static int minimumX ( int n , int k ) { int ans = 10 * 18 ; for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( n % i == 0 ) ans = Math . min ( ans , i + ( n / i ) * k ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 4 , k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = k ; k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } }
public class GFG { static int moduloMultiplication ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; b >>= 1 ; } return res ; } public static void main ( String [ ] args ) { int a = 10123465234878999 ; int b = 65746311545646431 ; int m = 10005412336548794 ; System . out . println ( moduloMultiplication ( a , b , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] map = new int [ n ] [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < 26 ; j ++ ) { map [ i ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; min = i ; } } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] < min ) { ans += a [ i ] ; } } System . out . println ( ans ) ; } }
public class GFG { static void checkPalindrome ( String str ) { int length = str . length ( ) ; int length -- ; for ( int i = 0 ; i < length ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( length - 1 - i ) ) return ; length --
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ; } } int [ ] [ ] dp2 = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++
import java . util . * ; public class GFG { static void findSubsequence ( int arr [ ] , int n , int k ) { int M [ ] = new int [ k + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) M [ arr [ i ] ] ++ ; int numCount [ ] = new int
import java . util . * ; public class GFG { static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 , odd2 = 0 , even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) odd1 ++ ; else even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 1 ) odd2 ++ ; else even2 ++ ; } int pairs = Math . min ( odd1 , odd2 ) + Math . min ( even1 , even2 ) ; return pairs ; } public static void main ( String [ ] args ) { int a [ ] = { 9 , 14 , 6 , 2 , 11 } ; int b [ ] = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( count_p
import java . util . * ; public class GFG { static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 , odd2 = 0 , even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) odd1 ++ ; else even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 0 ) odd2 ++ ; else even2 ++ ; } int pairs = ( Math . min ( odd1 , even2 ) + Math . min ( odd2 , even1 ) ) ; return pairs ; } public static void main ( String [ ] args ) { int a [ ] = { 9 , 14 , 6 , 2 , 11 } ; int b [ ] = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( count_p
import java . io . * ; public class GFG { static int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int min_element = arr [ 0 ] ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] - min_element > max_diff ) max_diff = arr [ i ] - min_element ; if ( arr [ i ] < min_element ) min_element = arr [ i ] ; } return max_diff ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 80 , 100 } ; int size = arr . length ; System . out . println ( " Maximum ▁ difference ▁ is ▁ " + maxDiff ( arr , size ) ) ; } }
import java . util . * ; public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int findMax ( int n ) { return binomialCoeff ( n , n / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findMax ( n ) ) ; } }
public class GFG { static int MAX = 26 ; static int minimumAddition ( String str1 , int len ) { int [ ] freq = new int [ MAX ] ; for ( int i = 0 ; i < len ; i ++ ) freq [ str1 . charAt ( i ) - ' a ' ] ++ ; int maxFreq = Math . max ( freq [ len ] , Math . max ( freq [ str1 . charAt ( i ) - ' a ' ] , 0 ) ) ; int minAddition = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 0 ) minAddition += Math . abs ( maxFreq - freq [ i ] ) ; } return minAddition ; } public static void main ( String [ ] args ) { String str1 = " geeksforgeeks " ; int len = str1 . length ( ) ; System . out . println ( minimumAddition ( str1 , len ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . abs ( a [ i ] - b [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int MAX = 32
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int LIMIT = 100_000 ; private final int MAX = Integer . MAX_VALUE ; private final int [ ] A = new int [ LIMIT ] ; private final int [ ] B = new int [ LIMIT ] ; private int [ ] prime = new int [ LIMIT ] ; private boolean [ ] isPrime = new boolean [ LIMIT ] ; private void prime [ ] = new boolean [ LIMIT ] ; private int count = 0 ; private boolean isPrime [ ] = new boolean [ LIMIT ] ; private void prime [ ] [ ] = new boolean [ LIMIT ] [ MAX ] ; private int count = 0 ; private void initialize ( ) { prime [ count ] [ A [ count ] ] = true ; isPrime [ count ] [ A [ count ] ] = true ; isPrime [ count
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int min = Math . min ( r , n - 1 ) ; int ans = ( int ) ( ( ( ( r * ( r + 1 ) ) / 2 ) + 1 ) * ( ( ( r + 1 ) * ( r + 1 ) ) / 2 ) ) ; if ( min > ans ) { ans ++ ; } System . out . println ( ans ) ; } } }

import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] [ ] p = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { p [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = ( p [ i ] [ j ] + dp [ i ] [ j ] ) % r ; } } System . out . println ( dp [ 0 ] [ 0 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String str = sc . next ( ) ; System . out . println ( str . replaceAll ( " Hoshino " , " Hoshina " ) ) ; } } }
public class GFG { static int countRotations ( int arr [ ] , int low , int high ) { if ( high < low ) return 0 ; if ( high == low ) return low ; int mid = low + ( high - low ) / 2 ; int mid = mid + ( high - low ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return mid + 1 ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ; if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr , low , mid - 1 ) ; return countRotations ( arr , mid + 1 , high ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 18 , 2 , 3 , 6 , 12 } ; int n = arr . length ; System . out . println ( countRotations ( arr , 0 , n - 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int i = 0 ; while ( i + 1 < m ) { if ( i + 1 < n ) { System . out . println ( m - i + 1 ) ; break ; } i ++ ; } } }
import java . util . * ; public class GFG { static boolean modularSum ( int arr [ ] , int n , int m ) { if ( n > m ) return true ; boolean DP [ ] = new boolean [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { if ( DP [ 0 ] ) return true ; DP [ ( int ) ( arr [ i ] ) % m ] = true ; } for ( int j = 0 ; j < m ; j ++ ) { if ( DP [ ( j + arr [ i ] ) % m ] == false ) { DP [ ( j + arr [ i ] ) % m ] = true ; } } for ( int j = 0 ; j < m ; j ++ ) { if ( DP [ ( j + arr [ i ] ) % m ] == false ) { DP [ ( j + arr [ i ] ) % m ] = true ; } } return DP [ 0 ] ; } public static void main ( String
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int q = sc . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int b = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int count = 0 ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( arr [ j ] == b ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , a [ i ] ) ; } } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j - i >= 0 ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , a [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int d = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; if ( d + w == 0 ) break ; int [ ] [ ] map = new int [ d + 1 ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k != 0 || arr [ i ] / k != 0 ) { max = Math . max ( max , arr [ i ] / k ) ; min = Math . min ( min , arr [ i ] / k ) ; } } System . out . println ( max ) ; } }
public class GFG { static int sum ( int k , int n ) { int sum = ( int ) Math . pow ( k , n + 1 ) - Math . pow ( k - 1 , n + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int K = 3 ; System . out . println ( sum ( K , n ) ) ; } }
import java . util . * ; public class GFG { static int dp [ ] [ ] [ ] ; static int sum = 0 ; static int ntight = 0 ; static int sum_so_far = 0 ; static int number [ ] = { 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , 100
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; sum += a ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int evenOddLevelDifference ( int root ) {
public class GFG { static int countSubarrays ( int a [ ] , int n , int x ) { int count = 0 ; int number = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { count ++ ; } else { number += ( count ) * ( count + 1 ) / 2 ; count = 0 ; } } if ( count ) { number += ( count ) * ( count + 1 ) / 2 ; } return number ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 4 , 5 , 6 , 7 , 2 , 10 , 11 } ; int n = a . length ; int k = 5 ; System . out . println ( countSubarrays ( a , n , k ) ) ; } }
import java . io . * ; public class GFG { static int minCost ( int arr [ ] , int n ) { int count_even = 0 , count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void printLastOccurrence ( int a [ ] , int n ) { int mp [ ] = new int [ 7 ] ; for ( int i = 0 ; i < n ; i ++ ) mp [ a [ i ] ] = i ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp [ a [ i ] ] == i ) System . out . print ( a [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 1 , 5 , 5 , 1 , 6 , 1 } ; int n = a . length ; printLastOccurrence ( a , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) count ++ ; else if ( arr [ i ] > max ) max = arr [ i ] ; } if ( count == 0 ) System . out . println ( n - max + 1 ) ; else { int max2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == max ) max2 ++ ; else if ( arr [ i ] > max ) max2 = arr [ i ] ; } System . out . println ( max2 ) ; } } } }
public class GFG { static int countPaths ( int m , int n ) { if ( m == 1 || n == 1 ) return 1 ; return ( countPaths ( m - 1 , n ) + countPaths ( m , n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 5 ; System . out . println ( countPaths ( n , m ) ) ; } }
import java . io . * ; public class GFG { static int sumOfAP ( int a , int d , int n ) { int sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } public static void main ( String [ ] args ) { int n = 20 ; int a = 2.5 ; int d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } }
import java . io . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 0 , 3 , 1 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int coordinateCompression ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) mp . put ( arr [ i ] , mp . getOrDefault ( arr [ i ] ,
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == 1 ) count ++ ; } if ( count >=
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int BASE = 10 ; public String run ( ) { int [ ] [ ] ways = new int [ BASE + 1 ] [ BASE * BASE + 1 ] ; for ( int digit = 1 ; digit <= BASE ; digit ++ ) { ways [ digit ] [ 0 ] = 1 ; for ( int prefix = 0 ; prefix < BASE ; prefix ++ ) { int sum = 0 ; for ( int nextdigit = 0 ; nextdigit <= BASE ; nextdigit ++ ) { sum += ways [ digit - 1 ] [ prefix % ( BASE * BASE ) ] ; } ways [ digit - 1 ] [ prefix % BASE ] = sum ; } ways [ digit - 1 ] [ prefix % BASE ] = sum ; } int ans = ways [ BASE ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( s . charAt ( i ) == ' # ' ) { count ++ ; } else { if ( t . charAt ( i ) == ' # ' ) { count ++ ; } else { count ++ ; } } } if ( count >= 3 || count >= 3 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class Solution { public boolean isToeplitzMatrix ( int [ ] [ ] matrix ) { for ( int r = 0 ; r < matrix . length - 1 ; r ++ ) { for ( int c = 0 ; c < matrix [ 0 ] . length ; c ++ ) { if ( matrix [ r ] [ c ] != matrix [ r + 1 ] [ c + 1 ] ) return false ; } } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] [ ] matrix = { { 1 , 2 , 3 , 4 } , { 5 , 1 , 2 , 3 } , { 9 , 5 , 1 , 2 } } ; int out = sObj . isToeplitzMatrix ( matrix ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int gcd = gcd (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( n == 0 && t == 0 && l == 0 && b == 0 ) break ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j ] ) % 3 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int minInsertions ( int H [ ] , int n , int K ) { int inser = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) continue ; else inser += diff / K ; } return inser ; } public static void main ( String [ ] args ) { int H [ ] = { 2 , 4 , 8 , 16 } ; int K = 3 ; int n = H . length ; System . out . println ( minInsertions ( H , n , K ) ) ; } }
public class GFG { static int countWords ( String str , int l ) { int count = 1 ; if ( l == 1 ) return count ; if ( str . charAt ( 0 ) == str . charAt ( 1 ) ) count *= 1 ; else count *= 2 ; for ( int j = 1 ; j < l - 1 ; j ++ ) { if ( str . charAt ( j ) == str . charAt ( j - 1 ) && str . charAt ( j ) == str . charAt ( j + 1 ) ) count *= 2 ; else if ( str . charAt ( j ) == str . charAt ( j - 1 ) || str . charAt ( j ) == str . charAt ( j + 1 ) || str . charAt ( j + 1 ) == str . charAt ( j + 1 ) )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; System . out . println ( sum % 2 == 0 ? sum - arr [ n - 1 ] : sum ) ; } }

public class GFG { static int findHypotenuse ( int side1 , int side2 ) { int h = ( ( side1 * side1 ) + ( side2 * side2 ) ) ; return h ; } public static void main ( String [ ] args ) { int side1 = 3 , side2 = 4 ; System . out . println ( findHypotenuse ( side1 , side2 ) ) ; } }
import java . util . * ; public class GFG { static void printTwoOdd ( int arr [ ] , int size ) { int xor2 = arr [ 0 ] ; int set_bit_no = 0 ; int n = size - 2 ; int x = 0 , y = 0 ; for ( int i = 1 ; i < size ; i ++ ) { xor2 = xor2 ^ arr [ i ] ; } set_bit_no = xor2 & ~ ( xor2 - 1 ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) { x = x ^ arr [ i ] ; } else { y = y ^ arr [ i ] ; } } System . out . println ( " The ▁ two ▁ ODD ▁ elements ▁ are ▁ " + x + " , ▁ " + y ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 } ; int size = arr . length ; printTwoOdd ( arr , size ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } if ( arr [ i ] < min ) { min = arr [ i ] ; } } int ans = 0 ; for ( int i = 0 ; i < n - min ; i ++ ) { ans = Math . max ( ans , arr [ i ] ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp2 = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp2 [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] ; } } boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b [ i ] [ j ] == 1 ) { ok = false ; break ; } } } if ( ok ) { System . out . println ( " YES " ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( a [ i ] [ 0 ] + " ▁ " + a [ i ] [ 1 ] ) ; } } else { System . out . println ( " NO " ) ; } } }

import java . util . * ; public class GFG { static int steps ( int curx , int x , int n ) { if ( x == 0 ) return ( float ) Math . abs ( ( n - cur ) / x ) ; else if ( x > 0 ) return Math . abs ( ( n - cur ) / x ) ; else return Math . abs ( ( cur - 1 ) / x ) ; } static int countSteps ( int curx , int cury , int n , int m , int moves ) { int count = 0 ; int k = moves . length ; for ( int i = 0 ; i < k ; i ++ ) { int x = moves [ i ] [ 0 ] ; int y = moves [ i ] [ 1 ] ; int stepct = Math . min ( steps ( curx , x , n ) , steps ( cury , y , m )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] - a [ i + 1 ] ; } System . out . println ( ans ) ; } }
public class GFG { static int cntSubArr ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int curr_gcd = 0 ; for ( int j = i ; j < n ; j ++ ) curr_gcd = gcd ( curr_gcd , arr [ j ] ) ; ans += ( curr_gcd == 1 ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( cntSubArr ( arr , n ) ) ; } }
public class GFG { static boolean isVowel ( char c ) { if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) return true ; return false ; } static boolean isVowelPrime ( String str , int n ) { boolean [ ] prime = new boolean [ n ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( prime [ i ] == true ) { for ( int p = 2 * p ; p <= n ; p ++ ) { prime [ p ] = false ; } } } for ( int i = 0 ; i < n ; i ++ ) { if ( isVowel ( str . charAt ( i
public class GFG { static int minStepToDeleteString ( String str ) { int N = str . length ( ) ; int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( j < N ) { dp [ i ] [ j ] = 1 ; } else { dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ; if ( str . char
import java . util . * ; public class GFG { static int limit = 1000000 ; static int position [ ] = new int [ limit + 1 ] ; static void sieve ( ) { position [ 0 ] = - 1 ; position [ 1 ] = - 1 ; int pos = 0 ; for ( int i = 2 ; i <= limit ; i ++ ) { if ( position [ i ] == 0 ) pos ++ ; position [ i ] = pos ; for ( int j = i * 2 ; j <= limit ; j += i ) { position [ j ] = - 1 ; } } if ( __name ( ) . equals ( " _ _ main _ " ) ) sieve ( ) ; } public static void main ( String [ ] args ) { sieve ( ) ; int n = 11 ; System . out . println ( position [ n ] ) ; } }
import java . util . * ; public class GFG { static int DP_s = 9 ; static int getNumMonotone ( int ln ) { int DP [ ] [ ] = new int [ DP_s ] [ 10 ] ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ 0 ] [ i ] = i + 1 ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i < ln ; i ++ ) DP [ i ] [ 0 ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; return DP [ ln - 1 ] [ DP_s - 1 ] ; } public static void main ( String [ ] args ) { int ln = 10 ; System . out . println ( getNumMonotone ( ln ) ) ; } }
import java . util . * ; public class GFG { static int DP_s = 9 ; static int getNumMonotone ( int ln ) { int DP [ ] [ ] = new int [ DP_s ] [ 10 ] ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ 0 ] [ i ] = i + 1 ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i < ln ; i ++ ) DP [ i ] [ 0 ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; return DP [ ln - 1 ] [ DP_s - 1 ] ; } public static void main ( String [ ] args ) { int ln = 10 ; System . out . println ( getNumMonotone ( ln ) ) ; } }
import java . util . * ; public class GFG { static int maxCost ( int a [ ] , int n , int l , int r ) { int mx = 0 ; for ( int i = 0 ; i < n ; i ++ ) mx = Math . max ( mx , a [ i ] ) ; int count [ ] = new int [ mx + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) count [ a [ i ] ] ++ ; int res [ ] = new int [ mx + 1 ] ; res [ 0 ] = 0 ; for ( int i = 1 ; i <= mx ; i ++ ) { int k = Math . max ( Math . abs ( a [ i ] - 1 ) , 0 ) ; res [ a [ i ] ] = Math . max ( res [ a [ i ] - 1 ] , 0 ) ; res [ a [ i ] ] = Math . max ( res [ a [ i ] - 1 ] , 0 ) ; } return res [ mx ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m
import java . io . * ; public class GFG { static double findArea ( double r ) { double PI = 3.142 ; return PI * ( r * r ) ; } public static void main ( String [ ] args ) { double PI = 3.142 ; System . out . println ( " Area ▁ is ▁ % .6f " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] cnt = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ )
public class GFG { static int nthTerm ( int N ) { return ( Math . abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) ) ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int getHeight ( int X ) { return ( 2 * X ) ; } public static void main ( String [ ] args ) { int X = 35 ; System . out . println ( getHeight ( X ) ) ; } }
public class GFG { static int V = 4 ; static int countwalks ( int graph [ ] [ ] , int u , int v , int k ) { if ( k == 0 && u == v ) return 1 ; if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ; if ( k <= 0 ) return 0 ; int count = 0 ; for ( int i = 0 ; i < V ; i ++ ) { if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph , i , v , k - 1 ) ; } return count ; } public static void main ( String [ ] args ) { int graph [ ] [ ] = { { 0 , 1 , 1 , 1 , } , { 0 , 0 , 0 , 1 , 1 , } , { 0 , 0 , 0 , 1 , 1 , } , { 0 , 0 , 0 , 1 , 1 , } , { 0 , 0 , 0 , 1 , 1 , } , { 0 , 0 , 0 , 1 , 1 , } , { 0 , 0 , 0 , 1 , 1 , } , { 0 , 0 , 0 , 1 , 1 , 1 } , { 0 , 0 , 0 , 1 ,
import java . util . * ; public class GFG { static int findDigits ( int n , int b ) { if ( n < 0 ) return 0 ; int M_PI = 3.141592 ; int M_E = 2.7182 ; if ( n <= 1 ) return 1 ; int x = ( ( n * Math . log10 ( n / M_E ) + Math . log10 ( 2 * M_PI * n ) / 2.0 ) ) / ( Math . log10 ( b ) ) ; return ( int ) Math . floor ( x ) + 1 ; } public static void main ( String [ ] args ) { System . out . println ( findDigits ( 4 , 16 ) ) ; System . out . println ( findDigits ( 5 , 8 ) ) ; System . out . println ( findDigits ( 12 , 16 ) ) ; System . out . println ( findDigits ( 19 , 13 ) ) ; System . out . println ( findDigits ( 20 , 17 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i <
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long [ ] [ ] dp = new long [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( ( ( 2 * i ) - 1 ) * ( ( 2 * j ) - 1 ) ) % mod ; } } long ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( j == i ) continue ; if ( dp [ i ] [ j ] == 0 ) continue ; ans += dp [ i ] [ j ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int p = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; if ( ( p | q ) == 0 ) break ; int [ ] a = new int [ p ] ; int [ ] b = new int [ q ] ; for ( int i = 0 ; i < p ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < q ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < p ; i ++ ) { int min = Math . min ( a [ i ] , b [ i ] ) ; int max = Math . max ( a [ i ] , b [ i ] ) ; int count = 0 ; while ( max
import java . util . * ; public class GFG { static int binary_conversion ( String s , int m ) { while ( m > 0 ) { int temp = m % 2 ; String s1 = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '1' ) { s1 += "10" ; } else { s1 += "01" ; } } s = s1 ; s1 = " " ; } int e = binary_conversion ( s , m ) ; int r = binary_conversion ( s , m ) ; int i = 5 , 2 , 8 ; System . out . println ( e - r ) ; m = 2 * m ; n = 2 * m ; i = 2 * m ; } return e - r ; } public static void main ( String [ ] args ) { String s = " " ; int m = 2 , n = 8 ; System . out . println ( find_character
import java . util . * ; public class GFG { static int countSubSets ( int arr [ ] , int n ) { HashSet < Integer > us = new HashSet < > ( ) ; int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { us . add ( arr [ i ] ) ; } } int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { even_count ++ ; } } int ans = Math . pow ( 2 , even_count ) - 1 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 1 , 9 , 2 , 6 , 5 , 3 } ; int n = arr . length ; System . out . println ( " Number ▁ of ▁ subsets ▁ = ▁ " + countSubSets ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static int f [ ] = new int [ MAX ] ; static int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) f [ n ] = 1 ; return f [ n ] ; } static int k = ( n + 1 ) / 2 ; if ( n % 2 == 0 ) { f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) ; } else { f [ n ] = ( 2 * fib ( k
public class GFG { static int findNumbers ( int n , int w ) { int x = 0 ; int sum = 0 ; if ( w >= 0 && w <= 8 ) { x = 9 - w ; } else if ( w >= - 9 && w <= - 1 ) { x = 10 + w ; } sum = ( x * sum ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 , w = 4 ; System . out . println ( findNumbers ( n , w ) ) ; } }
public class GFG { static int findKthChar ( String s , int k ) { int len1 = s . length ( ) ; int i = 0 ; int total_len = 0 ; while ( i < len1 ) { if ( s . charAt ( i ) == ' a ' ) total_len ++ ; else total_len += 1 ; i ++ ; } int next_total_len = total_len * ( int ) ( k - '0' ) ; if ( k <= next_total_len ) { int pos = k % total_len ; if ( pos == 0 ) pos = total_len ; return findKthChar ( s , pos ) ; } else { total_len = next_total_len
import java . util . * ; public class GFG { static int countNonEmptySubstr ( String str ) { int n = str . length ( ) ; return ( int ) n * ( n + 1 ) / 2 ; } public static void main ( String [ ] args ) { String str = " abcde " ; System . out . println ( countNonEmptySubstr ( str ) ) ; } }
