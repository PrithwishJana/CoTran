def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( sys . argv [ 1 ] ) NEW_LINE pg = [ ] NEW_LINE while True : NEW_LINE INDENT n = int ( f . readline ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT if pg . count ( n ) == 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE continue NEW_LINE DEDENT begin = - 1 NEW_LINE end = - 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if pg . count ( i ) == 0 : NEW_LINE INDENT begin = i NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( n + 1 , 2000000 ) : NEW_LINE INDENT if pg . count ( i ) == 1 : NEW_LINE INDENT end = i NEW_LINE break NEW_LINE DEDENT DEDENT print ( end - begin ) NEW_LINE DEDENT class PrimeNumberGenerator ( object ) : NEW_LINE INDENT N = 2000000 NEW_LINE def __init__ ( self , isPrime ) : NEW_LINE INDENT self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE self . isPrime = isPrime NEW_LINE DEDENT def isPrime ( self , index ) : NEW_LINE INDENT return self . isPrime [ index ] NEW_LINE DEDENT DEDENT DEDENT
def GFG ( data , freq , len_ ) : NEW_LINE INDENT for c in data : NEW_LINE INDENT freq [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT def canMakePalindrome ( freq , len_ ) : NEW_LINE INDENT count_odd = 0 NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT if freq [ i ] % 2 : NEW_LINE INDENT count_odd += 1 NEW_LINE DEDENT DEDENT if len_ % 2 == 0 : NEW_LINE INDENT if count_odd > 0 : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT if count_odd != 1 : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def findOddAndRemoveItsFreq ( freq ) : NEW_LINE INDENT odd_str = " " NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT if freq [ i ] % 2 : NEW_LINE INDENT freq [ i ] -= 1 NEW_LINE odd_str = odd_str + chr ( i ) + ord ( ' a ' ) NEW_LINE return odd_str NEW_LINE DEDENT DEDENT return odd_str NEW_LINE DEDENT def findPalindromicString ( data ) : NEW_LINE INDENT freq = list ( data ) NEW_LINE freq = list ( freq ) NEW_LINE if not canMakePalindrome ( freq , len_ ) : NEW_LINE INDENT return " No ▁ Palindromic ▁ String " NEW_LINE DEDENT odd_str = findOddAndRemoveItsFreq ( freq ) NEW_LINE front_str , rear_str = " " , " ▁ " NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT temp = " " NEW_LINE if freq [ i ] != 0 : NEW_LINE INDENT ch = chr ( i ) + ord ( ' a ' ) NEW_LINE for j in range ( 1 , freq [ i ] // 2 + 1 ) : NEW_LINE INDENT temp = temp + ch NEW_LINE DEDENT front_str = front_str + temp NEW_LINE rear_str = temp + rear_str NEW_LINE DEDENT DEDENT return ( front_str + odd_str + rear_str ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT data = " malayalam " NEW_LINE print ( findPalindromicString ( data ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE DEDENT
def count_9s ( number ) : NEW_LINE INDENT n = len ( number ) NEW_LINE d = [ 0 ] * 9 NEW_LINE d [ 0 ] = 1 NEW_LINE result = 0 NEW_LINE mod_sum , continuous_zero = 0 , 0 NEW_LINE for c in number : NEW_LINE INDENT if ord ( c ) - ord ( '0' ) == 0 : NEW_LINE INDENT continuous_zero += 1 NEW_LINE DEDENT else : NEW_LINE INDENT continuous_zero = 0 NEW_LINE DEDENT mod_sum += ord ( c ) - ord ( '0' ) NEW_LINE mod_sum %= 9 NEW_LINE result += d [ mod_sum ] NEW_LINE d [ mod_sum ] += 1 NEW_LINE result -= continuous_zero NEW_LINE DEDENT return result NEW_LINE DEDENT
def fast_pow ( N , K ) : NEW_LINE INDENT import math NEW_LINE if not K : NEW_LINE INDENT return 1 NEW_LINE DEDENT temp = math . pow ( N , K // 2 ) NEW_LINE if K % 2 == 0 : NEW_LINE INDENT return temp * temp NEW_LINE DEDENT else : NEW_LINE INDENT return N * temp * temp NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = [ [ 0 , 1 , 1 , 1 , 1 , 1 , 1 ] , [ 0 , 0 , 0 , 0 , 1 , 1 , 0 ] , [ 1 , 0 , 1 , 1 , 0 , 1 , 1 ] , [ 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 ] , [ 1 , 1 , 0 , 0 , 1 , 1 , 0 ] , [ 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 ] , [ 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 ] , [ 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 ] , [ 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] , [ 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 ] ] NEW_LINE for n in range ( len ( s ) ) : NEW_LINE INDENT a = [ 0 ] * 7 NEW_LINE if n == - 1 : NEW_LINE INDENT break NEW_LINE DEDENT while n > 0 : NEW_LINE INDENT n -= 1 NEW_LINE m = n NEW_LINE for i in range ( 7 ) : NEW_LINE INDENT print ( ( a [ i ] ^ s [ m ] [ i ] ) + ( ' \n ' if i == 6 else ' ' ) , end = ' ' ) NEW_LINE DEDENT a = s [ m ] [ : n ] NEW_LINE DEDENT DEDENT DEDENT
def test_sum_to_vector ( ) : NEW_LINE INDENT import numpy as np NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE from numpy . testing import assert_almost_equal NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import numpy as np NEW_LINE import random NEW_LINE MAX = 1000000 NEW_LINE arr = [ ] NEW_LINE prime = np . zeros ( MAX ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT for i in range ( MAX ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT for p in range ( 2 , 2 * MAX ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , MAX , 2 ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT for p in range ( 2 , MAX ) : NEW_LINE INDENT if prime [ p ] : NEW_LINE INDENT arr . append ( p ) NEW_LINE DEDENT DEDENT DEDENT def isPrimorialPrime ( n ) : NEW_LINE INDENT if not prime [ n ] : NEW_LINE INDENT return False NEW_LINE DEDENT product = 1 NEW_LINE i = 0 NEW_LINE while product < n : NEW_LINE INDENT product = product * arr [ i ] NEW_LINE if product + 1 == n or product - 1 == n : NEW_LINE INDENT return True NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return False NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n = 31 NEW_LINE if isPrimorialPrime ( n ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def mul_table ( N , i ) : NEW_LINE INDENT if i > 10 : NEW_LINE INDENT return NEW_LINE DEDENT print ( ' % d ▁ * ▁ % d ▁ = ▁ % d ' % ( N , i , N * i ) ) NEW_LINE mul_table ( N , i + 1 ) NEW_LINE DEDENT
def close_to_n_divisible_m ( n , m ) : NEW_LINE INDENT q = n // m NEW_LINE n1 = m * q NEW_LINE n2 = ( m * ( q + 1 ) ) if ( n * m ) > 0 else ( m * ( q - 1 ) ) NEW_LINE if abs ( n - n1 ) < abs ( n - n2 ) : NEW_LINE INDENT return n1 NEW_LINE DEDENT return n2 NEW_LINE DEDENT
def GFG ( ang , n ) : NEW_LINE INDENT if ( ang * n ) > ( 180 * ( n - 2 ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( ang * n ) % 180 : NEW_LINE INDENT return 0 NEW_LINE DEDENT ans = 1 NEW_LINE freq = ( ang * n ) / 180 NEW_LINE ans = ans * ( n - 1 - freq ) NEW_LINE ans = ans * n NEW_LINE return ans NEW_LINE DEDENT
def GFG ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE lps = [ 0 ] * n NEW_LINE lps [ 0 ] = 0 NEW_LINE i = 1 NEW_LINE while i < n : NEW_LINE INDENT if s [ i ] == s [ len ( s ) ] : NEW_LINE INDENT lps [ i ] = len ( s ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if lps [ i ] != 0 : NEW_LINE INDENT lps [ i ] = lps [ - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT lps [ i ] = 0 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT return lps NEW_LINE DEDENT
def check_if_sort_rotated ( arr , n ) : NEW_LINE INDENT min_ele = sys . maxsize NEW_LINE max_ele = sys . maxsize NEW_LINE min_index = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] < min_ele : NEW_LINE INDENT min_ele = arr [ i ] NEW_LINE min_index = i NEW_LINE DEDENT DEDENT flag1 = True NEW_LINE for i in range ( 1 , min_index ) : NEW_LINE INDENT if arr [ i ] < arr [ i - 1 ] : NEW_LINE INDENT flag1 = False NEW_LINE break NEW_LINE DEDENT DEDENT flag2 = True NEW_LINE for i in range ( min_index + 1 , n ) : NEW_LINE INDENT if arr [ i ] < arr [ i - 1 ] : NEW_LINE INDENT flag2 = False NEW_LINE break NEW_LINE DEDENT DEDENT if min_index == 0 : NEW_LINE INDENT print ( ' NO ' , end = ' ▁ ' ) NEW_LINE return NEW_LINE DEDENT if flag1 and flag2 and ( arr [ n - 1 ] < arr [ min_index - 1 ] ) : NEW_LINE INDENT print ( ' YES ' , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def runapp ( ) : NEW_LINE INDENT import sys NEW_LINE sys . path . append ( os . path . abspath ( sys . argv [ 0 ] ) ) NEW_LINE import os NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE import sys NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE import os NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE import sys NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) ) NEW_LINE DEDENT
def check_if_power_isolated ( num ) : NEW_LINE INDENT input = num NEW_LINE count = 0 NEW_LINE factor = [ 0 ] * ( num + 1 ) NEW_LINE if num % 2 == 0 : NEW_LINE INDENT while num % 2 == 0 : NEW_LINE INDENT count += 1 NEW_LINE num //= 2 NEW_LINE DEDENT factor [ 2 ] = count NEW_LINE DEDENT for i in range ( 3 , num * 2 + 1 , 2 ) : NEW_LINE INDENT count = 0 NEW_LINE while num % i == 0 : NEW_LINE INDENT count += 1 NEW_LINE num //= i NEW_LINE DEDENT if count > 0 : NEW_LINE INDENT factor [ i ] = count NEW_LINE DEDENT DEDENT if num > 1 : NEW_LINE INDENT factor [ num ] = 1 NEW_LINE DEDENT product = 1 NEW_LINE for i in range ( num + 1 ) : NEW_LINE INDENT if factor [ i ] > 0 : NEW_LINE INDENT product = product * factor [ i ] ** i NEW_LINE DEDENT DEDENT if product == input : NEW_LINE INDENT sys . stdout . write ( ' Power - isolated ▁ Integer \n ' ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' Not ▁ a ▁ Power - isolated ▁ Integer \n ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE s = list ( string . ascii_lowercase ) NEW_LINE s = [ ] NEW_LINE for c in s : NEW_LINE INDENT if len ( s ) % 2 == 0 and s [ c ] in " ▁ A ▁ " or len ( s ) % 2 == 1 and s [ c ] in " ▁ Z ▁ " : NEW_LINE INDENT s . append ( c ) NEW_LINE DEDENT DEDENT s . sort ( ) NEW_LINE if len ( s ) == 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT s = [ " AZ " ] * len ( s ) NEW_LINE print ( " " . join ( s ) ) NEW_LINE DEDENT DEDENT
def R765A ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE s = list ( f ) NEW_LINE t = int ( s ) NEW_LINE while t > 0 : NEW_LINE INDENT s = s . pop ( 0 ) NEW_LINE n = int ( s ) NEW_LINE arr = [ ] NEW_LINE s = list ( s ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( int ( s [ i ] ) ) NEW_LINE DEDENT solve ( arr ) NEW_LINE DEDENT class Diff ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . prev = None NEW_LINE DEDENT def solve ( self , arr ) : NEW_LINE INDENT self . max = - 1 NEW_LINE self . dict = { } NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT if arr [ i ] in self . dict : NEW_LINE INDENT diff = self . dict [ arr [ i ] ] NEW_LINE prev = diff . prev NEW_LINE count = self . prev + len ( arr ) - i NEW_LINE if count > self . max : NEW_LINE INDENT self . max = count NEW_LINE DEDENT diff . prev = i NEW_LINE DEDENT else : NEW_LINE INDENT diff = Diff ( ) NEW_LINE diff . prev = i NEW_LINE self . dict [ arr [ i ] ] = diff NEW_LINE DEDENT DEDENT print ( self . max ) NEW_LINE DEDENT DEDENT return R765A NEW_LINE DEDENT
def GFG ( num1 , num2 ) : NEW_LINE INDENT len1 = len ( num1 ) NEW_LINE len2 = len ( num2 ) NEW_LINE if not len1 or not len2 : NEW_LINE INDENT return '0' NEW_LINE DEDENT result = [ 0 ] * ( len1 + len2 ) NEW_LINE i_n1 = 0 NEW_LINE i_n2 = 0 NEW_LINE for i in range ( len1 - 1 , - 1 , - 1 ) : NEW_LINE INDENT carry = 0 NEW_LINE n1 = num1 [ i ] - '0' NEW_LINE i_n2 = 0 NEW_LINE for j in range ( len2 - 1 , - 1 , - 1 ) : NEW_LINE INDENT n2 = num2 [ j ] - '0' NEW_LINE sum = n1 * n2 + result [ i_n1 + i_n2 ] + carry NEW_LINE carry = sum // 10 NEW_LINE result [ i_n1 + i_n2 ] = sum % 10 NEW_LINE i_n2 += 1 NEW_LINE DEDENT if carry > 0 : NEW_LINE INDENT result [ i_n1 + i_n2 ] += carry NEW_LINE DEDENT i_n1 += 1 NEW_LINE DEDENT i = len ( result ) - 1 NEW_LINE while i >= 0 and result [ i ] == 0 : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT if i == - 1 : NEW_LINE INDENT return '0' NEW_LINE DEDENT s = ' ' NEW_LINE while i >= 0 : NEW_LINE INDENT s += ( result [ i ] ) NEW_LINE i -= 1 NEW_LINE DEDENT return s NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT arr = [ ] NEW_LINE sum = 0 NEW_LINE sum1 = 0 NEW_LINE arr1 = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sys . stdin . readline ( ) ) NEW_LINE sum += arr [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr1 . append ( sys . stdin . readline ( ) ) NEW_LINE sum1 += arr1 [ i ] NEW_LINE DEDENT if sum >= sum1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n , k = int ( sys . stdin . readline ( ) ) , int ( sys . stdin . readline ( ) ) NEW_LINE a = string . strip ( a ) NEW_LINE if k > n // 2 : NEW_LINE INDENT while k < n : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE k += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT while k > 1 : NEW_LINE INDENT print ( " LEFT " ) NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT if k == 1 : NEW_LINE INDENT for i in range ( len ( a ) ) : NEW_LINE INDENT print ( " PRINT ▁ % s " % a [ i ] ) NEW_LINE if ( i + 1 ) < len ( a ) : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT for i in range ( len ( a ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT print ( " PRINT ▁ % s " % a [ i ] ) NEW_LINE if ( i - 1 ) >= 0 : NEW_LINE INDENT print ( " LEFT " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def print_dist_sum ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT dp = np . zeros ( ( n + 1 , sum + 1 ) ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = True NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ arr [ i - 1 ] ] = True NEW_LINE for j in range ( 1 , sum + 1 ) : NEW_LINE INDENT if dp [ i - 1 ] [ j ] == True : NEW_LINE INDENT dp [ i ] [ j ] = True NEW_LINE dp [ i ] [ j + arr [ i - 1 ] ] = True NEW_LINE DEDENT DEDENT DEDENT for j in range ( 0 , sum + 1 ) : NEW_LINE INDENT if dp [ n ] [ j ] == True : NEW_LINE INDENT print ( j , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( a , b ) : NEW_LINE INDENT global c NEW_LINE c = a + ( ~ b + 1 ) NEW_LINE return c NEW_LINE DEDENT
def infinite_sequence ( ) : NEW_LINE INDENT import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE n1 = int ( math . sqrt ( 1 + ( 8 * n1 ) ) - 1 ) / 2 NEW_LINE n = int ( ( math . sqrt ( 1 + ( 8 * n1 ) ) - 1 ) / 2 ) NEW_LINE ans = n1 - ( ( ( n + 1 ) * n ) / 2 ) NEW_LINE sys . stdout . write ( ( ans if ans is not None else n ) ) NEW_LINE DEDENT
def code_forces ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE arr = list ( range ( n ) ) NEW_LINE lt = False NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i == arr [ arr [ arr [ i ] ] ] : NEW_LINE INDENT lt = True NEW_LINE break NEW_LINE DEDENT DEDENT if lt : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def GFG ( str ) : NEW_LINE INDENT while i < len ( str ) : NEW_LINE INDENT if not str [ i ] : NEW_LINE INDENT return i NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return - 1 NEW_LINE DEDENT
def planet ( ) : NEW_LINE INDENT import string NEW_LINE FLIP = [ 0 , 1 , 5 , - 1 , - 1 , 2 , - 1 , - 1 , 8 , - 1 ] NEW_LINE stdin = string . replace ( " ▁ " , " " ) NEW_LINE n_c = len ( stdin ) NEW_LINE for loop in range ( n_c ) : NEW_LINE INDENT hr = int ( stdin . readline ( ) ) NEW_LINE min = int ( stdin . readline ( ) ) NEW_LINE tokens = stdin . split ( " : " ) NEW_LINE s_hr = int ( tokens [ 0 ] ) NEW_LINE s_min = int ( tokens [ 1 ] ) NEW_LINE res = None NEW_LINE for i in range ( s_hr * min + s_min , hr * min ) : NEW_LINE INDENT res = flip ( i , hr , min ) NEW_LINE if res is not None : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if res is None : NEW_LINE INDENT res = [ 0 , 0 , 0 , 0 ] NEW_LINE DEDENT print ( " % d % d : % d % d \n " % ( res [ 0 ] , res [ 1 ] , res [ 2 ] , res [ 3 ] ) ) NEW_LINE DEDENT return [ ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import string NEW_LINE import math NEW_LINE import random NEW_LINE import sys NEW_LINE n , nax = sys . maxsize , 105 NEW_LINE a = list ( a ) NEW_LINE cnts = [ 0 ] * nax NEW_LINE for e in a : NEW_LINE INDENT cnts [ e + 1 ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE pre = [ 0 ] * nax NEW_LINE for i in range ( 1 , nax ) : NEW_LINE INDENT pre [ i ] = pre [ i - 1 ] + cnts [ i ] NEW_LINE val = ( pre [ i ] + i - 1 ) / i NEW_LINE ans = max ( ans , val ) NEW_LINE DEDENT print ( ans ) NEW_LINE def ruffle_sort ( a ) : NEW_LINE INDENT al = [ ] NEW_LINE for i in a : NEW_LINE INDENT al . append ( i ) NEW_LINE DEDENT al . sort ( ) NEW_LINE for i in range ( len ( a ) ) : NEW_LINE INDENT a [ i ] = al [ i ] NEW_LINE DEDENT return a NEW_LINE DEDENT def print ( a ) : NEW_LINE INDENT for e in a : NEW_LINE INDENT print ( e , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT class FastReader ( sys . stdin ) : NEW_LINE INDENT def readline ( ) : NEW_LINE INDENT while not sys . stdin . readline ( ) . strip ( ) . startswith ( ' # ' ) : NEW_LINE INDENT try : NEW_LINE INDENT s = list ( next ( sys . stdin ) . split ( ' ▁ ' ) ) NEW_LINE DEDENT except StopIteration : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return s NEW_LINE DEDENT DEDENT def randint ( ) : NEW_LINE INDENT return int ( s ) NEW_LINE DEDENT def long ( s ) : NEW_LINE INDENT return int ( s ) NEW_LINE DEDENT def read_array ( n ) : NEW_LINE INDENT a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sc . randint ( 0 , n ) ) NEW_LINE DEDENT return a NEW_LINE DEDENT DEDENT DEDENT return FastReader ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . maxsize NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE s = [ ] NEW_LINE if n == 1 : NEW_LINE INDENT print ( 3 ) NEW_LINE DEDENT else : NEW_LINE INDENT while n > 0 : NEW_LINE INDENT ans = n & 1 NEW_LINE n = n >> 1 NEW_LINE if ans == 1 : NEW_LINE INDENT s . insert ( 0 , 1 ) NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT s . insert ( 0 , 0 ) NEW_LINE DEDENT DEDENT if n == 0 : NEW_LINE INDENT s . pop ( ) NEW_LINE s . append ( 1 ) NEW_LINE DEDENT val = int ( ' ' . join ( s ) , 2 ) NEW_LINE print ( val ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE n = len ( ufuncs ) NEW_LINE arr = np . zeros ( n + 3 ) NEW_LINE arr [ 0 ] = True NEW_LINE arr [ 1 ] = True NEW_LINE count = 0 NEW_LINE for i in range ( 2 , len ( arr ) ) : NEW_LINE INDENT if not arr [ i ] : NEW_LINE INDENT for j in range ( 2 , i * len ( arr ) ) : NEW_LINE INDENT arr [ i * j ] = True NEW_LINE DEDENT if not arr [ i ] and not arr [ i - 2 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT print ( count * 2 ) NEW_LINE DEDENT
def league ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE class league ( sys . stdin ) : NEW_LINE INDENT def solve ( self , f ) : NEW_LINE INDENT n = len ( f ) NEW_LINE num = 0 NEW_LINE a = [ 0 ] * 1000001 NEW_LINE start = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT num += len ( f ) NEW_LINE for j in range ( start , num ) : NEW_LINE INDENT a [ j ] = i NEW_LINE DEDENT start = num NEW_LINE DEDENT m = len ( f ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT print ( a [ - 1 ] , end = ' ▁ ' ) NEW_LINE print ( ) NEW_LINE DEDENT DEDENT DEDENT def run ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT with open ( ' league . txt ' , ' w ' ) as f : NEW_LINE INDENT f . write ( ' ' ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( ' league . txt ' , file = sys . stderr ) NEW_LINE print ( ) NEW_LINE DEDENT DEDENT return league NEW_LINE DEDENT
def ada ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def sliding_window ( arr , n , k ) : NEW_LINE INDENT Qi = [ ] NEW_LINE i = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT while not Qi and arr [ i ] >= arr [ Qi . pop ( ) ] : NEW_LINE INDENT Qi . append ( i ) NEW_LINE DEDENT Qi . append ( i ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ Qi . pop ( ) ] , end = ' ▁ ' ) NEW_LINE while ( not Qi and Qi [ - k ] <= i - k ) : NEW_LINE INDENT Qi . pop ( ) NEW_LINE DEDENT while ( not Qi and arr [ i ] >= arr [ Qi . pop ( ) ] ) : NEW_LINE INDENT Qi . pop ( ) NEW_LINE DEDENT Qi . append ( i ) NEW_LINE DEDENT print ( arr [ Qi . pop ( ) ] ) NEW_LINE DEDENT
def russian_peasant ( a , b ) : NEW_LINE INDENT res = 0 NEW_LINE while b > 0 : NEW_LINE INDENT if b & 1 : NEW_LINE INDENT res = res + a NEW_LINE DEDENT a = a << 1 NEW_LINE b = b >> 1 NEW_LINE DEDENT return res NEW_LINE DEDENT
def GFG ( data , len_ ) : NEW_LINE INDENT for i in range ( 1 , len_ ) : NEW_LINE INDENT if data [ i ] == data [ i - 1 ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def lehmann ( n , t ) : NEW_LINE INDENT import random NEW_LINE random . seed ( ) NEW_LINE a = random . randint ( n - 3 , 2 ) NEW_LINE e = ( n - 1 ) / 2 NEW_LINE while t > 0 : NEW_LINE INDENT result = ( int ( pow ( a , e ) ) ) % n NEW_LINE if ( result % n ) == 1 or ( result % n ) == ( n - 1 ) : NEW_LINE INDENT a = random . randint ( n - 3 , 2 ) NEW_LINE t -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT num = sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT while num > 0 : NEW_LINE INDENT num -= 1 NEW_LINE a = sys . stdin . read ( ) NEW_LINE b = sys . stdin . read ( ) NEW_LINE res = 0 NEW_LINE while a != 0 and b != 0 : NEW_LINE INDENT if a >= b : NEW_LINE INDENT res += a // b NEW_LINE a %= b NEW_LINE DEDENT else : NEW_LINE INDENT res += b // a NEW_LINE b %= a NEW_LINE DEDENT DEDENT print ( res ) NEW_LINE DEDENT DEDENT
def cp ( s ) : return s NEW_LINE DEDENT class CP ( object ) : NEW_LINE INDENT def __init__ ( self , s ) : NEW_LINE INDENT self . s = s NEW_LINE self . f = s NEW_LINE self . f = s NEW_LINE self . f = s NEW_LINE self . f = s NEW_LINE self . i = None NEW_LINE self . f = s . f NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . k = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE self . j = None NEW_LINE DEDENT
def GFG ( mat ) : NEW_LINE INDENT N = 3 NEW_LINE max_trace = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT r , s , trace = i , j , 0 NEW_LINE while r < N and s < N : NEW_LINE INDENT trace += mat [ r ] [ s ] NEW_LINE r += 1 NEW_LINE s += 1 NEW_LINE max_trace = max ( trace , max_trace ) NEW_LINE DEDENT DEDENT DEDENT return max_trace NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import math NEW_LINE for xa1 , ya1 , xa2 , ya2 , xb1 , yb1 , xb2 , yb2 in args : NEW_LINE INDENT xa1 , ya1 = xa1 , ya1 , xa2 , ya2 NEW_LINE xb1 , yb1 , yb2 = xb1 , yb1 , yb2 NEW_LINE xa1 , xa2 , ya2 = xa1 , ya1 , xa2 , ya2 NEW_LINE xb1 , xb2 , yb2 = xb1 , yb1 , xb2 , yb2 NEW_LINE xa1 , xa2 , yb1 = xa1 , xa2 , xb1 , xb2 , xb1 , yb2 NEW_LINE ya1 , ya2 , yb2 = ya1 , yb2 , yb1 , yb2 NEW_LINE xa1 , xa2 , ya1 , ya2 , xb1 , xb2 , yb2 = xb1 , xb2 , xb1 , xb2 , yb2 , yb2 NEW_LINE xa1 , xa2 , ya1 , xb2 , yb1 , yb2 = xb1 , xb2 , xb1 , xb2 , yb2 , yb1 , yb2 NEW_LINE xa1 , xa2 , ya2 , xb1 , xb2 , yb2 , ya1 , yb2 , ya1 , ya2 , yb1 , yb2 , xa1 , ya2 , yb1 , yb2 , xa1 , xb2 , ya2 , ya1 , yb2 , xb1 , yb2 , yb1 , xb1 , yb2 , xa1 , xb2 , yb2 , yb1 , xb1 , yb2 , yb2 , xa1 , xa2 , xb2 , ya2 , ya2 , xb1 , yb2 , xb1 , yb2 , yb1 , xb1 , yb2 , yb2 , xa1 , xb2 , yb2 , yb1 , xb1 , yb2 , xb1 , yb2 , yb2 , xa1 , xa1 , xb2 , ya2 , ya1 , ya2 , xb2 , yb2 , yb1 , yb2 , xa1 , xa1 , xb2 , yb2 , yb2 , xa1 , xa1 , xb2 , ya2 , yb2 , xa1 , xa1 , ya2 , xb1 , yb2 , yb2 , xa1 , xa1 , xa1 , xb2 , ya1 , xb1 , yb2 , xa1
def array_elimination ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE for tt in range ( t ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE bit = [ 0 ] * 32 NEW_LINE arr = [ None ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ i ] = sys . maxsize NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( 32 ) : NEW_LINE INDENT temp = ( 1 << ( j - 1 ) ) NEW_LINE bitwise_and = arr [ i ] & temp NEW_LINE if bitwise_and > 0 : NEW_LINE INDENT bit [ j ] += 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT possible = True NEW_LINE for j in range ( 32 ) : NEW_LINE INDENT if bit [ j ] % i != 0 : NEW_LINE INDENT possible = False NEW_LINE break NEW_LINE DEDENT DEDENT if possible : NEW_LINE INDENT sys . stdout . write ( " % d ▁ " % i ) NEW_LINE DEDENT DEDENT sys . stdout . write ( " \n " ) NEW_LINE DEDENT DEDENT
def OddDivCount ( a , b ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( a , b + 1 ) : NEW_LINE INDENT div_count = 0 NEW_LINE for j in range ( 1 , i + 1 ) : NEW_LINE INDENT if i % j == 0 : NEW_LINE INDENT div_count += 1 NEW_LINE DEDENT DEDENT if ( div_count % 2 ) : NEW_LINE INDENT res += 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE m = int ( sys . stdin . readline ( ) ) NEW_LINE M = float ( m ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( i ) NEW_LINE DEDENT max = 0 NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = int ( math . ceil ( arr [ i ] / M ) ) NEW_LINE if x >= max : NEW_LINE INDENT max = x NEW_LINE ans = i NEW_LINE DEDENT DEDENT sys . stdout . write ( str ( ans + 1 ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def GFG ( N , arr ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE def replacedArray ( N , arr ) : NEW_LINE INDENT global posSum , negSum , i , j , diff NEW_LINE posSum = 0 NEW_LINE negSum = 0 NEW_LINE for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT diff = abs ( posSum ) - abs ( negSum ) NEW_LINE if i > 0 : NEW_LINE INDENT posSum += arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT negSum += arr [ i ] NEW_LINE DEDENT DEDENT arr [ i ] = abs ( diff ) NEW_LINE DEDENT return ' ' . join ( arr ) NEW_LINE DEDENT
def GFG ( N , arr ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE def replacedArray ( N , arr ) : NEW_LINE INDENT pos_sum , neg_sum , i , j , diff = 0 , 0 , 0 , 0 , 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT pos_sum = 0 NEW_LINE neg_sum = 0 NEW_LINE for j in range ( i + 1 , N ) : NEW_LINE INDENT if arr [ j ] > 0 : NEW_LINE INDENT pos_sum += arr [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT neg_sum += arr [ j ] NEW_LINE DEDENT DEDENT diff = abs ( pos_sum ) - abs ( neg_sum ) NEW_LINE arr [ i ] = abs ( diff ) NEW_LINE DEDENT return arr NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT N = 5 NEW_LINE arr = [ 1 , - 1 , 2 , 3 , - 2 ] NEW_LINE replacedArray ( N , arr ) NEW_LINE printArray ( N , arr ) NEW_LINE N = 6 NEW_LINE arr1 = [ - 3 , - 4 , - 2 , 5 , 1 , - 2 ] NEW_LINE replacedArray ( N , arr1 ) NEW_LINE printArray ( N , arr1 ) NEW_LINE DEDENT DEDENT
def count_divisbleby4 ( s ) : NEW_LINE INDENT import string NEW_LINE n = len ( s ) NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] in [ '4' , '8' , '0' ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT h = ( s [ i ] - '0' ) * 10 + ( s [ i + 1 ] - '0' ) NEW_LINE if h % 4 == 0 : NEW_LINE INDENT count = count + i + 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def cf1535A ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE for i in range ( 1 , t + 1 ) : NEW_LINE INDENT a = [ ] NEW_LINE for k in range ( 4 ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT if max ( a [ 0 ] , a [ 1 ] ) > min ( a [ 2 ] , a [ 3 ] ) and max ( a [ 2 ] , a [ 3 ] ) > min ( a [ 0 ] , a [ 1 ] ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE number = int ( sys . stdin . readline ( ) ) NEW_LINE ans , value = - 1 , 0 NEW_LINE mask = 2 NEW_LINE while value < number : NEW_LINE INDENT s = string . atoi ( mask ) NEW_LINE ans += 1 NEW_LINE zeros = 0 NEW_LINE for c in s : NEW_LINE INDENT if c == '0' : NEW_LINE INDENT zeros += 1 NEW_LINE DEDENT DEDENT if zeros != len ( s ) - zeros : NEW_LINE INDENT continue NEW_LINE DEDENT s = s . replace ( '0' , '4' ) NEW_LINE s = s . replace ( '1' , '7' ) NEW_LINE value = int ( s ) NEW_LINE DEDENT print ( value ) NEW_LINE DEDENT
def oracAndMedians_641B ( ) : NEW_LINE INDENT import re NEW_LINE f = open ( " oracAndMedians641B . txt " ) NEW_LINE cases = int ( f . readline ( ) ) NEW_LINE for case in range ( len ( f ) ) : NEW_LINE INDENT f . readline ( ) NEW_LINE n = int ( f . readline ( ) ) NEW_LINE target = int ( f . readline ( ) ) NEW_LINE nums = [ ] NEW_LINE f = list ( f ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT nums . append ( int ( f . readline ( ) ) ) NEW_LINE DEDENT helper ( nums , target ) NEW_LINE DEDENT def helper ( nums , target ) : NEW_LINE INDENT is_target_found , can_print_yes = False , False NEW_LINE score , prev = 0 , - 1 NEW_LINE for num in nums : NEW_LINE INDENT if num == target : NEW_LINE INDENT is_target_found = True NEW_LINE DEDENT if num < target : NEW_LINE INDENT score -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT score += 1 NEW_LINE DEDENT if score > 0 and prev > - 1 : NEW_LINE INDENT can_print_yes = True NEW_LINE DEDENT prev = score NEW_LINE score = max ( score , 0 ) NEW_LINE DEDENT if ( len ( nums ) == 1 or can_print_yes ) and is_target_found : NEW_LINE INDENT print ( " yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " no " ) NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def smooth ( ) : NEW_LINE INDENT import math NEW_LINE import random NEW_LINE import sys NEW_LINE import sys NEW_LINE import math NEW_LINE import random NEW_LINE import sys NEW_LINE import sys NEW_LINE import math NEW_LINE import random NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return None NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE N = 12 NEW_LINE ofs = [ [ 1 , 0 ] , [ 0 , - 1 ] , [ - 1 , 0 ] , [ 0 , 1 ] ] NEW_LINE def del ( map , y , x ) : NEW_LINE INDENT map [ y ] [ x ] = False NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT nx = x + ofs [ i ] [ 0 ] NEW_LINE ny = y + ofs [ i ] [ 1 ] NEW_LINE if 0 <= ny < N and ny < N and 0 <= nx < N : NEW_LINE INDENT if map [ ny ] [ nx ] : NEW_LINE INDENT del map [ ny ] [ nx ] NEW_LINE DEDENT DEDENT DEDENT DEDENT def solve ( map ) : NEW_LINE INDENT c = 0 NEW_LINE for y in range ( N ) : NEW_LINE INDENT for x in range ( N ) : NEW_LINE INDENT if map [ y ] [ x ] : NEW_LINE INDENT c += 1 NEW_LINE del map [ y ] [ x ] NEW_LINE DEDENT DEDENT DEDENT return c NEW_LINE DEDENT def io ( ) : NEW_LINE INDENT with open ( ' input . txt ' , ' r ' ) as f : NEW_LINE INDENT data = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT data . append ( f . read ( ) ) NEW_LINE DEDENT DEDENT map = [ [ True ] * N for i in range ( N ) ] NEW_LINE for y in range ( N ) : NEW_LINE INDENT for x in range ( N ) : NEW_LINE INDENT map [ y ] [ x ] = data [ y ] [ x ] == '1' NEW_LINE DEDENT DEDENT print ( solve ( map ) ) NEW_LINE if len ( data ) > 0 : NEW_LINE INDENT data = [ ] NEW_LINE DEDENT return data NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT return ' ' . join ( data ) NEW_LINE DEDENT return main ( ) NEW_LINE DEDENT
def gf_div ( arr , n ) : NEW_LINE INDENT if n == 0 or n == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i - 1 ] > arr [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def candies ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE x = np . random . rand ( a , a ) NEW_LINE x . sort ( ) NEW_LINE s = 0 NEW_LINE for i in range ( a ) : NEW_LINE INDENT s += abs ( x [ i ] - x [ 0 ] ) NEW_LINE DEDENT print ( s ) NEW_LINE DEDENT
def print_k_distinct ( arr , n , k ) : NEW_LINE INDENT h = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in h : NEW_LINE INDENT h [ arr [ i ] ] = h [ arr [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT h [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT if len ( h ) < k : NEW_LINE INDENT return - 1 NEW_LINE DEDENT dist_count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if h [ arr [ i ] ] == 1 : NEW_LINE INDENT dist_count += 1 NEW_LINE DEDENT if dist_count == k : NEW_LINE INDENT return arr [ i ] NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def GFG ( f ) : NEW_LINE INDENT f [ 0 ] = 0 NEW_LINE f [ 1 ] = 1 NEW_LINE for i in range ( 2 , 59 + 1 ) : NEW_LINE INDENT f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 NEW_LINE DEDENT def find_last_digit ( n ) : NEW_LINE INDENT f = list ( f ) NEW_LINE f . sort ( ) NEW_LINE index = int ( n % 60. ) NEW_LINE return f [ index ] NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT global n NEW_LINE ob = GFG ( ) NEW_LINE n = 1 NEW_LINE print ( ob . find_last_digit ( n ) ) NEW_LINE n = 61 NEW_LINE print ( ob . find_last_digit ( n ) ) NEW_LINE n = 7 NEW_LINE print ( ob . find_last_digit ( n ) ) NEW_LINE n = 67 NEW_LINE print ( ob . find_last_digit ( n ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT data = string . strip ( ) NEW_LINE num_1 = int ( data ) NEW_LINE data = string . strip ( ) NEW_LINE num_2 = int ( data ) NEW_LINE data = string . strip ( ) NEW_LINE num_3 = int ( data ) NEW_LINE if num_1 == 7 : NEW_LINE INDENT if num_2 == 5 and num_3 == 5 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT elif num_2 == 7 : NEW_LINE INDENT if num_1 == 5 and num_3 == 5 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT elif num_3 == 7 : NEW_LINE INDENT if num_2 == 5 and num_1 == 5 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE z = int ( sys . stdin . readline ( ) ) NEW_LINE w = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT print ( abs ( w - a [ 0 ] ) ) NEW_LINE return NEW_LINE DEDENT ans1 = abs ( a [ n - 2 ] - a [ n - 1 ] ) NEW_LINE ans2 = abs ( w - a [ n - 1 ] ) NEW_LINE print ( max ( ans1 , ans2 ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT print ( ' Error ▁ running ▁ % s ' % ( ' ▁ ' . join ( a ) ) ) NEW_LINE return NEW_LINE DEDENT DEDENT
def count_ele_less_equal ( arr1 , arr2 , m , n ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( m ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if arr2 [ j ] <= arr1 [ i ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT sys . stdout . write ( " % d ▁ " % count ) NEW_LINE DEDENT return m NEW_LINE DEDENT
def maximum_of_maximums_of_minimums ( ) : NEW_LINE INDENT import sys NEW_LINE from math import sin , cos , pi NEW_LINE from math import pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi ,
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE name1 , name2 = string . split ( " ▁ " ) [ 0 ] , string . split ( " ▁ " ) [ 0 ] NEW_LINE print ( name1 , name2 ) NEW_LINE n = len ( sys . argv ) NEW_LINE while True : NEW_LINE INDENT s1 , s2 = string . split ( " ▁ " ) [ 0 ] , string . split ( " ▁ " ) [ 1 ] NEW_LINE if s1 == name1 : NEW_LINE INDENT name1 = s2 NEW_LINE DEDENT if s1 == name2 : NEW_LINE INDENT name2 = s2 NEW_LINE DEDENT print ( name1 , name2 ) NEW_LINE n -= 1 NEW_LINE if not n : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT a = [ 0 ] * n NEW_LINE p = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = sys . stdin . readline ( ) - 1 NEW_LINE p [ a [ i ] ] = i NEW_LINE DEDENT x = sorted ( a ) NEW_LINE l = [ 0 ] * n NEW_LINE r = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT x . append ( p [ i ] ) NEW_LINE if x [ 0 ] == p [ i ] : NEW_LINE INDENT l [ i ] = p [ i ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT lower = x . lower ( p [ i ] ) NEW_LINE l [ i ] = p [ i ] - lower NEW_LINE DEDENT if x [ 0 ] == p [ i ] : NEW_LINE INDENT r [ i ] = n - p [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT high = x . higher ( p [ i ] ) NEW_LINE r [ i ] = high - p [ i ] NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans += int ( l [ i ] ) * r [ i ] * ( i + 1 ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def LPS ( x , y ) : return ( x if x > y else y ) NEW_LINE def lps ( seq ) : NEW_LINE INDENT n = len ( seq ) NEW_LINE i , j , cl = 0 , 0 , 0 NEW_LINE L = [ [ 0 ] * n for i in range ( n ) ] NEW_LINE for cl in range ( 2 , n + 1 ) : NEW_LINE INDENT for i in range ( n - cl + 1 ) : NEW_LINE INDENT j = i + cl - 1 NEW_LINE if seq [ i ] == seq [ j ] and cl == 2 : NEW_LINE INDENT L [ i ] [ j ] = 2 NEW_LINE DEDENT elif seq [ i ] == seq [ j ] : NEW_LINE INDENT L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return L [ 0 ] [ n - 1 ] NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT seq = ' GEEKSFORGEEKS ' NEW_LINE n = len ( seq ) NEW_LINE print ( ' The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ % d ' % lps ( seq ) ) NEW_LINE DEDENT return lps ( seq ) NEW_LINE DEDENT
def find_consecutive ( N ) : NEW_LINE INDENT for last in range ( 1 , N ) : NEW_LINE INDENT for first in range ( last ) : NEW_LINE INDENT if 2 * N == ( last - first ) * ( last + first + 1 ) : NEW_LINE INDENT print ( ' % d ▁ = ▁ ' % N , end = ' ▁ ' ) NEW_LINE print_consecutive ( last , first + 1 ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT print ( ' - 1' , end = ' ▁ ' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE if not sys . stdin . isatty ( ) : NEW_LINE INDENT sys . stdin . write ( ' no ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT else : NEW_LINE INDENT if not sys . stdin . isatty ( ) : NEW_LINE INDENT sys . stdin . write ( ' no ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT DEDENT DEDENT
def __gcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not a or not b : NEW_LINE INDENT return 0 NEW_LINE DEDENT if a == b : NEW_LINE INDENT return a NEW_LINE DEDENT if a > b : NEW_LINE INDENT return math . gcd ( a - b , b ) NEW_LINE DEDENT return math . gcd ( a , b - a ) NEW_LINE DEDENT def NumberOfSquares ( x , y ) : NEW_LINE INDENT s = math . gcd ( x , y ) NEW_LINE ans = ( x * y ) / ( s * s ) NEW_LINE return ans NEW_LINE DEDENT
def is_alphabatic_order ( s ) : NEW_LINE INDENT import string NEW_LINE n = len ( s ) NEW_LINE c = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT c . append ( s [ i ] ) NEW_LINE DEDENT c . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if c [ i ] != s [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def GFG ( arr , n , k ) : NEW_LINE INDENT global j , max NEW_LINE for i in range ( 0 , n - k + 1 ) : NEW_LINE INDENT max = arr [ i ] NEW_LINE for j in range ( 1 , k ) : NEW_LINE INDENT if arr [ i + j ] > max : NEW_LINE INDENT max = arr [ i + j ] NEW_LINE DEDENT DEDENT print ( max , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import time NEW_LINE global graph NEW_LINE global visited NEW_LINE global color NEW_LINE global one NEW_LINE global bipartite NEW_LINE global count NEW_LINE global mujun NEW_LINE def dfs ( a , c ) : NEW_LINE INDENT if visited [ a ] : NEW_LINE INDENT if color [ a ] >= 0 and color [ a ] != c : NEW_LINE INDENT mujun = True NEW_LINE DEDENT return 0 NEW_LINE DEDENT visited [ a ] = True NEW_LINE color [ a ] = c NEW_LINE total = 1 NEW_LINE for b in graph [ a ] : NEW_LINE INDENT total += dfs ( b , 1 - c ) NEW_LINE DEDENT return total NEW_LINE DEDENT def dfs ( a , c ) : NEW_LINE INDENT try : NEW_LINE INDENT n , m = int ( a ) , int ( c ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT graph = [ [ ] ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT graph . append ( [ ] ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT u , v = int ( a ) - 1 , int ( c ) - 1 NEW_LINE graph [ u ] . append ( v ) NEW_LINE graph [ v ] . append ( u ) NEW_LINE DEDENT visited = [ False ] NEW_LINE color = [ False ] * n NEW_LINE color = [ False ] * n NEW_LINE color [ False ] = - 1 NEW_LINE one = 0 NEW_LINE bipartite = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if visited [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT count += 1 NEW_LINE mujun = False NEW_LINE kind = dfs ( i , 0 ) NEW_LINE if kind == 1 : NEW_LINE INDENT one += 1 NEW_LINE DEDENT elif not mujun : NEW_LINE INDENT bipartite += 1 NEW_LINE DEDENT DEDENT total = one * ( 2 * n - one ) NEW_LINE total += ( count - one ) ** 2 NEW_LINE total += bipartite ** 2 NEW_LINE print ( total ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT time . sleep ( 1 ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def _import ( ) : NEW_LINE INDENT from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from math import pow as f NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Main ( sys . argv [ 1 ] ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . x = None NEW_LINE self . y = None NEW_LINE DEDENT def __lt__ ( self , other ) : NEW_LINE INDENT return self . x < other . x NEW_LINE DEDENT def __gt__ ( self , other ) : NEW_LINE INDENT return self . y < other . y NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . x == other . x == other . y == other . x NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . y != other . y NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . x == other . x == other . y == other . y == other . x == other . y == other . y NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . x == other . x == other . x == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . y NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . x == other . x == other . x == other . y == other . x == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y == other . x == other . y == other . y == other . x == other . y == other . y == other . x == other . y . x == other . y . y == other . x NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . x == other . x == other . x == other . x and self . y == other . y == other . y NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . x == other . x and self . y == other .
def main ( ) : NEW_LINE INDENT import string NEW_LINE def comp ( a , b ) : NEW_LINE INDENT for i , c in enumerate ( a ) : NEW_LINE INDENT if c < b [ i ] : NEW_LINE INDENT return - 1 + ( i % 2 ) * 2 NEW_LINE DEDENT elif c > b [ i ] : NEW_LINE INDENT return 1 - ( i % 2 ) * 2 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT sc = string . split ( a ) NEW_LINE n , m = sc [ 0 ] , sc [ 1 ] NEW_LINE a = [ ] NEW_LINE ids = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sc . strip ( ) ) NEW_LINE ids [ a [ i ] ] = i + 1 NEW_LINE DEDENT a . sort ( comp ) NEW_LINE for x in a : NEW_LINE INDENT print ( ids [ x ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def pre_process ( substrings , s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT dup = " " NEW_LINE for j in range ( i , n ) : NEW_LINE INDENT dup += s [ j ] NEW_LINE count += 1 NEW_LINE DEDENT DEDENT substrings = list ( substrings ) NEW_LINE for i in range ( len ( substrings ) - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , len ( substrings ) ) : NEW_LINE INDENT if substrings [ i ] > substrings [ j ] : NEW_LINE INDENT temp = substrings [ i ] NEW_LINE substrings [ i ] = substrings [ j ] NEW_LINE substrings [ j ] = temp NEW_LINE DEDENT DEDENT DEDENT DEDENT def main ( args ) : NEW_LINE INDENT s = " geek " NEW_LINE substrings = [ ] NEW_LINE pre_process ( substrings , s ) NEW_LINE queries = [ 1 , 5 , 10 ] NEW_LINE q = len ( queries ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT print ( substrings [ queries [ i ] - 1 ] ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT w = sys . stdin . tell ( ) NEW_LINE h = sys . stdin . tell ( ) NEW_LINE if w == 0 and h == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' % d ▁ % d ' % ( w , h ) ) NEW_LINE return 1 NEW_LINE DEDENT d = 0 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE c = None NEW_LINE while True : NEW_LINE INDENT s = sys . stdin . read ( 1 ) NEW_LINE c = s [ 0 ] NEW_LINE if c == ' S ' : NEW_LINE INDENT print ( ( x + 1 ) , ( y + 1 ) ) NEW_LINE break NEW_LINE DEDENT elif c == ' R ' : NEW_LINE INDENT d += 1 NEW_LINE if d == 4 : NEW_LINE INDENT d = 0 NEW_LINE DEDENT DEDENT elif c == ' L ' : NEW_LINE INDENT d -= 1 NEW_LINE if d == - 1 : NEW_LINE INDENT d = 3 NEW_LINE DEDENT DEDENT elif ( c == ' F ' and d == 0 ) or ( c == ' B ' and d == 2 ) : NEW_LINE INDENT t = sys . stdin . read ( 1 ) NEW_LINE y += t NEW_LINE if y > h - 1 : NEW_LINE INDENT y = h - 1 NEW_LINE DEDENT DEDENT elif ( c == ' F ' and d == 1 ) or ( c == ' B ' and d == 3 ) : NEW_LINE INDENT t = sys . stdin . read ( 1 ) NEW_LINE x += t NEW_LINE if x > w - 1 : NEW_LINE INDENT x = w - 1 NEW_LINE DEDENT DEDENT elif ( c == ' F ' and d == 2 ) or ( c == ' B ' and d == 0 ) : NEW_LINE INDENT t = sys . stdin . read ( 1 ) NEW_LINE y -= t NEW_LINE if y < 0 : NEW_LINE INDENT y = 0 NEW_LINE DEDENT DEDENT elif ( c == ' F ' and d == 3 ) or ( c == ' B ' and d == 1 ) : NEW_LINE INDENT t = sys . stdin . read ( 1 ) NEW_LINE x -= t NEW_LINE if x < 0 : NEW_LINE INDENT x = 0 NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT data = ' ' . join ( data ) NEW_LINE count = 0 NEW_LINE total = 0 NEW_LINE for c in data : NEW_LINE INDENT if c == ' x ' : NEW_LINE INDENT count += 1 NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE INDENT if count >= 3 : NEW_LINE INDENT total += count - 2 NEW_LINE count = 0 NEW_LINE DEDENT count = 0 NEW_LINE DEDENT DEDENT if count >= 3 : NEW_LINE INDENT total += count - 2 NEW_LINE count = 0 NEW_LINE DEDENT print ( total ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE f = open ( ' / etc / init . d / ' ) NEW_LINE while True : NEW_LINE INDENT a = f . readline ( ) NEW_LINE num = a . strip ( ) . split ( ' ▁ ' ) NEW_LINE if num [ 0 ] == '0' : NEW_LINE INDENT break NEW_LINE DEDENT A , B = 0 , 0 NEW_LINE for c in num [ 1 : ] : NEW_LINE INDENT if c == ' A ' : NEW_LINE INDENT A += 1 NEW_LINE DEDENT else : NEW_LINE INDENT B += 1 NEW_LINE DEDENT DEDENT if A > B : NEW_LINE INDENT A += 1 NEW_LINE DEDENT else : NEW_LINE INDENT B += 1 NEW_LINE DEDENT print ( ' % d ▁ % d ' % ( A , B ) ) NEW_LINE DEDENT DEDENT
def fact ( N ) : NEW_LINE INDENT import math NEW_LINE import random NEW_LINE product = 1 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT product = product * i NEW_LINE DEDENT return product NEW_LINE DEDENT
def longest_sub_array ( arr , n ) : NEW_LINE INDENT is_zero_present = False NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == 0 : NEW_LINE INDENT is_zero_present = True NEW_LINE break NEW_LINE DEDENT DEDENT if is_zero_present : NEW_LINE INDENT return n NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT t = 0 NEW_LINE DEDENT for i in range ( t ) : NEW_LINE INDENT k = sys . stdin . read ( ) NEW_LINE x = sys . stdin . read ( ) NEW_LINE f = k * 9 NEW_LINE for y in range ( x , 9 ) : NEW_LINE INDENT f -= 1 NEW_LINE DEDENT print ( f ) NEW_LINE DEDENT DEDENT
def maximum_area ( l , b , x , y ) : NEW_LINE INDENT global left , right , above , below NEW_LINE left = x * b NEW_LINE right = ( l - x - 1 ) * b NEW_LINE above = l * y NEW_LINE below = ( b - y - 1 ) * l NEW_LINE print ( max ( max ( left , right ) , max ( above , below ) ) ) NEW_LINE DEDENT
def GFG ( data , n ) : NEW_LINE INDENT NO_OF_CHARS = 256 NEW_LINE count = [ 0 ] * NO_OF_CHARS NEW_LINE for c in data : NEW_LINE INDENT count [ ord ( c ) ] += 1 NEW_LINE DEDENT max_distinct = 0 NEW_LINE for c in data : NEW_LINE INDENT if c in count : NEW_LINE INDENT max_distinct += 1 NEW_LINE DEDENT DEDENT return max_distinct NEW_LINE DEDENT def smallest_substr_max_distict_char ( data ) : NEW_LINE INDENT n = len ( data ) NEW_LINE max_distinct = max_distinct_char ( data , n ) NEW_LINE minl = n NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT subs = None NEW_LINE if i < j : NEW_LINE INDENT subs = data [ i : j ] NEW_LINE DEDENT else : NEW_LINE INDENT subs = data [ j : i ] NEW_LINE DEDENT subs_lenght = len ( subs ) NEW_LINE sub_distinct_char = max_distinct_char ( subs , subs_lenght ) NEW_LINE if subs_lenght < minl and max_distinct == sub_distinct_char : NEW_LINE INDENT minl = subs_lenght NEW_LINE DEDENT DEDENT DEDENT return minl NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT data = ' AABBBCBB ' NEW_LINE data = smallest_substr_max_distict_char ( data ) NEW_LINE print ( ' The ▁ length ▁ of ▁ the ▁ smallest ▁ substring ▁ consisting ▁ of ▁ maximum ▁ distinct ▁ characters ▁ : ▁ % d ' % data ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def aver ( arr ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in arr : NEW_LINE INDENT sum = sum + i NEW_LINE DEDENT return sum / len ( arr ) NEW_LINE DEDENT def fac ( x ) : NEW_LINE INDENT sum = 1 NEW_LINE while x > 0 : NEW_LINE INDENT sum = sum * x NEW_LINE x = x - 1 NEW_LINE DEDENT return sum NEW_LINE DEDENT def comb ( x , y ) : NEW_LINE INDENT sum = 0 NEW_LINE sum = fac ( x ) NEW_LINE temp = ( fac ( y ) * fac ( x - y ) ) NEW_LINE return sum / temp NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT with open ( ' / proc / ' ) as f : NEW_LINE INDENT n = len ( f ) NEW_LINE while n > 0 : NEW_LINE INDENT f . seek ( 0 ) NEW_LINE f . truncate ( 0 ) NEW_LINE s = f . read ( 1 ) NEW_LINE flag = True NEW_LINE for c in f : NEW_LINE INDENT if c == ' R ' : NEW_LINE INDENT if c in [ ' B ' , ' G ' ] : NEW_LINE INDENT flag = False NEW_LINE DEDENT DEDENT if c == ' R ' : NEW_LINE INDENT if c in [ ' B ' , ' G ' ] : NEW_LINE INDENT flag = False NEW_LINE DEDENT DEDENT DEDENT if flag : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT n = n - 1 NEW_LINE DEDENT DEDENT DEDENT return main NEW_LINE DEDENT
def find_number_of_even_cells ( n , q , size ) : NEW_LINE INDENT row = [ 0 ] * n NEW_LINE col = [ 0 ] * n NEW_LINE for i in range ( size ) : NEW_LINE INDENT x = q [ i ] [ 0 ] NEW_LINE y = q [ i ] [ 1 ] NEW_LINE row [ x - 1 ] += 1 NEW_LINE col [ y - 1 ] += 1 NEW_LINE DEDENT r1 , r2 = 0 , 0 NEW_LINE c1 , c2 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if row [ i ] % 2 == 0 : NEW_LINE INDENT r1 += 1 NEW_LINE DEDENT if row [ i ] % 2 == 1 : NEW_LINE INDENT r2 += 1 NEW_LINE DEDENT if col [ i ] % 2 == 0 : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT if col [ i ] % 2 == 1 : NEW_LINE INDENT c2 += 1 NEW_LINE DEDENT DEDENT count = r1 * c1 + r2 * c2 NEW_LINE return count NEW_LINE DEDENT
def check_type ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE if arr [ 0 ] <= arr [ 1 ] <= arr [ n - 2 ] <= arr [ n - 1 ] : NEW_LINE INDENT print ( " Increasing " ) NEW_LINE DEDENT elif arr [ 0 ] >= arr [ 1 ] and arr [ n - 2 ] >= arr [ n - 1 ] : NEW_LINE INDENT print ( " Decreasing " ) NEW_LINE DEDENT elif arr [ 0 ] <= arr [ 1 ] and arr [ n - 2 ] >= arr [ n - 1 ] : NEW_LINE INDENT print ( " Increasing ▁ then ▁ decreasing " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Decreasing ▁ then ▁ increasing " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE bf = sys . stdin . read ( ) NEW_LINE t = int ( bf . strip ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( bf . strip ( ) ) NEW_LINE arr = bf . strip ( ) NEW_LINE arr2 = [ ] NEW_LINE for j in range ( 0 , n - 1 ) : NEW_LINE INDENT arr2 . append ( arr [ j ] ) NEW_LINE DEDENT for j in range ( 0 , n - 1 ) : NEW_LINE INDENT if j % 2 == 0 : NEW_LINE INDENT arr2 . append ( '0' ) NEW_LINE DEDENT else : NEW_LINE INDENT arr2 . append ( '1' ) NEW_LINE DEDENT DEDENT cur = 0 NEW_LINE for j in range ( 0 , n - 1 ) : NEW_LINE INDENT if arr [ j ] == arr2 [ j ] : NEW_LINE INDENT continue NEW_LINE DEDENT for k in range ( j , n - 1 ) : NEW_LINE INDENT if arr [ k ] == arr2 [ k ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT cur += 1 NEW_LINE j = k - 1 NEW_LINE DEDENT ans = sys . maxsize NEW_LINE ans = min ( ans , cur ) NEW_LINE for j in range ( 0 , n - 1 ) : NEW_LINE INDENT if j % 2 == 1 : NEW_LINE INDENT arr2 [ j ] = '0' NEW_LINE DEDENT else : NEW_LINE INDENT arr2 [ j ] = '1' NEW_LINE DEDENT DEDENT cur = 0 NEW_LINE for j in range ( 0 , n - 1 ) : NEW_LINE INDENT if arr [ j ] == arr2 [ j ] : NEW_LINE INDENT continue NEW_LINE DEDENT for k in range ( j , n - 1 ) : NEW_LINE INDENT if arr [ k ] == arr2 [ k ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT cur += 1 NEW_LINE j = k - 1 NEW_LINE DEDENT ans = min ( ans , cur ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT
def code_forces ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import random NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE from numpy . math import sin , cos , sin , cos , tan , cot , cot = np NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random . random ( ( 2 , 2 , 2 , 2 ) ) NEW_LINE a = np . random .
def number_of_ways ( x ) : NEW_LINE INDENT import numpy as np NEW_LINE dp = np . zeros ( x + 1 ) NEW_LINE dp [ 0 ] = dp [ 1 ] = 1 NEW_LINE for i in range ( 2 , x + 1 ) : NEW_LINE INDENT dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] NEW_LINE DEDENT return dp [ x ] NEW_LINE DEDENT
def gf_rearrange ( arr , n ) : NEW_LINE INDENT j , temp = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] < 0 : NEW_LINE INDENT if i != j : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE DEDENT j += 1 NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT arr = [ - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE rearrange ( arr , n ) NEW_LINE print ( str ( arr ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def centered_square_num ( n ) : NEW_LINE INDENT import sys NEW_LINE n = 7 NEW_LINE print ( ' % dth ▁ Centered ' % n + ' ▁ square ▁ number : ▁ % d ' % centered_square_num ( n ) ) NEW_LINE DEDENT
def teest ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE class teest ( subprocess . Popen ) : NEW_LINE INDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self . communicate ) . communicate ( ) [ 0 ] NEW_LINE DEDENT def communicate ( self , * args ) : NEW_LINE INDENT return subprocess . Popen ( self .
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE n = len ( sys . argv ) NEW_LINE nums = [ np . random . randint ( 0 , n , n ) for i in range ( n ) ] NEW_LINE nums . sort ( ) NEW_LINE first_half = second_half = 0 NEW_LINE length = n // 2 NEW_LINE for i in range ( length ) : NEW_LINE INDENT first_half += nums [ i ] NEW_LINE DEDENT for i in range ( length , n ) : NEW_LINE INDENT second_half += nums [ i ] NEW_LINE DEDENT result = ( first_half ** 2 ) + ( second_half ** 2 ) NEW_LINE print ( result ) NEW_LINE DEDENT
def max_subarray_sum ( arr , size ) : NEW_LINE INDENT max_so_far = arr [ 0 ] NEW_LINE curr_max = arr [ 0 ] NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT curr_max = max ( arr [ i ] , curr_max + arr [ i ] ) NEW_LINE max_so_far = max ( max_so_far , curr_max ) NEW_LINE DEDENT return max_so_far NEW_LINE DEDENT def len_of_long_subarr_with_given_sum ( arr , n , k ) : NEW_LINE INDENT um = { } NEW_LINE sum , max_len = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE if sum == k : NEW_LINE INDENT max_len = i + 1 NEW_LINE DEDENT if sum in um : NEW_LINE INDENT um [ sum ] = i NEW_LINE DEDENT if sum - k in um : NEW_LINE INDENT if max_len < ( i - um [ sum - k ] ) : NEW_LINE INDENT max_len = i - um [ sum - k ] NEW_LINE DEDENT DEDENT DEDENT return max_len NEW_LINE DEDENT def len_long_subarr_with_max_sum ( arr , n ) : NEW_LINE INDENT max_sum = max_subarray_sum ( arr , n ) NEW_LINE return len_of_long_subarr_with_given_sum ( arr , n , max_sum ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 5 , - 2 , - 1 , 3 , - 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Length ▁ of ▁ longest ▁ subarray ▁ " " having ▁ maximum ▁ sum ▁ = ▁ % d " % len_long_subarr_with_max_sum ( arr , n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE import pickle NEW_LINE pickle = pickle NEW_LINE pickle = pickle NEW_LINE pickle = pickle NEW_LINE # ▁ Make ▁ sure ▁ we ▁ get ▁ a ▁ pickle ▁ file ▁ available ENDCOM try : NEW_LINE INDENT pickle NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT pickle = pickle NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle NEW_LINE DEDENT if sys . version_info [ 1 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle NEW_LINE DEDENT if sys . version_info [ 2 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . load ( sys . stdout ) NEW_LINE DEDENT if sys . version_info [ 3 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . loads ( pickle ) NEW_LINE DEDENT if sys . version_info [ 3 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . load ( sys . stdout ) NEW_LINE DEDENT if sys . version_info [ 3 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . loads ( pickle . dumps ( pickle ) ) NEW_LINE DEDENT if sys . version_info [ 3 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . loads ( pickle . dumps ( pickle ) ) NEW_LINE DEDENT if sys . version_info [ 3 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . loads ( pickle . dumps ( pickle ) ) NEW_LINE DEDENT if sys . version_info [ 3 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . loads ( pickle . dumps ( pickle ) ) NEW_LINE DEDENT if sys . version_info [ 3 ] < 3 : NEW_LINE INDENT import pickle NEW_LINE pickle = pickle . loads ( pickle . dumps ( pickle . loads ( pickle . dumps ( pickle ) ) ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( dividend , divisor , start , end ) : NEW_LINE INDENT if start > end : NEW_LINE INDENT return [ 0 , dividend ] NEW_LINE DEDENT mid = start + ( end - start ) // 2 NEW_LINE n = dividend - divisor * mid NEW_LINE if n > divisor : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT elif n < 0 : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT if n == divisor : NEW_LINE INDENT mid += 1 NEW_LINE n = 0 NEW_LINE DEDENT return [ mid , n ] NEW_LINE DEDENT return [ dividend , divisor , start , end ] NEW_LINE DEDENT
def omar ( ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE class omar ( math ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . size = len ( self . size ) NEW_LINE min , max = 0 , 0 NEW_LINE arr = [ ] NEW_LINE for i in range ( self . size ) : NEW_LINE INDENT arr . append ( self . size ) NEW_LINE DEDENT for i in range ( self . size ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT min = abs ( arr [ i ] - arr [ i + 1 ] ) NEW_LINE max = abs ( arr [ i ] - arr [ self . size - 1 ] ) NEW_LINE DEDENT elif i == self . size - 1 : NEW_LINE INDENT min = abs ( arr [ i ] - arr [ i - 1 ] ) NEW_LINE max = abs ( arr [ i ] - arr [ 0 ] ) NEW_LINE DEDENT elif i != 0 and i != self . size - 1 : NEW_LINE INDENT min = min ( abs ( arr [ i ] - arr [ i - 1 ] ) , abs ( arr [ i ] - arr [ i + 1 ] ) ) NEW_LINE max = max ( abs ( arr [ i ] - arr [ self . size - 1 ] ) , abs ( arr [ i ] - arr [ 0 ] ) ) NEW_LINE DEDENT print ( min , max ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE n = int ( sys . stdin . read ( ) ) NEW_LINE disk_size = sys . maxsize * 8 NEW_LINE sounds = [ None ] * n NEW_LINE sounds . sort ( ) NEW_LINE distinctvals = [ 0 ] * n NEW_LINE distinctamt = [ 0 ] * n NEW_LINE k = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i == 0 or sounds [ i ] > sounds [ i - 1 ] : NEW_LINE INDENT distinctvals [ k ] = sounds [ i ] NEW_LINE distinctamt [ k ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT distinctamt [ k ] += 1 NEW_LINE DEDENT DEDENT k += 1 NEW_LINE answer = n NEW_LINE curramt = distinctamt [ 0 ] NEW_LINE for i , j in enumerate ( sorted ( distinctamt ) ) : NEW_LINE INDENT while j < i or ( j < k - 1 and n * lg ( j + 1 - i + 1 ) <= disk_size ) : NEW_LINE INDENT j += 1 NEW_LINE curramt += distinctamt [ j ] NEW_LINE DEDENT answer = min ( answer , n - curramt ) NEW_LINE DEDENT print ( answer ) NEW_LINE def lg ( n ) : NEW_LINE INDENT res = 0 NEW_LINE while n > ( 1 << res ) : NEW_LINE INDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def towerOfHanoi ( n , fromRod , toRod , auxRod1 , auxRod2 ) : NEW_LINE INDENT if not n : NEW_LINE INDENT return NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT print ( " Move ▁ disk ▁ % d ▁ from ▁ rod ▁ % d ▁ to ▁ rod ▁ % d " % ( n , fromRod , toRod ) ) NEW_LINE return NEW_LINE DEDENT towerOfHanoi ( n - 2 , fromRod , auxRod1 , auxRod2 , toRod ) NEW_LINE print ( " Move ▁ disk ▁ % d ▁ from ▁ rod ▁ % d ▁ to ▁ rod ▁ % d " % ( n - 1 , fromRod , auxRod2 ) ) NEW_LINE print ( " Move ▁ disk ▁ % d ▁ from ▁ rod ▁ % d ▁ to ▁ rod ▁ % d " % ( n , fromRod , auxRod2 ) ) NEW_LINE print ( " Move ▁ disk ▁ % d ▁ from ▁ rod ▁ % d ▁ to ▁ rod ▁ % d " % ( n - 1 , auxRod2 , auxRod2 ) ) NEW_LINE towerOfHanoi ( n - 2 , auxRod1 , toRod , fromRod , auxRod2 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE r = sys . stdin . read ( ) NEW_LINE n = r . strip ( ) NEW_LINE res = " " NEW_LINE for c in n : NEW_LINE INDENT if c == " > " : NEW_LINE INDENT res += "1000" NEW_LINE DEDENT elif c == " < " : NEW_LINE INDENT res += "1001" NEW_LINE DEDENT elif c == " + " : NEW_LINE INDENT res += "1010" NEW_LINE DEDENT elif c == " - " : NEW_LINE INDENT res += "1011" NEW_LINE DEDENT elif c == " . " : NEW_LINE INDENT res += "1100" NEW_LINE DEDENT elif c == " , " : NEW_LINE INDENT res += "1101" NEW_LINE DEDENT elif c == " [ " : NEW_LINE INDENT res += "1110" NEW_LINE DEDENT elif c == " ] " : NEW_LINE INDENT res += "1111" NEW_LINE DEDENT DEDENT k = 0 NEW_LINE m = 0 NEW_LINE for c in res [ : - 1 ] : NEW_LINE INDENT y = int ( " % d " % ord ( c ) ) NEW_LINE m += int ( ( pow ( 2 , k ) % 1000003 ) * y ) % 1000003 NEW_LINE k += 1 NEW_LINE DEDENT print ( m % 1000003 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT import simplejson as json NEW_LINE DEDENT except : NEW_LINE INDENT import simplejson as json NEW_LINE DEDENT dic = { } NEW_LINE count = len ( json . loads ( sys . stdin . read ( ) ) ) NEW_LINE for i in range ( count ) : NEW_LINE INDENT command = json . loads ( sys . stdin . read ( ) ) [ 0 ] NEW_LINE if command == 0 : NEW_LINE INDENT dic [ json . loads ( sys . stdin . read ( ) ) [ 0 ] ] = json . loads ( sys . stdin . read ( ) ) [ 0 ] NEW_LINE DEDENT elif command == 1 : NEW_LINE INDENT key = json . loads ( sys . stdin . read ( ) ) [ 0 ] NEW_LINE if dic . get ( key ) is not None : NEW_LINE INDENT print ( dic [ key ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT DEDENT elif command == 2 : NEW_LINE INDENT del dic [ json . loads ( sys . stdin . read ( ) ) [ 0 ] ] NEW_LINE DEDENT DEDENT return dic NEW_LINE DEDENT
def min_sum ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE sum , prev = arr [ 0 ] , arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i ] <= prev : NEW_LINE INDENT prev = prev + 1 NEW_LINE sum = sum + prev NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + arr [ i ] NEW_LINE prev = arr [ i ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def find_n ( k ) : NEW_LINE INDENT import sys NEW_LINE if k == 0 : NEW_LINE INDENT ans = 3 NEW_LINE DEDENT if k == 1 : NEW_LINE INDENT ans = 1 NEW_LINE DEDENT elif k % 4 == 0 : NEW_LINE INDENT ans = k NEW_LINE DEDENT elif k % 4 == 3 : NEW_LINE INDENT ans = k - 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = - 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT
def subset_XOR ( arr , n , K ) : NEW_LINE INDENT max_ele = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i ] > max_ele : NEW_LINE INDENT max_ele = arr [ i ] NEW_LINE DEDENT DEDENT m = ( 1 << int ( math . log ( max_ele ) / math . log ( 2 ) + 1 ) ) - 1 NEW_LINE dp = np . zeros ( ( n + 1 , m + 1 , n + 1 ) ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , m + 1 ) : NEW_LINE INDENT for k in range ( 0 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] = 0 NEW_LINE DEDENT DEDENT DEDENT for i in range ( 0 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , m + 1 ) : NEW_LINE INDENT for k in range ( 0 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] NEW_LINE if k != 0 : NEW_LINE INDENT dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ] [ k - 1 ] NEW_LINE DEDENT DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT ans += dp [ n ] [ K ] [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT D = int ( sys . stdin . readline ( ) ) NEW_LINE G = int ( sys . stdin . readline ( ) ) NEW_LINE p = [ 0 ] * D NEW_LINE c = [ 0 ] * D NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT min = 1001 NEW_LINE count = 0 NEW_LINE ans = 0 NEW_LINE a = 4 NEW_LINE for i in range ( pow ( 2 , D ) ) : NEW_LINE INDENT bit = ' % % d % s ' % ( D , int ( i ) ) . replace ( ' ▁ ' , '0' ) NEW_LINE N = len ( bit ) NEW_LINE for j in range ( N ) : NEW_LINE INDENT if bit [ j ] == '1' : NEW_LINE INDENT count += p [ j ] * ( j + 1 ) * 100 + c [ j ] NEW_LINE ans += p [ j ] NEW_LINE DEDENT DEDENT if count < G : NEW_LINE INDENT for j in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT if bit [ j ] == '0' : NEW_LINE INDENT l = p [ j ] NEW_LINE while count < G and l > 0 : NEW_LINE INDENT count += ( j + 1 ) * 100 NEW_LINE ans += 1 NEW_LINE l -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT if count >= G : NEW_LINE INDENT min = min ( ans , min ) NEW_LINE DEDENT count = 0 NEW_LINE ans = 0 NEW_LINE DEDENT print ( min ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT k = 0 NEW_LINE a = sys . stdin . read ( ) NEW_LINE b = sys . stdin . read ( ) NEW_LINE for j in range ( a ) : NEW_LINE INDENT k += sys . stdin . read ( ) NEW_LINE DEDENT if b == k : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT
def omar ( ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE class omar ( math ) : NEW_LINE INDENT def omar ( self ) : NEW_LINE INDENT return math . fabs ( self . a ) NEW_LINE DEDENT DEDENT size = math . pi NEW_LINE count = 0 NEW_LINE arr = [ ] NEW_LINE for i in range ( size ) : NEW_LINE INDENT arr . append ( math . omar ( i ) ) NEW_LINE DEDENT arr . sort ( ) NEW_LINE for i in range ( 1 , size - 1 ) : NEW_LINE INDENT if arr [ i ] > arr [ 0 ] and arr [ i ] < arr [ size - 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT
def minAbsDiff ( n ) : NEW_LINE INDENT import math NEW_LINE left = int ( math . pow ( 2 , int ( math . log ( n ) / math . log ( 2 ) ) ) ) NEW_LINE right = left * 2 NEW_LINE return min ( ( n - left ) , ( right - n ) ) NEW_LINE DEDENT
def LCIS ( arr1 , n , arr2 , m ) : NEW_LINE INDENT import numpy as np NEW_LINE table = np . zeros ( m ) NEW_LINE for j in range ( m ) : NEW_LINE INDENT table [ j ] = 0 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT current = 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT if arr1 [ i ] == arr2 [ j ] : NEW_LINE INDENT if current + 1 > table [ j ] : NEW_LINE INDENT table [ j ] = current + 1 NEW_LINE DEDENT if arr1 [ i ] > arr2 [ j ] : NEW_LINE INDENT if table [ j ] > current : NEW_LINE INDENT current = table [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT result = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if table [ i ] > result : NEW_LINE INDENT result = table [ i ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT
def count_set_bits ( n ) : NEW_LINE INDENT bit_count = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT bit_count += count_set_bits_util ( i ) NEW_LINE DEDENT return bit_count NEW_LINE def count_set_bits_util ( x ) : NEW_LINE INDENT if x <= 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( 0 if x % 2 == 0 else 1 ) + count_set_bits_util ( x // 2 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 4 NEW_LINE print ( ' Total ▁ set ▁ bit ▁ count ▁ is ▁ ' , end = ' ▁ ' ) NEW_LINE print ( count_set_bits ( n ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def partition ( arr , low , high ) : NEW_LINE INDENT import sys NEW_LINE pivot = arr [ low ] NEW_LINE i , j = low - 1 , high + 1 NEW_LINE while True : NEW_LINE INDENT while True : NEW_LINE INDENT i += 1 NEW_LINE if arr [ i ] < pivot : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT while True : NEW_LINE INDENT j -= 1 NEW_LINE if arr [ j ] > pivot : NEW_LINE INDENT break NEW_LINE DEDENT if i >= j : NEW_LINE INDENT return j NEW_LINE DEDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE DEDENT DEDENT def quick_sort ( arr , low , high ) : NEW_LINE INDENT if low < high : NEW_LINE INDENT pi = partition ( arr , low , high ) NEW_LINE quick_sort ( arr , low , pi ) NEW_LINE quick_sort ( arr , pi + 1 , high ) NEW_LINE DEDENT DEDENT def print_array ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 10 , 7 , 8 , 9 , 1 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE quick_sort ( arr , 0 , n - 1 ) NEW_LINE print ( ' Sorted ▁ array : ' ) NEW_LINE print_array ( arr , n ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( array , position1 , position2 ) : NEW_LINE INDENT temp = array [ position1 ] NEW_LINE array [ position1 ] = array [ position2 ] NEW_LINE array [ position2 ] = temp NEW_LINE def partition ( arr , low , high ) : NEW_LINE INDENT pivot = arr [ high ] NEW_LINE i = ( low - 1 ) NEW_LINE for j in range ( low , high - 1 + 1 ) : NEW_LINE INDENT if arr [ j ] <= pivot : NEW_LINE INDENT i += 1 NEW_LINE swap ( arr , i , j ) NEW_LINE DEDENT DEDENT swap ( arr , i + 1 , high ) NEW_LINE return ( i + 1 ) NEW_LINE DEDENT def quicksort ( arr , low , high ) : NEW_LINE INDENT if low < high : NEW_LINE INDENT pi = partition ( arr , low , high ) NEW_LINE quicksort ( arr , low , pi - 1 ) NEW_LINE quicksort ( arr , pi + 1 , high ) NEW_LINE DEDENT DEDENT def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 10 , 7 , 8 , 9 , 1 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE quicksort ( arr , 0 , n - 1 ) NEW_LINE print ( ' Sorted ▁ array : ' ) NEW_LINE printArray ( arr , n ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( a , size ) : NEW_LINE INDENT max_so_far , max_ending_here = int ( 0 ) , 0 NEW_LINE for i in range ( size ) : NEW_LINE INDENT max_ending_here = max_ending_here + a [ i ] NEW_LINE if max_so_far < max_ending_here : NEW_LINE INDENT max_so_far = max_ending_here NEW_LINE DEDENT if max_ending_here < 0 : NEW_LINE INDENT max_ending_here = 0 NEW_LINE DEDENT DEDENT return max_so_far NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE DEDENT
def print_array ( N , SUM , K ) : NEW_LINE INDENT import sys NEW_LINE min_sum = ( N * ( N + 1 ) ) // 2 NEW_LINE max_sum = ( N * K ) - ( N * ( N - 1 ) ) // 2 NEW_LINE if min_sum > SUM or max_sum < SUM : NEW_LINE INDENT print ( " Not ▁ Possible " ) NEW_LINE return NEW_LINE DEDENT arr = [ ] NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT arr . append ( i ) NEW_LINE DEDENT sum = min_sum NEW_LINE for i in range ( N , 1 , - 1 ) : NEW_LINE INDENT x = sum + ( K - i ) NEW_LINE if x < SUM : NEW_LINE INDENT sum = sum + ( K - i ) NEW_LINE arr [ i ] = K NEW_LINE K -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT arr [ i ] += ( SUM - sum ) NEW_LINE sum = SUM NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def gf_max_items ( x , y , z ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return math NEW_LINE DEDENT
def run_tasks ( A , B ) : NEW_LINE INDENT total_time = 0 NEW_LINE while not A . empty ( ) : NEW_LINE INDENT x = A . pop ( ) NEW_LINE y = B . pop ( ) NEW_LINE if x == y : NEW_LINE INDENT A . pop ( ) NEW_LINE B . pop ( ) NEW_LINE total_time += 1 NEW_LINE DEDENT else : NEW_LINE INDENT A . pop ( ) NEW_LINE A . append ( x ) NEW_LINE total_time += 2 NEW_LINE DEDENT DEDENT return total_time NEW_LINE DEDENT
def GFG ( x0 , y0 ) : NEW_LINE INDENT c = int ( 2 * y0 * x0 ) NEW_LINE print ( ' % . 1 f ' % y0 , ' x ' , ' + ' , ' % . 1 f ' % x0 , ' y ▁ = ▁ % . 1 f ' % c ) NEW_LINE DEDENT
def main ( agrs ) : NEW_LINE INDENT import string NEW_LINE global n NEW_LINE n = len ( agrs ) NEW_LINE set = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = list ( agrs [ i ] ) NEW_LINE l = len ( s ) NEW_LINE x = [ 0 ] * 26 NEW_LINE s1 = " " NEW_LINE for c in s [ l : ] : NEW_LINE INDENT c = ord ( c ) - ord ( " a " ) NEW_LINE x [ c ] += 1 NEW_LINE DEDENT for j in range ( 26 ) : NEW_LINE INDENT if x [ j ] > 0 : NEW_LINE INDENT s1 += ( chr ( ord ( " a " ) + str ( j ) ) ) NEW_LINE DEDENT DEDENT set . add ( s1 ) NEW_LINE DEDENT print ( len ( set ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs as ufuncs NEW_LINE DEDENT
def is_any_not_palindrome ( s ) : NEW_LINE INDENT import string NEW_LINE unique = set ( s ) NEW_LINE if len ( unique ) > 1 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def test ( arr , n ) : NEW_LINE INDENT return arr [ n // 2 ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import list NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE global math NEW_LINE DEDENT
def count_subarrays ( arr , n , K ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT bitwise_or = 0 NEW_LINE for k in range ( i , j + 1 ) : NEW_LINE INDENT bitwise_or = bitwise_or | arr [ k ] NEW_LINE DEDENT if bitwise_or >= K : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def is_been_equal ( a , b , c , k ) : NEW_LINE INDENT arr = [ a , b , c ] NEW_LINE arr . sort ( ) NEW_LINE diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] NEW_LINE k = k - diff NEW_LINE if k < 0 or k % 3 != 0 : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
def GFG ( x , y ) : NEW_LINE INDENT adjacency = [ ] NEW_LINE def insert ( x , y ) : NEW_LINE INDENT adjacency [ x ] . append ( y ) NEW_LINE DEDENT def dfs ( node , leaf , vis ) : NEW_LINE INDENT leaf [ node ] = 0 NEW_LINE vis [ node ] = 1 NEW_LINE for it in adjacency [ node ] : NEW_LINE INDENT if vis [ it ] == 0 : NEW_LINE INDENT dfs ( it , leaf , vis ) NEW_LINE leaf [ node ] += leaf [ it ] NEW_LINE DEDENT DEDENT if not len ( adjacency [ node ] ) : NEW_LINE INDENT leaf [ node ] = 1 NEW_LINE DEDENT DEDENT def print_leaf ( n , leaf ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( " The ▁ node ▁ % d ▁ has ▁ % d ▁ leaf ▁ nodes \n " % ( i , leaf [ i ] ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT N = 6 NEW_LINE for i in range ( 0 , N + 1 ) : NEW_LINE INDENT adjacency . append ( [ ] ) NEW_LINE DEDENT DEDENT insert ( 1 , 2 ) NEW_LINE insert ( 1 , 3 ) NEW_LINE insert ( 3 , 4 ) NEW_LINE insert ( 3 , 5 ) NEW_LINE insert ( 3 , 6 ) NEW_LINE leaf = [ 0 ] * ( N + 1 ) NEW_LINE vis = [ 0 ] * ( N + 1 ) NEW_LINE dfs ( 1 , leaf , vis ) NEW_LINE print_leaf ( N , leaf ) NEW_LINE DEDENT
def main ( _ ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin . read ( ) NEW_LINE v = s . strip ( ) NEW_LINE n = s . find ( ' ▁ ' ) NEW_LINE for i , e in enumerate ( range ( 0 , int ( min ( len ( v ) , n ) ) ) ) : NEW_LINE INDENT if v [ i ] != '1' : NEW_LINE INDENT print ( v [ i ] ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( '1' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import re NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE s1 = list ( sys . stdin . readlines ( ) ) NEW_LINE s2 = list ( sys . stdin . readlines ( ) ) NEW_LINE if is_valid ( s1 , s2 ) == False : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT m1 = { } NEW_LINE m2 = { } NEW_LINE for c in s1 : NEW_LINE INDENT if c in m1 : NEW_LINE INDENT m1 [ c ] = m1 [ c ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT m1 [ c ] = 1 NEW_LINE DEDENT DEDENT for c in s2 : NEW_LINE INDENT if c in m2 : NEW_LINE INDENT m2 [ c ] = m2 [ c ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT m2 [ c ] = 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE hs = set ( ) NEW_LINE for c in s2 : NEW_LINE INDENT if c not in hs : NEW_LINE INDENT hs . add ( c ) NEW_LINE x1 = m1 [ c ] NEW_LINE x2 = m2 [ c ] NEW_LINE x1 = min ( x1 , x2 ) NEW_LINE ans += x1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT def is_valid ( s1 , s2 ) : NEW_LINE INDENT n1 = len ( s1 ) NEW_LINE n2 = len ( s2 ) NEW_LINE d = { } NEW_LINE for c in s1 : NEW_LINE INDENT d [ c ] = True NEW_LINE DEDENT for c in s2 : NEW_LINE INDENT if c not in d : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT DEDENT
def LCS_3Strings ( X , Y , Z , m , n , o ) : NEW_LINE INDENT L = np . zeros ( ( m + 1 , n + 1 , o + 1 ) ) NEW_LINE for i in range ( 0 , m + 1 ) : NEW_LINE INDENT for j in range ( 0 , n + 1 ) : NEW_LINE INDENT for k in range ( 0 , o + 1 ) : NEW_LINE INDENT if i == 0 or j == 0 or k == 0 : NEW_LINE INDENT L [ i ] [ j ] [ k ] = 0 NEW_LINE DEDENT elif X [ i - 1 ] == Y [ j - 1 ] and X [ i - 1 ] == Z [ k - 1 ] : NEW_LINE INDENT L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] [ k ] = max ( np . maximum ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) , L [ i ] [ j ] [ k - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return L [ m ] [ n ] [ o ] NEW_LINE DEDENT
def cf596B ( ) : NEW_LINE INDENT import math NEW_LINE n = len ( sys . stdin ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT answer = abs ( arr [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT answer += abs ( arr [ i ] - arr [ i - 1 ] ) NEW_LINE DEDENT print ( answer ) NEW_LINE DEDENT
def GFG ( n , a ) : NEW_LINE INDENT sum , c1 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE if a [ i ] == 1 : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT DEDENT if sum % 2 != 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if ( sum // 2 ) % 2 == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if c1 > 0 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE arr = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT arr . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT dp = [ 0 ] * 5 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT dp [ 1 ] = dp [ 1 ] + ( 1 if arr [ i ] == 1 else 0 ) NEW_LINE dp [ 2 ] = max ( dp [ 1 ] , dp [ 2 ] + ( 1 if arr [ i ] == 2 else 0 ) ) NEW_LINE dp [ 3 ] = max ( dp [ 2 ] , dp [ 3 ] + ( 1 if arr [ i ] == 1 else 0 ) ) NEW_LINE dp [ 4 ] = max ( dp [ 3 ] , dp [ 4 ] + ( 1 if arr [ i ] == 2 else 0 ) ) NEW_LINE DEDENT print ( dp [ 4 ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def count_evenodd ( min , max , steps ) : NEW_LINE INDENT global beven , aeven NEW_LINE beven = True , False NEW_LINE n = 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a = steps [ i ] [ 0 ] NEW_LINE b = steps [ i ] [ 1 ] NEW_LINE if not ( aeven or ( a & 1 ) > 0 ) : NEW_LINE INDENT aeven = True NEW_LINE DEDENT if beven : NEW_LINE INDENT if ( b & 1 ) > 0 : NEW_LINE INDENT beven = False NEW_LINE DEDENT DEDENT elif not ( ( a & 1 ) > 0 ) : NEW_LINE INDENT if not ( ( b & 1 ) > 0 ) : NEW_LINE INDENT beven = True NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( b & 1 ) > 0 : NEW_LINE INDENT beven = True NEW_LINE DEDENT DEDENT DEDENT if beven : NEW_LINE INDENT even = int ( max ) // 2 - int ( min - 1 ) // 2 NEW_LINE odd = 0 NEW_LINE DEDENT else : NEW_LINE INDENT even = int ( max ) // 2 - int ( min - 1 ) // 2 NEW_LINE odd = 0 NEW_LINE DEDENT if not ( beven ^ aeven ) : NEW_LINE INDENT even += max - min + 1 - int ( max ) // 2 + int ( min - 1 ) // 2 NEW_LINE DEDENT else : NEW_LINE INDENT odd += max - min + 1 - int ( max ) // 2 + int ( min - 1 ) // 2 NEW_LINE DEDENT print ( ' even ▁ = ▁ % d , ▁ odd ▁ = ▁ % d ' % ( even , odd ) ) NEW_LINE DEDENT
def JohnyLikesNumbers ( ) : NEW_LINE INDENT import math NEW_LINE n , k = math . sqrt ( math . pi ) , math . sqrt ( math . pi ) NEW_LINE print ( ( n / k + 1 ) * k ) NEW_LINE DEDENT
def print_kpfnums ( A , B , K ) : NEW_LINE INDENT prime = [ True ] * ( B + 1 ) NEW_LINE p_factors = [ 0 ] * ( B + 1 ) NEW_LINE for p in range ( 2 , B + 1 ) : NEW_LINE INDENT if p_factors [ p ] == 0 : NEW_LINE INDENT for i in range ( p , B + 1 , p ) : NEW_LINE INDENT p_factors [ i ] += 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( A , B + 1 ) : NEW_LINE INDENT if p_factors [ i ] == K : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def reverse_words ( data ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE from string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE from string NEW_LINE import string NEW_LINE import string NEW_LINE from string NEW_LINE import string NEW_LINE import string NEW_LINE from string NEW_LINE import string NEW_LINE from string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE p = [ 0 ] * n NEW_LINE only_fist_solve = 0 NEW_LINE only_second_solve = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT r = sys . stdin . readline ( ) NEW_LINE if p [ i ] == 1 and r == 0 : NEW_LINE INDENT only_fist_solve += 1 NEW_LINE DEDENT elif p [ i ] == 0 and r == 1 : NEW_LINE INDENT only_second_solve += 1 NEW_LINE DEDENT DEDENT if only_fist_solve == 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( only_second_solve + only_fist_solve ) / only_fist_solve ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE class Main ( ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . N = int ( 1e7 ) NEW_LINE self . IsPrime = False NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . IsPrime = True NEW_LINE self . IsPrime = False NEW_LINE DEDENT def IsPrime ( self ) : NEW_LINE INDENT return self . IsPrime NEW_LINE DEDENT def IsPrime ( self ) : NEW_LINE INDENT return self . IsPrime NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import re NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE np . random = np . random NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed ( 42 ) NEW_LINE np . random . seed (
def function_height ( ) : NEW_LINE INDENT import math NEW_LINE try : NEW_LINE INDENT n = math . pi NEW_LINE k = math . pi NEW_LINE print ( 1 if n >= k else ( k / n if k % n == 0 else ( k / n + 1 ) ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT DEDENT
def find_nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE class GFG ( int ) : NEW_LINE INDENT def find_nth_term ( n ) : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT n = n // 2 NEW_LINE print ( " % d \n " % int ( math . pow ( 3 , n - 1 ) ) , end = " ▁ " ) NEW_LINE DEDENT else : NEW_LINE INDENT n = ( n // 2 ) + 1 NEW_LINE print ( " % d \n " % int ( math . pow ( 2 , n - 1 ) ) , end = " ▁ " ) NEW_LINE DEDENT DEDENT DEDENT return GFG ( n ) NEW_LINE DEDENT
def count_non_increasing ( arr , n ) : NEW_LINE INDENT cnt = 0 NEW_LINE len_ = 1 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if arr [ i + 1 ] >= arr [ i ] : NEW_LINE INDENT len_ += 1 NEW_LINE DEDENT else : NEW_LINE INDENT cnt += ( ( ( len_ + 1 ) * len_ ) / 2 ) NEW_LINE len_ = 1 NEW_LINE DEDENT DEDENT if len_ > 1 : NEW_LINE INDENT cnt += ( ( ( len_ - 1 ) * len_ ) / 2 ) NEW_LINE DEDENT return cnt NEW_LINE DEDENT
def maximize ( A1 , A2 , n , x , y ) : NEW_LINE INDENT import numpy as np NEW_LINE c = np . zeros ( n ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT c [ i ] = A2 [ i ] - A1 [ i ] NEW_LINE sum += A1 [ i ] NEW_LINE DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT if c [ i ] < c [ i + 1 ] : NEW_LINE INDENT temp = c [ i ] NEW_LINE c [ i ] = c [ i + 1 ] NEW_LINE c [ i + 1 ] = temp NEW_LINE DEDENT DEDENT maxi = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += c [ i ] NEW_LINE if i + 1 >= ( n - x ) : NEW_LINE INDENT maxi = max ( sum , maxi ) NEW_LINE DEDENT DEDENT return maxi NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE s = list ( f ) NEW_LINE t = int ( s ) NEW_LINE while t > 0 : NEW_LINE INDENT s = s [ t : ] NEW_LINE x = int ( s ) NEW_LINE s = str ( x ) NEW_LINE extra = len ( s ) NEW_LINE temp = len ( s ) NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , temp ) : NEW_LINE INDENT ans += 10 NEW_LINE DEDENT ans += ( extra ) * ( extra + 1 ) / 2 NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from string import join NEW_LINE from math import pi NEW_LINE from math import sin , cos , pi NEW_LINE from math import pi NEW_LINE from math import cos , pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT r1 , r2 , c1 , c2 , d1 , d2 = select . select ( [ 0 ] , [ 0 ] , [ 0 ] , [ 0 ] ) NEW_LINE if ( c1 + c2 - r1 - r2 ) or ( d1 + d2 - r1 - r2 ) : NEW_LINE INDENT sys . stdout . write ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT flag = True NEW_LINE t , z , y , x = ( r2 - d2 + c2 ) // 2 , d2 - c2 + t , c2 - t , r1 + r2 - y - z - t NEW_LINE box = [ x , y , z , t ] NEW_LINE for gem in box : NEW_LINE INDENT if gem > 9 or gem < 1 : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT DEDENT if ( x == y or x == z or x == t or y == z or y == t or z == t ) : NEW_LINE INDENT flag = False NEW_LINE DEDENT if flag : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ % d % d ▁ % d ' % ( x , y , z , t ) ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( - 1 ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE for n , m in enumerate ( sys . stdin ) : NEW_LINE INDENT if n == 0 and m == 0 : NEW_LINE INDENT break NEW_LINE DEDENT a = [ int ( i ) for i in sys . stdin ] NEW_LINE w = [ int ( j ) for j in sys . stdin ] NEW_LINE common_additions = None NEW_LINE for i in range ( n ) : NEW_LINE INDENT additions = [ ] NEW_LINE b_just = calc_nearest_weight ( a [ i ] , w [ i ] , 0 , 0 , additions ) NEW_LINE if not b_just : NEW_LINE INDENT if common_additions is None : NEW_LINE INDENT common_additions = additions NEW_LINE DEDENT else : NEW_LINE INDENT common_additions . sort ( ) NEW_LINE DEDENT DEDENT DEDENT if common_additions is None : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT if common_additions : NEW_LINE INDENT print ( common_additions [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE def calc_nearest_weight ( x , w , i , sum , additions ) : NEW_LINE INDENT if x == sum : NEW_LINE INDENT return True NEW_LINE DEDENT if i == len ( w ) : NEW_LINE INDENT additions . append ( abs ( x - sum ) ) NEW_LINE return False NEW_LINE DEDENT if calc_nearest_weight ( x , w , i + 1 , sum , additions ) : NEW_LINE INDENT return True NEW_LINE DEDENT if calc_nearest_weight ( x , w , i + 1 , sum + w [ i ] , additions ) : NEW_LINE INDENT return True NEW_LINE DEDENT return calc_nearest_weight ( x , w , i + 1 , sum - w [ i ] , additions ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import math NEW_LINE import random NEW_LINE import sys NEW_LINE dp = [ 0 ] * ( 1 << 3 ) NEW_LINE dp [ 0 ] = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT price = random . randint ( 0 , len ( sys . stdin ) ) NEW_LINE s = sys . stdin . read ( ) NEW_LINE mask = 0 NEW_LINE if ' A ' in s : NEW_LINE INDENT mask |= 1 NEW_LINE DEDENT if ' B ' in s : NEW_LINE INDENT mask |= 2 NEW_LINE DEDENT if ' C ' in s : NEW_LINE INDENT mask |= 4 NEW_LINE DEDENT for k in range ( ( 1 << 3 ) ) : NEW_LINE INDENT if dp [ k ] != int ( price ) : NEW_LINE INDENT t = k | mask NEW_LINE dp [ t ] = min ( dp [ t ] , dp [ k ] + price ) NEW_LINE DEDENT DEDENT DEDENT print ( - 1 if dp [ 7 ] == int ( 0 ) else dp [ 7 ] ) NEW_LINE sys . exit ( 0 ) NEW_LINE DEDENT
def GFG ( data , pre ) : NEW_LINE INDENT str_len = len ( data ) NEW_LINE pre_len = len ( pre ) NEW_LINE i , j = 0 , 0 NEW_LINE while i < str_len and j < pre_len : NEW_LINE INDENT if data [ i ] != pre [ j ] : NEW_LINE INDENT return False NEW_LINE DEDENT i += 1 NEW_LINE j += 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def endswith ( data , suff ) : NEW_LINE INDENT i = len ( data ) - 1 NEW_LINE j = len ( suff ) - 1 NEW_LINE while i >= 0 and j >= 0 : NEW_LINE INDENT if data [ i ] != suff [ j ] : NEW_LINE INDENT return False NEW_LINE DEDENT i -= 1 NEW_LINE j -= 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def checkString ( data , a , b ) : NEW_LINE INDENT if len ( data ) != len ( a ) + len ( b ) : NEW_LINE INDENT return False NEW_LINE DEDENT if startswith ( data , a ) : NEW_LINE INDENT if endswith ( data , b ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT if startswith ( data , b ) : NEW_LINE INDENT if endswith ( data , a ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT data = ' GeeksforGeeks ' NEW_LINE a = ' Geeksfo ' NEW_LINE b = ' rGeeks ' NEW_LINE if checkString ( data , a , b ) : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT DEDENT
def print_combination ( n ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if i % 3 : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT if j % 3 : NEW_LINE INDENT for k in range ( 1 , n ) : NEW_LINE INDENT if k % 3 and ( i + j + k ) == n : NEW_LINE INDENT print ( i , j , k ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT sys . stderr . write ( ' \n ' ) NEW_LINE n = 233 NEW_LINE return ' ' . join ( sys . stderr ) NEW_LINE DEDENT
def count_integral_solutions ( n ) : NEW_LINE INDENT import sys NEW_LINE result = 0 NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , n - i + 1 ) : NEW_LINE INDENT for k in range ( 0 , ( n - i - j ) + 1 ) : NEW_LINE INDENT if i + j + k == n : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT TEN = 10 NEW_LINE def digital_sum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE while n > 0 : NEW_LINE INDENT sum += n % TEN NEW_LINE n //= TEN NEW_LINE DEDENT return sum NEW_LINE DEDENT def getNthTerm ( n ) : NEW_LINE INDENT sum = digital_sum ( n ) NEW_LINE if sum % TEN == 0 : NEW_LINE INDENT return ( n * TEN ) NEW_LINE DEDENT extra = TEN - ( sum % TEN ) NEW_LINE return ( ( n * TEN ) + extra ) NEW_LINE DEDENT def firstn_terms ( n ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( getNthTerm ( i ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n = 10 NEW_LINE firstn_terms ( n ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def GFG ( x , a ) : NEW_LINE INDENT res = 1 NEW_LINE while a > 0 : NEW_LINE INDENT if a & 1 : NEW_LINE INDENT res = res * x NEW_LINE DEDENT x = x * x NEW_LINE a >>= 1 NEW_LINE DEDENT return res NEW_LINE def break_integer ( N ) : NEW_LINE INDENT if N == 2 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if N == 3 : NEW_LINE INDENT return 2 NEW_LINE DEDENT max_product = - 1 NEW_LINE if N % 3 == 0 : NEW_LINE INDENT max_product = power ( 3 , N // 3 ) NEW_LINE DEDENT elif N % 3 == 1 : NEW_LINE INDENT max_product = 2 * 2 * power ( 3 , ( N // 3 ) - 1 ) NEW_LINE DEDENT elif N % 3 == 2 : NEW_LINE INDENT max_product = 2 * power ( 3 , N // 3 ) NEW_LINE DEDENT return max_product NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT max_product = break_integer ( 10 ) NEW_LINE print ( max_product ) NEW_LINE DEDENT DEDENT
def main ( n ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE class Main ( object ) : NEW_LINE INDENT def _euler_phi_table ( n ) : NEW_LINE INDENT res = np . zeros ( n + 1 ) NEW_LINE p = np . zeros ( n + 1 ) NEW_LINE p [ 0 ] = p [ 1 ] = False NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT res [ i ] = i NEW_LINE DEDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if p [ i ] : NEW_LINE INDENT res [ i ] -= res [ i ] // i NEW_LINE for j in range ( i + i , n + 1 , i ) : NEW_LINE INDENT p [ j ] = False NEW_LINE res [ j ] -= res [ j ] // i NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT def run ( ) : NEW_LINE INDENT N = 1000000 NEW_LINE f = euler_phi_table ( N ) NEW_LINE res = np . zeros ( N + 1 ) NEW_LINE res [ 1 ] = 2 NEW_LINE for i in range ( 2 , N + 1 ) : NEW_LINE INDENT res [ i ] = res [ i - 1 ] + f [ i ] NEW_LINE DEDENT with open ( ' test . txt ' , ' r ' ) as f : NEW_LINE INDENT T = f . read ( ) NEW_LINE DEDENT while T : NEW_LINE INDENT T -= 1 NEW_LINE print ( res [ T ] ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE with open ( ' README . rst ' ) as f : NEW_LINE INDENT s = f . read ( ) NEW_LINE s = s . replace ( '2017' , '2018' ) NEW_LINE print ( s ) NEW_LINE DEDENT DEDENT
def first_non_repeating ( data ) : NEW_LINE INDENT import collections NEW_LINE import sys NEW_LINE class NonReapatingCQueue ( collections . deque ) : NEW_LINE INDENT MAX_CHAR = 26 NEW_LINE def __init__ ( self ) : NEW_LINE INDENT collections . deque ( maxlen = 0 ) NEW_LINE self . maxlen = 0 NEW_LINE DEDENT def append ( self , ch ) : NEW_LINE INDENT self . maxlen += ord ( ch ) NEW_LINE DEDENT DEDENT def first_non_repeating ( data ) : NEW_LINE INDENT char_count = [ 0 ] * MAX_CHAR NEW_LINE q = collections . deque ( maxlen = len ( data ) ) NEW_LINE for ch in data : NEW_LINE INDENT q . append ( ch ) NEW_LINE char_count [ ch - ' a ' ] += 1 NEW_LINE while not q . empty ( ) : NEW_LINE INDENT if char_count [ q . popleft ( ) - ' a ' ] > 1 : NEW_LINE INDENT q . popleft ( ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' % d ▁ ' % q . popleft ( ) , end = ' ▁ ' ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT if not q . empty ( ) : NEW_LINE INDENT print ( ' % d ▁ ' % - 1 , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE arr = [ ] NEW_LINE total_false = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( Node ( i ) ) NEW_LINE DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT a = random . randint ( 0 , n - 1 ) NEW_LINE b = random . randint ( 0 , n - 1 ) NEW_LINE arr [ a ] . neighbors . append ( b ) NEW_LINE arr [ b ] . neighbors . append ( a ) NEW_LINE DEDENT dfs ( 0 , True ) NEW_LINE total = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] . parity : NEW_LINE INDENT total += ( total_false - len ( arr [ i ] . neighbors ) ) NEW_LINE DEDENT DEDENT print ( total ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if not parity : NEW_LINE INDENT total_false += 1 NEW_LINE DEDENT for next_node in arr [ curr_node ] . neighbors : NEW_LINE INDENT if next_node . parity : NEW_LINE INDENT continue NEW_LINE DEDENT dfs ( next_node , not parity ) NEW_LINE DEDENT DEDENT class Node ( object ) : NEW_LINE INDENT def __init__ ( self , index ) : NEW_LINE INDENT self . index = index NEW_LINE self . neighbors = [ ] NEW_LINE self . parity = None NEW_LINE DEDENT DEDENT return Node NEW_LINE DEDENT
def solve ( n , m , obstacles , range ) : NEW_LINE INDENT import numpy as np NEW_LINE val = min ( n , m ) NEW_LINE range . sort ( ) NEW_LINE c = 1 NEW_LINE for i in range ( obstacles - 1 , - 1 , - 1 ) : NEW_LINE INDENT range [ i ] = 2 * range [ i ] NEW_LINE val -= range [ i ] NEW_LINE if val <= 0 : NEW_LINE INDENT return c NEW_LINE DEDENT else : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT if val > 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT exp = list ( sys . stdin . readlines ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT sys . stderr . write ( ' Please ▁ enter ▁ a ▁ string ▁ or ▁ a ▁ list ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ of ▁ strings ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ of ▁ strings ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ list ▁ of ▁ or ▁ a ▁ of ▁ strings ▁ of ▁ the ▁ same ▁ length . \n ' ) NEW_LINE DEDENT return ' ' . join ( exp ) NEW_LINE DEDENT
def minstack ( ) : NEW_LINE INDENT import sys NEW_LINE import copy NEW_LINE import copy NEW_LINE import copy NEW_LINE import copy NEW_LINE import copy NEW_LINE import copy NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . random as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT one = [ " " , " one ▁ " , " two ▁ " , " three ▁ " , " four ▁ " , " five ▁ " , " six ▁ " , " seven ▁ " , " eight ▁ " , " nine ▁ " , " ten ▁ " , " eleven ▁ " , " twelve ▁ " , " thirteen ▁ " , " fourteen ▁ " , " fifteen ▁ " , " sixteen ▁ " , " seventeen ▁ " , " eighteen ▁ " , " nineteen ▁ " ] NEW_LINE ten = [ " " , " " , " twenty ▁ " , " thirty ▁ " , " forty ▁ " , " fifty ▁ " , " sixty ▁ " , " seventy ▁ " , " eighty ▁ " , " ninety ▁ " ] NEW_LINE def num_to_words ( n , s ) : NEW_LINE INDENT data = " " NEW_LINE if n > 19 : NEW_LINE INDENT data += ten [ n // 10 ] + one [ n % 10 ] NEW_LINE DEDENT else : NEW_LINE INDENT data += one [ n ] NEW_LINE DEDENT if n != 0 : NEW_LINE INDENT data += s NEW_LINE DEDENT return data NEW_LINE DEDENT def convert_to_words ( n ) : NEW_LINE INDENT out = " " NEW_LINE out += num_to_words ( int ( n // 10000000 ) , " crore ▁ " ) NEW_LINE out += num_to_words ( int ( ( n // 100000 ) % 100 ) , " lakh ▁ " ) NEW_LINE out += num_to_words ( int ( ( n // 1000 ) % 100 ) , " thousand ▁ " ) NEW_LINE out += num_to_words ( int ( ( n // 100 ) % 10 ) , " hundred ▁ " ) NEW_LINE if n > 100 and n % 100 > 0 : NEW_LINE INDENT out += " and ▁ " NEW_LINE DEDENT out += num_to_words ( int ( n % 100 ) , " " ) NEW_LINE return out NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 438237764 NEW_LINE print ( convert_to_words ( n ) ) NEW_LINE DEDENT return " " . join ( str ( n ) for n in range ( 10 ) ) NEW_LINE DEDENT
def GFG ( a ) : NEW_LINE INDENT neg = 0 NEW_LINE tmp = 1 if a < 0 else - 1 NEW_LINE while a != 0 : NEW_LINE INDENT neg += tmp NEW_LINE a += tmp NEW_LINE DEDENT return neg NEW_LINE DEDENT def are_different_sign ( a , b ) : NEW_LINE INDENT return ( ( a < 0 and b > 0 ) or ( a > 0 and b < 0 ) ) NEW_LINE DEDENT def sub ( a , b ) : NEW_LINE INDENT return a + flip_sign ( b ) NEW_LINE DEDENT def mul ( a , b ) : NEW_LINE INDENT if a < b : NEW_LINE INDENT return mul ( b , a ) NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( abs ( b ) , 0 , - 1 ) : NEW_LINE INDENT sum += a NEW_LINE DEDENT if b < 0 : NEW_LINE INDENT sum = flip_sign ( sum ) NEW_LINE DEDENT return sum NEW_LINE DEDENT def division ( a , b ) : NEW_LINE INDENT if not b : NEW_LINE INDENT raise ZeroDivisionError ( ) NEW_LINE DEDENT quotient , dividend = 0 , 0 NEW_LINE divisor = flip_sign ( abs ( b ) ) NEW_LINE for dividend in range ( abs ( a ) , abs ( divisor ) + 1 , - divisor ) : NEW_LINE INDENT quotient += 1 NEW_LINE DEDENT if are_different_sign ( a , b ) : NEW_LINE INDENT quotient = flip_sign ( quotient ) NEW_LINE DEDENT return quotient NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT print ( ' Subtraction ▁ is ▁ % d ' % sub ( 4 , - 2 ) ) NEW_LINE print ( ' Product ▁ is ▁ % d ' % mul ( - 9 , 6 ) ) NEW_LINE try : NEW_LINE INDENT print ( ' Division ▁ is ▁ % d ' % division ( 8 , 2 ) ) NEW_LINE DEDENT except ZeroDivisionError : NEW_LINE INDENT print ( ' Exception ▁ : - ▁ Divide ▁ by ▁ 0' ) NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def factorial ( n ) : NEW_LINE INDENT i , fact = n , 1 NEW_LINE while n // i != n : NEW_LINE INDENT fact = fact * i NEW_LINE i -= 1 NEW_LINE DEDENT return fact NEW_LINE DEDENT
def cnt_divby_x ( arr , n , x ) : NEW_LINE INDENT number = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT number = number * 2 + arr [ i ] NEW_LINE if ( number % x == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def B272 ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT N = 0 NEW_LINE DEDENT stat = [ 0 ] * 30 NEW_LINE for n in range ( N ) : NEW_LINE INDENT a = int ( sys . stdin . readline ( ) ) NEW_LINE stat [ string . find ( a ) ] += 1 NEW_LINE DEDENT answer = 0 NEW_LINE for count in stat : NEW_LINE INDENT answer += count * ( count - 1 ) NEW_LINE DEDENT answer //= 2 NEW_LINE print ( answer ) NEW_LINE DEDENT
def min_no_of_operation ( arr , n , k ) : NEW_LINE INDENT global nb_subtraction NEW_LINE res = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT nb_subtraction = 0 NEW_LINE if arr [ i ] > arr [ i - 1 ] : NEW_LINE INDENT nb_subtraction = ( arr [ i ] - arr [ i - 1 ] ) // k NEW_LINE if ( arr [ i ] - arr [ i - 1 ] ) % k != 0 : NEW_LINE INDENT nb_subtraction += 1 NEW_LINE DEDENT arr [ i ] = arr [ i ] - k * nb_subtraction NEW_LINE DEDENT res = res + nb_subtraction NEW_LINE DEDENT return res NEW_LINE DEDENT
def CountSubSet ( arr , n , X ) : NEW_LINE INDENT N = int ( math . pow ( 2 , n ) ) NEW_LINE count = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if i & ( 1 << j ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT max , result = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( j - 3 ) >= 0 : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i ] [ j - 1 ] * arr [ i ] [ j - 2 ] * arr [ i ] [ j - 3 ] NEW_LINE if max < result : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT if ( i - 3 ) >= 0 : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i - 1 ] [ j ] * arr [ i - 2 ] [ j ] * arr [ i - 3 ] [ j ] NEW_LINE if max < result : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT if ( i - 3 ) >= 0 and ( j - 3 ) >= 0 : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i - 1 ] [ j - 1 ] * arr [ i - 2 ] [ j - 2 ] * arr [ i - 3 ] [ j - 3 ] NEW_LINE if max < result : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT if ( i - 3 ) >= 0 and ( j - 1 ) <= 0 : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i - 1 ] [ j + 1 ] * arr [ i - 2 ] [ j + 2 ] * arr [ i - 3 ] [ j + 3 ] NEW_LINE if max < result : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT DEDENT DEDENT return max NEW_LINE DEDENT
def sieve ( ) : NEW_LINE INDENT import random NEW_LINE global primes NEW_LINE is_prime = [ True for i in range ( MAX ) ] NEW_LINE for p in range ( 2 , MAX ) : NEW_LINE INDENT if is_prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , MAX + 1 , p ) : NEW_LINE INDENT is_prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT for p in range ( 2 , MAX ) : NEW_LINE INDENT if is_prime [ p ] == True : NEW_LINE INDENT primes . append ( p ) NEW_LINE DEDENT DEDENT def power ( x , y ) : NEW_LINE INDENT count = 0 NEW_LINE z = y NEW_LINE while x >= z : NEW_LINE INDENT count += ( x // z ) NEW_LINE z *= y NEW_LINE DEDENT return count NEW_LINE DEDENT def mod_mul ( a , b , mod ) : NEW_LINE INDENT res = 0 NEW_LINE a = a % mod NEW_LINE while b > 0 : NEW_LINE INDENT if b % 2 == 1 : NEW_LINE INDENT res = ( res + a ) % mod NEW_LINE DEDENT a = ( a * 2 ) % mod NEW_LINE b //= 2 NEW_LINE DEDENT return res % mod NEW_LINE DEDENT def count_ways ( n , m ) : NEW_LINE INDENT ans = 1 NEW_LINE for i in range ( 1 , len ( primes ) ) : NEW_LINE INDENT powers = power ( n , primes [ i ] ) NEW_LINE if not powers : NEW_LINE INDENT break NEW_LINE DEDENT ans = mod_mul ( ans , powers + 1 , m ) % m NEW_LINE DEDENT if ( ( ans - 1 ) % m ) < 0 : NEW_LINE INDENT return ( ans - 1 + m ) % m NEW_LINE DEDENT else : NEW_LINE INDENT return ( ans - 1 ) % m NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT sieve ( ) NEW_LINE n , m = 4 , 7 NEW_LINE print ( count_ways ( n , m ) ) NEW_LINE DEDENT DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT i = n - 1 NEW_LINE while i >= 0 and arr [ i ] % 2 == 1 : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT sum = 0 NEW_LINE for j in range ( 0 , i + 1 ) : NEW_LINE INDENT sum += arr [ j ] NEW_LINE DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import time NEW_LINE import datetime NEW_LINE import time NEW_LINE import math NEW_LINE import datetime NEW_LINE import math NEW_LINE import time . strptime NEW_LINE import math NEW_LINE import time . strptime NEW_LINE t1 = time . strftime ( ' % Y : % m : % d ' , time . gmtime ( ) ) NEW_LINE t2 = time . strftime ( ' % Y : % m : % d ' , time . gmtime ( ) ) NEW_LINE date = datetime . strptime ( t1 , ' % Y : % m : % d ' ) NEW_LINE print ( abs ( date - date . strptime ( t2 , ' % Y : % m : % d ' ) ) / ( 1000 * 60 * 60 * 24 ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE s = list ( sys . stdin . readlines ( ) ) NEW_LINE count = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT al = [ ] NEW_LINE c = s [ i ] NEW_LINE if c == ' Q ' : NEW_LINE INDENT al . append ( c ) NEW_LINE DEDENT for a in s [ i + 1 : ] : NEW_LINE INDENT if al : NEW_LINE INDENT if al [ - 1 ] == ' Q ' and a == ' A ' : NEW_LINE INDENT al . append ( a ) NEW_LINE DEDENT if al [ - 1 ] == ' A ' and a == ' Q ' : NEW_LINE INDENT al . append ( a ) NEW_LINE DEDENT if al [ - 1 ] == ' A ' and a == ' A ' : NEW_LINE INDENT al . append ( a ) NEW_LINE DEDENT DEDENT if len ( al ) >= 3 and al [ 0 ] == ' Q ' and al [ - 1 ] == ' Q ' : NEW_LINE INDENT count = count + len ( al ) - 3 NEW_LINE al . pop ( ) NEW_LINE DEDENT DEDENT DEDENT print ( count ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE import numpy . testing . config as config NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE s = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT k = s // i NEW_LINE count += k NEW_LINE s -= k * i NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT DEDENT
def GFG ( x ) : NEW_LINE INDENT import list NEW_LINE v = [ ] NEW_LINE def multiply ( x ) : NEW_LINE INDENT carry = 0 NEW_LINE v . append ( x ) NEW_LINE for i in range ( len ( v ) ) : NEW_LINE INDENT res = carry + v [ i ] * x NEW_LINE v [ i ] = res % 10 NEW_LINE carry = res // 10 NEW_LINE DEDENT while carry != 0 : NEW_LINE INDENT v . append ( carry % 10 ) NEW_LINE carry //= 10 NEW_LINE DEDENT DEDENT def findSumOfDigits ( n ) : NEW_LINE INDENT v . append ( 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT multiply ( i ) NEW_LINE DEDENT DEDENT sum = 0 NEW_LINE v = list ( v ) NEW_LINE for i in range ( len ( v ) ) : NEW_LINE INDENT sum += v [ i ] NEW_LINE DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . readline ( ) ) NEW_LINE M = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT answer = [ 0 ] * M NEW_LINE for n in range ( N ) : NEW_LINE INDENT S = list ( sys . stdin . readline ( ) ) NEW_LINE for m in range ( M ) : NEW_LINE INDENT c = S [ m ] NEW_LINE if c == ' L ' : NEW_LINE INDENT hit = m - n NEW_LINE if hit >= 0 : NEW_LINE INDENT answer [ hit ] += 1 NEW_LINE DEDENT DEDENT elif c == ' R ' : NEW_LINE INDENT hit = m + n NEW_LINE if hit < M : NEW_LINE INDENT answer [ hit ] += 1 NEW_LINE DEDENT DEDENT elif c == ' U ' : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT answer [ m ] += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT output = [ ] NEW_LINE for a in answer : NEW_LINE INDENT output . append ( ' % d ▁ ' % a ) NEW_LINE DEDENT print ( ' ' . join ( output ) ) NEW_LINE DEDENT
def codeforces356A ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import random NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT subprocess . check_call ( [ ' / usr / bin / open ' , ' - w ' ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT n = len ( sys . argv ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT dp = [ None ] * ( n + 1 ) NEW_LINE dp [ n - 1 ] = a [ n - 1 ] NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT dp [ i ] = max ( dp [ i + 1 ] , a [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if a [ i ] > dp [ i + 1 ] : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % ( 0 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % ( ( dp [ i + 1 ] - a [ i ] + 1 ) ) ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT
def pell ( n ) : NEW_LINE INDENT if n <= 2 : NEW_LINE INDENT return n NEW_LINE DEDENT return 2 * pell ( n - 1 ) + pell ( n - 2 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE square = n * n NEW_LINE odd = [ ] NEW_LINE even = [ ] NEW_LINE for i in range ( 1 , square + 1 ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT even . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT odd . append ( i ) NEW_LINE DEDENT DEDENT loop = square // n NEW_LINE div = loop // 2 NEW_LINE debug ( div ) NEW_LINE for i in range ( 1 , loop + 1 ) : NEW_LINE INDENT for j in range ( div ) : NEW_LINE INDENT if i % 2 == 1 : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ % d ▁ ' % ( odd . pop ( 0 ) , even . pop ( - 1 ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ % d ▁ ' % ( even . pop ( 0 ) , odd . pop ( - 1 ) ) ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT sys . stdout . write ( ' ' . join ( str ( x ) for x in obj ) ) NEW_LINE DEDENT
def print_small ( arr , asize , n ) : NEW_LINE INDENT copy_arr = arr [ asize : ] NEW_LINE copy_arr . sort ( ) NEW_LINE for i in range ( asize ) : NEW_LINE INDENT if np . searchsorted ( copy_arr , n , arr [ i ] ) > - 1 : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def count_numbers ( n ) : NEW_LINE INDENT import math NEW_LINE k = 0 NEW_LINE count = 0 NEW_LINE while n > 0 : NEW_LINE INDENT if n & 1 == 0 : NEW_LINE INDENT count += int ( math . pow ( 2 , k ) ) NEW_LINE DEDENT k += 1 NEW_LINE n >>= 1 NEW_LINE DEDENT return count NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT n , m , money = sys . argv [ 1 : ] NEW_LINE min , max = sys . maxsize , sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT min = min ( sys . maxsize , min ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT max = max ( sys . maxsize , max ) NEW_LINE DEDENT if money % min == 0 : NEW_LINE INDENT div = money // min NEW_LINE div = div * max NEW_LINE print ( max ( div , money ) , file = sys . stderr ) NEW_LINE DEDENT else : NEW_LINE INDENT div = money // min NEW_LINE div = ( div * max ) + ( money % min ) NEW_LINE print ( max ( div , money ) , file = sys . stderr ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( ' ' . join ( str ( x ) for x in sys . argv [ 1 : ] ) , file = sys . stderr ) NEW_LINE DEDENT DEDENT
def GFG ( x ) : NEW_LINE INDENT global maximum , x , ans NEW_LINE graph = [ ] NEW_LINE weight = [ ] NEW_LINE def __builtin_popcount ( x ) : NEW_LINE INDENT c = 0 NEW_LINE for i in range ( 60 ) : NEW_LINE INDENT if ( ( x >> i ) & 1 ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT return c NEW_LINE DEDENT def dfs ( node , parent ) : NEW_LINE INDENT a = __builtin_popcount ( weight [ node ] + x ) NEW_LINE if maximum < a : NEW_LINE INDENT maximum = a NEW_LINE ans = node NEW_LINE DEDENT elif maximum == a : NEW_LINE INDENT ans = min ( ans , node ) NEW_LINE DEDENT for i in range ( len ( graph [ node ] ) ) : NEW_LINE INDENT if graph [ node ] [ i ] == parent : NEW_LINE INDENT continue NEW_LINE DEDENT dfs ( graph [ node ] [ i ] , node ) NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT x = 15 NEW_LINE weight . append ( 0 ) NEW_LINE weight . append ( 5 ) NEW_LINE weight . append ( 10 ) NEW_LINE weight . append ( 11 ) NEW_LINE weight . append ( 8 ) NEW_LINE weight . append ( 6 ) NEW_LINE for i in range ( 100 ) : NEW_LINE INDENT graph . append ( [ ] ) NEW_LINE DEDENT graph [ 1 ] . append ( 2 ) NEW_LINE graph [ 2 ] . append ( 3 ) NEW_LINE graph [ 2 ] . append ( 4 ) NEW_LINE graph [ 1 ] . append ( 5 ) NEW_LINE dfs ( 1 , 1 ) NEW_LINE print ( ans ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( data , freq ) : NEW_LINE INDENT data = list ( data ) NEW_LINE for c in data : NEW_LINE INDENT freq [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT def max_count ( data , patt ) : NEW_LINE INDENT str_freq = [ 0 ] * MAX NEW_LINE update_freq ( data , str_freq ) NEW_LINE patt_freq = [ 0 ] * MAX NEW_LINE update_freq ( patt , patt_freq ) NEW_LINE ans = sys . maxsize NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if not patt_freq [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT ans = min ( ans , str_freq [ i ] / patt_freq [ i ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT data = ' geeksforgeeks ' NEW_LINE patt = ' geeks ' NEW_LINE print ( max_count ( data , patt ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ 0 ] * ( n + 1 ) NEW_LINE b = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a [ i ] = sys . stdin . readline ( ) NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT b [ i ] = sys . stdin . readline ( ) NEW_LINE DEDENT a1 , b1 , ans = 0 , 0 , 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a1 = a1 | a [ i ] NEW_LINE b1 = b1 | b [ i ] NEW_LINE if a1 + b1 > ans : NEW_LINE INDENT ans = a1 + b1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def A354 ( ) : NEW_LINE INDENT import sys NEW_LINE N = sys . stdin . read ( ) NEW_LINE L = sys . stdin . read ( ) NEW_LINE R = sys . stdin . read ( ) NEW_LINE QL = sys . stdin . read ( ) NEW_LINE QR = sys . stdin . read ( ) NEW_LINE W = [ 0 ] * N NEW_LINE sum = [ 0 ] * N + [ 0 ] * N NEW_LINE for n in range ( N ) : NEW_LINE INDENT W [ n ] = sys . stdin . read ( ) NEW_LINE sum [ n + 1 ] = sum [ n ] + W [ n ] NEW_LINE DEDENT min = sys . maxsize NEW_LINE for first_r in range ( 0 , N + 1 ) : NEW_LINE INDENT l_count = first_r NEW_LINE r_count = N - l_count NEW_LINE cand = sum [ l_count ] * L + ( sum [ N ] - sum [ l_count ] ) * R NEW_LINE ll_count = max ( 0 , l_count - r_count - 1 ) NEW_LINE rr_count = max ( 0 , r_count - l_count - 1 ) NEW_LINE cand += ll_count * QL NEW_LINE cand += rr_count * QR NEW_LINE min = min ( cand , min ) NEW_LINE DEDENT print ( min ) NEW_LINE DEDENT
def wastedWater ( V , M , N ) : NEW_LINE INDENT global wasted_amt , amt_per_min , time_to_fill NEW_LINE amt_per_min = M - N NEW_LINE time_to_fill = V / amt_per_min NEW_LINE wasted_amt = N * time_to_fill NEW_LINE return wasted_amt NEW_LINE DEDENT
def gf_max_sub_str ( data , n ) : NEW_LINE INDENT count0 , count1 = 0 , 0 NEW_LINE cnt = 0 NEW_LINE for c in data : NEW_LINE INDENT if c == '0' : NEW_LINE INDENT count0 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count1 += 1 NEW_LINE DEDENT if count0 == count1 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT if count0 != count1 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return cnt NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE abc = np . zeros ( ( 3 , 3 ) ) NEW_LINE abc [ 0 ] = np . random . randint ( 0 , 3 ) NEW_LINE abc [ 1 ] = np . random . randint ( 0 , 3 ) NEW_LINE abc [ 2 ] = np . random . randint ( 0 , 3 ) NEW_LINE max = np . inf NEW_LINE min = np . inf NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT if max < abc [ i ] : NEW_LINE INDENT max = abc [ i ] NEW_LINE DEDENT if min > abc [ i ] : NEW_LINE INDENT min = abc [ i ] NEW_LINE DEDENT DEDENT print ( min , max ) NEW_LINE DEDENT
def GFG ( s ) : NEW_LINE INDENT sum = 0 NEW_LINE for n in range ( 1 , s ) : NEW_LINE INDENT sum += n NEW_LINE if sum == s : NEW_LINE INDENT return n NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def maximum_absolute ( arr , n ) : NEW_LINE INDENT import math NEW_LINE mn = math . inf NEW_LINE mx = math . inf NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i > 0 and arr [ i ] == - 1 and arr [ i - 1 ] != - 1 : NEW_LINE INDENT mn = min ( mn , arr [ i - 1 ] ) NEW_LINE mx = max ( mx , arr [ i - 1 ] ) NEW_LINE DEDENT if i < n - 1 and arr [ i ] == - 1 and arr [ i + 1 ] != - 1 : NEW_LINE INDENT mn = min ( mn , arr [ i + 1 ] ) NEW_LINE mx = max ( mx , arr [ i + 1 ] ) NEW_LINE DEDENT DEDENT common_integer = ( mn + mx ) / 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == - 1 : NEW_LINE INDENT arr [ i ] = common_integer NEW_LINE DEDENT DEDENT max_diff = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT diff = abs ( arr [ i ] - arr [ i + 1 ] ) NEW_LINE if diff > max_diff : NEW_LINE INDENT max_diff = diff NEW_LINE DEDENT DEDENT return max_diff NEW_LINE DEDENT
def GFG ( N ) : NEW_LINE INDENT MOD = 1000000007 NEW_LINE dp = np . zeros ( ( N + 1 , 3 ) ) NEW_LINE for i in range ( N + 1 ) : NEW_LINE INDENT for j in range ( 9 , 3 ) : NEW_LINE INDENT dp [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT dp [ 1 ] [ 0 ] = 1 NEW_LINE dp [ 1 ] [ 1 ] = 1 NEW_LINE dp [ 1 ] [ 2 ] = 0 NEW_LINE for i in range ( 2 , N + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD NEW_LINE dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] % MOD NEW_LINE dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] % MOD NEW_LINE DEDENT ans = ( dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ) % MOD NEW_LINE return ans NEW_LINE DEDENT
def longest_subseq ( n , k , s ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE max_length = [ 0 ] * 26 NEW_LINE for i in range ( n ) : NEW_LINE INDENT curr = s [ i ] - ' a ' NEW_LINE lower = max ( 0 , curr - k ) NEW_LINE upper = min ( 25 , curr + k ) NEW_LINE for j in range ( lower , upper + 1 ) : NEW_LINE INDENT dp [ i ] = max ( dp [ i ] , max_length [ j ] + 1 ) NEW_LINE DEDENT max_length [ curr ] = max ( dp [ i ] , max_length [ curr ] ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in dp : NEW_LINE INDENT ans = max ( i , ans ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def longest_fibonacci_substring ( n , a ) : NEW_LINE INDENT if n <= 2 : NEW_LINE INDENT return n NEW_LINE DEDENT len = 2 NEW_LINE mx = sys . maxsize NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT if a [ i ] == a [ i - 1 ] + a [ i - 2 ] : NEW_LINE INDENT len += 1 NEW_LINE DEDENT else : NEW_LINE INDENT len = 2 NEW_LINE DEDENT mx = max ( mx , len ) NEW_LINE DEDENT return mx NEW_LINE DEDENT
def minimum_subarrays ( ar , n ) : NEW_LINE INDENT import numpy as np NEW_LINE se = [ ] NEW_LINE cnt = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ar [ i ] in se : NEW_LINE INDENT se . append ( ar [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT cnt += 1 NEW_LINE se = np . append ( ar [ i ] , ar [ i ] ) NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT
def GFG ( s ) : NEW_LINE INDENT freq = [ 0 ] * 10 NEW_LINE r , i = 0 , 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT freq [ i ] = 0 NEW_LINE DEDENT while s != 0 : NEW_LINE INDENT r = s % 10 NEW_LINE s = int ( s / 10 ) NEW_LINE freq [ r ] += 1 NEW_LINE DEDENT xor__ = 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT xor__ = xor__ ^ freq [ i ] NEW_LINE if xor__ == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT global even NEW_LINE global odd NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 1 : NEW_LINE INDENT odd [ i ] = 1 NEW_LINE DEDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT even [ i ] = 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT even [ i ] = even [ i ] + even [ i - 1 ] NEW_LINE odd [ i ] = odd [ i ] + odd [ i - 1 ] NEW_LINE DEDENT def isOdd ( L , R ) : NEW_LINE INDENT cnt = odd [ R ] NEW_LINE if L > 0 : NEW_LINE INDENT cnt -= odd [ L - 1 ] NEW_LINE DEDENT if cnt == R - L + 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def performQueries ( a , n , q , m ) : NEW_LINE INDENT precompute ( a , n ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT L , R = q [ i ] [ 0 ] , q [ i ] [ 1 ] NEW_LINE if isOdd ( L , R ) : NEW_LINE INDENT print ( " Odd " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Even " ) NEW_LINE DEDENT DEDENT DEDENT def main ( args ) : NEW_LINE INDENT a = [ 2 , 1 , 5 , 7 , 6 , 8 , 9 ] NEW_LINE n = len ( a ) NEW_LINE q = [ [ 0 , 2 ] , [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 6 ] ] NEW_LINE m = len ( q ) NEW_LINE performQueries ( a , n , q , m ) NEW_LINE DEDENT DEDENT
def pre422 ( args ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import list NEW_LINE class pre422 ( list ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT list . __init__ ( self ) NEW_LINE self . stream = [ ] NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT while not self . stream or not self . stream . readline ( ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stream . readline ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return self . stream . readline ( ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = " " NEW_LINE try : NEW_LINE INDENT data = self . stream . readline ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT obj = [ ] NEW_LINE s = [ " " ] * 1000 NEW_LINE for n in range ( 1 , 1000 + 1 ) : NEW_LINE INDENT flag = True NEW_LINE for i in range ( 0 , 1000 + 1 ) : NEW_LINE INDENT for j in range ( 0 , 1000 + 1 ) : NEW_LINE INDENT if ( n - i * 3 - j * 5 ) % 7 == 0 and ( n - i * 3 - j * 5 ) // 7 >= 0 : NEW_LINE INDENT s . append ( ( " % d ▁ % d ▁ % d " % ( i , j , ( n - i * 3 - j * 5 ) // 7 ) ) ) NEW_LINE flag = False NEW_LINE break NEW_LINE DEDENT DEDENT if not flag : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT s . append ( " - 1" ) NEW_LINE DEDENT DEDENT tc = obj . count ( ) NEW_LINE while tc : NEW_LINE INDENT n = obj . count ( ) NEW_LINE print ( s [ n - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT
def BusesBetweenCities ( ) : NEW_LINE INDENT f = sys . stdin NEW_LINE g = sys . stdout NEW_LINE a = int ( f . readline ( ) ) NEW_LINE tA = int ( f . readline ( ) ) NEW_LINE f = sys . stdin . readline ( ) NEW_LINE b = int ( f . readline ( ) ) NEW_LINE tB = int ( f . readline ( ) ) NEW_LINE timing = f . readline ( ) NEW_LINE hrs = int ( timing [ : 2 ] ) NEW_LINE mins = int ( timing [ 3 : ] ) NEW_LINE simDeparture = hrs * 60 + mins NEW_LINE simArrival = simDeparture + tA NEW_LINE counter = 0 NEW_LINE for i in range ( 300 , 1440 , b ) : NEW_LINE INDENT busDeparture = i NEW_LINE busArrival = i + tB NEW_LINE if busDeparture >= simArrival or simDeparture >= busArrival : NEW_LINE INDENT continue NEW_LINE DEDENT counter += 1 NEW_LINE DEDENT g . write ( str ( counter ) ) NEW_LINE g . flush ( ) NEW_LINE g . close ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE out = 3 NEW_LINE good = True NEW_LINE playing = [ 1 , 2 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT win = sys . stdin . readline ( ) NEW_LINE if win == out : NEW_LINE INDENT good = False NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT replace = 0 NEW_LINE for j in range ( 1 , 3 + 1 ) : NEW_LINE INDENT if win != j and out != j : NEW_LINE INDENT replace = j NEW_LINE break NEW_LINE DEDENT DEDENT index = 0 NEW_LINE for j in range ( len ( playing ) ) : NEW_LINE INDENT if playing [ j ] == replace : NEW_LINE INDENT index = j NEW_LINE break NEW_LINE DEDENT DEDENT playing . pop ( index ) NEW_LINE playing . append ( out ) NEW_LINE out = replace NEW_LINE DEDENT DEDENT if good : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def GFG ( steps , n ) : NEW_LINE INDENT current_level = 0 NEW_LINE previous_level = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT previous_level = current_level NEW_LINE current_level = current_level + steps [ i ] NEW_LINE if ( previous_level < 0 and current_level >= 0 ) or ( previous_level > 0 and current_level <= 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT holidays = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT holidays . append ( ( sys . stdin . readline ( ) , sys . stdin . readline ( ) , sys . stdin . readline ( ) , sys . stdin . readline ( ) ) ) NEW_LINE DEDENT min = sys . maxsize NEW_LINE for i in range ( 1 , 360 + 1 ) : NEW_LINE INDENT max = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT max = max ( max , holidays [ j ] . get_rowded ( i ) ) NEW_LINE DEDENT min = min ( min , max ) NEW_LINE DEDENT print ( min ) NEW_LINE class Holiday ( object ) : NEW_LINE INDENT def __init__ ( self , month , day , time , value ) : NEW_LINE INDENT self . start = ( month - 1 ) * 30 + day NEW_LINE self . end = self . start + time - 1 NEW_LINE if self . end > 360 : NEW_LINE INDENT end -= 360 NEW_LINE DEDENT self . value = value NEW_LINE DEDENT def get_rowded ( self , target ) : NEW_LINE INDENT if self . start > end : NEW_LINE INDENT if target <= end or target >= start : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if self . start <= target <= end : NEW_LINE INDENT return value NEW_LINE DEDENT DEDENT if self . target < start : NEW_LINE INDENT v1 = max ( 0 , self . value - ( start - self . target ) ) NEW_LINE DEDENT else : NEW_LINE INDENT v1 = max ( 0 , self . value - ( 360 + self . start - target ) ) NEW_LINE DEDENT if self . end < target : NEW_LINE INDENT v2 = max ( 0 , self . value - ( self . target - end ) ) NEW_LINE DEDENT else : NEW_LINE INDENT v2 = max ( 0 , self . value - ( 360 + self . target - end ) ) NEW_LINE DEDENT return max ( v1 , v2 ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from . import scanner as scanner NEW_LINE f = sys . stdout NEW_LINE N = scanner . get_int ( ) NEW_LINE perm = [ scanner . get_int ( ) for i in range ( N ) ] NEW_LINE swaps = 0 NEW_LINE vis = [ False ] * N NEW_LINE for i in range ( N ) : NEW_LINE INDENT j , cycle = i , 0 NEW_LINE while not vis [ j ] : NEW_LINE INDENT vis [ j ] = True NEW_LINE j = perm [ j ] - 1 NEW_LINE cycle += 1 NEW_LINE DEDENT if cycle > 0 : NEW_LINE INDENT swaps += cycle - 1 NEW_LINE DEDENT DEDENT if swaps % 2 != N % 2 : NEW_LINE INDENT f . write ( ' Um _ nik \n ' ) NEW_LINE DEDENT else : NEW_LINE INDENT f . write ( ' Petr \n ' ) NEW_LINE DEDENT f . flush ( ) NEW_LINE DEDENT
def smallest ( s ) : NEW_LINE INDENT l = len ( s ) NEW_LINE ans = " " NEW_LINE for i in range ( l - 1 ) : NEW_LINE INDENT if s [ i ] > s [ i + 1 ] : NEW_LINE INDENT for j in range ( l ) : NEW_LINE INDENT if i != j : NEW_LINE INDENT ans += s [ j ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT ans = s [ : l - 1 ] NEW_LINE return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . readline ( ) ) NEW_LINE b = int ( sys . stdin . readline ( ) ) NEW_LINE g = [ 0 , 0 , 2 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] NEW_LINE if g [ a ] == g [ b ] : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def find_min_number ( arr , n , k ) : NEW_LINE INDENT i = 0 NEW_LINE j = 0 NEW_LINE min_num = sys . maxsize NEW_LINE found = False NEW_LINE sum = 0 NEW_LINE while i < n : NEW_LINE INDENT sum = sum + arr [ i ] NEW_LINE if sum == k : NEW_LINE INDENT min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) NEW_LINE found = True NEW_LINE DEDENT elif sum > k : NEW_LINE INDENT while sum > k : NEW_LINE INDENT sum = sum - arr [ j ] NEW_LINE j += 1 NEW_LINE DEDENT if sum == k : NEW_LINE INDENT min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) NEW_LINE found = True NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT if found : NEW_LINE INDENT return min_num NEW_LINE DEDENT return - 1 NEW_LINE DEDENT
def solve ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT import subprocess NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT subprocess . check_call ( [ ' python ' , ' - m ' , ' - o ' , ' - - ' , ' - - ' , ' - - ' ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout
def nth_palindrome ( n , k ) : NEW_LINE INDENT temp = ( k // 2 ) if k & 1 else ( k // 2 - 1 ) NEW_LINE palindrome = int ( math . pow ( 10 , temp ) ) NEW_LINE palindrome += n - 1 NEW_LINE print ( palindrome , end = ' ▁ ' ) NEW_LINE if ( k & 1 ) > 0 : NEW_LINE INDENT palindrome //= 10 NEW_LINE DEDENT while palindrome > 0 : NEW_LINE INDENT print ( palindrome % 10 , end = ' ▁ ' ) NEW_LINE palindrome //= 10 NEW_LINE DEDENT print ( ' ' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE INF = sys . maxsize NEW_LINE def solve ( ) : NEW_LINE INDENT with open ( ' / tmp / ' ) as f : NEW_LINE INDENT N = int ( f . read ( ) ) NEW_LINE X = int ( f . read ( ) ) NEW_LINE x = [ ] NEW_LINE xsum = [ 0 ] * ( N + 1 ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT x [ i ] = int ( f . read ( ) ) NEW_LINE xsum [ i + 1 ] = xsum [ i ] + x [ i ] NEW_LINE DEDENT DEDENT ans = X * N + 5 * xsum [ N ] NEW_LINE for i in range ( 1 , N ) : NEW_LINE INDENT cost = X * i + 5 * ( xsum [ N ] - xsum [ N - i ] ) NEW_LINE for j , k in enumerate ( range ( 5 , N - i , - i , - 2 , - i ) ) : NEW_LINE INDENT if cost > ans : NEW_LINE INDENT break NEW_LINE DEDENT cost += j * ( xsum [ k ] - xsum [ max ( k - i , 0 ) ] ) NEW_LINE DEDENT ans = min ( ans , cost ) NEW_LINE DEDENT print ( ans + N * X ) NEW_LINE DEDENT return solve NEW_LINE DEDENT
def minOperations ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . fft as np NEW_LINE arr = np . asarray ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ i ] += 1 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in hashTable : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT if arr [ j ] % arr [ i ] == 0 : NEW_LINE INDENT hashTable [ arr [ j ] ] = 0 NEW_LINE DEDENT DEDENT res += 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT p1 = int ( sys . stdin . readline ( ) ) NEW_LINE p2 = int ( sys . stdin . readline ( ) ) NEW_LINE p3 = int ( sys . stdin . readline ( ) ) NEW_LINE p4 = int ( sys . stdin . readline ( ) ) NEW_LINE a = int ( sys . stdin . readline ( ) ) NEW_LINE b = int ( sys . stdin . readline ( ) ) NEW_LINE global i NEW_LINE min = min ( min ( p1 , p2 ) , min ( p3 , p4 ) ) NEW_LINE c = 0 NEW_LINE for i in range ( a , b + 1 ) : NEW_LINE INDENT if i < min : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def p033 ( ) : NEW_LINE INDENT print ( eval ( ' p033' ) ) NEW_LINE numer = 1 NEW_LINE denom = 1 NEW_LINE for d in range ( 10 , 100 ) : NEW_LINE INDENT for n in range ( 10 , d ) : NEW_LINE INDENT n0 , n1 = n % 10 , n // 10 NEW_LINE d0 , d1 = d % 10 , d // 10 NEW_LINE if n1 == d0 and n0 * d == n * d1 or n0 == d1 and n1 * d == n * d0 : NEW_LINE INDENT numer *= n NEW_LINE denom *= d NEW_LINE DEDENT DEDENT DEDENT return str ( denom / math . gcd ( numer , denom ) ) NEW_LINE DEDENT
def count_set_bits ( n ) : NEW_LINE INDENT import math NEW_LINE count = 0 NEW_LINE while n > 0 : NEW_LINE INDENT count += n & 1 NEW_LINE n >>= 1 NEW_LINE DEDENT return int ( count ) NEW_LINE DEDENT
def code_chef ( ) : NEW_LINE INDENT import math NEW_LINE try : NEW_LINE INDENT sc = sys . stdin NEW_LINE t = sc . count ( ' ▁ ' ) NEW_LINE while t > 0 : NEW_LINE INDENT a , b , x , y = sc . read ( ) NEW_LINE ans = max ( max ( x , a - 1 - x ) * b , a * max ( y , b - 1 - y ) ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def min_swaps ( arr ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE np . testing . import_numpy ( np . testing . import_numpy ( ) ) NEW_LINE np . testing . import_numpy ( np . testing . import_numpy ( ) ) NEW_LINE np . testing . import_numpy ( np . testing . import_numpy ( ) ) NEW_LINE np . testing . import_numpy ( np . testing . import_numpy ( ) ) NEW_LINE np . testing . import_numpy ( np . testing . import_numpy ( ) )
def sum_truncatable_primes ( n ) : NEW_LINE INDENT import random NEW_LINE N = 1000005 NEW_LINE prime = [ True ] * N NEW_LINE def sieve ( ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE prime [ 0 ] = False NEW_LINE for i in range ( 2 , N ) : NEW_LINE INDENT if prime [ i ] : NEW_LINE INDENT for j in range ( i * 2 , N , i ) : NEW_LINE INDENT prime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT return sum NEW_LINE DEDENT def sum_truncatable_primes ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT num = i NEW_LINE flag = True NEW_LINE while num > 0 : NEW_LINE INDENT if not prime [ num ] : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT num //= 10 NEW_LINE DEDENT num = i NEW_LINE power = 10 NEW_LINE while num // power > 0 : NEW_LINE INDENT if not prime [ num % power ] : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT power *= 10 NEW_LINE DEDENT if flag : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 25 NEW_LINE sieve ( ) NEW_LINE print ( sum_truncatable_primes ( n ) ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def find_weights ( X ) : NEW_LINE INDENT sum = 0 NEW_LINE power = 0 NEW_LINE number = 3 NEW_LINE while sum < X : NEW_LINE INDENT sum = number - 1 NEW_LINE sum //= 2 NEW_LINE power += 1 NEW_LINE number *= 3 NEW_LINE DEDENT ans = 1 NEW_LINE for i in range ( 1 , power + 1 ) : NEW_LINE INDENT print ( ans , end = ' ▁ ' ) NEW_LINE ans = ans * 3 NEW_LINE DEDENT DEDENT
def add_to_array_form ( A , K ) : NEW_LINE INDENT import sys NEW_LINE v = [ ] NEW_LINE ans = [ ] NEW_LINE rem = 0 NEW_LINE i = 0 NEW_LINE for i in range ( len ( A ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT my = A [ i ] + K % 10 + rem NEW_LINE if my > 9 : NEW_LINE INDENT rem = 1 NEW_LINE v . append ( my % 10 ) NEW_LINE DEDENT else : NEW_LINE INDENT v . append ( my ) NEW_LINE rem = 0 NEW_LINE DEDENT K = K // 10 NEW_LINE DEDENT while K > 0 : NEW_LINE INDENT my = K % 10 + rem NEW_LINE v . append ( my % 10 ) NEW_LINE if my // 10 > 0 : NEW_LINE INDENT rem = 1 NEW_LINE DEDENT else : NEW_LINE INDENT rem = 0 NEW_LINE DEDENT K = K // 10 NEW_LINE DEDENT if rem > 0 : NEW_LINE INDENT v . append ( rem ) NEW_LINE DEDENT for j in v [ : - 1 ] : NEW_LINE INDENT ans . append ( j ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def GFG ( x , R , C ) : NEW_LINE INDENT for i in range ( C ) : NEW_LINE INDENT dfs ( x , ' ' , 0 , i , R , C ) NEW_LINE print ( ) NEW_LINE DEDENT def dfs ( x , res , i , j , R , C ) : NEW_LINE INDENT if i == R : NEW_LINE INDENT print ( res , end = ' ▁ ' ) NEW_LINE return NEW_LINE DEDENT res = res + x [ i ] [ j ] NEW_LINE for k in range ( C ) : NEW_LINE INDENT dfs ( x , res , i + 1 , k , R , C ) NEW_LINE if i + 1 == R : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT def dfs ( x , res , i , j , R , C ) : NEW_LINE INDENT x = [ [ ' a ' , ' b ' ] , [ ' d ' , ' e ' ] ] NEW_LINE R , C = len ( x ) , len ( x [ 0 ] ) NEW_LINE print_paths ( x , R , C ) NEW_LINE DEDENT return ' ' . join ( dfs ( x , res , i , j , R , C ) ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT from string import join NEW_LINE sc = open ( args [ 0 ] ) NEW_LINE num = int ( sc . readline ( ) ) NEW_LINE line = sc . readline ( ) NEW_LINE hotel = [ 0 ] * 10 NEW_LINE for actual in line : NEW_LINE INDENT if actual == ' L ' : NEW_LINE INDENT bb = True NEW_LINE for pos in range ( 0 , 10 , 1 ) : NEW_LINE INDENT if hotel [ pos ] == 0 : NEW_LINE INDENT hotel [ pos ] = 1 NEW_LINE bb = False NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT if actual == ' R ' : NEW_LINE INDENT bb = True NEW_LINE for pos in range ( 9 , 0 , 1 ) : NEW_LINE INDENT if hotel [ pos ] == 0 : NEW_LINE INDENT hotel [ pos ] = 1 NEW_LINE bb = False NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT pos = int ( " % d " % actual ) NEW_LINE hotel [ pos ] = 0 NEW_LINE DEDENT DEDENT DEDENT res = [ ] NEW_LINE for x in hotel : NEW_LINE INDENT res . append ( x ) NEW_LINE DEDENT print ( ' ' . join ( res ) ) NEW_LINE DEDENT
def B_Square ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE class B_Square ( ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT string = None NEW_LINE try : NEW_LINE INDENT s = string . strip ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT s = None NEW_LINE DEDENT DEDENT def next ( self ) : NEW_LINE INDENT while not s or not s : NEW_LINE INDENT try : NEW_LINE INDENT s = string . split ( s ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return s NEW_LINE DEDENT def randint ( self ) : NEW_LINE INDENT return int ( self . __next__ ) NEW_LINE DEDENT def long ( self ) : NEW_LINE INDENT return float ( self . __next__ ) NEW_LINE DEDENT def uniform ( self , self ) : NEW_LINE INDENT return float ( self . __next__ ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = " " NEW_LINE try : NEW_LINE INDENT if self . __next__ : NEW_LINE INDENT data = data . strip ( ) NEW_LINE DEDENT else : NEW_LINE INDENT data = data . strip ( ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT f = open ( " file " , " r " ) NEW_LINE T = f . readline ( ) . strip ( ) NEW_LINE while T != 0 : NEW_LINE INDENT T -= 1 NEW_LINE a1 , b1 , a2 , b2 = f . readline ( ) . split ( " \n " ) NEW_LINE r1 = list ( map ( min , a1 , b1 ) ) NEW_LINE r2 = list ( map ( min , a2 , b2 ) ) NEW_LINE if r1 [ 0 ] == r2 [ 0 ] and r1 [ 1 ] + r2 [ 1 ] == r1 [ 0 ] : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT elif r1 [ 1 ] == r2 [ 1 ] and r1 [ 0 ] + r2 [ 0 ] == r1 [ 1 ] : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT DEDENT return B_Square NEW_LINE DEDENT
def precision_compute ( x , y , n ) : NEW_LINE INDENT import sys NEW_LINE if y == 0 : NEW_LINE INDENT sys . stdout . write ( ' Infinite \n ' ) NEW_LINE return NEW_LINE DEDENT if x == 0 : NEW_LINE INDENT sys . stdout . write ( '0' ) NEW_LINE return NEW_LINE DEDENT if n <= 0 : NEW_LINE INDENT sys . stdout . write ( x / y ) NEW_LINE return NEW_LINE DEDENT if ( ( x > 0 and y < 0 ) or ( ( x < 0 and y > 0 ) ) ) : NEW_LINE INDENT sys . stdout . write ( ' - ' ) NEW_LINE x = x if x > 0 else - x NEW_LINE y = y if y > 0 else - y NEW_LINE DEDENT d = x / y NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT sys . stdout . write ( d ) NEW_LINE x = x - ( y * d ) NEW_LINE if not x : NEW_LINE INDENT break NEW_LINE DEDENT x = x * 10 NEW_LINE d = x / y NEW_LINE if not i : NEW_LINE INDENT sys . stdout . write ( ' . ' ) NEW_LINE DEDENT DEDENT DEDENT
def ggcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not b : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return math . gcd ( b , a % b ) NEW_LINE DEDENT DEDENT def lcmOfArray ( arr , n ) : NEW_LINE INDENT if n < 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lcm = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lcm = ( lcm * arr [ i ] ) / math . gcd ( lcm , arr [ i ] ) NEW_LINE DEDENT return lcm NEW_LINE DEDENT def minPerfectCube ( arr , n ) : NEW_LINE INDENT global minPerfectCube NEW_LINE lcm = lcmOfArray ( arr , n ) NEW_LINE minPerfectCube = lcm NEW_LINE cnt = 0 NEW_LINE while lcm > 1 and lcm % 2 == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= 2 NEW_LINE DEDENT if cnt % 3 == 2 : NEW_LINE INDENT minPerfectCube *= 2 NEW_LINE DEDENT elif cnt % 3 == 1 : NEW_LINE INDENT minPerfectCube *= 4 NEW_LINE DEDENT i = 3 NEW_LINE while lcm > 1 : NEW_LINE INDENT cnt = 0 NEW_LINE while lcm % i == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= i NEW_LINE DEDENT if cnt % 3 == 1 : NEW_LINE INDENT minPerfectCube *= i * i NEW_LINE DEDENT elif cnt % 3 == 2 : NEW_LINE INDENT minPerfectCube *= i NEW_LINE DEDENT i += 2 NEW_LINE DEDENT return minPerfectCube NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Node ( int ) : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = self . right = None NEW_LINE DEDENT DEDENT class BinaryTree ( Node ) : NEW_LINE INDENT def __init__ ( self , root ) : NEW_LINE INDENT self . root = root NEW_LINE DEDENT def print_specific_level_order_util ( self , s ) : NEW_LINE INDENT if not self . root : NEW_LINE INDENT return NEW_LINE DEDENT q = [ root . left , root . right ] NEW_LINE first , second = None , None NEW_LINE while not self . root : NEW_LINE INDENT first = q . pop ( ) NEW_LINE self . root . left = first . right NEW_LINE self . root . right = second . right NEW_LINE self . root . left = first . left NEW_LINE if first . left . left is not None : NEW_LINE INDENT q . append ( first . right ) NEW_LINE self . root . left = second . left NEW_LINE DEDENT if first . right is not None : NEW_LINE INDENT q . append ( first . right ) NEW_LINE self . root . left = first . right NEW_LINE DEDENT if first . left . left is not None : NEW_LINE INDENT print_specific_level_order_util ( first , s ) NEW_LINE DEDENT DEDENT while not self . root : NEW_LINE INDENT print ( self . root . data , end = ' ▁ ' ) NEW_LINE self . root . pop ( ) NEW_LINE DEDENT DEDENT DEDENT def main ( ) : NEW_LINE INDENT tree = BinaryTree ( ) NEW_LINE tree . root = Node ( 1 ) NEW_LINE tree . root . left = Node ( 2 ) NEW_LINE tree . root . right = Node ( 3 ) NEW_LINE print ( ' Specific ▁ Level ▁ Order ▁ Traversal ▁ of ▁ Binary ▁ Tree ▁ is ' ) NEW_LINE tree . print_specific_level_order ( tree . root ) NEW_LINE DEDENT DEDENT
def hollow_square ( rows ) : NEW_LINE INDENT global i , j NEW_LINE for i in range ( 1 , rows + 1 ) : NEW_LINE INDENT if i == 1 or i == rows : NEW_LINE INDENT for j in range ( 1 , rows + 1 ) : NEW_LINE INDENT print ( " * " , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for j in range ( 1 , rows + 1 ) : NEW_LINE INDENT if j == 1 or j == rows : NEW_LINE INDENT print ( " * " , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " ▁ " , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT print ( " \n " , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT def solid_square ( rows ) : NEW_LINE INDENT global i , j NEW_LINE for i in range ( 1 , rows + 1 ) : NEW_LINE INDENT for j in range ( 1 , rows + 1 ) : NEW_LINE INDENT print ( " * " , end = ' ▁ ' ) NEW_LINE DEDENT print ( " \n " , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def print_pattern ( rows ) : NEW_LINE INDENT print ( " Solid ▁ Square : \n " , end = ' ▁ ' ) NEW_LINE solid_square ( rows ) NEW_LINE print ( " \n Hollow ▁ Square : \n " , end = ' ▁ ' ) NEW_LINE hollow_square ( rows ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT rows = 5 NEW_LINE print_pattern ( rows ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT print ( ' a ' ) NEW_LINE DEDENT elif n == 2 : NEW_LINE INDENT print ( ' ab ' ) NEW_LINE DEDENT elif n == 3 : NEW_LINE INDENT print ( ' abc ' ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( n // 4 ) : NEW_LINE INDENT print ( ' abcd ' , end = ' ▁ ' ) NEW_LINE DEDENT t = n % 4 NEW_LINE if t == 1 : NEW_LINE INDENT print ( ' a ' ) NEW_LINE DEDENT elif t == 2 : NEW_LINE INDENT print ( ' ab ' ) NEW_LINE DEDENT elif t == 3 : NEW_LINE INDENT print ( ' abc ' ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . random NEW_LINE n = len ( sys . argv ) NEW_LINE data = np . zeros ( ( n + 1 , 2 ) ) NEW_LINE max_len = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT data [ i ] [ 0 ] = sys . maxsize NEW_LINE data [ i ] [ 1 ] = sys . maxsize NEW_LINE max_len += data [ i ] [ 0 ] NEW_LINE DEDENT sys . stdout . flush ( ) NEW_LINE dp = np . zeros ( ( max_len + 1 , ) ) NEW_LINE dp [ 0 ] = 10000 NEW_LINE dp [ 0 ] = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( max_len , len ( data [ i ] ) , - 1 ) : NEW_LINE INDENT dp [ j ] = min ( dp [ j ] , dp [ j - data [ i ] [ 0 ] ] + data [ i ] [ 1 ] ) NEW_LINE DEDENT DEDENT for i in range ( max_len , - 1 , - 1 ) : NEW_LINE INDENT if max_len - i >= dp [ i ] : NEW_LINE INDENT print ( max_len - i ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE a = sys . stdin . read ( ) NEW_LINE b = sys . stdin . read ( ) NEW_LINE x = sys . stdin . read ( ) NEW_LINE if ( x < a ) or ( ( a + b ) < x ) : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT DEDENT
def find_largest ( arr , n ) : NEW_LINE INDENT gcd = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT gcd = __gcd ( arr [ i ] , gcd ) NEW_LINE DEDENT return gcd NEW_LINE DEDENT
def find_winner ( n ) : NEW_LINE INDENT if ( n - 1 ) % 6 == 0 : NEW_LINE INDENT print ( " Second ▁ Player ▁ wins ▁ the ▁ game " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " First ▁ Player ▁ wins ▁ the ▁ game " ) NEW_LINE DEDENT DEDENT
def BFS ( s ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import list NEW_LINE import list NEW_LINE adj = [ list ( ) ] NEW_LINE def Graph ( v ) : NEW_LINE INDENT V = v NEW_LINE adj = [ [ ] ] NEW_LINE for i in range ( v ) : NEW_LINE INDENT adj [ i ] . append ( w ) NEW_LINE DEDENT DEDENT def Edge ( v , w ) : NEW_LINE INDENT adj [ v ] . append ( w ) NEW_LINE DEDENT def BFS ( s ) : NEW_LINE INDENT visited = [ False ] NEW_LINE queue = [ ] NEW_LINE visited [ s ] = True NEW_LINE queue . append ( s ) NEW_LINE while len ( queue ) != 0 : NEW_LINE INDENT s = queue . pop ( ) NEW_LINE print ( s , end = ' ▁ ' ) NEW_LINE for ( n , v ) in adj [ s ] : NEW_LINE INDENT if not visited [ n ] : NEW_LINE INDENT visited [ n ] = True NEW_LINE queue . append ( n ) NEW_LINE DEDENT DEDENT DEDENT DEDENT g = Graph ( 4 ) NEW_LINE g . add_edge ( 0 , 1 ) NEW_LINE g . add_edge ( 0 , 2 ) NEW_LINE g . add_edge ( 1 , 2 ) NEW_LINE g . add_edge ( 2 , 0 ) NEW_LINE g . add_edge ( 2 , 3 ) NEW_LINE g . add_edge ( 3 , 3 ) NEW_LINE print ( ' Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ ' ' ( starting ▁ from ▁ vertex ▁ 2 ) ' ) NEW_LINE g . BFS ( 2 ) NEW_LINE DEDENT
def BFS ( s ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import list NEW_LINE import list NEW_LINE adj = [ list ( ) ] NEW_LINE def Graph ( v ) : NEW_LINE INDENT V = v NEW_LINE adj = [ [ ] ] NEW_LINE for i in range ( v ) : NEW_LINE INDENT adj [ i ] . append ( w ) NEW_LINE DEDENT DEDENT def Edge ( v , w ) : NEW_LINE INDENT adj [ v ] . append ( w ) NEW_LINE DEDENT def BFS ( s ) : NEW_LINE INDENT visited = [ False ] NEW_LINE queue = [ ] NEW_LINE visited [ s ] = True NEW_LINE queue . append ( s ) NEW_LINE while len ( queue ) != 0 : NEW_LINE INDENT s = queue . pop ( ) NEW_LINE print ( s , end = ' ▁ ' ) NEW_LINE for ( n , v ) in adj [ s ] : NEW_LINE INDENT if not visited [ n ] : NEW_LINE INDENT visited [ n ] = True NEW_LINE queue . append ( n ) NEW_LINE DEDENT DEDENT DEDENT DEDENT g = Graph ( 4 ) NEW_LINE g . add_edge ( 0 , 1 ) NEW_LINE g . add_edge ( 0 , 2 ) NEW_LINE g . add_edge ( 1 , 2 ) NEW_LINE g . add_edge ( 2 , 0 ) NEW_LINE g . add_edge ( 2 , 3 ) NEW_LINE g . add_edge ( 3 , 3 ) NEW_LINE print ( ' Following ▁ is ▁ Breadth ▁ First ▁ Traversal ▁ ' ' ( starting ▁ from ▁ vertex ▁ 2 ) ' ) NEW_LINE g . BFS ( 2 ) NEW_LINE DEDENT
def get_elements ( a , arr , n ) : NEW_LINE INDENT elements = [ a ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT elements [ i + 1 ] = arr [ i ] ^ elements [ i ] NEW_LINE DEDENT for i in range ( n + 1 ) : NEW_LINE INDENT print ( elements [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def A ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE cs = [ ' P ' , ' R ' , ' S ' ] NEW_LINE dp = [ [ ' P ' , ' R ' , ' S ' ] ] NEW_LINE for i in range ( 1 , len ( dp [ 0 ] ) ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT dp [ j ] [ i ] = dp [ j ] [ i - 1 ] + dp [ ( j + 1 ) % 3 ] [ i - 1 ] NEW_LINE o = dp [ ( j + 1 ) % 3 ] [ i - 1 ] + dp [ j ] [ i - 1 ] NEW_LINE if o < dp [ j ] [ i ] : NEW_LINE INDENT dp [ j ] [ i ] = o NEW_LINE DEDENT DEDENT DEDENT T = len ( sys . stdin ) NEW_LINE for i in range ( 1 , T + 1 ) : NEW_LINE INDENT sys . stdout . write ( ' Case ▁ # % d : ▁ ' % i ) NEW_LINE sys . stdout . write ( solve ( ) ) NEW_LINE DEDENT return ' IMPOSSIBLE ' if ret is None else ret NEW_LINE DEDENT
def _30_Chips ( ) : NEW_LINE INDENT import re NEW_LINE scn = int ( sys . stdin . read ( ) ) NEW_LINE k = len ( scn ) NEW_LINE row = [ False ] * n NEW_LINE col = [ False ] * n NEW_LINE for i in range ( k ) : NEW_LINE INDENT val = scn [ i ] NEW_LINE val2 = scn [ i ] NEW_LINE row [ val - 1 ] = True NEW_LINE col [ val2 - 1 ] = True NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT if n % 2 == 1 and i == n // 2 : NEW_LINE INDENT if not row [ i ] or not col [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT elif not row [ i ] or not col [ i ] : NEW_LINE INDENT ans = ans + ( 2 if ( not row [ i ] and not col [ i ] ) else 1 ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def print_repeating ( arr , size ) : NEW_LINE INDENT S = 0 NEW_LINE P = 1 NEW_LINE x , y = 0 , 0 NEW_LINE D = 0 NEW_LINE n = size - 2 , i NEW_LINE for i in range ( size ) : NEW_LINE INDENT S = S + arr [ i ] NEW_LINE P = P * arr [ i ] NEW_LINE DEDENT S = S - n * ( n + 1 ) / 2 NEW_LINE P = P / math . factorial ( n ) NEW_LINE D = int ( math . sqrt ( S ** 2 - 4 * P ) ) NEW_LINE x = ( D + S ) / 2 NEW_LINE y = ( S - D ) / 2 NEW_LINE print ( " The ▁ two ▁ repeating ▁ elements ▁ are : ▁ " , x , y , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ " , end = " ▁ " , end = " ▁ " , end = " ▁ & ▁ " , end = " ▁ & ▁ " , end = " ▁ " ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE count = 1 NEW_LINE is_prime = np . zeros ( 10001 ) NEW_LINE primes = np . zeros ( 100000 ) NEW_LINE sum = np . zeros ( 100000 ) NEW_LINE def is_prime ( i ) : NEW_LINE INDENT is_prime [ i ] = True NEW_LINE is_prime [ i ] = False NEW_LINE for i in range ( 0 , i * i + 1 ) : NEW_LINE INDENT if is_prime [ i ] : NEW_LINE INDENT for j in range ( i + i , len ( is_prime ) , i ) : NEW_LINE INDENT is_prime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT for i in is_prime : NEW_LINE INDENT if i : NEW_LINE INDENT primes [ count ] = i NEW_LINE sum [ count ] = sum [ count - 1 ] + primes [ count ] NEW_LINE count += 1 NEW_LINE DEDENT DEDENT DEDENT def main ( ) : NEW_LINE INDENT with open ( ' / tmp / ' , ' r ' ) as cin : NEW_LINE INDENT while True : NEW_LINE INDENT n = cin . readline ( ) NEW_LINE cnt = 0 NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT for i in range ( count ) : NEW_LINE INDENT for j in range ( i + 1 , count ) : NEW_LINE INDENT if sum [ j ] - sum [ i ] == n : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT DEDENT print ( cnt ) NEW_LINE DEDENT DEDENT DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return math NEW_LINE DEDENT if math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT else : NEW_LINE INDENT return math . nan NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT sc = sys . stdin NEW_LINE DEDENT except : NEW_LINE INDENT print ( " Error " ) NEW_LINE return 1 NEW_LINE DEDENT try : NEW_LINE INDENT while True : NEW_LINE INDENT st = sc . readline ( ) NEW_LINE if st == " # " : NEW_LINE INDENT break NEW_LINE DEDENT c = st . split ( ) NEW_LINE count , t = 0 , check ( c [ 0 ] ) NEW_LINE for c in c [ 1 : ] : NEW_LINE INDENT if t != check ( c [ c [ c [ 0 ] ] ] ) : NEW_LINE INDENT count += 1 NEW_LINE t = check ( c [ c [ c [ 0 ] ] ] ) NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT print ( " Error " ) NEW_LINE return 1 NEW_LINE DEDENT return 2 NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return ' ' . join ( str ( n ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁ ' , ' ' ) . replace ( ' ▁
def test_247 ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE for j in range ( t ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE a = [ ] NEW_LINE max = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . maxsize ) NEW_LINE DEDENT if n == 2 : NEW_LINE INDENT max = a [ 0 ] * a [ 1 ] NEW_LINE DEDENT for i in range ( 1 , n - 1 ) : NEW_LINE INDENT if a [ i - 1 ] > a [ i + 1 ] : NEW_LINE INDENT if a [ i ] * a [ i - 1 ] > max : NEW_LINE INDENT max = a [ i ] * a [ i - 1 ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if a [ i ] * a [ i + 1 ] > max : NEW_LINE INDENT max = a [ i ] * a [ i + 1 ] NEW_LINE DEDENT DEDENT DEDENT print ( max ) NEW_LINE DEDENT DEDENT
def find_gcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE def find_gcd ( m , n , a , b ) : NEW_LINE INDENT lcm = find_gcd ( a , b ) NEW_LINE a_divisor = n // a - ( m - 1 ) // a NEW_LINE b_divisor = n // b - ( m - 1 ) // b NEW_LINE common_divisor = n // lcm - ( m - 1 ) // lcm NEW_LINE ans = a_divisor + b_divisor - common_divisor NEW_LINE return ans NEW_LINE DEDENT return find_gcd NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE class Punctuation ( object ) : NEW_LINE INDENT def is_latin_letter ( c ) : NEW_LINE INDENT return ord ( c ) >= ord ( ' a ' ) and ord ( c ) <= ord ( ' z ' ) NEW_LINE DEDENT def is_punctuation ( c ) : NEW_LINE INDENT if c == ' . ' : NEW_LINE INDENT return True NEW_LINE DEDENT if c == ' , ' : NEW_LINE INDENT return True NEW_LINE DEDENT if c == ' ! ' : NEW_LINE INDENT return True NEW_LINE DEDENT if c == ' ? ' : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT s = sys . stdin . read ( ) NEW_LINE s = [ s [ 0 ] ] NEW_LINE for c in s [ 1 : ] : NEW_LINE INDENT if is_latin_letter ( c ) : NEW_LINE INDENT if not is_latin_letter ( c ) : NEW_LINE INDENT s . append ( ' ▁ ' ) NEW_LINE DEDENT s . append ( c ) NEW_LINE DEDENT elif is_punctuation ( c ) : NEW_LINE INDENT s . append ( c ) NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT DEDENT return Punctuation ( ) NEW_LINE DEDENT
def smallest_kfreq ( a , n , k ) : NEW_LINE INDENT import sys NEW_LINE m = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] in m : NEW_LINE INDENT m [ a [ i ] ] = m [ a [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ a [ i ] ] = 1 NEW_LINE DEDENT DEDENT res = sys . maxsize NEW_LINE s = m . keys ( ) NEW_LINE for temp in s : NEW_LINE INDENT if m [ temp ] == k : NEW_LINE INDENT res = min ( res , temp ) NEW_LINE DEDENT DEDENT return ( res if res != sys . maxsize else - 1 ) NEW_LINE DEDENT
def are_vowels_in_order ( s ) : NEW_LINE INDENT import string NEW_LINE n = len ( s ) NEW_LINE c = chr ( 64 ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if s [ i ] in " ▁ a ▁ " or s [ i ] in " ▁ e ▁ " or s [ i ] in " ▁ i ▁ " or s [ i ] in " ▁ o ▁ " or s [ i ] in " ▁ u ▁ " : NEW_LINE INDENT if s [ i ] < c : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT c = s [ i ] NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE a = [ 0 ] * 180 NEW_LINE b = [ 0 ] * 45 NEW_LINE already_a = [ ] * 1000000 NEW_LINE already_b = [ ] * 1000000 NEW_LINE cnt = 0 NEW_LINE for i in range ( 1 , len ( a ) ) : NEW_LINE INDENT t = a [ i ] NEW_LINE a [ cnt ] = t NEW_LINE DEDENT for i in range ( 1 , len ( a ) ) : NEW_LINE INDENT pass NEW_LINE DEDENT already_a = [ 0 ] * 1000000 NEW_LINE already_b = [ 0 ] * 1000000 NEW_LINE cnt = 0 NEW_LINE for i in range ( 1 , len ( a ) ) : NEW_LINE INDENT t = b [ i ] NEW_LINE if t % 2 == 1 : NEW_LINE INDENT b [ cnt ] = t NEW_LINE cnt += 1 NEW_LINE DEDENT DEDENT def a ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT N = os . getppid ( a [ 0 ] ) NEW_LINE if N == 0 : NEW_LINE INDENT break NEW_LINE DEDENT cnt = 0 NEW_LINE min = sys . maxsize NEW_LINE print ( already_a [ N ] , end = ' ▁ ' , end = ' ▁ ' , end = ' ▁ ' ) NEW_LINE print ( already_b [ N ] , end = ' ▁ ' , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def a ( ) : NEW_LINE INDENT for i in range ( 1 , 1000000 ) : NEW_LINE INDENT mina = sys . maxsize NEW_LINE minb = sys . maxsize NEW_LINE x , y = 0 , 0 NEW_LINE for j in range ( 180 and a [ j ] <= i + 1 ) : NEW_LINE INDENT mina = min ( 1 + already_a [ i - a [ j ] ] , mina ) NEW_LINE if a [ j ] % 2 == 1 : NEW_LINE INDENT minb = min ( 1 + already_b [ i - a [ j ] ] , minb ) NEW_LINE DEDENT DEDENT already_a [ i ] = mina NEW_LINE already_b [ i ] = minb NEW_LINE DEDENT DEDENT def tetrahedral ( a ) : NEW_LINE INDENT return ( a * ( a + 1 ) * ( a + 2 ) ) / 6 NEW_LINE DEDENT return a , b , cnt NEW_LINE DEDENT
def count_of_letters ( data ) : NEW_LINE INDENT letter = 0 NEW_LINE for c in data : NEW_LINE INDENT if ( ord ( c ) >= ord ( ' A ' ) and ord ( c ) <= ord ( ' Z ' ) ) or ( ord ( c ) >= ord ( ' a ' ) and ord ( c ) <= ord ( ' z ' ) ) : NEW_LINE INDENT letter += 1 NEW_LINE DEDENT DEDENT return letter NEW_LINE DEDENT def count_of_numbers ( data ) : NEW_LINE INDENT number = 0 NEW_LINE for c in data : NEW_LINE INDENT if ord ( c ) >= ord ( '0' ) and ord ( c ) <= ord ( '9' ) : NEW_LINE INDENT number += 1 NEW_LINE DEDENT DEDENT return number NEW_LINE DEDENT def check ( data ) : NEW_LINE INDENT if count_of_letters ( data ) == count_of_numbers ( data ) : NEW_LINE INDENT sys . stdout . write ( ' Yes \n ' ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' No \n ' ) NEW_LINE DEDENT DEDENT def main ( data ) : NEW_LINE INDENT data = ' GeeKs01324' NEW_LINE check ( data ) NEW_LINE DEDENT return ' ' . join ( [ chr ( i ) for i in range ( len ( data ) ) ] ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT box = [ 0 ] * 10 NEW_LINE i = 0 NEW_LINE for n in range ( 10 ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT i -= 1 NEW_LINE print ( box [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT box [ i ] = n NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT N , x = int ( sys . stdin . readline ( ) ) , int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT print ( " No ▁ input " ) NEW_LINE return NEW_LINE DEDENT if x == 1 or x == 2 * N - 1 : NEW_LINE INDENT print ( " No " ) NEW_LINE return NEW_LINE DEDENT print ( " Yes " ) NEW_LINE low , high = x - 1 , x + 1 NEW_LINE deq = [ x ] NEW_LINE while low != 0 or high != 2 * N : NEW_LINE INDENT if low == 0 : NEW_LINE INDENT deq . append ( high ) NEW_LINE deq . append ( high + 1 ) NEW_LINE high += 2 NEW_LINE DEDENT elif high == 2 * N : NEW_LINE INDENT deq . append ( low ) NEW_LINE deq . append ( low - 1 ) NEW_LINE low -= 2 NEW_LINE DEDENT else : NEW_LINE INDENT deq . append ( low ) NEW_LINE low -= 1 NEW_LINE deq . append ( high ) NEW_LINE high += 1 NEW_LINE DEDENT DEDENT for s in deq : NEW_LINE INDENT print ( s ) NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT global perfect_div NEW_LINE MAX = 100001 NEW_LINE perfect_div = [ 0 ] * MAX NEW_LINE def precompute_counts ( ) : NEW_LINE INDENT for i in range ( 1 , MAX ) : NEW_LINE INDENT for j in range ( i * i , MAX + i * i ) : NEW_LINE INDENT perfect_div [ j ] += 1 NEW_LINE DEDENT DEDENT DEDENT def count_perfect_divisors ( n ) : NEW_LINE INDENT return perfect_div [ n ] NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT precompute_counts ( ) NEW_LINE n = 16 NEW_LINE print ( ' Total ▁ perfect ▁ divisors ▁ of ▁ % d ▁ = ▁ % d ' % ( n , count_perfect_divisors ( n ) ) ) NEW_LINE n = 12 NEW_LINE print ( ' Total ▁ perfect ▁ divisors ▁ of ▁ % d ▁ = ▁ % d ' % ( n , count_perfect_divisors ( n ) ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE m = int ( sys . stdin . readline ( ) ) NEW_LINE nn = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT nn += int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT mm = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT mm += int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT print ( nn * mm ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE class Main ( sys . stdin ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdin . close ( ) NEW_LINE self . n = len ( sys . stdin ) NEW_LINE self . t = len ( sys . stdin ) NEW_LINE self . e = len ( sys . stdin ) NEW_LINE self . x = [ ] NEW_LINE for i in range ( self . n ) : NEW_LINE INDENT self . x . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT for i in range ( self . n ) : NEW_LINE INDENT check = self . x [ i ] * ( ( self . t + self . e ) / self . x [ i ] ) NEW_LINE if check <= self . t + self . e and check >= self . t - self . e : NEW_LINE INDENT print ( ( i + 1 ) ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( - 1 ) NEW_LINE DEDENT DEDENT DEDENT
def cal_IST ( h , r ) : NEW_LINE INDENT IST = ( h * r * 1.0 ) / 360 NEW_LINE int_IST = int ( IST ) NEW_LINE float_IST = int ( math . ceil ( int ( ( IST - int_IST ) * 60 ) ) ) NEW_LINE print ( " % d : % d " % ( int_IST , float_IST ) ) NEW_LINE DEDENT
def print_roots ( n ) : NEW_LINE INDENT import math NEW_LINE theta = math . pi * 2 / n NEW_LINE for k in range ( n ) : NEW_LINE INDENT real = math . cos ( k * theta ) NEW_LINE img = math . sin ( k * theta ) NEW_LINE print ( " % . 3 f " % real , end = " " ) NEW_LINE if img >= 0 : NEW_LINE INDENT print ( " ▁ + ▁ i ▁ " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " ▁ - ▁ i ▁ " , end = " " ) NEW_LINE DEDENT print ( " % . 3 f " % abs ( img ) ) NEW_LINE DEDENT DEDENT
def find_cart ( arr1 , arr2 , n , n1 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n1 ) : NEW_LINE INDENT print ( ' { % d , ▁ % d } , ▁ ' % ( arr1 [ i ] , arr2 [ j ] ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def no_of_ways ( s ) : NEW_LINE INDENT import string NEW_LINE n = len ( s ) NEW_LINE count_left , count_right = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == s [ 0 ] : NEW_LINE INDENT count_left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if s [ i ] == s [ n - 1 ] : NEW_LINE INDENT count_right += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if s [ 0 ] == s [ n - 1 ] : NEW_LINE INDENT return ( ( count_left + 1 ) * ( count_right + 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( count_left + count_right + 1 ) NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT global prime NEW_LINE MAX = 1000000 NEW_LINE prime = [ True ] * ( MAX + 1 ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT for i in range ( MAX ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT prime [ 1 ] = False NEW_LINE prime [ 0 ] = False NEW_LINE for p in range ( 2 , p * MAX + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def SumOfKthPrimes ( arr , n , k ) : NEW_LINE INDENT c = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prime [ arr [ i ] ] : NEW_LINE INDENT c += 1 NEW_LINE if c % k == 0 : NEW_LINE INDENT sum += arr [ i ] NEW_LINE c = 0 NEW_LINE DEDENT DEDENT DEDENT print ( sum ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE arr = [ 2 , 3 , 5 , 7 , 11 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE SumOfKthPrimes ( arr , n , k ) NEW_LINE DEDENT return ' ' . join ( str ( n ) for n in range ( n ) ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT global prime NEW_LINE MAX = 1000000 NEW_LINE prime = [ False ] * ( MAX + 1 ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT for i in range ( 0 , MAX + 1 ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT prime [ 1 ] = False NEW_LINE prime [ 0 ] = False NEW_LINE for p in range ( 2 , p * MAX + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def solve ( arr , n , k ) : NEW_LINE INDENT c = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prime [ arr [ i ] ] : NEW_LINE INDENT c += 1 NEW_LINE if c % k == 0 : NEW_LINE INDENT sum += arr [ i ] NEW_LINE c = 0 NEW_LINE DEDENT DEDENT DEDENT print ( sum ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n , k = 5 , 2 NEW_LINE arr = [ 2 , 3 , 5 , 7 , 11 ] NEW_LINE solve ( arr , n , k ) NEW_LINE DEDENT return NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT global prime NEW_LINE prime = [ False ] * ( MAX + 1 ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime [ 1 ] = True NEW_LINE prime [ 0 ] = True NEW_LINE for p in range ( 2 , p * MAX + 1 ) : NEW_LINE INDENT if prime [ p ] == False : NEW_LINE INDENT for i in range ( p * 2 , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT DEDENT DEDENT DEDENT def productOfKthPrimes ( arr , n , k ) : NEW_LINE INDENT c = 0 NEW_LINE product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if not prime [ arr [ i ] ] : NEW_LINE INDENT c += 1 NEW_LINE if c % k == 0 : NEW_LINE INDENT product *= arr [ i ] NEW_LINE c = 0 NEW_LINE DEDENT DEDENT DEDENT print ( product ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n , k = 5 , 2 NEW_LINE arr = [ 2 , 3 , 5 , 7 , 11 ] NEW_LINE productOfKthPrimes ( arr , n , k ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def find_all_sequences ( diff , out , start , end ) : NEW_LINE INDENT if abs ( diff ) > ( end - start + 1 ) // 2 : NEW_LINE INDENT return NEW_LINE DEDENT if start > end : NEW_LINE INDENT if diff == 0 : NEW_LINE INDENT print ( out [ : - 1 ] , end = end ) NEW_LINE print ( ' ▁ ' , end = end ) NEW_LINE DEDENT return NEW_LINE DEDENT out [ start ] = '0' NEW_LINE out [ end ] = '1' NEW_LINE find_all_sequences ( diff + 1 , out , start + 1 , end - 1 ) NEW_LINE out [ start ] = out [ end ] = '1' NEW_LINE find_all_sequences ( diff , out , start + 1 , end - 1 ) NEW_LINE out [ start ] = out [ end ] = '0' NEW_LINE find_all_sequences ( diff , out , start + 1 , end - 1 ) NEW_LINE out [ start ] = '1' NEW_LINE out [ end ] = '0' NEW_LINE find_all_sequences ( diff - 1 , out , start + 1 , end - 1 ) NEW_LINE DEDENT
def NarrowFridge ( ) : NEW_LINE INDENT import sys NEW_LINE n , h = sys . maxsize , sys . maxsize NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sys . stdin . read ( n ) ) NEW_LINE DEDENT overAllPq = list ( reversed ( overAllPq ) ) NEW_LINE ans = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT overAllPq . append ( arr [ i ] ) NEW_LINE pq = list ( reversed ( overAllPq ) ) NEW_LINE c1 , c2 = h , h NEW_LINE flag = True NEW_LINE while not pq : NEW_LINE INDENT if flag : NEW_LINE INDENT if c1 >= pq [ - 1 ] : NEW_LINE INDENT c1 -= pq [ - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT flag = False NEW_LINE DEDENT else : NEW_LINE INDENT if c2 >= pq [ - 1 ] : NEW_LINE INDENT c2 -= pq [ - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT flag = True NEW_LINE DEDENT DEDENT if not pq : NEW_LINE INDENT ans = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT class GFG ( object ) : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = None NEW_LINE DEDENT def printList ( self , node ) : NEW_LINE INDENT while node is not None : NEW_LINE INDENT print ( " % d ▁ - > ▁ " % self . data , end = " ▁ " ) NEW_LINE node = node . next NEW_LINE DEDENT print ( " NULL " ) NEW_LINE DEDENT def cntNodes ( self , node ) : NEW_LINE INDENT if not node : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( 1 + cntNodes ( node . next ) ) NEW_LINE DEDENT def updateList ( head , m ) : NEW_LINE INDENT cnt = cntNodes ( head ) NEW_LINE if cnt != m and m < cnt : NEW_LINE INDENT skip = cnt - m NEW_LINE prev = None NEW_LINE curr = head NEW_LINE while skip > 0 : NEW_LINE INDENT prev = curr NEW_LINE curr = curr . next NEW_LINE skip -= 1 NEW_LINE DEDENT prev . next = None NEW_LINE tempHead = head NEW_LINE head = curr NEW_LINE while curr . next is not None : NEW_LINE INDENT curr = curr . next NEW_LINE DEDENT curr . next = tempHead NEW_LINE DEDENT DEDENT DEDENT return GFG ( ) NEW_LINE DEDENT
def max_sub_strings ( s , k ) : NEW_LINE INDENT max_sub_str , n = 0 , len ( s ) NEW_LINE for c in range ( 26 ) : NEW_LINE INDENT ch = chr ( ord ( ' a ' ) + ord ( c ) ) NEW_LINE curr = 0 NEW_LINE for i in range ( 0 , n - k + 1 ) : NEW_LINE INDENT if s [ i ] != ch : NEW_LINE INDENT continue NEW_LINE DEDENT cnt = 0 NEW_LINE while i < n and s [ i ] == ch and cnt != k : NEW_LINE INDENT i += 1 NEW_LINE cnt += 1 NEW_LINE DEDENT i -= 1 NEW_LINE if cnt == k : NEW_LINE INDENT curr += 1 NEW_LINE DEDENT DEDENT max_sub_str = max ( max_sub_str , curr ) NEW_LINE DEDENT return max_sub_str NEW_LINE DEDENT
def ansQueries ( prefeven , prefodd , l , r ) : NEW_LINE INDENT import string NEW_LINE if ( r - l + 1 ) % 2 == 0 : NEW_LINE INDENT print ( '0' ) NEW_LINE DEDENT else : NEW_LINE INDENT if l % 2 == 0 : NEW_LINE INDENT print ( prefeven [ r ] ^ prefeven [ l - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( prefodd [ r ] ^ prefodd [ l - 1 ] ) NEW_LINE DEDENT DEDENT def wrapper ( arr , n , l , r , q ) : NEW_LINE INDENT prefodd = [ 0 ] * 100 NEW_LINE prefeven = [ 0 ] * 100 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( i ) % 2 == 0 : NEW_LINE INDENT prefeven [ i ] = arr [ i - 1 ] ^ prefeven [ i - 1 ] NEW_LINE prefodd [ i ] = prefodd [ i - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT prefeven [ i ] = prefeven [ i - 1 ] NEW_LINE prefodd [ i ] = prefodd [ i - 1 ] ^ arr [ i - 1 ] NEW_LINE DEDENT DEDENT i = 0 NEW_LINE while i != q : NEW_LINE INDENT ansQueries ( prefeven , prefodd , l [ i ] , r [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE l = [ 1 , 1 , 2 ] NEW_LINE r = [ 2 , 3 , 4 ] NEW_LINE q = len ( l ) NEW_LINE wrapper ( arr , n , l , r , q ) NEW_LINE DEDENT return ' ' . join ( list ( map ( wrapper , prefeven ) ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE n = len ( sys . argv ) NEW_LINE ans = [ random . randint ( 0 , len ( sys . argv ) ) for i in range ( n ) ] NEW_LINE ans . sort ( ) NEW_LINE count = ans [ n - 1 ] NEW_LINE for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT if ans [ i ] < ans [ i + 1 ] : NEW_LINE INDENT count += ans [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT while ans [ i ] >= ans [ i + 1 ] : NEW_LINE INDENT ans [ i ] -= 1 NEW_LINE DEDENT if ans [ i ] > 0 : NEW_LINE INDENT count += ans [ i ] NEW_LINE DEDENT DEDENT DEDENT print ( count ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import list NEW_LINE import string NEW_LINE import random NEW_LINE import sys NEW_LINE class FastReader ( sys . stdin ) : NEW_LINE INDENT def readline ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return sys . stdin . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return None NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT while None or not next ( ) : NEW_LINE INDENT try : NEW_LINE INDENT sys . stdin . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return next ( ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return int ( next ( ) ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return int ( next ( ) ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return int ( next ( ) ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return float ( next ( ) ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return next ( ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return next ( ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return next ( ) NEW_LINE DEDENT def __next__ ( ) : NEW_LINE INDENT return next ( ) NEW_LINE DEDENT DEDENT DEDENT return None NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE q = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT Stack = { } NEW_LINE s = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT L = [ ] NEW_LINE Stack [ i ] . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT for cmd , t in enumerate ( sys . stdin . readline ( ) . strip ( ) ) : NEW_LINE INDENT if cmd == 0 : NEW_LINE INDENT Stack [ t ] . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT elif cmd == 1 and len ( Stack [ t ] ) != 0 : NEW_LINE INDENT s . append ( ' % d \n ' % len ( Stack [ t ] ) ) NEW_LINE DEDENT elif cmd == 2 and len ( Stack [ t ] ) != 0 : NEW_LINE INDENT Stack [ t ] . pop ( ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' ' . join ( s ) ) NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT def removeMin ( arr , n ) : NEW_LINE INDENT i , minVal = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT minVal = min ( minVal , arr [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = arr [ i ] - minVal NEW_LINE DEDENT DEDENT def removeFromMax ( arr , n ) : NEW_LINE INDENT i , maxVal = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT maxVal = max ( maxVal , arr [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = maxVal - arr [ i ] NEW_LINE DEDENT DEDENT def modifyArray ( arr , n , k ) : NEW_LINE INDENT if k % 2 == 0 : NEW_LINE INDENT removeMin ( arr , n ) NEW_LINE DEDENT else : NEW_LINE INDENT removeFromMax ( arr , n ) NEW_LINE DEDENT return arr , n NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 4 , 8 , 12 , 16 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE modifyArray ( arr , n , k ) NEW_LINE DEDENT DEDENT
def find_centroid ( v ) : NEW_LINE INDENT ans = [ ] NEW_LINE n = len ( v ) NEW_LINE signed_area = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x0 , y0 = v [ i ] [ 0 ] , v [ i ] [ 1 ] NEW_LINE x1 , y1 = v [ ( i + 1 ) % n ] [ 0 ] , v [ ( i + 1 ) % n ] [ 1 ] NEW_LINE A = ( x0 * y1 ) - ( x1 * y0 ) NEW_LINE signed_area += A NEW_LINE ans . append ( ( x0 + x1 ) * A ) NEW_LINE ans . append ( ( y0 + y1 ) * A ) NEW_LINE DEDENT signed_area *= 0.5 NEW_LINE ans . append ( ( ans [ 0 ] ) / ( 6 * signed_area ) ) NEW_LINE ans . append ( ( ans [ 1 ] ) / ( 6 * signed_area ) ) NEW_LINE return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE color = " blue " NEW_LINE locked = False NEW_LINE f = open ( " / etc / init . d / " ) NEW_LINE _ = f . readlines ( ) NEW_LINE for i in range ( len ( _ ) ) : NEW_LINE INDENT next = _ [ i ] NEW_LINE if " lock " == next . strip ( ) : NEW_LINE INDENT locked = True NEW_LINE continue NEW_LINE DEDENT if " unlock " == next . strip ( ) : NEW_LINE INDENT locked = False NEW_LINE continue NEW_LINE DEDENT if locked : NEW_LINE INDENT continue NEW_LINE DEDENT color = next NEW_LINE DEDENT print ( color ) NEW_LINE DEDENT
def min_operations ( ar , k ) : NEW_LINE INDENT ar . sort ( ) NEW_LINE ops_needed = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT ops_needed += ar [ k - 1 ] - ar [ i ] NEW_LINE DEDENT ans = ops_needed NEW_LINE for i in range ( k , len ( ar ) ) : NEW_LINE INDENT ops_needed = ops_needed - ( ar [ i - 1 ] - ar [ i - k ] ) NEW_LINE ops_needed += ( k - 1 ) * ( ar [ i ] - ar [ i - 1 ] ) NEW_LINE ans = min ( ans , ops_needed ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def char_check ( input_char ) : NEW_LINE INDENT import string NEW_LINE if ( input_char >= 65 and input_char <= 90 ) or ( input_char >= 97 and input_char <= 122 ) : NEW_LINE INDENT print ( " Alphabet ▁ " ) NEW_LINE DEDENT elif input_char >= 48 and input_char <= 57 : NEW_LINE INDENT print ( " Digit ▁ " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Special ▁ Character ▁ " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT list = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT list . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT d = { } NEW_LINE d [ i + 1 ] = 1 NEW_LINE flag = 0 NEW_LINE j = i NEW_LINE while flag == 0 : NEW_LINE INDENT if list [ j ] not in d : NEW_LINE INDENT d [ list [ j ] ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE print ( list [ j ] , end = ' ▁ ' ) NEW_LINE DEDENT j = list [ j ] NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT DEDENT
def zer ( ) : NEW_LINE INDENT import string NEW_LINE n = len ( string . ascii_lowercase ) NEW_LINE m = len ( string . ascii_lowercase ) NEW_LINE p = [ 0 ] * n NEW_LINE tab = [ [ ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT p [ i ] = string . ascii_lowercase [ i ] NEW_LINE tab [ i ] = set ( ) NEW_LINE DEDENT ans = 3000003 NEW_LINE for i in range ( m ) : NEW_LINE INDENT a = string . ascii_lowercase [ i ] - 1 NEW_LINE b = string . ascii_lowercase [ i ] - 1 NEW_LINE for x in tab [ a ] : NEW_LINE INDENT if x in tab [ b ] : NEW_LINE INDENT ans = min ( p [ a ] + p [ b ] + p [ x ] , ans ) NEW_LINE DEDENT DEDENT tab [ a ] . add ( b ) NEW_LINE tab [ b ] . add ( a ) NEW_LINE DEDENT if ans == 3000003 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT DEDENT
def CF67B ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE return string NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE return string NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE return string . join ( sys . version_info [ 1 : ] , ' ' ) NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE return string . join ( sys . version , ' ' ) NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE return string . join ( sys . version , ' ' ) NEW_LINE DEDENT return string . join ( sys . version , ' ' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import re NEW_LINE class B147 ( object ) : NEW_LINE INDENT def __init__ ( self , x , y ) : NEW_LINE INDENT self . x = x NEW_LINE self . y = y NEW_LINE DEDENT def __call__ ( self , x , y ) : NEW_LINE INDENT return x + y NEW_LINE DEDENT DEDENT n = len ( sys . argv ) NEW_LINE c = [ ] NEW_LINE table = np . zeros ( ( 50 , 50 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT c . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT d = { } NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , c [ i - 1 ] + 1 ) : NEW_LINE INDENT cell = int ( sys . stdin . read ( ) ) NEW_LINE d [ cell ] = ( i , j ) NEW_LINE table [ i - 1 ] [ j - 1 ] = cell NEW_LINE DEDENT DEDENT cnt = 0 NEW_LINE m = 0 NEW_LINE s = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( c [ i ] ) : NEW_LINE INDENT cnt += 1 NEW_LINE if c [ i - 1 ] == cnt : NEW_LINE INDENT continue NEW_LINE DEDENT s . append ( ' % d ▁ % d ▁ % d \n ' % ( i + 1 , j + 1 , c [ i - 1 ] ) ) NEW_LINE point = d [ cnt ] NEW_LINE s . append ( ' % d ▁ % d \n ' % ( point [ 0 ] , point [ 1 ] ) ) NEW_LINE tmp = table [ i ] [ j ] NEW_LINE table [ i ] [ j ] = table [ point [ 0 ] - 1 ] [ point [ 1 ] - 1 ] NEW_LINE table [ point [ 0 ] - 1 ] [ point [ 1 ] - 1 ] = tmp NEW_LINE d [ tmp ] = point NEW_LINE m += 1 NEW_LINE DEDENT DEDENT print ( m ) NEW_LINE s = ' ' . join ( s ) NEW_LINE if m > 0 : NEW_LINE INDENT print ( s ) NEW_LINE DEDENT DEDENT
def same_occurrence ( arr , n , x , y ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( 0 , n - 1 + 1 ) : NEW_LINE INDENT ct_x , ct_y = 0 , 0 NEW_LINE for j in range ( i , n - 1 + 1 ) : NEW_LINE INDENT if arr [ j ] == x : NEW_LINE INDENT ct_x += 1 NEW_LINE DEDENT elif arr [ j ] == y : NEW_LINE INDENT ct_y += 1 NEW_LINE DEDENT if ct_x == ct_y : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT DEDENT return ( result ) NEW_LINE DEDENT
def test_251 ( ) : NEW_LINE INDENT import string NEW_LINE t = len ( string . ascii_lowercase ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT a = string . ascii_lowercase + string . digits + ' ▁ ' NEW_LINE if len ( a ) >= 3 : NEW_LINE INDENT z , o = 0 , 0 NEW_LINE for c in a : NEW_LINE INDENT if c == '1' : NEW_LINE INDENT o += 1 NEW_LINE DEDENT else : NEW_LINE INDENT z += 1 NEW_LINE DEDENT DEDENT if z > o : NEW_LINE INDENT print ( o ) NEW_LINE DEDENT elif o > z : NEW_LINE INDENT print ( z ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( z - 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT DEDENT DEDENT
def encode ( a , n ) : NEW_LINE INDENT import os NEW_LINE import sys NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from math import sin , cos , math NEW_LINE from math import tan , math , pi NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from math import tan , math , pi NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE if sys . platform == ' win32' : NEW_LINE INDENT import win32_ver NEW_LINE DEDENT else : NEW_LINE INDENT import math NEW_LINE DEDENT if sys . platform == ' cygwin ' : NEW_LINE INDENT import win32_ver NEW_LINE DEDENT else : NEW_LINE INDENT import math NEW_LINE DEDENT if sys . platform == ' win32' : NEW_LINE INDENT import win32_ver NEW_LINE DEDENT else : NEW_LINE INDENT import math NEW_LINE DEDENT if sys . platform == ' win32' : NEW_LINE INDENT import win32_ver NEW_LINE DEDENT else : NEW_LINE INDENT import math NEW_LINE DEDENT return string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE a = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE i = 0 NEW_LINE for i in range ( 5 ) : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % a [ i ] ) NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT target = 93 NEW_LINE arr = [ 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 ] NEW_LINE length = len ( arr ) NEW_LINE total_count = 0 NEW_LINE for i in range ( length - 2 ) : NEW_LINE INDENT if target % arr [ i ] == 0 : NEW_LINE INDENT for j in range ( i + 1 , length - 1 ) : NEW_LINE INDENT if target % ( arr [ i ] * arr [ j ] ) == 0 : NEW_LINE INDENT to_find = target // ( arr [ i ] * arr [ j ] ) NEW_LINE for k in range ( j + 1 , length ) : NEW_LINE INDENT if arr [ k ] == to_find : NEW_LINE INDENT total_count += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT print ( " Total ▁ number ▁ of ▁ triplets ▁ found : ▁ % d " % total_count ) NEW_LINE DEDENT
def Multiples_Of_Length ( ) : NEW_LINE INDENT import sys NEW_LINE class Multiples_Of_Length ( sys . stdin ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdin . readline ( ) NEW_LINE self . tokens = [ ] NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT while not self . tokens or not self . tokens : NEW_LINE INDENT try : NEW_LINE INDENT self . tokens . append ( None ) NEW_LINE DEDENT except KeyError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return self . tokens [ 0 ] NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = " " NEW_LINE try : NEW_LINE INDENT data = self . readline ( ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT t = Multiples_Of_Length ( ) NEW_LINE o = sys . stdout . write NEW_LINE n = t . __next__ ( ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( t . __next__ ( ) ) NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT o . write ( "1 ▁ 1" ) NEW_LINE o . write ( - a [ 0 ] ) NEW_LINE o . write ( "1 ▁ 1" ) NEW_LINE o . write ( "0" ) NEW_LINE o . write ( "1 ▁ 1" ) NEW_LINE o . write ( "0" ) NEW_LINE DEDENT else : NEW_LINE INDENT o . write ( "1 ▁ 1" ) NEW_LINE o . write ( - a [ 0 ] ) NEW_LINE o . write ( "1 ▁ % d " % n ) NEW_LINE a . append ( 0 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT o . write ( " % d ▁ " % - n * a [ i ] ) NEW_LINE DEDENT o . write ( " \n 2 ▁ % d " % n ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT o . write ( " % d ▁ " % ( ( n - 1 ) * a [ i ] ) ) NEW_LINE DEDENT DEDENT o . flush ( ) NEW_LINE o . close ( ) NEW_LINE DEDENT DEDENT
def final_num ( arr , n ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT result = __gcd ( result , arr [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT
def last_element ( a , n ) : NEW_LINE INDENT steps = 1 NEW_LINE v = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT v . append ( [ ] ) NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT return a [ 0 ] NEW_LINE DEDENT for i in range ( 0 , n , 2 ) : NEW_LINE INDENT v [ steps ] . append ( a [ i ] | a [ i + 1 ] ) NEW_LINE DEDENT while len ( v [ steps ] ) > 1 : NEW_LINE INDENT steps += 1 NEW_LINE for i in range ( 0 , len ( v [ steps - 1 ] ) , 2 ) : NEW_LINE INDENT if steps % 2 == 1 : NEW_LINE INDENT v [ steps ] . append ( v [ steps - 1 ] [ i ] | v [ steps - 1 ] [ i + 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT v [ steps ] . append ( v [ steps - 1 ] [ i ] ^ v [ steps - 1 ] [ i + 1 ] ) NEW_LINE DEDENT DEDENT DEDENT return v [ steps ] [ 0 ] NEW_LINE DEDENT
def number_cake ( n ) : NEW_LINE INDENT import math NEW_LINE n = 2 NEW_LINE print ( number_cake ( n ) ) NEW_LINE n = 8 NEW_LINE print ( number_cake ( n ) ) NEW_LINE n = 25 NEW_LINE print ( number_cake ( n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE sc = string . split ( ' ▁ ' ) NEW_LINE result = 0 NEW_LINE p = 0 NEW_LINE g = 1 NEW_LINE for c in sc : NEW_LINE INDENT if c == ' g ' : NEW_LINE INDENT if p + 1 <= g : NEW_LINE INDENT result += 1 NEW_LINE p += 1 NEW_LINE DEDENT else : NEW_LINE INDENT g += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if p + 1 <= g : NEW_LINE INDENT p += 1 NEW_LINE DEDENT else : NEW_LINE INDENT g += 1 NEW_LINE result -= 1 NEW_LINE DEDENT DEDENT DEDENT print ( result ) NEW_LINE DEDENT
def pattern ( N ) : NEW_LINE INDENT global i , j , k , space , rows NEW_LINE i , j , k , space , rows = 0 , 1 , N , 1 , N NEW_LINE for i in range ( rows , 1 , - 1 ) : NEW_LINE INDENT for j in range ( 1 , i + 1 ) : NEW_LINE INDENT print ( " * " , end = ' ▁ ' ) NEW_LINE DEDENT if i != rows : NEW_LINE INDENT for k in range ( 1 , space + 1 ) : NEW_LINE INDENT print ( " ▁ " , end = ' ▁ ' ) NEW_LINE DEDENT space = space + 2 NEW_LINE DEDENT for j in range ( i , 1 , - 1 ) : NEW_LINE INDENT if j != rows : NEW_LINE INDENT print ( " * " , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT print ( " \n " , end = ' ▁ ' ) NEW_LINE DEDENT print ( " \n " , end = ' ▁ ' ) NEW_LINE DEDENT
def maximum_middle_value ( n , k , arr ) : NEW_LINE INDENT ans = - 1 NEW_LINE low = ( n + 1 - k ) // 2 NEW_LINE high = ( n + 1 - k ) // 2 + k NEW_LINE for i in range ( low , high + 1 ) : NEW_LINE INDENT ans = max ( ans , arr [ i - 1 ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def path_sum ( root_data ) : NEW_LINE INDENT import re NEW_LINE class TreeNode ( int ) : NEW_LINE INDENT def __init__ ( self , root_data ) : NEW_LINE INDENT self . val = root_data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT class Solution ( object ) : NEW_LINE INDENT def __init__ ( self , result ) : NEW_LINE INDENT self . result = result NEW_LINE self . cache = { } NEW_LINE self . cache [ 0 ] = 1 NEW_LINE self . path_sum_helper ( root , sum , 0 ) NEW_LINE return result NEW_LINE DEDENT def path_sum_helper ( root , target , so_far ) : NEW_LINE INDENT if root is not None : NEW_LINE INDENT complement = so_far + root . val - target NEW_LINE if complement in self . cache : NEW_LINE INDENT result += self . cache [ complement ] NEW_LINE DEDENT self . cache [ so_far + root . val ] = self . cache . get ( so_far + root . val , 0 ) + 1 NEW_LINE self . path_sum_helper ( root . left , target , so_far + root . val ) NEW_LINE self . path_sum_helper ( root . right , target , so_far + root . val ) NEW_LINE self . cache [ so_far + root . val ] = self . cache [ so_far + root . val ] - 1 NEW_LINE DEDENT DEDENT DEDENT sobj = Solution ( ) NEW_LINE tree = TreeNode ( 10 ) NEW_LINE tree . left = TreeNode ( 5 ) NEW_LINE tree . right = TreeNode ( - 3 ) NEW_LINE tree . left . left = TreeNode ( 3 ) NEW_LINE tree . left . right = TreeNode ( 2 ) NEW_LINE tree . right . right = TreeNode ( 11 ) NEW_LINE tree . left . left . left = TreeNode ( 3 ) NEW_LINE tree . left . left . right = TreeNode ( - 2 ) NEW_LINE tree . left . right . right = TreeNode ( 1 ) NEW_LINE sum = 8 NEW_LINE out = sobj . path_sum ( tree , sum ) NEW_LINE print ( out ) NEW_LINE DEDENT
def getmax ( arr , n , x ) : NEW_LINE INDENT import numpy as np NEW_LINE s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = s + arr [ i ] NEW_LINE DEDENT print ( min ( s , x ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( ' Case ▁ % d : ' % i ) NEW_LINE msm ( sys . stdin . readline ( ) , 1 ) NEW_LINE DEDENT def msm ( n , c ) : NEW_LINE INDENT if c == 11 : NEW_LINE INDENT return NEW_LINE DEDENT data = str ( n * n ) NEW_LINE s = [ ] NEW_LINE for i in range ( 8 - len ( data ) ) : NEW_LINE INDENT s . append ( 0 ) NEW_LINE DEDENT s . append ( data ) NEW_LINE data = ' ' . join ( s ) [ 2 : 6 ] NEW_LINE out = int ( data ) NEW_LINE print ( out ) NEW_LINE msm ( out , c + 1 ) NEW_LINE return NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE sosu = [ True ] * ( 123456 * 2 + 1 ) NEW_LINE sosu [ 0 ] = False NEW_LINE sosu [ 1 ] = False NEW_LINE for i in range ( 2 , 123456 * 2 ) : NEW_LINE INDENT if sosu [ i ] : NEW_LINE INDENT for j in range ( 2 , i * j , 123456 * 2 + 1 ) : NEW_LINE INDENT sosu [ i * j ] = False NEW_LINE DEDENT DEDENT DEDENT while True : NEW_LINE INDENT n = sys . stdin . read ( 1 ) NEW_LINE if not n : NEW_LINE INDENT break NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n + 1 , n * 2 + 1 ) : NEW_LINE INDENT if sosu [ i ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT DEDENT
def gf_max_OR ( arr , n ) : NEW_LINE INDENT maxVal = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT maxVal = max ( maxVal , arr [ i ] | arr [ j ] ) NEW_LINE DEDENT DEDENT return maxVal NEW_LINE DEDENT
def num_jewels_in_stones ( J , S ) : NEW_LINE INDENT import set NEW_LINE class Solution ( object ) : NEW_LINE INDENT def num_jewels_in_stones ( self , J , S ) : NEW_LINE INDENT result = 0 NEW_LINE j_hash = set ( J [ j ] for j in J ) NEW_LINE for s in S : NEW_LINE INDENT if s in j_hash : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT def main ( self ) : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE J = ' aA ' NEW_LINE S = ' aAAbbbb ' NEW_LINE out = sObj . num_jewels_in_stones ( J , S ) NEW_LINE print ( out ) NEW_LINE DEDENT DEDENT return Solution ( ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import numpy as np NEW_LINE global G NEW_LINE global MAX , n NEW_LINE global store NEW_LINE global G NEW_LINE global d NEW_LINE def is_clique ( b ) : NEW_LINE INDENT for i in range ( 1 , b ) : NEW_LINE INDENT for j in range ( i + 1 , b ) : NEW_LINE INDENT if not G [ store [ i ] ] [ store [ j ] ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT def max_cliques ( i , l ) : NEW_LINE INDENT max_ = 0 NEW_LINE for j in range ( i + 1 , n + 1 ) : NEW_LINE INDENT store [ l ] = j NEW_LINE if is_clique ( l + 1 ) : NEW_LINE INDENT max_ = max ( max_ , l ) NEW_LINE max_ = max ( max_ , max_cliques ( j , l + 1 ) ) NEW_LINE DEDENT DEDENT return max_ NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT edges = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 1 ] , [ 4 , 3 ] , [ 4 , 1 ] , [ 4 , 2 ] ] NEW_LINE edges = list ( edges ) NEW_LINE n = 4 NEW_LINE for i in range ( len ( edges ) ) : NEW_LINE INDENT G [ edges [ i ] [ 0 ] ] [ edges [ i ] [ 1 ] ] = 1 NEW_LINE G [ edges [ i ] [ 1 ] ] [ edges [ i ] [ 0 ] ] = 1 NEW_LINE d [ edges [ i ] [ 0 ] ] += 1 NEW_LINE d [ edges [ i ] [ 1 ] ] += 1 NEW_LINE DEDENT print ( max_cliques ( 0 , 1 ) ) NEW_LINE DEDENT return G NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT k = int ( math . log ( n ) / math . log ( 2 ) ) NEW_LINE return int ( math . pow ( 2 , k ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE input = f . split ( ) NEW_LINE m = int ( input [ 1 ] ) NEW_LINE s = int ( input [ 2 ] ) NEW_LINE f = int ( input [ 3 ] ) NEW_LINE max_t = - 1 NEW_LINE d = { } NEW_LINE while m > 0 : NEW_LINE INDENT mth = f . split ( ) NEW_LINE k = int ( mth [ 0 ] ) NEW_LINE d [ k ] = [ int ( mth [ 1 ] ) , int ( mth [ 2 ] ) ] NEW_LINE max_t = max ( max_t , k ) NEW_LINE m -= 1 NEW_LINE DEDENT actions = [ ] NEW_LINE M = ( ' R ' if s < f else ' L ' ) NEW_LINE d = ( + 1 if s < f else - 1 ) NEW_LINE cur = s NEW_LINE a = - 1 NEW_LINE b = - 1 NEW_LINE for t in range ( 1 , max_t + 1 ) : NEW_LINE INDENT if d . has_key ( t ) : NEW_LINE INDENT a = d [ t ] [ 0 ] [ 0 ] NEW_LINE b = d [ t ] [ 1 ] [ 0 ] NEW_LINE DEDENT if d . has_key ( t ) and ( ( cur >= a and cur <= b ) or ( cur + d >= a and cur + d <= b ) ) : NEW_LINE INDENT actions . append ( ' X ' ) NEW_LINE DEDENT else : NEW_LINE INDENT actions . append ( M ) NEW_LINE cur += d NEW_LINE DEDENT if cur == f : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT while cur != f : NEW_LINE INDENT actions . append ( M ) NEW_LINE cur += d NEW_LINE DEDENT print ( ' ' . join ( actions ) ) NEW_LINE DEDENT
def subset_pair_not_divisible_by_k ( arr , N , K ) : NEW_LINE INDENT f = [ 0 ] * K NEW_LINE f [ arr [ i ] % K ] += 1 NEW_LINE if K % 2 == 0 : NEW_LINE INDENT f [ K // 2 ] = min ( f [ K // 2 ] , 1 ) NEW_LINE DEDENT res = min ( f [ 0 ] , 1 ) NEW_LINE for i in range ( 1 , K // 2 + 1 ) : NEW_LINE INDENT res += max ( f [ i ] , f [ K - i ] ) NEW_LINE DEDENT return res NEW_LINE DEDENT
def binary_search ( a ) : NEW_LINE INDENT import math NEW_LINE ans = 0 NEW_LINE now = 1 NEW_LINE t = 1 NEW_LINE for _ in range ( 10 ) : NEW_LINE INDENT if now * 10 > a : NEW_LINE INDENT ret += ( a - now + 1 ) * t NEW_LINE break NEW_LINE DEDENT ret += now * 9 * t NEW_LINE now *= 10 NEW_LINE t += 1 NEW_LINE DEDENT return ret NEW_LINE def binary_search ( k , l , r , x ) : NEW_LINE INDENT if r >= l : NEW_LINE INDENT mid = l + ( r - l ) // 2 NEW_LINE if mid > ans and mid * k <= x : NEW_LINE INDENT ans = mid NEW_LINE DEDENT if k * mid == x : NEW_LINE INDENT return mid NEW_LINE DEDENT if k * mid > x : NEW_LINE INDENT return binary_search ( k , l , mid - 1 , x ) NEW_LINE DEDENT return binary_search ( k , mid + 1 , r , x ) NEW_LINE DEDENT return - 1 NEW_LINE DEDENT def f ( ) : NEW_LINE INDENT S = sys . stdin NEW_LINE gen , st , tim = S NEW_LINE gen = int ( math . pow ( 10 , 18 ) ) NEW_LINE beg , end = st - 1 , int ( math . pow ( 10 , 18 ) ) NEW_LINE while True : NEW_LINE INDENT med = ( beg + end ) // 2 + 1 NEW_LINE if get ( med ) - get ( st - 1 ) > gen : NEW_LINE INDENT end = med - 1 NEW_LINE DEDENT else : NEW_LINE INDENT beg = med NEW_LINE DEDENT if beg == end : NEW_LINE INDENT print ( beg - st + 1 ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT return f NEW_LINE DEDENT
def GFG ( a , b , c ) : NEW_LINE INDENT print ( 1 , c / ( a * 1.0 ) ) NEW_LINE DEDENT
def GFG ( pos , fl , pr , bin ) : NEW_LINE INDENT if pos == len ( bin ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if memo [ pos ] [ fl ] [ pr ] != - 1 : NEW_LINE INDENT return memo [ pos ] [ fl ] [ pr ] NEW_LINE DEDENT val = 0 NEW_LINE if bin [ pos ] == '0' : NEW_LINE INDENT val = val + dp ( pos + 1 , fl , 0 , bin ) NEW_LINE DEDENT elif bin [ pos ] == '1' : NEW_LINE INDENT val = val + dp ( pos + 1 , 1 , 0 , bin ) NEW_LINE DEDENT if pr == 0 : NEW_LINE INDENT if fl == 1 : NEW_LINE INDENT val += dp ( pos + 1 , fl , 1 , bin ) NEW_LINE DEDENT elif bin [ pos ] == '1' : NEW_LINE INDENT val += dp ( pos + 1 , fl , 1 , bin ) NEW_LINE DEDENT DEDENT return memo [ pos ] [ fl ] [ pr ] = val NEW_LINE DEDENT def find_integers ( num ) : NEW_LINE INDENT bin = " " NEW_LINE while num > 0 : NEW_LINE INDENT if num % 2 == 1 : NEW_LINE INDENT bin += "1" NEW_LINE DEDENT else : NEW_LINE INDENT bin += "0" NEW_LINE DEDENT num //= 2 NEW_LINE DEDENT bin = reverse ( bin ) NEW_LINE for i in range ( 32 ) : NEW_LINE INDENT for j in range ( 2 ) : NEW_LINE INDENT for l in range ( 2 ) : NEW_LINE INDENT memo [ i ] [ j ] [ l ] = - 1 NEW_LINE DEDENT DEDENT DEDENT return dp ( 0 , 0 , 0 , bin ) NEW_LINE DEDENT def reverse ( x ) : NEW_LINE INDENT a = list ( x ) NEW_LINE l , r = len ( a ) - 1 , len ( a ) NEW_LINE for l , r in enumerate ( a [ l : r ] ) : NEW_LINE INDENT temp = a [ l ] NEW_LINE a [ l ] = a [ r ] NEW_LINE a [ r ] = temp NEW_LINE DEDENT return str ( a ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT N = 12 NEW_LINE print ( find_integers ( N ) ) NEW_LINE DEDENT
def GFG ( mat , n ) : NEW_LINE INDENT dp = np . zeros ( ( n , n ) ) NEW_LINE if mat [ 0 ] [ 0 ] == 1 : NEW_LINE INDENT dp [ 0 ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if mat [ 0 ] [ i ] == 1 : NEW_LINE INDENT dp [ 0 ] [ i ] = int ( dp [ 0 ] [ i - 1 ] + np . power ( 2 , i ) ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if mat [ i ] [ 0 ] == 1 : NEW_LINE INDENT dp [ i ] [ 0 ] = int ( dp [ i - 1 ] [ 0 ] + np . power ( 2 , i ) ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT if mat [ i ] [ j ] == 1 : NEW_LINE INDENT dp [ i ] [ j ] = int ( np . maximum ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + np . power ( 2 , i + j ) ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = np . maximum ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return dp [ n - 1 ] [ n - 1 ] NEW_LINE DEDENT
def create_hash ( hash , max_element ) : NEW_LINE INDENT prev , curr = 0 , 1 NEW_LINE hash . add ( prev ) NEW_LINE hash . add ( curr ) NEW_LINE while curr < max_element : NEW_LINE INDENT temp = curr + prev NEW_LINE hash . add ( temp ) NEW_LINE prev = curr NEW_LINE curr = temp NEW_LINE DEDENT def find_fibonacci_pair ( n ) : NEW_LINE INDENT hash = set ( ) NEW_LINE create_hash ( hash , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i in hash and n - i in hash : NEW_LINE INDENT print ( ' % d , ▁ % d \n ' % ( i , n - i ) , end = ' ▁ ' ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( ' - 1 \n ' , end = ' ▁ ' ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT N = 90 NEW_LINE find_fibonacci_pair ( N ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def countgroup ( a , n ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE a = np . random . rand ( n , n ) NEW_LINE a = np . random . rand ( n , n ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = np . random . rand ( n , n ) NEW_LINE a = np . random . rand ( n , n ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = np . random . rand ( n , n ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = np . random . rand ( n , n ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np . float32 ) NEW_LINE a = a . astype ( np .
def max_length ( s , n ) : NEW_LINE INDENT import string NEW_LINE ans = int ( 0 ) NEW_LINE A = [ ] NEW_LINE L = [ ] NEW_LINE R = [ ] NEW_LINE freq = [ 0 ] * ( n + 5 ) NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if s [ j ] - ' a ' == i : NEW_LINE INDENT count += 1 NEW_LINE DEDENT freq [ j ] = count NEW_LINE DEDENT DEDENT for j in range ( 1 , n ) : NEW_LINE INDENT L . append ( ( 2 * freq [ j - 1 ] ) - j ) NEW_LINE R . append ( ( 2 * freq [ j ] ) - j ) NEW_LINE DEDENT max_len = int ( 0 ) NEW_LINE min_val = int ( 0 ) NEW_LINE for j in L : NEW_LINE INDENT min_val = min ( min_val , j ) NEW_LINE A . append ( min_val ) NEW_LINE l , r = 0 , j NEW_LINE while l <= r : NEW_LINE INDENT mid = ( l + r ) >> 1 NEW_LINE if A [ mid ] <= R [ j ] : NEW_LINE INDENT max_len = max ( max_len , j - mid + 1 ) NEW_LINE r = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT DEDENT DEDENT ans = max ( ans , max_len ) NEW_LINE A = [ ] NEW_LINE R = [ ] NEW_LINE L = [ ] NEW_LINE return ans NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import sys NEW_LINE class GFG ( object ) : NEW_LINE INDENT def __init__ ( self , first , second ) : NEW_LINE INDENT self . first = first NEW_LINE self . second = second NEW_LINE DEDENT def __init__ ( self , first , second ) : NEW_LINE INDENT self . first = first NEW_LINE self . second = second NEW_LINE DEDENT DEDENT N = 100005 NEW_LINE gr = [ [ ] , [ ] ] NEW_LINE colour = [ [ ] , [ ] ] NEW_LINE edges = [ [ ] , [ ] ] NEW_LINE bip = False NEW_LINE def add_edge ( x , y ) : NEW_LINE INDENT gr [ x ] . append ( y ) NEW_LINE gr [ y ] . append ( x ) NEW_LINE edges . append ( ( x , y ) ) NEW_LINE DEDENT def dfs ( x , col ) : NEW_LINE INDENT colour [ x ] = col NEW_LINE for i in gr [ x ] : NEW_LINE INDENT if colour [ i ] == - 1 : NEW_LINE INDENT dfs ( i , col ^ 1 ) NEW_LINE DEDENT elif colour [ i ] == col : NEW_LINE INDENT bip = False NEW_LINE DEDENT DEDENT DEDENT def Directed_Graph ( n , m ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT colour [ i ] = - 1 NEW_LINE DEDENT bip = True NEW_LINE dfs ( 1 , 1 ) NEW_LINE if not bip : NEW_LINE INDENT sys . stdout . write ( - 1 ) NEW_LINE return NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT if colour [ edges [ i ] [ 0 ] ] == 0 : NEW_LINE INDENT list ( edges [ i ] ) NEW_LINE DEDENT print ( edges [ i ] [ 0 ] , edges [ i ] [ 1 ] ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n , m = 4 , 3 NEW_LINE for i in gr : NEW_LINE INDENT gr [ i ] = [ ] NEW_LINE DEDENT add_edge ( 1 , 2 ) NEW_LINE add_edge ( 1 , 3 ) NEW_LINE add_edge ( 1 , 4 ) NEW_LINE Directed_Graph ( n , m ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import re NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE n = int ( sys . stdin . readline ( ) . strip ( ) ) NEW_LINE line1 = sys . stdin . readline ( ) . strip ( ) . split ( ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( int ( line1 [ i ] ) ) NEW_LINE DEDENT odd , even = False , False NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT even = True NEW_LINE DEDENT else : NEW_LINE INDENT odd = True NEW_LINE DEDENT ans . append ( arr [ i ] ) NEW_LINE DEDENT if odd and even : NEW_LINE INDENT ans . sort ( ) NEW_LINE DEDENT for i in ans : NEW_LINE INDENT print ( i ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT o , g , x = 0 , 0 , 0 NEW_LINE n , g = 0 , 0 , 0 NEW_LINE for i in range ( 1 , g + 1 ) : NEW_LINE INDENT x = x + i * o NEW_LINE DEDENT borrow = x - n NEW_LINE if borrow <= 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( borrow ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( ' No ▁ input ▁ found ' ) NEW_LINE DEDENT DEDENT
def GFG ( k ) : NEW_LINE INDENT if k <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , k ) : NEW_LINE INDENT if k % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def check ( num , k ) : NEW_LINE INDENT flag = 1 NEW_LINE for i in range ( 2 , k ) : NEW_LINE INDENT if num % i == 0 : NEW_LINE INDENT flag = 0 NEW_LINE DEDENT DEDENT if flag == 1 : NEW_LINE INDENT if num % k == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT def findCount ( a , b , k ) : NEW_LINE INDENT count = 0 NEW_LINE if not isPrime ( k ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( a , b + 1 ) : NEW_LINE INDENT ans = check ( i , k ) NEW_LINE if ans == 1 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT a , b , k = 2020 , 6300 , 29 NEW_LINE print ( findCount ( a , b , k ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT maxn = 16 NEW_LINE dp , arr = [ 4 , 6 , 9 ] NEW_LINE for i in range ( maxn ) : NEW_LINE INDENT dp . append ( - 1 ) NEW_LINE DEDENT dp [ 0 ] = 0 NEW_LINE for i in range ( 1 , maxn ) : NEW_LINE INDENT for k in range ( 3 ) : NEW_LINE INDENT j = arr [ k ] NEW_LINE if i >= j and dp [ i - j ] != - 1 : NEW_LINE INDENT dp [ i ] = max ( dp [ i ] , dp [ i - j ] + 1 ) NEW_LINE DEDENT DEDENT DEDENT return dp NEW_LINE DEDENT def Maximum_Summands ( dp , n ) : NEW_LINE INDENT if n < maxn : NEW_LINE INDENT return dp [ n ] NEW_LINE DEDENT else : NEW_LINE INDENT t = ( n - maxn ) // 4 + 1 NEW_LINE return t + dp [ n - 4 * t ] NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT n = 12 NEW_LINE dp = precompute ( ) NEW_LINE print ( Maximum_Summands ( dp , n ) ) NEW_LINE DEDENT
def count_squares ( n ) : NEW_LINE INDENT return ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE m = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT sum = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum [ i ] = a [ i ] + sum [ i - 1 ] NEW_LINE DEDENT d = { } NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT d [ sum [ i ] % m ] = 0 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT x = d [ sum [ i ] % m ] NEW_LINE d [ sum [ i ] % m ] = x + 1 NEW_LINE DEDENT ans = 0 NEW_LINE if 0l in d : NEW_LINE INDENT ans = d [ 0l ] NEW_LINE DEDENT for i in d : NEW_LINE INDENT if d [ i ] >= 2 : NEW_LINE INDENT for j in d [ i ] : NEW_LINE INDENT ans += j - 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT class Pair ( object ) : NEW_LINE INDENT def __init__ ( self , from = None , end = None , num = None , bango = None ) : NEW_LINE INDENT self . from = None NEW_LINE self . end = None NEW_LINE self . num = None NEW_LINE self . bango = None NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT otherpair = other NEW_LINE return self . from == other . num or self . bango == other . num or self . bango == other . bango NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . from == other . num or self . bango or self . num == other . num or self . bango == other . bango NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT otherpair = other . __eq__ ( self , other ) NEW_LINE return self . end == other . num or self . bango == other . bango or self . num == other . num or self . bango == other . bango or self . num == other . num or self . bango == other . num or self . bango == other . bango or self . num == other . num or self . bango == other . num or self .
def find_substring ( arr , n , k ) : NEW_LINE INDENT count_one = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT count_one [ i ] = sum ( arr [ i ] ) NEW_LINE DEDENT sum = count_one [ 0 ] NEW_LINE if n == 1 : NEW_LINE INDENT if count_one [ 0 ] >= k : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT ans = sys . maxsize NEW_LINE i = 1 NEW_LINE j = 0 NEW_LINE while i < n : NEW_LINE INDENT if k == count_one [ j ] : NEW_LINE INDENT ans = 1 NEW_LINE break NEW_LINE DEDENT elif k == count_one [ i ] : NEW_LINE INDENT ans = 1 NEW_LINE break NEW_LINE DEDENT elif sum + count_one [ i ] < k : NEW_LINE INDENT sum += count_one [ i ] NEW_LINE i += 1 NEW_LINE DEDENT elif sum + count_one [ i ] > k : NEW_LINE INDENT ans = min ( ans , ( i - j ) + 1 ) NEW_LINE sum -= count_one [ j ] NEW_LINE j += 1 NEW_LINE DEDENT elif sum + count_one [ i ] == k : NEW_LINE INDENT ans = min ( ans , ( i - j ) + 1 ) NEW_LINE sum += count_one [ i ] NEW_LINE i += 1 NEW_LINE DEDENT DEDENT if ans != sys . maxsize : NEW_LINE INDENT return ans NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT global loss NEW_LINE loss = float ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) NEW_LINE print ( " Loss ▁ = ▁ " + " % . 3 f " % loss ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n , m , x = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE a = [ 1 ] * n NEW_LINE for i in range ( m ) : NEW_LINE INDENT a [ i ] = 1 NEW_LINE DEDENT ans1 , ans2 = 0 , 0 NEW_LINE for i in range ( x , 0 , - 1 ) : NEW_LINE INDENT ans1 += a [ i ] NEW_LINE DEDENT for i in range ( x , n ) : NEW_LINE INDENT ans2 += a [ i ] NEW_LINE DEDENT print ( min ( ans1 , ans2 ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE DEDENT rv = 1 , prev , one_seq , two_seq = 0 , 0 , 0 NEW_LINE while n > 0 : NEW_LINE INDENT x = sys . stdin . read ( n ) NEW_LINE if x == 1 : NEW_LINE INDENT if prev == 1 : NEW_LINE INDENT one_seq += 1 NEW_LINE DEDENT else : NEW_LINE INDENT one_seq = 1 NEW_LINE DEDENT prev = 1 NEW_LINE DEDENT else : NEW_LINE INDENT if prev == 2 : NEW_LINE INDENT two_seq += 1 NEW_LINE DEDENT else : NEW_LINE INDENT two_seq = 1 NEW_LINE DEDENT prev = 2 NEW_LINE DEDENT if min ( one_seq , two_seq ) > rv : NEW_LINE INDENT rv = min ( one_seq , two_seq ) NEW_LINE DEDENT DEDENT print ( rv * 2 ) NEW_LINE DEDENT
def p092 ( ) : NEW_LINE INDENT print ( eval ( ' p092' ) ) NEW_LINE LIMIT = math . pow ( 10 , 7 ) NEW_LINE def run ( ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 1 , LIMIT ) : NEW_LINE INDENT if is_class89 ( i ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return str ( count ) NEW_LINE DEDENT def is_class89 ( x ) : NEW_LINE INDENT while True : NEW_LINE INDENT if x == 1 : NEW_LINE INDENT return False NEW_LINE DEDENT elif x == 89 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT x = next_number ( x ) NEW_LINE DEDENT DEDENT DEDENT def next_number ( x ) : NEW_LINE INDENT sum = 0 NEW_LINE while x != 0 : NEW_LINE INDENT sum += ( x % 10 ) ** 2 NEW_LINE x //= 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT return run NEW_LINE DEDENT
def fact ( n ) : NEW_LINE INDENT import string NEW_LINE fact = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT fact *= i NEW_LINE DEDENT return fact NEW_LINE def count_strings ( str , n ) : NEW_LINE INDENT distinct_char = set ( str ) NEW_LINE return fact - len ( distinct_char ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT str = ' geeksforgeeks ' NEW_LINE n = len ( str ) NEW_LINE print ( count_strings ( str , n ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def print_common_elements ( mat ) : NEW_LINE INDENT import re NEW_LINE mp = { } NEW_LINE for j in range ( N ) : NEW_LINE INDENT mp [ mat [ 0 ] [ j ] ] = 1 NEW_LINE DEDENT for i in range ( 1 , M ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT if mp . get ( mat [ i ] [ j ] ) and mp [ mat [ i ] [ j ] ] == i : NEW_LINE INDENT mp [ mat [ i ] [ j ] ] = i + 1 NEW_LINE if i == M - 1 : NEW_LINE INDENT print ( mat [ i ] [ j ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from math import sin , cos , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs , abs
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE t = int ( sys . stdin . readline ( ) ) NEW_LINE s = [ ] NEW_LINE d = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . append ( sys . stdin . readline ( ) ) NEW_LINE d . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT print ( solve ( s , d , t ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT return - 1 NEW_LINE DEDENT
def sum_of_ap ( a , d , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + a NEW_LINE a = a + d NEW_LINE DEDENT return sum NEW_LINE DEDENT
def find_3_numbers ( arr , n ) : NEW_LINE INDENT small , large = + 2147483647 , + 2147483647 NEW_LINE i = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] <= small : NEW_LINE INDENT small = arr [ i ] NEW_LINE DEDENT elif arr [ i ] <= large : NEW_LINE INDENT large = arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if i == n : NEW_LINE INDENT print ( ' No ▁ such ▁ triplet ▁ found ' ) NEW_LINE return NEW_LINE DEDENT for j in range ( 0 , i + 1 ) : NEW_LINE INDENT if arr [ j ] < large : NEW_LINE INDENT small = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( small , large , arr [ i ] ) NEW_LINE return NEW_LINE DEDENT
def numbers_with_3_divisors ( n ) : NEW_LINE INDENT prime = [ True ] * ( n + 1 ) NEW_LINE prime [ 0 ] = prime [ 1 ] = False NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT print ( " Numbers ▁ with ▁ 3 ▁ divisors ▁ : " ) NEW_LINE for i in range ( 0 , n * 2 + 1 ) : NEW_LINE INDENT if prime [ i ] : NEW_LINE INDENT print ( i * i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def find_pair_count ( N , K ) : NEW_LINE INDENT count = 0 NEW_LINE rem = [ N // K ] NEW_LINE for i in range ( 1 , K ) : NEW_LINE INDENT rem . append ( ( N - i ) // K + 1 ) NEW_LINE DEDENT if K % 2 == 0 : NEW_LINE INDENT count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) // 2 NEW_LINE for i in range ( 1 , K // 2 ) : NEW_LINE INDENT count += rem [ i ] * rem [ K - i ] NEW_LINE DEDENT count += ( rem [ K // 2 ] * ( rem [ K // 2 ] - 1 ) ) // 2 NEW_LINE DEDENT else : NEW_LINE INDENT count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) // 2 NEW_LINE for i in range ( 1 , K // 2 + 1 ) : NEW_LINE INDENT count += rem [ i ] * rem [ K - i ] NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n , m = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT array = [ ] NEW_LINE n = n NEW_LINE m = m NEW_LINE while not ( n and m ) : NEW_LINE INDENT array . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT array . sort ( key = len ) NEW_LINE interval = 0 NEW_LINE nt = 0 NEW_LINE for time in array : NEW_LINE INDENT if time - nt > interval : NEW_LINE INDENT interval = time - nt NEW_LINE DEDENT nt = time NEW_LINE DEDENT print ( interval ) NEW_LINE n , m = n , m NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT print ( ' YES ' if ' YES ' in a else ' NO ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT def solve ( a ) : NEW_LINE INDENT sum = sum ( a ) NEW_LINE max = max ( a ) NEW_LINE return sum % 2 == 0 and max * 2 <= sum NEW_LINE DEDENT return solve NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT global f NEW_LINE global t NEW_LINE f = [ 0 , 1 , 1 , 2 , 3 , 5 ] NEW_LINE def fib ( n ) : NEW_LINE INDENT if n < 6 : NEW_LINE INDENT return f [ n ] NEW_LINE DEDENT t = 5 NEW_LINE fn = 5 NEW_LINE while t < n : NEW_LINE INDENT fn = int ( round ( fn * PHI ) ) NEW_LINE t += 1 NEW_LINE DEDENT return fn NEW_LINE DEDENT def main ( n ) : NEW_LINE INDENT n = 9 NEW_LINE print ( n , ' th ▁ Fibonacci ▁ Number ▁ = ▁ ' , fib ( n ) ) NEW_LINE DEDENT DEDENT
def GFG ( n , k ) : NEW_LINE INDENT return ( 2 * k ) NEW_LINE DEDENT
def print_sum_tricky ( mat , k ) : NEW_LINE INDENT import sys NEW_LINE if k > n : NEW_LINE INDENT return NEW_LINE DEDENT strip_sum = np . zeros ( ( n , n ) ) NEW_LINE for j in range ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT sum += mat [ i ] [ j ] NEW_LINE DEDENT strip_sum [ 0 ] [ j ] = sum NEW_LINE for i in range ( 1 , n - k + 1 ) : NEW_LINE INDENT sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) NEW_LINE strip_sum [ i ] [ j ] = sum NEW_LINE DEDENT DEDENT for i in range ( n - k + 1 ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( k ) : NEW_LINE INDENT sum += strip_sum [ i ] [ j ] NEW_LINE DEDENT print ( sum , end = ' ▁ ' ) NEW_LINE for j in range ( 1 , n - k + 1 ) : NEW_LINE INDENT sum += ( strip_sum [ i ] [ j + k - 1 ] - strip_sum [ i ] [ j - 1 ] ) NEW_LINE print ( sum , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT
def A30 ( ) : NEW_LINE INDENT import math NEW_LINE import os NEW_LINE import sys NEW_LINE A = int ( sys . stdin . read ( ) ) NEW_LINE B = int ( sys . stdin . read ( ) ) NEW_LINE N = int ( sys . stdin . read ( ) ) NEW_LINE big_a = math . floor ( A ) NEW_LINE big_b = math . floor ( B ) NEW_LINE for x in range ( - 1000 , 1000 + 1 ) : NEW_LINE INDENT if math . pow ( x , N ) * big_a == big_b : NEW_LINE INDENT print ( x ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( ' No ▁ solution ' ) NEW_LINE DEDENT
def ncr ( n , r ) : NEW_LINE INDENT ans = 1 NEW_LINE for i in range ( 1 , r + 1 ) : NEW_LINE INDENT ans *= ( n - r + i ) NEW_LINE ans //= i NEW_LINE DEDENT return ans NEW_LINE DEDENT
def next_pow2 ( n ) : NEW_LINE INDENT count = 0 NEW_LINE if n is not None and ( n & ( n - 1 ) ) == 0 : NEW_LINE INDENT return n NEW_LINE DEDENT while n is not None : NEW_LINE INDENT n >>= 1 NEW_LINE count += 1 NEW_LINE DEDENT return 1 << count NEW_LINE DEDENT
def Choose ( n , k ) : NEW_LINE INDENT import string NEW_LINE class NumTh ( string ) : NEW_LINE INDENT def Choose ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE for i in range ( n , n - k + 1 , - 1 ) : NEW_LINE INDENT res *= i NEW_LINE res //= k - n + i NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT class Main ( object ) : NEW_LINE INDENT def Choose ( n , k ) : NEW_LINE INDENT N , P = int ( n ) , int ( k ) NEW_LINE Even , Odd = 0 , 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT A = int ( N ) NEW_LINE if A % 2 == 0 : NEW_LINE INDENT Even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT Odd += 1 NEW_LINE DEDENT DEDENT if Odd == 0 : NEW_LINE INDENT if P == 0 : NEW_LINE INDENT print ( string . strip ( ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( string . strip ( ) ) NEW_LINE DEDENT DEDENT DEDENT return NumTh ( ) NEW_LINE DEDENT
def mod_inverse ( a , m ) : NEW_LINE INDENT import sys NEW_LINE a = a % m NEW_LINE for x in range ( 1 , m ) : NEW_LINE INDENT if ( a * x ) % m == 1 : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT
def sum_of_digits ( x ) : NEW_LINE INDENT sum = 0 NEW_LINE while x != 0 : NEW_LINE INDENT sum += x % 10 NEW_LINE x = x // 10 NEW_LINE DEDENT return sum NEW_LINE def count_numbers ( l , r ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT if i % 2 == 0 and sum_of_digits ( i ) % 3 == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT l , r = 1000 , 6000 NEW_LINE print ( count_numbers ( l , r ) ) NEW_LINE DEDENT DEDENT
def find_greater ( a , b ) : NEW_LINE INDENT x = float ( a ) * float ( math . log ( float ( b ) ) ) NEW_LINE y = float ( b ) * float ( math . log ( float ( a ) ) ) NEW_LINE if y > x : NEW_LINE INDENT print ( " a ^ b ▁ is ▁ greater " ) NEW_LINE DEDENT elif y < x : NEW_LINE INDENT print ( " b ^ a ▁ is ▁ greater " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Both ▁ are ▁ equal " ) NEW_LINE DEDENT DEDENT
def find_answer ( str1 , str2 , n ) : NEW_LINE INDENT from string import substr NEW_LINE l , r = 0 , 0 NEW_LINE ans = 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if str1 [ i ] != str2 [ i ] : NEW_LINE INDENT l = i NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if str1 [ i ] != str2 [ i ] : NEW_LINE INDENT r = i NEW_LINE break NEW_LINE DEDENT DEDENT if r < l : NEW_LINE INDENT return 26 * ( n + 1 ) NEW_LINE DEDENT elif l == r : NEW_LINE INDENT return ans NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( l + 1 , r + 1 ) : NEW_LINE INDENT if str1 [ i ] != str2 [ i - 1 ] : NEW_LINE INDENT ans -= 1 NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( l + 1 , r + 1 ) : NEW_LINE INDENT if str1 [ i - 1 ] != str2 [ i ] : NEW_LINE INDENT ans -= 1 NEW_LINE break NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE str = [ ] NEW_LINE for z in range ( t ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE x = sys . maxsize NEW_LINE m = sys . maxsize NEW_LINE arr = [ [ ] for i in range ( m ) ] NEW_LINE si = x NEW_LINE ei = x NEW_LINE for l , r in zip ( arr , arr ) : NEW_LINE INDENT if ( l <= si and si <= r ) or ( l <= ei and ei <= r ) : NEW_LINE INDENT si = min ( l , si ) NEW_LINE ei = max ( r , ei ) NEW_LINE DEDENT DEDENT str . append ( str [ ei - si + 1 : ] ) NEW_LINE DEDENT print ( ' ' . join ( str ) ) NEW_LINE DEDENT
def GFG ( n , l , r ) : NEW_LINE INDENT global num , prev , curr NEW_LINE num = n >> ( l - 1 ) NEW_LINE prev = num & 1 NEW_LINE num = num >> 1 NEW_LINE for i in range ( 1 , ( r - l ) + 1 ) : NEW_LINE INDENT curr = num & 1 NEW_LINE if curr == prev : NEW_LINE INDENT return False NEW_LINE DEDENT prev = curr NEW_LINE num = num >> 1 NEW_LINE DEDENT return True NEW_LINE DEDENT
def eugene ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE k = len ( sys . stdin ) NEW_LINE arr = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ i ] = sys . stdin . read ( n ) NEW_LINE DEDENT res = ' ' NEW_LINE o , e = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == 1 : NEW_LINE INDENT o += 1 NEW_LINE DEDENT else : NEW_LINE INDENT e += 1 NEW_LINE DEDENT DEDENT for l in range ( k ) : NEW_LINE INDENT r = sys . stdin . read ( n ) NEW_LINE if ( r - l + 1 ) % 2 == 1 : NEW_LINE INDENT res += '0 \n ' NEW_LINE DEDENT else : NEW_LINE INDENT if ( r - l + 1 ) // 2 <= o <= e : NEW_LINE INDENT res += '1 \n ' NEW_LINE DEDENT else : NEW_LINE INDENT res += '0 \n ' NEW_LINE DEDENT DEDENT DEDENT sys . stdout . write ( res ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT print ( e ) NEW_LINE DEDENT DEDENT
def nth_group ( n ) : NEW_LINE INDENT import math NEW_LINE return n * ( 2 * int ( math . pow ( n , 2 ) ) + 1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE n = len ( sys . argv ) NEW_LINE magic_square = np . zeros ( ( n , n ) ) NEW_LINE row , column = - 1 , - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT magic_square [ i ] [ j ] = sys . maxsize NEW_LINE if magic_square [ i ] [ j ] == 0 : NEW_LINE INDENT row = i NEW_LINE column = j NEW_LINE DEDENT DEDENT DEDENT if n == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE return NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if row != 0 : NEW_LINE INDENT sum += magic_square [ 0 ] [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT sum += magic_square [ 1 ] [ i ] NEW_LINE DEDENT DEDENT answer = sum NEW_LINE for i in range ( n ) : NEW_LINE INDENT answer -= magic_square [ row ] [ i ] NEW_LINE DEDENT magic_square [ row ] [ column ] = answer NEW_LINE m = 0 NEW_LINE current_sumi , current_sumj = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT current_sumi += magic_square [ i ] [ j ] NEW_LINE current_sumj += magic_square [ j ] [ i ] NEW_LINE DEDENT if current_sumi != sum or current_sumj != sum : NEW_LINE INDENT m += 1 NEW_LINE DEDENT current_sumi = 0 NEW_LINE current_sumj = 0 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT current_sumi += magic_square [ i ] [ i ] NEW_LINE current_sumj += magic_square [ n - i - 1 ] [ i ] NEW_LINE DEDENT if current_sumi != sum or current_sumj != sum : NEW_LINE INDENT m += 1 NEW_LINE DEDENT if m == 0 and answer > 0 : NEW_LINE INDENT print ( answer ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import io NEW_LINE import sys NEW_LINE arr = [ 0 ] * n NEW_LINE sum1 , sum2 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ i ] = int ( sys . stdin . read ( ) ) NEW_LINE sum1 = sum1 + arr [ i ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT csum = 0 NEW_LINE csum = arr [ i ] + arr [ i - 1 ] NEW_LINE if k > csum : NEW_LINE INDENT arr [ i ] = arr [ i ] + k - csum NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT sum2 = sum2 + arr [ i ] NEW_LINE DEDENT print ( sum2 - sum1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def isPrime ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT if n <= 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if n % 2 == 0 or n % 3 == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , n * i + 6 ) : NEW_LINE INDENT if n % i == 0 or n % ( i + 2 ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def gcd ( a , b ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a // gcd ( a , b ) ) * b NEW_LINE DEDENT
def maximum_occurred_element ( L , R , n ) : NEW_LINE INDENT import numpy as np NEW_LINE MAX = 1000000 NEW_LINE def maximum_occurred_element ( L , R , n ) : NEW_LINE INDENT arr = np . zeros ( MAX ) NEW_LINE maxi = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ L [ i ] ] += 1 NEW_LINE arr [ R [ i ] + 1 ] -= 1 NEW_LINE if R [ i ] > maxi : NEW_LINE INDENT maxi = R [ i ] NEW_LINE DEDENT DEDENT msum = arr [ 0 ] NEW_LINE ind = 0 NEW_LINE for i in range ( 1 , maxi + 1 ) : NEW_LINE INDENT arr [ i ] += arr [ i - 1 ] NEW_LINE if msum < arr [ i ] : NEW_LINE INDENT msum = arr [ i ] NEW_LINE ind = i NEW_LINE DEDENT DEDENT return ind NEW_LINE DEDENT L = [ 1 , 4 , 9 , 13 , 21 ] NEW_LINE R = [ 15 , 8 , 12 , 20 , 30 ] NEW_LINE n = len ( L ) NEW_LINE print ( maximum_occurred_element ( L , R , n ) ) NEW_LINE DEDENT
def Rough_02 ( ) : NEW_LINE INDENT import numpy as np NEW_LINE n = np . size ( np . array ( [ 0 ] ) ) NEW_LINE arr = np . array ( [ 0 ] * n ) NEW_LINE count = 1 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if arr [ i ] != arr [ i + 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE n = sys . maxsize NEW_LINE m = sys . maxsize NEW_LINE if n == 0 : NEW_LINE INDENT if m != 0 : NEW_LINE INDENT print ( " Impossible " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 , 0 ) NEW_LINE DEDENT return NEW_LINE DEDENT if m <= n : NEW_LINE INDENT if m == 0 : NEW_LINE INDENT m = 1 NEW_LINE DEDENT print ( n , m + n - 1 , end = " ▁ " ) NEW_LINE return NEW_LINE DEDENT print ( m , m + n - 1 , end = " ▁ " ) NEW_LINE DEDENT
def GFG ( x ) : return ( 1 / ( 1 + x ** 2 ) ) NEW_LINE def calculate ( lower_limit , upper_limit , interval_limit ) : NEW_LINE INDENT global value NEW_LINE interval_size = ( upper_limit - lower_limit ) / interval_limit NEW_LINE sum = func ( lower_limit ) + func ( upper_limit ) NEW_LINE for i in range ( 1 , interval_limit ) : NEW_LINE INDENT if i % 3 == 0 : NEW_LINE INDENT sum = sum + 2 * func ( lower_limit + i * interval_size ) NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + 3 * func ( lower_limit + i * interval_size ) NEW_LINE DEDENT DEDENT return ( 3 * interval_size / 8 ) * sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT interval_limit = 10 NEW_LINE lower_limit = 1 NEW_LINE upper_limit = 10 NEW_LINE integral_res = calculate ( lower_limit , upper_limit , interval_limit ) NEW_LINE print ( " % . 4 f " % integral_res ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE k = int ( sys . stdin . readline ( ) ) NEW_LINE x = sys . stdin . readline ( ) NEW_LINE y = sys . stdin . readline ( ) NEW_LINE sum = 0 NEW_LINE if n > k : NEW_LINE INDENT sum += x * k NEW_LINE sum += y * ( n - k ) NEW_LINE DEDENT else : NEW_LINE INDENT sum += x * n NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE for x , h in enumerate ( open ( ' . . / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s / s /
def count ( num ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE while num > 0 : NEW_LINE INDENT sum += num % 10 NEW_LINE num = num // 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def test_sieve ( ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE np . testing . as_testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE np . testing as np . testing as np NEW_LINE import testing as np NEW_LINE np . testing . as_testing as np . testing as np NEW_LINE np . testing . as_testing as np . testing . as_testing as np NEW_LINE np . testing . as_testing . as_testing . assertRaises ( np . testing . as_testing , np . testing . as_testing ) NEW_LINE np . testing . as_testing . assertRaises ( np . testing . as_testing , np . testing . as_testing , np . testing . as_testing ) NEW_LINE np . testing . as_testing . assertRaises ( np . testing . as_testing , np . testing . as_testing ) NEW_LINE DEDENT
def GFG ( x , y , n , m ) : NEW_LINE INDENT dp = np . zeros ( ( MAX , MAX ) ) NEW_LINE for i in range ( 0 , m + 1 ) : NEW_LINE INDENT for j in range ( 0 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if x [ j - 1 ] == y [ i - 1 ] : NEW_LINE INDENT dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT ans = max ( ans , dp [ i ] [ n ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def find_sum ( n , a , b ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i % a == 0 or i % b == 0 : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def tanyaandpostcard ( args ) : NEW_LINE INDENT import string NEW_LINE s1 = string . replace ( ' ▁ ' , ' ' ) NEW_LINE s2 = string . replace ( ' ▁ ' , ' ' ) NEW_LINE a = [ 0 ] * 123 NEW_LINE b = [ 0 ] * len ( s1 ) NEW_LINE i , y , w = 0 , 0 , 0 NEW_LINE for ch in s2 : NEW_LINE INDENT a [ ch ] += 1 NEW_LINE DEDENT for ch in s1 : NEW_LINE INDENT if a [ ch ] >= 1 : NEW_LINE INDENT a [ ch ] -= 1 NEW_LINE b [ ch ] = 1 NEW_LINE y += 1 NEW_LINE DEDENT DEDENT for ch in s1 : NEW_LINE INDENT if b [ ch ] == 0 : NEW_LINE INDENT if ch <= 90 : NEW_LINE INDENT ch = chr ( ord ( ch ) + 32 ) NEW_LINE DEDENT else : NEW_LINE INDENT ch = chr ( ord ( ch ) - 32 ) NEW_LINE DEDENT if a [ ch ] >= 1 : NEW_LINE INDENT a [ ch ] -= 1 NEW_LINE w += 1 NEW_LINE DEDENT DEDENT DEDENT print ( y , w ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT global sequence NEW_LINE global sequence NEW_LINE global vanEckSequence NEW_LINE for i in range ( MAX - 1 ) : NEW_LINE INDENT sequence [ i ] = 0 NEW_LINE DEDENT for i in range ( MAX - 1 ) : NEW_LINE INDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT if sequence [ j ] == sequence [ i ] : NEW_LINE INDENT sequence [ i + 1 ] = i - j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT def getNthTerm ( n ) : NEW_LINE INDENT return sequence [ n ] NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT vanEckSequence ( ) NEW_LINE n = 6 NEW_LINE print ( getNthTerm ( n ) ) NEW_LINE n = 100 NEW_LINE print ( getNthTerm ( n ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT global sequence NEW_LINE global sequence NEW_LINE global sequence NEW_LINE for i in range ( MAX + 1 ) : NEW_LINE INDENT sequence [ i ] = 0 NEW_LINE DEDENT for i in range ( MAX ) : NEW_LINE INDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT if sequence [ j ] == sequence [ i ] : NEW_LINE INDENT sequence [ i + 1 ] = i - j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT def getCount ( n ) : NEW_LINE INDENT count = 1 NEW_LINE i = n - 1 NEW_LINE while sequence [ i + 1 ] != 0 : NEW_LINE INDENT count += 1 NEW_LINE i = i - sequence [ i + 1 ] NEW_LINE DEDENT return count NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT vanEckSequence ( ) NEW_LINE n = 5 NEW_LINE print ( getCount ( n ) ) NEW_LINE n = 11 NEW_LINE print ( getCount ( n ) ) NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT global sequence NEW_LINE global sequence NEW_LINE global sequence NEW_LINE for i in range ( MAX + 1 ) : NEW_LINE INDENT sequence [ i ] = 0 NEW_LINE DEDENT for i in range ( MAX ) : NEW_LINE INDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT if sequence [ j ] == sequence [ i ] : NEW_LINE INDENT sequence [ i + 1 ] = i - j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT def getCount ( n ) : NEW_LINE INDENT nth_term = sequence [ n - 1 ] NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if sequence [ i ] == nth_term : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT vanEckSequence ( ) NEW_LINE n = 5 NEW_LINE print ( getCount ( n ) ) NEW_LINE n = 11 NEW_LINE print ( getCount ( n ) ) NEW_LINE DEDENT DEDENT
def __gcd ( a , b , n ) : NEW_LINE INDENT import math NEW_LINE if not a or not b : NEW_LINE INDENT return 0 NEW_LINE DEDENT if a == b : NEW_LINE INDENT return a NEW_LINE DEDENT if a > b : NEW_LINE INDENT return __gcd ( a - b , b ) NEW_LINE DEDENT return __gcd ( a , b - a ) NEW_LINE DEDENT def nth_element ( a , b , n ) : NEW_LINE INDENT lcm = ( a * b ) / __gcd ( a , b ) NEW_LINE l , r = 1 , min ( a , b ) * n NEW_LINE while l <= r : NEW_LINE INDENT mid = ( l + r ) >> 1 NEW_LINE val = mid // a + mid // b - mid // lcm NEW_LINE if val == n : NEW_LINE INDENT return max ( ( mid // a ) * a , ( mid // b ) * b ) NEW_LINE DEDENT if val < n : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = mid - 1 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT a , b , n = 5 , 3 , 5 NEW_LINE print ( nth_element ( a , b , n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import datetime NEW_LINE import sys NEW_LINE y = int ( sys . stdin . readline ( ) ) NEW_LINE leap = check_leap ( y ) NEW_LINE sum = 0 NEW_LINE mod = 0 NEW_LINE for i in range ( y + 1 ) : NEW_LINE INDENT if check_leap ( i ) : NEW_LINE INDENT sum += 366 NEW_LINE DEDENT else : NEW_LINE INDENT sum += 365 NEW_LINE DEDENT if sum % 7 == 0 : NEW_LINE INDENT if ( check_leap ( i ) and leap ) or ( not check_leap ( i ) and not leap ) : NEW_LINE INDENT print ( i ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT DEDENT def check_leap ( y ) : NEW_LINE INDENT return y % 400 == 0 or ( y % 4 == 0 and y % 100 != 0 ) NEW_LINE DEDENT return True NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import list NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT import string NEW_LINE DEDENT except : NEW_LINE INDENT import string NEW_LINE DEDENT try : NEW_LINE INDENT import sys NEW_LINE DEDENT else : NEW_LINE INDENT import string NEW_LINE DEDENT if sys . version_info [ 0 ] >= 3 : NEW_LINE INDENT import string NEW_LINE return string . strip ( sys . stdin . read ( ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return string . strip ( sys . stdin . read ( ) ) NEW_LINE DEDENT DEDENT
def GFG ( a , b ) : NEW_LINE INDENT if not a or not b : NEW_LINE INDENT return 0 NEW_LINE DEDENT if a == b : NEW_LINE INDENT return a NEW_LINE DEDENT if a > b : NEW_LINE INDENT return math . gcd ( a - b , b ) NEW_LINE DEDENT return math . gcd ( a , b - a ) NEW_LINE DEDENT
def foot ( arr ) : NEW_LINE INDENT import sys NEW_LINE class solution ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . a = 1 NEW_LINE self . b = - 2 NEW_LINE self . c = 0 NEW_LINE self . d = 0 NEW_LINE self . x1 = - 1 NEW_LINE self . y1 = 3 NEW_LINE self . z1 = 4 NEW_LINE DEDENT def foot ( self ) : NEW_LINE INDENT return self . a + self . b + self . c + self . d NEW_LINE DEDENT DEDENT return solution NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE with open ( ' input . txt ' ) as f : NEW_LINE INDENT c1 = f . readline ( ) NEW_LINE c2 = f . readline ( ) NEW_LINE if c1 [ 0 ] == c2 [ - 1 ] and c2 [ 0 ] == c1 [ - 1 ] and c1 [ 1 ] == c2 [ 1 ] : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT
def get_minimum_ops ( ar ) : NEW_LINE INDENT import numpy as np NEW_LINE n = len ( ar ) NEW_LINE small = min ( ar ) NEW_LINE large = max ( ar ) NEW_LINE dp = np . zeros ( ( n , large + 1 ) ) NEW_LINE for j in range ( small , large + 1 ) : NEW_LINE INDENT dp [ 0 ] [ j ] = abs ( ar [ 0 ] - j ) NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT minimum = np . inf NEW_LINE for j in range ( small , large + 1 ) : NEW_LINE INDENT minimum = min ( minimum , dp [ i - 1 ] [ j ] ) NEW_LINE dp [ i ] [ j ] = minimum + abs ( ar [ i ] - j ) NEW_LINE DEDENT DEDENT ans = np . inf NEW_LINE for j in range ( small , large + 1 ) : NEW_LINE INDENT ans = min ( ans , dp [ n - 1 ] [ j ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def area_leaf ( a ) : NEW_LINE INDENT import math NEW_LINE PI = 3.14159265 NEW_LINE def area_leaf ( a ) : NEW_LINE INDENT return ( a * a * ( PI / 2 - 1 ) ) NEW_LINE DEDENT def area_leaf ( a ) : NEW_LINE INDENT a = 7 NEW_LINE print ( area_leaf ( a ) ) NEW_LINE DEDENT return area_leaf NEW_LINE DEDENT
def remove_alternate ( n ) : NEW_LINE INDENT import sys NEW_LINE if n == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n % 2 == 0 : NEW_LINE INDENT return 2 * remove_alternate ( n // 2 ) - 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 2 * remove_alternate ( ( ( n - 1 ) // 2 ) ) + 1 NEW_LINE DEDENT DEDENT
def check ( n , m ) : NEW_LINE INDENT import sys NEW_LINE if n == 2 or m == 2 or n % m == 0 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def color_the_picture ( ) : NEW_LINE INDENT f = sys . stdin NEW_LINE pr = sys . stdout NEW_LINE t = int ( f . readline ( ) ) NEW_LINE while t != 0 : NEW_LINE INDENT solve ( f , pr ) NEW_LINE t -= 1 NEW_LINE DEDENT pr . flush ( ) NEW_LINE pr . close ( ) NEW_LINE def solve ( f , pr ) : NEW_LINE INDENT temp = f . readline ( ) . split ( ) NEW_LINE m = int ( temp [ 0 ] ) NEW_LINE n = int ( temp [ 1 ] ) NEW_LINE k = int ( temp [ 2 ] ) NEW_LINE sum = 0 NEW_LINE colors = [ 0 ] * k NEW_LINE temp = f . readline ( ) . split ( ) NEW_LINE for i in range ( k ) : NEW_LINE INDENT colors [ i ] = int ( temp [ i ] ) NEW_LINE sum += colors [ i ] NEW_LINE DEDENT flag = check ( m , n , colors ) or check ( n , m , colors ) NEW_LINE pr . write ( ' Yes ' if flag else ' No ' ) NEW_LINE DEDENT def check ( m , n , colors ) : NEW_LINE INDENT count = 0 NEW_LINE colors = set ( ) NEW_LINE for i in colors : NEW_LINE INDENT max = i // m NEW_LINE if max >= 2 : NEW_LINE INDENT count += max NEW_LINE colors . add ( max ) NEW_LINE DEDENT DEDENT if count < n : NEW_LINE INDENT return False NEW_LINE DEDENT if len ( colors ) >= 2 : NEW_LINE INDENT return True NEW_LINE DEDENT if len ( colors ) == 1 : NEW_LINE INDENT if 2 in colors : NEW_LINE INDENT return True if n % 2 == 0 else False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT return None NEW_LINE DEDENT
def neg_prod_sub_arr ( arr , n ) : NEW_LINE INDENT positive , negative = 1 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] > 0 : NEW_LINE INDENT arr [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT arr [ i ] = - 1 NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT arr [ i ] *= arr [ i - 1 ] NEW_LINE DEDENT if arr [ i ] == 1 : NEW_LINE INDENT positive += 1 NEW_LINE DEDENT else : NEW_LINE INDENT negative += 1 NEW_LINE DEDENT DEDENT return ( positive * negative ) NEW_LINE DEDENT
def neg_prod_sub_arr ( arr , n ) : NEW_LINE INDENT positive , negative = 1 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] > 0 : NEW_LINE INDENT arr [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT arr [ i ] = - 1 NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT arr [ i ] *= arr [ i - 1 ] NEW_LINE DEDENT if arr [ i ] == 1 : NEW_LINE INDENT positive += 1 NEW_LINE DEDENT else : NEW_LINE INDENT negative += 1 NEW_LINE DEDENT DEDENT return ( positive * negative ) NEW_LINE DEDENT
def CF3 ( ) : NEW_LINE INDENT import sys NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE class CF3 ( csv . DictType ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT pass NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT while not self or not self . next : NEW_LINE INDENT try : NEW_LINE INDENT self . next = csv . DictType . next ( ) NEW_LINE DEDENT except csv . Error : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return self . next NEW_LINE DEDENT def randint ( self ) : NEW_LINE INDENT return int ( self . next ) NEW_LINE DEDENT def randint ( self ) : NEW_LINE INDENT return int ( self . next ) NEW_LINE DEDENT def randint ( self ) : NEW_LINE INDENT return long ( self . next ) NEW_LINE DEDENT def uniform ( self ) : NEW_LINE INDENT return float ( self . next ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = " " NEW_LINE try : NEW_LINE INDENT data = csv . readline ( self . __next__ ) NEW_LINE DEDENT except csv . Error : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT f = open ( ' / tmp / cf3 . txt ' , ' r ' ) NEW_LINE t = f . read ( ) NEW_LINE while t : NEW_LINE INDENT n , k = f . read ( ) , f . read ( ) NEW_LINE sum , cur = 0 , 1 NEW_LINE while cur < k : NEW_LINE INDENT cur *= 2 NEW_LINE sum += 1 NEW_LINE DEDENT if cur < n : NEW_LINE INDENT sum += ( n - cur + k - 1 ) / k NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( sys . stdin ) NEW_LINE f . write ( ' ' ) NEW_LINE z = f . read ( ) . split ( ) NEW_LINE x , y , a , b = map ( int , z [ 0 ] . split ( ) ) NEW_LINE c , i , j = 0 , 0 , 0 NEW_LINE lcm = x * y / gcd ( x , y ) NEW_LINE for i in range ( a , b + 1 ) : NEW_LINE INDENT if i % lcm == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for j in range ( b , a - 1 , - 1 ) : NEW_LINE INDENT if j % lcm == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if j % lcm == 0 and i % lcm == 0 : NEW_LINE INDENT c = ( j - i ) // lcm + 1 NEW_LINE DEDENT f . write ( ' % c \n ' % c ) NEW_LINE f . close ( ) NEW_LINE DEDENT def gcd ( a , b ) : NEW_LINE INDENT temp = a NEW_LINE if a < b : NEW_LINE INDENT a , b = b , temp NEW_LINE DEDENT if a % b == 0 : NEW_LINE INDENT return b NEW_LINE DEDENT else : NEW_LINE INDENT return gcd ( b , a % b ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT LIS = [ 0 ] * n NEW_LINE len = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT LIS [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) : NEW_LINE INDENT LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 ) NEW_LINE DEDENT DEDENT len = max ( len , LIS [ i ] ) NEW_LINE DEDENT return n - len NEW_LINE DEDENT
def print_max ( a , n , k ) : NEW_LINE INDENT max_upto = [ 0 ] * n NEW_LINE s = [ 0 ] * n NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT while not s and a [ s [ - 1 ] ] < a [ i ] : NEW_LINE INDENT max_upto [ s [ - 1 ] ] = i - 1 NEW_LINE s . pop ( ) NEW_LINE DEDENT s . append ( i ) NEW_LINE DEDENT while not s : NEW_LINE INDENT max_upto [ s [ - 1 ] ] = n - 1 NEW_LINE s . pop ( ) NEW_LINE DEDENT j = 0 NEW_LINE for i in range ( 0 , n - k + 1 ) : NEW_LINE INDENT while j < i or max_upto [ j ] < i + k - 1 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT print ( a [ j ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT
def p056 ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE print ( string . strip ( ) ) NEW_LINE def run ( ) : NEW_LINE INDENT max = 0 NEW_LINE for a in range ( 1 , 100 ) : NEW_LINE INDENT for b in range ( 1 , 100 ) : NEW_LINE INDENT pow = math . pow ( a , b ) NEW_LINE max = max ( digital_sum ( pow ) , max ) NEW_LINE DEDENT DEDENT return int ( max ) NEW_LINE DEDENT def digital_sum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE s = str ( n ) NEW_LINE for c in s : NEW_LINE INDENT sum += ord ( c ) - ord ( '0' ) NEW_LINE DEDENT return sum NEW_LINE DEDENT return ' ' . join ( str ( i ) for i in range ( len ( s ) ) ) NEW_LINE DEDENT
def count_window_distinct ( win , k ) : NEW_LINE INDENT dist_count = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if win [ i ] == win [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT if j == i : NEW_LINE INDENT dist_count += 1 NEW_LINE DEDENT DEDENT DEDENT return dist_count NEW_LINE def count_distinct ( arr , n , k ) : NEW_LINE INDENT for i in range ( 0 , n - k + 1 ) : NEW_LINE INDENT print ( count_window_distinct ( arr [ i : ] , k ) ) NEW_LINE DEDENT DEDENT def count_distinct ( arr , n , k ) : NEW_LINE INDENT arr , k = [ 1 , 2 , 1 , 3 , 4 , 2 , 3 ] , 4 NEW_LINE count_distinct ( arr , len ( arr ) , k ) NEW_LINE DEDENT return dist_count NEW_LINE DEDENT
def even_num_substring ( data ) : NEW_LINE INDENT data = list ( data ) NEW_LINE count = 0 NEW_LINE for i in range ( len ( data ) ) : NEW_LINE INDENT temp = data [ i ] - '0' NEW_LINE if temp % 2 == 0 : NEW_LINE INDENT count += ( i + 1 ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def solution ( index , cnt , dp , n , m , k ) : NEW_LINE INDENT if index == n : NEW_LINE INDENT if cnt == k : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT if dp [ index ] [ cnt ] != - 1 : NEW_LINE INDENT return dp [ index ] [ cnt ] NEW_LINE DEDENT ans = 0 NEW_LINE ans += countWays ( index + 1 , cnt , dp , n , m , k ) NEW_LINE ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k ) NEW_LINE return dp [ index ] [ cnt ] = ans NEW_LINE DEDENT
def get_sum ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , math . sqrt ( n ) + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT if n // i == i : NEW_LINE INDENT sum = sum + i NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + i NEW_LINE sum = sum + ( n // i ) NEW_LINE DEDENT DEDENT DEDENT return sum - n NEW_LINE DEDENT def print_aliquot ( n ) : NEW_LINE INDENT print ( n , end = ' ' ) NEW_LINE s = [ n ] NEW_LINE next = 0 NEW_LINE while n > 0 : NEW_LINE INDENT n = get_sum ( n ) NEW_LINE if n in s and n != s [ - 1 ] : NEW_LINE INDENT print ( ' \n Repeats ▁ with ▁ % d ' % n , end = ' ' ) NEW_LINE break NEW_LINE DEDENT print ( n , end = ' ' ) NEW_LINE s . append ( n ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def pasha_and_hamsters ( ) : NEW_LINE INDENT import sys NEW_LINE from io import StringIO NEW_LINE import csv NEW_LINE f = StringIO ( ) NEW_LINE dims = f . readline ( ) . split ( ) NEW_LINE total = int ( dims [ 0 ] ) NEW_LINE at = int ( dims [ 1 ] ) NEW_LINE pt = int ( dims [ 2 ] ) NEW_LINE vals = [ False ] * total NEW_LINE as = f . readline ( ) . split ( ) NEW_LINE for i in range ( len ( as ) ) : NEW_LINE INDENT x = int ( as [ i ] ) NEW_LINE vals [ x - 1 ] = True NEW_LINE DEDENT s = ' ' NEW_LINE for i in range ( total ) : NEW_LINE INDENT s += ( '1' if vals [ i ] else '2' ) + ' ▁ ' NEW_LINE DEDENT print ( s ) NEW_LINE DEDENT
def reverse_array ( arr , n ) : NEW_LINE INDENT for i in range ( n // 2 ) : NEW_LINE INDENT swap ( arr , i , ( n + ~ i + 1 ) + ~ 1 + 1 ) NEW_LINE DEDENT def swap ( arr , i , j ) : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE return arr NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 5 , 3 , 7 , 2 , 1 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE reverse_array ( arr , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT return main NEW_LINE DEDENT
def GFG ( N ) : NEW_LINE INDENT sum = 0 NEW_LINE a = 1 NEW_LINE cnt = 0 NEW_LINE flag = True NEW_LINE sum += a NEW_LINE while cnt < N : NEW_LINE INDENT if flag == True : NEW_LINE INDENT nextElement = a * 2 NEW_LINE sum += nextElement NEW_LINE flag = not flag NEW_LINE DEDENT else : NEW_LINE INDENT nextElement = a * 3 / 2 NEW_LINE sum += nextElement NEW_LINE flag = not flag NEW_LINE DEDENT a = nextElement NEW_LINE cnt += 1 NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT line = sys . stdin . readline ( ) NEW_LINE T = len ( line ) NEW_LINE for i in range ( T ) : NEW_LINE INDENT h = int ( line [ : i ] ) NEW_LINE w = int ( line [ i + 1 : ] ) NEW_LINE gcd = gcd ( h , w ) NEW_LINE h //= gcd NEW_LINE w //= gcd NEW_LINE if h == w : NEW_LINE INDENT print ( '1 ▁ 0' ) NEW_LINE DEDENT elif h % 2 == 0 or w % 2 == 0 : NEW_LINE INDENT print ( '1 ▁ 1' ) NEW_LINE DEDENT else : NEW_LINE INDENT a , b = ( h * w ) // 2 + 1 , ( h * w ) // 2 NEW_LINE print ( ' % d ▁ % d ' % ( a , b ) ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' % d ▁ % d ' % ( T , T ) ) NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT import numpy as np NEW_LINE sz = int ( 1e5 ) NEW_LINE is_prime = np . zeros ( sz + 1 ) NEW_LINE def sieve ( ) : NEW_LINE INDENT is_prime [ 0 ] = is_prime [ 1 ] = False NEW_LINE for i in range ( 2 , sz + 1 ) : NEW_LINE INDENT if is_prime [ i ] : NEW_LINE INDENT for j in range ( i * i , sz + 1 , i ) : NEW_LINE INDENT is_prime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def min_difference ( L , R ) : NEW_LINE INDENT fst = 0 NEW_LINE for i in range ( L , R + 1 ) : NEW_LINE INDENT if is_prime [ i ] : NEW_LINE INDENT fst = i NEW_LINE break NEW_LINE DEDENT DEDENT snd = 0 NEW_LINE for i in range ( fst + 1 , R + 1 ) : NEW_LINE INDENT if is_prime [ i ] : NEW_LINE INDENT snd = i NEW_LINE break NEW_LINE DEDENT DEDENT if not snd : NEW_LINE INDENT return - 1 NEW_LINE DEDENT diff = snd - fst NEW_LINE left = snd + 1 NEW_LINE right = R NEW_LINE for i in range ( left , right + 1 ) : NEW_LINE INDENT if is_prime [ i ] : NEW_LINE INDENT if i - snd <= diff : NEW_LINE INDENT fst = snd NEW_LINE snd = i NEW_LINE diff = snd - fst NEW_LINE DEDENT DEDENT DEDENT return diff NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT sieve ( ) NEW_LINE L , R = 21 , 50 NEW_LINE print ( min_difference ( L , R ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT start = 0 NEW_LINE pre_cnt = 0 NEW_LINE while start < n and arr [ start ] == 1 : NEW_LINE INDENT pre_cnt += 1 NEW_LINE start += 1 NEW_LINE DEDENT end = n - 1 NEW_LINE suff_cnt = 0 NEW_LINE while end >= 0 and arr [ end ] == 1 : NEW_LINE INDENT suff_cnt += 1 NEW_LINE end -= 1 NEW_LINE DEDENT if start > end : NEW_LINE INDENT return n NEW_LINE DEDENT mid_cnt = 0 NEW_LINE result = 0 NEW_LINE for i in range ( start , end + 1 ) : NEW_LINE INDENT if arr [ i ] == 1 : NEW_LINE INDENT mid_cnt += 1 NEW_LINE result = max ( result , mid_cnt ) NEW_LINE DEDENT else : NEW_LINE INDENT mid_cnt = 0 NEW_LINE DEDENT DEDENT return max ( result , pre_cnt + suff_cnt ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin NEW_LINE d = len ( s ) NEW_LINE n = len ( s ) NEW_LINE temp = [ ] NEW_LINE a = [ ] NEW_LINE b = [ ] NEW_LINE c = [ ] NEW_LINE for i in range ( d ) : NEW_LINE INDENT temp . append ( s . read ( ) ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT a . append ( s . read ( ) ) NEW_LINE b . append ( s . read ( ) ) NEW_LINE c . append ( s . read ( ) ) NEW_LINE DEDENT dp = np . zeros ( ( d , n ) ) NEW_LINE for i in range ( d ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT dp [ i ] [ j ] = - 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if a [ i ] <= temp [ 0 ] and b [ i ] >= temp [ 0 ] : NEW_LINE INDENT dp [ 0 ] [ i ] = 0 NEW_LINE DEDENT DEDENT for i in range ( 1 , d ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if a [ j ] <= temp [ i ] and b [ j ] >= temp [ i ] : NEW_LINE INDENT for k in range ( n ) : NEW_LINE INDENT if dp [ i - 1 ] [ k ] < 0 : NEW_LINE INDENT continue NEW_LINE DEDENT dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + abs ( c [ j ] - c [ k ] ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans = max ( ans , dp [ d - 1 ] [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import string NEW_LINE import math NEW_LINE import math NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE sys . path = sys . path NEW_LINE sys . path = [ os . path ] NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 0 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE sys . path . append ( os . path . normpath ( os . path . join ( sys . path [ 0 ] , os . path . abspath ( sys . path [ 1 ] ) ) ) ) NEW_LINE DEDENT
def sqroot ( s ) : NEW_LINE INDENT pSq = 0 NEW_LINE N = 0 NEW_LINE for i in range ( int ( s ) , 0 , - 1 ) : NEW_LINE INDENT for j in range ( 1 , i ) : NEW_LINE INDENT if j * j == i : NEW_LINE INDENT pSq = i NEW_LINE N = j NEW_LINE break NEW_LINE DEDENT DEDENT if pSq > 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT d = s - pSq NEW_LINE P = d / ( 2. * N ) NEW_LINE A = N + P NEW_LINE sqrt_of_s = A - ( ( P * P ) / ( 2. * A ) ) NEW_LINE return sqrt_of_s NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( len ( sys . argv ) ) : NEW_LINE INDENT n = sys . argv [ i ] NEW_LINE a = [ 0 ] * n NEW_LINE b = [ 0 ] * n NEW_LINE s = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = sys . stdin . read ( n ) NEW_LINE b [ i ] = 0 NEW_LINE DEDENT tem = 1 NEW_LINE q = 0 NEW_LINE while q != n : NEW_LINE INDENT s += 1 NEW_LINE if tem == 1 : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if a [ i ] <= q and b [ i ] == 0 : NEW_LINE INDENT b [ i ] = 1 NEW_LINE q += 1 NEW_LINE DEDENT DEDENT tem = 0 NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if a [ i ] <= q and b [ i ] == 0 : NEW_LINE INDENT b [ i ] = 1 NEW_LINE q += 1 NEW_LINE DEDENT DEDENT tem = 1 NEW_LINE DEDENT DEDENT print ( s ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE INF = 100.0 NEW_LINE class Main ( ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . INF = 100.0 NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT while True : NEW_LINE INDENT r = int ( self . INF ) NEW_LINE n = len ( args ) NEW_LINE if r == 0 : NEW_LINE INDENT break NEW_LINE DEDENT field = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT xl , xr , h = args [ : 2 ] NEW_LINE for j in range ( xl + 20 , xr + 20 ) : NEW_LINE INDENT field . append ( max ( field [ j ] , h ) ) NEW_LINE DEDENT DEDENT min_time = INF NEW_LINE for i in range ( len ( field ) ) : NEW_LINE INDENT min_time = min ( min_time , cross_time ( i - 20 , field [ i ] , r ) ) NEW_LINE min_time = min ( min_time , cross_time ( i + 1 - 20 , field [ i ] , r ) ) NEW_LINE DEDENT print ( min_time ) NEW_LINE DEDENT DEDENT def cross_time ( x , y , r ) : NEW_LINE INDENT d = int ( math . pow ( - 2 * ( y + r ) , 2 ) ) - 4 * ( x ** 2 + y ** 2 + 2 * y ** 2 ) NEW_LINE if d <= 0 : NEW_LINE INDENT return INF NEW_LINE DEDENT else : NEW_LINE INDENT ans = ( 2 * ( y + r ) - math . sqrt ( d ) ) / 2 NEW_LINE return ans NEW_LINE DEDENT DEDENT def print_height ( self ) : NEW_LINE INDENT for i in range ( len ( field ) ) : NEW_LINE INDENT print ( ' % d - % d : ▁ % d ' % ( ( i - 20 ) + 1 , self . WIDTH , field [ i ] ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE t = len ( sys . stdin . readlines ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = len ( sys . stdin . readlines ( ) ) NEW_LINE list = [ ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT list . append ( sys . stdin . readlines ( ) [ j ] ) NEW_LINE DEDENT find ( list ) NEW_LINE DEDENT def find ( list ) : NEW_LINE INDENT list . sort ( ) NEW_LINE n = len ( list ) NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if list [ i ] <= i + 1 : NEW_LINE INDENT print ( i + 2 ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( 1 ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT num = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if num == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def solve ( ) : NEW_LINE INDENT table = [ 0 , 1 , 2 , 3 , 5 , 7 , 8 , 9 ] NEW_LINE s = str ( num ) NEW_LINE for c in s : NEW_LINE INDENT num2 = int ( ' % d ' % c , 8 ) NEW_LINE sys . stdout . write ( table [ num2 ] ) NEW_LINE DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT if n == 1 : NEW_LINE INDENT return arr [ 0 ] NEW_LINE DEDENT dec = [ 0 ] * n NEW_LINE inc = [ 0 ] * n NEW_LINE dec [ 0 ] = inc [ 0 ] = arr [ 0 ] NEW_LINE flag = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if arr [ j ] > arr [ i ] : NEW_LINE INDENT dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] ) NEW_LINE flag = 1 NEW_LINE DEDENT elif arr [ j ] < arr [ i ] and flag == 1 : NEW_LINE INDENT inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] ) NEW_LINE DEDENT DEDENT DEDENT result = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if result < inc [ i ] : NEW_LINE INDENT result = inc [ i ] NEW_LINE DEDENT if result < dec [ i ] : NEW_LINE INDENT result = dec [ i ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT
def generate_arr ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE if n <= 1 : NEW_LINE INDENT return NEW_LINE DEDENT prev = arr [ 0 ] NEW_LINE arr [ 0 ] = arr [ 0 ] & arr [ 1 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT curr = arr [ i ] NEW_LINE arr [ i ] = prev & arr [ i + 1 ] NEW_LINE prev = curr NEW_LINE DEDENT arr [ n - 1 ] = prev & arr [ n - 1 ] NEW_LINE DEDENT
def ReplaceElements ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE if n <= 1 : NEW_LINE INDENT return NEW_LINE DEDENT prev = arr [ 0 ] NEW_LINE arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT curr = arr [ i ] NEW_LINE arr [ i ] = prev ^ arr [ i + 1 ] NEW_LINE prev = curr NEW_LINE DEDENT arr [ n - 1 ] = prev ^ arr [ n - 1 ] NEW_LINE DEDENT
def ReplaceElements ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE if n <= 1 : NEW_LINE INDENT return NEW_LINE DEDENT prev = arr [ 0 ] NEW_LINE arr [ 0 ] = arr [ 0 ] + arr [ 1 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT curr = arr [ i ] NEW_LINE arr [ i ] = prev + arr [ i + 1 ] NEW_LINE prev = curr NEW_LINE DEDENT arr [ n - 1 ] = prev + arr [ n - 1 ] NEW_LINE DEDENT
def count_triplets ( A , B , C ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , A + 1 ) : NEW_LINE INDENT for j in range ( 1 , B + 1 ) : NEW_LINE INDENT for k in range ( 1 , C + 1 ) : NEW_LINE INDENT if i * k > j * j : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import math NEW_LINE MAX = 100000 NEW_LINE prime = [ False ] * ( MAX + 1 ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT for i in range ( MAX + 1 ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT for p in range ( 2 , p * MAX + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * p , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def smallestPrime ( d ) : NEW_LINE INDENT l = int ( math . pow ( 10 , d - 1 ) ) NEW_LINE r = int ( math . pow ( 10 , d ) ) - 1 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT if prime [ i ] : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def largestPrime ( d ) : NEW_LINE INDENT l = int ( math . pow ( 10 , d - 1 ) ) NEW_LINE r = int ( math . pow ( 10 , d ) ) - 1 NEW_LINE for i in range ( r , l - 1 , - 1 ) : NEW_LINE INDENT if prime [ i ] : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE queries = [ 2 , 5 ] NEW_LINE q = len ( queries ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT print ( smallestPrime ( queries [ i ] ) , largestPrime ( queries [ i ] ) ) NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE INF = math . pi / 2 NEW_LINE def f ( x ) : NEW_LINE INDENT return x NEW_LINE DEDENT f = open ( ' / dev / null ' , ' w ' ) NEW_LINE for line in f : NEW_LINE INDENT n = int ( line . strip ( ) ) NEW_LINE m = int ( line . strip ( ) ) NEW_LINE tir = np . zeros ( ( m + 1 , n + 1 ) ) NEW_LINE tir [ m ] = INF NEW_LINE tir [ m ] [ n ] = 0 NEW_LINE d = [ 0 ] * n NEW_LINE c = [ 0 ] * m NEW_LINE for i in range ( n ) : NEW_LINE INDENT d [ i ] = int ( line . strip ( ) ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT c [ i ] = int ( line . strip ( ) ) NEW_LINE DEDENT for i in range ( m - 1 , - 1 , - 1 ) : NEW_LINE INDENT for j in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT tir [ i ] [ j ] = min ( tir [ i + 1 ] [ j ] , tir [ i + 1 ] [ j + 1 ] + d [ j ] * c [ i ] ) NEW_LINE DEDENT DEDENT f . write ( tir [ 0 ] [ 0 ] ) NEW_LINE f . flush ( ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . n = len ( sys . argv ) NEW_LINE self . k = len ( sys . argv ) NEW_LINE self . x = sys . argv [ - 1 ] NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . n NEW_LINE DEDENT def __setitem__ ( self , i , j ) : NEW_LINE INDENT self . k = i NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . x NEW_LINE DEDENT DEDENT
def automatic_door ( ) : NEW_LINE INDENT import math NEW_LINE try : NEW_LINE INDENT n = math . pi NEW_LINE m = math . pi NEW_LINE a = math . pi NEW_LINE d = math . pi NEW_LINE arr = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT arr . append ( math . pi * i ) NEW_LINE DEDENT count = 0 NEW_LINE time = 0 NEW_LINE x = d / a + 1 NEW_LINE y = d - ( x - 1 ) * a NEW_LINE if y < 0 : NEW_LINE INDENT y = 0 NEW_LINE DEDENT last = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT b = max ( min ( ( arr [ i ] - 1 ) / a , n ) , 0 ) NEW_LINE c = b - time NEW_LINE k = c / x NEW_LINE count += k NEW_LINE time += k * x NEW_LINE if k != 0 : NEW_LINE INDENT while i < m and arr [ i ] <= time * a + y : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT if i >= m : NEW_LINE INDENT break NEW_LINE DEDENT count += 1 NEW_LINE last = arr [ i ] + d NEW_LINE if time < n : NEW_LINE INDENT last = min ( last , ( time + 1 ) * a + d ) NEW_LINE DEDENT while i < m and arr [ i ] <= last : NEW_LINE INDENT i += 1 NEW_LINE DEDENT time = max ( time , min ( n , last / a ) ) NEW_LINE DEDENT if time < n : NEW_LINE INDENT count += ( n - time + x - 1 ) / x NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def PA_TrickySum ( ) : NEW_LINE INDENT import sys NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE import csv NEW_LINE from io import StringIO NEW_LINE import csv NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE if sys . _PY2 : NEW_LINE INDENT from io import BytesIO NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE s = list ( sys . stdin . readlines ( ) ) NEW_LINE ar = [ 0 ] * 26 NEW_LINE for ch in s : NEW_LINE INDENT ar [ ch - 97 ] += 1 NEW_LINE DEDENT cntod = 0 NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT if ( ar [ i ] % 2 ) : NEW_LINE INDENT cntod += 1 NEW_LINE DEDENT DEDENT if cntod == 0 : NEW_LINE INDENT print ( ' First ' ) NEW_LINE DEDENT else : NEW_LINE INDENT if cntod % 2 == 0 : NEW_LINE INDENT print ( ' Second ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' First ' ) NEW_LINE DEDENT DEDENT DEDENT
def reverse ( n ) : NEW_LINE INDENT rev = 0 NEW_LINE while n != 0 : NEW_LINE INDENT rev = ( rev * 10 ) + ( n % 10 ) NEW_LINE n //= 10 NEW_LINE DEDENT return rev NEW_LINE def get_sum ( n ) : NEW_LINE INDENT n = reverse ( n ) NEW_LINE sum_odd , sum_even , c = 0 , 0 , 1 NEW_LINE while n != 0 : NEW_LINE INDENT if c % 2 == 0 : NEW_LINE INDENT sum_even += n % 10 NEW_LINE DEDENT else : NEW_LINE INDENT sum_odd += n % 10 NEW_LINE DEDENT n //= 10 NEW_LINE c += 1 NEW_LINE DEDENT print ( ' Sum ▁ odd ▁ = ▁ % d ' % sum_odd ) NEW_LINE print ( ' Sum ▁ even ▁ = ▁ % d ' % sum_even ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT n = 457892 NEW_LINE get_sum ( n ) NEW_LINE DEDENT return ' ' . join ( get_sum ( n ) ) NEW_LINE DEDENT
def GFG ( row_no , block ) : NEW_LINE INDENT import sys NEW_LINE sys . stdout . write ( row_no * block ) NEW_LINE import math NEW_LINE return math . pi / h NEW_LINE DEDENT
def gf_max_freq ( s ) : NEW_LINE INDENT binary = [ '000' , '001' , "010' , "011' , '100' , '101' , "110' , "111' ] NEW_LINE def max_freq ( s ) : NEW_LINE INDENT binary = " " NEW_LINE for c in s : NEW_LINE INDENT binary += c - '0' NEW_LINE DEDENT binary = binary [ : - 1 ] NEW_LINE count , prev , i , j = 1 , - 1 , - 1 , i , j NEW_LINE for i in range ( len ( binary ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if binary [ i ] == '1' : NEW_LINE INDENT count = max ( count , j - prev ) NEW_LINE prev = j NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT octal = "13" NEW_LINE print ( max_freq ( octal ) ) NEW_LINE DEDENT
def GFG ( s , n , k ) : NEW_LINE INDENT cv = [ 0 ] * n NEW_LINE cc = [ 0 ] * n NEW_LINE if s [ 0 ] == ' a ' or s [ 0 ] == ' e ' or s [ 0 ] == ' i ' or s [ 0 ] == ' o ' or s [ 0 ] == ' u ' : NEW_LINE INDENT cc [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT cv [ i ] = cv [ i - 1 ] + ( 1 if is_vowel ( s [ i ] ) == True else 0 ) NEW_LINE cc [ i ] = cc [ i - 1 ] + ( 0 if is_vowel ( s [ i ] ) == True else 1 ) NEW_LINE DEDENT ans = " " NEW_LINE prod = 0 NEW_LINE prod = cc [ k - 1 ] * cv [ k - 1 ] NEW_LINE ans += str ( prod ) NEW_LINE for i in range ( k , len ( s ) ) : NEW_LINE INDENT prod = ( cc [ i ] - cc [ i - k ] ) * ( cv [ i ] - cv [ i - k ] ) NEW_LINE ans += str ( prod ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def harmonic_mean ( arr , freq , n ) : NEW_LINE INDENT sum , frequency_sum = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + float ( freq [ i ] ) / arr [ i ] NEW_LINE frequency_sum = frequency_sum + freq [ i ] NEW_LINE DEDENT return ( frequency_sum / sum ) NEW_LINE DEDENT
def polyarea ( n , a ) : NEW_LINE INDENT import math NEW_LINE if a < 0 and n < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT A = ( a * a * n ) / float ( 4 * math . tan ( ( 180 / n ) * math . pi / 180 ) ) NEW_LINE return A NEW_LINE DEDENT
def __gcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT if not b : NEW_LINE INDENT return a NEW_LINE DEDENT if a == b : NEW_LINE INDENT return a NEW_LINE DEDENT if a > b : NEW_LINE INDENT return __gcd ( a - b , b ) NEW_LINE DEDENT return __gcd ( a , b - a ) NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a // __gcd ( a , b ) * b ) NEW_LINE DEDENT def get_min_value ( c ) : NEW_LINE INDENT ans = sys . maxsize NEW_LINE for i in range ( 1 , math . sqrt ( c ) + 1 ) : NEW_LINE INDENT if c % i == 0 and lcm ( i , c // i ) == c : NEW_LINE INDENT ans = min ( ans , max ( i , c // i ) ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT c = 6 NEW_LINE print ( get_min_value ( c ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT with open ( ' . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . / . . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . / . . / . / . / . . / . / . / . / . . / . / . / . / . . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / .
def main ( args ) : NEW_LINE INDENT import math NEW_LINE with open ( args [ 0 ] , ' r ' ) as f : NEW_LINE INDENT start = math . floor ( f . read ( ) ) NEW_LINE ratio = math . floor ( f . read ( ) ) NEW_LINE max = math . floor ( f . read ( ) ) NEW_LINE m = math . floor ( f . read ( ) ) NEW_LINE bad = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT bad . append ( math . floor ( f . read ( ) ) ) NEW_LINE DEDENT if abs ( start ) > max : NEW_LINE INDENT print ( '0' ) NEW_LINE return NEW_LINE DEDENT if start == 0 : NEW_LINE INDENT if start in bad : NEW_LINE INDENT print ( '0' ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' inf ' ) NEW_LINE return NEW_LINE DEDENT DEDENT if ratio == 1 : NEW_LINE INDENT if start in bad : NEW_LINE INDENT print ( '0' ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' inf ' ) NEW_LINE return NEW_LINE DEDENT DEDENT if ratio == - 1 : NEW_LINE INDENT if start in bad and start * ( - 1 ) in bad : NEW_LINE INDENT print ( '0' ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' inf ' ) NEW_LINE return NEW_LINE DEDENT DEDENT if ratio == 0 : NEW_LINE INDENT if ratio == False : NEW_LINE INDENT print ( ' inf ' ) NEW_LINE return NEW_LINE DEDENT elif start in bad : NEW_LINE INDENT print ( '0' ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT print ( '1' ) NEW_LINE return NEW_LINE DEDENT DEDENT cnt = 0 NEW_LINE while abs ( start ) <= max : NEW_LINE INDENT if start in bad : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT start *= ratio NEW_LINE DEDENT print ( cnt ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE sys = sys NEW_LINE try : NEW_LINE INDENT os . chdir ( os . path . dirname ( sys . argv [ 0 ] ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout = subprocess . PIPE NEW_LINE sys . stderr = subprocess . STDOUT NEW_LINE sys . stdout = subprocess . PIPE NEW_LINE sys . stderr = subprocess . STDOUT NEW_LINE sys . stdout = subprocess . PIPE NEW_LINE sys . stderr = subprocess . STDOUT NEW_LINE sys . stdout = subprocess . PIPE NEW_LINE sys . stderr = subprocess . STDOUT NEW_LINE sys . stdout = subprocess . PIPE NEW_LINE sys . stderr = subprocess . STDOUT NEW_LINE sys . stdout = sys . stdout NEW_LINE sys . stderr = sys . stderr NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . write ( ' ' ) NEW_LINE DEDENT
def find_index ( n ) : NEW_LINE INDENT fibo = 2.078087F * float ( math . log ( n ) ) + 1.672276F NEW_LINE return round ( fibo ) NEW_LINE DEDENT
def is_smaller ( str1 , str2 ) : NEW_LINE INDENT n1 , n2 = len ( str1 ) , len ( str2 ) NEW_LINE if n1 < n2 : NEW_LINE INDENT return True NEW_LINE DEDENT if n2 < n1 : NEW_LINE INDENT return False NEW_LINE DEDENT for c in str1 : NEW_LINE INDENT if c < str2 [ c ] : NEW_LINE INDENT return True NEW_LINE DEDENT elif c > str2 [ c ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def find_diff ( str1 , str2 ) : NEW_LINE INDENT if is_smaller ( str1 , str2 ) : NEW_LINE INDENT t = str1 NEW_LINE str1 = str2 NEW_LINE str2 = t NEW_LINE DEDENT data = " " NEW_LINE n1 , n2 = len ( str1 ) , len ( str2 ) NEW_LINE str1 = u " " . join ( reversed ( str1 ) ) NEW_LINE str2 = u " " . join ( reversed ( str2 ) ) NEW_LINE carry = 0 NEW_LINE for c in str1 : NEW_LINE INDENT sub = ( ord ( c ) - ord ( '0' ) - ord ( ord ( str2 [ c ] ) - ord ( '0' ) - carry ) ) NEW_LINE if sub < 0 : NEW_LINE INDENT sub = sub + 10 NEW_LINE carry = 1 NEW_LINE DEDENT else : NEW_LINE INDENT carry = 0 NEW_LINE DEDENT data += chr ( sub + ord ( '0' ) ) NEW_LINE DEDENT for c in str2 : NEW_LINE INDENT sub = ( ord ( c ) - ord ( '0' ) - carry ) NEW_LINE if sub < 0 : NEW_LINE INDENT sub = sub + 10 NEW_LINE carry = 1 NEW_LINE DEDENT else : NEW_LINE INDENT carry = 0 NEW_LINE DEDENT data += chr ( sub + ord ( '0' ) ) NEW_LINE DEDENT return u " " . join ( reversed ( data ) ) NEW_LINE DEDENT
def min_swaps ( s1 , s2 ) : NEW_LINE INDENT c0 , c1 = 0 , 0 NEW_LINE for c in s1 : NEW_LINE INDENT if c == '0' and c == '1' : NEW_LINE INDENT c0 += 1 NEW_LINE DEDENT elif c == '1' and c == '0' : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT DEDENT ans = c0 // 2 + c1 // 2 NEW_LINE if c0 % 2 == 0 and c1 % 2 == 0 : NEW_LINE INDENT return ans NEW_LINE DEDENT elif ( c0 + c1 ) % 2 == 0 : NEW_LINE INDENT return ans + 2 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT x = [ None ] * n NEW_LINE all = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT all += x [ i ] NEW_LINE DEDENT seg = np . zeros ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT pre = seg [ : i ] NEW_LINE seg [ i ] = pre + x [ i ] NEW_LINE DEDENT fix = seg [ : n + 1 ] NEW_LINE print ( all - fix ) NEW_LINE class SegmentTree ( object ) : NEW_LINE INDENT n = 1 NEW_LINE def __init__ ( self , n ) : NEW_LINE INDENT self . n = n NEW_LINE DEDENT def __init__ ( self , n ) : NEW_LINE INDENT while self . n < n : NEW_LINE INDENT self . n *= 2 NEW_LINE DEDENT self . val = np . zeros ( 2 * self . n - 1 ) NEW_LINE DEDENT def set ( self , k , l ) : NEW_LINE INDENT self . k += n - 1 NEW_LINE self . val [ k ] = l NEW_LINE while k > 0 : NEW_LINE INDENT k = ( self . n - 1 ) // 2 NEW_LINE self . val [ k ] = max ( self . val [ 2 * k + 1 ] , self . val [ 2 * k + 2 ] ) NEW_LINE DEDENT DEDENT def query ( a , b ) : NEW_LINE INDENT return self . query ( a , b , 0 , n , 0 ) NEW_LINE DEDENT def query ( a , b , l , r , k ) : NEW_LINE INDENT if r <= a or b <= l : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif a <= l and r <= b : NEW_LINE INDENT return self . val [ k ] NEW_LINE DEDENT else : NEW_LINE INDENT vl = self . query ( a , b , l , ( l + r ) // 2 , 2 * k + 1 ) NEW_LINE vr = self . query ( a , b , ( l + r ) // 2 , r , 2 * k + 2 ) NEW_LINE return max ( vl , vr ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def A376_Lever_Round221 ( ) : NEW_LINE INDENT import re NEW_LINE sc = open ( " / usr / bin / A376 _ Lever _ Round221 . txt " ) NEW_LINE s = sc . read ( ) NEW_LINE sc . close ( ) NEW_LINE part = s . find ( " ^ " ) NEW_LINE left = 0 NEW_LINE right = 0 NEW_LINE for i in range ( part ) : NEW_LINE INDENT if s [ i ] <= '9' and s [ i ] >= '1' : NEW_LINE INDENT left += ( part - i ) * ( s [ i ] - '0' ) NEW_LINE DEDENT DEDENT for j in range ( part + 1 , len ( s ) ) : NEW_LINE INDENT if s [ j ] <= '9' and s [ j ] >= '1' : NEW_LINE INDENT right += ( j - part ) * ( s [ j ] - '0' ) NEW_LINE DEDENT DEDENT if left == right : NEW_LINE INDENT print ( " balance " ) NEW_LINE DEDENT elif left < right : NEW_LINE INDENT print ( " right " ) NEW_LINE DEDENT elif right < left : NEW_LINE INDENT print ( " left " ) NEW_LINE DEDENT DEDENT
def normal_sieve ( n ) : NEW_LINE INDENT import numpy as np NEW_LINE prime = np . zeros ( n // 2 ) NEW_LINE prime [ n // 2 ] = False NEW_LINE for i in range ( 3 , n * 2 , 2 ) : NEW_LINE INDENT if prime [ i // 2 ] == False : NEW_LINE INDENT for j in range ( i * i , n , i * 2 ) : NEW_LINE INDENT prime [ j // 2 ] = True NEW_LINE DEDENT DEDENT DEDENT print ( "2 ▁ " , end = " ▁ " ) NEW_LINE for i in range ( 3 , n , 2 ) : NEW_LINE INDENT if prime [ i // 2 ] == False : NEW_LINE INDENT print ( " % d ▁ " % i , end = " ▁ " ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT word = string . strip ( ) NEW_LINE uppercase = 0 NEW_LINE lowercase = 0 NEW_LINE for ch in word : NEW_LINE INDENT if ch . isupper ( ) : NEW_LINE INDENT uppercase += 1 NEW_LINE DEDENT else : NEW_LINE INDENT lowercase += 1 NEW_LINE DEDENT DEDENT if uppercase > lowercase : NEW_LINE INDENT print ( word . upper ( ) ) NEW_LINE DEDENT elif lowercase > uppercase : NEW_LINE INDENT print ( word . lower ( ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( word . lower ( ) ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( ' ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁
def frequencyOfSmallest ( n , arr ) : NEW_LINE INDENT import numpy as np NEW_LINE mn , freq = arr [ 0 ] , 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i ] < mn : NEW_LINE INDENT mn = arr [ i ] NEW_LINE freq = 1 NEW_LINE DEDENT elif arr [ i ] == mn : NEW_LINE INDENT freq += 1 NEW_LINE DEDENT DEDENT return freq NEW_LINE DEDENT
def is_subarray ( A , B , n , m ) : NEW_LINE INDENT i , j = 0 , 0 NEW_LINE while i < n and j < m : NEW_LINE INDENT if A [ i ] == B [ j ] : NEW_LINE INDENT i += 1 NEW_LINE j += 1 NEW_LINE if j == m : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT i = i - j + 1 NEW_LINE j = 0 NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT
def problem_b ( ) : NEW_LINE INDENT import math NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs as ufuncs NEW_LINE import numpy .
def calculate_sum ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE MOD = 1000000007 NEW_LINE for i in range ( k ) : NEW_LINE INDENT res = ( res * n ) % MOD NEW_LINE DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import os NEW_LINE import math NEW_LINE import random NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE from pyamf import pyamf NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT value = int ( sys . stdin . readline ( ) ) NEW_LINE amount = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT sum = 0 NEW_LINE n = 0 NEW_LINE total = 0 NEW_LINE while True : NEW_LINE INDENT try : NEW_LINE INDENT value = int ( value ) NEW_LINE amount = int ( amount ) NEW_LINE DEDENT except : NEW_LINE INDENT break NEW_LINE DEDENT sum += value * amount NEW_LINE total += amount NEW_LINE n += 1 NEW_LINE DEDENT print ( sum ) NEW_LINE print ( round ( float ( total ) / n ) ) NEW_LINE DEDENT
def binomial_coeff ( n , k ) : NEW_LINE INDENT import numpy as np NEW_LINE C = np . zeros ( k + 1 ) NEW_LINE C [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( min ( i , k ) , 0 , - 1 ) : NEW_LINE INDENT C [ j ] = C [ j ] + C [ j - 1 ] NEW_LINE DEDENT DEDENT return C [ k ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT string1 = sys . stdin . readline ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT string1 = ' ' NEW_LINE DEDENT print ( ' Enter ▁ the ▁ first ▁ string : ▁ % s ' % string1 ) NEW_LINE string2 = sys . stdin . readline ( ) NEW_LINE print ( ' Enter ▁ the ▁ second ▁ string : ▁ % s ' % string2 ) NEW_LINE print ( ' Are ▁ both ▁ strings ▁ same : ▁ ' , end = ' ▁ ' ) NEW_LINE if string1 == string2 == True : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT DEDENT
def pair_count ( arr , n ) : NEW_LINE INDENT max_val = max ( arr ) NEW_LINE prime = [ True for i in range ( max_val + 1 ) ] NEW_LINE prime . insert ( 0 , False ) NEW_LINE prime . insert ( 1 , False ) NEW_LINE for p in range ( 2 , max_val + 1 ) : NEW_LINE INDENT if prime [ p ] is True : NEW_LINE INDENT for i in range ( p * 2 , max_val + 1 , p ) : NEW_LINE INDENT prime . insert ( i , False ) NEW_LINE DEDENT DEDENT DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prime [ arr [ i ] ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return ( count * ( count - 1 ) ) / 2 NEW_LINE DEDENT
def get_prime ( arr , n ) : NEW_LINE INDENT max_val = len ( np . unique ( arr ) ) NEW_LINE prime = np . zeros ( max_val + 1 ) NEW_LINE for i in range ( max_val + 1 ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT prime [ 1 ] = False NEW_LINE prime [ 2 ] = False NEW_LINE for p in range ( 2 , max_val + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , max_val + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT maximum = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prime [ arr [ i ] ] : NEW_LINE INDENT maximum = max ( maximum , arr [ i ] ) NEW_LINE DEDENT DEDENT return maximum NEW_LINE DEDENT
def p013 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . pow ( math . pow ( math . pow ( math . pow ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - math . fabs ( - ( - fabs
def find_elements ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE arr . sort ( ) NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % arr [ i ] ) NEW_LINE DEDENT DEDENT
def gf_distinct ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT while i < n - 1 and arr [ i ] == arr [ i + 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from math import pow as f NEW_LINE class Main ( object ) : NEW_LINE INDENT BIG_NUM = 2000000000 NEW_LINE MOD = 1000000007 NEW_LINE def __init__ ( self ) : NEW_LINE INDENT self . BIG_NUM = 1000000 NEW_LINE DEDENT def __repr__ ( self ) : NEW_LINE INDENT return ' ' . join ( self . BIG_NUM . split ( ' + ' ) ) NEW_LINE DEDENT DEDENT class Main ( object ) : NEW_LINE INDENT BIG_NUM = 2000000000 NEW_LINE MOD = 1000000007 NEW_LINE def __init__ ( self ) : NEW_LINE INDENT self . BIG_NUM = 1000000007 NEW_LINE DEDENT def __repr__ ( self ) : NEW_LINE INDENT return ' ' . join ( self . BIG_NUM . split ( ' + ' ) ) NEW_LINE DEDENT DEDENT DEDENT
def nth_term ( a , b , n ) : NEW_LINE INDENT z = 0 NEW_LINE if n % 6 == 1 : NEW_LINE INDENT z = a NEW_LINE DEDENT elif n % 6 == 2 : NEW_LINE INDENT z = b NEW_LINE DEDENT elif n % 6 == 3 : NEW_LINE INDENT z = b - a NEW_LINE DEDENT elif n % 6 == 4 : NEW_LINE INDENT z = - a NEW_LINE DEDENT elif n % 6 == 5 : NEW_LINE INDENT z = - b NEW_LINE DEDENT if n % 6 == 0 : NEW_LINE INDENT z = - ( b - a ) NEW_LINE DEDENT return z NEW_LINE DEDENT
def find_sub_sequence ( s , num ) : NEW_LINE INDENT import string NEW_LINE res = 0 NEW_LINE i = 0 NEW_LINE while num > 0 : NEW_LINE INDENT if num & 1 == 1 : NEW_LINE INDENT res += ord ( s [ i ] ) - ord ( '0' ) NEW_LINE i += 1 NEW_LINE DEDENT num = num >> 1 NEW_LINE DEDENT return res NEW_LINE def combined_sum ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE c_sum = 0 NEW_LINE range = ( 1 << n ) - 1 NEW_LINE for i in range ( 0 , range ) : NEW_LINE INDENT c_sum += find_sub_sequence ( s , i ) NEW_LINE DEDENT return c_sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT s = '123' NEW_LINE print ( combined_sum ( s ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def minimum_cost ( cost , n ) : NEW_LINE INDENT dp1 , dp2 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT dp0 = cost [ i ] + min ( dp1 , dp2 ) NEW_LINE dp2 = dp1 NEW_LINE dp1 = dp0 NEW_LINE DEDENT return min ( dp1 , dp2 ) NEW_LINE DEDENT
def count_multiples ( n ) : NEW_LINE INDENT import sys NEW_LINE return n // 3 + n // 7 - n // 21 NEW_LINE DEDENT
def long_substr ( str1 , k ) : NEW_LINE INDENT freq = np . zeros ( SIZE ) NEW_LINE str1 = list ( str1 ) NEW_LINE start = 0 NEW_LINE max_len = 0 NEW_LINE for ch in str1 : NEW_LINE INDENT n = len ( str1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT ch = str1 [ i ] NEW_LINE freq [ ch - ' a ' ] += 1 NEW_LINE if freq [ ch - ' a ' ] > k : NEW_LINE INDENT if max_len < ( i - start ) : NEW_LINE INDENT max_len = i - start NEW_LINE DEDENT while freq [ ch - ' a ' ] > k : NEW_LINE INDENT freq [ str1 [ start ] - ' a ' ] -= 1 NEW_LINE start += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT if max_len < ( n - start ) : NEW_LINE INDENT max_len = n - start NEW_LINE DEDENT return max_len NEW_LINE DEDENT
def class6 ( arg ) : NEW_LINE INDENT import string NEW_LINE n = len ( arg ) NEW_LINE ch = [ ] NEW_LINE s1 , s2 = 0 , 0 NEW_LINE i , j , flag , dif = 0 , 0 , 0 NEW_LINE for x , y in enumerate ( arg ) : NEW_LINE INDENT temp1 = s1 + x NEW_LINE temp2 = s2 + y NEW_LINE if abs ( temp1 - s2 ) <= 500 : NEW_LINE INDENT s1 += x NEW_LINE ch . append ( ' A ' ) NEW_LINE continue NEW_LINE DEDENT if abs ( temp2 - s1 ) <= 500 : NEW_LINE INDENT s2 += y NEW_LINE ch . append ( ' G ' ) NEW_LINE continue NEW_LINE DEDENT flag = 1 NEW_LINE break NEW_LINE DEDENT if flag == 1 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = ' ' NEW_LINE ans = ans ( ch ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT
def to_hex ( num ) : NEW_LINE INDENT hex_map = '0123456789abcdef ' NEW_LINE if not num : NEW_LINE INDENT return '0' NEW_LINE DEDENT res = ' ' NEW_LINE while num and len ( res ) < 8 : NEW_LINE INDENT res = hex_map [ num & 15 ] + res NEW_LINE num = num >> 4 NEW_LINE DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE count = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' \n ' ) NEW_LINE DEDENT def print_is_land ( n , count ) : NEW_LINE INDENT a = ( n + 1 ) // 2 NEW_LINE b = n // 2 NEW_LINE max = a * a + b * b NEW_LINE if count > max : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE return NEW_LINE DEDENT print ( ' YES ' ) NEW_LINE s = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( i + j ) % 2 == 0 and count > 0 : NEW_LINE INDENT s . append ( ' L ' ) NEW_LINE count -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT s . append ( ' S ' ) NEW_LINE DEDENT DEDENT DEDENT print ( ' ' . join ( s ) ) NEW_LINE DEDENT DEDENT
def longest_string ( str1 , str2 ) : NEW_LINE INDENT count1 , count2 = [ 0 ] * 26 NEW_LINE for c in str1 : NEW_LINE INDENT count1 [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for c in str2 : NEW_LINE INDENT count2 [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT result = " " NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT for j in range ( 1 , min ( count1 [ i ] , count2 [ i ] ) + 1 ) : NEW_LINE INDENT result += chr ( ord ( ' a ' ) + str ( i ) ) NEW_LINE DEDENT DEDENT print ( result ) NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT ret = 0 NEW_LINE while ( x >> ( ret + 1 ) ) : NEW_LINE INDENT ret += 1 NEW_LINE DEDENT return ret NEW_LINE DEDENT
def GFG ( s , i ) : NEW_LINE INDENT if i == len ( s ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE return NEW_LINE DEDENT if s [ i ] == " a " : NEW_LINE INDENT q1 ( s , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT q2 ( s , i + 1 ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT m = [ 0 ] * 10000 NEW_LINE t = [ 0 ] * 1 NEW_LINE a , b = 0 , 0 NEW_LINE max = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT m [ i ] = 0 NEW_LINE t [ i ] = 1 NEW_LINE a = sys . stdin . read ( ) NEW_LINE b = sys . stdin . read ( ) NEW_LINE for j in range ( 0 , a * b , a ) : NEW_LINE INDENT for k in range ( 0 , max + 1 ) : NEW_LINE INDENT if t [ k ] > 0 : NEW_LINE INDENT m [ j + k ] += t [ k ] NEW_LINE DEDENT DEDENT DEDENT max += a * b NEW_LINE t = m [ : ] NEW_LINE DEDENT s = sys . stdin . read ( ) NEW_LINE for i in range ( s ) : NEW_LINE INDENT print ( m [ sys . stdin . read ( ) ] ) NEW_LINE DEDENT DEDENT
def find_time ( T , K ) : NEW_LINE INDENT minutes = ( ( T [ 0 ] - '0' ) * 10 + T [ 1 ] - '0' ) * 60 + ( ( T [ 3 ] - '0' ) * 10 + T [ 4 ] - '0' ) NEW_LINE minutes += K NEW_LINE hour = ( minutes // 60 ) % 24 NEW_LINE min = minutes % 60 NEW_LINE if hour < 10 : NEW_LINE INDENT print ( '0' + str ( hour ) + ' : ' , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( hour + ' : ' , end = ' ▁ ' ) NEW_LINE DEDENT if min < 10 : NEW_LINE INDENT print ( '0' + str ( min ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( min ) NEW_LINE DEDENT DEDENT
def max_product_sum ( data , m ) : NEW_LINE INDENT n = len ( data ) NEW_LINE max_prod , max_sum = None , None NEW_LINE for i in range ( n - m ) : NEW_LINE INDENT product , sum = 1 , 0 NEW_LINE for j in range ( i , m + i ) : NEW_LINE INDENT product = product * ( data [ j ] - '0' ) NEW_LINE sum = sum + ( data [ j ] - '0' ) NEW_LINE DEDENT max_prod = max ( max_prod , product ) NEW_LINE max_sum = max ( max_sum , sum ) NEW_LINE DEDENT print ( ' Maximum ▁ Product ▁ = ▁ % d ' % max_prod ) NEW_LINE print ( ' Maximum ▁ Sum ▁ = ▁ % d ' % max_sum ) NEW_LINE DEDENT
def GFG ( x , y , z ) : NEW_LINE INDENT if x < y : NEW_LINE INDENT return ( x if x < z else z ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( y if y < z else z ) NEW_LINE DEDENT DEDENT def min_cost ( cost , m , n ) : NEW_LINE INDENT if n < 0 or m < 0 : NEW_LINE INDENT return sys . maxsize NEW_LINE DEDENT elif m == 0 and n == 0 : NEW_LINE INDENT return cost [ m ] [ n ] NEW_LINE DEDENT else : NEW_LINE INDENT return cost [ m ] [ n ] + min ( min_cost ( cost , m - 1 , n - 1 ) , min_cost ( cost , m - 1 , n ) , min_cost ( cost , m , n - 1 ) ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE x = [ 0 ] * ( n + 1 ) NEW_LINE ji = [ 0 ] * ( n + 1 ) NEW_LINE shu = [ 0 ] * ( n // 2 ) NEW_LINE shu . sort ( ) NEW_LINE l1 = 0 NEW_LINE l2 = 0 NEW_LINE for i in range ( n // 2 ) : NEW_LINE INDENT s1 = i * 2 + 1 NEW_LINE s2 = i * 2 + 2 NEW_LINE id = shu [ i ] NEW_LINE if id != s1 : NEW_LINE INDENT l1 = l1 + abs ( s1 - id ) NEW_LINE DEDENT if id != s2 : NEW_LINE INDENT l2 = l2 + abs ( s2 - id ) NEW_LINE DEDENT DEDENT min = min ( l1 , l2 ) NEW_LINE print ( min ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import re NEW_LINE import sys NEW_LINE import sys NEW_LINE import sys NEW_LINE import sys NEW_LINE parents = [ ] NEW_LINE weight = { } NEW_LINE rank = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT parents . append ( i ) NEW_LINE DEDENT type , x , y , z = 0 , [ ] , [ ] , [ ] NEW_LINE for i in range ( q ) : NEW_LINE INDENT type = sys . stdin . read ( ) NEW_LINE x = sys . stdin . read ( ) NEW_LINE y = sys . stdin . read ( ) NEW_LINE if type == 0 : NEW_LINE INDENT z = sys . stdin . read ( ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT r = find ( parents [ x ] ) NEW_LINE weight [ x ] += weight [ parents [ x ] ] NEW_LINE return parents [ x ] = r NEW_LINE DEDENT DEDENT def find ( x ) : NEW_LINE INDENT find ( x ) NEW_LINE return weight [ x ] NEW_LINE DEDENT def relate ( x , y , z ) : NEW_LINE INDENT z += weight [ x ] NEW_LINE z -= weight [ y ] NEW_LINE x = find ( x ) NEW_LINE y = find ( y ) NEW_LINE if x == y : NEW_LINE INDENT return NEW_LINE DEDENT if rank [ x ] < rank [ y ] : NEW_LINE INDENT tmp = x NEW_LINE x = y NEW_LINE y = tmp NEW_LINE z = - z NEW_LINE DEDENT if rank [ x ] == rank [ y ] : NEW_LINE INDENT rank [ x ] += 1 NEW_LINE DEDENT parents [ y ] = x NEW_LINE weight [ y ] = z NEW_LINE DEDENT def diff ( x , y ) : NEW_LINE INDENT if find ( x ) == find ( y ) : NEW_LINE INDENT print ( weight [ y ] - weight [ x ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' ? ' ) NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT
def sum_divisibles ( A , B , M ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( A , B + 1 ) : NEW_LINE INDENT if i % M == 0 : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def count_numbers_with_4 ( n ) : NEW_LINE INDENT if n < 4 : NEW_LINE INDENT return 0 NEW_LINE DEDENT d = int ( math . log10 ( n ) ) NEW_LINE a = [ 0 ] * d + [ 1 ] * d NEW_LINE for i in range ( 2 , d + 1 ) : NEW_LINE INDENT a [ i ] = a [ i - 1 ] * 9 + int ( math . ceil ( math . pow ( 10 , i - 1 ) ) ) NEW_LINE DEDENT p = int ( math . ceil ( math . pow ( 10 , d ) ) ) NEW_LINE msd = n // p NEW_LINE if msd == 4 : NEW_LINE INDENT return ( msd ) * a [ d ] + ( n % p ) + 1 NEW_LINE DEDENT if msd > 4 : NEW_LINE INDENT return ( msd - 1 ) * a [ d ] + p + count_numbers_with_4 ( n % p ) NEW_LINE DEDENT return ( msd ) * a [ d ] + count_numbers_with_4 ( n % p ) NEW_LINE DEDENT
def vfe ( ) : NEW_LINE INDENT import sys NEW_LINE x = sys . stdin . read ( ) NEW_LINE y = sys . stdin . read ( ) NEW_LINE list = [ x , y , y - x ] NEW_LINE i = 2 NEW_LINE while not ( list [ i ] == y and list [ i - 1 ] == x or list [ i ] == 0 and list [ i - 1 ] == 0 ) : NEW_LINE INDENT list [ i ] = list [ i ] - list [ i - 1 ] NEW_LINE i += 1 NEW_LINE DEDENT k = sys . stdin . read ( ) NEW_LINE i -= 1 NEW_LINE k = k % i NEW_LINE if k == 0 : NEW_LINE INDENT k = i NEW_LINE DEDENT print ( ( ( list [ k - 1 ] % 1000000007 ) + 1000000007 ) % 1000000007 ) NEW_LINE DEDENT
def find_post_order_util ( pre , n , minval , maxval , pre_index ) : NEW_LINE INDENT import sys NEW_LINE class Solution ( object ) : NEW_LINE INDENT data = d NEW_LINE DEDENT def find_post_order_util ( pre , n , minval , maxval , pre_index ) : NEW_LINE INDENT if pre_index . data == n : NEW_LINE INDENT return NEW_LINE DEDENT if pre [ pre_index . data ] < minval or pre [ pre_index . data ] > maxval : NEW_LINE INDENT return NEW_LINE DEDENT val = pre [ pre_index . data ] NEW_LINE pre_index . data += 1 NEW_LINE find_post_order_util ( pre , n , minval , val , pre_index ) NEW_LINE find_post_order_util ( pre , n , val , maxval , pre_index ) NEW_LINE sys . stdout . write ( ' % d ▁ ' % val ) NEW_LINE DEDENT def find_post_order ( pre , n ) : NEW_LINE INDENT pre_index = { ' data ' : 0 } NEW_LINE find_post_order_util ( pre , n , int ( minval ) , int ( maxval ) , pre_index ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT pre = [ 40 , 30 , 35 , 80 , 100 ] NEW_LINE n = len ( pre ) NEW_LINE find_post_order ( pre , n ) NEW_LINE DEDENT return Solution ( ) NEW_LINE DEDENT
def count_ways ( n , arr , k ) : NEW_LINE INDENT import set NEW_LINE if k <= 0 or k >= n : NEW_LINE INDENT return 0 NEW_LINE DEDENT s = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . add ( arr [ i ] ) NEW_LINE DEDENT if len ( s ) <= k : NEW_LINE INDENT return 0 NEW_LINE DEDENT return len ( s ) - k NEW_LINE DEDENT
def _250B ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE class _250B ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stdin = None NEW_LINE self . solve ( ) NEW_LINE s = [ ] NEW_LINE for i , n in enumerate ( self . get_n ( ) ) : NEW_LINE INDENT s = s . split ( ' : ' , 1 ) NEW_LINE k , m = 0 , len ( s ) - 1 NEW_LINE if s [ k ] == ' ' : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if s [ m ] == ' ' : NEW_LINE INDENT m -= 1 NEW_LINE DEDENT for j in range ( k , m + 1 ) : NEW_LINE INDENT if s [ j ] == ' ' : NEW_LINE INDENT for l , lim in zip ( 1 , 8 - m + k ) : NEW_LINE INDENT s . append ( "0000" ) NEW_LINE if l < lim : NEW_LINE INDENT s . append ( ' : ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT for l in s [ j ] . split ( ' : ' ) [ 0 ] . split ( ' : ' ) [ 0 ] + s [ j ] . split ( ' : ' ) [ 1 ] . split ( ' : ' ) [ 0 ] NEW_LINE DEDENT if j < m : NEW_LINE INDENT s . append ( ' : ' ) NEW_LINE DEDENT DEDENT s . append ( ' \n ' ) NEW_LINE DEDENT def main ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stdin = None NEW_LINE sys . stdout . write ( self . solve ( ) ) NEW_LINE self . stdin . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT sys . exit ( ) NEW_LINE DEDENT DEDENT def __next__ ( self ) : NEW_LINE INDENT return self . stdin . readline ( ) NEW_LINE DEDENT def __next__ ( self ) : NEW_LINE INDENT return int ( __next__ ) NEW_LINE DEDENT def __next__ ( self ) : NEW_LINE INDENT return int ( __next__ ) NEW_LINE DEDENT DEDENT return _250B NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT flag = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT flag = 0 NEW_LINE break NEW_LINE DEDENT DEDENT return ( True if flag == 1 else False ) NEW_LINE DEDENT def isPerfectSquare ( x ) : NEW_LINE INDENT sr = math . sqrt ( x ) NEW_LINE return ( ( sr - math . floor ( sr ) ) == 0 ) NEW_LINE DEDENT def countInterestingPrimes ( n ) : NEW_LINE INDENT answer = 0 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if isPrime ( i ) : NEW_LINE INDENT for j in range ( 1 , j ** 2 + 1 ) : NEW_LINE INDENT if isPerfectSquare ( i - j ** 2 ) : NEW_LINE INDENT answer += 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT return answer NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT N = 10 NEW_LINE print ( countInterestingPrimes ( N ) , end = ' ▁ ' ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import os NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT print ( " No ▁ input " ) NEW_LINE return 1 NEW_LINE DEDENT previous = sys . stdin . read ( ) NEW_LINE next = sys . stdin . read ( ) NEW_LINE used_words = set ( ) NEW_LINE used_words . add ( previous ) NEW_LINE while N > 1 : NEW_LINE INDENT next = sys . stdin . read ( ) NEW_LINE if not ( ( previous [ - 1 ] == next [ 0 ] ) and used_words . add ( next ) ) : NEW_LINE INDENT print ( " No " ) NEW_LINE sys . exit ( 1 ) NEW_LINE DEDENT previous = next NEW_LINE N -= 1 NEW_LINE DEDENT sys . stdout . write ( " Yes " ) NEW_LINE DEDENT
def find_num ( div , rem , N ) : NEW_LINE INDENT num = rem [ N - 1 ] NEW_LINE for i in range ( N - 2 , - 1 , - 1 ) : NEW_LINE INDENT num = num * div [ i ] + rem [ i ] NEW_LINE DEDENT return num NEW_LINE DEDENT
def segregate0and1 ( arr ) : NEW_LINE INDENT type0 = 0 NEW_LINE type1 = len ( arr ) - 1 NEW_LINE while type0 < type1 : NEW_LINE INDENT if arr [ type0 ] == 1 : NEW_LINE INDENT arr [ type1 ] = arr [ type1 ] + arr [ type0 ] NEW_LINE arr [ type0 ] = arr [ type1 ] - arr [ type0 ] NEW_LINE arr [ type1 ] = arr [ type1 ] - arr [ type0 ] NEW_LINE type1 -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT type0 += 1 NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT d = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT d . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT d . sort ( ) NEW_LINE ans = 1 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if d [ i ] != d [ i + 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE sys . exit ( 1 ) NEW_LINE DEDENT
def shortest_kingpath ( ) : NEW_LINE INDENT import string NEW_LINE s = string . strip ( ) NEW_LINE s1 = string . strip ( ) NEW_LINE c = s . replace ( ' ▁ ' , ' ' ) NEW_LINE c1 = s1 . replace ( ' ▁ ' , ' ' ) NEW_LINE diff = c1 [ 0 ] - c [ 0 ] NEW_LINE dif = c1 [ 1 ] - c [ 1 ] NEW_LINE n = abs ( diff ) NEW_LINE m = abs ( dif ) NEW_LINE ans = " " NEW_LINE while diff != 0 or dif != 0 : NEW_LINE INDENT if diff > 0 : NEW_LINE INDENT ans += " R " NEW_LINE diff -= 1 NEW_LINE DEDENT if diff < 0 : NEW_LINE INDENT ans += " L " NEW_LINE diff += 1 NEW_LINE DEDENT if dif > 0 : NEW_LINE INDENT ans += " U " NEW_LINE dif -= 1 NEW_LINE DEDENT if dif < 0 : NEW_LINE INDENT ans += " D " NEW_LINE dif += 1 NEW_LINE DEDENT ans += " \n " NEW_LINE DEDENT print ( max ( n , m ) ) NEW_LINE print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE h , w = sys . maxsize , sys . maxsize NEW_LINE total = 0 NEW_LINE for i in range ( h ) : NEW_LINE INDENT for j in range ( w ) : NEW_LINE INDENT x = sys . maxsize NEW_LINE total += x * ( i + 1 ) * ( h - i ) * ( j + 1 ) * ( w - j ) NEW_LINE DEDENT DEDENT print ( total ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE from string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE x , y = sys . stdin . read ( ) , sys . stdin . read ( ) NEW_LINE print_bin ( fill_zero ( str ( x & y ) ) ) NEW_LINE print_bin ( fill_zero ( str ( x | y ) ) ) NEW_LINE print_bin ( fill_zero ( str ( x ^ y ) ) ) NEW_LINE def print_bin ( str ) : NEW_LINE INDENT for c in str [ 32 : ] : NEW_LINE INDENT print ( c , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def fill_zero ( str ) : NEW_LINE INDENT zero = ' ' NEW_LINE if len ( str ) < 32 : NEW_LINE INDENT for c in str [ 32 - len ( str ) : ] : NEW_LINE INDENT zero += '0' NEW_LINE DEDENT DEDENT return zero + str NEW_LINE DEDENT return ' ' . join ( [ str ] ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE x = sys . stdin . read ( ) NEW_LINE print_bin ( fill_zero ( str ( x ) ) ) NEW_LINE print_bin ( fill_zero ( str ( ~ x ) ) ) NEW_LINE print_bin ( fill_zero ( str ( x << 1 ) ) ) NEW_LINE print_bin ( fill_zero ( str ( x >> 1 ) ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE import sys NEW_LINE M = 5 NEW_LINE with open ( ' test . txt ' , ' r ' ) as f : NEW_LINE INDENT n = int ( f . readline ( ) ) NEW_LINE s = [ ] NEW_LINE ma = [ 0 ] * M NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = f . read ( n ) NEW_LINE if s [ 0 ] == ' M ' : NEW_LINE INDENT ma [ 0 ] += 1 NEW_LINE DEDENT elif s [ 0 ] == ' A ' : NEW_LINE INDENT ma [ 1 ] += 1 NEW_LINE DEDENT elif s [ 0 ] == ' R ' : NEW_LINE INDENT ma [ 2 ] += 1 NEW_LINE DEDENT elif s [ 0 ] == ' C ' : NEW_LINE INDENT ma [ 3 ] += 1 NEW_LINE DEDENT elif s [ 0 ] == ' H ' : NEW_LINE INDENT ma [ 4 ] += 1 NEW_LINE DEDENT DEDENT f . close ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( M - 2 ) : NEW_LINE INDENT for j in range ( i + 1 , M - 1 ) : NEW_LINE INDENT for k in range ( j + 1 , M ) : NEW_LINE INDENT ans += ma [ i ] * ma [ j ] * ma [ k ] NEW_LINE DEDENT DEDENT DEDENT sys . stdout . write ( ans ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT total_first_files = sys . stdin . readlines ( ) NEW_LINE total_second_files = sys . stdin . readlines ( ) NEW_LINE first_files = [ ] NEW_LINE second_files = [ ] NEW_LINE for i in range ( total_first_files ) : NEW_LINE INDENT first_files . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT for i in range ( total_second_files ) : NEW_LINE INDENT second_files . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT print ( intercepted_message ( first_files , second_files ) ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' No ▁ file ▁ found ' ) NEW_LINE return 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE for a , op , b in list ( args ) : NEW_LINE INDENT if op == ' ? ' : NEW_LINE INDENT break NEW_LINE DEDENT if op == ' + ' : NEW_LINE INDENT print ( a + b ) NEW_LINE DEDENT if op == ' - ' : NEW_LINE INDENT print ( a - b ) NEW_LINE DEDENT if op == ' * ' : NEW_LINE INDENT print ( a * b ) NEW_LINE DEDENT if op == ' / ' : NEW_LINE INDENT print ( a / b ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT import math NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT N = len ( sys . argv ) NEW_LINE A = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT A . append ( math . pi * math . cos ( math . pi * math . sin ( math . pi * math . cos ( math . pi * math . sin ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . sin ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . sin ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . cos ( math . pi * math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math . abs ( math ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if i == N - 1 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT elif A [ i ] == A [ i + 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT elif A [ i ] < A [ i + 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT while A [ i ] >= A [ i + 1 ] : NEW_LINE INDENT count += 1 NEW_LINE if i == N - 1 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT
def count_pairs ( s ) : NEW_LINE INDENT import string NEW_LINE MAX = 256 NEW_LINE cnt = [ 0 ] * MAX NEW_LINE for c in s : NEW_LINE INDENT cnt [ ord ( c ) ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT ans += cnt [ i ] * cnt [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT
def SieveOfEratosthenes ( n ) : NEW_LINE INDENT prime = [ False ] * 100006 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT prime [ 1 ] = False NEW_LINE for p in range ( 2 , p * n + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT def sortedArray ( arr , n ) : NEW_LINE INDENT SieveOfEratosthenes ( 100005 ) NEW_LINE v = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prime [ arr [ i ] ] == False : NEW_LINE INDENT v . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT v . sort ( ) NEW_LINE j = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prime [ arr [ i ] ] == True : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( v [ j ] , end = ' ▁ ' ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT return NEW_LINE DEDENT
def gcdFibonacciFreq ( arr , n ) : NEW_LINE INDENT prev , curr = 0 , 1 NEW_LINE hash . add ( prev ) NEW_LINE hash . add ( curr ) NEW_LINE while curr <= max_element : NEW_LINE INDENT temp = curr + prev NEW_LINE hash . add ( temp ) NEW_LINE prev = curr NEW_LINE curr = temp NEW_LINE DEDENT def gcdFibonacciFreq ( arr , n ) : NEW_LINE INDENT hash = set ( ) NEW_LINE createHash ( hash , max ( arr ) ) NEW_LINE i = 0 NEW_LINE m = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in m : NEW_LINE INDENT m [ arr [ i ] ] = m [ arr [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT gcd = 0 NEW_LINE for it , v in m . items ( ) : NEW_LINE INDENT if v in hash : NEW_LINE INDENT gcd = __gcd ( gcd , it ) NEW_LINE DEDENT DEDENT return gcd NEW_LINE DEDENT def __gcd ( a , b ) : NEW_LINE INDENT return a if b == 0 else __gcd ( b , a % b ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 5 , 3 , 6 , 5 , 6 , 6 , 5 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( gcdFibonacciFreq ( arr , n ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def GFG ( a ) : NEW_LINE INDENT R = a * float ( 2.0 - math . sqrt ( 2 ) ) NEW_LINE area = float ( ( 3.14 * R ** 2 ) / 2.0 ) NEW_LINE return area NEW_LINE DEDENT
def GFG ( a , b , c , d , x , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT for k in range ( n ) : NEW_LINE INDENT for l in range ( n ) : NEW_LINE INDENT if ( a [ i ] ^ b [ j ] ^ c [ k ] ^ d [ l ] ) == x : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return count NEW_LINE DEDENT DEDENT
def GFG ( s , q ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE class GFG ( string ) : NEW_LINE INDENT def __init__ ( self , l , r , n ) : NEW_LINE INDENT self . l = l NEW_LINE self . r = r NEW_LINE self . n = n NEW_LINE DEDENT def query ( self , l , r , n ) : NEW_LINE INDENT self . l = l NEW_LINE self . r = r NEW_LINE self . n = n NEW_LINE DEDENT def query ( self , l , r , n ) : NEW_LINE INDENT self . l = l NEW_LINE self . r = r NEW_LINE self . n = n NEW_LINE DEDENT DEDENT def print_smallest ( s , q ) : NEW_LINE INDENT N = len ( s ) NEW_LINE H = np . zeros ( ( N + 1 , 26 ) ) NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT H [ i ] [ s [ i - 1 ] - ' a ' ] NEW_LINE for j in range ( 26 ) : NEW_LINE INDENT H [ i ] [ j ] += H [ i - 1 ] [ j ] NEW_LINE DEDENT DEDENT m = len ( q ) NEW_LINE for j in range ( m ) : NEW_LINE INDENT l , r , n = q [ j ] NEW_LINE sum = 0 NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT sum += H [ r ] [ i ] - H [ l - 1 ] [ i ] NEW_LINE if sum >= n : NEW_LINE INDENT print ( chr ( ord ( ' a ' ) + str ( i ) ) ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT def main ( args ) : NEW_LINE INDENT s = ' afbccdeb ' NEW_LINE q = [ ( 2 , 4 , 1 ) , ( 1 , 6 , 4 ) , ( 1 , 8 , 7 ) ] NEW_LINE print_smallest ( s , q ) NEW_LINE DEDENT return GFG ( s ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BytesIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BytesIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE from io import BufferedReader NEW_LINE DEDENT
def test223 ( ) : NEW_LINE INDENT import sys NEW_LINE t = len ( sys . stdin ) NEW_LINE for j in range ( t ) : NEW_LINE INDENT x = sys . stdin . read ( ) NEW_LINE if x == 1 : NEW_LINE INDENT print ( '2' ) NEW_LINE DEDENT elif x == 2 : NEW_LINE INDENT print ( '1' ) NEW_LINE DEDENT elif x % 3 == 0 : NEW_LINE INDENT print ( x // 3 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( x // 3 + 1 ) NEW_LINE DEDENT DEDENT sys . exit ( 1 ) NEW_LINE DEDENT
def B999 ( data , last ) : NEW_LINE INDENT f = open ( ' B999 . txt ' , ' r ' ) NEW_LINE t = int ( f . readline ( ) ) NEW_LINE data = f . read ( ) NEW_LINE for i in range ( 1 , t + 1 ) : NEW_LINE INDENT if t % i == 0 : NEW_LINE INDENT data = reverse ( data , i - 1 ) NEW_LINE DEDENT DEDENT print ( data ) NEW_LINE def reverse ( data , last ) : NEW_LINE INDENT arr = [ ] NEW_LINE for c in data : NEW_LINE INDENT arr . append ( c ) NEW_LINE DEDENT counter_up , counter_down = 0 , last NEW_LINE for i in range ( 0 , last // 2 + 1 ) : NEW_LINE INDENT arr [ counter_up ] = arr [ counter_down ] NEW_LINE counter_up += 1 NEW_LINE counter_down -= 1 NEW_LINE DEDENT result = ' ' NEW_LINE for c in arr : NEW_LINE INDENT result += c NEW_LINE DEDENT return result NEW_LINE DEDENT return reverse NEW_LINE DEDENT
def print_pairs ( arr , n ) : NEW_LINE INDENT v = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if abs ( arr [ i ] ) == abs ( arr [ j ] ) : NEW_LINE INDENT v . append ( abs ( arr [ i ] ) ) NEW_LINE DEDENT DEDENT if not len ( v ) : NEW_LINE INDENT return NEW_LINE DEDENT v . sort ( ) NEW_LINE for i in v : NEW_LINE INDENT print ( ' % d ▁ % d ▁ ' % ( - v [ i ] , i ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def double_factorial ( n ) : NEW_LINE INDENT import math NEW_LINE if n == 0 or n == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return n * double_factorial ( n - 2 ) NEW_LINE DEDENT
def is_palindrome ( data ) : NEW_LINE INDENT import string NEW_LINE l = 0 NEW_LINE h = len ( data ) - 1 NEW_LINE while h > l : NEW_LINE INDENT if data [ l ] != data [ h ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def sum_of_subsets ( num ) : NEW_LINE INDENT import re NEW_LINE n = len ( num ) NEW_LINE sumofdigit = [ 0 ] * n NEW_LINE sumofdigit [ 0 ] = num [ 0 ] - '0' NEW_LINE res = sumofdigit [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT numi = num [ i ] - '0' NEW_LINE sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] NEW_LINE res += sumofdigit [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT
def find_count_of_pairs ( a , b , n ) : NEW_LINE INDENT import sys NEW_LINE ans = 0 NEW_LINE ans += n * ( a // n ) * ( b // n ) NEW_LINE ans += ( a // n ) * ( b % n ) NEW_LINE ans += ( a % n ) * ( b // n ) NEW_LINE ans += ( ( a % n ) + ( b % n ) ) / n NEW_LINE return ans NEW_LINE DEDENT
def p071 ( ) : NEW_LINE INDENT print ( eval ( ' p071 ( ) ' ) ) NEW_LINE LIMIT = 1000000 NEW_LINE max_n = 0 NEW_LINE max_d = 1 NEW_LINE for d in range ( 1 , LIMIT + 1 ) : NEW_LINE INDENT n = d * 3 // 7 NEW_LINE if d % 7 == 0 : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT if int ( n ) * max_d > int ( max_n ) * d : NEW_LINE INDENT max_n = n NEW_LINE max_d = d NEW_LINE DEDENT DEDENT return str ( max_n ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT c = [ 0 ] * 100 NEW_LINE def coef ( n ) : NEW_LINE INDENT c [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT c [ 0 ] = - c [ 0 ] , i NEW_LINE DEDENT c [ 1 + i ] = 1 NEW_LINE for j in range ( i , 0 , - 1 ) : NEW_LINE INDENT c [ j ] = c [ j - 1 ] - c [ j ] NEW_LINE DEDENT DEDENT def isPrime ( n ) : NEW_LINE INDENT coef ( n ) NEW_LINE c [ 0 ] += 1 NEW_LINE c [ n ] -= 1 NEW_LINE i = n NEW_LINE while ( i > 0 and c [ i ] % n == 0 ) : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT return i < 0 NEW_LINE DEDENT def main ( n ) : NEW_LINE INDENT n = 37 NEW_LINE if isPrime ( n ) : NEW_LINE INDENT print ( " Prime " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not ▁ Prime " ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT min = sys . maxsize NEW_LINE counter = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if arr [ i ] > min : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT if arr [ i ] <= min : NEW_LINE INDENT min = arr [ i ] NEW_LINE DEDENT DEDENT return counter NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . readline ( ) ) NEW_LINE x = sys . stdin . readline ( ) NEW_LINE sweet = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT a = sys . stdin . readline ( ) NEW_LINE sweet . append ( a ) NEW_LINE DEDENT sweet . sort ( ) NEW_LINE num = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if x - sweet [ num ] >= 0 : NEW_LINE INDENT x = x - sweet [ num ] NEW_LINE num += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( num == N ) and ( x > 0 ) : NEW_LINE INDENT num -= 1 NEW_LINE DEDENT print ( num ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE leer = sys . stdin NEW_LINE casos , x , y , conta , cont = 0 , 0 , 0 , 0 NEW_LINE casos = len ( leer ) NEW_LINE for i in range ( casos ) : NEW_LINE INDENT x = leer [ i ] NEW_LINE y = leer [ i ] NEW_LINE if x > 0 : NEW_LINE INDENT conta += 1 NEW_LINE DEDENT else : NEW_LINE INDENT cont += 1 NEW_LINE DEDENT DEDENT if conta > 1 and cont > 1 : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT T , D , L = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if T == 0 and D == 0 and L == 0 : NEW_LINE INDENT break NEW_LINE DEDENT ans , time = 0 , 0 NEW_LINE for i in range ( T - 1 ) : NEW_LINE INDENT x = sys . stdin . read ( ) . split ( ' ▁ ' ) [ 0 ] NEW_LINE if x >= L : NEW_LINE INDENT time = D - 1 NEW_LINE ans += 1 NEW_LINE DEDENT elif time != 0 : NEW_LINE INDENT time -= 1 NEW_LINE ans += 1 NEW_LINE DEDENT DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT
def minimum_swaps ( arr ) : NEW_LINE INDENT count = 0 NEW_LINE i = 0 NEW_LINE while i < len ( arr ) : NEW_LINE INDENT if arr [ i ] != i + 1 : NEW_LINE INDENT while arr [ i ] != i + 1 : NEW_LINE INDENT temp = 0 NEW_LINE temp = arr [ i - 1 ] NEW_LINE arr [ i - 1 ] = arr [ i ] NEW_LINE arr [ i ] = temp NEW_LINE count += 1 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT
def p500 ( ) : NEW_LINE INDENT import collections NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return math NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT XOR = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT XOR = XOR ^ arr [ i ] NEW_LINE DEDENT set_bit_no = XOR & ~ ( XOR - 1 ) NEW_LINE x , y = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] & set_bit_no : NEW_LINE INDENT x = x ^ arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ arr [ i ] NEW_LINE DEDENT DEDENT print ( " The ▁ unique ▁ pair ▁ is ▁ ( % d , ▁ % d ) " % ( x , y ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from string import join NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import atof NEW_LINE from string import join NEW_LINE from string import join NEW_LINE def atof ( str ) : NEW_LINE INDENT return atof ( str ) NEW_LINE DEDENT return atof ( str ) NEW_LINE DEDENT
def do_it ( ) : NEW_LINE INDENT import sys NEW_LINE for line in sys . stdin : NEW_LINE INDENT data = line . strip ( ) NEW_LINE data = data . replace ( ' ▁ ' , ' ' ) NEW_LINE for now in data : NEW_LINE INDENT if now != ' @ ' : NEW_LINE INDENT sys . stdout . write ( now ) NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE num = ord ( data [ i ] ) - ord ( '0' ) NEW_LINE i += 1 NEW_LINE if 0 <= num <= 9 : NEW_LINE INDENT now = data [ i ] NEW_LINE for j in range ( num ) : NEW_LINE INDENT sys . stdout . write ( now ) NEW_LINE DEDENT DEDENT DEDENT DEDENT sys . stdout . write ( ' ' ) NEW_LINE DEDENT DEDENT
def is_majority ( a , n ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE if not a : NEW_LINE INDENT return False NEW_LINE DEDENT if n > 1 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 1 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 2 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 3 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 4 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 5 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 6 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 7 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 8 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 9 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 9 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 9 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 10 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 11 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 11 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 12 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 13 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 14 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 15 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 16 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 17 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 18 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 19 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 23 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 24 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 5 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 6 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT elif n > 7 : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT else : NEW_LINE INDENT a = a [ : n ] NEW_LINE DEDENT return True NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . random NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE import knap NEW_LINE DEDENT
def do_it ( ) : NEW_LINE INDENT import math NEW_LINE do_it ( ) NEW_LINE n = sys . maxsize NEW_LINE while n != - 1 : NEW_LINE INDENT rad = 0 NEW_LINE hyp = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT rad += math . atan ( 1 / hyp ) NEW_LINE hyp = math . sqrt ( hyp * hyp + 1 ) NEW_LINE DEDENT print ( hyp * math . cos ( rad ) ) NEW_LINE print ( hyp * math . sin ( rad ) ) NEW_LINE n = sys . maxsize NEW_LINE DEDENT DEDENT
def print_kmissing ( arr , n , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE i = 0 NEW_LINE while i < n and arr [ i ] <= 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT count , curr = 0 , 1 NEW_LINE while count < k and i < n : NEW_LINE INDENT if arr [ i ] != curr : NEW_LINE INDENT print ( curr , end = ' ▁ ' ) NEW_LINE count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE curr += 1 NEW_LINE DEDENT DEDENT while count < k : NEW_LINE INDENT print ( curr , end = ' ▁ ' ) NEW_LINE curr += 1 NEW_LINE count += 1 NEW_LINE DEDENT DEDENT
def print_numbers ( a , n ) : NEW_LINE INDENT import sys NEW_LINE mpp = { } NEW_LINE for num in a : NEW_LINE INDENT for j in range ( 1 , len ( num ) + 1 ) : NEW_LINE INDENT if num % j == 0 : NEW_LINE INDENT if j != 1 : NEW_LINE INDENT if j in mpp : NEW_LINE INDENT mpp [ j ] = mpp [ j ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mpp [ j ] = 1 NEW_LINE DEDENT DEDENT if ( num // j ) != j : NEW_LINE INDENT if num // j in mpp : NEW_LINE INDENT mpp [ num // j ] = mpp [ num // j ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mpp [ num // j ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT maxi = 0 NEW_LINE for it , i in mpp . items ( ) : NEW_LINE INDENT maxi = max ( i , maxi ) NEW_LINE DEDENT for it , i in mpp . items ( ) : NEW_LINE INDENT if i == maxi : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % it ) NEW_LINE DEDENT DEDENT DEDENT
def cf1146B ( ) : NEW_LINE INDENT import string NEW_LINE data = list ( open ( ' cf1146B ' ) . readlines ( ) ) NEW_LINE index = data . find ( ' a ' ) NEW_LINE a_cnt = 0 NEW_LINE while index != - 1 : NEW_LINE INDENT a_cnt += 1 NEW_LINE index = data . find ( ' a ' , index + 1 ) NEW_LINE DEDENT s_index = ( len ( data ) - a_cnt ) // 2 NEW_LINE s = data [ : - s_index ] NEW_LINE s2 = s NEW_LINE r = data [ - s_index : ] NEW_LINE s = s . rstrip ( ) NEW_LINE if s == r : NEW_LINE INDENT print ( s2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' : ( ' ) NEW_LINE DEDENT DEDENT
def voting ( args ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import time NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT n = 0 NEW_LINE DEDENT ans , max = 0 , 0 NEW_LINE a = [ 0 ] * 1000001 NEW_LINE for i in range ( n ) : NEW_LINE INDENT b = int ( sys . stdin . readline ( ) ) NEW_LINE a [ b ] += 1 NEW_LINE if a [ b ] > max : NEW_LINE INDENT max = a [ b ] NEW_LINE ans = b NEW_LINE DEDENT DEDENT subprocess . call ( ans ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE subprocess . call ( a ) NEW_LINE DEDENT
def GFG ( data ) : NEW_LINE INDENT if data [ 0 ] >= ' A ' and data [ 0 ] <= ' Z ' : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT
def get_avg ( prev_avg , x , n ) : NEW_LINE INDENT avg = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT avg = get_avg ( avg , arr [ i ] , i ) NEW_LINE print ( " Average ▁ of ▁ % d ▁ numbers ▁ is ▁ % . 1 ▁ f " % ( i + 100000000 , avg ) ) NEW_LINE DEDENT return NEW_LINE DEDENT
def p050 ( ) : NEW_LINE INDENT print ( eval ( ' p050' ) ) NEW_LINE LIMIT = math . pow ( 10 , 6 ) NEW_LINE def run ( ) : NEW_LINE INDENT is_prime , primes = math . list_primality ( LIMIT ) NEW_LINE max_sum = 0 NEW_LINE max_run = - 1 NEW_LINE for i in range ( len ( primes ) ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( i , len ( primes ) ) : NEW_LINE INDENT sum += primes [ j ] NEW_LINE if sum > LIMIT : NEW_LINE INDENT break NEW_LINE DEDENT elif j - i > max_run and sum > max_sum and is_prime [ sum ] : NEW_LINE INDENT max_sum = sum NEW_LINE max_run = j - i NEW_LINE DEDENT DEDENT DEDENT return str ( max_sum ) NEW_LINE DEDENT return run NEW_LINE DEDENT
def lis ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE max = 0 NEW_LINE lst = np . zeros ( n ) NEW_LINE lst [ 1 : ] = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if arr [ i ] > arr [ j ] and lst [ i ] < lst [ j ] + 1 : NEW_LINE INDENT lst [ i ] = lst [ j ] + 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if max < lst [ i ] : NEW_LINE INDENT max = lst [ i ] NEW_LINE DEDENT DEDENT return max NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE a = int ( math . log10 ( b ) ) + 1 NEW_LINE a = int ( a * math . pow ( 10 , k ) + b ) NEW_LINE yono = math . sqrt ( a ) NEW_LINE if yono - math . ceil ( yono ) == 0 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def fix ( A ) : NEW_LINE INDENT import numpy as np NEW_LINE s = np . zeros ( A . shape [ 0 ] ) NEW_LINE for i in range ( A . shape [ 0 ] ) : NEW_LINE INDENT s [ i ] = i NEW_LINE DEDENT for i in range ( A . shape [ 0 ] ) : NEW_LINE INDENT if i in s : NEW_LINE INDENT A [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT A [ i ] = - 1 NEW_LINE DEDENT DEDENT return A NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import sys NEW_LINE a = int ( sys . stdin . read ( ) ) NEW_LINE b = int ( sys . stdin . read ( ) ) NEW_LINE c = int ( sys . stdin . read ( ) ) NEW_LINE d = int ( sys . stdin . read ( ) ) NEW_LINE sum = a + b + c + d NEW_LINE s1 = abs ( sum - ( a + b ) * 2 ) NEW_LINE s2 = abs ( sum - ( a + c ) * 2 ) NEW_LINE s3 = abs ( sum - ( a + d ) * 2 ) NEW_LINE min = min ( s1 , min ( s2 , s3 ) ) NEW_LINE sys . stdout . write ( ' % d \n ' % min ) NEW_LINE os . close ( sys . stdin . fileno ( ) ) NEW_LINE return False NEW_LINE global log NEW_LINE log = sys . stdout NEW_LINE global result NEW_LINE instance = instance NEW_LINE global systemin NEW_LINE systemin = os . popen ( ' systemin ▁ - ▁ % d ▁ - ▁ % d ▁ - ▁ % d ▁ - ▁ % d ▁ - ▁ % d ' % ( sys . stdin . fileno ( ) , sys . stdin . read ( ) , os . getcwd ( ) , os . getcwd ( ) , os . getcwd ( ) ) ) NEW_LINE instance . main ( ) NEW_LINE instance . systemin . close ( ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT class Node ( object ) : NEW_LINE INDENT data = None NEW_LINE prev , next = None , None NEW_LINE def push ( head_ref , new_data ) : NEW_LINE INDENT new_node = Node ( ) NEW_LINE new_node . data = new_data NEW_LINE new_node . prev = None NEW_LINE new_node . next = ( head_ref , ) NEW_LINE if ( head_ref ) : NEW_LINE INDENT ( head_ref ) . prev = new_node NEW_LINE DEDENT ( head_ref , ) = new_node NEW_LINE return head_ref NEW_LINE DEDENT def make_odd_node ( head_ref , A , n ) : NEW_LINE INDENT ptr = head_ref NEW_LINE next = None NEW_LINE i = 0 NEW_LINE while ptr is not None : NEW_LINE INDENT next = ptr . next NEW_LINE if ptr . data % 2 == 0 : NEW_LINE INDENT ptr . data = A [ i ] NEW_LINE i += 1 NEW_LINE DEDENT ptr = next NEW_LINE DEDENT return head_ref NEW_LINE DEDENT def print_list ( head ) : NEW_LINE INDENT while head is not None : NEW_LINE INDENT print ( head . data , end = ' ▁ ' ) NEW_LINE head = head . next NEW_LINE DEDENT DEDENT DEDENT def main ( ) : NEW_LINE INDENT head = None NEW_LINE Arr = [ 3 , 5 , 23 , 17 , 1 ] NEW_LINE head = push ( head , 4 ) NEW_LINE head = push ( head , 7 ) NEW_LINE head = push ( head , 8 ) NEW_LINE head = push ( head , 9 ) NEW_LINE head = push ( head , 6 ) NEW_LINE n = len ( Arr ) NEW_LINE print ( ' Original ▁ List : ▁ ' , end = ' ▁ ' ) NEW_LINE print_list ( head ) NEW_LINE print ( ) NEW_LINE head = make_odd_node ( head , Arr , n ) NEW_LINE print ( ' New ▁ odd ▁ List : ▁ ' , end = ' ▁ ' ) NEW_LINE print_list ( head ) NEW_LINE DEDENT return Node ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( sys . argv [ 1 ] ) NEW_LINE dp = np . zeros ( ( 11 , 331 ) ) NEW_LINE use = np . zeros ( 10 ) NEW_LINE dfs ( 1 , 0 , dp , use ) NEW_LINE for line in f : NEW_LINE INDENT values = line . split ( ) NEW_LINE n = int ( values [ 0 ] ) NEW_LINE s = int ( values [ 1 ] ) NEW_LINE if n > 10 or s > 330 : NEW_LINE INDENT print ( '0' ) NEW_LINE continue NEW_LINE DEDENT print ( dp [ n ] [ s ] ) NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT import math NEW_LINE mod = 1000000007 NEW_LINE def fact ( n ) : NEW_LINE INDENT res = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT res = res * i NEW_LINE DEDENT return res NEW_LINE DEDENT def nCr ( n , r ) : NEW_LINE INDENT return fact ( n ) / ( fact ( r ) * fact ( n - r ) ) NEW_LINE DEDENT def powmod ( a , n ) : NEW_LINE INDENT if not n : NEW_LINE INDENT return 1 NEW_LINE DEDENT pt = powmod ( a , n // 2 ) NEW_LINE pt = ( pt * pt ) % mod NEW_LINE if n % 2 == 1 : NEW_LINE INDENT return ( pt * a ) % mod NEW_LINE DEDENT else : NEW_LINE INDENT return pt NEW_LINE DEDENT DEDENT def CountSubset ( arr , n ) : NEW_LINE INDENT ans = powmod ( 2 , n - 1 ) NEW_LINE arr . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT j = i + 1 NEW_LINE while j < n and arr [ j ] == arr [ i ] : NEW_LINE INDENT r = n - 1 - j NEW_LINE l = i NEW_LINE ans = ( ans + nCr ( l + r , l ) ) % mod NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 2 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( CountSubset ( arr , n ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT global primeUpto NEW_LINE global primeUpto NEW_LINE isPrime = [ 1 ] * MAX NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT isPrime [ i ] = 1 NEW_LINE DEDENT isPrime [ 0 ] = isPrime [ 1 ] = 0 NEW_LINE for i in range ( 2 , MAX ) : NEW_LINE INDENT if isPrime [ i ] == 1 : NEW_LINE INDENT for j in range ( i * 2 , MAX , i ) : NEW_LINE INDENT isPrime [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , MAX ) : NEW_LINE INDENT primeUpto [ i ] = primeUpto [ i - 1 ] NEW_LINE if isPrime [ i ] == 1 : NEW_LINE INDENT primeUpto [ i ] += 1 NEW_LINE DEDENT DEDENT return int ( isPrime [ 0 ] ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT i = 2 NEW_LINE while ( i * i ) < n and ( n % i ) > 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if ( i * i ) > n : NEW_LINE INDENT i = n NEW_LINE DEDENT return ( 1 + ( n - i ) / 2 ) NEW_LINE DEDENT
def main ( f , out ) : NEW_LINE INDENT import sys NEW_LINE sys . stdout = f NEW_LINE Q = sys . maxsize NEW_LINE S = f . read ( ) NEW_LINE t = [ 0 ] * ( len ( S ) - 1 ) NEW_LINE for i in range ( 0 , len ( t ) - 1 , 1 ) : NEW_LINE INDENT if S [ i ] == ' A ' and S [ i + 1 ] == ' C ' : NEW_LINE INDENT t [ i + 1 ] = t [ i ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT t [ i + 1 ] = t [ i ] NEW_LINE DEDENT DEDENT for i in range ( 0 , Q , 1 ) : NEW_LINE INDENT l = sys . maxsize NEW_LINE r = sys . maxsize NEW_LINE out [ i ] = t [ r - 1 ] - t [ l - 1 ] NEW_LINE DEDENT return ' ' . join ( t ) NEW_LINE DEDENT
def A_find_divisible ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT f = sys . stdin . read ( ) NEW_LINE DEDENT except : NEW_LINE INDENT sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0
def p249 ( ) : NEW_LINE INDENT print ( eval ( ' p249 ( ) ' ) ) NEW_LINE LIMIT = 5000 NEW_LINE MODULUS = 10000000000000000L NEW_LINE def run ( ) : NEW_LINE INDENT is_prime = lib . list_primality ( LIMIT * LIMIT // 2 ) NEW_LINE num_subsets = [ 1 ] * LIMIT // 2 NEW_LINE max_sum = 0 NEW_LINE for i in range ( LIMIT ) : NEW_LINE INDENT if not is_prime [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT max_sum += i NEW_LINE for j in range ( max_sum , i - 1 , - 1 ) : NEW_LINE INDENT temp = num_subsets [ j ] + num_subsets [ j - i ] NEW_LINE if temp < MODULUS : NEW_LINE INDENT num_subsets [ j ] = temp NEW_LINE DEDENT else : NEW_LINE INDENT num_subsets [ j ] = temp - MODULUS NEW_LINE DEDENT DEDENT DEDENT sum = 0 NEW_LINE for i in range ( len ( num_subsets ) ) : NEW_LINE INDENT if is_prime [ i ] : NEW_LINE INDENT sum = ( sum + num_subsets [ i ] ) % MODULUS NEW_LINE DEDENT DEDENT return str ( sum ) NEW_LINE DEDENT return run NEW_LINE DEDENT
def GFG ( row_num ) : NEW_LINE INDENT count = 0 NEW_LINE while row_num > 0 : NEW_LINE INDENT count += row_num & 1 NEW_LINE row_num >>= 1 NEW_LINE DEDENT return ( 1 << count ) NEW_LINE DEDENT
def GFG ( V ) : NEW_LINE INDENT import sys NEW_LINE deno = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ] NEW_LINE n = len ( deno ) NEW_LINE def findMin ( V ) : NEW_LINE INDENT ans = [ ] NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT while V >= deno [ i ] : NEW_LINE INDENT V -= deno [ i ] NEW_LINE ans . append ( deno [ i ] ) NEW_LINE DEDENT DEDENT for i in ans : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % i ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n = 93 NEW_LINE sys . stdout . write ( ' Following ▁ is ▁ minimal ▁ number ▁ of ▁ change ▁ for ▁ % d ▁ : ▁ ' % n ) NEW_LINE findMin ( n ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def p052 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . pi ) NEW_LINE def run ( ) : NEW_LINE INDENT for i in range ( 1 ) : NEW_LINE INDENT if i > math . pi / 6 : NEW_LINE INDENT raise OverflowError ( ' Overflow ' ) NEW_LINE DEDENT if multiples . have_same_digits ( i ) : NEW_LINE INDENT return str ( i ) NEW_LINE DEDENT DEDENT DEDENT def multiples . have_same_digits ( x ) : NEW_LINE INDENT for i in range ( 2 , 6 + 1 ) : NEW_LINE INDENT if not math . isnan ( x ) or math . isinf ( x ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def to_sorted_digits ( x ) : NEW_LINE INDENT x = str ( x ) NEW_LINE x . sort ( ) NEW_LINE return x NEW_LINE DEDENT return ' ' . join ( str ( i ) for i in range ( 2 , 6 + 1 ) ) NEW_LINE DEDENT
def count ( arr , n , x ) : NEW_LINE INDENT import math NEW_LINE if x == 1 : NEW_LINE INDENT ans = int ( math . pow ( 2 , n ) ) - 1 NEW_LINE return ans NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % x == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT ans = int ( math . pow ( 2 , count ) ) - 1 NEW_LINE return ans NEW_LINE DEDENT
def find_le ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == sum - arr [ i ] : NEW_LINE INDENT return arr [ i ] NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def find_extra_charcter ( str_a , str_b ) : NEW_LINE INDENT m1 = [ 0 ] * 256 NEW_LINE for c in str_b : NEW_LINE INDENT m1 [ ord ( c ) ] += 1 NEW_LINE DEDENT for c in str_a : NEW_LINE INDENT m1 [ ord ( c ) ] -= 1 NEW_LINE DEDENT for c in m1 : NEW_LINE INDENT if c == 1 : NEW_LINE INDENT return chr ( c ) NEW_LINE DEDENT DEDENT return chr ( 0 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import math NEW_LINE import numpy NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random . seed as seed NEW_LINE seed = seed . random . seed ( ) NEW_LINE def do_random ( ) : NEW_LINE INDENT seed = seed + random . random ( ) NEW_LINE return seed NEW_LINE DEDENT a = [ ] NEW_LINE b = [ ] NEW_LINE def do_random ( ) : NEW_LINE INDENT for i in range ( 101 ) : NEW_LINE INDENT a . append ( i * i * i ) NEW_LINE DEDENT for i in range ( 101 ) : NEW_LINE INDENT b . append ( i * ( i + 1 ) * ( i + 2 ) / 6 ) NEW_LINE DEDENT DEDENT while True : NEW_LINE INDENT n = os . urandom ( 1 ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT num = 0 NEW_LINE for i in range ( 101 ) : NEW_LINE INDENT for j in range ( 101 ) : NEW_LINE INDENT if a [ i ] + b [ j ] <= n : NEW_LINE INDENT num = max ( num , a [ i ] + b [ j ] ) NEW_LINE DEDENT DEDENT DEDENT print ( num ) NEW_LINE DEDENT return a NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import re NEW_LINE import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE sys . stdin . write ( ' ' ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( HastaLaVistaLa ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import abs NEW_LINE class Practice ( sys . stdin ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdin . close ( ) NEW_LINE sys . stdout = sys . stderr NEW_LINE self . s = [ ] NEW_LINE self . out = [ ] NEW_LINE DEDENT def main ( self ) : NEW_LINE INDENT t = 1 NEW_LINE for tests in range ( t ) : NEW_LINE INDENT self . solve ( ) NEW_LINE DEDENT print ( ' ' . join ( self . s ) ) NEW_LINE DEDENT DEDENT def solve ( ) : NEW_LINE INDENT n = scn . __next__ ( ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( scn . __next__ ( ) ) NEW_LINE DEDENT freq = [ 0 ] * 1010 NEW_LINE can = ( n + 1 ) NEW_LINE for i in a : NEW_LINE INDENT freq [ i ] += 1 NEW_LINE if freq [ i ] > can / 2 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( ' YES ' ) NEW_LINE DEDENT return Practice NEW_LINE DEDENT
def max_sum_pair ( arr1 , n1 , arr2 , n2 ) : NEW_LINE INDENT max1 = int ( 0 ) NEW_LINE max2 = int ( 0 ) NEW_LINE for i in range ( n1 ) : NEW_LINE INDENT if arr1 [ i ] > max1 : NEW_LINE INDENT max1 = arr1 [ i ] NEW_LINE DEDENT DEDENT for i in range ( n2 ) : NEW_LINE INDENT if arr2 [ i ] > max2 : NEW_LINE INDENT max2 = arr2 [ i ] NEW_LINE DEDENT DEDENT return max1 + max2 NEW_LINE DEDENT
def operations ( op , n , k ) : NEW_LINE INDENT i , count = 0 , 0 NEW_LINE n_val = 0 NEW_LINE min = sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT n_val += op [ i ] NEW_LINE min = min ( min , n_val ) NEW_LINE if ( k + n_val ) <= 0 : NEW_LINE INDENT return ( i + 1 ) NEW_LINE DEDENT DEDENT if n_val >= 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT times = ( k - abs ( min ) ) / abs ( n_val ) NEW_LINE k = ( k - ( times * abs ( n_val ) ) ) NEW_LINE count = ( times * n ) NEW_LINE while k > 0 : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT k = k + op [ i ] NEW_LINE count += 1 NEW_LINE if k <= 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import open NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def centered_cube ( n ) : NEW_LINE INDENT import sys NEW_LINE n = 3 NEW_LINE print ( " % dth ▁ Centered " % n , end = " ▁ cube ▁ number : ▁ " ) NEW_LINE print ( centered_cube ( n ) ) NEW_LINE n = 10 NEW_LINE print ( " % dth ▁ Centered " % n , end = " ▁ cube ▁ number : ▁ " ) NEW_LINE print ( centered_cube ( n ) ) NEW_LINE DEDENT
def pre132 ( args ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from string import encode NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from math import quote NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE if args [ 0 ] : NEW_LINE INDENT return string NEW_LINE DEDENT elif args [ 0 ] : NEW_LINE INDENT return string NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def nth_term ( N ) : NEW_LINE INDENT import math NEW_LINE nth , i = 0 , i NEW_LINE for i in range ( N , 0 , - 1 ) : NEW_LINE INDENT nth += math . pow ( i , i ) NEW_LINE DEDENT return nth NEW_LINE DEDENT
def test ( ) : NEW_LINE INDENT print ( " True " if is_power ( 10 , 1 ) else " False " ) NEW_LINE print ( " True " if is_power ( 1 , 20 ) else " False " ) NEW_LINE print ( " True " if is_power ( 2 , 128 ) else " False " ) NEW_LINE print ( " True " if is_power ( 2 , 30 ) else " False " ) NEW_LINE def is_power ( x , y ) : NEW_LINE INDENT if x == 1 : NEW_LINE INDENT return ( y == 1 ) NEW_LINE DEDENT pow = 1 NEW_LINE while pow < y : NEW_LINE INDENT pow = pow * x NEW_LINE DEDENT return ( pow == y ) NEW_LINE DEDENT return " " if is_power ( 10 , 1 ) else " " NEW_LINE DEDENT
def test ( ) : NEW_LINE INDENT print ( 1 if is_power ( 10 , 1 ) else 0 ) NEW_LINE print ( 1 if is_power ( 1 , 20 ) else 0 ) NEW_LINE print ( 1 if is_power ( 2 , 128 ) else 0 ) NEW_LINE print ( 1 if is_power ( 2 , 30 ) else 0 ) NEW_LINE def is_power ( x , y ) : NEW_LINE INDENT if x == 1 : NEW_LINE INDENT return ( y == 1 ) NEW_LINE DEDENT pow = 1 NEW_LINE while pow < y : NEW_LINE INDENT pow = pow * x NEW_LINE DEDENT return ( pow == y ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def minimum_value ( arr , n , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE answer = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT answer += arr [ i ] ** 2 NEW_LINE DEDENT return answer * ( 2 * k - 2 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT N = len ( sys . argv ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( " No ▁ input ▁ found ▁ for ▁ % s " % sys . argv [ 0 ] ) NEW_LINE return 1 NEW_LINE DEDENT vs = set ( ) NEW_LINE indeg = { } NEW_LINE outdeg = { } NEW_LINE for i in range ( N ) : NEW_LINE INDENT u , d , rel = ' u ' + str ( i ) . split ( ' ▁ ' ) [ 0 ] . split ( ' ▁ ' ) [ 0 ] NEW_LINE d = ' d ' + str ( i ) . split ( ' ▁ ' ) [ 1 ] . split ( ' ▁ ' ) [ 2 ] NEW_LINE vs . add ( u ) NEW_LINE vs . add ( d ) NEW_LINE indeg . setdefault ( u , set ( ) ) NEW_LINE indeg . setdefault ( d , set ( ) ) NEW_LINE outdeg . setdefault ( u , set ( ) ) NEW_LINE outdeg . setdefault ( d , set ( ) ) NEW_LINE if rel == ' lock ' : NEW_LINE INDENT indeg [ u ] . add ( d ) NEW_LINE outdeg [ d ] . add ( u ) NEW_LINE DEDENT else : NEW_LINE INDENT indeg [ d ] . add ( u ) NEW_LINE outdeg [ u ] . add ( d ) NEW_LINE DEDENT DEDENT que = [ ] NEW_LINE for v in indeg : NEW_LINE INDENT if len ( indeg [ v ] ) == 0 : NEW_LINE INDENT que . append ( v ) NEW_LINE DEDENT DEDENT while not que : NEW_LINE INDENT u = que . pop ( ) NEW_LINE for v in outdeg [ u ] : NEW_LINE INDENT indeg [ v ] . remove ( u ) NEW_LINE if len ( indeg [ v ] ) == 0 : NEW_LINE INDENT que . append ( v ) NEW_LINE DEDENT DEDENT vs . discard ( u ) NEW_LINE DEDENT print ( 0 if len ( vs ) == 0 else 1 ) NEW_LINE DEDENT
def GFG ( N ) : NEW_LINE INDENT E = ( N * ( N - 1 ) ) // 2 NEW_LINE if N == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return int ( math . pow ( 2 , E - 1 ) ) NEW_LINE DEDENT
def GFG ( a , b ) : NEW_LINE INDENT if not a or not b : NEW_LINE INDENT return 0 NEW_LINE DEDENT if a == b : NEW_LINE INDENT return a NEW_LINE DEDENT if a > b : NEW_LINE INDENT return math . gcd ( a - b , b ) NEW_LINE DEDENT return math . gcd ( a , b - a ) NEW_LINE DEDENT def find_LCM ( arr , n ) : NEW_LINE INDENT lcm = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lcm = ( lcm * arr [ i ] ) / math . gcd ( arr [ i ] , lcm ) NEW_LINE DEDENT return lcm NEW_LINE DEDENT def count_numbers ( arr , n , l , r ) : NEW_LINE INDENT lcm = find_LCM ( arr , n ) NEW_LINE count = ( r / lcm ) - ( ( l - 1 ) / lcm ) NEW_LINE return count NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 1 , 4 , 2 ] NEW_LINE n , l , r = 1 , 10 NEW_LINE print ( count_numbers ( arr , n , l , r ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import numpy . fft as fft NEW_LINE import numpy . random NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT os . chdir ( sys . argv [ 1 ] ) NEW_LINE n = int ( sys . stdin . read ( ) ) NEW_LINE a = min ( n , 4 ) NEW_LINE num = [ fft ( i ) for i in range ( n ) ] NEW_LINE num . sort ( ) NEW_LINE ans = [ ] NEW_LINE for i in range ( a ) : NEW_LINE INDENT for j in range ( a ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT continue NEW_LINE DEDENT ans . append ( int ( str ( num [ i ] ) + str ( num [ j ] ) ) ) NEW_LINE DEDENT DEDENT ans . sort ( ) NEW_LINE print ( ans [ 2 ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( Z ) : NEW_LINE INDENT f = open ( Z ) NEW_LINE op = [ ] NEW_LINE stz = [ ] NEW_LINE T = int ( f . readline ( ) ) NEW_LINE while T > 0 : NEW_LINE INDENT T -= 1 NEW_LINE n = int ( f . readline ( ) ) NEW_LINE stz = list ( f . readline ( ) . split ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n << 2 ) : NEW_LINE INDENT a . append ( int ( stz [ i ] ) ) NEW_LINE DEDENT yes = True NEW_LINE a . sort ( ) NEW_LINE area = a [ 0 ] * a [ - 1 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT lf , rg = i * 2 , 4 * n - ( i * 2 ) - 1 NEW_LINE if ( a [ lf ] != a [ lf + 1 ] ) or ( a [ rg ] != a [ rg - 1 ] ) or ( a [ lf ] * a [ rg ] != area ) : NEW_LINE INDENT yes = False NEW_LINE break NEW_LINE DEDENT DEDENT if yes : NEW_LINE INDENT op . append ( ' YES \n ' ) NEW_LINE DEDENT else : NEW_LINE INDENT op . append ( ' NO \n ' ) NEW_LINE DEDENT DEDENT print ( op ) NEW_LINE DEDENT
def MinDeletion ( a , n ) : NEW_LINE INDENT import math NEW_LINE mp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] in mp : NEW_LINE INDENT mp [ a [ i ] ] = mp [ a [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ a [ i ] ] = 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i , frequency in mp . items ( ) : NEW_LINE INDENT if x <= frequency : NEW_LINE INDENT ans += ( frequency - x ) NEW_LINE DEDENT else : NEW_LINE INDENT ans += frequency NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def delete_n ( args ) : NEW_LINE INDENT inp = 1234 NEW_LINE inp = str ( inp ) NEW_LINE del = 3 NEW_LINE print ( " num _ after _ deleting _ from _ starting ▁ % d " % ( from_start ( inp , del ) ) ) NEW_LINE print ( " num _ after _ deleting _ from _ ending ▁ % d " % ( from_end ( inp , del ) ) ) NEW_LINE def from_start ( inp , del ) : NEW_LINE INDENT try : NEW_LINE INDENT inp1 = inp [ : del - 1 ] NEW_LINE inp2 = inp [ del : len ( inp ) ] NEW_LINE return inp1 + inp2 NEW_LINE DEDENT except : NEW_LINE INDENT return " Check ▁ Input " NEW_LINE DEDENT DEDENT def from_end ( inp , del ) : NEW_LINE INDENT try : NEW_LINE INDENT inp1 = inp [ : - del ] NEW_LINE inp2 = inp [ - del + 1 : len ( inp ) ] NEW_LINE return inp1 + inp2 NEW_LINE DEDENT except : NEW_LINE INDENT return " Check ▁ Input " NEW_LINE DEDENT DEDENT return " " NEW_LINE DEDENT
def nondecdigits ( n ) : NEW_LINE INDENT import sys NEW_LINE x = 0 NEW_LINE for x in range ( n , 1 , - 1 ) : NEW_LINE INDENT no = x NEW_LINE prev_dig = 11 NEW_LINE flag = True NEW_LINE while no != 0 : NEW_LINE INDENT if prev_dig < no % 10 : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT prev_dig = no % 10 NEW_LINE no //= 10 NEW_LINE DEDENT if flag == True : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return x NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE x1 , y1 , x2 , y2 = sys . stdin . read ( ) , sys . stdout . read ( ) , sys . stderr . read ( ) NEW_LINE if x1 == x2 : NEW_LINE INDENT dif = abs ( y1 - y2 ) NEW_LINE print ( ( x1 + dif ) , y1 , ( x1 + dif ) , y2 ) NEW_LINE DEDENT elif y1 == y2 : NEW_LINE INDENT dif = abs ( x1 - x2 ) NEW_LINE print ( ( x1 ) , ( y1 + dif ) , ( x2 ) , ( y2 + dif ) ) NEW_LINE DEDENT elif abs ( x1 - x2 ) == abs ( y1 - y2 ) : NEW_LINE INDENT print ( x1 , y2 , ( x2 ) , y1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT
def can_take ( x_needed , x_available , y_needed , y_available ) : NEW_LINE INDENT import sys NEW_LINE if x_needed > x_available : NEW_LINE INDENT return False NEW_LINE DEDENT if y_needed > y_available : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT
def DZYLovesChessboard ( ) : NEW_LINE INDENT import sys NEW_LINE from cStringIO import StringIO NEW_LINE f = StringIO ( ) NEW_LINE n = len ( f ) NEW_LINE m = len ( f ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( f . read ( ) . decode ( ' utf - 8' ) ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT w = i % 2 == 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT w = not w NEW_LINE if arr [ i ] [ j ] == ' . ' : NEW_LINE INDENT f . write ( ' W ' if w else ' B ' ) NEW_LINE DEDENT else : NEW_LINE INDENT f . write ( ' - ' ) NEW_LINE DEDENT DEDENT f . write ( ' \n ' ) NEW_LINE DEDENT f . close ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE if sys . stdin . isatty ( ) : NEW_LINE INDENT n = len ( sys . stdin . read ( ) ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT max = sys . maxint NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT x = 0 NEW_LINE brr = [ ] NEW_LINE for k in arr : NEW_LINE INDENT brr . append ( k ) NEW_LINE x += 1 NEW_LINE DEDENT for k in range ( i , j + 1 ) : NEW_LINE INDENT if brr [ k ] == 0 : NEW_LINE INDENT brr [ k ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT brr [ k ] = 0 NEW_LINE DEDENT DEDENT DEDENT count = checKNo ( brr ) NEW_LINE if count > max : NEW_LINE INDENT max = count NEW_LINE DEDENT DEDENT if n == 1 : NEW_LINE INDENT if arr [ 0 ] == 1 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( max ) NEW_LINE DEDENT DEDENT DEDENT
def count_distict_substring ( arr , n ) : NEW_LINE INDENT import collections NEW_LINE vis = { } NEW_LINE def get_index ( key ) : NEW_LINE INDENT if key not in vis : NEW_LINE INDENT return 0 NEW_LINE DEDENT return vis [ key ] NEW_LINE DEDENT k = len ( vis ) NEW_LINE vis = { } NEW_LINE ans , right , window = 0 , 0 , 0 NEW_LINE for left in range ( n ) : NEW_LINE INDENT while right < n and window < k : NEW_LINE INDENT vis [ right ] = vis [ right ] + 1 NEW_LINE if vis [ right ] == 1 : NEW_LINE INDENT window += 1 NEW_LINE DEDENT right += 1 NEW_LINE DEDENT if window == k : NEW_LINE INDENT ans += ( n - right + 1 ) NEW_LINE DEDENT vis [ left ] = vis [ left ] - 1 NEW_LINE if vis [ left ] == 0 : NEW_LINE INDENT window -= 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs , codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs , codecs NEW_LINE from codecs import codecs , codecs NEW_LINE from codecs import codecs , codecs NEW_LINE from codecs import codecs , codecs NEW_LINE from codecs import codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs NEW_LINE codecs import codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs , codecs NEW_LINE from codecs import codecs , codecs NEW_LINE codecs import codecs NEW_LINE codecs = codecs NEW_LINE try : NEW_LINE INDENT codecs = codecs ( ) NEW_LINE DEDENT except Exception : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT raise NEW_LINE DEDENT return codecs , codecs , codecs NEW_LINE DEDENT
def is_prime ( n ) : NEW_LINE INDENT import math NEW_LINE if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT if n <= 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if n % 2 == 0 or n % 3 == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , n * n + 1 , 6 ) : NEW_LINE INDENT if n % i == 0 or n % ( i + 2 ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def prime_bits_in_range ( l , r ) : NEW_LINE INDENT global tot_bit , count NEW_LINE count = 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT tot_bit = math . bitcount ( i ) NEW_LINE if math . is_prime ( tot_bit ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def count_set_bits ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while n > 0 : NEW_LINE INDENT n &= ( n - 1 ) NEW_LINE count += 1 NEW_LINE DEDENT return count NEW_LINE def pairs ( arr , n , k ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT sum = count_set_bits ( arr [ i ] ) + count_set_bits ( arr [ j ] ) NEW_LINE if sum == k : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 4 NEW_LINE print ( pairs ( arr , n , k ) ) NEW_LINE DEDENT DEDENT
def reverse_queue_first_kelements ( k ) : NEW_LINE INDENT import sys NEW_LINE if not sys . stdin . isatty ( ) or k > len ( sys . stdin . isatty ( ) ) : NEW_LINE INDENT return NEW_LINE DEDENT if k <= 0 : NEW_LINE INDENT return NEW_LINE DEDENT stack = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT stack . append ( sys . stdin . read ( ) ) NEW_LINE del sys . stdin . read ( ) NEW_LINE DEDENT while not sys . stdin . isatty ( ) : NEW_LINE INDENT sys . stdin . write ( ' % d ' % i ) NEW_LINE del sys . stdin . read ( ) NEW_LINE DEDENT for i in range ( len ( sys . stdin ) - k ) : NEW_LINE INDENT sys . stdin . write ( ' % d ' % i ) NEW_LINE del sys . stdin . read ( ) NEW_LINE DEDENT DEDENT def Print ( ) : NEW_LINE INDENT while not sys . stdin . isatty ( ) : NEW_LINE INDENT sys . stdout . write ( ' % d ' % i ) NEW_LINE del sys . stdin . read ( ) NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT queue = [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 ] NEW_LINE k = 5 NEW_LINE reverse_queue_first_kelements ( k ) NEW_LINE Print ( ) NEW_LINE DEDENT
def Ideone ( ) : NEW_LINE INDENT import sys NEW_LINE import re NEW_LINE import sys NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = - int ( sys . stdin . readline ( ) ) NEW_LINE for x in sys . stdin . readline ( ) . strip ( ) . split ( ) : NEW_LINE INDENT sum += int ( x ) NEW_LINE DEDENT if sum % 2 == 0 : NEW_LINE INDENT print ( ' maomao90' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' errorgorn ' ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( k ) : NEW_LINE INDENT if k == 1 : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( ( k + 1 ) & k ) == 0 : NEW_LINE INDENT return k // 2 NEW_LINE DEDENT return 1 NEW_LINE DEDENT
def is_perfect_square ( num ) : NEW_LINE INDENT low = 1 NEW_LINE high = num NEW_LINE while low <= high : NEW_LINE INDENT mid = ( low + high ) >> 1 NEW_LINE if mid * mid == num : NEW_LINE INDENT return True NEW_LINE DEDENT elif mid * mid < num : NEW_LINE INDENT low = int ( mid ) + 1 NEW_LINE DEDENT else : NEW_LINE INDENT high = int ( mid ) - 1 NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import os NEW_LINE import sys NEW_LINE import re NEW_LINE import math NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . read ( ) ) NEW_LINE b = int ( sys . stdin . read ( ) ) NEW_LINE c = int ( sys . stdin . read ( ) ) NEW_LINE result = " No " NEW_LINE if max ( a , max ( b , c ) ) * 2 == a + b + c : NEW_LINE INDENT result = " Yes " NEW_LINE DEDENT print ( result ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT n1 = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT n1 = 0 NEW_LINE DEDENT arr = [ ] NEW_LINE sum = 0 NEW_LINE for i in range ( n1 ) : NEW_LINE INDENT n2 = int ( sys . stdin . readline ( ) ) NEW_LINE arr . append ( n2 ) NEW_LINE sum += float ( arr [ i ] ) NEW_LINE DEDENT summ = sum NEW_LINE summ //= float ( n1 ) NEW_LINE nos = 0 NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT if arr [ i ] == summ : NEW_LINE INDENT nos += 1 NEW_LINE DEDENT DEDENT print ( nos ) NEW_LINE for i in range ( n1 ) : NEW_LINE INDENT if float ( arr [ i ] ) == summ : NEW_LINE INDENT print ( ( i + 1 ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT size = int ( sys . stdin . readline ( ) ) NEW_LINE quantum = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT sum = 0 NEW_LINE queue = Queue ( ) NEW_LINE for i in range ( size ) : NEW_LINE INDENT name = raw_input ( ) NEW_LINE time = int ( raw_input ( ) ) NEW_LINE if time <= quantum : NEW_LINE INDENT sum += time NEW_LINE print ( name , sum ) NEW_LINE DEDENT else : NEW_LINE INDENT sum += quantum NEW_LINE queue . enqueue ( ( name , time - quantum ) ) NEW_LINE DEDENT DEDENT while not queue . empty ( ) : NEW_LINE INDENT process = queue . dequeue ( ) NEW_LINE if process . quantum <= quantum : NEW_LINE INDENT sum += process . quantum NEW_LINE print ( process . name , sum ) NEW_LINE DEDENT else : NEW_LINE INDENT sum += quantum NEW_LINE queue . enqueue ( ( process . name , process . quantum - quantum ) ) NEW_LINE DEDENT DEDENT class Queue : NEW_LINE INDENT SIZE = 100000 NEW_LINE DEDENT x = [ ] NEW_LINE head = 0 NEW_LINE tail = 0 NEW_LINE def dequeue ( ) : NEW_LINE INDENT if not iterable ( x ) : NEW_LINE INDENT raise Exception ( ' You ▁ dequeued ▁ from ▁ empty ▁ ' ' queue . ' ) NEW_LINE DEDENT value = x [ tail ] NEW_LINE tail += 1 NEW_LINE if tail == SIZE : NEW_LINE INDENT tail -= SIZE NEW_LINE DEDENT return value NEW_LINE DEDENT def enqueue ( process ) : NEW_LINE INDENT if is_full ( ) : NEW_LINE INDENT raise Exception ( ' You ▁ enqueued ▁ to ▁ full ▁ queue . ' ) NEW_LINE DEDENT x . append ( process ) NEW_LINE head += 1 NEW_LINE if head == SIZE : NEW_LINE INDENT head -= SIZE NEW_LINE DEDENT DEDENT def is_full ( ) : NEW_LINE INDENT return head + 1 == ( tail % SIZE ) NEW_LINE DEDENT def is_empty ( ) : NEW_LINE INDENT return head == tail NEW_LINE DEDENT class Process ( name , quantum ) : NEW_LINE INDENT def __init__ ( self , name ) : NEW_LINE INDENT self . name = name NEW_LINE self . quantum = quantum NEW_LINE DEDENT DEDENT DEDENT
def find_element ( arr , ranges , rotations , index ) : NEW_LINE INDENT for i in range ( rotations - 1 , - 1 , - 1 ) : NEW_LINE INDENT left = ranges [ i ] [ 0 ] NEW_LINE right = ranges [ i ] [ 1 ] NEW_LINE if left <= index and right >= index : NEW_LINE INDENT if index == left : NEW_LINE INDENT index = right NEW_LINE DEDENT else : NEW_LINE INDENT index -= 1 NEW_LINE DEDENT DEDENT DEDENT return arr [ index ] NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT MAXN = 1000001 NEW_LINE spf = [ 0 ] * MAXN NEW_LINE hash1 = { } NEW_LINE def sieve ( ) : NEW_LINE INDENT spf [ 1 ] = 1 NEW_LINE for i in range ( 2 , MAXN ) : NEW_LINE INDENT spf [ i ] = i NEW_LINE DEDENT for i in range ( 4 , MAXN , 2 ) : NEW_LINE INDENT spf [ i ] = 2 NEW_LINE DEDENT for i in range ( 3 , i * MAXN ) : NEW_LINE INDENT if spf [ i ] == i : NEW_LINE INDENT for j in range ( i * i , MAXN , i ) : NEW_LINE INDENT if spf [ j ] == j : NEW_LINE INDENT spf [ j ] = i NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT def getFactorization ( x ) : NEW_LINE INDENT while x != 1 : NEW_LINE INDENT temp = spf [ x ] NEW_LINE if x % temp == 0 : NEW_LINE INDENT hash1 [ spf [ x ] ] += 1 NEW_LINE x = x // spf [ x ] NEW_LINE DEDENT while x % temp == 0 : NEW_LINE INDENT x = x // temp NEW_LINE DEDENT DEDENT DEDENT def check ( x ) : NEW_LINE INDENT while x != 1 : NEW_LINE INDENT temp = spf [ x ] NEW_LINE if x % temp == 0 and hash1 [ temp ] > 1 : NEW_LINE INDENT return False NEW_LINE DEDENT while x % temp == 0 : NEW_LINE INDENT x = x // temp NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def hasValidNum ( arr , n ) : NEW_LINE INDENT sieve ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT getFactorization ( arr [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if check ( arr [ i ] ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 2 , 8 , 4 , 10 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE if hasValidNum ( arr , n ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def is_exists ( a , n ) : NEW_LINE INDENT import re NEW_LINE freq = { } NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ a [ i ] ] = 0 if freq . get ( a [ i ] ) is None else freq [ a [ i ] ] + 1 NEW_LINE sum += a [ i ] NEW_LINE DEDENT if sum % 2 == 0 : NEW_LINE INDENT if freq [ sum // 2 ] is not None : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT
def area_of_kite ( d1 , d2 ) : NEW_LINE INDENT area = ( d1 * d2 ) / 2 NEW_LINE return area NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE a = np . zeros ( ( 4 , 11 ) ) NEW_LINE for i , j in enumerate ( range ( n ) ) : NEW_LINE INDENT n -= 1 NEW_LINE j += i // 3 NEW_LINE i , j = ( i + 1 ) % 4 , ( i + 1 ) % 4 NEW_LINE if i == 2 and j != 0 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT a [ i ] [ j ] = True NEW_LINE DEDENT print
def code_forces ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if ( n & ( n - 1 ) ) == 0 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def product_equal ( n ) : NEW_LINE INDENT if n < 10 : NEW_LINE INDENT return False NEW_LINE DEDENT prod_odd , prod_even = 1 , 1 NEW_LINE while n > 0 : NEW_LINE INDENT digit = n % 10 NEW_LINE prod_odd *= digit NEW_LINE n //= 10 NEW_LINE if not n : NEW_LINE INDENT break NEW_LINE DEDENT digit = n % 10 NEW_LINE prod_even *= digit NEW_LINE n //= 10 NEW_LINE DEDENT if prod_even == prod_odd : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE while True : NEW_LINE INDENT n = int ( f . readline ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT key = [ None ] * n NEW_LINE data = f . readline ( ) . split ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT key [ i ] = int ( data [ i ] ) NEW_LINE DEDENT c = list ( f ) NEW_LINE key_count = 0 NEW_LINE for c in c : NEW_LINE INDENT for i in range ( key [ key_count ] ) : NEW_LINE INDENT if c [ i ] == 97 : NEW_LINE INDENT c [ i ] = 90 NEW_LINE DEDENT elif c [ i ] == 65 : NEW_LINE INDENT c [ i ] = 122 NEW_LINE DEDENT else : NEW_LINE INDENT c [ i ] -= 1 NEW_LINE DEDENT DEDENT if key_count == len ( key ) - 1 : NEW_LINE INDENT key_count = 0 NEW_LINE DEDENT else : NEW_LINE INDENT key_count += 1 NEW_LINE DEDENT DEDENT for c in c : NEW_LINE INDENT sys . stdout . write ( c [ i ] ) NEW_LINE DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT DEDENT
def check_even_odd ( arr , n , l , r ) : NEW_LINE INDENT if arr [ r ] == 1 : NEW_LINE INDENT print ( " odd " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " even " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT data = sys . stdin . read ( ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( " ? ? ¨ ? ? ? ? " ) NEW_LINE return NEW_LINE DEDENT split = data . split ( " ▁ " , 1 ) NEW_LINE w = int ( split [ 0 ] ) NEW_LINE h = int ( split [ 1 ] ) NEW_LINE x = int ( split [ 2 ] ) NEW_LINE y = int ( split [ 3 ] ) NEW_LINE r = int ( split [ 4 ] ) NEW_LINE if ( x - r >= 0 ) and ( x + r <= w ) and ( y - r >= 0 ) and ( y + r <= h ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def find_prime ( n ) : NEW_LINE INDENT num = n + 1 NEW_LINE while num > 0 : NEW_LINE INDENT if is_prime ( num ) : NEW_LINE INDENT return num NEW_LINE DEDENT num = num + 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT def min_number ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT if is_prime ( sum ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT num = find_prime ( sum ) NEW_LINE return num - sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 2 , 4 , 6 , 8 , 12 ] NEW_LINE n = len ( arr ) NEW_LINE print ( min_number ( arr , n ) ) NEW_LINE DEDENT
def composite_product ( arr , n ) : NEW_LINE INDENT max_val = np . max ( arr ) NEW_LINE prime = np . zeros ( max_val + 1 ) NEW_LINE prime [ 0 ] = True NEW_LINE prime [ 1 ] = True NEW_LINE for p in range ( 2 , max_val + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , max_val + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if not prime [ arr [ i ] ] : NEW_LINE INDENT product *= arr [ i ] NEW_LINE DEDENT DEDENT return product NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE intx = None NEW_LINE inty = None NEW_LINE intwork = None NEW_LINE try : NEW_LINE INDENT f = open ( sys . argv [ 1 ] ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT print ( sys . exc_info ( ) [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT while True : NEW_LINE INDENT strLine = f . readline ( ) NEW_LINE if strLine is not None : NEW_LINE INDENT strNumList = strLine . split ( ) NEW_LINE intx = int ( strNumList [ 0 ] ) NEW_LINE inty = int ( strNumList [ 1 ] ) NEW_LINE if intx is not None or inty is not None : NEW_LINE INDENT if intx > inty : NEW_LINE INDENT intwork = intx NEW_LINE intx = inty NEW_LINE inty = intwork NEW_LINE DEDENT print ( intx , inty ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE strarr = string . ascii_lowercase + string . ascii_uppercase + string . ascii_lowercase + string . ascii_uppercase + string . ascii_lowercase + string . ascii_uppercase + string . ascii_lowercase + string . ascii_uppercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii_lowercase + string . ascii + string . ascii
def find_sum ( arr , n , left , right ) : NEW_LINE INDENT k = right - left NEW_LINE d = arr [ 1 ] - arr [ 0 ] NEW_LINE ans = arr [ left - 1 ] * ( k + 1 ) NEW_LINE ans = ans + ( d * ( k * ( k + 1 ) ) ) / 2 NEW_LINE return ans NEW_LINE DEDENT
def max_result ( n , a , b , c ) : NEW_LINE INDENT import math NEW_LINE maxVal = 0 NEW_LINE for i in range ( 0 , n + 1 , a ) : NEW_LINE INDENT for j in range ( 0 , n - i + 1 , b ) : NEW_LINE INDENT z = ( n - ( i + j ) ) / c NEW_LINE if math . floor ( z ) == math . ceil ( z ) : NEW_LINE INDENT x = i // a NEW_LINE y = j // b NEW_LINE maxVal = max ( maxVal , x + y + int ( z ) ) NEW_LINE DEDENT DEDENT DEDENT return maxVal NEW_LINE DEDENT
def sort ( a ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( len ( a ) - 1 ) : NEW_LINE INDENT for j in range ( len ( a ) - 1 , i , - 1 ) : NEW_LINE INDENT if a [ j ] > a [ j - 1 ] : NEW_LINE INDENT t = a [ j ] NEW_LINE a [ j ] = a [ j - 1 ] NEW_LINE a [ j - 1 ] = t NEW_LINE DEDENT DEDENT DEDENT def print_hill ( a ) : NEW_LINE INDENT for i in range ( 3 ) : NEW_LINE INDENT print ( a [ i ] ) NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT hills = [ ] NEW_LINE inp = sys . stdin . readline ( ) NEW_LINE bres = inp . strip ( ) NEW_LINE n = 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT num = bres [ i ] NEW_LINE n = int ( num ) NEW_LINE hills . append ( n ) NEW_LINE DEDENT sort ( hills ) NEW_LINE print_hill ( hills ) NEW_LINE DEDENT return main ( ) NEW_LINE DEDENT
def fact ( n ) : NEW_LINE INDENT import re NEW_LINE ans = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT ans = ans * i NEW_LINE DEDENT return ( ans ) NEW_LINE def number_of_possible_pallindrome ( data , n ) : NEW_LINE INDENT mp = { } NEW_LINE for c in data : NEW_LINE INDENT mp [ c ] = 1 if mp . get ( c ) is None else mp [ c ] + 1 NEW_LINE DEDENT k = 0 NEW_LINE num = 0 NEW_LINE den = 1 NEW_LINE fi = 0 NEW_LINE for it , d in mp . items ( ) : NEW_LINE INDENT if d % 2 == 0 : NEW_LINE INDENT fi = d // 2 NEW_LINE DEDENT else : NEW_LINE INDENT fi = ( d - 1 ) // 2 NEW_LINE k += 1 NEW_LINE DEDENT num = num + fi NEW_LINE den = den * math . factorial ( fi ) NEW_LINE DEDENT if num != 0 : NEW_LINE INDENT num = math . factorial ( num ) NEW_LINE DEDENT ans = num // den NEW_LINE if k != 0 : NEW_LINE INDENT ans = ans * k NEW_LINE DEDENT return ( ans ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT data = ' ababab ' NEW_LINE n = len ( data ) NEW_LINE print ( number_of_possible_pallindrome ( data , n ) ) NEW_LINE DEDENT return ( ' ' . join ( str ( n ) ) ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT size = int ( sys . stdin . readline ( ) ) NEW_LINE arr = [ ] NEW_LINE for i in range ( 1 , size + 1 ) : NEW_LINE INDENT arr . append ( int ( sys . stdin . readline ( ) ) ) NEW_LINE DEDENT print ( split ( arr , 1 , size ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT return 1 NEW_LINE DEDENT def split ( arr , s , m ) : NEW_LINE INDENT if s == m : NEW_LINE INDENT return 1 NEW_LINE DEDENT half = ( m - s + 1 ) >> 1 NEW_LINE mid = half + s NEW_LINE ans1 = split ( arr , s , mid - 1 ) NEW_LINE ans2 = split ( arr , mid , m ) NEW_LINE if arr [ mid ] >= arr [ mid - 1 ] and ans1 == ans2 and ans1 == half : NEW_LINE INDENT return ans1 + ans2 NEW_LINE DEDENT elif ans1 > ans2 : NEW_LINE INDENT return ans1 NEW_LINE DEDENT else : NEW_LINE INDENT return ans2 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def toggle_last_mb_of ( n , m ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT import subprocess NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT subprocess . call ( [ ' / usr / bin / sh ' , ' - c ' , ' - u ' , ' - u ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' - ' , ' -
def cf1672b ( ) : NEW_LINE INDENT import string NEW_LINE t = len ( sys . stdin ) NEW_LINE while t > 0 : NEW_LINE INDENT s = sys . stdin . read ( t ) NEW_LINE a , b = 0 , 0 NEW_LINE f = True NEW_LINE for ch in s : NEW_LINE INDENT if ch == ' A ' : NEW_LINE INDENT a += 1 NEW_LINE DEDENT else : NEW_LINE INDENT b += 1 NEW_LINE if a < b : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE f = False NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT if f : NEW_LINE INDENT if b != 0 and s [ - 1 ] == ' B ' : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def first_substring ( s ) : NEW_LINE INDENT import string NEW_LINE n , c = len ( s ) , 0 NEW_LINE s1 , s2 = ' ' , ' ' NEW_LINE mpp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] in ' ▁ ' or s [ i ] in ' ▁ # ' : NEW_LINE INDENT s1 = s [ c : i ] NEW_LINE mpp [ s1 ] = 1 NEW_LINE c = i + 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if s [ i ] == ' ▁ ' : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( n ) : NEW_LINE INDENT if s [ i ] == ' ▁ ' : NEW_LINE INDENT break NEW_LINE DEDENT s1 = s [ i : j - i + 1 ] NEW_LINE s2 = s1 NEW_LINE s1 = reverse ( s1 ) NEW_LINE if s1 in mpp : NEW_LINE INDENT return s2 NEW_LINE DEDENT DEDENT DEDENT return ' - 1' NEW_LINE DEDENT def reverse ( x ) : NEW_LINE INDENT a = list ( x ) NEW_LINE l , r = len ( a ) - 1 , len ( a ) NEW_LINE for l , r in zip ( l , r ) : NEW_LINE INDENT temp = a [ l ] NEW_LINE a [ l ] = a [ r ] NEW_LINE a [ r ] = temp NEW_LINE DEDENT return ' ' . join ( a ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT global s , s1 NEW_LINE s = ' mango ▁ is ▁ sweet ▁ when ▁ nam ▁ en ▁ tastes ▁ it # ' NEW_LINE s1 = first_substring ( s ) NEW_LINE sys . stdout . write ( s1 + ' \n ' ) NEW_LINE DEDENT return ' ' . join ( m . group ( 1 ) for m in m . group ( 2 ) . split ( ' ▁ ' ) ) NEW_LINE DEDENT
def count_consecutive ( n ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE s = list ( str ( n ) ) NEW_LINE count = 0 NEW_LINE for i in range ( len ( s ) - 1 ) : NEW_LINE INDENT if s [ i ] == s [ i + 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def find_angle ( n ) : NEW_LINE INDENT import math NEW_LINE global interior_angle , exterior_angle NEW_LINE interior_angle = ( n - 2 ) * math . pi / n NEW_LINE exterior_angle = 360 / n NEW_LINE print ( " Interior ▁ angle : ▁ % d " % interior_angle ) NEW_LINE print ( " Exterior ▁ angle : ▁ % d " % exterior_angle ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT smallest = int ( math . pow ( math . ceil ( math . sqrt ( math . pow ( 10 , n - 1 ) ) ) , 2 ) ) NEW_LINE print ( smallest , end = ' ▁ ' ) NEW_LINE largest = int ( math . pow ( math . ceil ( math . sqrt ( math . pow ( 10 , n ) ) ) - 1 , 2 ) ) NEW_LINE print ( largest , end = ' ▁ ' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class A ( ) : NEW_LINE INDENT def solve ( self ) : NEW_LINE INDENT with open ( ' test . txt ' , ' r ' ) as f : NEW_LINE INDENT t = len ( f . readlines ( ) ) NEW_LINE while t > 0 : NEW_LINE INDENT n = len ( f . readlines ( ) ) NEW_LINE message = list ( f . readlines ( ) ) NEW_LINE self . _identify_message ( message , n ) NEW_LINE DEDENT DEDENT DEDENT def _identify_message ( self , n ) : NEW_LINE INDENT self . _identify_message ( self , n ) NEW_LINE DEDENT DEDENT print ( ' Yes ' if n > 0 else ' No ' ) NEW_LINE DEDENT
def akarshanand2810 ( ) : NEW_LINE INDENT import sys NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE DEDENT
def GFG ( a , n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT p = power ( a , n // 2 ) NEW_LINE p = p * p NEW_LINE if n % 2 == 1 : NEW_LINE INDENT p = p * a NEW_LINE DEDENT return p NEW_LINE DEDENT def solve ( i , n , sum , k , a , prefix ) : NEW_LINE INDENT if sum > k : NEW_LINE INDENT discard_count += power ( 2 , n - i ) NEW_LINE return 0 NEW_LINE DEDENT if i == n : NEW_LINE INDENT return 0 NEW_LINE DEDENT rem = prefix [ n - 1 ] - prefix [ i ] NEW_LINE if sum + a [ i ] + rem > k : NEW_LINE INDENT solve ( i + 1 , n , sum + a [ i ] , k , a , prefix ) NEW_LINE DEDENT if sum + rem > k : NEW_LINE INDENT solve ( i + 1 , n , sum , k , a , prefix ) NEW_LINE DEDENT DEDENT def count_subsequences ( arr , n , K ) : NEW_LINE INDENT sum = 0. NEW_LINE k = float ( math . log ( K ) ) NEW_LINE prefix = [ ] NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( float ( math . log ( arr [ i ] ) ) ) NEW_LINE sum += a [ i ] NEW_LINE DEDENT prefix . append ( a [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT prefix . append ( prefix [ i - 1 ] + a [ i ] ) NEW_LINE DEDENT total = power ( 2 , n ) - 1 NEW_LINE if sum <= k : NEW_LINE INDENT return int ( total ) NEW_LINE DEDENT solve ( 0 , n , 0. , k , a , prefix ) NEW_LINE return int ( total - discard_count ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 4 , 8 , 7 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE k = 50 NEW_LINE print ( count_subsequences ( arr , n , k ) , end = ' ▁ ' ) NEW_LINE DEDENT
def GFG ( data ) : NEW_LINE INDENT class Node ( object ) : NEW_LINE INDENT data = data NEW_LINE left = None NEW_LINE right = None NEW_LINE def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT def inorder ( self , root ) : NEW_LINE INDENT if not root : NEW_LINE INDENT return 0 NEW_LINE DEDENT self . inorder ( root . left ) NEW_LINE print ( ' % d ▁ ' % root . data , end = ' ▁ ' ) NEW_LINE self . inorder ( root . right ) NEW_LINE DEDENT def isIdentical ( self , root2 ) : NEW_LINE INDENT if not root1 and not root2 : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif root1 and root2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif not root1 and root2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT if root1 . data == root2 . data and isIdentical ( self . left , root2 . left ) == 1 and isIdentical ( self . right , root2 . right ) == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT DEDENT DEDENT def main ( ) : NEW_LINE INDENT root1 = Node ( 5 ) NEW_LINE root2 = Node ( 5 ) NEW_LINE root1 . left = Node ( 3 ) NEW_LINE root1 . right = Node ( 8 ) NEW_LINE root1 . left . left = Node ( 2 ) NEW_LINE root1 . left . right = Node ( 4 ) NEW_LINE root2 . left = Node ( 3 ) NEW_LINE root2 . right = Node ( 8 ) NEW_LINE root2 . left . left = Node ( 2 ) NEW_LINE root2 . left . right = Node ( 4 ) NEW_LINE if isIdentical ( root1 , root2 ) == 1 : NEW_LINE INDENT print ( ' Both ▁ BSTs ▁ are ▁ identical ' , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' BSTs ▁ are ▁ not ▁ identical ' , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE arr = list ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT left_j = [ 0 ] * ( n + 2 ) NEW_LINE right_i = [ 0 ] * ( n + 2 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT left_j [ i ] = left_j [ i - 1 ] NEW_LINE if arr [ i - 1 ] == ' J ' : NEW_LINE INDENT left_j [ i ] += 1 NEW_LINE DEDENT right_i [ n - i + 1 ] = right_i [ n - i + 2 ] NEW_LINE if arr [ n - i ] == ' I ' : NEW_LINE INDENT right_i [ n - i + 1 ] += 1 NEW_LINE DEDENT DEDENT sum_i = 0 NEW_LINE sum_j = 0 NEW_LINE max_o = 0 NEW_LINE total = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if arr [ i - 1 ] == ' O ' : NEW_LINE INDENT tmp = left_j [ i - 1 ] * right_i [ i + 1 ] NEW_LINE total += tmp NEW_LINE sum_j += ( left_j [ i - 1 ] + 1 ) * right_i [ i + 1 ] NEW_LINE sum_i += left_j [ i - 1 ] * ( right_i [ i + 1 ] + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT tmp = left_j [ i - 1 ] * right_i [ i ] NEW_LINE DEDENT max_o = max ( max_o , tmp ) NEW_LINE DEDENT total += max_o NEW_LINE total = max ( total , sum_j ) NEW_LINE total = max ( total , sum_i ) NEW_LINE print ( total ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT surface = sys . stdin . readline ( ) . strip ( ) . split ( ) NEW_LINE order = sys . stdin . readline ( ) . strip ( ) . split ( ) NEW_LINE dice1 = Dise ( surface = surface ) NEW_LINE dice1 . SetDice ( 1 , 2 , 3 ) NEW_LINE dice1 . RollDice ( order ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT class Dise ( ) : NEW_LINE INDENT surface = [ ] NEW_LINE Top , Bottom , Right , Left , Front , Back = [ ] NEW_LINE def setSurface ( SurfaceString ) : NEW_LINE INDENT for i in range ( 6 ) : NEW_LINE INDENT surface . append ( int ( SurfaceString [ i ] ) ) NEW_LINE DEDENT DEDENT def SetDice ( top , front , right ) : NEW_LINE INDENT Top = top - 1 NEW_LINE Front = front - 1 NEW_LINE Right = right - 1 NEW_LINE Bottom = 5 - ( top - 1 ) NEW_LINE Back = 5 - ( front - 1 ) NEW_LINE Left = 5 - ( right - 1 ) NEW_LINE DEDENT def RollDice ( RollString ) : NEW_LINE INDENT for i in range ( len ( RollString ) ) : NEW_LINE INDENT if RollString [ i ] == ' W ' : NEW_LINE INDENT Bottom = Left NEW_LINE Left = Top NEW_LINE Top = 5 - Bottom NEW_LINE Right = 5 - Left NEW_LINE DEDENT elif RollString [ i ] == ' S ' : NEW_LINE INDENT Bottom = Front NEW_LINE Front = Top NEW_LINE Top = 5 - Bottom NEW_LINE Back = 5 - Front NEW_LINE DEDENT elif RollString [ i ] == ' E ' : NEW_LINE INDENT Bottom = Right NEW_LINE Right = Top NEW_LINE Top = 5 - Bottom NEW_LINE Left = 5 - Right NEW_LINE DEDENT else : NEW_LINE INDENT Bottom = Back NEW_LINE Back = Top NEW_LINE Top = 5 - Bottom NEW_LINE Front = 5 - Back NEW_LINE DEDENT DEDENT print ( surface [ Top ] ) NEW_LINE DEDENT DEDENT
def GFG ( data ) : NEW_LINE INDENT class node ( object ) : NEW_LINE INDENT data = data NEW_LINE next = None NEW_LINE DEDENT def add ( data ) : NEW_LINE INDENT newnode = node ( ) NEW_LINE newnode . data = data NEW_LINE newnode . next = None NEW_LINE return newnode NEW_LINE DEDENT def print_arr ( a , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( a [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def findlength ( head ) : NEW_LINE INDENT curr = head NEW_LINE cnt = 0 NEW_LINE while curr is not None : NEW_LINE INDENT cnt += 1 NEW_LINE curr = curr . next NEW_LINE DEDENT return cnt NEW_LINE DEDENT def convertarr ( head ) : NEW_LINE INDENT data = findlength ( head ) NEW_LINE arr = [ ] NEW_LINE index = 0 NEW_LINE curr = head NEW_LINE while curr is not None : NEW_LINE INDENT arr . append ( curr . data ) NEW_LINE index += 1 NEW_LINE curr = curr . next NEW_LINE DEDENT return arr NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT head = node ( ) NEW_LINE head = add ( 1 ) NEW_LINE head . next = add ( 2 ) NEW_LINE head . next . next = add ( 3 ) NEW_LINE head . next . next . next = add ( 4 ) NEW_LINE head . next . next . next . next = add ( 5 ) NEW_LINE convertarr ( head ) NEW_LINE DEDENT return ' ' . join ( arr ) NEW_LINE DEDENT
def non_dec_nums ( n ) : NEW_LINE INDENT import numpy as np NEW_LINE a = np . zeros ( ( n + 1 , 10 ) ) NEW_LINE for i in range ( 0 , 9 + 1 ) : NEW_LINE INDENT a [ 0 ] [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a [ i ] [ 9 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 8 , - 1 , - 1 ) : NEW_LINE INDENT a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] NEW_LINE DEDENT DEDENT return a [ n ] [ 0 ] NEW_LINE DEDENT
def class29 ( arg ) : NEW_LINE INDENT import string NEW_LINE t = len ( arg ) NEW_LINE while t > 0 : NEW_LINE INDENT n = len ( arg ) NEW_LINE st = set ( ) NEW_LINE i , flag = 0 , 0 NEW_LINE a = [ ] NEW_LINE vis = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = len ( arg ) NEW_LINE val = ( i + a [ i ] ) % n NEW_LINE if val < 0 : NEW_LINE INDENT val += n NEW_LINE DEDENT vis [ int ( val ) ] = 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if vis [ i ] == 0 : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag == 0 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT
def minMoves ( nums ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . random as np NEW_LINE class Solution ( object ) : NEW_LINE INDENT def minMoves ( self , nums ) : NEW_LINE INDENT if not nums : NEW_LINE INDENT return 0 NEW_LINE DEDENT nums . sort ( ) NEW_LINE minNum = nums [ 0 ] NEW_LINE ans = 0 NEW_LINE for num in nums : NEW_LINE INDENT ans += num - minNum NEW_LINE DEDENT return ans NEW_LINE DEDENT def main ( self ) : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE nums = [ 1 , 2 , 3 ] NEW_LINE out = sObj . minMoves ( nums ) NEW_LINE print ( out ) NEW_LINE DEDENT DEDENT return Solution ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . read ( ) ) NEW_LINE b = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if a <= 0 and b >= 0 or a <= 0 and b >= 0 : NEW_LINE INDENT print ( ' Zero ' ) NEW_LINE DEDENT elif a < 0 and b < 0 : NEW_LINE INDENT print ( ( ' Positive ' if ( b - a + 1 ) % 2 == 0 else ' Negative ' ) ) NEW_LINE DEDENT elif a > 0 and b > 0 : NEW_LINE INDENT print ( ' Positive ' ) NEW_LINE DEDENT DEDENT DEDENT
def first_set_bit ( n ) : NEW_LINE INDENT x = n & ( n - 1 ) NEW_LINE return ( n ^ x ) NEW_LINE DEDENT
def maximum_chars ( data ) : NEW_LINE INDENT import re NEW_LINE MAX_CHAR = 256 NEW_LINE def maximum_chars ( data ) : NEW_LINE INDENT n = len ( data ) NEW_LINE res = - 1 NEW_LINE first_ind = [ - 1 ] * MAX_CHAR NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT first_ind [ data [ i ] ] = i NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT first_ind = first_ind [ data [ i ] ] NEW_LINE if first_ind == - 1 : NEW_LINE INDENT first_ind [ data [ i ] ] = i NEW_LINE DEDENT else : NEW_LINE INDENT res = max ( res , abs ( i - first_ind - 1 ) ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def maximum_chars ( data ) : NEW_LINE INDENT data = ' abba ' NEW_LINE print ( maximum_chars ( data ) ) NEW_LINE DEDENT return maximum_chars NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import os NEW_LINE import sys NEW_LINE data = open ( " kefaandcompany . txt " , " r " ) . read ( ) . strip ( ) . split ( ) NEW_LINE n = int ( data [ 0 ] ) NEW_LINE k = int ( data [ 1 ] ) NEW_LINE pf = [ ] NEW_LINE data = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT input = data . strip ( ) . split ( ) NEW_LINE money = int ( input [ 0 ] ) NEW_LINE friend = int ( input [ 1 ] ) NEW_LINE data . append ( Kefa ( money , friend ) ) NEW_LINE DEDENT data . sort ( key = KefaCmp ) NEW_LINE ans = 0 NEW_LINE s , e = 0 , 0 NEW_LINE sum = 0 NEW_LINE while e < n : NEW_LINE INDENT if data [ e ] . money - data [ s ] . money < k : NEW_LINE INDENT sum += data [ e ] . friend NEW_LINE e += 1 NEW_LINE DEDENT else : NEW_LINE INDENT sum -= data [ s ] . friend NEW_LINE s += 1 NEW_LINE DEDENT ans = max ( ans , sum ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def GFG ( a ) : NEW_LINE INDENT import math NEW_LINE area = float ( 5 * math . sqrt ( 3 ) * a * a ) NEW_LINE return area NEW_LINE DEDENT def find_volume ( a ) : NEW_LINE INDENT global volume NEW_LINE volume = float ( ( float ( 5 ) / 12 ) * ( 3 + math . sqrt ( 5 ) ) * a * a * a ) NEW_LINE return volume NEW_LINE DEDENT
def p205 ( ) : NEW_LINE INDENT print ( np . int16 ( ) ) NEW_LINE PYRAMIDAL_DIE_PDF = [ 0 , 1 , 1 , 1 , 1 ] NEW_LINE CUBIC_DIE_PDF = [ 0 , 1 , 1 , 1 , 1 , 1 , 1 ] NEW_LINE nine_pyramidal_pdf = [ 1 ] NEW_LINE for i in range ( 9 ) : NEW_LINE INDENT nine_pyramidal_pdf = np . append ( nine_pyramidal_pdf , PYRAMIDAL_DIE_PDF ) NEW_LINE DEDENT sixcubes_pdf = [ 1 ] NEW_LINE for i in range ( 6 ) : NEW_LINE INDENT sixcubes_pdf = np . append ( sixcubes_pdf , CUBIC_DIE_PDF ) NEW_LINE DEDENT numer = 0 NEW_LINE for i in range ( len ( nine_pyramidal_pdf ) ) : NEW_LINE INDENT numer += int ( nine_pyramidal_pdf [ i ] ) * np . sum ( sixcubes_pdf [ : i ] ) NEW_LINE DEDENT denom = int ( np . sum ( nine_pyramidal_pdf [ : len ( nine_pyramidal_pdf ) ] ) ) * np . sum ( sixcubes_pdf [ : len ( sixcubes_pdf ) ] ) NEW_LINE return ' % .7f ' % ( float ( numer ) / denom ) NEW_LINE DEDENT
def GFG ( args ) : NEW_LINE INDENT import sys NEW_LINE N = 6 NEW_LINE Even = N // 2 NEW_LINE Odd = N - Even NEW_LINE print ( Even * Odd ) NEW_LINE DEDENT
def GFG ( M , N , s ) : NEW_LINE INDENT import sys NEW_LINE if N % s == 0 : NEW_LINE INDENT N = N // s NEW_LINE DEDENT else : NEW_LINE INDENT N = ( N // s ) + 1 NEW_LINE DEDENT if M % s == 0 : NEW_LINE INDENT M = M // s NEW_LINE DEDENT else : NEW_LINE INDENT M = ( M // s ) + 1 NEW_LINE DEDENT return M * N NEW_LINE DEDENT
def ggcd ( a , b ) : NEW_LINE INDENT import sys NEW_LINE if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return ggcd ( b % a , a ) NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a * b ) // gcd ( a , b ) NEW_LINE DEDENT def count_pairs ( arr , n ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if lcm ( arr [ i ] , arr [ j ] ) == ggcd ( arr [ i ] , arr [ j ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT arr = [ 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE sys . stdout . write ( count_pairs ( arr , n ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . input = string . strip ( ) NEW_LINE self . list = [ ] NEW_LINE sum = 0 NEW_LINE for i in range ( self . 6 ) : NEW_LINE INDENT _l = int ( self . input ) NEW_LINE self . list . append ( _l ) NEW_LINE sum += _l NEW_LINE DEDENT self . i , self . j , self . k = self . input . find ( ' ▁ ' ) NEW_LINE DEDENT DEDENT for i in range ( 4 ) : NEW_LINE INDENT for j in range ( i + 1 , 5 ) : NEW_LINE INDENT for k in range ( j + 1 , 6 ) : NEW_LINE INDENT sum1 = self . list [ i ] + self . list [ j ] + self . list [ k ] NEW_LINE if sum1 == sum - sum1 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def _gg_maximize ( number ) : NEW_LINE INDENT import sys NEW_LINE counter = 0 NEW_LINE while number > 0 : NEW_LINE INDENT if number % 2 == 1 : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT number = number // 2 NEW_LINE DEDENT return counter NEW_LINE DEDENT
def CF_1712_A ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE k = sys . maxsize NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . maxsize ) NEW_LINE DEDENT counter = 0 NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT if a [ i ] <= k : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT DEDENT print ( counter ) NEW_LINE DEDENT DEDENT
def python_application38 ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT num1 = int ( sys . stdin . readline ( ) ) NEW_LINE num2 = int ( sys . stdin . readline ( ) ) NEW_LINE counter = 0 NEW_LINE while num1 != 0 and num2 != 0 : NEW_LINE INDENT if num1 == 1 and num2 == 1 : NEW_LINE INDENT break NEW_LINE DEDENT if num1 <= num2 : NEW_LINE INDENT num1 += 1 NEW_LINE num2 -= 2 NEW_LINE DEDENT else : NEW_LINE INDENT num1 -= 2 NEW_LINE num2 += 1 NEW_LINE DEDENT counter += 1 NEW_LINE DEDENT print ( counter ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( sys . exc_info ( ) ) NEW_LINE DEDENT DEDENT
def _main ( ) : NEW_LINE INDENT import numpy as np NEW_LINE class Solution ( object ) : NEW_LINE INDENT def xor_queries ( arr , queries ) : NEW_LINE INDENT res , q = [ 0 ] * len ( queries ) , [ 0 ] NEW_LINE for i in range ( 1 , len ( arr ) ) : NEW_LINE INDENT arr [ i ] ^= arr [ i - 1 ] NEW_LINE DEDENT for q in queries : NEW_LINE INDENT res [ i ] = arr [ q [ 0 ] - 1 ] ^ arr [ q [ 1 ] ] if q [ 0 ] > 0 else arr [ q [ 1 ] ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT sObj = Solution ( ) NEW_LINE arr = [ 1 , 3 , 4 , 8 ] NEW_LINE queries = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 0 , 3 ] , [ 3 , 3 ] ] NEW_LINE out = sObj . xor_queries ( arr , queries ) NEW_LINE print ( np . array ( out ) ) NEW_LINE DEDENT
def encoded_char ( data , k ) : NEW_LINE INDENT expand = " " NEW_LINE temp = " " NEW_LINE freq = 0 NEW_LINE for i in range ( len ( data ) ) : NEW_LINE INDENT temp = " " NEW_LINE freq = 0 NEW_LINE while i < len ( data ) and data [ i ] >= ' a ' and data [ i ] <= ' z ' : NEW_LINE INDENT temp += data [ i ] NEW_LINE i += 1 NEW_LINE DEDENT while i < len ( data ) and data [ i ] >= '1' and data [ i ] <= '9' : NEW_LINE INDENT freq = freq * 10 + data [ i ] - '0' NEW_LINE i += 1 NEW_LINE DEDENT for j in range ( 1 , freq + 1 ) : NEW_LINE INDENT expand += temp NEW_LINE DEDENT DEDENT if not freq : NEW_LINE INDENT expand += temp NEW_LINE DEDENT return expand [ k - 1 ] NEW_LINE DEDENT
def GFG ( a , b , c ) : NEW_LINE INDENT import sys NEW_LINE if ( a + b + c ) % 2 or a + b < c : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT DEDENT
def summation ( n ) : NEW_LINE INDENT abs_sum = n * ( n + 1 ) // 2 NEW_LINE sign = 1 if n + 1 % 2 == 0 else - 1 NEW_LINE result_sum = sign * abs_sum NEW_LINE return result_sum NEW_LINE DEDENT
def sort_squares ( arr ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE arr = [ - 6 , - 3 , - 1 , 2 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( ' Before ▁ sort ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT sort_squares ( arr ) NEW_LINE print ( ' ' ) NEW_LINE print ( ' After ▁ sort ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def cp19 ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n , t , k , pos = int ( raw_input ( ) ) , 0 , 1 , 1 NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT arr = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT arr . append ( raw_input ( ) ) NEW_LINE DEDENT while pos < t : NEW_LINE INDENT k = pos + arr [ pos - 1 ] NEW_LINE pos = k NEW_LINE DEDENT if pos == t : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( sys . argv [ 1 ] ) NEW_LINE N = int ( f . readline ( ) ) NEW_LINE a = [ 0 ] * N NEW_LINE f . readline ( ) . strip ( ) NEW_LINE indeg = [ 0 ] * N NEW_LINE used = [ False ] * N NEW_LINE for i in range ( N ) : NEW_LINE INDENT indeg [ ( i + a [ i ] ) % N ] += 1 NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT j = i NEW_LINE while not used [ j ] and indeg [ j ] == 0 : NEW_LINE INDENT used [ j ] = True NEW_LINE j = ( j + a [ j ] ) % N NEW_LINE indeg [ j ] -= 1 NEW_LINE DEDENT DEDENT print ( len ( set ( indeg ) ) ) NEW_LINE DEDENT
def is_triangular ( num ) : NEW_LINE INDENT import math NEW_LINE if num < 0 : NEW_LINE INDENT return False NEW_LINE DEDENT c = ( - 2 * num ) NEW_LINE b , a = 1 , 1 NEW_LINE d = ( b ** 2 ) - ( 4 * a * c ) NEW_LINE if d < 0 : NEW_LINE INDENT return False NEW_LINE DEDENT root1 = ( - b + float ( math . sqrt ( d ) ) ) / ( 2 * a ) NEW_LINE root2 = ( - b - float ( math . sqrt ( d ) ) ) / ( 2 * a ) NEW_LINE if root1 > 0 and math . floor ( root1 ) == root1 : NEW_LINE INDENT return True NEW_LINE DEDENT if root2 > 0 and math . floor ( root2 ) == root2 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def print_number_with_dr ( k , d ) : NEW_LINE INDENT import sys NEW_LINE if d == 0 and k != 1 : NEW_LINE INDENT sys . stdout . write ( ' - 1' ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( d ) NEW_LINE k -= 1 NEW_LINE while k > 0 : NEW_LINE INDENT sys . stdout . write ( '0' ) NEW_LINE DEDENT DEDENT DEDENT
def rotate_matrix ( mat ) : NEW_LINE INDENT import math NEW_LINE N = 3 NEW_LINE for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT for j in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT print ( ' % d ▁ ' % i , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT p = int ( sys . stdin . read ( ) ) NEW_LINE print ( p / 500 * 500 ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def get_product ( n ) : NEW_LINE INDENT import math NEW_LINE product = 1 NEW_LINE while n != 0 : NEW_LINE INDENT product = product * ( n % 10 ) NEW_LINE n = n // 10 NEW_LINE DEDENT return product NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE sn = sys . stdin . readline ( ) NEW_LINE while True : NEW_LINE INDENT slot = Slot ( sn [ 0 ] , sn [ 1 ] , sn [ 2 ] , sn [ 3 ] , sn [ 4 ] ) NEW_LINE if slot . is_end ( ) : NEW_LINE INDENT break NEW_LINE DEDENT print ( 100 + slot . benefit - slot . lost ) NEW_LINE DEDENT class Slot ( int ) : NEW_LINE INDENT def __init__ ( self , b ) : NEW_LINE INDENT self . b = b NEW_LINE self . r = r NEW_LINE self . g = g NEW_LINE self . c = c NEW_LINE self . s = s NEW_LINE self . t = t NEW_LINE DEDENT def get_lost ( ) : NEW_LINE INDENT return ( self . t - 5 * b - 3 * r - s ) * 3 + ( 5 * b + 3 * r ) * 2 NEW_LINE DEDENT def get_benefit ( ) : NEW_LINE INDENT return self . b * 15 + self . r * 15 + self . g * 7 + self . c * 2 + ( self . b * 5 + self . r * 3 ) * 15 NEW_LINE DEDENT def is_end ( ) : NEW_LINE INDENT return self . b + self . r + self . g + self . c + s + t == 0 NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE mod = 1000000007 NEW_LINE MAXN = 1010 NEW_LINE with open ( ' colorBalls . txt ' , ' w ' , encoding = ' utf - 8' ) as infile : NEW_LINE INDENT with open ( ' colorBalls . txt ' , ' w ' , encoding = ' utf - 8' ) as outfile : NEW_LINE INDENT comb = np . zeros ( ( MAXN , MAXN ) ) NEW_LINE comb [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , MAXN ) : NEW_LINE INDENT comb [ i ] [ 0 ] = 1 NEW_LINE for j in range ( 1 , i + 1 ) : NEW_LINE INDENT comb [ i ] [ j ] = ( comb [ i - 1 ] [ j ] + comb [ i - 1 ] [ j - 1 ] ) % mod NEW_LINE DEDENT DEDENT DEDENT K = len ( infile ) NEW_LINE color = [ infile . read ( ) ] NEW_LINE res = 1 NEW_LINE total = 0 NEW_LINE for i in range ( K ) : NEW_LINE INDENT res = ( res * comb [ total + color [ i ] - 1 ] [ color [ i ] - 1 ] ) % mod NEW_LINE total += color [ i ] NEW_LINE DEDENT outfile . write ( res ) NEW_LINE DEDENT DEDENT
def GFG ( r ) : NEW_LINE INDENT import math NEW_LINE PI = 3.14159265 NEW_LINE def length_rope ( r ) : NEW_LINE INDENT return ( ( 2 * PI * r ) + 6 * r ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT r = 7 NEW_LINE print ( length_rope ( r ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def GFG ( num ) : NEW_LINE INDENT rev_num = 0 NEW_LINE while num > 0 : NEW_LINE INDENT rev_num = rev_num * 10 + num % 10 NEW_LINE num = num // 10 NEW_LINE DEDENT return rev_num NEW_LINE DEDENT
def add_strings ( num1 , num2 ) : NEW_LINE INDENT s = [ ] NEW_LINE carry = 0 NEW_LINE for i , j in enumerate ( num1 ) : NEW_LINE INDENT if i >= 0 or j >= 0 or carry == 1 : NEW_LINE INDENT x = 0 if i < 0 else num1 [ i ] - '0' NEW_LINE y = 0 if j < 0 else num2 [ j ] - '0' NEW_LINE s . append ( ( x + y + carry ) % 10 ) NEW_LINE carry = ( x + y + carry ) // 10 NEW_LINE DEDENT DEDENT return ' ' . join ( reversed ( s ) ) NEW_LINE DEDENT
def is_perfect ( n ) : NEW_LINE INDENT sum = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT if i * i != n : NEW_LINE INDENT sum = sum + i + n // i NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + i NEW_LINE DEDENT DEDENT DEDENT if sum == n and n != 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT for x in range ( 2 , math . sqrt ( n ) + 1 ) : NEW_LINE INDENT p = x NEW_LINE while p <= n : NEW_LINE INDENT p = p * x NEW_LINE if p == n : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT
def is_power ( n ) : NEW_LINE INDENT for x in range ( 2 , math . sqrt ( n ) + 1 ) : NEW_LINE INDENT y = 2 NEW_LINE p = math . pow ( x , y ) NEW_LINE while p <= n and p > 0 : NEW_LINE INDENT if p == n : NEW_LINE INDENT return True NEW_LINE DEDENT y += 1 NEW_LINE p = math . pow ( x , y ) NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT
def __gcd ( a , b ) : NEW_LINE INDENT if not b : NEW_LINE INDENT return a NEW_LINE DEDENT return __gcd ( b , a % b ) NEW_LINE DEDENT
def time ( m , n , rb , cb , rd , cd ) : NEW_LINE INDENT t = 0 NEW_LINE dr = 1 NEW_LINE dc = 1 NEW_LINE while True : NEW_LINE INDENT if rb == rd or cb == cd : NEW_LINE INDENT return t NEW_LINE DEDENT t += 1 NEW_LINE if ( rb + dr ) <= 0 or ( rb + dr > m ) : NEW_LINE INDENT dr *= - 1 NEW_LINE DEDENT if ( cb + dc ) <= 0 or ( cb + dc > n ) : NEW_LINE INDENT dc *= - 1 NEW_LINE DEDENT rb += dr NEW_LINE cb += dc NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT stream_file = sys . stdin NEW_LINE lines = stream_file . readlines ( ) NEW_LINE test_cases = int ( lines [ 0 ] ) NEW_LINE for x in lines [ 1 : ] : NEW_LINE INDENT t = time ( int ( x [ 0 ] ) , int ( x [ 1 ] ) , int ( x [ 2 ] ) , int ( x [ 3 ] ) , int ( x [ 4 ] ) , int ( x [ 5 ] ) ) NEW_LINE print ( t ) NEW_LINE DEDENT DEDENT return t NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = int ( sys . stdin . readline ( ) ) NEW_LINE b = int ( sys . stdin . readline ( ) ) NEW_LINE c = int ( sys . stdin . readline ( ) ) NEW_LINE d = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT ans1 , ans2 = 100000 , 1000000 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if a * i >= n : NEW_LINE INDENT ans1 = i * b NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if c * i >= n : NEW_LINE INDENT ans2 = i * d NEW_LINE break NEW_LINE DEDENT DEDENT print ( min ( ans2 , ans1 ) ) NEW_LINE DEDENT DEDENT
def count_set_bits ( n ) : NEW_LINE INDENT import sys NEW_LINE count = 0 NEW_LINE while n > 0 : NEW_LINE INDENT n &= ( n - 1 ) NEW_LINE count += 1 NEW_LINE DEDENT def total_pairs ( arr , n ) : NEW_LINE INDENT m = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT count = count_set_bits ( arr [ i ] ) NEW_LINE if count in m : NEW_LINE INDENT m [ count ] = m [ count ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ count ] = 1 NEW_LINE DEDENT DEDENT result = 0 NEW_LINE for count , value in m . items ( ) : NEW_LINE INDENT result += ( ( value * ( value - 1 ) ) / 2 ) NEW_LINE DEDENT return result NEW_LINE DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT
def center_hexadecagonal_num ( n ) : NEW_LINE INDENT import sys NEW_LINE n = 2 NEW_LINE print ( " % dth ▁ centered ▁ % dth ▁ " " hexadecagonal ▁ number : ▁ " % n , end = " " ) NEW_LINE print ( center_hexadecagonal_num ( n ) ) NEW_LINE n = 12 NEW_LINE print ( " % dth ▁ centered ▁ % dth ▁ " " hexadecagonal ▁ number : ▁ " % n , end = " " ) NEW_LINE print ( center_hexadecagonal_num ( n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT Q , H , S , D , N = math . histogram ( sys . stdin . read ( ) , 0 , math . pi ) NEW_LINE one_price = min ( min ( Q * 4 , H * 2 ) , S ) NEW_LINE if float ( one_price ) <= float ( D ) / 2 : NEW_LINE INDENT print ( N * one_price ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( N / 2 ) * D + ( N % 2 ) * one_price ) NEW_LINE DEDENT DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def count_numbers ( L , R , K ) : NEW_LINE INDENT if K == 9 : NEW_LINE INDENT K = 0 NEW_LINE DEDENT totalnumbers = R - L + 1 NEW_LINE factor9 = totalnumbers // 9 NEW_LINE rem = totalnumbers % 9 NEW_LINE ans = factor9 NEW_LINE for i in range ( R , R - rem , - 1 ) : NEW_LINE INDENT rem1 = i % 9 NEW_LINE if rem1 == K : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE for a , b , c , d , e , f in [ ( math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) , math . sqrt ( math . pi ) ] : NEW_LINE INDENT DEDENT DEDENT
def Solution ( A ) : NEW_LINE INDENT import sys NEW_LINE ans = 2 NEW_LINE n = len ( A ) NEW_LINE if n <= 2 : NEW_LINE INDENT return n NEW_LINE DEDENT llap = [ 2 for i in range ( n ) ] NEW_LINE A . sort ( ) NEW_LINE for j in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT i = j - 1 NEW_LINE k = j + 1 NEW_LINE while i >= 0 and k < n : NEW_LINE INDENT if A [ i ] + A [ k ] == 2 * A [ j ] : NEW_LINE INDENT llap [ j ] = max ( llap [ k ] + 1 , llap [ j ] ) NEW_LINE ans = max ( ans , llap [ j ] ) NEW_LINE i -= 1 NEW_LINE k += 1 NEW_LINE DEDENT elif A [ i ] + A [ k ] < 2 * A [ j ] : NEW_LINE INDENT k += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT
def minimum_changes ( arr , n , d ) : NEW_LINE INDENT max_freq = - 1 NEW_LINE freq = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT a0 = arr [ i ] - ( i ) * d NEW_LINE if a0 in freq : NEW_LINE INDENT freq [ a0 ] = freq [ a0 ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT freq [ a0 ] = 1 NEW_LINE DEDENT if freq [ a0 ] > max_freq : NEW_LINE INDENT max_freq = freq [ a0 ] NEW_LINE DEDENT DEDENT return ( n - max_freq ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . random NEW_LINE import os NEW_LINE import sys NEW_LINE n = len ( sys . stdin ) NEW_LINE vec = np . zeros ( ( n , 4 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT vec [ i ] [ 0 ] = sys . stdin . read ( ) NEW_LINE vec [ i ] [ 1 ] = sys . stdin . read ( ) NEW_LINE vec [ i ] [ 2 ] = sys . stdin . read ( ) NEW_LINE vec [ i ] [ 3 ] = sys . stdin . read ( ) NEW_LINE DEDENT ans = 500 NEW_LINE ansprice = 20000 NEW_LINE for i in range ( n ) : NEW_LINE INDENT fl = 1 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if vec [ i ] [ 0 ] < vec [ j ] [ 0 ] and vec [ i ] [ 1 ] < vec [ j ] [ 1 ] and vec [ i ] [ 2 ] < vec [ j ] [ 2 ] : NEW_LINE INDENT fl = 0 NEW_LINE DEDENT DEDENT if fl == 1 : NEW_LINE INDENT if vec [ i ] [ 3 ] < ansprice : NEW_LINE INDENT ansprice = vec [ i ] [ 3 ] NEW_LINE ans = i + 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE sys . exit ( 0 ) NEW_LINE DEDENT
def count_points ( n , m , a , b , x , y ) : NEW_LINE INDENT import numpy as np NEW_LINE a . sort ( ) NEW_LINE b . sort ( ) NEW_LINE j = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT while j < m : NEW_LINE INDENT if a [ i ] + y < b [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT if b [ j ] >= a [ i ] - x and b [ j ] <= a [ i ] + y : NEW_LINE INDENT count += 1 NEW_LINE j += 1 NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def mul_with_3_point5 ( x ) : NEW_LINE INDENT return ( x << 1 ) + x + ( x >> 1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE import random NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE s = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ None ] * n NEW_LINE a [ n ] = int ( a [ n ] ) NEW_LINE print ( solve ( n , a , s ) ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT
def longest_substring ( s ) : NEW_LINE INDENT import string NEW_LINE cnt , maxi = 1 , 1 NEW_LINE n = len ( s ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if s [ i ] != s [ i - 1 ] : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT maxi = max ( cnt , maxi ) NEW_LINE cnt = 1 NEW_LINE DEDENT DEDENT maxi = max ( cnt , maxi ) NEW_LINE return maxi NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Main ( sys . stdin ) : NEW_LINE INDENT def run ( self ) : NEW_LINE INDENT with open ( self . path ) as f : NEW_LINE INDENT k = f . read ( ) NEW_LINE n = 50 NEW_LINE sum = k // n NEW_LINE amari = k % n NEW_LINE a = [ 0 ] * 50 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = i + sum NEW_LINE DEDENT for i in range ( amari ) : NEW_LINE INDENT a [ n - 1 - i ] += 1 NEW_LINE DEDENT print ( n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( a [ i ] + ( ' \n ' if i == n - 1 else ' ▁ ' ) , end = ' ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def zero_upto ( digits ) : NEW_LINE INDENT first = int ( ( pow ( 10 , digits ) - 1 ) / 9 ) NEW_LINE second = int ( ( pow ( 9 , digits ) - 1 ) / 8 ) NEW_LINE return 9 * ( first - second ) NEW_LINE DEDENT def int_upto ( c ) : NEW_LINE INDENT return ord ( c ) - 48 NEW_LINE DEDENT def count_zero ( num ) : NEW_LINE INDENT k = len ( num ) NEW_LINE total = zero_upto ( k - 1 ) NEW_LINE non_zero = 0 NEW_LINE for i in range ( len ( num ) ) : NEW_LINE INDENT if num [ i ] == '0' : NEW_LINE INDENT non_zero -= 1 NEW_LINE break NEW_LINE DEDENT non_zero += ( int_upto ( num [ i ] ) - 1 ) * ( pow ( 9 , k - 1 - i ) ) NEW_LINE DEDENT no , remaining , calculated_upto = 0 , 0 , 0 NEW_LINE for c in num : NEW_LINE INDENT no = no * 10 + ( int_upto ( c ) ) NEW_LINE if c != '0' : NEW_LINE INDENT calculated_upto = calculated_upto * 10 + 9 NEW_LINE DEDENT DEDENT remaining = no - calculated_upto NEW_LINE ans = zero_upto ( k - 1 ) + ( remaining - non_zero - 1 ) NEW_LINE return ans NEW_LINE DEDENT
def GFG ( a ) : NEW_LINE INDENT import math NEW_LINE if a < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT r = float ( a * math . sqrt ( 2 ) ) / 3 NEW_LINE h = ( 2 * a ) / 3 NEW_LINE V = float ( 3.14 * math . pow ( r , 2 ) * h ) NEW_LINE return V NEW_LINE DEDENT
def Prime ( n ) : NEW_LINE INDENT import math NEW_LINE if n == 1 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def CheckSumPrime ( str ) : NEW_LINE INDENT summ = 0 NEW_LINE for i in range ( 1 , len ( str ) ) : NEW_LINE INDENT summ += abs ( str [ i - 1 ] - str [ i ] ) NEW_LINE DEDENT if Prime ( summ ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT def Main ( ) : NEW_LINE INDENT num = 142 NEW_LINE str = '142' NEW_LINE if CheckSumPrime ( str ) : NEW_LINE INDENT print ( ' Prime ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' Not ▁ Prime ' ) NEW_LINE DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE class GFG ( float ) : NEW_LINE INDENT def sum ( n ) : NEW_LINE INDENT if n < 2 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 1 / n + ( sum ( n - 1 ) ) NEW_LINE DEDENT DEDENT DEDENT g = GFG ( ) NEW_LINE print ( ' % . 3 f ' % g . sum ( 8 ) ) NEW_LINE print ( ' % . 3 f ' % g . sum ( 10 ) , end = ' ▁ ' ) NEW_LINE DEDENT
def count_elements ( p , n ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT if p [ i - 1 ] > p [ i ] and p [ i ] > p [ i + 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif p [ i - 1 ] < p [ i ] and p [ i ] < p [ i + 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = sys . stdin . read ( ) . strip ( ) NEW_LINE b = sys . stdin . read ( ) . strip ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if a > b : NEW_LINE INDENT print ( ' > ' ) NEW_LINE DEDENT elif a == b : NEW_LINE INDENT print ( ' = ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' < ' ) NEW_LINE DEDENT DEDENT DEDENT
def find_volume ( l , b , h ) : NEW_LINE INDENT import math NEW_LINE volume = ( l * b * h ) / 2 NEW_LINE return volume NEW_LINE DEDENT
def practice462b ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE out = sys . stdout NEW_LINE s = f . readline ( ) . strip ( ) NEW_LINE n , k = int ( s . split ( ' ▁ ' ) [ 0 ] ) , int ( s . split ( ' ▁ ' ) [ 1 ] ) NEW_LINE cards = [ c462b ( ) for i in range ( 26 ) ] NEW_LINE s = f . readline ( ) . strip ( ) NEW_LINE for t in range ( n ) : NEW_LINE INDENT cards [ t ] [ ' A ' ] [ ' left ' ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT cards . sort ( ) NEW_LINE change = min ( cards [ 25 ] [ ' left ' ] , k - i ) NEW_LINE ans += change * change NEW_LINE cards [ 25 ] [ ' left ' ] -= change NEW_LINE i += change - 1 NEW_LINE DEDENT out . write ( ans ) NEW_LINE out . close ( ) NEW_LINE DEDENT
def p045 ( ) : NEW_LINE INDENT print ( eval ( ' p045 ( ) ' ) ) NEW_LINE i = 286 NEW_LINE j = 166 NEW_LINE k = 144 NEW_LINE while True : NEW_LINE INDENT triangle = int ( i ) * ( i + 1 ) / 2 NEW_LINE pentagon = int ( j ) * ( j * 3 - 1 ) / 2 NEW_LINE hexagon = int ( k ) * ( k * 2 - 1 ) NEW_LINE min = min ( min ( triangle , pentagon ) , hexagon ) NEW_LINE if min == triangle and min == pentagon and min == hexagon : NEW_LINE INDENT return str ( min ) NEW_LINE DEDENT if min == triangle : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if min == pentagon : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if min == hexagon : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT DEDENT
def max_primefactor_num ( N ) : NEW_LINE INDENT if N < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT arr = [ False ] * ( N + 1 ) NEW_LINE prod , res = 1 , 0 NEW_LINE for p in range ( 2 , p * N + 1 ) : NEW_LINE INDENT if arr [ p ] == False : NEW_LINE INDENT for i in range ( p * 2 , N + 1 , p ) : NEW_LINE INDENT arr [ i ] = True NEW_LINE DEDENT prod *= p NEW_LINE if prod > N : NEW_LINE INDENT return res NEW_LINE DEDENT res += 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def gf_max_element ( a , n ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE a = np . random . random ( n ) NEW_LINE b = np . zeros ( n ) NEW_LINE for i in np . arange ( 1 , 2 ** n + 1 ) : NEW_LINE INDENT if a % i == 0 : NEW_LINE INDENT b [ i ] = i NEW_LINE if X // i != i : NEW_LINE INDENT b [ i ] = X // i NEW_LINE DEDENT DEDENT DEDENT if len ( b ) != n : NEW_LINE INDENT return False NEW_LINE DEDENT a = a [ : n ] NEW_LINE b = np . fft . ifftn ( a ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if b [ i ] != a [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def test ( n ) : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE def subarray ( n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT for k in range ( i , j + 1 ) : NEW_LINE INDENT print ( arr [ k ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT def main ( ) : NEW_LINE INDENT print ( ' All ▁ Non - empty ▁ Subarrays ' ) NEW_LINE subarray ( len ( arr ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT tc = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT work : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT for n in range ( tc ) : NEW_LINE INDENT x = math . inf NEW_LINE y = math . inf NEW_LINE if n % 6 == 0 : NEW_LINE INDENT x = min ( x , n // 6 ) NEW_LINE y = max ( y , n // 6 ) NEW_LINE DEDENT if n % 6 == 2 and n != 2 : NEW_LINE INDENT x = min ( x , ( ( n // 6 ) - 1 ) + 2 ) NEW_LINE y = max ( y , ( ( n // 6 ) - 1 ) + 2 ) NEW_LINE DEDENT if n % 6 == 4 and n != 4 : NEW_LINE INDENT x = min ( x , n // 6 + 1 ) NEW_LINE y = max ( y , n // 6 + 1 ) NEW_LINE DEDENT if n % 4 == 0 : NEW_LINE INDENT x = min ( x , n // 4 ) NEW_LINE y = max ( y , n // 4 ) NEW_LINE DEDENT if n % 4 == 2 and n != 2 : NEW_LINE INDENT x = min ( x , ( n // 4 ) - 1 + 1 ) NEW_LINE y = max ( y , ( n // 4 ) - 1 + 1 ) NEW_LINE DEDENT if x != math . inf and y != math . inf : NEW_LINE INDENT print ( x , y ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' - 1' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def max_sum ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE arr . sort ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += ( arr [ i ] * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def max_sum ( a , n ) : NEW_LINE INDENT import numpy as np NEW_LINE a . sort ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( 0 , n - 1 , 2 ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT return sum NEW_LINE DEDENT
def find_answer ( n , arr ) : NEW_LINE INDENT import math NEW_LINE arr . sort ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( n // 2 ) : NEW_LINE INDENT sum += ( arr [ i ] + arr [ n - i - 1 ] ) ** 2 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def find_sum ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE sum = arr [ 0 ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if arr [ i ] != arr [ i + 1 ] : NEW_LINE INDENT sum = sum + arr [ i + 1 ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def GFG ( data ) : NEW_LINE INDENT import re NEW_LINE class GFG ( object ) : NEW_LINE INDENT data = None NEW_LINE left , right = None , None NEW_LINE def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = self . right = None NEW_LINE return self . data NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __setitem__ ( self , key , value ) : NEW_LINE INDENT pass NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __setitem__ ( self , key , value ) : NEW_LINE INDENT pass NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE
def GFG ( data ) : NEW_LINE INDENT import re NEW_LINE class GFG ( object ) : NEW_LINE INDENT data = None NEW_LINE left , right = None , None NEW_LINE def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = self . right = None NEW_LINE return self . data NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __setitem__ ( self , key , value ) : NEW_LINE INDENT pass NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __setitem__ ( self , key , value ) : NEW_LINE INDENT pass NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return key NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE
def main ( ) : NEW_LINE INDENT import numpy as np NEW_LINE s = np . array ( [ 0 ] * ( n + 1 ) ) NEW_LINE arr = np . zeros ( ( n + 1 ) ) NEW_LINE arr [ 0 ] = 2 NEW_LINE arr [ 1 ] = 1 NEW_LINE for i in range ( 2 , len ( arr ) ) : NEW_LINE INDENT arr [ i ] = arr [ i - 1 ] + arr [ i - 2 ] NEW_LINE DEDENT print ( arr [ n ] ) NEW_LINE DEDENT
def __gcd ( a , b ) : NEW_LINE INDENT import sys NEW_LINE if not a : NEW_LINE INDENT return b NEW_LINE DEDENT if not b : NEW_LINE INDENT return a NEW_LINE DEDENT if a == b : NEW_LINE INDENT return a NEW_LINE DEDENT if a > b : NEW_LINE INDENT return __gcd ( a - b , b ) NEW_LINE DEDENT return __gcd ( a , b - a ) NEW_LINE DEDENT def print_ratio ( a , b , c , d ) : NEW_LINE INDENT if b * c > a * d : NEW_LINE INDENT temp = c NEW_LINE c = d NEW_LINE d = c NEW_LINE temp = a NEW_LINE a = b NEW_LINE b = temp NEW_LINE DEDENT lcm = ( a * c ) // __gcd ( a , c ) NEW_LINE x = lcm // a NEW_LINE b *= x NEW_LINE y = lcm // c NEW_LINE d *= y NEW_LINE k = __gcd ( b , d ) NEW_LINE b //= k NEW_LINE d //= k NEW_LINE print ( ' % d : % d ' % ( b , d ) , end = ' ▁ ' ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT a , b , c , d = 4 , 3 , 2 , 2 NEW_LINE print_ratio ( a , b , c , d ) NEW_LINE DEDENT
def gf_maxsum_SIS ( arr , n ) : NEW_LINE INDENT max_sum = 0 NEW_LINE current_sum = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i - 1 ] < arr [ i ] : NEW_LINE INDENT current_sum = current_sum + arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT max_sum = max ( max_sum , current_sum ) NEW_LINE current_sum = arr [ i ] NEW_LINE DEDENT DEDENT return max ( max_sum , current_sum ) NEW_LINE DEDENT
def GCD ( a , b ) : NEW_LINE INDENT if not b : NEW_LINE INDENT return a NEW_LINE DEDENT return GCD ( b , a % b ) NEW_LINE DEDENT def findMaxSumUtil ( arr , n ) : NEW_LINE INDENT finalGCD = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT finalGCD = GCD ( arr [ i ] , finalGCD ) NEW_LINE DEDENT return finalGCD NEW_LINE DEDENT def findMaxSum ( arr , n ) : NEW_LINE INDENT maxElement = findMaxSumUtil ( arr , n ) NEW_LINE return ( maxElement * n ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 8 , 20 , 12 , 36 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxSum ( arr , n ) ) NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE def gcd ( a , b ) : NEW_LINE INDENT while b != 0 : NEW_LINE INDENT t = b NEW_LINE b = a % b NEW_LINE a = t NEW_LINE DEDENT return a NEW_LINE DEDENT def find_min_diff ( a , b , x , y ) : NEW_LINE INDENT g = gcd ( a , b ) NEW_LINE diff = abs ( x - y ) % g NEW_LINE return min ( diff , g - diff ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT a , b , x , y = 20 , 52 , 5 , 7 NEW_LINE print ( find_min_diff ( a , b , x , y ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT X , Y , W , H , N = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE count = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT x = sys . stdin . read ( ) NEW_LINE y = sys . stdin . read ( ) NEW_LINE if ( X <= x <= X + W ) and ( Y <= y <= Y + H ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT DEDENT
def divisibleby37 ( n1 ) : NEW_LINE INDENT l = len ( n1 ) NEW_LINE if not n1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if l % 3 == 1 : NEW_LINE INDENT n1 = '00' + n1 NEW_LINE l += 2 NEW_LINE DEDENT elif l % 3 == 2 : NEW_LINE INDENT n1 = '0' + n1 NEW_LINE l += 1 NEW_LINE DEDENT n = n1 . replace ( ' ▁ ' , ' ' ) NEW_LINE g_sum = 0 NEW_LINE while l != 0 : NEW_LINE INDENT if l == 2 : NEW_LINE INDENT gvalue = ( ord ( n [ ( l - 2 ) ] ) - 48 ) * 100 + ( ord ( n [ ( l - 1 ) ] ) - 48 ) * 10 NEW_LINE DEDENT elif l == 1 : NEW_LINE INDENT gvalue = ( ord ( n [ ( l - 1 ) ] ) - 48 ) * 100 NEW_LINE DEDENT else : NEW_LINE INDENT gvalue = ( ord ( n [ ( l - 3 ) ] ) - 48 ) * 100 + ( ord ( n [ ( l - 2 ) ] ) - 48 ) * 10 + ( ord ( n [ ( l - 1 ) ] ) - 48 ) * 1 NEW_LINE DEDENT l = l - 3 NEW_LINE g_sum = g_sum + gvalue NEW_LINE DEDENT if g_sum >= 1000 : NEW_LINE INDENT return ( divisibleby37 ( str ( g_sum ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( 1 if g_sum % 37 == 0 else 0 ) NEW_LINE DEDENT DEDENT
def A111 ( ) : NEW_LINE INDENT import sys NEW_LINE import csv NEW_LINE class A111 ( csv . Writer ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdout . write ( ' ' ) NEW_LINE self . csv . __init__ ( self ) NEW_LINE self . csv . seek ( 0 ) NEW_LINE self . csv . seek ( 0 ) NEW_LINE self . csv . truncate ( 0 ) NEW_LINE self . csv . seek ( 0 ) NEW_LINE self . csv . truncate ( 0 ) NEW_LINE self . csv . seek ( 0 ) NEW_LINE self . csv . truncate ( 0 ) NEW_LINE DEDENT def sort ( self ) : NEW_LINE INDENT l = [ ] NEW_LINE for i in self . csv : NEW_LINE INDENT l . append ( i ) NEW_LINE DEDENT self . csv . sort ( l ) NEW_LINE for i in self . a : NEW_LINE INDENT a . append ( self . csv [ i ] ) NEW_LINE DEDENT DEDENT DEDENT class A111 ( list ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . csv . seek ( 0 ) NEW_LINE self . csv . truncate ( 0 ) NEW_LINE DEDENT def sort ( self ) : NEW_LINE INDENT l = [ ] NEW_LINE for i in self . csv : NEW_LINE INDENT l . append ( self . csv [ i ] ) NEW_LINE DEDENT self . csv . sort ( l ) NEW_LINE for i in self . a : NEW_LINE INDENT l . append ( self . csv [ i ] ) NEW_LINE DEDENT DEDENT def read ( self ) : NEW_LINE INDENT return int ( self . csv . read ( self . csv . truncate ( 0 ) ) ) NEW_LINE DEDENT def read_array ( self , n ) : NEW_LINE INDENT a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( self . csv [ i ] ) NEW_LINE DEDENT return a NEW_LINE DEDENT def long ( self ) : NEW_LINE INDENT return int ( self . csv . read ( 0 ) ) NEW_LINE DEDENT DEDENT return A111 NEW_LINE DEDENT
def lcs ( X , Y , m , n ) : NEW_LINE INDENT L = np . zeros ( ( m + 1 , n + 1 ) ) NEW_LINE for i in range ( 0 , m + 1 ) : NEW_LINE INDENT for j in range ( 0 , n + 1 ) : NEW_LINE INDENT if i == 0 or j == 0 : NEW_LINE INDENT L [ i ] [ j ] = 0 NEW_LINE DEDENT elif X [ i - 1 ] == Y [ j - 1 ] : NEW_LINE INDENT L [ i ] [ j ] = L [ i - 1 ] [ j - 1 ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] = max ( L [ i - 1 ] [ j ] , L [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT return L [ m ] [ n ] NEW_LINE def find_min_cost ( X , Y , cost_x , cost_y ) : NEW_LINE INDENT m = len ( X ) NEW_LINE n = len ( Y ) NEW_LINE global len_lcs NEW_LINE len_lcs = lcs ( X , Y , m , n ) NEW_LINE return cost_x * ( m - len_lcs ) + cost_y * ( n - len_lcs ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT X = ' ef ' NEW_LINE Y = ' gh ' NEW_LINE print ( ' Minimum ▁ Cost ▁ to ▁ make ▁ two ▁ strings ▁ ' ' identical ▁ is ▁ = ▁ % d ' % find_min_cost ( X , Y , 10 , 20 ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def number_of_squares ( base ) : NEW_LINE INDENT base = ( base - 2 ) NEW_LINE base = base // 2 NEW_LINE return base * ( base + 1 ) // 2 NEW_LINE DEDENT
def rmsValue ( arr , n ) : NEW_LINE INDENT square = 0 NEW_LINE mean = 0 NEW_LINE root = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT square += pow ( arr [ i ] , 2 ) NEW_LINE DEDENT mean = ( square / float ( n ) ) NEW_LINE root = float ( math . sqrt ( mean ) ) NEW_LINE return root NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE M , N = np . mgrid [ 0 : 2 ] NEW_LINE P = np . arange ( M ) NEW_LINE P . sort ( ) NEW_LINE dp = np . zeros ( M + 10001 ) NEW_LINE dp [ 0 ] = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT C = np . random . randint ( 0 , M ) NEW_LINE E = np . random . randint ( 0 , N ) NEW_LINE for j in range ( len ( dp ) - 1 , - C , - 1 ) : NEW_LINE INDENT if dp [ j - C ] == np . inf : NEW_LINE INDENT continue NEW_LINE DEDENT dp [ j ] = min ( dp [ j ] , dp [ j - C ] + E ) NEW_LINE DEDENT DEDENT sum = np . cumsum ( dp ) NEW_LINE for i in range ( M ) : NEW_LINE INDENT sum [ i + 1 ] = sum [ i ] + P [ M - 1 - i ] NEW_LINE DEDENT for i in range ( M + 1 , len ( sum ) ) : NEW_LINE INDENT sum [ i ] = sum [ M ] NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( len ( sum ) ) : NEW_LINE INDENT if dp [ i ] == np . inf : NEW_LINE INDENT continue NEW_LINE DEDENT ans = max ( ans , sum [ i ] - dp [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT n = n + 1 NEW_LINE DEDENT x = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT x . append ( i ) NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( " node ▁ % d : ▁ key ▁ = ▁ % d , ▁ " % ( i , x [ i ] ) ) NEW_LINE if i // 2 > 0 : NEW_LINE INDENT print ( " parent ▁ key ▁ = ▁ % d , ▁ " % ( x [ i // 2 ] ) ) NEW_LINE DEDENT if 2 * i <= n : NEW_LINE INDENT print ( " left ▁ key ▁ = ▁ % d , ▁ " % ( x [ 2 * i ] ) ) NEW_LINE DEDENT if ( 2 * i + 1 ) <= n : NEW_LINE INDENT print ( " right ▁ key ▁ = ▁ % d , ▁ " % ( x [ 2 * i + 1 ] ) ) NEW_LINE DEDENT print ( " \n " , end = " " ) NEW_LINE DEDENT DEDENT
def max_sum ( arr ) : NEW_LINE INDENT dp = np . zeros ( ( n + 1 , 3 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT m1 , m2 , m3 = 0 , 0 , 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT if ( j / ( m / 3 ) ) == 0 : NEW_LINE INDENT m1 = max ( m1 , arr [ i ] [ j ] ) NEW_LINE DEDENT elif ( j / ( m / 3 ) ) == 1 : NEW_LINE INDENT m2 = max ( m2 , arr [ i ] [ j ] ) NEW_LINE DEDENT elif ( j / ( m / 3 ) ) == 2 : NEW_LINE INDENT m3 = max ( m3 , arr [ i ] [ j ] ) NEW_LINE DEDENT DEDENT dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 2 ] ) + m1 NEW_LINE dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 2 ] ) + m2 NEW_LINE dp [ i + 1 ] [ 2 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) + m3 NEW_LINE DEDENT print ( max ( max ( dp [ n ] [ 0 ] , dp [ n ] [ 1 ] ) , dp [ n ] [ 2 ] ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def GFG ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) : NEW_LINE INDENT x5 = max ( x1 , x3 ) NEW_LINE y5 = max ( y1 , y3 ) NEW_LINE x6 = min ( x2 , x4 ) NEW_LINE y6 = min ( y2 , y4 ) NEW_LINE if x5 > x6 or y5 > y6 : NEW_LINE INDENT print ( " No ▁ intersection " ) NEW_LINE return NEW_LINE DEDENT print ( " ( % d , ▁ % d ) ▁ " % ( x5 , y5 ) , end = " ▁ " ) NEW_LINE print ( " ( % d , ▁ % d ) ▁ " % ( x6 , y6 ) , end = " ▁ " ) NEW_LINE x7 = x5 NEW_LINE y7 = y6 NEW_LINE print ( " ( % d , ▁ % d ) ▁ " % ( x7 , y7 ) , end = " ▁ " ) NEW_LINE x8 = x6 NEW_LINE y8 = y5 NEW_LINE print ( " ( % d , ▁ % d ) ▁ " % ( x8 , y8 ) , end = " ▁ " ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE sys . stdin . readline ( ) NEW_LINE s = sys . stdin . readline ( ) NEW_LINE sitting_to_standing = 0 NEW_LINE sitting , standing = 0 , 0 NEW_LINE for c in s : NEW_LINE INDENT if c == ' x ' : NEW_LINE INDENT sitting += 1 NEW_LINE DEDENT else : NEW_LINE INDENT standing += 1 NEW_LINE DEDENT DEDENT sitting_to_standing = ( sitting - standing ) // 2 NEW_LINE print ( abs ( sitting_to_standing ) ) NEW_LINE for c in s : NEW_LINE INDENT if c == ' x ' and sitting_to_standing > 0 : NEW_LINE INDENT print ( ' X ' , end = ' ▁ ' ) NEW_LINE sitting_to_standing -= 1 NEW_LINE DEDENT elif c == ' X ' and sitting_to_standing < 0 : NEW_LINE INDENT print ( ' x ' , end = ' ▁ ' ) NEW_LINE sitting_to_standing += 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( c , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT print ( ' Error ▁ in ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ of ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ % d ▁ of ▁ % d ▁ % d ▁ % s ' % ( sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write ( s ) , sys . stderr . write
def _import ( arg ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import io NEW_LINE import codecs NEW_LINE class class1 ( object ) : NEW_LINE INDENT class FastReader ( io . BufferedReader ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stream = io . BufferedReader ( ) NEW_LINE self . stream = None NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT while self . stream is None or not self . stream . eof : NEW_LINE INDENT try : NEW_LINE INDENT self . stream = stream . readline ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return self . stream . readline ( ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = " " NEW_LINE try : NEW_LINE INDENT data = self . stream . readline ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT def main ( self , arg ) : NEW_LINE INDENT input = sys . stdin . readline ( ) NEW_LINE n = input . find ( " ▁ " ) NEW_LINE d = input . find ( " ▁ " ) NEW_LINE e = input . find ( " ▁ " ) NEW_LINE ans = n NEW_LINE for i in range ( 0 , i * 5 * e <= n ) : NEW_LINE INDENT ans = min ( ans , ( n - i * 5 * e ) % d ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT return class1 NEW_LINE DEDENT
def knapSack ( W , wt , val , n ) : NEW_LINE INDENT maxratio = float ( 0 ) NEW_LINE maxindex = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( val [ i ] / wt [ i ] ) > maxratio : NEW_LINE INDENT maxratio = ( val [ i ] / wt [ i ] ) NEW_LINE maxindex = i NEW_LINE DEDENT DEDENT return ( W * maxratio ) NEW_LINE DEDENT
def alternate ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE v1 = [ ] NEW_LINE v2 = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT v1 . append ( arr [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT v2 . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT index , i , j = 0 , 0 , 0 NEW_LINE flag = False NEW_LINE if arr [ 0 ] % 2 == 0 : NEW_LINE INDENT flag = True NEW_LINE DEDENT while index < n : NEW_LINE INDENT if flag == True : NEW_LINE INDENT arr [ index ] = int ( v1 [ i ] ) NEW_LINE i += 1 NEW_LINE index += 1 NEW_LINE flag = not flag NEW_LINE DEDENT else : NEW_LINE INDENT arr [ index ] = int ( v2 [ j ] ) NEW_LINE j += 1 NEW_LINE index += 1 NEW_LINE flag = not flag NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT A = int ( sys . stdin . read ( ) ) NEW_LINE B = int ( sys . stdin . read ( ) ) NEW_LINE C = int ( sys . stdin . read ( ) ) NEW_LINE if A <= C and B >= C : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT except ValueError : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def dec_to_binary ( n ) : NEW_LINE INDENT binary_num = [ ] NEW_LINE i = 0 NEW_LINE while n > 0 : NEW_LINE INDENT binary_num . append ( n % 2 ) NEW_LINE n = n // 2 NEW_LINE i += 1 NEW_LINE DEDENT binary = " " NEW_LINE for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT binary += str ( binary_num [ j ] ) NEW_LINE DEDENT return binary NEW_LINE DEDENT def count_freq ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE res = 0 NEW_LINE for i in range ( 0 , N - M + 1 ) : NEW_LINE INDENT j = 0 NEW_LINE for j in range ( M ) : NEW_LINE INDENT if txt [ i + j ] != pat [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if j == M : NEW_LINE INDENT res += 1 NEW_LINE j = 0 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def find_occurrence ( arr , n , pattern ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT binary = dec_to_binary ( arr [ i ] ) NEW_LINE print ( count_freq ( pattern , binary ) , end = ' ▁ ' ) NEW_LINE DEDENT return ' ' . join ( find_occurrence ( arr , n , pattern ) ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 5 , 106 , 7 , 8 ] NEW_LINE pattern = '10' NEW_LINE n = len ( arr ) NEW_LINE find_occurrence ( arr , n , pattern ) NEW_LINE DEDENT return ' ' . join ( find_occurrence ( arr , n , pattern ) ) NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT x = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x += ( arr [ i ] & 1 ) NEW_LINE DEDENT print ( min ( x , n - x ) ) NEW_LINE DEDENT
def find_kth_largest ( nums , k ) : NEW_LINE INDENT import random NEW_LINE def find_kth_largest ( nums , k ) : NEW_LINE INDENT random . shuffle ( nums ) NEW_LINE k = len ( nums ) - k NEW_LINE lo = 0 NEW_LINE hi = len ( nums ) - 1 NEW_LINE while lo < hi : NEW_LINE INDENT ( lo , hi ) = partition ( nums , lo , hi ) NEW_LINE if j < k : NEW_LINE INDENT lo = j + 1 NEW_LINE DEDENT elif j > k : NEW_LINE INDENT hi = j - 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return nums [ k ] NEW_LINE DEDENT def partition ( a , lo , hi ) : NEW_LINE INDENT i = lo NEW_LINE j = hi + 1 NEW_LINE while True : NEW_LINE INDENT while i < hi and less ( a [ ++ i ] , a [ lo ] ) : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT while j > lo and less ( a [ lo ] , a [ -- j ] ) : NEW_LINE INDENT if i >= j : NEW_LINE INDENT break NEW_LINE DEDENT exch ( a , i , j ) NEW_LINE DEDENT exch ( a , lo , j ) NEW_LINE return j NEW_LINE DEDENT DEDENT def exch ( a , i , j ) : NEW_LINE INDENT tmp = a [ i ] NEW_LINE a [ i ] = a [ j ] NEW_LINE a [ j ] = tmp NEW_LINE DEDENT def less ( v , w ) : NEW_LINE INDENT return v < w NEW_LINE DEDENT def shuffle ( a ) : NEW_LINE INDENT random . seed ( ) NEW_LINE for ind in range ( 1 , len ( a ) ) : NEW_LINE INDENT r = random . randint ( ind + 1 , len ( a ) ) NEW_LINE exch ( a , ind , r ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT sobj = Solution ( ) NEW_LINE nums = [ 3 , 2 , 1 , 5 , 6 , 4 ] NEW_LINE k = 2 NEW_LINE out = sobj . find_kth_largest ( nums , k ) NEW_LINE print ( out ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT temp = n NEW_LINE while n > 0 : NEW_LINE INDENT k = n % 10 NEW_LINE if temp % k == 0 : NEW_LINE INDENT return " YES " NEW_LINE DEDENT n //= 10 NEW_LINE DEDENT return " NO " NEW_LINE DEDENT
def is_divisible ( n ) : NEW_LINE INDENT temp = n NEW_LINE sum = 0 NEW_LINE while n != 0 : NEW_LINE INDENT k = int ( n ) % 10 NEW_LINE sum += k NEW_LINE n //= 10 NEW_LINE DEDENT if temp % sum == 0 : NEW_LINE INDENT return " YES " NEW_LINE DEDENT return " NO " NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE s = list ( sys . stdin . readlines ( ) ) NEW_LINE a = s [ 0 ] NEW_LINE b = s [ 1 ] NEW_LINE answer = " " NEW_LINE naa = len ( a ) NEW_LINE nab = len ( b ) NEW_LINE i = 0 NEW_LINE if naa == nab : NEW_LINE INDENT if a == b : NEW_LINE INDENT answer = " EQUAL " NEW_LINE DEDENT else : NEW_LINE INDENT for q in a : NEW_LINE INDENT l = ord ( b [ i ] ) - ord ( ' a ' ) NEW_LINE if q > l : NEW_LINE INDENT answer = " GREATER " NEW_LINE break NEW_LINE DEDENT elif q < l : NEW_LINE INDENT answer = " LESS " NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT elif naa > nab : NEW_LINE INDENT answer = " GREATER " NEW_LINE DEDENT elif naa < nab : NEW_LINE INDENT answer = " LESS " NEW_LINE DEDENT print ( answer ) NEW_LINE DEDENT
def calculate_area_sum ( l , b ) : NEW_LINE INDENT size = 1 NEW_LINE max_size = min ( l , b ) NEW_LINE total_area = 0 NEW_LINE for i in range ( 1 , max_size + 1 ) : NEW_LINE INDENT total_squares = ( l - size + 1 ) * ( b - size + 1 ) NEW_LINE area = total_squares * size * size NEW_LINE total_area += area NEW_LINE size += 1 NEW_LINE DEDENT return total_area NEW_LINE DEDENT
def gf_arrange ( N ) : NEW_LINE INDENT if N == 1 : NEW_LINE INDENT print ( '1' ) NEW_LINE return NEW_LINE DEDENT if N == 2 or N == 3 : NEW_LINE INDENT print ( ' - 1' ) NEW_LINE return NEW_LINE DEDENT even , odd = - 1 , - 1 NEW_LINE if N % 2 == 0 : NEW_LINE INDENT even = N NEW_LINE odd = N - 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd = N NEW_LINE even = N - 1 NEW_LINE DEDENT while odd >= 1 : NEW_LINE INDENT print ( odd , end = ' ▁ ' ) NEW_LINE odd = odd - 2 NEW_LINE DEDENT while even >= 2 : NEW_LINE INDENT print ( even , end = ' ▁ ' ) NEW_LINE even = even - 2 NEW_LINE DEDENT DEDENT
def find_min_equal_sums ( a , N ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT sum1 , sum2 = 0 , 0 NEW_LINE min = sys . maxsize NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum1 += a [ i ] NEW_LINE sum2 = sum - sum1 NEW_LINE if abs ( sum1 - sum2 ) < min : NEW_LINE INDENT min = abs ( sum1 - sum2 ) NEW_LINE DEDENT if min == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return min NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT t = 0 NEW_LINE DEDENT for i in range ( t ) : NEW_LINE INDENT n = sys . stdin . read ( ) NEW_LINE s = [ ] NEW_LINE mod = n % 3 NEW_LINE if mod == 1 : NEW_LINE INDENT for j in range ( n // 3 ) : NEW_LINE INDENT s . append ( 12 ) NEW_LINE DEDENT s . append ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT for j in range ( n // 3 ) : NEW_LINE INDENT s . append ( 21 ) NEW_LINE DEDENT if mod == 2 : NEW_LINE INDENT s . append ( 2 ) NEW_LINE DEDENT DEDENT print ( ' ' . join ( s ) ) NEW_LINE DEDENT DEDENT
def find_optimal_solution ( a , N ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE a = np . asarray ( a ) NEW_LINE points = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT points += a [ i ] * i NEW_LINE DEDENT return points NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import csv NEW_LINE import math NEW_LINE import numpy . fft as np NEW_LINE import numpy . random NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import random NEW_LINE import numpy . testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE np . testing = np . testing NEW_LINE np . testing = np . testing NEW_LINE np . testing = np . testing NEW_LINE np . testing . as np . testing = np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing . as_testing NEW_LINE np . testing . as np . testing = np . np . testing . as_testing NEW_LINE np . testing . as np . testing : NEW_LINE INDENT np . testing . as_testing = np . testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . random NEW_LINE class Practice ( np . array ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT np . random . seed ( 0 ) NEW_LINE self . n = np . random . randint ( 0 , len ( self . n ) ) NEW_LINE self . m = np . random . randint ( 0 , len ( self . m ) ) NEW_LINE self . a = np . array ( self . n ) NEW_LINE for i in range ( self . n ) : NEW_LINE INDENT self . a [ i ] = np . random . randint ( 0 , len ( self . a ) ) NEW_LINE DEDENT if self . n > self . m : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE continue NEW_LINE DEDENT self . a . sort ( ) NEW_LINE ans = self . a [ self . n - 1 ] NEW_LINE for i in range ( self . n - 1 , - 1 , - 1 ) : NEW_LINE INDENT ans += 1 NEW_LINE if i > 0 : NEW_LINE INDENT ans += self . a [ i ] NEW_LINE DEDENT DEDENT if ans <= self . m : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def GFG ( a ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( len ( a ) ) : NEW_LINE INDENT for j in range ( len ( a ) ) : NEW_LINE INDENT if a [ i ] < a [ j ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def pre5 ( args ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from string import encode NEW_LINE from string import strip NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import join NEW_LINE if not isinstance ( args , str ) : NEW_LINE INDENT args = [ args ] NEW_LINE DEDENT else : NEW_LINE INDENT args = list ( args ) NEW_LINE DEDENT if args : NEW_LINE INDENT out = [ ] NEW_LINE DEDENT else : NEW_LINE INDENT out = None NEW_LINE DEDENT for arg in args : NEW_LINE INDENT if not isinstance ( arg , str ) : NEW_LINE INDENT out . append ( arg ) NEW_LINE DEDENT else : NEW_LINE INDENT out . append ( str ( arg ) ) NEW_LINE DEDENT DEDENT return out NEW_LINE DEDENT
def main1 ( ) : NEW_LINE INDENT import sys NEW_LINE arr = [ ] NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT for j in range ( 4 ) : NEW_LINE INDENT arr [ i ] [ j ] = sys . stdin . read ( 4 ) NEW_LINE DEDENT DEDENT if arr [ 0 ] [ 3 ] == 1 : NEW_LINE INDENT if arr [ 0 ] [ 1 ] == 1 or arr [ 0 ] [ 2 ] == 1 or arr [ 0 ] [ 0 ] == 1 or arr [ 1 ] [ 0 ] == 1 or arr [ 2 ] [ 1 ] == 1 or arr [ 3 ] [ 2 ] == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT if arr [ 1 ] [ 3 ] == 1 : NEW_LINE INDENT if arr [ 1 ] [ 1 ] == 1 or arr [ 1 ] [ 2 ] == 1 or arr [ 1 ] [ 0 ] == 1 or arr [ 2 ] [ 0 ] == 1 or arr [ 3 ] [ 1 ] == 1 or arr [ 0 ] [ 2 ] == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT if arr [ 2 ] [ 3 ] == 1 : NEW_LINE INDENT if arr [ 2 ] [ 1 ] == 1 or arr [ 2 ] [ 2 ] == 1 or arr [ 2 ] [ 0 ] == 1 or arr [ 3 ] [ 0 ] == 1 or arr [ 0 ] [ 1 ] == 1 or arr [ 1 ] [ 2 ] == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT if arr [ 3 ] [ 3 ] == 1 : NEW_LINE INDENT if arr [ 3 ] [ 1 ] == 1 or arr [ 3 ] [ 2 ] == 1 or arr [ 3 ] [ 0 ] == 1 or arr [ 0 ] [ 0 ] == 1 or arr [ 1 ] [ 1 ] == 1 or arr [ 2 ] [ 2 ] == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( " NO " ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT N = 10000 NEW_LINE MOD = 1000000007 NEW_LINE F = [ ] NEW_LINE def precompute ( ) : NEW_LINE INDENT F . append ( 2 ) NEW_LINE F . append ( 3 ) NEW_LINE F . append ( 4 ) NEW_LINE for i in range ( 4 , N ) : NEW_LINE INDENT F [ i ] = ( F [ i - 1 ] + F [ i - 2 ] ) % MOD NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n = 8 NEW_LINE precompute ( ) NEW_LINE print ( F [ n ] ) NEW_LINE DEDENT return ' ' . join ( F ) NEW_LINE DEDENT
def main ( z ) : NEW_LINE INDENT global i , j , k , c , t , b NEW_LINE s = [ ] NEW_LINE for t in range ( len ( z ) ) : NEW_LINE INDENT print ( b ) NEW_LINE for b in range ( i = 0 , t ) : NEW_LINE INDENT for c in range ( i + 1 , t ) : NEW_LINE INDENT b += 1 if c == t else 0 NEW_LINE for k in range ( 0 , i , j ) : NEW_LINE INDENT c += k NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def ceil_index ( A , l , r , key ) : NEW_LINE INDENT import sys NEW_LINE class LIS ( int ) : NEW_LINE INDENT def ceil_index ( A , l , r , key ) : NEW_LINE INDENT while r - l > 1 : NEW_LINE INDENT m = l + ( r - l ) // 2 NEW_LINE if A [ m ] >= key : NEW_LINE INDENT r = m NEW_LINE DEDENT else : NEW_LINE INDENT l = m NEW_LINE DEDENT DEDENT return r NEW_LINE DEDENT def longest_increasing_subsequence_length ( A , size ) : NEW_LINE INDENT tail_table = [ ] NEW_LINE tail_table . append ( A [ 0 ] ) NEW_LINE size = 1 NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT if A [ i ] < tail_table [ 0 ] : NEW_LINE INDENT tail_table [ 0 ] = A [ i ] NEW_LINE DEDENT elif A [ i ] > tail_table [ size - 1 ] : NEW_LINE INDENT tail_table [ size - 1 ] = A [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT tail_table [ ceil_index ( tail_table , - 1 , size - 1 , A [ i ] ) ] = A [ i ] NEW_LINE DEDENT DEDENT return size NEW_LINE DEDENT DEDENT A = [ 2 , 5 , 3 , 7 , 11 , 8 , 10 , 13 , 6 ] NEW_LINE n = len ( A ) NEW_LINE print ( ' Length ▁ of ▁ Longest ▁ Increasing ▁ Subsequence ▁ is ▁ % d ' % longest_increasing_subsequence_length ( A , n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin . read ( ) NEW_LINE N = len ( s ) NEW_LINE ban = [ s [ i ] for i in range ( N ) ] NEW_LINE ban . sort ( ) NEW_LINE print ( ( ban [ N - 1 ] - ban [ 0 ] + 1 ) / 2 ) NEW_LINE DEDENT
def p074 ( ) : NEW_LINE INDENT import math NEW_LINE import re NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math = math NEW_LINE DEDENT
def colour_visible ( height , colour , K ) : NEW_LINE INDENT import numpy as np NEW_LINE arr = np . zeros ( K + 1 ) NEW_LINE visible = 0 NEW_LINE max = height [ K - 1 ] NEW_LINE arr [ colour [ K - 1 ] ] = 1 NEW_LINE for i in range ( K - 2 , - 1 , - 1 ) : NEW_LINE INDENT if height [ i ] > max : NEW_LINE INDENT max = height [ i ] NEW_LINE arr [ colour [ i ] ] = 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , K + 1 ) : NEW_LINE INDENT if arr [ i ] == 1 : NEW_LINE INDENT visible += 1 NEW_LINE DEDENT DEDENT return visible NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT i = math . log ( n ) / math . log ( 8 ) NEW_LINE return ( i - math . floor ( i ) < 0.000001 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE for t in range ( sys . maxsize , 0 , - 1 ) : NEW_LINE INDENT a = sys . maxsize NEW_LINE b = sys . maxsize NEW_LINE res = min ( ( a + b ) // 4 , min ( a , b ) ) NEW_LINE print ( res ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . maxes = [ ] NEW_LINE DEDENT def go ( self ) : NEW_LINE INDENT self . maxes . append ( 0 ) NEW_LINE with open ( self . path ) as f : NEW_LINE INDENT while True : NEW_LINE INDENT n = len ( f . read ( 1 ) ) NEW_LINE m = len ( f . read ( 1 ) ) NEW_LINE if n == 0 and m == 0 : NEW_LINE INDENT break NEW_LINE DEDENT points = [ 0 ] * n NEW_LINE max = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT points [ j ] += f . read ( 1 ) NEW_LINE if i == m - 1 and max < points [ j ] : NEW_LINE INDENT max = points [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT self . maxes . append ( max ) NEW_LINE DEDENT for max in self . maxes : NEW_LINE INDENT print ( max ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE t = len ( sys . argv ) NEW_LINE while t > 0 : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE l = [ ] NEW_LINE r = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT l . append ( sys . stdin . read ( n ) ) NEW_LINE r . append ( sys . stdin . read ( n ) ) NEW_LINE DEDENT s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s < r [ i ] : NEW_LINE INDENT if l [ i ] > s : NEW_LINE INDENT s = l [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT s += 1 NEW_LINE DEDENT DEDENT sys . stdout . write ( ' % d ▁ ' % s ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % 0 ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT
def count_ways ( n , m ) : NEW_LINE INDENT import sys NEW_LINE count = [ 0 ] * ( n + 1 ) NEW_LINE count [ 0 ] = 0 NEW_LINE i = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if i > m : NEW_LINE INDENT count [ i ] = count [ i - 1 ] + count [ i - m ] NEW_LINE DEDENT elif i < m : NEW_LINE INDENT count [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT count [ i ] = 2 NEW_LINE DEDENT DEDENT return count [ n ] NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT print ( n + n // 2 ) NEW_LINE for i in range ( 2 , n + 1 , 2 ) : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT for i in range ( 1 , n + 1 , 2 ) : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT for i in range ( 2 , n + 1 , 2 ) : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE bfr = sys . stdin NEW_LINE data = " " NEW_LINE try : NEW_LINE INDENT data = bfr . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT res = 0 NEW_LINE han = 0 NEW_LINE ni_beki = 1 NEW_LINE ruijyo = 0 NEW_LINE if data is " " : NEW_LINE INDENT sys . exit ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT res = int ( data ) NEW_LINE for i in range ( 1 ) : NEW_LINE INDENT han = ( res >> ruijyo ) % 2 NEW_LINE if han == 0 : NEW_LINE INDENT res = ( res % ni_beki ) + 1 NEW_LINE i = 1 NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT ni_beki = ni_beki * 2 NEW_LINE ruijyo += 1 NEW_LINE DEDENT DEDENT print ( res ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import re NEW_LINE s = ' ' NEW_LINE while '0B ' in s or '1B ' in s : NEW_LINE INDENT s = s . replace ( '0B ' , ' ' ) NEW_LINE s = s . replace ( '1B ' , ' ' ) NEW_LINE DEDENT s = s . replace ( ' B ' , ' ' ) NEW_LINE print ( s ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import list NEW_LINE import string NEW_LINE import int NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT string NEW_LINE DEDENT
def GFG ( ind , cnt , last , a , n , k , dp ) : NEW_LINE INDENT import numpy as np NEW_LINE MAX = 100 NEW_LINE def recur ( ind , cnt , last , a , n , k , dp ) : NEW_LINE INDENT if cnt == k : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ind == n : NEW_LINE INDENT return int ( - 1e9 ) NEW_LINE DEDENT if dp [ ind ] [ cnt ] != - 1 : NEW_LINE INDENT return dp [ ind ] [ cnt ] NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( ind , n ) : NEW_LINE INDENT if cnt % 2 == 0 : NEW_LINE INDENT ans = max ( ans , recur ( i + 1 , cnt + 1 , i , a , n , k , dp ) ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = max ( ans , __gcd ( a [ last ] , a [ i ] ) + recur ( i + 1 , cnt + 1 , 0 , a , n , k , dp ) ) NEW_LINE DEDENT DEDENT return dp [ ind ] [ cnt ] = ans NEW_LINE DEDENT def __gcd ( a , b ) : NEW_LINE INDENT if not b : NEW_LINE INDENT return a NEW_LINE DEDENT return __gcd ( b , a % b ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT a = [ 4 , 5 , 3 , 7 , 8 , 10 , 9 , 8 ] NEW_LINE n = len ( a ) NEW_LINE k = 4 NEW_LINE dp = np . zeros ( ( n , MAX ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( MAX ) : NEW_LINE INDENT dp [ i ] [ j ] = - 1 NEW_LINE DEDENT DEDENT print ( recur ( 0 , 0 , 0 , a , n , k , dp ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE parts = parts . split ( ' ▁ ' ) NEW_LINE arr = [ ] NEW_LINE non_int = 0 NEW_LINE sum_before , sum = 0 , 0 NEW_LINE for i in range ( 2 * n ) : NEW_LINE INDENT num = float ( parts [ i ] ) NEW_LINE sum_before += num NEW_LINE if num != math . floor ( num ) : NEW_LINE INDENT non_int += 1 NEW_LINE DEDENT sum += math . floor ( num ) NEW_LINE arr . append ( num ) NEW_LINE DEDENT max_sum = min ( n , non_int ) + sum NEW_LINE min_sum = max ( 0 , non_int - n ) + sum NEW_LINE if min_sum > sum_before : NEW_LINE INDENT ans = ( min_sum - sum_before ) NEW_LINE DEDENT elif max_sum < sum_before : NEW_LINE INDENT ans = ( sum_before - max_sum ) NEW_LINE DEDENT else : NEW_LINE INDENT x = sum_before - math . floor ( sum_before ) NEW_LINE ans = min ( 1 - x , x ) NEW_LINE DEDENT sys . stdout . write ( ' % .3f \n ' % ans ) NEW_LINE DEDENT
def equivalent_base4 ( bin ) : NEW_LINE INDENT if bin == '00' : NEW_LINE INDENT return 0 NEW_LINE DEDENT if bin == '01' : NEW_LINE INDENT return 1 NEW_LINE DEDENT if bin == '10' : NEW_LINE INDENT return 2 NEW_LINE DEDENT return 3 NEW_LINE DEDENT def is_divisible_by5 ( bin ) : NEW_LINE INDENT l = len ( bin ) NEW_LINE if l % 2 : NEW_LINE INDENT bin = '0' + bin NEW_LINE DEDENT odd_sum , even_sum = 0 , 0 NEW_LINE is_odd_digit = 1 NEW_LINE for i in range ( 0 , len ( bin ) , 2 ) : NEW_LINE INDENT if is_odd_digit != 0 : NEW_LINE INDENT odd_sum += equivalent_base4 ( bin [ i : i + 2 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT even_sum += equivalent_base4 ( bin [ i : i + 2 ] ) NEW_LINE DEDENT is_odd_digit ^= 1 NEW_LINE DEDENT if abs ( odd_sum - even_sum ) % 5 == 0 : NEW_LINE INDENT return ' Yes ' NEW_LINE DEDENT return ' No ' NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import os NEW_LINE import re NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import os NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE d = { } NEW_LINE import string NEW_LINE import string NEW_LINE import int NEW_LINE d = { } NEW_LINE import string NEW_LINE d [ ' a ' ] = 0 NEW_LINE d [ ' b ' ] = 0 NEW_LINE d [ ' c ' ] = 0 NEW_LINE d [ ' d ' ] = d [ ' c ' ] = 0 NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE d [ ' d ' ] = d [ ' d ' ] NEW_LINE DEDENT
def SmallestNumber ( ) : NEW_LINE INDENT import string NEW_LINE min = int ( sys . maxsize ) NEW_LINE arr = [ ] NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT arr . append ( string . strip ( ) ) NEW_LINE DEDENT ops = [ ] NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT ops . append ( string . strip ( ) ) NEW_LINE DEDENT util ( arr , ops , 0 ) NEW_LINE print ( min ) NEW_LINE DEDENT def util ( arr , ops , idx ) : NEW_LINE INDENT if idx == 3 : NEW_LINE INDENT min = min ( min , arr [ 0 ] ) NEW_LINE return NEW_LINE DEDENT for i in range ( len ( arr ) ) : NEW_LINE INDENT for j in range ( i + 1 , len ( arr ) ) : NEW_LINE INDENT a = [ ] NEW_LINE for k in arr : NEW_LINE INDENT if k != j and k != i : NEW_LINE INDENT a . append ( arr [ k ] ) NEW_LINE DEDENT DEDENT if idx < 3 and ops [ idx ] == ' + ' : NEW_LINE INDENT res = arr [ i ] + arr [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT res = arr [ i ] * arr [ j ] NEW_LINE DEDENT a . append ( res ) NEW_LINE util ( a , ops , idx + 1 ) NEW_LINE DEDENT DEDENT DEDENT return 0 NEW_LINE DEDENT
def test_sum_same_free_divisors ( ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE from numpy . testing . as np NEW_LINE import testing as np NEW_LINE testing = np . testing as np NEW_LINE testing = np . testing NEW_LINE np . testing = np . testing NEW_LINE np . testing . as np . testing = np . testing NEW_LINE np . testing . as np . testing = np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing . as np . testing NEW_LINE np . testing . as np . testing = np . np . testing . as np . testing NEW_LINE np . testing . as np . testing = np . np . testing . as np . testing NEW_LINE np . testing . as np . testing . as np . testing : NEW_LINE INDENT np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing = np . testing . as_testing = np . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing = np . testing . as_testing = np . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing = np . testing . as_testing = np . as_testing = np . testing . as_testing = np . as_testing = np . testing . as_testing NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE x = int ( sys . stdin . read ( ) ) NEW_LINE a = int ( sys . stdin . read ( ) ) NEW_LINE b = int ( sys . stdin . read ( ) ) NEW_LINE print ( ( x - a ) % b ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE k = int ( sys . stdin . readline ( ) ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT idx = k - 1 NEW_LINE flag = True NEW_LINE while idx < n : NEW_LINE INDENT if arr [ idx ] != arr [ k - 1 ] : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT idx += 1 NEW_LINE DEDENT if not flag : NEW_LINE INDENT sys . stdout . write ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT i = k - 1 NEW_LINE while i >= 0 : NEW_LINE INDENT if arr [ i ] != arr [ k - 1 ] : NEW_LINE INDENT break NEW_LINE DEDENT i -= 1 NEW_LINE DEDENT print ( i + 1 ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def GFG ( n ) : return n & ( n - 1 ) NEW_LINE def main ( arg ) : NEW_LINE INDENT n = 7 NEW_LINE print ( " The ▁ number ▁ after ▁ unsetting ▁ " " the ▁ rightmost ▁ set ▁ bit ▁ % d " % fun ( n ) , end = " " ) NEW_LINE DEDENT
def LongestFibSubseq ( A , n ) : NEW_LINE INDENT import bisect NEW_LINE S = [ t for t in A if t > n ] NEW_LINE maxLen , x , y = 0 , 0 , 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT x = A [ j ] NEW_LINE y = A [ i ] + A [ j ] NEW_LINE length = 3 NEW_LINE while y in S and ( y != S . pop ( ) ) : NEW_LINE INDENT z = x + y NEW_LINE x = y NEW_LINE y = z NEW_LINE maxLen = max ( maxLen , 1 ) NEW_LINE DEDENT DEDENT DEDENT return maxLen if maxLen >= 3 else 0 NEW_LINE DEDENT
def count_pairs ( a , b , n , m ) : NEW_LINE INDENT cnt = 0 NEW_LINE s = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT sum = a [ i ] + b [ j ] NEW_LINE if sum in s : NEW_LINE INDENT cnt += 1 NEW_LINE s . add ( sum ) NEW_LINE DEDENT DEDENT DEDENT return cnt NEW_LINE DEDENT
def GFG ( arr , x , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT y = math . sqrt ( arr [ i ] ) NEW_LINE if math . floor ( y ) == math . ceil ( y ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT DEDENT if sum % x == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE import collections NEW_LINE import random NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT pque = [ collections . deque ( maxlen = None ) ] NEW_LINE q = sys . stdin . read ( ) NEW_LINE for command , t in zip ( range ( q ) , range ( n ) ) : NEW_LINE INDENT if command == 0 : NEW_LINE INDENT x = random . choice ( pque ) NEW_LINE pque [ t ] . append ( x ) NEW_LINE DEDENT elif command == 1 : NEW_LINE INDENT if not pque [ t ] . empty ( ) : NEW_LINE INDENT print ( pque [ t ] . popleft ( ) ) NEW_LINE DEDENT DEDENT elif command == 2 : NEW_LINE INDENT if not pque [ t ] . empty ( ) : NEW_LINE INDENT pque [ t ] . popleft ( ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def calculate_min_sum ( a , n ) : NEW_LINE INDENT import math NEW_LINE a . sort ( ) NEW_LINE min_sum = 0 NEW_LINE for i in range ( 1 , n , 2 ) : NEW_LINE INDENT min_sum += abs ( a [ i ] - a [ i - 1 ] ) NEW_LINE DEDENT return min_sum NEW_LINE def calculate_max_sum ( a , n ) : NEW_LINE INDENT a . sort ( ) NEW_LINE max_sum = 0 NEW_LINE for i in range ( n // 2 ) : NEW_LINE INDENT max_sum += abs ( a [ n - 1 - i ] - a [ i ] ) NEW_LINE DEDENT return max_sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT a = [ 10 , - 10 , 20 , - 40 ] NEW_LINE n = len ( a ) NEW_LINE print ( ' The ▁ minimum ▁ sum ▁ of ▁ pairs ▁ is ▁ % d ' % calculate_min_sum ( a , n ) ) NEW_LINE print ( ' The ▁ maximum ▁ sum ▁ of ▁ pairs ▁ is ▁ % d ' % calculate_max_sum ( a , n ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT m = int ( sys . stdin . readline ( ) ) NEW_LINE b = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT b . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT i = 0 NEW_LINE while True : NEW_LINE INDENT if i >= len ( b ) : NEW_LINE INDENT print ( '0' ) NEW_LINE break NEW_LINE DEDENT if i >= len ( a ) : NEW_LINE INDENT print ( '1' ) NEW_LINE break NEW_LINE DEDENT if a [ i ] > b [ i ] : NEW_LINE INDENT print ( '0' ) NEW_LINE break NEW_LINE DEDENT if a [ i ] < b [ i ] : NEW_LINE INDENT print ( '1' ) NEW_LINE break NEW_LINE DEDENT i += 1 NEW_LINE DEDENT DEDENT except ValueError : NEW_LINE INDENT print ( ' Invalid ▁ input ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE class Main ( ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT def __init__ ( self ) : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT DEDENT
def is_palindrome ( s ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE s = ' nolon ' NEW_LINE print ( solve ( s ) ) NEW_LINE DEDENT
def count_numbers ( k , n ) : NEW_LINE INDENT import numpy as np NEW_LINE dp = np . zeros ( ( n + 1 , 2 ) ) NEW_LINE dp [ 1 ] [ 0 ] = 0 NEW_LINE dp [ 1 ] [ 1 ] = k - 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] NEW_LINE dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] ) * ( k - 1 ) NEW_LINE DEDENT return dp [ n ] [ 0 ] + dp [ n ] [ 1 ] NEW_LINE DEDENT
def min_cost ( n , arr , cost ) : NEW_LINE INDENT sum , total_cost = 0 , 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT total_cost += cost * sum NEW_LINE arr [ n - 1 ] += sum NEW_LINE total_cost += ( 2 * cost * arr [ n - 1 ] ) NEW_LINE return total_cost NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join , strip NEW_LINE from string import join NEW_LINE from string import join , strip NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import join NEW_LINE from string import strip NEW_LINE from string import join NEW_LINE from string import join NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE for n in range ( len ( sys . stdin ) ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT m = len ( sys . stdin ) - ( n << 1 ) NEW_LINE ch = ( ' ' . join ( sys . stdin ) ) NEW_LINE count = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if ch [ i ] == ' I ' : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ch [ i + 1 + ( j << 1 ) ] != ' O ' or ch [ i + ( ( j + 1 ) << 1 ) ] != ' I ' : NEW_LINE INDENT break NEW_LINE DEDENT elif j == n - 1 : NEW_LINE INDENT count += 1 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( count ) NEW_LINE DEDENT DEDENT
def B1593 ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Node ( object ) : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = self . right = None NEW_LINE DEDENT def insert ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = self . right = None NEW_LINE DEDENT def insert ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . right = None NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . right = self . right NEW_LINE self . append ( data ) NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE self . append ( data ) NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self . right NEW_LINE self . append ( data ) NEW_LINE DEDENT def append ( self , data ) : NEW_LINE INDENT self . left = self . left NEW_LINE self . right = self .
def GFG ( data , k ) : NEW_LINE INDENT MAX_CHAR = 26 NEW_LINE hash = [ 0 ] * MAX_CHAR NEW_LINE n = len ( data ) NEW_LINE for c in data : NEW_LINE INDENT hash [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT res = " " NEW_LINE for c in data : NEW_LINE INDENT if ord ( c ) - ord ( ' a ' ) >= k : NEW_LINE INDENT res += c NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def LongestCommonSubStr ( X , Y , m , n ) : NEW_LINE INDENT LCStuff = np . zeros ( ( m + 1 , n + 1 ) ) NEW_LINE result = 0 NEW_LINE for i in range ( 0 , m + 1 ) : NEW_LINE INDENT for j in range ( 0 , n + 1 ) : NEW_LINE INDENT if i == 0 or j == 0 : NEW_LINE INDENT LCStuff [ i ] [ j ] = 0 NEW_LINE DEDENT elif X [ i - 1 ] == Y [ j - 1 ] : NEW_LINE INDENT LCStuff [ i ] [ j ] = LCStuff [ i - 1 ] [ j - 1 ] + 1 NEW_LINE result = max ( result , LCStuff [ i ] [ j ] ) NEW_LINE DEDENT else : NEW_LINE INDENT LCStuff [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT
def count_occurrences ( x , d ) : NEW_LINE INDENT count = 0 NEW_LINE while x > 0 : NEW_LINE INDENT if x % 10 == d : NEW_LINE INDENT count += 1 NEW_LINE DEDENT x = x // 10 NEW_LINE DEDENT return count NEW_LINE def max_occurring ( x ) : NEW_LINE INDENT if x < 0 : NEW_LINE INDENT x = - x NEW_LINE DEDENT return 0 NEW_LINE DEDENT def max_occurring ( x ) : NEW_LINE INDENT if x < 0 : NEW_LINE INDENT x = - x NEW_LINE DEDENT return 0 NEW_LINE DEDENT def max_occurring ( x ) : NEW_LINE INDENT count = count_occurrences ( x , d ) NEW_LINE if count >= max_occurring : NEW_LINE INDENT max_occurring = count NEW_LINE result = d NEW_LINE DEDENT return result NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT x = 1223355 NEW_LINE print ( " Max ▁ occurring ▁ digit ▁ is ▁ % d " % max_occurring ( x ) ) NEW_LINE DEDENT return max_occurring NEW_LINE DEDENT
def print_logest_inc_sub_arr ( arr , n ) : NEW_LINE INDENT max , len_ , max_index = 1 , 1 , 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i ] > arr [ i - 1 ] : NEW_LINE INDENT len_ += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if max < len_ : NEW_LINE INDENT max = len_ NEW_LINE max_index = i - max NEW_LINE DEDENT len_ = 1 NEW_LINE DEDENT DEDENT if max < len_ : NEW_LINE INDENT max = len_ NEW_LINE max_index = n - max NEW_LINE DEDENT for i in range ( max_index , max + max_index ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT print ( n , file = sys . stderr ) NEW_LINE m = n NEW_LINE for i in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT if m % i == 0 : NEW_LINE INDENT print ( i , file = sys . stderr ) NEW_LINE m = i NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE import io NEW_LINE import sys NEW_LINE t = 1 NEW_LINE for t1 in range ( t ) : NEW_LINE INDENT n = math . pi NEW_LINE m = math . pi NEW_LINE p = list ( range ( n ) ) NEW_LINE hash = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT p [ i ] = math . pi NEW_LINE hash [ i ] = p [ i ] NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT l = math . pi NEW_LINE r = math . pi NEW_LINE x = math . pi NEW_LINE l -= 1 NEW_LINE r -= 1 NEW_LINE x -= 1 NEW_LINE ind = x NEW_LINE if ind < l or ind > r : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT hash1 = { } NEW_LINE for j in range ( l ) : NEW_LINE INDENT hash1 [ p [ j ] ] += 1 NEW_LINE DEDENT for j in range ( r + 1 , n ) : NEW_LINE INDENT hash1 [ p [ j ] ] += 1 NEW_LINE DEDENT cnt = 0 NEW_LINE for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if hash1 [ j ] == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT if j == hash [ x ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT dif1 = ind - l + 1 NEW_LINE if dif1 != cnt : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def Max_Sum ( a , n ) : NEW_LINE INDENT import math NEW_LINE b = [ 0 ] * n NEW_LINE S = 0 NEW_LINE res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ i ] = res NEW_LINE res += a [ i ] NEW_LINE S += a [ i ] NEW_LINE res = max ( res , - S ) NEW_LINE DEDENT ans = S NEW_LINE ans = max ( ans , res ) NEW_LINE g = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT g -= a [ i ] NEW_LINE ans = max ( ans , g + b [ i ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def A1452 ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . maxsize NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT while t > 0 : NEW_LINE INDENT a = [ sys . maxsize ] NEW_LINE a . sort ( ) NEW_LINE if a [ 0 ] == a [ 1 ] : NEW_LINE INDENT print ( 2 * a [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 2 * a [ 1 ] - 1 ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( x ) : NEW_LINE INDENT n = ( len ( x ) - x ) // 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT for i in range ( n + x - 1 , - 1 , - 1 ) : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT for i in range ( n + x , len ( x ) ) : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def GFG ( data ) : NEW_LINE INDENT n = len ( data ) NEW_LINE L = np . zeros ( ( n , n ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT L [ i ] [ i ] = 1 NEW_LINE DEDENT for cl in range ( 2 , n + 1 ) : NEW_LINE INDENT for i in range ( n - cl + 1 ) : NEW_LINE INDENT j = i + cl - 1 NEW_LINE if data [ i ] == data [ j ] and cl == 2 : NEW_LINE INDENT L [ i ] [ j ] = 2 NEW_LINE DEDENT elif data [ i ] == data [ j ] : NEW_LINE INDENT L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return L [ 0 ] [ n - 1 ] NEW_LINE DEDENT def minimumNumberOfDeletions ( data ) : NEW_LINE INDENT n = len ( data ) NEW_LINE data = lps ( data ) NEW_LINE return ( n - data ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT if ( n & ( n - 1 ) ) == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def test ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT curr = arr [ n - 1 ] NEW_LINE c = 0 NEW_LINE for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT if arr [ i ] <= curr : NEW_LINE INDENT curr = arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE DEDENT DEDENT
def p187 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . pow ( 10 , 8 ) ) NEW_LINE LIMIT = math . pow ( 10 , 8 ) - 1 NEW_LINE def run ( ) : NEW_LINE INDENT count = 0 NEW_LINE primes = math . list_primes ( LIMIT // 2 ) NEW_LINE for i , sqrt in enumerate ( primes ) : NEW_LINE INDENT end = math . find ( LIMIT // primes [ i ] , i ) NEW_LINE if end >= 0 : NEW_LINE INDENT end += 1 NEW_LINE DEDENT else : NEW_LINE INDENT end = - end - 1 NEW_LINE DEDENT count += end - i NEW_LINE DEDENT return str ( count ) NEW_LINE DEDENT return run NEW_LINE DEDENT
def count ( pos , cnt , tight , nonz , num ) : NEW_LINE INDENT import sys NEW_LINE if pos == len ( num ) : NEW_LINE INDENT if cnt == K : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if dp [ pos ] [ cnt ] [ tight ] [ nonz ] != - 1 : NEW_LINE INDENT return dp [ pos ] [ cnt ] [ tight ] [ nonz ] NEW_LINE DEDENT ans = 0 NEW_LINE limit = ( ( 9 if tight != 0 else num [ pos ] ) ) NEW_LINE for dig in range ( 0 , limit + 1 ) : NEW_LINE INDENT curr_cnt = cnt NEW_LINE if dig == d : NEW_LINE INDENT if d != 0 or ( d == 0 and nonz != 0 ) : NEW_LINE INDENT curr_cnt += 1 NEW_LINE DEDENT DEDENT curr_tight = tight NEW_LINE if dig < num [ pos ] : NEW_LINE INDENT curr_tight = 1 NEW_LINE DEDENT ans += count ( pos + 1 , curr_cnt , curr_tight , ( 1 if dig != 0 else 0 ) , num ) NEW_LINE DEDENT return dp [ pos ] [ cnt ] [ tight ] [ nonz ] = ans NEW_LINE DEDENT def solve ( x ) : NEW_LINE INDENT num = [ ] NEW_LINE while x != 0 : NEW_LINE INDENT num . append ( x % 10 ) NEW_LINE x //= 10 NEW_LINE DEDENT num . reverse ( ) NEW_LINE for i in range ( M ) : NEW_LINE INDENT for j in range ( M ) : NEW_LINE INDENT for k in range ( 2 ) : NEW_LINE INDENT for l in range ( 2 ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] [ l ] = - 1 NEW_LINE DEDENT DEDENT DEDENT return count ( 0 , 0 , 0 , 0 , 0 , num ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT L , R = 11 , 100 NEW_LINE d = 2 , K = 1 NEW_LINE print ( solve ( R ) - solve ( L - 1 ) , end = ' ▁ ' ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import math NEW_LINE import random NEW_LINE data = [ ] NEW_LINE x = random . randint ( 0 , len ( args ) ) NEW_LINE while x > 0 : NEW_LINE INDENT r = x % 10 NEW_LINE if 9 - r < r : NEW_LINE INDENT if x // 10 == 0 and 9 - r == 0 : NEW_LINE INDENT data . append ( r ) NEW_LINE DEDENT else : NEW_LINE INDENT data . append ( 9 - r ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT data . append ( r ) NEW_LINE DEDENT x = x // 10 NEW_LINE DEDENT pow = 0 NEW_LINE new_number = 0 NEW_LINE for i in data : NEW_LINE INDENT new_number = new_number + i * int ( math . pow ( 10 , pow ) ) NEW_LINE pow += 1 NEW_LINE DEDENT print ( new_number ) NEW_LINE DEDENT
def is_peak ( arr , n , num , i , j ) : NEW_LINE INDENT import sys NEW_LINE if i >= 0 and arr [ i ] > num : NEW_LINE INDENT return False NEW_LINE DEDENT if j < n and arr [ j ] > num : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def isrough ( arr , n , num , i , j ) : NEW_LINE INDENT if i >= 0 and arr [ i ] < num : NEW_LINE INDENT return False NEW_LINE DEDENT if j < n and arr [ j ] < num : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def print_peaks_toughs ( arr , n ) : NEW_LINE INDENT sys . stdout . write ( ' Peaks ▁ : ▁ ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if is_peak ( arr , n , arr [ i ] , i - 1 , i + 1 ) : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % arr [ i ] ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' ' ) NEW_LINE sys . stdout . write ( ' Troughs ▁ : ▁ ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if isrough ( arr , n , arr [ i ] , i - 1 , i + 1 ) : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % arr [ i ] ) NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def GFG ( i ) : return 1 + ( i >> 31 ) - ( - i >> 31 ) NEW_LINE def check ( n ) : NEW_LINE INDENT s = [ " negative " , " zero " , " positive " ] NEW_LINE val = index ( n ) NEW_LINE print ( " % d ▁ is ▁ % s " % ( n , s [ val ] ) ) NEW_LINE DEDENT
def GFG ( a , n , x ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == x : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def is_num_balanced ( num ) : NEW_LINE INDENT import string NEW_LINE num = " % d " % num NEW_LINE ch_arr = list ( str ) NEW_LINE hs = set ( ) NEW_LINE for ch in ch_arr : NEW_LINE INDENT hs . add ( ch ) NEW_LINE DEDENT str_len = len ( str ) NEW_LINE hs_len = len ( hs ) NEW_LINE if hs_len <= str_len // 2 or hs_len == str_len : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT if n <= 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if n % 2 == 0 or n % 3 == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , n ** 2 + 6 ) : NEW_LINE INDENT if n % i == 0 or n % ( i + 2 ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True if is_prime ( n ) else False NEW_LINE DEDENT
def p065 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . factorial ( ) ) NEW_LINE def run ( ) : NEW_LINE INDENT n = 1 NEW_LINE d = 0 NEW_LINE for i in range ( 99 , - 1 , - 1 ) : NEW_LINE INDENT temp = math . pow ( continued_fraction_term ( i ) , n ) + d NEW_LINE d = n NEW_LINE n = temp NEW_LINE DEDENT sum = 0 NEW_LINE while not n : NEW_LINE INDENT divrem = n // 2 NEW_LINE sum += divrem [ 1 ] NEW_LINE n = divrem [ 0 ] NEW_LINE DEDENT return str ( sum ) NEW_LINE DEDENT def continued_fraction_term ( i ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT return 2 NEW_LINE DEDENT elif i % 3 == 2 : NEW_LINE INDENT return i // 3 * 2 + 2 NEW_LINE DEDENT else : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT return run NEW_LINE DEDENT
def GFG ( a , b ) : NEW_LINE INDENT if b == 0 : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return __gcd ( b , a % b ) NEW_LINE DEDENT DEDENT def LCM ( x , y , z ) : NEW_LINE INDENT ans = ( ( x * y ) / ( __gcd ( x , y ) ) ) NEW_LINE return ( ( z * ans ) / ( __gcd ( ans , z ) ) ) NEW_LINE DEDENT def findDivisible ( n , x , y , z ) : NEW_LINE INDENT lcm = LCM ( x , y , z ) NEW_LINE ndigitnumber = int ( pow ( 10 , n - 1 ) ) NEW_LINE reminder = ndigitnumber % lcm NEW_LINE if reminder == 0 : NEW_LINE INDENT return ndigitnumber NEW_LINE DEDENT ndigitnumber += lcm - reminder NEW_LINE if ndigitnumber < pow ( 10 , n ) : NEW_LINE INDENT return ndigitnumber NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n , x , y , z = 4 , 2 , 3 , 5 NEW_LINE res = findDivisible ( n , x , y , z ) NEW_LINE if res : NEW_LINE INDENT print ( res ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' Not ▁ possible ' ) NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT MAXN = 100001 NEW_LINE prime = [ True ] * MAXN NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT for i in range ( MAXN ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , MAXN ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * p , MAXN , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def common_prime ( a , b ) : NEW_LINE INDENT gcd = int ( __gcd ( a , b ) ) NEW_LINE for i in range ( 2 , ( gcd ) + 1 ) : NEW_LINE INDENT if prime [ i ] and gcd % i == 0 : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT def __gcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return __gcd ( b % a , a ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE a , b = 6 , 12 NEW_LINE common_prime ( a , b ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy . inf NEW_LINE import numpy . sup as sup NEW_LINE import numpy . random NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE import numpy . random as pi NEW_LINE p = pi / pi NEW_LINE p = pi / 2 NEW_LINE for i in range ( pi ) : NEW_LINE INDENT p [ i ] = pi [ i ] NEW_LINE DEDENT return p NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE g = [ ] NEW_LINE def max_matching ( v , p ) : NEW_LINE INDENT a = 0 NEW_LINE o = 0 NEW_LINE for w in g [ v ] : NEW_LINE INDENT if w == p : NEW_LINE INDENT continue NEW_LINE DEDENT r = max_matching ( w , v ) NEW_LINE a += r // 2 NEW_LINE o += r % 2 NEW_LINE DEDENT return 2 * a + min ( 1 , o ) + 1 NEW_LINE DEDENT def my_open ( ) : NEW_LINE INDENT out = sys . stdout NEW_LINE n = len ( g ) NEW_LINE g = [ [ ] ] * n NEW_LINE g [ : ] = [ [ ] ] * n NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT a = len ( g [ i ] ) - 1 NEW_LINE b = len ( g [ i ] ) - 1 NEW_LINE g [ a ] . append ( b ) NEW_LINE g [ b ] . append ( a ) NEW_LINE DEDENT m = max_matching ( 0 , - 1 ) // 2 NEW_LINE out . write ( ' Second ' if 2 * m == n else ' First ' ) NEW_LINE out . close ( ) NEW_LINE DEDENT import os NEW_LINE import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE try : NEW_LINE INDENT line = sys . stdin . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT line = shlex . split ( line ) NEW_LINE return line NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT def my_open ( ) : NEW_LINE INDENT return os . path . join ( os . path . dirname ( sys . argv [ 0 ] ) , ' first . txt ' ) NEW_LINE DEDENT def my_open ( ) : NEW_LINE INDENT data = ' ' NEW_LINE try : NEW_LINE INDENT data = open ( ) . read ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT return my_open ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE N , M = 205 , 205 NEW_LINE grid = np . zeros ( ( N , M ) ) NEW_LINE def solve ( s ) : NEW_LINE INDENT t = s . find ( ' ▁ ' ) NEW_LINE while t > 0 : NEW_LINE INDENT t -= 1 NEW_LINE DEDENT return t NEW_LINE DEDENT def solve ( s ) : NEW_LINE INDENT n , m = s . split ( ' ▁ ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT line = s [ i + 1 : ] NEW_LINE for j in range ( m ) : NEW_LINE INDENT grid [ i ] [ j ] = line [ j ] - '0' NEW_LINE DEDENT DEDENT return grid NEW_LINE DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( m - 1 ) : NEW_LINE INDENT sum = grid [ i ] [ j ] + grid [ i + 1 ] [ j ] + grid [ i ] [ j + 1 ] + grid [ i + 1 ] [ j + 1 ] NEW_LINE if sum == 3 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT print ( ' YES ' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE tc = 1 NEW_LINE while tc > 0 : NEW_LINE INDENT n = len ( sys . stdin . readline ( ) ) NEW_LINE k = len ( sys . stdin . readline ( ) ) NEW_LINE s = [ ] NEW_LINE min , max = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = s . strip ( ) NEW_LINE s . append ( len ( s ) ) NEW_LINE DEDENT p = sys . stdin . readline ( ) NEW_LINE plen = len ( p ) NEW_LINE kk = k NEW_LINE s . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == plen : NEW_LINE INDENT min += 1 NEW_LINE break NEW_LINE DEDENT if k > 0 : NEW_LINE INDENT k -= 1 NEW_LINE min += 1 NEW_LINE DEDENT if k == 0 : NEW_LINE INDENT k = kk NEW_LINE min += 5 NEW_LINE DEDENT DEDENT k = kk NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( s [ i ] == plen and s [ i + 1 ] > plen ) : NEW_LINE INDENT max += 1 NEW_LINE break NEW_LINE DEDENT if k > 0 : NEW_LINE INDENT k -= 1 NEW_LINE max += 1 NEW_LINE DEDENT if k == 0 : NEW_LINE INDENT k = kk NEW_LINE max += 5 NEW_LINE DEDENT DEDENT if s [ n - 1 ] == plen : NEW_LINE INDENT max += 1 NEW_LINE DEDENT print ( min , max ) NEW_LINE DEDENT sys . exit ( 0 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE with open ( ' test . txt ' ) as inp : NEW_LINE INDENT word1 = inp . readline ( ) . strip ( ) . lower ( ) NEW_LINE word2 = inp . readline ( ) . strip ( ) . lower ( ) NEW_LINE word3 = inp . readline ( ) . strip ( ) . lower ( ) NEW_LINE perm1 = word1 + word2 + word3 NEW_LINE perm2 = word1 + word3 + word2 NEW_LINE perm3 = word2 + word1 + word3 NEW_LINE perm4 = word2 + word3 + word1 NEW_LINE perm5 = word3 + word2 + word1 NEW_LINE perm6 = word3 + word1 + word2 NEW_LINE students = len ( inp ) NEW_LINE inp . readline ( ) NEW_LINE for i in range ( students ) : NEW_LINE INDENT case = inp . readline ( ) . strip ( ) . lower ( ) NEW_LINE if case in [ perm1 , perm2 , perm3 , perm4 , perm5 , perm6 ] : NEW_LINE INDENT print ( ' ACC ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' WA ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import random NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT random . seed ( 0 ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Case ▁ # % d : ▁ % s " % ( caze , " NOT ▁ POSSIBLE " if len ( sys . argv ) > 1 else ans ) ) NEW_LINE DEDENT DEDENT
def max_area_of_land ( grid ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE np . testing = np . testing as np . testing NEW_LINE DEDENT
def GFG ( x , y , n ) : NEW_LINE INDENT sum1 = int ( ( pow ( x , 2 ) * ( pow ( x , 2 * n ) - 1 ) ) / ( pow ( x , 2 ) - 1 ) ) NEW_LINE sum2 = int ( ( x * y * ( pow ( x , n ) * pow ( y , n ) - 1 ) ) / ( x * y - 1 ) ) NEW_LINE return sum1 + sum2 NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import sys NEW_LINE n -= 1 NEW_LINE sum = 0 NEW_LINE sum += ( n * ( n + 1 ) ) / 2 NEW_LINE sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 NEW_LINE return sum NEW_LINE DEDENT
def get_sum ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE while n != 0 : NEW_LINE INDENT sum = sum + n % 10 NEW_LINE n = n // 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def get_sum ( n ) : NEW_LINE INDENT import math NEW_LINE for sum in [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29 , 29
def GFG ( head_ref , new_data ) : NEW_LINE INDENT class Node ( object ) : NEW_LINE INDENT data = new_data NEW_LINE next = ( head_ref , ) NEW_LINE DEDENT def push ( head_ref , new_data ) : NEW_LINE INDENT new_node = Node ( ) NEW_LINE new_node . data = new_data NEW_LINE new_node . next = ( head_ref , ) NEW_LINE ( head_ref , ) = new_node NEW_LINE return head_ref NEW_LINE DEDENT def is_prime ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT if n <= 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if n % 2 == 0 or n % 3 == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , n ** 2 + 1 ) : NEW_LINE INDENT if n % i == 0 or n % ( i + 2 ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def delete_non_prime_nodes ( head_ref ) : NEW_LINE INDENT ptr = head_ref NEW_LINE while ptr and not is_prime ( ptr . data ) : NEW_LINE INDENT temp = ptr NEW_LINE ptr = ptr . next NEW_LINE DEDENT head_ref = ptr NEW_LINE if not ptr : NEW_LINE INDENT return None NEW_LINE DEDENT curr = ptr . next NEW_LINE while curr : NEW_LINE INDENT if not is_prime ( curr . data ) : NEW_LINE INDENT ptr . next = curr . next NEW_LINE curr = ptr . next NEW_LINE DEDENT else : NEW_LINE INDENT ptr = curr NEW_LINE curr = curr . next NEW_LINE DEDENT DEDENT return head_ref NEW_LINE DEDENT def print_list ( head ) : NEW_LINE INDENT while head : NEW_LINE INDENT print ( head . data , end = ' ▁ ' ) NEW_LINE head = head . next NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT head = None NEW_LINE head = push ( head , 17 ) NEW_LINE head = push ( head , 7 ) NEW_LINE head = push ( head , 6 ) NEW_LINE head = push ( head , 16 ) NEW_LINE head = push ( head , 15 ) NEW_LINE print ( ' Original ▁ List : ▁ ' , end = ' ▁ ' ) NEW_LINE print_list ( head ) NEW_LINE head = delete_non_prime_nodes ( head ) NEW_LINE print ( ' \n Modified ▁ List : ▁ ' , end = ' ▁ ' ) NEW_LINE print_list ( head ) NEW_LINE DEDENT return head_ref NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . read ( ) ) NEW_LINE M = int ( sys . stdin . read ( ) ) NEW_LINE L = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT cs = [ [ ] for i in range ( N * M ) ] NEW_LINE for D in range ( M ) : NEW_LINE INDENT A = random . randint ( - 1 , 1 ) NEW_LINE K = random . randint ( 0 , 1 ) NEW_LINE T = random . randint ( 0 , 1 ) NEW_LINE start = D * N + A NEW_LINE cs [ start ] . append ( ( K << 16 ) | T ) NEW_LINE DEDENT dp = np . zeros ( ( L + 1 , N * M + 1 ) ) NEW_LINE for i in range ( N * M ) : NEW_LINE INDENT for j in range ( L ) : NEW_LINE INDENT for c in cs [ i ] : NEW_LINE INDENT len_ = c >> 16 NEW_LINE t = c & 0xFFFF NEW_LINE dp [ j + 1 ] [ i + len_ ] = max ( dp [ j + 1 ] [ i + len_ ] , dp [ j ] [ i ] + t ) NEW_LINE DEDENT DEDENT for j in range ( 0 , L + 1 ) : NEW_LINE INDENT dp [ j ] [ i + 1 ] = max ( dp [ j ] [ i + 1 ] , dp [ j ] [ i ] ) NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 0 , L + 1 ) : NEW_LINE INDENT ans = max ( ans , dp [ i ] [ N * M ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . bolls = 1 NEW_LINE self . is_red = False NEW_LINE DEDENT def add ( self , src ) : NEW_LINE INDENT self . is_red |= src . is_red NEW_LINE self . bolls += 1 NEW_LINE self . bolls -= 1 NEW_LINE if not self . bolls : NEW_LINE INDENT self . is_red = False NEW_LINE DEDENT DEDENT def main ( self ) : NEW_LINE INDENT n = self . n NEW_LINE m = self . m NEW_LINE boxs = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT boxs . append ( Box ( ) ) NEW_LINE DEDENT boxs [ 0 ] . is_red = True NEW_LINE for i in range ( m ) : NEW_LINE INDENT x = self . n NEW_LINE y = self . m NEW_LINE boxs [ y - 1 ] . add ( boxs [ x - 1 ] ) NEW_LINE DEDENT print ( sum ( boxs ) ) NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT h = int ( sys . stdin . readline ( ) ) NEW_LINE w = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT list = [ ] NEW_LINE max = 0 NEW_LINE for i in range ( h ) : NEW_LINE INDENT arr = list [ i ] NEW_LINE for j in range ( w ) : NEW_LINE INDENT if arr [ j ] == ' . ' : NEW_LINE INDENT continue NEW_LINE DEDENT for x in list : NEW_LINE INDENT hh = x // w NEW_LINE ww = x % w NEW_LINE max = max max NEW_LINE max = max ( abs ( i - hh ) + abs ( j - ww ) ) NEW_LINE DEDENT DEDENT list . append ( i * w + j ) NEW_LINE DEDENT DEDENT print ( max ) NEW_LINE DEDENT
def min_replacement ( data ) : NEW_LINE INDENT if len ( data ) > 26 : NEW_LINE INDENT print ( ' IMPOSSIBLE ' ) NEW_LINE DEDENT else : NEW_LINE INDENT hash = [ 0 ] * 26 NEW_LINE for c in data : NEW_LINE INDENT hash [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT count = 0 NEW_LINE for c in data : NEW_LINE INDENT if ord ( c ) > 1 : NEW_LINE INDENT for j in range ( 26 ) : NEW_LINE INDENT if hash [ j ] == 0 : NEW_LINE INDENT hash [ ord ( c ) - ord ( ' a ' ) ] -= 1 NEW_LINE c = c [ : i ] + chr ( j + ord ( ' a ' ) ) + c [ i + 1 : ] NEW_LINE hash [ j ] += 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( c ) NEW_LINE DEDENT DEDENT
def longest_subseq ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE pre_count_0 = [ 0 ] * ( n + 2 ) NEW_LINE pre_count_1 = [ 0 ] * ( n + 1 ) NEW_LINE post_count_0 = [ 0 ] * ( n + 2 ) NEW_LINE pre_count_0 [ 0 ] = 0 NEW_LINE post_count_0 [ n + 1 ] = 0 NEW_LINE pre_count_1 [ 0 ] = 0 NEW_LINE pre_count_1 [ n + 2 ] = 0 NEW_LINE for j in range ( 1 , n + 1 ) : NEW_LINE INDENT pre_count_0 [ j ] = pre_count_0 [ j - 1 ] NEW_LINE pre_count_1 [ j ] = pre_count_1 [ j - 1 ] NEW_LINE post_count_0 [ n - j + 1 ] = post_count_0 [ n - j + 2 ] NEW_LINE if s [ j - 1 ] == '0' : NEW_LINE INDENT pre_count_0 [ j ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT pre_count_1 [ j ] += 1 NEW_LINE DEDENT if s [ n - j ] == '0' : NEW_LINE INDENT post_count_0 [ n - j + 1 ] += 1 NEW_LINE DEDENT DEDENT if pre_count_0 [ n ] == n or pre_count_0 [ n ] == 0 : NEW_LINE INDENT return n NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( i , n + 1 ) : NEW_LINE INDENT ans = max ( pre_count_0 [ i - 1 ] + pre_count_1 [ j ] - pre_count_1 [ i - 1 ] + post_count_0 [ j + 1 ] , ans ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def GFG ( N , s ) : NEW_LINE INDENT prime = [ False ] * ( N + 1 ) NEW_LINE for i in range ( 2 , N + 1 , 2 ) : NEW_LINE INDENT s [ i ] = 2 NEW_LINE DEDENT for i in range ( 3 , N + 1 , 2 ) : NEW_LINE INDENT if prime [ i ] == False : NEW_LINE INDENT s [ i ] = i NEW_LINE for j in range ( i , i + 1 , 2 ) : NEW_LINE INDENT if prime [ i * j ] == False : NEW_LINE INDENT prime [ i * j ] = True NEW_LINE s [ i * j ] = i NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def longest_substring ( a , n ) : NEW_LINE INDENT hash = np . zeros ( ( n , 10 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT num = a [ i ] NEW_LINE while num != 0 : NEW_LINE INDENT hash [ i ] [ num % 10 ] = 1 NEW_LINE num //= 10 NEW_LINE DEDENT DEDENT longest = np . inf NEW_LINE count = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( 10 ) : NEW_LINE INDENT if hash [ i ] [ j ] == 1 & hash [ i + 1 ] [ j ] == 1 : NEW_LINE INDENT count += 1 NEW_LINE break NEW_LINE DEDENT DEDENT if j == 10 : NEW_LINE INDENT longest = max ( longest , count + 1 ) NEW_LINE count = 0 NEW_LINE DEDENT DEDENT longest = max ( longest , count + 1 ) NEW_LINE return longest NEW_LINE DEDENT
def _1196A_ThreePilesOfCandies ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT test = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d ▁ % d % ▁ d % ▁ d % ▁ d % d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d % ▁ d
def Divisors ( x ) : NEW_LINE INDENT import math NEW_LINE c = 0 NEW_LINE v = [ ] NEW_LINE while x % 2 == 0 : NEW_LINE INDENT c += 1 NEW_LINE x //= 2 NEW_LINE DEDENT v . append ( c ) NEW_LINE c = 0 NEW_LINE while x % 3 == 0 : NEW_LINE INDENT c += 1 NEW_LINE x //= 3 NEW_LINE DEDENT v . append ( c ) NEW_LINE c = 0 NEW_LINE while x % 7 == 0 : NEW_LINE INDENT c += 1 NEW_LINE x //= 7 NEW_LINE DEDENT v . append ( c ) NEW_LINE v . append ( x ) NEW_LINE return v NEW_LINE DEDENT
def GFG ( a , b , v , vis ) : NEW_LINE INDENT vis [ a ] = 1 NEW_LINE c += 1 NEW_LINE for i in v [ a ] : NEW_LINE INDENT if vis [ i ] == 0 and i != b : NEW_LINE INDENT dfs ( i , b , v , vis ) NEW_LINE DEDENT DEDENT def Calculate ( v ) : NEW_LINE INDENT vis = [ 0 ] * ( n + 1 ) NEW_LINE vis [ a ] = 0 NEW_LINE c = 0 NEW_LINE dfs ( a , b , v , vis ) NEW_LINE ans1 = n - c - 1 NEW_LINE vis [ a ] = 0 NEW_LINE c = 0 NEW_LINE dfs ( b , a , v , vis ) NEW_LINE ans2 = n - c - 1 NEW_LINE print ( ans1 * ans2 , end = ' \n ' ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 7 NEW_LINE m = 7 NEW_LINE a = 3 NEW_LINE b = 5 NEW_LINE edges = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 4 ] , [ 4 , 5 ] , [ 5 , 6 ] , [ 6 , 7 ] , [ 7 , 5 ] ] NEW_LINE v = [ [ ] * ( n + 1 ) for i in range ( 0 , n + 1 ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT v [ i ] = [ ] NEW_LINE DEDENT for i in range ( 0 , m ) : NEW_LINE INDENT v [ i ] [ 0 ] . append ( edges [ i ] [ 1 ] ) NEW_LINE v [ i ] [ 1 ] . append ( edges [ i ] [ 0 ] ) NEW_LINE DEDENT Calculate ( v ) NEW_LINE DEDENT return ' ' . join ( v ) NEW_LINE DEDENT
def B_Nirvana ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import random NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import radians NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . read ( ) ) NEW_LINE b = int ( sys . stdin . read ( ) ) NEW_LINE res = a NEW_LINE while a >= b : NEW_LINE INDENT res += ( a // b ) NEW_LINE a = ( a // b ) + ( a % b ) NEW_LINE DEDENT print ( res ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' No ▁ such ▁ file ' ) NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE while n != 0 : NEW_LINE INDENT sum = sum + n % 10 NEW_LINE n = n // 10 NEW_LINE DEDENT return sum NEW_LINE def largestDigitSumdivisior ( n ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( 1 , math . sqrt ( n ) + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT res = max ( res , sum ( i ) ) NEW_LINE res = max ( res , sum ( n // i ) ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT n = 14 NEW_LINE print ( largestDigitSumdivisior ( n ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def power ( a ) : NEW_LINE INDENT res = 0 NEW_LINE while a > 0 : NEW_LINE INDENT res += 1 NEW_LINE a = a // 10 NEW_LINE DEDENT return res NEW_LINE def mult ( a ) : NEW_LINE INDENT pow = power ( a ) NEW_LINE max = 0 NEW_LINE for j in range ( pow ) : NEW_LINE INDENT max = max * 10 + 9 NEW_LINE DEDENT return a * ( max - a ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT l = int ( a ) NEW_LINE r = int ( a ) NEW_LINE res = 0 NEW_LINE maxxes = [ ] NEW_LINE temp = 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT temp = temp * 10 + 9 NEW_LINE maxxes . append ( temp / 2 * ( temp - temp / 2 ) ) NEW_LINE DEDENT res = max ( mult ( l ) , res ) NEW_LINE res = max ( mult ( r ) , res ) NEW_LINE temp = 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT temp = temp * 10 + 9 NEW_LINE if l <= temp / 2 <= r : NEW_LINE INDENT res = max ( maxxes [ i ] , res ) NEW_LINE DEDENT DEDENT print ( res ) NEW_LINE DEDENT DEDENT
def main ( * args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT a = [ None ] * n NEW_LINE print ( a ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT key = a [ i ] NEW_LINE j = i - 1 NEW_LINE while j >= 0 and a [ j ] > key : NEW_LINE INDENT a [ j + 1 ] = a [ j ] NEW_LINE j -= 1 NEW_LINE DEDENT a [ j + 1 ] = key NEW_LINE print ( a ) NEW_LINE DEDENT def print_array ( a ) : NEW_LINE INDENT for i in range ( len ( a ) - 1 ) : NEW_LINE INDENT print ( a [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( a [ - 1 ] ) NEW_LINE DEDENT DEDENT
def is_perfect_square ( x ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE math = math NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = '111111101010101111100101001111111 ▁ 100000100000000001010110001000001 ▁ 101110100110110000011010001011101 ▁ 101110101011001001111101001011101 ▁ 10111010101010101010101010101010101111111 ▁ 000000001111101111100111100000000 ▁ 100010111100100001011110111111001 ▁ 1101110011111111001000010001010101100 ▁ 0111001110100001010001110100010101010 ▁ 011110000110001111110101100000011 ▁ 111111111111111000111001001011000 ▁ 111000010111010011010011010100100 ▁ 1010101000101100101010101010000010 ▁ 101100000101010001111101000000000 ▁ 000010100011001101000111101011010 ▁ 101001001111101111000101010001110 ▁ 101101111111000100100001110001000 ▁ 000010011000100110000011010000010 ▁ 001101101001101110010010011011000 ▁ 0111010110100010001111010111101011110101111111000 ▁ 001000111011100001010111110000 ▁ 000000001110010110100010100010110 ▁ 111111101000101111011000110101011010 ▁ 100000100111010101111100100011011 ▁ 10111011010000101000111111000 ▁ 101110100011010010010111111011010 ▁ 1000001001100110011001111100111100000 ▁ 111111101101000101001101110010001' NEW_LINE s = s . split ( ) NEW_LINE x = int ( s [ 0 ] ) NEW_LINE y = int ( s [ 1 ] ) NEW_LINE print ( s [ x ] [ y ] , end = ' ▁ ' ) NEW_LINE DEDENT
def new_class37 ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE p = 1 NEW_LINE while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE count = 0 NEW_LINE x = n NEW_LINE if n < 10 : NEW_LINE INDENT print ( n ) NEW_LINE continue NEW_LINE DEDENT while x > 0 : NEW_LINE INDENT count += 1 NEW_LINE x //= 10 NEW_LINE DEDENT first = 0 NEW_LINE while count > 0 : NEW_LINE INDENT first = first * 10 + 1 NEW_LINE count -= 1 NEW_LINE DEDENT sum = 0 NEW_LINE if first <= n : NEW_LINE INDENT sum += n / first NEW_LINE DEDENT first //= 10 NEW_LINE while first > 0 : NEW_LINE INDENT sum += 9 NEW_LINE first //= 10 NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT DEDENT
def div_sum ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT sum = sum + i + n / i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def find_y ( x ) : NEW_LINE INDENT import math NEW_LINE if x > 2 : NEW_LINE INDENT return x - 2 NEW_LINE DEDENT return x + 2 NEW_LINE DEDENT
def mod_fact ( n , m ) : NEW_LINE INDENT mod = 1000000007 NEW_LINE result = 1 NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT result = ( result * i ) % mod NEW_LINE DEDENT return result NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE try : NEW_LINE INDENT a = open ( " / dev / urandom " ) NEW_LINE n = int ( a . read ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( " Error ▁ opening ▁ file " ) NEW_LINE return NEW_LINE DEDENT A = [ None ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT A [ i ] = a . read ( ) NEW_LINE DEDENT minj = None NEW_LINE count = 0 NEW_LINE for i in range ( 0 , n - 2 + 1 ) : NEW_LINE INDENT minj = i NEW_LINE c = 0 NEW_LINE for j in range ( i + 1 , n - 1 + 1 ) : NEW_LINE INDENT if A [ j ] < A [ minj ] : NEW_LINE INDENT minj = j NEW_LINE c = 1 NEW_LINE DEDENT DEDENT if c == 1 : NEW_LINE INDENT x = A [ i ] NEW_LINE A [ i ] = A [ minj ] NEW_LINE A [ minj ] = x NEW_LINE count += 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( A [ i ] , end = " ▁ " ) NEW_LINE if i < n - 1 : NEW_LINE INDENT print ( " ▁ " , end = " ▁ " ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE print ( count ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE w = sys . maxsize NEW_LINE h = sys . maxsize NEW_LINE map = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE v = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE for i in range ( 1 , h + 1 ) : NEW_LINE INDENT for j in range ( 1 , w + 1 ) : NEW_LINE INDENT map [ i ] [ j ] = sys . maxsize == 1 NEW_LINE DEDENT DEDENT print ( slove ( 0 , 0 ) ) NEW_LINE def slove ( y , x ) : NEW_LINE INDENT v [ y ] [ x ] = True NEW_LINE res = 0 NEW_LINE for i in range ( 6 ) : NEW_LINE INDENT ny = y + dy [ i ] NEW_LINE nx = x + ( dx1 [ i ] if y % 2 == 1 else dx2 [ i ] ) NEW_LINE if not is_ok ( ny , nx ) : NEW_LINE INDENT continue NEW_LINE DEDENT if map [ ny ] [ nx ] : NEW_LINE INDENT res += 1 NEW_LINE continue NEW_LINE DEDENT if v [ ny ] [ nx ] : NEW_LINE INDENT continue NEW_LINE DEDENT res += slove ( ny , nx ) NEW_LINE DEDENT return res NEW_LINE DEDENT def is_ok ( ny , nx ) : NEW_LINE INDENT if 0 <= ny <= h + 1 and 0 <= nx <= w + 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT h , w = h , w NEW_LINE map = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE v = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE dy = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE v [ dy ] = True NEW_LINE dx1 = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE dx2 = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE dx2 = np . zeros ( ( h + 2 , w + 2 ) ) NEW_LINE v [ dy ] = True NEW_LINE v [ dy ] = True NEW_LINE return map , v NEW_LINE DEDENT
def prepformerge ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE f . readline ( ) . strip ( ) . split ( ' ▁ ' ) NEW_LINE n = int ( f . readline ( ) ) NEW_LINE lists = [ ] NEW_LINE a = [ 0 ] * ( n + 1 ) NEW_LINE f = open ( f , ' r ' ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a [ i ] = int ( f . readline ( ) ) NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if i == 1 : NEW_LINE INDENT start = [ ] NEW_LINE start . append ( a [ i ] ) NEW_LINE lists . append ( start ) NEW_LINE DEDENT else : NEW_LINE INDENT lo = 0 NEW_LINE hi = len ( lists ) - 1 NEW_LINE if lists [ hi ] [ - 1 ] > a [ i ] : NEW_LINE INDENT start = [ ] NEW_LINE start . append ( a [ i ] ) NEW_LINE lists . append ( start ) NEW_LINE DEDENT else : NEW_LINE INDENT while lo != hi : NEW_LINE INDENT mid = ( lo + hi ) // 2 NEW_LINE if lists [ mid ] [ - 1 ] < a [ i ] : NEW_LINE INDENT hi = mid NEW_LINE DEDENT else : NEW_LINE INDENT lo = mid + 1 NEW_LINE DEDENT DEDENT lists [ lo ] . append ( a [ i ] ) NEW_LINE DEDENT DEDENT DEDENT for lis in lists : NEW_LINE INDENT for i in lis : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT
def circlearea ( a , b ) : NEW_LINE INDENT if a < 0 or b < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT A = float ( ( 3.14 * pow ( a , 2 ) * pow ( b , 2 ) ) / ( 4 * ( pow ( a , 2 ) + pow ( b , 2 ) ) ) ) NEW_LINE return A NEW_LINE DEDENT
def GFG ( arr , length , s ) : NEW_LINE INDENT for i in range ( 1 , ( pow ( 2 , length ) + 1 ) + 1 ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( length ) : NEW_LINE INDENT if ( ( i >> j ) & 1 ) % 2 == 1 : NEW_LINE INDENT sum += arr [ j ] NEW_LINE DEDENT DEDENT if sum == s : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( " NO " ) NEW_LINE DEDENT
def K_string ( s , k ) : NEW_LINE INDENT n = len ( s ) NEW_LINE fre = [ 0 ] * 26 NEW_LINE for c in s : NEW_LINE INDENT fre [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT data = " " NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT if fre [ i ] % k == 0 : NEW_LINE INDENT x = fre [ i ] // k NEW_LINE while x != 0 : NEW_LINE INDENT data += chr ( i ) + ord ( ' a ' ) NEW_LINE x -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return " - 1" NEW_LINE DEDENT DEDENT return data NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import list NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return math NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy . random NEW_LINE import numpy . math as np NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sc = np . random . random ( ) NEW_LINE for a , b , n in np . ndenumerate ( sc ) : NEW_LINE INDENT c = np . float ( ( a / b ) ) NEW_LINE f = [ ] NEW_LINE idx = c . find ( " . " ) NEW_LINE f . append ( np . int ( c [ idx - 1 : idx ] ) ) NEW_LINE for i in range ( 1 , min ( 200 , len ( c [ idx + 1 ] ) + 1 ) ) : NEW_LINE INDENT f . append ( np . int ( c [ idx + i : idx + i + 1 ] ) ) NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT res += f [ i ] NEW_LINE DEDENT print ( res ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT nodec = True NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if a [ i ] <= a [ i - 1 ] : NEW_LINE INDENT nodec = False NEW_LINE DEDENT DEDENT if nodec : NEW_LINE INDENT print ( 1 ) NEW_LINE return NEW_LINE DEDENT m = 500 NEW_LINE l , r = 1 , 210000 NEW_LINE mid = 2 NEW_LINE dec = [ 0 ] * m NEW_LINE out : NEW_LINE INDENT while r - l > 1 : NEW_LINE INDENT mid = ( l + r ) // 2 NEW_LINE dec = [ 1 ] * m NEW_LINE nout : NEW_LINE INDENT for i in range ( 1 , n ) : NEW_LINE INDENT if a [ i ] <= a [ i - 1 ] < m : NEW_LINE INDENT if dec [ a [ i ] - 1 ] < mid : NEW_LINE INDENT dec [ a [ i ] - 1 ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT pos = a [ i ] - 1 NEW_LINE while pos > 0 : NEW_LINE INDENT dec [ pos - 1 ] += 1 NEW_LINE for j in range ( pos , m ) : NEW_LINE INDENT dec [ j ] = 1 NEW_LINE DEDENT if dec [ pos - 1 ] <= mid : NEW_LINE INDENT continue NEW_LINE DEDENT pos -= 1 NEW_LINE DEDENT DEDENT l = mid NEW_LINE continue NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for j in range ( a [ i ] - 1 , m ) : NEW_LINE INDENT dec [ j ] = 1 NEW_LINE DEDENT DEDENT DEDENT r = mid NEW_LINE DEDENT print ( r ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE while True : NEW_LINE INDENT try : NEW_LINE INDENT line = None NEW_LINE lines = f . readline ( ) . strip ( ) . split ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT lines = line . split ( ) NEW_LINE DEDENT N = int ( lines [ 0 ] ) NEW_LINE K = int ( lines [ 1 ] ) NEW_LINE if N == 0 and K == 0 : NEW_LINE INDENT return NEW_LINE DEDENT line = f . readline ( ) . strip ( ) NEW_LINE lines = line . split ( ) NEW_LINE bloodAmt = [ 0 ] * K NEW_LINE for i in range ( K ) : NEW_LINE INDENT bloodAmt [ i ] = int ( lines [ i ] ) NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT line = f . readline ( ) . strip ( ) NEW_LINE lines = line . split ( ) NEW_LINE for j in range ( K ) : NEW_LINE INDENT bloodAmt [ j ] -= int ( lines [ j ] ) NEW_LINE DEDENT DEDENT for i in range ( K ) : NEW_LINE INDENT if bloodAmt [ i ] < 0 : NEW_LINE INDENT print ( " No " ) NEW_LINE break NEW_LINE DEDENT if i == K - 1 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def max_freq ( s , a , b ) : NEW_LINE INDENT import sys NEW_LINE fre = [ 0 ] * 10 NEW_LINE n = len ( s ) NEW_LINE if a > b : NEW_LINE INDENT temp = a NEW_LINE a = b NEW_LINE b = temp NEW_LINE DEDENT for c in s : NEW_LINE INDENT fre [ ord ( c ) - ord ( '0' ) ] += 1 NEW_LINE DEDENT if not fre [ a ] and not fre [ b ] : NEW_LINE INDENT return - 1 NEW_LINE DEDENT elif fre [ a ] >= fre [ b ] : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return b NEW_LINE DEDENT DEDENT
def max_zeros ( n ) : NEW_LINE INDENT if n == 0 or ( n & ( n - 1 ) ) == 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT b = 4 NEW_LINE set_bit , prev , i = 1 , 0 , i NEW_LINE for i in range ( 1 , b * 8 + 1 ) : NEW_LINE INDENT prev += 1 NEW_LINE if n & set_bit == set_bit : NEW_LINE INDENT set_bit = set_bit << 1 NEW_LINE break NEW_LINE DEDENT set_bit = set_bit << 1 NEW_LINE DEDENT max_0 , cur = int ( prev ) , prev NEW_LINE for j in range ( i + 1 , b * 8 + 1 ) : NEW_LINE INDENT cur += 1 NEW_LINE if n & set_bit == set_bit : NEW_LINE INDENT if max_0 < ( cur - prev - 1 ) : NEW_LINE INDENT max_0 = cur - prev - 1 NEW_LINE DEDENT prev = cur NEW_LINE DEDENT set_bit = set_bit << 1 NEW_LINE DEDENT return max_0 NEW_LINE DEDENT
def sum_powers_k ( n , k ) : NEW_LINE INDENT import math NEW_LINE sum , num = 0 , 1 NEW_LINE while num <= n : NEW_LINE INDENT sum += num NEW_LINE num *= k NEW_LINE DEDENT return sum NEW_LINE DEDENT
def XandYandZintercept ( A , B , C , D ) : NEW_LINE INDENT import numpy as np NEW_LINE rslt = np . zeros ( ( 3 , 3 ) ) NEW_LINE x = - D / A NEW_LINE y = - D / B NEW_LINE z = - D / C NEW_LINE rslt [ 0 ] = x NEW_LINE rslt [ 1 ] = y NEW_LINE rslt [ 2 ] = z NEW_LINE return rslt NEW_LINE DEDENT
def max_sum ( a , n ) : NEW_LINE INDENT import math NEW_LINE l = [ ] NEW_LINE s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s += abs ( a [ i ] ) NEW_LINE if a [ i ] >= 0 : NEW_LINE INDENT continue NEW_LINE DEDENT if i == 0 : NEW_LINE INDENT l . append ( i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT l . append ( i + 1 ) NEW_LINE l . append ( i ) NEW_LINE DEDENT DEDENT print ( s ) NEW_LINE for i in l : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def GFG ( data ) : NEW_LINE INDENT global data NEW_LINE global data NEW_LINE global data NEW_LINE global data NEW_LINE global data NEW_LINE global data NEW_LINE global data NEW_LINE global data NEW_LINE global data NEW_LINE global data NEW_LINE data = [ ] NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE data . append ( data ) NEW_LINE return data NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE class B ( string ) : NEW_LINE INDENT def do_it ( self ) : NEW_LINE INDENT n = len ( self . s ) NEW_LINE data = self . s [ n : ] NEW_LINE ctr = data . upper ( ) NEW_LINE m = len ( self . s ) NEW_LINE num = n NEW_LINE s = [ ] NEW_LINE for c in self . s : NEW_LINE INDENT if m == 0 : NEW_LINE INDENT s . append ( c ) NEW_LINE DEDENT elif m < num : NEW_LINE INDENT if c == '0' : NEW_LINE INDENT s . append ( 1 ) NEW_LINE m -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT s . append ( 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if c == '0' : NEW_LINE INDENT s . append ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT s . append ( 0 ) NEW_LINE DEDENT DEDENT num -= 1 NEW_LINE DEDENT print ( s ) NEW_LINE DEDENT DEDENT return B NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import sys NEW_LINE m = n NEW_LINE while n != 0 : NEW_LINE INDENT r = n % 10 NEW_LINE if r > 0 : NEW_LINE INDENT if ( m % r ) != 0 : NEW_LINE INDENT return False NEW_LINE DEDENT n //= 10 NEW_LINE DEDENT DEDENT return True NEW_LINE def count ( l , r ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT if check ( i ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT l , r = 10 , 20 NEW_LINE print ( count ( 10 , 20 ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( agrs ) : NEW_LINE INDENT import sys NEW_LINE a = sys . stdin . read ( ) NEW_LINE b = sys . stdin . read ( ) NEW_LINE if a == b : NEW_LINE INDENT print ( a * 10 + 1 , ( a * 10 + 2 ) ) NEW_LINE DEDENT elif a + 1 == b : NEW_LINE INDENT print ( a , b ) NEW_LINE DEDENT elif a + 1 == b * 10 : NEW_LINE INDENT print ( a , b * 10 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT
def python_application115 ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT num = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT num = 0 NEW_LINE DEDENT arr = [ ] NEW_LINE arra = [ ] NEW_LINE max_dif = 0 NEW_LINE max_all = 1000000000 NEW_LINE for i in range ( num ) : NEW_LINE INDENT h = sys . stdin . readline ( ) NEW_LINE arr . append ( h ) NEW_LINE arra . append ( h ) NEW_LINE DEDENT for i in range ( 1 , num - 1 ) : NEW_LINE INDENT for j in range ( len ( arr ) - 1 ) : NEW_LINE INDENT if j == i : NEW_LINE INDENT max_dif = max ( abs ( arr [ j - 1 ] - arr [ j + 1 ] ) , max_dif ) NEW_LINE DEDENT else : NEW_LINE INDENT max_dif = max ( abs ( arr [ j ] - arr [ j + 1 ] ) , max_dif ) NEW_LINE DEDENT DEDENT max_all = min ( max_all , max_dif ) NEW_LINE max_dif = 0 NEW_LINE DEDENT print ( max_all ) NEW_LINE DEDENT
def hw19 ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT inp = list ( sys . stdin . readlines ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT i = int ( str ( inp [ - 1 ] ) ) NEW_LINE if len ( inp ) > 1 and ( int ( str ( inp [ - 2 ] ) ) * 10 + i ) % 4 == 0 : NEW_LINE INDENT print ( 4 ) NEW_LINE DEDENT elif len ( inp ) == 1 and i % 4 == 0 : NEW_LINE INDENT print ( 4 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT DEDENT
def pre5 ( args ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE class pre5 ( sys . stdout ) : NEW_LINE INDENT class fastfile ( sys . stdout ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdout . write ( ' ' ) NEW_LINE self . stream = None NEW_LINE self . stream = None NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT while self . stream is None or not self . stream . eof : NEW_LINE INDENT try : NEW_LINE INDENT self . stream = stream . next ( ) NEW_LINE DEDENT except string . ParseError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return self . stream . getvalue ( ) NEW_LINE DEDENT def randint ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT def long ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT def double ( self ) : NEW_LINE INDENT return float ( self . stream . read ( ) ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = ' ' NEW_LINE try : NEW_LINE INDENT data = self . stream . readline ( ) NEW_LINE DEDENT except string . ParseError : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT obj = fastfile ( ) NEW_LINE k = obj . __next__ ( ) NEW_LINE data = obj . next ( ) . split ( ' ▁ ' ) NEW_LINE n = len ( data ) NEW_LINE data . sort ( ) NEW_LINE sum = 0 NEW_LINE for i in data : NEW_LINE INDENT sum += ord ( i ) - ord ( '0' ) NEW_LINE DEDENT idx , ans = 0 , 0 NEW_LINE while idx < n and sum < k : NEW_LINE INDENT sum -= data [ idx ] - ord ( '0' ) NEW_LINE data [ idx ] = '9' NEW_LINE sum += 9 NEW_LINE idx += 1 NEW_LINE ans += 1 NEW_LINE DEDENT out . write ( ans ) NEW_LINE DEDENT DEDENT return pre5 NEW_LINE DEDENT
def B940 ( ) : NEW_LINE INDENT import string NEW_LINE N = int ( sys . stdin . read ( ) ) NEW_LINE K = int ( sys . stdin . read ( ) ) NEW_LINE A = long ( sys . stdin . read ( ) ) NEW_LINE B = long ( sys . stdin . read ( ) ) NEW_LINE cost = 0 NEW_LINE while N != 1 : NEW_LINE INDENT if N < K : NEW_LINE INDENT cost += ( N - 1 ) * A NEW_LINE break NEW_LINE DEDENT r = N % K NEW_LINE cost += r * A NEW_LINE N -= r NEW_LINE if B >= ( N - N // K ) * A : NEW_LINE INDENT cost += ( N - 1 ) * A NEW_LINE break NEW_LINE DEDENT cost += B NEW_LINE N //= K NEW_LINE DEDENT print ( cost ) NEW_LINE DEDENT
def digit_sum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE while n > 0 or sum > 9 : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT n = sum NEW_LINE sum = 0 NEW_LINE DEDENT sum += n % 10 NEW_LINE n //= 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n , m = int ( raw_input ( ) ) , int ( raw_input ( ) ) NEW_LINE a , b = string . split ( a ) , string . split ( b ) NEW_LINE dp = np . zeros ( ( n + 1 , m + 1 ) ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , m + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i ] [ j ] , max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) - 1 ) NEW_LINE if a [ i - 1 ] == b [ j - 1 ] : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] + 2 ) NEW_LINE DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , m + 1 ) : NEW_LINE INDENT ans = max ( ans , dp [ i ] [ j ] ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE np . testing as np . testing as np NEW_LINE import testing as np NEW_LINE np . testing . enable ( ) NEW_LINE np . testing . enable ( ) NEW_LINE np . testing . enable ( ) NEW_LINE np . testing . enable ( ) NEW_LINE
def missing_num ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE arr = [ int ( i ) for i in arr ] NEW_LINE minvalue = min ( arr ) NEW_LINE xornum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT xornum ^= ( minvalue ) ^ arr [ i ] NEW_LINE minvalue += 1 NEW_LINE DEDENT return xornum ^ minvalue NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT res = [ ] NEW_LINE if n % 2 == 0 : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT res . append ( chr ( 48 + i + 2 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( chr ( 48 + i ) ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT for i in range ( n - 2 ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT res . append ( chr ( 48 + i + 2 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( chr ( 48 + i ) ) NEW_LINE DEDENT DEDENT res . append ( ' \ 0' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( res [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def min_operations ( a , n , K ) : NEW_LINE INDENT d = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT try : NEW_LINE INDENT if d [ a [ i ] ] : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT d [ a [ i ] ] = True NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT b . append ( a [ i ] & K ) NEW_LINE DEDENT d = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] != b [ i ] : NEW_LINE INDENT try : NEW_LINE INDENT d [ b [ i ] ] = True NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT try : NEW_LINE INDENT if d [ a [ i ] ] : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT d = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT try : NEW_LINE INDENT if d [ b [ i ] ] : NEW_LINE INDENT return 2 NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT d [ b [ i ] ] = True NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE global B , W NEW_LINE global count_b , count_w NEW_LINE dx = [ 1 , - 1 , 0 , 0 ] NEW_LINE dy = [ 0 , 0 , 1 , - 1 ] NEW_LINE from char , to = [ 0 , 0 , 1 , - 1 ] NEW_LINE def solve ( ) : NEW_LINE INDENT w = len ( sys . stdin . readline ( ) ) NEW_LINE while w != 0 : NEW_LINE INDENT h = len ( sys . stdin . readline ( ) ) NEW_LINE grid = [ ] NEW_LINE for line in sys . stdin . readlines ( ) : NEW_LINE INDENT grid . append ( line . decode ( ' utf - 8' ) ) NEW_LINE DEDENT count_b = 0 NEW_LINE count_w = 0 NEW_LINE for i in range ( h ) : NEW_LINE INDENT for j in range ( w ) : NEW_LINE INDENT if grid [ i ] [ j ] == ' . ' : NEW_LINE INDENT B = False NEW_LINE W = False NEW_LINE count_grid = 0 NEW_LINE dfs ( j , i ) NEW_LINE if B and not W : NEW_LINE INDENT count_b += count_grid NEW_LINE DEDENT if not B and W : NEW_LINE INDENT count_w += count_grid NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( count_b , count_w ) NEW_LINE w = len ( sys . stdin . readline ( ) ) NEW_LINE DEDENT DEDENT def dfs ( x , y ) : NEW_LINE INDENT grid [ y ] [ x ] = ' x ' NEW_LINE count_grid += 1 NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT nx = x + dx [ i ] NEW_LINE ny = y + dy [ i ] NEW_LINE if nx < w and nx >= 0 and ny < h and ny >= 0 : NEW_LINE INDENT if grid [ ny ] [ nx ] == ' B ' : NEW_LINE INDENT B = True NEW_LINE DEDENT elif grid [ ny ] [ nx ] == ' W ' : NEW_LINE INDENT W = True NEW_LINE DEDENT elif grid [ ny ] [ nx ] == ' . ' : NEW_LINE INDENT dfs ( nx , ny ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT while t > 0 : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE if 360 % ( 180 - n ) == 0 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def p493 ( ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import traceback NEW_LINE import sys NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy = np NEW_LINE def f ( x ) : NEW_LINE INDENT return x NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . cos ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . cos ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . cos ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . cos ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . cos ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . cos ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . cos ( x ) NEW_LINE DEDENT def g ( x ) : NEW_LINE INDENT return x + math . sin ( x ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import termios NEW_LINE import sys NEW_LINE import termios NEW_LINE import sys NEW_LINE if args [ 0 ] == ' - ' : NEW_LINE INDENT landings = int ( sys . stdin . read ( ) ) NEW_LINE time = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT else : NEW_LINE INDENT landings = int ( sys . stdin . read ( ) ) NEW_LINE time = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT minutes = [ ] NEW_LINE for i in range ( landings ) : NEW_LINE INDENT hours = int ( sys . stdin . read ( ) ) * 60 NEW_LINE minute = int ( sys . stdin . read ( ) ) NEW_LINE minutes . append ( minute + hours ) NEW_LINE DEDENT if time + 1 <= minutes [ 0 ] : NEW_LINE INDENT print ( 0 , 0 ) NEW_LINE return NEW_LINE DEDENT for i in range ( landings - 1 ) : NEW_LINE INDENT if minutes [ i + 1 ] - minutes [ i ] >= 2 * time + 2 : NEW_LINE INDENT flight = minutes [ i ] + time + 1 NEW_LINE h = flight // 60 NEW_LINE m = flight % 60 NEW_LINE print ( h , m ) NEW_LINE return NEW_LINE DEDENT DEDENT flight = minutes [ landings - 1 ] + time + 1 NEW_LINE h = flight // 60 NEW_LINE m = flight % 60 NEW_LINE print ( h , m ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT k = len ( sys . argv ) NEW_LINE for i in range ( k ) : NEW_LINE INDENT A = sys . stdin . read ( ) NEW_LINE B = sys . stdin . read ( ) NEW_LINE if B == 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE print ( ' % d ▁ % d ▁ % d ' % ( A , A * B , ( B + 1 ) * A ) ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import core as np NEW_LINE import numpy . core as np NEW_LINE import core as np NEW_LINE import numpy . core as np NEW_LINE import core as np NEW_LINE import core as np NEW_LINE import core as np NEW_LINE DEDENT
def find_max_value ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE if n < 4 : NEW_LINE INDENT print ( " The ▁ array ▁ should ▁ have " " ▁ atleast ▁ 4 ▁ elements " ) NEW_LINE DEDENT table1 = np . zeros ( n + 1 ) NEW_LINE table2 = np . zeros ( n ) NEW_LINE table3 = np . zeros ( n - 1 ) NEW_LINE table4 = np . zeros ( n - 2 ) NEW_LINE table1 [ : ] = np . inf NEW_LINE table2 [ : ] = np . inf NEW_LINE table3 [ : ] = np . inf NEW_LINE table4 [ : ] = np . inf NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] ) NEW_LINE DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) NEW_LINE DEDENT for i in range ( n - 3 , - 1 , - 1 ) : NEW_LINE INDENT table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) NEW_LINE DEDENT for i in range ( n - 4 , - 1 , - 1 ) : NEW_LINE INDENT table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) NEW_LINE DEDENT return table4 [ 0 ] NEW_LINE DEDENT
def centered_hexagonal ( n ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sys . stdout . write ( 3 * i * ( i - 1 ) + 1 + ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE global ABC NEW_LINE ABC = [ " A " , " B " , " C " ] NEW_LINE def dfs ( S ) : NEW_LINE INDENT if S == " ABC " : NEW_LINE INDENT return True NEW_LINE DEDENT cnt = 0 NEW_LINE f = False NEW_LINE pos = [ False ] * len ( S ) NEW_LINE for j in range ( 0 , len ( S ) + 3 ) : NEW_LINE INDENT if S [ j : j + 3 ] == " ABC " : NEW_LINE INDENT pos [ j ] = True NEW_LINE cnt += 1 NEW_LINE DEDENT DEDENT if cnt < 1 : NEW_LINE INDENT return False NEW_LINE DEDENT out : NEW_LINE INDENT for i in range ( 3 ) : NEW_LINE INDENT for j in range ( len ( S ) ) : NEW_LINE INDENT if S [ j ] == " A " + str ( i ) : NEW_LINE INDENT if j - i < 0 or not pos [ j - i ] : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT DEDENT DEDENT next = S . replace ( " ABC " , ABC [ i ] ) NEW_LINE f |= dfs ( str ( next ) ) NEW_LINE DEDENT return f NEW_LINE DEDENT def tr ( * args ) : NEW_LINE INDENT print ( " ▁ " . join ( str ( x ) for x in args ) ) NEW_LINE DEDENT return tr NEW_LINE DEDENT
def code_ninety_seven ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE m = len ( sys . stdin ) NEW_LINE n = len ( sys . stdin ) NEW_LINE array_one = [ [ ] for i in range ( m ) ] NEW_LINE for data in sys . stdin : NEW_LINE INDENT if data . find ( ' ▁ ' ) != - 1 : NEW_LINE INDENT data = data . strip ( ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for j in range ( n ) : NEW_LINE INDENT array_one [ i ] [ j ] = data [ j ] NEW_LINE DEDENT sumr = 0 NEW_LINE sumc = 0 NEW_LINE count1 = 0 NEW_LINE count2 = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if array_one [ i ] [ j ] == 66 : NEW_LINE INDENT sumr += i + 1 NEW_LINE count1 += 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if array_one [ i ] [ j ] == 66 : NEW_LINE INDENT sumc += j + 1 NEW_LINE count2 += 1 NEW_LINE DEDENT DEDENT DEDENT print ( sumr / count1 , sumc / count2 ) NEW_LINE DEDENT
def diagonal_minmax ( mat ) : NEW_LINE INDENT n = len ( mat ) NEW_LINE if not n : NEW_LINE INDENT return NEW_LINE DEDENT principal_min , principal_max = mat [ 0 ] [ 0 ] , mat [ 0 ] [ 0 ] NEW_LINE secondary_min , secondary_max = mat [ n - 1 ] [ 0 ] , mat [ n - 1 ] [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT if mat [ i ] [ j ] < principal_min : NEW_LINE INDENT principal_min = mat [ i ] [ j ] NEW_LINE DEDENT if mat [ i ] [ j ] > principal_max : NEW_LINE INDENT principal_max = mat [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT if ( i + j ) == ( n - 1 ) : NEW_LINE INDENT if mat [ i ] [ j ] < secondary_min : NEW_LINE INDENT secondary_min = mat [ i ] [ j ] NEW_LINE DEDENT if mat [ i ] [ j ] > secondary_max : NEW_LINE INDENT secondary_max = mat [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT print ( " Principal ▁ Diagonal ▁ Smallest ▁ Element : ▁ ▁ % d " % principal_min ) NEW_LINE print ( " Principal ▁ Diagonal ▁ Greatest ▁ Element ▁ : ▁ % d " % principal_max ) NEW_LINE print ( " Secondary ▁ Diagonal ▁ Smallest ▁ Element : ▁ % d " % secondary_min ) NEW_LINE print ( " Secondary ▁ Diagonal ▁ Greatest ▁ Element : ▁ % d " % secondary_max ) NEW_LINE def main ( ) : NEW_LINE INDENT matrix = [ [ 1 , 2 , 3 , 4 , - 10 ] , [ 5 , 6 , 7 , 8 , 6 ] , [ 1 , 2 , 11 , 3 , 4 ] , [ 5 , 6 , 70 , 5 , 8 ] , [ 4 , 9 , 7 , 1 , - 5 ] ] NEW_LINE return matrix NEW_LINE DEDENT return None NEW_LINE DEDENT
def diagonal_minmax ( mat ) : NEW_LINE INDENT n = len ( mat ) NEW_LINE if not n : NEW_LINE INDENT return NEW_LINE DEDENT principal_min , principal_max = mat [ 0 ] [ 0 ] , mat [ 0 ] [ 0 ] NEW_LINE secondary_min , secondary_max = mat [ n - 1 ] [ 0 ] , mat [ n - 1 ] [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if mat [ i ] [ i ] < principal_min : NEW_LINE INDENT principal_min = mat [ i ] [ i ] NEW_LINE DEDENT if mat [ i ] [ i ] > principal_max : NEW_LINE INDENT principal_max = mat [ i ] [ i ] NEW_LINE DEDENT if mat [ n - 1 - i ] [ i ] < secondary_min : NEW_LINE INDENT secondary_min = mat [ n - 1 - i ] [ i ] NEW_LINE DEDENT if mat [ n - 1 - i ] [ i ] > secondary_max : NEW_LINE INDENT secondary_max = mat [ n - 1 - i ] [ i ] NEW_LINE DEDENT DEDENT print ( " Principal ▁ Diagonal ▁ Smallest ▁ Element : ▁ ▁ % d " % principal_min ) NEW_LINE print ( " Principal ▁ Diagonal ▁ Greatest ▁ Element ▁ : ▁ % d " % principal_max ) NEW_LINE print ( " Secondary ▁ Diagonal ▁ Smallest ▁ Element : ▁ % d " % secondary_min ) NEW_LINE print ( " Secondary ▁ Diagonal ▁ Greatest ▁ Element : ▁ % d " % secondary_max ) NEW_LINE DEDENT
def average_odd ( n ) : NEW_LINE INDENT import sys NEW_LINE if n % 2 == 0 : NEW_LINE INDENT print ( ' Invalid ▁ Input ' ) NEW_LINE return - 1 NEW_LINE DEDENT sum , count = 0 , 0 NEW_LINE while n >= 1 : NEW_LINE INDENT count += 1 NEW_LINE sum += n NEW_LINE n = n - 2 NEW_LINE DEDENT return sum // count NEW_LINE DEDENT
def average_odd ( n ) : NEW_LINE INDENT import sys NEW_LINE if n % 2 == 0 : NEW_LINE INDENT print ( ' Invalid ▁ Input ' ) NEW_LINE return - 1 NEW_LINE DEDENT return ( n + 1 ) // 2 NEW_LINE DEDENT
def is_same_as_int ( arr , n ) : NEW_LINE INDENT import re NEW_LINE us = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT us . add ( arr [ i ] ) NEW_LINE DEDENT count = 1 NEW_LINE curr_ele = arr [ 0 ] - 1 NEW_LINE while curr_ele in us : NEW_LINE INDENT count += 1 NEW_LINE curr_ele -= 1 NEW_LINE DEDENT curr_ele = arr [ 0 ] + 1 NEW_LINE while curr_ele in us : NEW_LINE INDENT count += 1 NEW_LINE curr_ele += 1 NEW_LINE DEDENT return ( count == ( len ( us ) ) ) NEW_LINE DEDENT
def get_left_most_zero ( zero ) : NEW_LINE INDENT if zero == None : NEW_LINE INDENT return - 1 NEW_LINE DEDENT zero . pop ( ) NEW_LINE return 0 NEW_LINE DEDENT def get_left_most_one ( one ) : NEW_LINE INDENT if one == None : NEW_LINE INDENT return - 1 NEW_LINE DEDENT one . pop ( ) NEW_LINE return 1 NEW_LINE DEDENT def get_left_most_element ( zero , one ) : NEW_LINE INDENT if zero == None and one == None : NEW_LINE INDENT return - 1 NEW_LINE DEDENT elif zero == None : NEW_LINE INDENT one . pop ( ) NEW_LINE return 1 NEW_LINE DEDENT elif one == None : NEW_LINE INDENT zero . pop ( ) NEW_LINE return 0 NEW_LINE DEDENT res = ( 0 if zero [ - 1 ] < one [ - 1 ] else 1 ) NEW_LINE if res == 0 : NEW_LINE INDENT zero . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT one . pop ( ) NEW_LINE DEDENT return res NEW_LINE DEDENT def perform_queries ( arr , n , queries , q ) : NEW_LINE INDENT zero = list ( ) NEW_LINE one = list ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == 0 : NEW_LINE INDENT zero . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT one . append ( i ) NEW_LINE DEDENT DEDENT for i in range ( q ) : NEW_LINE INDENT type = queries [ i ] NEW_LINE if type == 1 : NEW_LINE INDENT print ( get_left_most_zero ( zero ) ) NEW_LINE DEDENT elif type == 2 : NEW_LINE INDENT print ( get_left_most_one ( one ) ) NEW_LINE DEDENT elif type == 3 : NEW_LINE INDENT print ( get_left_most_element ( zero , one ) ) NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 1 , 0 , 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE queries = [ 1 , 3 , 1 ] NEW_LINE q = len ( queries ) NEW_LINE return ' ' . join ( sorted ( arr ) ) NEW_LINE DEDENT return main ( args ) NEW_LINE DEDENT
def Vertices ( x , y ) : NEW_LINE INDENT val = abs ( x ) + abs ( y ) NEW_LINE print ( val * ( - 1 if x < 0 else 1 ) , end = ' ▁ ' ) NEW_LINE print ( '0 ▁ ' + str ( val * ( - 1 if y < 0 else 1 ) ) , end = ' ▁ ' ) NEW_LINE DEDENT
def get_sum ( a , n ) : NEW_LINE INDENT P = list ( a ) NEW_LINE P [ 0 ] = a [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT P [ i ] = a [ i ] + P [ i - 1 ] NEW_LINE DEDENT S = P [ n - 1 ] NEW_LINE hash = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT hash [ P [ i ] ] = 1 NEW_LINE DEDENT res = set ( ) NEW_LINE for i in range ( 1 , S + 1 ) : NEW_LINE INDENT if S % i == 0 : NEW_LINE INDENT pres = True NEW_LINE div1 , div2 = i , S // i NEW_LINE for j in range ( div1 , S + 1 , div1 ) : NEW_LINE INDENT if hash [ j ] is None or hash [ j ] != 1 : NEW_LINE INDENT pres = False NEW_LINE break NEW_LINE DEDENT DEDENT if pres and div1 != S : NEW_LINE INDENT res . add ( div1 ) NEW_LINE DEDENT pres = True NEW_LINE for j in range ( S // i , S + 1 , S // i ) : NEW_LINE INDENT if hash [ j ] is None or hash [ j ] != 1 : NEW_LINE INDENT pres = False NEW_LINE break NEW_LINE DEDENT DEDENT if pres and div2 != S : NEW_LINE INDENT res . add ( div2 ) NEW_LINE DEDENT DEDENT DEDENT if len ( res ) == 0 : NEW_LINE INDENT print ( ' - 1' ) NEW_LINE return NEW_LINE DEDENT for i in res : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def original_array ( greater , n ) : NEW_LINE INDENT import numpy as np NEW_LINE temp = [ ] NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT temp . append ( i ) NEW_LINE DEDENT arr = np . zeros ( n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT k = n - greater [ i ] - i NEW_LINE arr [ i ] = temp [ k ] NEW_LINE del temp [ k ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE s , p = string . split ( p ) NEW_LINE k , x , y , ans = len ( s ) , 0 , 0 , 0 NEW_LINE a , b = 0 , 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT p = s [ i ] NEW_LINE for c in s : NEW_LINE INDENT if c == p [ 0 ] : NEW_LINE INDENT x += 1 NEW_LINE DEDENT elif c == p [ 1 ] : NEW_LINE INDENT y += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += min ( x , y ) NEW_LINE x , y = 0 , 0 NEW_LINE DEDENT DEDENT ans += min ( x , y ) NEW_LINE x , y = 0 , 0 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def find_radius ( houses , heaters ) : NEW_LINE INDENT import bisect NEW_LINE heaters . sort ( ) NEW_LINE result = bisect . bisect_left ( heaters , house ) NEW_LINE for house in houses : NEW_LINE INDENT index = bisect . bisect_left ( heaters , house ) NEW_LINE if index < 0 : NEW_LINE INDENT index = - ( index + 1 ) NEW_LINE DEDENT dist1 = house - heaters [ index - 1 ] if index - 1 >= 0 else bisect . bisect_left ( heaters , house ) NEW_LINE dist2 = heaters [ index ] - house if index < len ( heaters ) else bisect . bisect_left ( heaters , house ) NEW_LINE result = max ( result , min ( dist1 , dist2 ) ) NEW_LINE DEDENT return result NEW_LINE DEDENT
def p130 ( ) : NEW_LINE INDENT print ( eval ( ' p130 ( ) ' ) ) NEW_LINE def run ( ) : NEW_LINE INDENT sum = 0 NEW_LINE found = 0 NEW_LINE for i in range ( 7 , 25 , 2 ) : NEW_LINE INDENT if i % 5 != 0 and not math . isnan ( i ) and ( i - 1 ) % eval ( ' p130 ( ) ' ) == 0 : NEW_LINE INDENT sum += i NEW_LINE found += 1 NEW_LINE DEDENT DEDENT return str ( sum ) NEW_LINE DEDENT def find_least_divisible_repunit ( n ) : NEW_LINE INDENT if n % 2 == 0 or n % 5 == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if n > math . pi / 10 : NEW_LINE INDENT raise ValueError ( ' Arithmetic ▁ overflow ' ) NEW_LINE DEDENT sum = 1 NEW_LINE pow = 1 NEW_LINE k = 1 NEW_LINE while sum % n != 0 : NEW_LINE INDENT k += 1 NEW_LINE pow = pow * 10 % n NEW_LINE sum = ( sum + pow ) % n NEW_LINE DEDENT return k NEW_LINE DEDENT return run NEW_LINE DEDENT
def check_recursive ( num , x , k , n ) : NEW_LINE INDENT import math NEW_LINE res = 0 NEW_LINE def check_recursive ( num , x , k , n ) : NEW_LINE INDENT if not x : NEW_LINE INDENT res += 1 NEW_LINE DEDENT r = int ( math . floor ( math . pow ( num , 1.0 / n ) ) ) NEW_LINE for i in range ( k + 1 , r + 1 ) : NEW_LINE INDENT a = x - int ( math . pow ( i , n ) ) NEW_LINE if a >= 0 : NEW_LINE INDENT check_recursive ( num , x - int ( math . pow ( i , n ) ) , i , n ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def check ( x , n ) : NEW_LINE INDENT return check_recursive ( x , x , 0 , n ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT print ( check ( 10 , 2 ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( agrs ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE n = len ( agrs ) NEW_LINE a = [ ] NEW_LINE b = [ ] NEW_LINE total = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( int ( agrs [ i ] ) ) NEW_LINE b . append ( float ( agrs [ i ] ) ) NEW_LINE total += b [ i ] / 2.0 NEW_LINE DEDENT dp = np . zeros ( ( n + 1 , 10001 ) ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT dp [ i ] = - 1 NEW_LINE DEDENT dp [ 0 ] [ 0 ] = total NEW_LINE for i in range ( n ) : NEW_LINE INDENT for k in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT for j in range ( 10001 ) : NEW_LINE INDENT if dp [ k ] [ j ] == - 1 : NEW_LINE INDENT continue NEW_LINE DEDENT dp [ k + 1 ] [ j + a [ i ] ] = float ( max ( dp [ k + 1 ] [ j + a [ i ] ] , dp [ k ] [ j ] + b [ i ] / 2.0 ) ) NEW_LINE DEDENT DEDENT DEDENT max = 0 NEW_LINE for k in range ( 1 , n + 1 ) : NEW_LINE INDENT max = 0 NEW_LINE for j in range ( 10001 ) : NEW_LINE INDENT max = float ( max ) NEW_LINE DEDENT print ( max , end = ' ▁ ' ) NEW_LINE DEDENT print ( max , end = ' ▁ ' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import random NEW_LINE n = random . randint ( 1 , 10000 ) NEW_LINE print ( solve ( n ) ) NEW_LINE def solve ( n ) : NEW_LINE INDENT sum = [ ch - '0' for ch in str ( n ) ] NEW_LINE for i in range ( len ( sum ) - 1 ) : NEW_LINE INDENT sum [ i ] -= 1 NEW_LINE sum [ i + 1 ] += 10 NEW_LINE DEDENT for i in range ( len ( sum ) - 1 , 1 , - 1 ) : NEW_LINE INDENT if sum [ i ] == 19 : NEW_LINE INDENT sum [ i ] -= 10 NEW_LINE sum [ i - 1 ] += 1 NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def squares ( arr ) : NEW_LINE INDENT import math NEW_LINE return ( ( m + a - 1 ) // a ) ** 2 NEW_LINE DEDENT
def two_regular_polygons ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT n , m = n , m NEW_LINE print ( ' YES ' if ( n % m ) == 0 else ' NO ' ) NEW_LINE DEDENT DEDENT
def count_cubes ( a , b ) : NEW_LINE INDENT cnt = 0 NEW_LINE for i in range ( a , b + 1 ) : NEW_LINE INDENT for j in range ( 1 , 2 * j ** 2 + i + 1 ) : NEW_LINE INDENT if j ** 2 == i : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT DEDENT return cnt NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT oddlist = [ 0 ] * 100001 NEW_LINE evenlist = [ 0 ] * 100001 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT v = sys . stdin . read ( ) NEW_LINE if i % 2 == 1 : NEW_LINE INDENT oddlist [ v ] += 1 NEW_LINE DEDENT if i % 2 == 0 : NEW_LINE INDENT evenlist [ v ] += 1 NEW_LINE DEDENT DEDENT max_odd , max_even , secondmax_odd , secondmax_even , count_odd , count_even = 0 , 0 , 0 , 0 , 0 NEW_LINE for i in range ( 1 , 100001 ) : NEW_LINE INDENT max_odd = max ( oddlist [ i ] , max_odd ) NEW_LINE max_even = max ( evenlist [ i ] , max_even ) NEW_LINE DEDENT oddnum , evennum = 0 , 0 NEW_LINE for i in range ( 1 , 100001 ) : NEW_LINE INDENT if oddlist [ i ] == max_odd : NEW_LINE INDENT oddnum = i NEW_LINE count_odd += 1 NEW_LINE DEDENT if evenlist [ i ] == max_even : NEW_LINE INDENT evennum = i NEW_LINE count_even += 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , 100001 ) : NEW_LINE INDENT if oddlist [ i ] != max_odd : NEW_LINE INDENT secondmax_odd = max ( oddlist [ i ] , secondmax_odd ) NEW_LINE DEDENT if evenlist [ i ] != max_even : NEW_LINE INDENT secondmax_even = max ( evenlist [ i ] , secondmax_even ) NEW_LINE DEDENT DEDENT if count_odd >= 2 : NEW_LINE INDENT secondmax_odd = max_odd NEW_LINE DEDENT if count_even >= 2 : NEW_LINE INDENT secondmax_even = max_even NEW_LINE DEDENT for i in range ( 1 , 100001 ) : NEW_LINE INDENT if oddlist [ i ] == max_odd : NEW_LINE INDENT oddnum = i NEW_LINE DEDENT if evenlist [ i ] == max_even : NEW_LINE INDENT evennum = i NEW_LINE DEDENT DEDENT if oddnum == evennum : NEW_LINE INDENT if max_odd > max_even : NEW_LINE INDENT max_even = secondmax_even NEW_LINE DEDENT elif max_odd < max_even : NEW_LINE INDENT max_odd = secondmax_odd NEW_LINE DEDENT else : NEW_LINE INDENT max_even = max ( secondmax_odd , secondmax_even ) NEW_LINE DEDENT DEDENT ans = n - max_odd - max_even NEW_LINE print ( ans ) NEW_LINE DEDENT
def GFG ( str , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n + 1 ) : NEW_LINE INDENT print ( str [ i : j ] ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def angleextcycquad ( z ) : NEW_LINE INDENT import sys NEW_LINE sys . stdout . write ( " The ▁ exterior ▁ angle ▁ of ▁ the " " ▁ cyclic ▁ quadrilateral ▁ is ▁ % d ▁ degrees \n " % z ) NEW_LINE DEDENT
def GFG ( data , patt ) : NEW_LINE INDENT min_index = sys . maxsize NEW_LINE m = len ( data ) NEW_LINE n = len ( patt ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if patt [ i ] == data [ j ] and j < min_index : NEW_LINE INDENT min_index = j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT if min_index != sys . maxsize : NEW_LINE INDENT print ( " Minimum ▁ Index ▁ Character ▁ = ▁ % s " % data [ min_index ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No ▁ character ▁ present " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT for a , b in zip ( n , sys . stdin . readline ( ) . strip ( ) ) : NEW_LINE INDENT if b < a : NEW_LINE INDENT print ( " Happy ▁ Alex " ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( " Poor ▁ Alex " ) NEW_LINE DEDENT
def maxnumber ( n , k ) : NEW_LINE INDENT import math NEW_LINE for j in range ( k ) : NEW_LINE INDENT ans = 0 NEW_LINE i = 1 NEW_LINE while n // i > 0 : NEW_LINE INDENT temp = ( n // ( i * 10 ) ) * i + ( n % i ) NEW_LINE i *= 10 NEW_LINE ans = max ( ans , temp ) NEW_LINE DEDENT n = ans NEW_LINE DEDENT return n NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import sys NEW_LINE log = open ( ' / dev / null ' , ' w ' ) NEW_LINE result = sys . stdout NEW_LINE with open ( ' / dev / null ' , ' r ' ) as f : NEW_LINE INDENT N = len ( f . read ( ) ) NEW_LINE M = len ( f . read ( ) ) NEW_LINE w = [ 0 ] * N NEW_LINE for i in range ( M ) : NEW_LINE INDENT a = int ( f . read ( ) ) NEW_LINE L = len ( f . read ( ) ) NEW_LINE for j in range ( L ) : NEW_LINE INDENT w [ ( a + j ) % N ] = 1 NEW_LINE DEDENT DEDENT t = [ 0 ] * ( N + 1 ) NEW_LINE s = None NEW_LINE f = None NEW_LINE s0 = None NEW_LINE i = None NEW_LINE for i in range ( N ) : NEW_LINE INDENT if f == None and w [ i ] == 1 : NEW_LINE INDENT s = i NEW_LINE f = 1 NEW_LINE DEDENT elif f == 1 and w [ i ] == 0 : NEW_LINE INDENT f = 0 NEW_LINE if s == None : NEW_LINE INDENT s0 = i NEW_LINE DEDENT else : NEW_LINE INDENT t [ i - s ] += 1 NEW_LINE DEDENT DEDENT DEDENT if f == 1 : NEW_LINE INDENT t [ i - s + s0 ] += 1 NEW_LINE DEDENT elif s0 is not None : NEW_LINE INDENT t [ s0 ] += 1 NEW_LINE DEDENT for i in range ( N , 0 , - 1 ) : NEW_LINE INDENT if t [ i ] > 0 : NEW_LINE INDENT result . write ( ' % d ▁ % d \n ' % ( i , t [ i ] ) ) NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE io = sys . stdin NEW_LINE n = len ( io ) NEW_LINE a = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a . append ( io . read ( ) ) NEW_LINE DEDENT sum = 0 NEW_LINE now = 0 NEW_LINE border = 1 NEW_LINE end = 0 NEW_LINE ans_p = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE end = border - sum NEW_LINE if border > 0 : NEW_LINE INDENT if now < end : NEW_LINE INDENT ans_p += abs ( now - end ) NEW_LINE now = end NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if now > end : NEW_LINE INDENT ans_p += abs ( now - end ) NEW_LINE now = end NEW_LINE DEDENT DEDENT border = - border NEW_LINE DEDENT sum = 0 NEW_LINE now = 0 NEW_LINE border = - 1 NEW_LINE end = 0 NEW_LINE ans_m = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE end = border - sum NEW_LINE if border > 0 : NEW_LINE INDENT if now < end : NEW_LINE INDENT ans_m += abs ( now - end ) NEW_LINE now = end NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if now > end : NEW_LINE INDENT ans_m += abs ( now - end ) NEW_LINE now = end NEW_LINE DEDENT DEDENT border = - border NEW_LINE DEDENT print ( min ( ans_p , ans_m ) ) NEW_LINE DEDENT
def get_last_two_digit ( N ) : NEW_LINE INDENT if N <= 10 : NEW_LINE INDENT ans , fac = 0 , 1 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT fac = fac * i NEW_LINE ans += fac NEW_LINE DEDENT return int ( ans ) % 100 NEW_LINE DEDENT else : NEW_LINE INDENT return 13 NEW_LINE DEDENT DEDENT
def GFG ( args ) : NEW_LINE INDENT binary_number = "1001" NEW_LINE print ( int ( binary_number , 2 ) ) NEW_LINE DEDENT
def is_possible ( x , y , z ) : NEW_LINE INDENT import math NEW_LINE a = x * x + y * y + z * z NEW_LINE if math . ceil ( a ) == 1 and math . floor ( a ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import re NEW_LINE MAX = 1000000 NEW_LINE MOD = 10000007 NEW_LINE result = [ 0 ] * ( MAX + 1 ) NEW_LINE fact = [ 0 ] * ( MAX + 1 ) NEW_LINE def pre_compute ( ) : NEW_LINE INDENT fact [ 0 ] = 1 NEW_LINE result [ 0 ] = 1 NEW_LINE for i in range ( 1 , MAX + 1 ) : NEW_LINE INDENT fact [ i ] = ( ( fact [ i - 1 ] % MOD ) * i ) % MOD NEW_LINE result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD NEW_LINE DEDENT DEDENT def perform_queries ( q , n ) : NEW_LINE INDENT pre_compute ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( result [ q [ i ] ] ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT q = [ 4 , 5 ] NEW_LINE n = len ( q ) NEW_LINE perform_queries ( q , n ) NEW_LINE DEDENT return ' ' . join ( result ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT T = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT T -= 1 NEW_LINE DEDENT n = len ( sys . stdin ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT a . sort ( ) NEW_LINE mini = 0 NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT diff = a [ i ] - a [ i - 1 ] NEW_LINE mini = mini + ( - 1 ) * diff * i NEW_LINE ans += mini NEW_LINE DEDENT print ( ans + str ( a [ n - 1 ] ) ) NEW_LINE DEDENT
def segregate ( arr , size ) : NEW_LINE INDENT j , i = 0 , 0 NEW_LINE for i in range ( size ) : NEW_LINE INDENT if arr [ i ] <= 0 : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return j NEW_LINE def find_missing_positive ( arr , size ) : NEW_LINE INDENT i = 0 NEW_LINE for i in range ( size ) : NEW_LINE INDENT x = abs ( arr [ i ] ) NEW_LINE if x - 1 < size and arr [ x - 1 ] > 0 : NEW_LINE INDENT arr [ x - 1 ] = - arr [ x - 1 ] NEW_LINE DEDENT DEDENT for i in range ( size ) : NEW_LINE INDENT if arr [ i ] > 0 : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return size + 1 NEW_LINE DEDENT def find_missing ( arr , size ) : NEW_LINE INDENT shift = segregate ( arr , size ) NEW_LINE arr2 = [ 0 ] * ( size - shift ) NEW_LINE j = 0 NEW_LINE for i in range ( shift , size ) : NEW_LINE INDENT arr2 [ j ] = arr [ i ] NEW_LINE j += 1 NEW_LINE DEDENT return find_missing_positive ( arr2 , j ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 0 , 10 , 2 , - 10 , - 20 ] NEW_LINE arr_size = len ( arr ) NEW_LINE missing = find_missing ( arr , arr_size ) NEW_LINE print ( " The ▁ smallest ▁ positive ▁ missing ▁ number ▁ is ▁ % d " % missing ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import math NEW_LINE mod = 1000000007 NEW_LINE def digital_number ( n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT return 9 NEW_LINE DEDENT if n % 2 : NEW_LINE INDENT temp = digital_number ( ( n - 1 ) // 2 ) % mod NEW_LINE return ( 9 * ( temp * temp ) % mod ) % mod NEW_LINE DEDENT else : NEW_LINE INDENT temp = digital_number ( n // 2 ) % mod NEW_LINE return ( temp * temp ) % mod NEW_LINE DEDENT DEDENT def count_excluded ( n , d ) : NEW_LINE INDENT if d == 0 : NEW_LINE INDENT return ( 9 * digital_number ( n - 1 ) ) % mod NEW_LINE DEDENT else : NEW_LINE INDENT return ( 8 * digital_number ( n - 1 ) ) % mod NEW_LINE DEDENT DEDENT def main ( n ) : NEW_LINE INDENT d = 9 NEW_LINE n = 3 NEW_LINE print ( count_excluded ( n , d ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import None NEW_LINE import subprocess NEW_LINE try : NEW_LINE INDENT subprocess = subprocess NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT pass NEW_LINE DEDENT def readline ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return subprocess . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return None NEW_LINE DEDENT def readline ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return subprocess . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return None NEW_LINE DEDENT def readline ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return subprocess . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return None NEW_LINE DEDENT def write ( ) : NEW_LINE INDENT try : NEW_LINE INDENT return subprocess . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return None NEW_LINE DEDENT return write NEW_LINE DEDENT
def convert12 ( data ) : NEW_LINE INDENT import string NEW_LINE h1 = ord ( data [ 0 ] ) - ord ( '0' ) NEW_LINE h2 = ord ( data [ 1 ] ) - ord ( '0' ) NEW_LINE hh = h1 * 10 + h2 NEW_LINE if hh < 12 : NEW_LINE INDENT Meridien = " AM " NEW_LINE DEDENT else : NEW_LINE INDENT Meridien = " PM " NEW_LINE DEDENT hh %= 12 NEW_LINE if hh == 0 : NEW_LINE INDENT print ( "12" , end = " ▁ " ) NEW_LINE for c in data [ 2 : 8 ] : NEW_LINE INDENT print ( c , end = " ▁ " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( hh , end = " ▁ " ) NEW_LINE for c in data [ 2 : 8 ] : NEW_LINE INDENT print ( c , end = " ▁ " ) NEW_LINE DEDENT DEDENT print ( " ▁ " , Meridien ) NEW_LINE DEDENT
def GFG ( s , k ) : NEW_LINE INDENT for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] != s [ i % k ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def GFG ( W , wt , val , n ) : NEW_LINE INDENT global K NEW_LINE K = np . zeros ( ( n + 1 , W + 1 ) ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT for w in range ( 0 , W + 1 ) : NEW_LINE INDENT if i == 0 or w == 0 : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif wt [ i - 1 ] <= w : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT res = K [ n ] [ W ] NEW_LINE print ( res ) NEW_LINE w = W NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT if res == K [ i - 1 ] [ w ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT print ( wt [ i - 1 ] , end = ' ▁ ' ) NEW_LINE res = res - val [ i - 1 ] NEW_LINE w = w - wt [ i - 1 ] NEW_LINE DEDENT DEDENT DEDENT def main ( arg ) : NEW_LINE INDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE printknapSack ( W , wt , val , n ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE z = n * 2 NEW_LINE c = 0 NEW_LINE arr = [ ] NEW_LINE ff = [ ] NEW_LINE ss = [ ] NEW_LINE while n > 0 : NEW_LINE INDENT n -= 1 NEW_LINE ff . append ( sys . stdin . readline ( ) ) NEW_LINE ss . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT pp = len ( ff ) NEW_LINE for i in range ( pp ) : NEW_LINE INDENT for j in range ( pp ) : NEW_LINE INDENT if ff [ i ] == ss [ j ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT DEDENT sys . stdout . write ( c ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def indexed_sequential_search ( arr , n , k ) : NEW_LINE INDENT elements = [ 0 ] * 20 NEW_LINE indices = [ 0 ] * 20 NEW_LINE temp , i = 0 , 0 , 0 , 0 , 0 NEW_LINE j , ind , start , end = 0 , 0 , 0 , 0 NEW_LINE for i in range ( 0 , n , 3 ) : NEW_LINE INDENT elements [ ind ] = arr [ i ] NEW_LINE indices [ ind ] = i NEW_LINE ind += 1 NEW_LINE DEDENT if k < elements [ 0 ] : NEW_LINE INDENT print ( ' Not ▁ found ' ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( 1 , ind + 1 ) : NEW_LINE INDENT if k < elements [ i ] : NEW_LINE INDENT start = indices [ i - 1 ] NEW_LINE end = indices [ i ] NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( start , end + 1 ) : NEW_LINE INDENT if k == arr [ i ] : NEW_LINE INDENT j = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if j == 1 : NEW_LINE INDENT print ( ' Found ▁ at ▁ index ▁ % d ' % i ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' Not ▁ found ' ) NEW_LINE DEDENT DEDENT DEDENT
def larrgestPalindrome ( n ) : NEW_LINE INDENT upperLimit = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT upperLimit *= 10 NEW_LINE upperLimit += 9 NEW_LINE DEDENT lowerLimit = 1 + upperLimit // 10 NEW_LINE maxProduct = 0 NEW_LINE for i in range ( upperLimit , lowerLimit - 1 , - 1 ) : NEW_LINE INDENT for j in range ( i , lowerLimit - 1 , - 1 ) : NEW_LINE INDENT product = i * j NEW_LINE if product < maxProduct : NEW_LINE INDENT break NEW_LINE DEDENT number = product NEW_LINE reverse = 0 NEW_LINE while number != 0 : NEW_LINE INDENT reverse = reverse * 10 + number % 10 NEW_LINE number //= 10 NEW_LINE DEDENT if product == reverse and product > maxProduct : NEW_LINE INDENT maxProduct = product NEW_LINE DEDENT DEDENT DEDENT return maxProduct NEW_LINE DEDENT
def check ( dp , a ) : NEW_LINE INDENT import math NEW_LINE start = 0 NEW_LINE end = len ( dp ) - 1 NEW_LINE while True : NEW_LINE INDENT if dp [ start ] >= a : NEW_LINE INDENT return start NEW_LINE DEDENT elif dp [ end ] <= a : NEW_LINE INDENT return end NEW_LINE DEDENT else : NEW_LINE INDENT if start + 1 == end : NEW_LINE INDENT return end NEW_LINE DEDENT else : NEW_LINE INDENT mid = ( start + end ) // 2 NEW_LINE if dp [ mid ] == a : NEW_LINE INDENT return mid NEW_LINE DEDENT elif dp [ mid ] > a : NEW_LINE INDENT end = mid NEW_LINE DEDENT else : NEW_LINE INDENT start = mid NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def fast_food_restaurant ( ) : NEW_LINE INDENT import sys NEW_LINE test = sys . maxsize NEW_LINE while test > 0 : NEW_LINE INDENT a = sys . maxsize NEW_LINE b = sys . maxsize NEW_LINE c = sys . maxsize NEW_LINE if a == 0 and b == 0 and c == 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT if b > c and b > a : NEW_LINE INDENT k = a NEW_LINE a = b NEW_LINE b = k NEW_LINE DEDENT if c > b and c > a : NEW_LINE INDENT k = a NEW_LINE a = c NEW_LINE c = k NEW_LINE DEDENT res = 0 NEW_LINE if a >= 1 : NEW_LINE INDENT a -= 1 NEW_LINE res += 1 NEW_LINE DEDENT if b >= 1 : NEW_LINE INDENT b -= 1 NEW_LINE res += 1 NEW_LINE DEDENT if c >= 1 : NEW_LINE INDENT c -= 1 NEW_LINE res += 1 NEW_LINE DEDENT if a >= 1 and b >= 1 : NEW_LINE INDENT a -= 1 NEW_LINE b -= 1 NEW_LINE res += 1 NEW_LINE DEDENT if a >= 1 and c >= 1 : NEW_LINE INDENT a -= 1 NEW_LINE c -= 1 NEW_LINE res += 1 NEW_LINE DEDENT if c >= 1 and b >= 1 : NEW_LINE INDENT c -= 1 NEW_LINE b -= 1 NEW_LINE res += 1 NEW_LINE DEDENT if a >= 1 and b >= 1 and c >= 1 : NEW_LINE INDENT res += 1 NEW_LINE DEDENT print ( res ) NEW_LINE DEDENT DEDENT DEDENT
def Solution788A ( ) : NEW_LINE INDENT import math NEW_LINE arr = [ 0 ] * 100001 NEW_LINE dist = [ 0 ] * 100001 NEW_LINE def Solution788A ( n ) : NEW_LINE INDENT f = open ( ' / dev / null ' ) NEW_LINE n = int ( f . readline ( ) ) NEW_LINE f . readline ( ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT arr [ i ] = int ( f . readline ( ) ) NEW_LINE DEDENT DEDENT final_max = 0 NEW_LINE for start in range ( 1 , 3 ) : NEW_LINE INDENT max = 0 NEW_LINE sum = 0 NEW_LINE add = True NEW_LINE for i in range ( start , n ) : NEW_LINE INDENT dist [ i ] = abs ( arr [ i ] - arr [ i + 1 ] ) NEW_LINE if add : NEW_LINE INDENT sum += dist [ i ] NEW_LINE max = sum if sum > max else max NEW_LINE add = False NEW_LINE DEDENT else : NEW_LINE INDENT sum -= dist [ i ] NEW_LINE add = True NEW_LINE DEDENT if sum < 0 : NEW_LINE INDENT sum = 0 NEW_LINE add = True NEW_LINE DEDENT DEDENT final_max = max if max > final_max else final_max NEW_LINE DEDENT print ( final_max ) NEW_LINE DEDENT
def maximum_xor ( arr , n ) : NEW_LINE INDENT from math import max , abs NEW_LINE sForward , sBackward = [ ] , [ ] NEW_LINE ans = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT while not sForward and arr [ i ] < arr [ sForward [ - 1 ] ] : NEW_LINE INDENT ans = max ( ans , arr [ i ] ^ arr [ sForward [ - 1 ] ] ) NEW_LINE sForward . pop ( ) NEW_LINE DEDENT sForward . append ( i ) NEW_LINE while not sBackward and arr [ n - i - 1 ] < arr [ sBackward [ - 1 ] ] : NEW_LINE INDENT ans = max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward [ - 1 ] ] ) NEW_LINE sBackward . pop ( ) NEW_LINE DEDENT sBackward . append ( n - i - 1 ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def dec_to_hexa ( n ) : NEW_LINE INDENT hexadeci_num = [ ] NEW_LINE i = 0 NEW_LINE while n != 0 : NEW_LINE INDENT temp = 0 NEW_LINE temp = n % 16 NEW_LINE if temp < 10 : NEW_LINE INDENT hexadeci_num . append ( chr ( temp + 48 ) ) NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT hexadeci_num . append ( chr ( temp + 55 ) ) NEW_LINE i += 1 NEW_LINE DEDENT n = n // 16 NEW_LINE DEDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT sys . stdout . write ( hexadeci_num [ j ] ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT d = { } NEW_LINE for i in range ( - 1 , 1.0e+5 + 2 ) : NEW_LINE INDENT d [ i ] = 0 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT a = sys . stdin . readline ( ) NEW_LINE d [ a ] = d [ a ] + 1 NEW_LINE DEDENT def solve ( ) : NEW_LINE INDENT max = sys . maxsize NEW_LINE for x in range ( 0 , 1.0e+5 + 1 ) : NEW_LINE INDENT max = max ( max , d [ x - 1 ] + d [ x ] + d [ x + 1 ] ) NEW_LINE DEDENT print ( max ) NEW_LINE DEDENT return solve NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import re NEW_LINE for line in open ( ' . . / . . / ' ) . readlines ( ) : NEW_LINE INDENT R = len ( line ) NEW_LINE C = len ( line ) NEW_LINE if R == 0 and C == 0 : NEW_LINE INDENT break NEW_LINE DEDENT hm = { } NEW_LINE for i in range ( R ) : NEW_LINE INDENT data = line . strip ( ) NEW_LINE for j in range ( C ) : NEW_LINE INDENT c = data [ j ] NEW_LINE if c == ' _ ' : NEW_LINE INDENT continue NEW_LINE DEDENT hm [ c ] = ( i , j ) NEW_LINE DEDENT DEDENT data = line . strip ( ) NEW_LINE iPos = 0 NEW_LINE jPos = 0 NEW_LINE count = len ( data ) NEW_LINE for c in data : NEW_LINE INDENT loc = hm [ c ] NEW_LINE count += abs ( iPos - loc [ 0 ] ) + abs ( jPos - loc [ 1 ] ) NEW_LINE iPos = loc [ 0 ] NEW_LINE jPos = loc [ 1 ] NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT class Loc ( int ) : NEW_LINE INDENT def __init__ ( self , i , j ) : NEW_LINE INDENT self . i = i NEW_LINE self . j = j NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE m = sys . modules [ ' _ _ main _ _ ' ] NEW_LINE m . run ( ) NEW_LINE DEDENT
def GFG ( data ) : NEW_LINE INDENT num , res = 0 , 0 NEW_LINE for c in data : NEW_LINE INDENT if c . isdigit ( ) : NEW_LINE INDENT num = num * 10 + ord ( c ) - ord ( '0' ) NEW_LINE DEDENT else : NEW_LINE INDENT res = max ( res , num ) NEW_LINE num = 0 NEW_LINE DEDENT DEDENT return max ( res , num ) NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT sum = [ 0 ] * max NEW_LINE index_1 , index_2 , index_3 , index = 0 , 0 , 0 , 0 NEW_LINE for i , k in enumerate ( arr [ 1 : ] ) : NEW_LINE INDENT sum [ i ] = sum [ i - 1 ] + arr [ k ] NEW_LINE k += 1 NEW_LINE DEDENT ans = - ( 1e15 ) NEW_LINE index_1 = index_2 = index_3 = - 1 NEW_LINE for l in range ( 0 , n + 1 ) : NEW_LINE INDENT index = 0 NEW_LINE vmin = ( 1e15 ) NEW_LINE for r in range ( l , n + 1 ) : NEW_LINE INDENT if sum [ r ] < vmin : NEW_LINE INDENT vmin = sum [ r ] NEW_LINE index = r NEW_LINE DEDENT if sum [ l ] + sum [ r ] - vmin > ans : NEW_LINE INDENT ans = sum [ l ] + sum [ r ] - vmin NEW_LINE index_1 = l NEW_LINE index_2 = index NEW_LINE index_3 = r NEW_LINE DEDENT DEDENT DEDENT print ( index_1 , index_2 , index_3 , end = ' ▁ ' ) NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT for i in range ( 1 , n - 1 ) : NEW_LINE INDENT if arr [ i ] > arr [ i - 1 ] and arr [ i ] > arr [ i + 1 ] : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def valueofX ( ar , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in ar : NEW_LINE INDENT sum = sum + i NEW_LINE DEDENT if sum % n == 0 : NEW_LINE INDENT return sum // n NEW_LINE DEDENT else : NEW_LINE INDENT A , B = sum // n , sum // n + 1 NEW_LINE ValueA , ValueB = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ValueA += ( ar [ i ] - A ) ** 2 NEW_LINE ValueB += ( ar [ i ] - B ) ** 2 NEW_LINE DEDENT if ValueA < ValueB : NEW_LINE INDENT return A NEW_LINE DEDENT else : NEW_LINE INDENT return B NEW_LINE DEDENT DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = len ( sys . stdin . readline ( ) ) NEW_LINE l = len ( sys . stdin . readline ( ) ) NEW_LINE s = " " NEW_LINE arr = [ 0 ] * l NEW_LINE for j in range ( n ) : NEW_LINE INDENT temp = string . atoi ( sys . stdin . readline ( ) ) NEW_LINE while len ( temp ) < l : NEW_LINE INDENT temp = '0' + temp NEW_LINE DEDENT for k in range ( l ) : NEW_LINE INDENT if k < len ( temp ) and temp [ k ] == '1' : NEW_LINE INDENT arr [ k ] += 1 NEW_LINE DEDENT DEDENT DEDENT for j in range ( l ) : NEW_LINE INDENT if n - arr [ j ] >= arr [ j ] : NEW_LINE INDENT s += " ▁ " NEW_LINE DEDENT else : NEW_LINE INDENT s += 1 NEW_LINE DEDENT DEDENT print ( int ( s , 2 ) ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self , s ) : NEW_LINE INDENT self . s = s NEW_LINE self . _L = len ( s ) NEW_LINE self . _T = s NEW_LINE for i in range ( len ( s ) // 2 ) : NEW_LINE INDENT self . _L -= 2 NEW_LINE self . _T = self . _T [ : self . _L ] NEW_LINE if self . _T [ : self . _L // 2 ] == self . _T [ self . _L // 2 : ] : NEW_LINE INDENT print ( self . _L ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
def find_nth ( n ) : NEW_LINE INDENT import sys NEW_LINE count = 0 NEW_LINE for curr in range ( 19 , 9 ) : NEW_LINE INDENT sum = 0 NEW_LINE for x in range ( curr , 0 , - 1 ) : NEW_LINE INDENT sum = sum + x % 10 NEW_LINE DEDENT if sum == 10 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if count == n : NEW_LINE INDENT return curr NEW_LINE DEDENT DEDENT sys . stdout . write ( find_nth ( 5 ) ) NEW_LINE DEDENT
def find_nth ( n ) : NEW_LINE INDENT import sys NEW_LINE count = 0 NEW_LINE for curr in range ( 1 ) : NEW_LINE INDENT sum = 0 NEW_LINE for x in curr : NEW_LINE INDENT sum = sum + x % 10 NEW_LINE DEDENT if sum == 10 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if count == n : NEW_LINE INDENT return curr NEW_LINE DEDENT DEDENT sys . stdout . write ( find_nth ( 5 ) ) NEW_LINE DEDENT
def count_number ( N , S ) : NEW_LINE INDENT count_elements = 0 NEW_LINE curr_sum = 0 NEW_LINE while curr_sum <= S : NEW_LINE INDENT curr_sum += N NEW_LINE N -= 1 NEW_LINE count_elements += 1 NEW_LINE DEDENT return count_elements NEW_LINE DEDENT
def strmatch ( data , pattern , n , m ) : NEW_LINE INDENT import re NEW_LINE if not m : NEW_LINE INDENT return ( n == 0 ) NEW_LINE DEDENT lookup = np . zeros ( ( n + 1 , m + 1 ) ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT lookup [ i ] = False NEW_LINE DEDENT lookup [ 0 ] [ 0 ] = True NEW_LINE for j in range ( 1 , m + 1 ) : NEW_LINE INDENT if pattern [ j - 1 ] == ' * ' : NEW_LINE INDENT lookup [ 0 ] [ j ] = lookup [ 0 ] [ j - 1 ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , m + 1 ) : NEW_LINE INDENT if pattern [ j - 1 ] == ' * ' : NEW_LINE INDENT lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] or lookup [ i - 1 ] [ j ] NEW_LINE DEDENT elif pattern [ j - 1 ] == ' ? ' or data [ i - 1 ] == pattern [ j - 1 ] : NEW_LINE INDENT lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT lookup [ i ] [ j ] = False NEW_LINE DEDENT DEDENT DEDENT return lookup [ n ] [ m ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . utils as np NEW_LINE import numpy . testing . utils as np NEW_LINE class Main ( object ) : NEW_LINE INDENT def run ( self ) : NEW_LINE INDENT with self . open ( ' / tmp / ' ) as f : NEW_LINE INDENT N = 1000001 NEW_LINE p = np . zeros ( N ) NEW_LINE p [ 0 ] = p [ 1 ] = False NEW_LINE for i in range ( 2 , N ) : NEW_LINE INDENT if p [ i ] : NEW_LINE INDENT for j in range ( i + i , N , i ) : NEW_LINE INDENT p [ j ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT while True : NEW_LINE INDENT a = np . random . randint ( 0 , 1 ) NEW_LINE b = np . random . randint ( 0 , 1 ) NEW_LINE if ( a | b ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT sa = [ ] NEW_LINE sb = [ ] NEW_LINE k = 2 NEW_LINE while a > 1 : NEW_LINE INDENT if p [ k ] and a % k == 0 : NEW_LINE INDENT a //= k NEW_LINE sa . append ( k ) NEW_LINE DEDENT else : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT k = 2 NEW_LINE while b > 1 : NEW_LINE INDENT if p [ k ] and b % k == 0 : NEW_LINE INDENT b //= k NEW_LINE sb . append ( k ) NEW_LINE DEDENT else : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT pa = sa . pop ( ) NEW_LINE sa . remove ( pa ) NEW_LINE pb = sb . pop ( ) NEW_LINE sb . remove ( pb ) NEW_LINE for x in sa : NEW_LINE INDENT pa -= x NEW_LINE DEDENT for x in sb : NEW_LINE INDENT pb -= x NEW_LINE DEDENT print ( ' a ' if pa > pb else ' b ' ) NEW_LINE DEDENT DEDENT DEDENT
def nCr ( n , r ) : NEW_LINE INDENT import numpy as np NEW_LINE fac = np . zeros ( 100 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT fac [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT fac [ i ] = fac [ i - 1 ] * i NEW_LINE DEDENT ans = fac [ n ] / ( fac [ n - r ] ** 2 ) NEW_LINE return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( int ( sys . stdin . readline ( ) ) ) NEW_LINE DEDENT a . sort ( ) NEW_LINE min = sys . maxsize NEW_LINE ans = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT sa = abs ( a [ n - 1 ] - a [ i ] * 2 ) NEW_LINE if sa < min : NEW_LINE INDENT min = sa NEW_LINE ans = a [ i ] NEW_LINE DEDENT DEDENT sys . stdout . write ( ' % d ▁ ' % a [ n - 1 ] ) NEW_LINE sys . stdout . write ( ' % d \n ' % ans ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def _gg_gcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return math . gcd ( b % a , a ) NEW_LINE DEDENT def _gg_gcd ( a , n , b ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT a = a * a NEW_LINE DEDENT return math . gcd ( a , b ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import list NEW_LINE import list NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT from math import sin , cos , exp , string NEW_LINE DEDENT except : NEW_LINE INDENT import math NEW_LINE DEDENT try : NEW_LINE INDENT from math import pi NEW_LINE DEDENT except : NEW_LINE INDENT import math NEW_LINE DEDENT return math NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE s = sys . stdin . readline ( ) NEW_LINE count = 0 NEW_LINE for c in s : NEW_LINE INDENT if c == '8' : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( min ( count , n // 11 ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT print ( ) NEW_LINE DEDENT DEDENT
def sum_of_digit ( n , b ) : NEW_LINE INDENT unit_digit , sum = 0 , 0 NEW_LINE while n > 0 : NEW_LINE INDENT unit_digit = n % b NEW_LINE sum += unit_digit NEW_LINE n = n // b NEW_LINE DEDENT return sum NEW_LINE DEDENT
def print_largest_divisible ( n , a ) : NEW_LINE INDENT import math NEW_LINE import sys NEW_LINE c0 , c5 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == 0 : NEW_LINE INDENT c0 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT c5 += 1 NEW_LINE DEDENT DEDENT c5 = int ( math . floor ( c5 / 9 ) ) * 9 NEW_LINE if c0 == 0 : NEW_LINE INDENT sys . stdout . write ( - 1 ) NEW_LINE DEDENT elif c5 == 0 : NEW_LINE INDENT sys . stdout . write ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( c5 ) : NEW_LINE INDENT sys . stdout . write ( 5 ) NEW_LINE DEDENT for i in range ( c0 ) : NEW_LINE INDENT sys . stdout . write ( 0 ) NEW_LINE DEDENT DEDENT DEDENT
def count_ways ( n ) : NEW_LINE INDENT import sys NEW_LINE counter = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT for k in range ( j , n ) : NEW_LINE INDENT for l in range ( k , n ) : NEW_LINE INDENT if i + j + k + l == n : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return counter NEW_LINE DEDENT
def number_of_minutes ( S , S1 ) : NEW_LINE INDENT import math NEW_LINE Min = 0 NEW_LINE Min = int ( ( ( S - S1 ) / math . floor ( S ) ) * 60 ) NEW_LINE return Min NEW_LINE DEDENT
def codechef_submission ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n , m , k = select . select ( [ sys . stdin ] ) NEW_LINE b = [ ] NEW_LINE if n < k : NEW_LINE INDENT print ( n ) NEW_LINE return NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT b . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT d = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT d . append ( b [ i + 1 ] - b [ i ] - 1 ) NEW_LINE DEDENT d . sort ( ) NEW_LINE sum = b [ - 1 ] - b [ 0 ] + 1 NEW_LINE for i in range ( len ( d ) - 1 , len ( d ) - 1 - ( k - 1 ) , - 1 ) : NEW_LINE INDENT sum -= d [ i ] NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT except KeyboardInterrupt : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT number_of_bits = int ( math . floor ( math . log ( n ) / math . log ( 2 ) ) ) + 1 NEW_LINE return ( ( 1 << number_of_bits ) - 1 ) ^ n NEW_LINE DEDENT
def new_class27 ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT w , h , n = sys . maxsize NEW_LINE sheet = 1 NEW_LINE while w % 2 == 0 : NEW_LINE INDENT w //= 2 NEW_LINE sheet *= 2 NEW_LINE DEDENT while h % 2 == 0 : NEW_LINE INDENT h //= 2 NEW_LINE sheet *= 2 NEW_LINE DEDENT if sheet >= n : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def find_point ( x1 , y1 , x2 , y2 ) : NEW_LINE INDENT print ( " ( % d , % d ▁ ) " % ( int ( 2 * x2 - x1 ) , int ( 2 * y2 - y1 ) ) ) NEW_LINE DEDENT
def main ( z ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin . read ( ) NEW_LINE for n , m , a , b , i in enumerate ( s ) : NEW_LINE INDENT i -= 1 NEW_LINE print ( ( m - 1 - max ( abs ( ( a - 1 if a > 0 and n % 2 else a ) , abs ( ( b - 1 if b > 0 and n % 2 else b ) ) ) % 3 + 1 ) ) NEW_LINE DEDENT DEDENT
def alter ( x , y ) : NEW_LINE INDENT import sys NEW_LINE sys . stderr . write ( ' X ▁ = ▁ % d , ▁ Y ▁ = ▁ % d \n ' % ( x , y ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import random NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE v = [ None ] * n NEW_LINE seen = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT v [ i ] = random . randint ( 0 , n ) NEW_LINE seen . add ( v [ i ] ) NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT swap ( v , int ( random . uniform ( - 1 , 1 ) ) , i ) NEW_LINE DEDENT v . sort ( ) NEW_LINE ans = 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT d = v [ j ] - v [ i ] NEW_LINE if v [ i ] - d in seen : NEW_LINE INDENT continue NEW_LINE DEDENT cnt , cur = 2 , v [ j ] NEW_LINE while cur + d in seen : NEW_LINE INDENT cur += d NEW_LINE cnt += 1 NEW_LINE DEDENT ans = max ( ans , cnt ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' % d ▁ % d ▁ % d \n ' % ( ans , x , y ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT cases = len ( sys . argv ) NEW_LINE DEDENT except : NEW_LINE INDENT sys . stderr . write ( ' Please ▁ enter ▁ a ▁ list ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string ▁ of ▁ or ▁ a ▁ string ▁ of ▁ numbers ▁ or ▁ a ▁ string
def GFG ( num ) : NEW_LINE INDENT import string NEW_LINE mod = 1000000007 NEW_LINE inv2 = 500000004 NEW_LINE def modulo ( num ) : NEW_LINE INDENT res = 0 NEW_LINE for c in num : NEW_LINE INDENT res = ( res * 10 + ord ( c ) - ord ( '0' ) ) % mod NEW_LINE DEDENT return res NEW_LINE DEDENT def findSum ( L , R ) : NEW_LINE INDENT global a , b , l , r , ret NEW_LINE a = modulo ( L ) NEW_LINE b = modulo ( R ) NEW_LINE l = ( ( a * ( a - 1 ) ) % mod * inv2 ) % mod NEW_LINE r = ( ( b * ( b + 1 ) ) % mod * inv2 ) % mod NEW_LINE ret = ( r % mod - l % mod ) NEW_LINE if ret < 0 : NEW_LINE INDENT ret = ret + mod NEW_LINE DEDENT else : NEW_LINE INDENT ret = ret % mod NEW_LINE DEDENT return ret NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT L = '88949273204' NEW_LINE R = '8429729474298592' NEW_LINE print ( findSum ( L , R ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT if k < 1 or l + 1 == r : NEW_LINE INDENT return NEW_LINE DEDENT k -= 2 NEW_LINE mid = ( l + r ) // 2 NEW_LINE temp = a [ mid - 1 ] NEW_LINE a [ mid - 1 ] = a [ mid ] NEW_LINE a [ mid ] = temp NEW_LINE unsort ( l , mid , a , k ) NEW_LINE unsort ( mid , r , a , k ) NEW_LINE def arrayWithKCalls ( n , k ) : NEW_LINE INDENT if k % 2 == 0 : NEW_LINE INDENT print ( ' NO ▁ SOLUTION ' , end = ' ▁ ' ) NEW_LINE return NEW_LINE DEDENT a = [ 1 ] * ( n + 1 ) NEW_LINE a [ 0 ] = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT a [ i ] = i + 1 NEW_LINE DEDENT k -= 1 NEW_LINE unsort ( 0 , n , a , k ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( ' % d ▁ ' % a [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n , k = 10 , 17 NEW_LINE arrayWithKCalls ( n , k ) NEW_LINE DEDENT DEDENT
def mean ( mid , freq , n ) : NEW_LINE INDENT sum , freq_sum = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + mid [ i ] * freq [ i ] NEW_LINE freq_sum = freq_sum + freq [ i ] NEW_LINE DEDENT return sum / freq_sum NEW_LINE def grouped_sd ( lower_limit , upper_limit , freq , n ) : NEW_LINE INDENT mid = [ ] NEW_LINE sum , freq_sum , sd = 0 , 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT mid . append ( ( lower_limit [ i ] + upper_limit [ i ] ) / 2 ) NEW_LINE sum = sum + freq [ i ] * mid [ i ] ** 2 NEW_LINE freq_sum = freq_sum + freq [ i ] NEW_LINE DEDENT sd = float ( math . sqrt ( ( sum - freq_sum * mean ( mid , freq , n ) ** 2 ) / ( freq_sum - 1 ) ) ) NEW_LINE return sd NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT lower_limit = [ 50 , 61 , 71 , 86 , 96 ] NEW_LINE upper_limit = [ 60 , 70 , 85 , 95 , 100 ] NEW_LINE freq = [ 9 , 7 , 9 , 12 , 8 ] NEW_LINE n = len ( lower_limit ) NEW_LINE print ( grouped_sd ( lower_limit , upper_limit , freq , n ) ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def ggcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return math . gcd ( b % a , a ) NEW_LINE DEDENT
def GFG ( args ) : NEW_LINE INDENT import math NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE import io NEW_LINE class GFG ( math . Float ) : NEW_LINE INDENT def rectanglearea ( a , b ) : NEW_LINE INDENT if a < 0 or b < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return 2 * a * b NEW_LINE DEDENT def rectanglearea ( a , b ) : NEW_LINE INDENT a , b = 10 , 8 NEW_LINE print ( rectanglearea ( a , b ) ) NEW_LINE DEDENT DEDENT return GFG ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float ( math . Float1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) NEW_LINE DEDENT
def CF427_1 ( args ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import struct NEW_LINE from math import fabs , string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE if string is None : NEW_LINE INDENT return None NEW_LINE DEDENT return string NEW_LINE DEDENT
def GFG ( x ) : return ( x * ( x + 1 ) ) / 2 NEW_LINE def count_jumps ( n ) : NEW_LINE INDENT n = abs ( n ) NEW_LINE ans = 0 NEW_LINE while getsum ( ans ) < n or ( ( getsum ( ans ) - n ) & 1 ) > 0 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT
def GFG ( dp , arr1 , n , arr2 , m , k ) : NEW_LINE INDENT if k < 0 : NEW_LINE INDENT return - 10000000 NEW_LINE DEDENT if n < 0 or m < 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT ans = dp [ n ] [ m ] [ k ] NEW_LINE if ans != - 1 : NEW_LINE INDENT return ans NEW_LINE DEDENT try : NEW_LINE INDENT ans = max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lcs ( dp , arr1 , n , arr2 , m - 1 , k ) ) NEW_LINE if arr1 [ n - 1 ] == arr2 [ m - 1 ] : NEW_LINE INDENT ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ) NEW_LINE DEDENT ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k - 1 ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import string NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE N = math . sqrt ( math . pi ) NEW_LINE d = math . sqrt ( math . pi ) NEW_LINE x = math . sqrt ( math . pi ) NEW_LINE ans = decimal . Decimal ( "0.0" ) NEW_LINE while N > 0.5 : NEW_LINE INDENT adnum = decimal . Decimal ( d + x * ( N - 0.5 ) ) NEW_LINE ans = ans + adnum NEW_LINE d = ( N + 1.0 ) * d / N + ( 5.0 * x ) / ( 2.0 * N ) NEW_LINE x = ( 1.0 + ( 2.0 / N ) ) * x NEW_LINE N -= 1 NEW_LINE DEDENT format = " % d . % d . % d " % ( N , math . pi / 20 ) NEW_LINE print ( ans ) NEW_LINE DEDENT
def reverseorder ( n ) : NEW_LINE INDENT prime = [ True for i in range ( n + 1 ) ] NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT for i in range ( n , 2 , - 1 ) : NEW_LINE INDENT if prime [ i ] == True : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def pattern ( min_stars , p_height ) : NEW_LINE INDENT global p_space NEW_LINE p_space = p_height - 1 NEW_LINE i , j , k , n , x = 0 , p_height , 0 , 0 NEW_LINE x = 1 NEW_LINE for i in range ( p_height ) : NEW_LINE INDENT for j in range ( p_space , i - 1 , - 1 ) : NEW_LINE INDENT print ( " ▁ " , end = ' ' ) NEW_LINE DEDENT for k in range ( min_stars ) : NEW_LINE INDENT print ( " * " , end = ' ' ) NEW_LINE DEDENT for n in range ( ( p_height + p_height - 2 ) , x - 1 , - 1 ) : NEW_LINE INDENT print ( " ▁ " , end = ' ' ) NEW_LINE DEDENT for k in range ( min_stars ) : NEW_LINE INDENT print ( " * " , end = ' ' ) NEW_LINE DEDENT min_stars = min_stars + 2 NEW_LINE x = x + 2 NEW_LINE print ( ) NEW_LINE DEDENT DEDENT
def B629 ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = len ( string . ascii_lowercase ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT n = 0 NEW_LINE DEDENT FfriendPerDay = [ 0 ] * 367 NEW_LINE MfriendPerDay = [ 0 ] * 367 NEW_LINE answer = 0 NEW_LINE for c in string . ascii_lowercase : NEW_LINE INDENT a = ord ( c ) NEW_LINE b = ord ( c ) NEW_LINE for j in range ( a , b + 1 ) : NEW_LINE INDENT if c == ' M ' : NEW_LINE INDENT MfriendPerDay [ j ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT FfriendPerDay [ j ] += 1 NEW_LINE DEDENT if MfriendPerDay [ j ] < FfriendPerDay [ j ] : NEW_LINE INDENT if MfriendPerDay [ j ] > answer : NEW_LINE INDENT answer = MfriendPerDay [ j ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if FfriendPerDay [ j ] > answer : NEW_LINE INDENT answer = FfriendPerDay [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( answer * 2 ) NEW_LINE DEDENT
def distancesum ( x , y , n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) ) NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def fib ( n ) : NEW_LINE INDENT import math NEW_LINE phi = ( 1 + math . sqrt ( 5 ) ) / 2 NEW_LINE return int ( round ( math . pow ( phi , n ) / math . sqrt ( 5 ) ) ) NEW_LINE def calculate_sum ( l , r ) : NEW_LINE INDENT sum = fib ( r + 2 ) - fib ( l + 1 ) NEW_LINE return sum NEW_LINE DEDENT def sum_fibonacci ( k ) : NEW_LINE INDENT l = ( k * ( k - 1 ) ) // 2 NEW_LINE r = l + k NEW_LINE sum = calculate_sum ( l , r - 1 ) NEW_LINE return sum NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT k = 3 NEW_LINE print ( sum_fibonacci ( k ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def fib ( n ) : NEW_LINE INDENT import math NEW_LINE phi = ( 1 + math . sqrt ( 5 ) ) / 2 NEW_LINE return int ( round ( math . pow ( phi , n ) / math . sqrt ( 5 ) ) ) NEW_LINE def calculate_sum ( l , r ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT sum += fib ( i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT l , r = 4 , 8 NEW_LINE print ( calculate_sum ( l , r ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT phi = ( 1 + math . sqrt ( 5 ) ) / 2 NEW_LINE return int ( round ( math . pow ( phi , n ) / math . sqrt ( 5 ) ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT string = string . replace ( " ▁ " , " ▁ " ) NEW_LINE DEDENT except : NEW_LINE INDENT string = " " NEW_LINE DEDENT return string NEW_LINE DEDENT
def compare_strings ( str1 , str2 ) : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( str1 ) - 1 and str1 [ i ] == str2 [ i ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if str1 [ i ] > str2 [ i ] : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if str1 [ i ] < str2 [ i ] : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT def search_str ( arr , str , first , last ) : NEW_LINE INDENT if first > last : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( last + first ) // 2 NEW_LINE if arr [ mid ] == ' ' : NEW_LINE INDENT left = mid - 1 NEW_LINE right = mid + 1 NEW_LINE while True : NEW_LINE INDENT if left < right and right > last : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if right <= last and not arr [ right ] . startswith ( ' ▁ ' ) : NEW_LINE INDENT mid = right NEW_LINE break NEW_LINE DEDENT if left >= right and not arr [ left ] . startswith ( ' ▁ ' ) : NEW_LINE INDENT mid = left NEW_LINE break NEW_LINE DEDENT right += 1 NEW_LINE left -= 1 NEW_LINE DEDENT DEDENT if compare_strings ( str , arr [ mid ] ) == 0 : NEW_LINE INDENT return mid NEW_LINE DEDENT if compare_strings ( str , arr [ mid ] ) < 0 : NEW_LINE INDENT return search_str ( arr , str , mid + 1 , last ) NEW_LINE DEDENT return search_str ( arr , str , first , mid - 1 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ ' for ' , ' ' , ' ' , ' geeks ' , ' ide ' , ' ' , ' practice ' , ' ' , ' ' , ' quiz ' , ' ' , ' ' ] NEW_LINE str = ' quiz ' NEW_LINE n = len ( arr ) NEW_LINE print ( search_str ( arr , str , 0 , n - 1 ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . read ( ) ) NEW_LINE b = int ( sys . stdin . read ( ) ) NEW_LINE ans = get_num ( a , b ) NEW_LINE print ( ans ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' Could ▁ not ▁ find ▁ num ▁ in ▁ % r ' % sys . argv ) NEW_LINE return 1 NEW_LINE DEDENT reverse_b = 0 NEW_LINE while b > 0 : NEW_LINE INDENT reverse_b = reverse_b * 10 + b % 10 NEW_LINE b //= 10 NEW_LINE DEDENT return a + reverse_b NEW_LINE DEDENT
def A1133 ( args ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT x1 = int ( sys . stdin . readline ( ) ) NEW_LINE y1 = int ( sys . stdin . readline ( ) ) NEW_LINE x2 = int ( sys . stdin . readline ( ) ) NEW_LINE y2 = int ( sys . stdin . readline ( ) ) NEW_LINE x3 = int ( sys . stdin . readline ( ) ) NEW_LINE y3 = int ( sys . stdin . readline ( ) ) NEW_LINE print ( '3' ) NEW_LINE print ( ( x1 + x2 - x3 ) , y1 + y2 - y3 ) NEW_LINE print ( ( x3 + x2 - x1 ) , y3 + y2 - y1 ) NEW_LINE print ( ( x1 + x3 - x2 ) , y1 + y3 - y2 ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import csv NEW_LINE class Main ( sys . stdout ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdout . write ( ' ' ) NEW_LINE self . count = 0 NEW_LINE DEDENT def __iter__ ( self ) : NEW_LINE INDENT return self . count NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return self . count NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . count == other . count NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . __eq__ ( other ) NEW_LINE DEDENT DEDENT
def sum_ap ( n , d ) : NEW_LINE INDENT n //= d NEW_LINE return ( n ) * ( 1 + n ) * d / 2 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE t = 0 NEW_LINE while t > 0 : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE global s NEW_LINE global f NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = string . atoi ( n ) NEW_LINE f = string . atoi ( n ) NEW_LINE sum += f - s NEW_LINE DEDENT if t <= sum : NEW_LINE INDENT print ( ' OK ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( t - sum ) NEW_LINE DEDENT t = len ( sys . stdin ) NEW_LINE DEDENT DEDENT
def GFG ( num ) : NEW_LINE INDENT fact = 1 NEW_LINE while num > 1 : NEW_LINE INDENT fact *= num NEW_LINE num -= 1 NEW_LINE DEDENT return fact NEW_LINE def catalan ( n ) : NEW_LINE INDENT return fact ( 2 * n ) / ( fact ( n ) * fact ( n + 1 ) ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 5 NEW_LINE arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE i , k = 0 , 0 NEW_LINE for k in range ( n ) : NEW_LINE INDENT s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] < arr [ k ] : NEW_LINE INDENT s += 1 NEW_LINE DEDENT DEDENT catalan_left_bst = catalan ( s ) NEW_LINE catalan_right_bst = catalan ( n - s - 1 ) NEW_LINE total_bst = catalan_right_bst * catalan_left_bst NEW_LINE print ( total_bst , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE for j in range ( n ) : NEW_LINE INDENT a = sys . argv [ j ] NEW_LINE b = sys . argv [ j ] NEW_LINE if abs ( a - b ) == 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def code_chef ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT s = open ( ' / etc / codechef . d ' ) NEW_LINE t = len ( s ) NEW_LINE while t > 0 : NEW_LINE INDENT a = s . read ( 1 ) NEW_LINE b = s . read ( 1 ) NEW_LINE if a < b : NEW_LINE INDENT print ( b - a ) NEW_LINE DEDENT else : NEW_LINE INDENT if a % 2 != b % 2 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def count_ways ( n , arr , len_ ) : NEW_LINE INDENT count = [ 1 ] * ( n + 1 ) NEW_LINE count [ 0 ] = 1 NEW_LINE if not n : NEW_LINE INDENT return 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT no_ways = 0 NEW_LINE for j in range ( len_ ) : NEW_LINE INDENT if i - arr [ j ] >= 0 : NEW_LINE INDENT no_ways += count [ i - arr [ j ] ] NEW_LINE DEDENT count [ i ] = no_ways NEW_LINE DEDENT DEDENT return count [ n ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import numpy . pi NEW_LINE import numpy . random . seed as seed NEW_LINE class Main ( object ) : NEW_LINE INDENT def doit ( self ) : NEW_LINE INDENT while True : NEW_LINE INDENT n = len ( self . s ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT data = [ ] NEW_LINE for i in range ( 12 ) : NEW_LINE INDENT data . append ( self . s [ i ] - self . s [ i ] ) NEW_LINE DEDENT sum = 0 NEW_LINE flg = False NEW_LINE ans = - 1 NEW_LINE for i in range ( 12 ) : NEW_LINE INDENT sum += data [ i ] NEW_LINE if sum >= n : NEW_LINE INDENT ans = i + 1 NEW_LINE flg = True NEW_LINE break NEW_LINE DEDENT DEDENT if flg : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NA ' ) NEW_LINE DEDENT DEDENT DEDENT def debug ( * x ) : NEW_LINE INDENT print ( ' debug ▁ = ▁ % r ' % str ( x ) ) NEW_LINE DEDENT def doit ( * x ) : NEW_LINE INDENT return int ( x ) NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE try : NEW_LINE INDENT t = int ( math . ceil ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math . log ( math ( math . log ( math ( math . log ( math ( math . log ( math ( math ( math ( math ( math ( math ( math ( math ( math ( math ( math ( math ( math ( ) ( math ( math ( math ( math ( ) ( math ( math ( ) ( math ( ) ( math ( math ( ) ( math ( math ( ) ( math ( math ( math ( ) ( math ( math ( ) ( math ( math ( math ( ) ( math ( math ( math ( ) ( ) ( math ( math ( ) ( math ( math ( ) ( math ( ) ( math ( math ( ) ( math ( ) ( math ( math ( math ( ) ( math ( ) ( math ( math ( ) ( math ( math ( math ( ) ( math ( ) ( math ( math ( ) ( math ( math ( ) ( math ( math ( ) ( math ( math ( math ( ) ( ) ( math ( math ( math ( math ( ) ( math ( math ( ) ( math ( ) ( math ( math ( math ( ) ( math ( math ( ) ( math ( ) ( math ( math ( math ( math ( ) ( math ( math ( ) ( math ( math ( ( math ( math ( math ( ) ( math ( ) ( math ( ( math ( math ( ( math ( math ( ( ( math ( ( math ( ( math ( ( ( math ( ( ( math ( ( ( ( math ( ( ( math ( ( ( math ( ( ( ( ( math ( ( ( ( ( math ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (
def CF709A ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE b = len ( sys . argv ) NEW_LINE d = len ( sys . argv ) NEW_LINE a , sum , count = 0 , 0 NEW_LINE while n > 0 : NEW_LINE INDENT a = sys . argv [ n ] NEW_LINE if a <= b : NEW_LINE INDENT sum += a NEW_LINE DEDENT if sum > d : NEW_LINE INDENT sum = 0 NEW_LINE count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( arr , low , high , key ) : NEW_LINE INDENT if high < low : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if key == arr [ mid ] : NEW_LINE INDENT return mid NEW_LINE DEDENT if key > arr [ mid ] : NEW_LINE INDENT return binary_search ( arr , ( mid + 1 ) , high , key ) NEW_LINE DEDENT return binary_search ( arr , low , ( mid - 1 ) , key ) NEW_LINE DEDENT
def equal_xor_sum ( arr , n ) : NEW_LINE INDENT Sum = 0 NEW_LINE Xor = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT Sum = Sum + arr [ i ] NEW_LINE Xor = Xor ^ arr [ i ] NEW_LINE DEDENT if Sum == Xor : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT cntEven , cntOdd = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT cntEven += 1 NEW_LINE DEDENT else : NEW_LINE INDENT cntOdd += 1 NEW_LINE DEDENT DEDENT evenPairs = 0 NEW_LINE evenPairs += ( ( cntEven * ( cntEven - 1 ) ) // 2 ) NEW_LINE evenPairs += ( ( cntOdd * ( cntOdd - 1 ) ) // 2 ) NEW_LINE oddPairs = 0 NEW_LINE oddPairs += ( cntEven * cntOdd ) NEW_LINE print ( " Odd ▁ pairs ▁ = ▁ % d " % oddPairs ) NEW_LINE print ( " Even ▁ pairs ▁ = ▁ % d " % evenPairs ) NEW_LINE DEDENT
def min_broadcast_range ( houses , towers ) : NEW_LINE INDENT n = len ( houses ) NEW_LINE m = len ( towers ) NEW_LINE left_tower = sys . maxsize NEW_LINE right_tower = towers [ 0 ] NEW_LINE j , k = 0 , 0 NEW_LINE min_range = 0 NEW_LINE while j < n : NEW_LINE INDENT if houses [ j ] < right_tower : NEW_LINE INDENT left = houses [ j ] - left_tower NEW_LINE right = right_tower - houses [ j ] NEW_LINE local_max = left if left < right else right NEW_LINE if local_max > min_range : NEW_LINE INDENT min_range = local_max NEW_LINE DEDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT left_tower = towers [ k ] NEW_LINE if k < m - 1 : NEW_LINE INDENT k += 1 NEW_LINE right_tower = towers [ k ] NEW_LINE DEDENT else : NEW_LINE INDENT right_tower = sys . maxsize NEW_LINE DEDENT DEDENT DEDENT return min_range NEW_LINE DEDENT
def get_remaining_der ( num , divisor ) : NEW_LINE INDENT import math NEW_LINE return ( num - divisor * ( num / divisor ) ) NEW_LINE DEDENT
def tennis ( ) : NEW_LINE INDENT import string NEW_LINE s = [ ] NEW_LINE res , cnt1 , cnt2 = 0 , 0 , 0 NEW_LINE n , m , z = s . pop ( 0 ) , s . pop ( 0 ) , s . pop ( 0 ) NEW_LINE for i in range ( m , z + 1 , m ) : NEW_LINE INDENT for j in range ( n , z + 1 , n ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT res . append ( cnt1 ) NEW_LINE DEDENT DEDENT DEDENT print ( res ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT import aoj0181 NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT import aoj0181 NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT class aoj0181 ( aoj0181 ) : NEW_LINE INDENT def __init__ ( self , width ) : NEW_LINE INDENT self . width = width NEW_LINE self . books = [ ] NEW_LINE self . width = width NEW_LINE DEDENT def is_possible ( self ) : NEW_LINE INDENT w , cnt = 0 , 1 NEW_LINE for i in range ( self . n ) : NEW_LINE INDENT w += self . books [ i ] NEW_LINE if self . books [ i ] > width : NEW_LINE INDENT return False NEW_LINE DEDENT if w > width : NEW_LINE INDENT cnt += 1 NEW_LINE w = self . books [ i ] NEW_LINE DEDENT DEDENT return cnt > self . m and self . width NEW_LINE DEDENT def do_it ( self ) : NEW_LINE INDENT while True : NEW_LINE INDENT m = self . m NEW_LINE n = self . n NEW_LINE if n + m == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT self . books = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT self . books . append ( self . width ) NEW_LINE DEDENT left = 1 NEW_LINE right = 1500000 NEW_LINE while right - left != 1 : NEW_LINE INDENT next = ( left + right ) // 2 NEW_LINE if is_possible ( next ) : NEW_LINE INDENT right = next NEW_LINE DEDENT else : NEW_LINE INDENT left = next NEW_LINE DEDENT DEDENT print ( right ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import collections NEW_LINE import sys NEW_LINE class Stuff ( object ) : NEW_LINE INDENT def __init__ ( self , v ) : NEW_LINE INDENT self . v = v NEW_LINE self . w = w NEW_LINE self . performance = 1.0 * v / w NEW_LINE DEDENT def __lt__ ( self , self ) : NEW_LINE INDENT if self . performance < self . performance : NEW_LINE INDENT return 1 NEW_LINE DEDENT if self . performance > self . performance : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT DEDENT class Main ( object ) : NEW_LINE INDENT def __init__ ( self , n ) : NEW_LINE INDENT self . n = n NEW_LINE self . w = w NEW_LINE self . que = collections . deque ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT vi , wi = self . n NEW_LINE self . que . append ( ( vi , wi ) ) NEW_LINE DEDENT DEDENT DEDENT res = 0 NEW_LINE while w > 0 and not que . empty ( ) : NEW_LINE INDENT s = que . popleft ( ) NEW_LINE if w >= s . w : NEW_LINE INDENT res += s . v NEW_LINE w -= s . w NEW_LINE DEDENT else : NEW_LINE INDENT res += s . performance * w NEW_LINE w = 0 NEW_LINE DEDENT DEDENT print ( math . floor ( res ) ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT ones , twos = 0 , 0 NEW_LINE common_bit_mask = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT twos = twos | ( ones & arr [ i ] ) NEW_LINE ones = ones ^ arr [ i ] NEW_LINE common_bit_mask = ~ ( ones & twos ) NEW_LINE ones &= common_bit_mask NEW_LINE twos &= common_bit_mask NEW_LINE DEDENT return ones NEW_LINE DEDENT
def maxdiff ( arr , n ) : NEW_LINE INDENT freq = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ arr [ i ] ] = freq . get ( arr [ i ] , None ) or 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] : NEW_LINE INDENT ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] ) NEW_LINE DEDENT elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] : NEW_LINE INDENT ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] ) NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT
def CF_1447B_numbersBox ( ) : NEW_LINE INDENT import sys NEW_LINE count = sys . maxsize NEW_LINE for i in range ( count ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE m = sys . maxsize NEW_LINE arr = [ 0 ] * n NEW_LINE nagiviteTimes = 0 NEW_LINE minNum = sys . maxsize NEW_LINE sumNum = 0 NEW_LINE for j in range ( len ( arr ) ) : NEW_LINE INDENT arr [ j ] = sys . maxsize NEW_LINE if arr [ j ] < 0 : NEW_LINE INDENT arr [ j ] = 0 - arr [ j ] NEW_LINE nagiviteTimes += 1 NEW_LINE sumNum += arr [ j ] NEW_LINE if minNum > arr [ j ] : NEW_LINE INDENT minNum = arr [ j ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT sumNum += arr [ j ] NEW_LINE if minNum > arr [ j ] : NEW_LINE INDENT minNum = arr [ j ] NEW_LINE DEDENT DEDENT DEDENT if nagiviteTimes % 2 == 0 : NEW_LINE INDENT print ( sumNum ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( sumNum - minNum * 2 ) NEW_LINE DEDENT DEDENT DEDENT
def make_ap ( arr , n ) : NEW_LINE INDENT if n == 3 : NEW_LINE INDENT common_difference = arr [ 2 ] - arr [ 1 ] NEW_LINE initial_term = arr [ 1 ] - common_difference NEW_LINE DEDENT elif ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] : NEW_LINE INDENT initial_term = arr [ 0 ] NEW_LINE common_difference = arr [ 1 ] - arr [ 0 ] NEW_LINE DEDENT elif ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) : NEW_LINE INDENT common_difference = arr [ 2 ] - arr [ 1 ] NEW_LINE initial_term = arr [ 1 ] - common_difference NEW_LINE DEDENT else : NEW_LINE INDENT common_difference = ( arr [ 3 ] - arr [ 0 ] ) // 3 NEW_LINE initial_term = arr [ 0 ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( initial_term + str ( i * common_difference ) , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT
def count_pairs ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for x in range ( 1 , n ) : NEW_LINE INDENT for y in range ( x + 1 , n + 1 ) : NEW_LINE INDENT if ( y + x ) % ( y ^ x ) == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def count_pairs ( n ) : NEW_LINE INDENT import sys NEW_LINE count = 0 NEW_LINE for x in range ( 1 , n ) : NEW_LINE INDENT for y in range ( x + 1 , n + 1 ) : NEW_LINE INDENT if ( y * x ) % ( y + x ) == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def longest_palindrome ( s ) : NEW_LINE INDENT count = [ 0 ] * 128 NEW_LINE for c in s : NEW_LINE INDENT count [ ord ( c ) ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE for v in count : NEW_LINE INDENT ans += v // 2 * 2 NEW_LINE if ans % 2 == 0 and v % 2 == 1 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def GFG ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE if k > n - k : NEW_LINE INDENT k = n - k NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT res *= ( n - i ) NEW_LINE res //= ( i + 1 ) NEW_LINE DEDENT return res NEW_LINE DEDENT
def ex8 ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import math NEW_LINE count = 0 NEW_LINE flag = 0 NEW_LINE s = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . append ( ' ▁ % s ' % i ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT res = ' ' NEW_LINE count = 0 NEW_LINE for q in range ( 1 , 12 + 1 ) : NEW_LINE INDENT if s [ q ] == ' X ' : NEW_LINE INDENT res = ' ▁ 1x12' NEW_LINE count += 1 NEW_LINE break NEW_LINE DEDENT DEDENT for j in range ( 2 , 6 + 1 ) : NEW_LINE INDENT flag = 0 NEW_LINE if 12 % j == 0 : NEW_LINE INDENT for k in range ( 1 , 12 // j + 1 ) : NEW_LINE INDENT flag = 0 NEW_LINE for p in range ( k , 12 + 1 , 12 // j ) : NEW_LINE INDENT if s [ p ] == ' O ' : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag == 0 : NEW_LINE INDENT count += 1 NEW_LINE res += ' ▁ % dx % d ' % ( j , 12 // j ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT flag = 0 NEW_LINE for l in range ( 1 , 12 + 1 ) : NEW_LINE INDENT if s [ l ] == ' O ' : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag == 0 : NEW_LINE INDENT res += ' ▁ 12x1' NEW_LINE count += 1 NEW_LINE DEDENT print ( ' % d % s ' % ( count , res ) ) NEW_LINE print ( ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import TextIOWrapper NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT if n % 2 == 1 : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT
def count_number ( n ) : NEW_LINE INDENT import sys NEW_LINE result = 0 NEW_LINE for i in range ( 1 , 9 + 1 ) : NEW_LINE INDENT s = [ ] NEW_LINE if i <= n : NEW_LINE INDENT s . append ( i ) NEW_LINE result += 1 NEW_LINE DEDENT while not s : NEW_LINE INDENT tp = s [ - 1 ] NEW_LINE s . append ( tp ) NEW_LINE for j in range ( tp % 10 , 9 + 1 ) : NEW_LINE INDENT x = tp * 10 + j NEW_LINE if x <= n : NEW_LINE INDENT s . append ( x ) NEW_LINE result += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT
def max_average_of_path ( cost , N ) : NEW_LINE INDENT dp = np . zeros ( ( N + 1 , N + 1 ) ) NEW_LINE dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , N ) : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] NEW_LINE DEDENT for j in range ( 1 , N ) : NEW_LINE INDENT dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] NEW_LINE DEDENT for i in range ( 1 , N ) : NEW_LINE INDENT for j in range ( 1 , N ) : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ] NEW_LINE DEDENT DEDENT return float ( dp [ N - 1 ] [ N - 1 ] ) / ( 2 * N - 1 ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import numpy as np NEW_LINE global sieve_prime NEW_LINE global sieve_count NEW_LINE sieve_prime [ 1 ] = 1 NEW_LINE for i in range ( 2 , MAX + 1 ) : NEW_LINE INDENT if sieve_prime [ i ] == 0 : NEW_LINE INDENT for j in range ( i * 2 , MAX + 1 , i ) : NEW_LINE INDENT if sieve_prime [ j ] == 0 : NEW_LINE INDENT sieve_prime [ j ] = 1 NEW_LINE sieve_count [ i ] += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return np . array ( sieve_prime ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n , k , t , u , v , l = select . select ( [ sys . stdin ] ) NEW_LINE d = [ None ] * ( n + 1 ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT d [ n ] = l NEW_LINE pos , c , nk = 0 , 0 , 0 NEW_LINE tm = 0 NEW_LINE while pos < l : NEW_LINE INDENT if pos < d [ c ] : NEW_LINE INDENT if nk > 0 : NEW_LINE INDENT nk -= 1 NEW_LINE x = min ( l , pos + t * v ) NEW_LINE tm += ( x - pos ) / float ( v ) NEW_LINE pos = x NEW_LINE DEDENT else : NEW_LINE INDENT tm += ( d [ c ] - pos ) / float ( u ) NEW_LINE pos = d [ c ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if d [ c ] == pos : NEW_LINE INDENT x = min ( l , pos + t * v ) NEW_LINE tm += ( x - pos ) / float ( v ) NEW_LINE pos = x NEW_LINE c += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if nk < k : NEW_LINE INDENT c += 1 NEW_LINE nk += 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = min ( l , d [ c ] + t * v ) NEW_LINE c += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( tm ) NEW_LINE DEDENT
def ways_to_split ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE answer = 0 NEW_LINE prefix = [ 0 ] * n NEW_LINE suffix = [ 0 ] * n NEW_LINE seen = [ 0 ] * 26 NEW_LINE for i in range ( n ) : NEW_LINE INDENT prev = ( prefix [ i - 1 ] if i - 1 >= 0 else 0 ) NEW_LINE if seen [ s [ i ] - ' a ' ] == 0 : NEW_LINE INDENT prefix [ i ] += ( prev + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT prefix [ i ] = prev NEW_LINE DEDENT seen [ s [ i ] - ' a ' ] = 1 NEW_LINE DEDENT for i in range ( 26 ) : NEW_LINE INDENT seen [ i ] = 0 NEW_LINE DEDENT suffix [ n - 1 ] = 0 NEW_LINE for i in range ( n - 1 , 1 , - 1 ) : NEW_LINE INDENT prev = suffix [ i ] NEW_LINE if seen [ s [ i ] - ' a ' ] == 0 : NEW_LINE INDENT suffix [ i - 1 ] += ( prev + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT suffix [ i - 1 ] = prev NEW_LINE seen [ s [ i ] - ' a ' ] = 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if prefix [ i ] == suffix [ i ] : NEW_LINE INDENT answer += 1 NEW_LINE DEDENT DEDENT return answer NEW_LINE DEDENT
def p121 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . factorial ( ) ) NEW_LINE TURNS = 15 NEW_LINE ways = [ [ 1 ] ] NEW_LINE for i in range ( 1 , TURNS + 1 ) : NEW_LINE INDENT ways . append ( [ 1 ] ) NEW_LINE for j in range ( 0 , i + 1 ) : NEW_LINE INDENT temp = 0 NEW_LINE if j < i : NEW_LINE INDENT temp = ways [ i - 1 ] [ j ] * math . log ( i ) NEW_LINE DEDENT if j > 0 : NEW_LINE INDENT temp = temp + ways [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT ways [ i ] [ j ] = temp NEW_LINE DEDENT DEDENT numer = 0 NEW_LINE for i in range ( TURNS // 2 + 1 , TURNS + 1 ) : NEW_LINE INDENT numer = numer + ways [ TURNS ] [ i ] NEW_LINE DEDENT denom = math . factorial ( TURNS + 1 ) NEW_LINE return math . divide ( numer , 2 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import list NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE from math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT string NEW_LINE INDENT string = string NEW_LINE DEDENT DEDENT
def merge ( m , n ) : NEW_LINE INDENT import sys NEW_LINE arr1 = [ 1 , 5 , 9 , 10 , 15 , 20 ] NEW_LINE arr2 = [ 2 , 3 , 8 , 13 ] NEW_LINE def merge ( m , n ) : NEW_LINE INDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT j , last = arr1 [ m - 1 ] NEW_LINE for j in range ( m - 2 , - 1 , - 1 ) : NEW_LINE INDENT arr1 [ j + 1 ] = arr1 [ j ] NEW_LINE DEDENT if j != m - 2 or last > arr2 [ i ] : NEW_LINE INDENT arr1 [ j + 1 ] = arr2 [ i ] NEW_LINE arr2 [ i ] = last NEW_LINE DEDENT DEDENT DEDENT return np . array ( arr1 ) , np . array ( arr2 ) NEW_LINE DEDENT
def ggcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return ggcd ( b % a , a ) NEW_LINE DEDENT def same_remainder ( a , b , c ) : NEW_LINE INDENT a1 , b1 , c1 = ( b - a ) , ( c - b ) , ( c - a ) NEW_LINE return ggcd ( a1 , ggcd ( b1 , c1 ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE import string NEW_LINE import math NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE import struct NEW_LINE DEDENT
def GFG ( n , parts , next_part ) : NEW_LINE INDENT if not parts and not n : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n <= 0 or parts <= 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if dp [ n ] [ next_part ] [ parts ] != - 1 : NEW_LINE INDENT return dp [ n ] [ next_part ] [ parts ] NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( next_part , n + 1 ) : NEW_LINE INDENT ans += count_ways ( n - i , parts - 1 , i ) NEW_LINE DEDENT return ( dp [ n ] [ next_part ] [ parts ] , ans ) NEW_LINE DEDENT def count_ways ( n ) : NEW_LINE INDENT for i in range ( 5001 ) : NEW_LINE INDENT for j in range ( 5001 ) : NEW_LINE INDENT for l in range ( 5 ) : NEW_LINE INDENT dp [ i ] [ j ] [ l ] = - 1 NEW_LINE DEDENT DEDENT DEDENT return count_ways ( n , 4 , 1 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 8 NEW_LINE print ( count_ways ( n ) ) NEW_LINE DEDENT
def GFG ( a , b ) : NEW_LINE INDENT if ( a + b ) % 2 == 0 : NEW_LINE INDENT return ( ( a + b ) // 2 ) NEW_LINE DEDENT return - 1 NEW_LINE DEDENT
def GFG ( x , y , z ) : NEW_LINE INDENT N = 101 NEW_LINE mod = int ( 1e9 ) + 7 NEW_LINE exactsum = [ [ 0 ] * N for i in range ( N ) ] NEW_LINE exactnum = [ [ 0 ] * N for i in range ( N ) ] NEW_LINE def sum ( x , y , z ) : NEW_LINE INDENT ans = 0 NEW_LINE exactnum [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 0 , x + 1 ) : NEW_LINE INDENT for j in range ( 0 , y + 1 ) : NEW_LINE INDENT for k in range ( 0 , z + 1 ) : NEW_LINE INDENT if i > 0 : NEW_LINE INDENT exactsum [ i ] [ j ] [ k ] += ( exactsum [ i - 1 ] [ j ] [ k ] * 10 + 4 * exactnum [ i - 1 ] [ j ] [ k ] ) % mod NEW_LINE exactnum [ i ] [ j ] [ k ] += exactnum [ i - 1 ] [ j ] [ k ] % mod NEW_LINE DEDENT if j > 0 : NEW_LINE INDENT exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j - 1 ] [ k ] * 10 + 5 * exactnum [ i ] [ j - 1 ] [ k ] ) % mod NEW_LINE exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j - 1 ] [ k ] % mod NEW_LINE DEDENT if k > 0 : NEW_LINE INDENT exactsum [ i ] [ j ] [ k ] += ( exactsum [ i ] [ j ] [ k - 1 ] * 10 + 6 * exactnum [ i ] [ j ] [ k - 1 ] ) % mod NEW_LINE exactnum [ i ] [ j ] [ k ] += exactnum [ i ] [ j ] [ k - 1 ] % mod NEW_LINE DEDENT ans += exactsum [ i ] [ j ] [ k ] % mod NEW_LINE ans %= mod NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT x , y , z = 1 , 1 , 1 NEW_LINE print ( sum ( x , y , z ) % mod ) NEW_LINE DEDENT DEDENT
def is_valid_string ( data ) : NEW_LINE INDENT global freq NEW_LINE freq = [ 0 ] * ( CHARS ) NEW_LINE for c in data : NEW_LINE INDENT freq [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT i , freq1 , count_freq1 = 0 , 0 , 0 NEW_LINE for i in range ( CHARS ) : NEW_LINE INDENT if freq [ i ] != 0 : NEW_LINE INDENT freq1 = freq [ i ] NEW_LINE count_freq1 = 1 NEW_LINE break NEW_LINE DEDENT DEDENT j , freq2 , count_freq2 = 0 , 0 , 0 NEW_LINE for j in range ( i + 1 , CHARS ) : NEW_LINE INDENT if freq [ j ] != 0 : NEW_LINE INDENT if freq [ j ] == freq1 : NEW_LINE INDENT count_freq1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_freq2 = 1 NEW_LINE freq2 = freq [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT for k in range ( j + 1 , CHARS ) : NEW_LINE INDENT if freq [ k ] != 0 : NEW_LINE INDENT if freq [ k ] == freq1 : NEW_LINE INDENT count_freq1 += 1 NEW_LINE DEDENT if freq [ k ] == freq2 : NEW_LINE INDENT count_freq2 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if count_freq1 > 1 and count_freq2 > 1 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def code_chef ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import string NEW_LINE import io NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def find_minimum_subsequences ( A , B ) : NEW_LINE INDENT number_of_subsequences = 1 NEW_LINE size_of_b = len ( B ) NEW_LINE size_of_a = len ( A ) NEW_LINE inf = 1000000 NEW_LINE next = np . zeros ( ( 26 , size_of_b ) ) NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT for j in range ( size_of_b ) : NEW_LINE INDENT next [ i ] [ j ] = inf NEW_LINE DEDENT DEDENT for i in range ( size_of_b ) : NEW_LINE INDENT next [ B [ i ] - ' a ' ] [ i ] = i NEW_LINE DEDENT for i in range ( 26 ) : NEW_LINE INDENT for j in range ( size_of_b - 2 , - 1 , - 1 ) : NEW_LINE INDENT if next [ i ] [ j ] == inf : NEW_LINE INDENT next [ i ] [ j ] = next [ i ] [ j + 1 ] NEW_LINE DEDENT DEDENT DEDENT pos = 0 NEW_LINE i = 0 NEW_LINE while i < size_of_a : NEW_LINE INDENT if pos == 0 and next [ A [ i ] - ' a ' ] [ pos ] == inf : NEW_LINE INDENT number_of_subsequences = - 1 NEW_LINE break NEW_LINE DEDENT elif pos < size_of_b and next [ A [ i ] - ' a ' ] [ pos ] < inf : NEW_LINE INDENT next_index = next [ A [ i ] - ' a ' ] [ pos ] + 1 NEW_LINE pos = next_index NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT number_of_subsequences += 1 NEW_LINE pos = 0 NEW_LINE DEDENT DEDENT return number_of_subsequences NEW_LINE DEDENT
def main ( rgs ) : NEW_LINE INDENT import sys NEW_LINE fh = sys . stdin NEW_LINE pieces = [ ] NEW_LINE t = int ( fh . readline ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT a = fh . readline ( ) . split ( ) NEW_LINE row = int ( a [ 0 ] ) NEW_LINE col = int ( a [ 1 ] ) NEW_LINE ans = [ ] NEW_LINE ansarray = [ 0 ] * row * col NEW_LINE p = 0 NEW_LINE rowarray = [ 0 , 0 , row - 1 , row - 1 ] NEW_LINE colarray = [ 0 , col - 1 , 0 , col - 1 ] NEW_LINE for j in range ( row ) : NEW_LINE INDENT for k in range ( col ) : NEW_LINE INDENT dis = 0 NEW_LINE for l in range ( 4 ) : NEW_LINE INDENT dis = max ( dis , abs ( rowarray [ l ] - j ) + abs ( colarray [ l ] - k ) ) NEW_LINE DEDENT ansarray [ p ] = dis NEW_LINE p += 1 NEW_LINE DEDENT DEDENT ansarray . sort ( ) NEW_LINE for j in ansarray : NEW_LINE INDENT ans . append ( ' % d ▁ % s ' % ( j , j ) ) NEW_LINE DEDENT pieces . append ( ' % s \n ' % ans ) NEW_LINE DEDENT print ( pieces ) NEW_LINE DEDENT
def find_rank ( arr , length ) : NEW_LINE INDENT import sys NEW_LINE sys . stdout . write ( '1' + ' ▁ ' ) NEW_LINE for i in range ( 1 , len ( arr ) ) : NEW_LINE INDENT rank = 1 NEW_LINE for j in range ( i ) : NEW_LINE INDENT if arr [ j ] > arr [ i ] : NEW_LINE INDENT rank += 1 NEW_LINE DEDENT DEDENT sys . stdout . write ( ' % d ▁ ' % rank ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE h = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE b = [ None ] * n NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT a . sort ( ) NEW_LINE b . sort ( ) NEW_LINE ans = sys . maxsize NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT if i != 0 : NEW_LINE INDENT h -= b [ i - 1 ] NEW_LINE DEDENT cnt = 0 NEW_LINE if h > 0 : NEW_LINE INDENT cnt = ( h + a [ n - 1 ] - 1 ) / a [ n - 1 ] NEW_LINE DEDENT ans = min ( ans , cnt + i ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def firstkdigits ( n , k ) : NEW_LINE INDENT product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT product *= n NEW_LINE DEDENT while int ( product / pow ( 10 , k ) ) != 0 : NEW_LINE INDENT product = product // 10 NEW_LINE DEDENT return product NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE r = sys . stdin . readlines ( ) NEW_LINE for line in r : NEW_LINE INDENT m , n = int ( line . split ( ) [ 0 ] ) , int ( line . split ( ) [ 1 ] ) NEW_LINE if m < n : NEW_LINE INDENT t = m NEW_LINE m = n NEW_LINE n = t NEW_LINE DEDENT while n != 0 : NEW_LINE INDENT t = n NEW_LINE n = m % n NEW_LINE m = t NEW_LINE DEDENT print ( m ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE s = list ( sys . stdin . readlines ( ) ) NEW_LINE a = [ 0 ] * 26 NEW_LINE sum = 0 NEW_LINE for c in s : NEW_LINE INDENT a [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i in range ( 26 ) : NEW_LINE INDENT sum += a [ i ] % 2 NEW_LINE DEDENT print ( sum / 2 ) NEW_LINE DEDENT
def complement ( num ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE temp = num NEW_LINE while True : NEW_LINE INDENT num , num = 0 , num // 10 , num NEW_LINE if abs ( num ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT num = temp NEW_LINE comp = int ( math . pow ( 10 , len ( num ) ) ) - num NEW_LINE return comp NEW_LINE DEDENT
def count_unset_bits ( n ) : NEW_LINE INDENT x = n NEW_LINE n |= n >> 1 NEW_LINE n |= n >> 2 NEW_LINE n |= n >> 4 NEW_LINE n |= n >> 8 NEW_LINE n |= n >> 16 NEW_LINE return sum ( x ^ n ) NEW_LINE DEDENT
def min_operations ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE maxi , result = 0 , 0 NEW_LINE freq = np . zeros ( 1000001 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = arr [ i ] NEW_LINE freq [ x ] += 1 NEW_LINE DEDENT maxi = np . max ( arr ) NEW_LINE for i in range ( 1 , maxi + 1 ) : NEW_LINE INDENT if freq [ i ] != 0 : NEW_LINE INDENT for j in range ( i * 2 , maxi , 4 , 4 ) : NEW_LINE INDENT freq [ j ] = 0 NEW_LINE DEDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT
def total_ways ( N , M , X ) : NEW_LINE INDENT dp = np . zeros ( ( N + 1 , 2 ) ) NEW_LINE if X == 1 : NEW_LINE INDENT dp [ 0 ] [ 0 ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ 0 ] [ 1 ] = 0 NEW_LINE DEDENT if X == 1 : NEW_LINE INDENT dp [ 1 ] [ 0 ] = 0 NEW_LINE dp [ 1 ] [ 1 ] = M - 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ 1 ] [ 0 ] = 1 NEW_LINE dp [ 1 ] [ 1 ] = ( M - 2 ) NEW_LINE DEDENT for i in range ( 2 , N ) : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] NEW_LINE dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) NEW_LINE DEDENT return dp [ N - 1 ] [ 0 ] NEW_LINE DEDENT
def get_min_num ( a , b , c ) : NEW_LINE INDENT import sys NEW_LINE if c < a or c > b : NEW_LINE INDENT return c NEW_LINE DEDENT x = ( ( b // c ) * c ) + c NEW_LINE return x NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE s = sys . stdin . read ( ) . strip ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT x = 0 NEW_LINE max = 0 NEW_LINE for c in s : NEW_LINE INDENT if c == ' I ' : NEW_LINE INDENT x += 1 NEW_LINE DEDENT else : NEW_LINE INDENT x -= 1 NEW_LINE DEDENT max = max ( max , x ) NEW_LINE DEDENT print ( max ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n , m = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE al = [ ] NEW_LINE if not n and not m : NEW_LINE INDENT break NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT al . append ( ( sys . stdin . read ( ) , sys . stdin . read ( ) ) ) NEW_LINE DEDENT al . sort ( ) NEW_LINE while not al : NEW_LINE INDENT st = al . pop ( 0 ) NEW_LINE m -= st . d NEW_LINE if m <= 0 : NEW_LINE INDENT ans -= m * st . p NEW_LINE break NEW_LINE DEDENT DEDENT while not al : NEW_LINE INDENT st = al . pop ( 0 ) NEW_LINE ans += st . d * st . p NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT front = [ ] NEW_LINE back = [ ] NEW_LINE arr = [ 0 ] * n NEW_LINE front_sum = 0 NEW_LINE back_sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = int ( sys . stdin . read ( ) ) NEW_LINE front_sum += x NEW_LINE front . append ( x ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT x = int ( sys . stdin . read ( ) ) NEW_LINE back_sum += x NEW_LINE back . append ( - x ) NEW_LINE DEDENT values = [ front_sum , - back_sum ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT front_sum += arr [ i ] NEW_LINE front . append ( arr [ i ] ) NEW_LINE front_sum -= front [ i - 1 ] NEW_LINE values [ i + 1 ] += front_sum NEW_LINE back_sum += arr [ n - i - 1 ] NEW_LINE back . append ( - arr [ n - i - 1 ] ) NEW_LINE back_sum += back [ i - 1 ] NEW_LINE values [ n - i - 1 ] -= back_sum NEW_LINE DEDENT max = 0 NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT max = max ( max , values [ i ] ) NEW_LINE DEDENT print ( max ) NEW_LINE DEDENT
def GFG ( N ) : NEW_LINE INDENT arr = [ 1 , 5 , 6 ] NEW_LINE count = [ 0 ] * ( N + 1 ) NEW_LINE count [ 0 ] = 1 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT for j in range ( len ( arr ) ) : NEW_LINE INDENT if i >= arr [ j ] : NEW_LINE INDENT count [ i ] += count [ i - arr [ j ] ] NEW_LINE DEDENT DEDENT DEDENT return count [ N ] NEW_LINE DEDENT
def number_of_ways ( x ) : NEW_LINE INDENT import sys NEW_LINE if not x or x == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return number_of_ways ( x - 1 ) + ( x - 1 ) * number_of_ways ( x - 2 ) NEW_LINE DEDENT DEDENT
def count_freq ( a , n ) : NEW_LINE INDENT hm = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT hm [ a [ i ] ] += 1 NEW_LINE DEDENT cumul = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT cumul += hm [ a [ i ] ] NEW_LINE if hm [ a [ i ] ] != 0 : NEW_LINE INDENT print ( ' % d - > % d ' % ( a [ i ] , cumul ) ) NEW_LINE DEDENT hm [ a [ i ] ] = 0 NEW_LINE DEDENT DEDENT
def possible_triplet_in_range ( L , R ) : NEW_LINE INDENT import sys NEW_LINE flag = False NEW_LINE possible_a , possible_b , possible_c = 0 , 0 , 0 NEW_LINE numbers_in_range = ( R - L + 1 ) NEW_LINE if numbers_in_range < 3 : NEW_LINE INDENT flag = False NEW_LINE DEDENT elif numbers_in_range > 3 : NEW_LINE INDENT flag = True NEW_LINE if L % 2 > 0 : NEW_LINE INDENT L += 1 NEW_LINE DEDENT possible_a = L NEW_LINE possible_b = L + 1 NEW_LINE possible_c = L + 2 NEW_LINE DEDENT else : NEW_LINE INDENT if not ( L % 2 > 0 ) : NEW_LINE INDENT flag = True NEW_LINE possible_a = L NEW_LINE possible_b = L + 1 NEW_LINE possible_c = L + 2 NEW_LINE DEDENT else : NEW_LINE INDENT flag = False NEW_LINE DEDENT DEDENT if flag == True : NEW_LINE INDENT print ( " ( % d , ▁ % d , ▁ % d ) " " ▁ is ▁ one ▁ such ▁ possible " " ▁ triplet ▁ between ▁ % d ▁ and ▁ % d " " ▁ and ▁ % d " " % ( possible_a , possible_b , possible_c , possible_c , L , R ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No ▁ Such ▁ Triplet " " ▁ exists ▁ between ▁ % d ▁ and ▁ % d " " ▁ and ▁ % d " " % ( L , R ) ) NEW_LINE DEDENT DEDENT
def GFG ( charSet , str1 ) : NEW_LINE INDENT global alphabet NEW_LINE s2 = " " NEW_LINE for i in str1 : NEW_LINE INDENT s2 += alphabet [ charSet . find ( i ) ] NEW_LINE DEDENT return s2 NEW_LINE DEDENT
def generate_number ( count , a , n , num , k ) : NEW_LINE INDENT if count == k : NEW_LINE INDENT a = sorted ( a ) NEW_LINE return NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT generate_number ( count + 1 , a , n , num + a [ i ] , k ) NEW_LINE DEDENT def print_distinct_integers ( k , a , n ) : NEW_LINE INDENT generate_number ( 0 , a , n , 0 , k ) NEW_LINE print ( " The " , " ▁ " . join ( sorted ( a ) ) , " ▁ " , " distinct ▁ integers ▁ are : ▁ " ) NEW_LINE print ( ) NEW_LINE for ( i , j ) in enumerate ( a ) : NEW_LINE INDENT print ( i , end = " ▁ " ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT arr = [ 3 , 8 , 17 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE print_distinct_integers ( k , arr , n ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def product ( x ) : NEW_LINE INDENT prod = 1 NEW_LINE while x > 0 : NEW_LINE INDENT prod *= ( x % 10 ) NEW_LINE x //= 10 NEW_LINE DEDENT return prod NEW_LINE def find_number ( l , r ) : NEW_LINE INDENT b = str ( r ) NEW_LINE ans = r NEW_LINE for i in range ( len ( b ) ) : NEW_LINE INDENT if b [ i ] == '0' : NEW_LINE INDENT continue NEW_LINE DEDENT curr = b [ i ] + chr ( ( ord ( b [ i ] ) - ord ( '0' ) ) - 1 ) + chr ( ord ( '0' ) ) NEW_LINE for c in curr [ i + 1 : ] : NEW_LINE INDENT c = '9' NEW_LINE DEDENT num = 0 NEW_LINE for c in c : NEW_LINE INDENT num = num * 10 + ord ( c ) - ord ( '0' ) NEW_LINE DEDENT if num >= l and product ( ans ) < product ( num ) : NEW_LINE INDENT ans = num NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT l , r = 1 , 10 NEW_LINE print ( find_number ( l , r ) ) NEW_LINE l , r = 51 , 62 NEW_LINE print ( find_number ( l , r ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT global isPrime NEW_LINE MAX = 100005 NEW_LINE isPrime = [ False ] * MAX NEW_LINE def sieveOfEratostheneses ( ) : NEW_LINE INDENT isPrime [ 1 ] = True NEW_LINE for i in range ( 2 , 2 * MAX ) : NEW_LINE INDENT if not isPrime [ i ] : NEW_LINE INDENT for j in range ( 2 * i , MAX , i ) : NEW_LINE INDENT isPrime [ j ] = True NEW_LINE DEDENT DEDENT DEDENT DEDENT def findPrime ( n ) : NEW_LINE INDENT num = n + 1 NEW_LINE while num > 0 : NEW_LINE INDENT if not isPrime [ num ] : NEW_LINE INDENT return num NEW_LINE DEDENT num = num + 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT def minNumber ( arr , n ) : NEW_LINE INDENT sieveOfEratostheneses ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT if not isPrime [ sum ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT num = findPrime ( sum ) NEW_LINE return num - sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 2 , 4 , 6 , 8 , 12 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minNumber ( arr , n ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def get_min_sum ( arr , n ) : NEW_LINE INDENT bits_count , max_bit , sum , ans = [ 0 ] * MAX , 0 , 0 , 0 NEW_LINE for d in range ( n ) : NEW_LINE INDENT e , f = arr [ d ] , 0 NEW_LINE while e > 0 : NEW_LINE INDENT rem = e % 2 NEW_LINE e = e // 2 NEW_LINE if rem == 1 : NEW_LINE INDENT bits_count [ f ] += rem NEW_LINE DEDENT f += 1 NEW_LINE DEDENT max_bit = max ( max_bit , f ) NEW_LINE DEDENT for d in range ( max_bit ) : NEW_LINE INDENT temp = int ( math . pow ( 2 , d ) ) NEW_LINE if bits_count [ d ] > n // 2 : NEW_LINE INDENT ans = ans + temp NEW_LINE DEDENT DEDENT for d in range ( n ) : NEW_LINE INDENT arr [ d ] = arr [ d ] ^ ans NEW_LINE sum = sum + arr [ d ] NEW_LINE DEDENT return sum NEW_LINE DEDENT
def _70B ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE class _70B ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stdin = None NEW_LINE self . stdout = None NEW_LINE self . stdout = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE self . _70B = None NEW_LINE DEDENT DEDENT return _70B NEW_LINE DEDENT
def mikeandShortcuts ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE out = [ ] NEW_LINE global n NEW_LINE n = int ( f . readline ( ) ) NEW_LINE a = [ 0 ] * n NEW_LINE tk = list ( f . readline ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = int ( tk [ i ] ) - 1 NEW_LINE DEDENT g = [ [ ] for i in range ( n ) ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if a [ i ] != i : NEW_LINE INDENT g [ i ] . append ( a [ i ] ) NEW_LINE DEDENT g [ i ] . append ( i + 1 ) NEW_LINE g [ i + 1 ] . append ( i ) NEW_LINE DEDENT if a [ n - 1 ] != n - 1 : NEW_LINE INDENT g [ n - 1 ] . append ( a [ n - 1 ] ) NEW_LINE DEDENT dist = [ 0 ] * n NEW_LINE dist [ 0 ] = - 1 NEW_LINE dist [ 0 ] = 0 NEW_LINE q = [ 0 ] NEW_LINE while not q . empty ( ) : NEW_LINE INDENT u = q . pop ( ) NEW_LINE for v in g [ u ] : NEW_LINE INDENT if dist [ v ] == - 1 : NEW_LINE INDENT q . append ( v ) NEW_LINE dist [ v ] = dist [ u ] + 1 NEW_LINE DEDENT DEDENT DEDENT out . append ( dist [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT out . append ( ' ▁ % d ' % dist [ i ] ) NEW_LINE DEDENT print ( out ) NEW_LINE DEDENT
def strange_birth_day ( n , m ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE ans = 0 NEW_LINE j = 0 NEW_LINE for k in n [ : : - 1 ] : NEW_LINE INDENT if k < len ( m ) : NEW_LINE INDENT if m [ k ] > m [ j ] : NEW_LINE INDENT ans += m [ j ] NEW_LINE j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += m [ k ] NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE def main ( ) : NEW_LINE INDENT f = sys . stdin NEW_LINE test = len ( f ) NEW_LINE while test > 0 : NEW_LINE INDENT n = f . tell ( ) NEW_LINE m = f . tell ( ) NEW_LINE arr = [ ] NEW_LINE marr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( f . read ( ) - 1 ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT marr . append ( f . read ( ) ) NEW_LINE DEDENT strange = strange_birth_day ( ) NEW_LINE strange . help_birth_day_bow ( arr , marr ) NEW_LINE DEDENT DEDENT class f ( object ) : NEW_LINE INDENT def readline ( self ) : NEW_LINE INDENT f . readline ( ) NEW_LINE try : NEW_LINE INDENT return f . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return None NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = ' ' NEW_LINE try : NEW_LINE INDENT data = f . readline ( ) . strip ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT return f NEW_LINE DEDENT
def find_maximum_num ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( n , 1 , - 1 ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if i <= arr [ j ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if count >= i : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE s = list ( f ) NEW_LINE n = int ( f . strip ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT split_command = f . strip ( ) . split ( ) NEW_LINE a = int ( split_command [ 1 ] ) NEW_LINE b = int ( split_command [ 2 ] ) NEW_LINE if split_command [ 0 ] . startswith ( ' p ' ) : NEW_LINE INDENT print ( s [ a : b + 1 ] ) NEW_LINE DEDENT elif split_command [ 0 ] . startswith ( ' rev ' ) : NEW_LINE INDENT temp = list ( s [ a : b + 1 ] ) NEW_LINE temp . reverse ( ) NEW_LINE s [ a : b + 1 ] = ' ' . join ( temp ) NEW_LINE DEDENT else : NEW_LINE INDENT p = split_command [ 3 ] NEW_LINE s [ a : b + 1 ] = p NEW_LINE DEDENT DEDENT DEDENT
def GFG ( A , n ) : NEW_LINE INDENT dp = np . zeros ( ( 2000 , 2000 ) ) NEW_LINE flag = 1 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += A [ i ] NEW_LINE DEDENT for i in range ( - sum , sum + 1 ) : NEW_LINE INDENT try : NEW_LINE INDENT dp [ 0 ] [ i ] = np . inf NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT dp [ 0 ] [ 0 ] = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , sum + 1 ) : NEW_LINE INDENT try : NEW_LINE INDENT dp [ flag ] [ j ] = np . inf NEW_LINE if j - A [ i - 1 ] <= sum and j - A [ i - 1 ] >= - sum : NEW_LINE INDENT dp [ flag ] [ j ] = dp [ flag ^ 1 ] [ j - A [ i - 1 ] ] NEW_LINE DEDENT if j + A [ i - 1 ] <= sum and j + A [ i - 1 ] >= - sum and dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] != np . inf : NEW_LINE INDENT dp [ flag ] [ j ] = min ( dp [ flag ] [ j ] , dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] + 1 ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT flag = flag ^ 1 NEW_LINE DEDENT for i in range ( 0 , sum + 1 ) : NEW_LINE INDENT if dp [ flag ^ 1 ] [ i ] != np . inf : NEW_LINE INDENT return dp [ flag ^ 1 ] [ i ] NEW_LINE DEDENT DEDENT return n - 1 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE eps = 1e-10 NEW_LINE with open
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE try : NEW_LINE INDENT import aoj0221 NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT import aoj0221 NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT class aoj0221 : NEW_LINE INDENT person = [ False ] NEW_LINE m , n = 0 , 0 NEW_LINE def do_it ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT m = len ( sys . stdin . readline ( ) ) NEW_LINE n = len ( sys . stdin . readline ( ) ) NEW_LINE if m + n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT person . append ( True ) NEW_LINE user = 0 NEW_LINE cnt = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT input = sys . stdin . readline ( ) NEW_LINE talk = getTalk ( i ) NEW_LINE if input == talk and m - cnt > 1 : NEW_LINE INDENT person [ user ] = True NEW_LINE cnt += 1 NEW_LINE DEDENT user = getUser ( user ) NEW_LINE DEDENT i = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if person [ i ] == False : NEW_LINE INDENT print ( i + 1 , end = ' ▁ ' ) NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( i + 1 , m ) : NEW_LINE INDENT if person [ i ] == False : NEW_LINE INDENT print ( ' ▁ ' , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT DEDENT def getTalk ( num ) : NEW_LINE INDENT return ' FizzBuzz ' if num % 15 == 0 else ' Fizz ' if num % 3 == 0 else ' Fizz ' if num % 5 == 0 else ' Buzz ' if num % 5 == 0 else str ( num ) NEW_LINE DEDENT def getUser ( currentUser ) : NEW_LINE INDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT if not person [ ( currentUser + i ) % m ] : NEW_LINE INDENT return ( currentUser + i ) % m NEW_LINE DEDENT return - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT l = [ [ 0 ] * 1001 ] * 1001 NEW_LINE def initialize ( ) : NEW_LINE INDENT l [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , 1001 ) : NEW_LINE INDENT l [ i ] [ 0 ] = 1 NEW_LINE for j in range ( 1 , i + 1 ) : NEW_LINE INDENT l [ i ] [ j ] = ( l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT def nCr ( n , r ) : NEW_LINE INDENT return l [ n ] [ r ] NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT initialize ( ) NEW_LINE n = 8 NEW_LINE r = 3 NEW_LINE print ( nCr ( n , r ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . readline ( ) ) NEW_LINE b = int ( sys . stdin . readline ( ) ) NEW_LINE c = int ( sys . stdin . readline ( ) ) NEW_LINE d = int ( sys . stdin . readline ( ) ) NEW_LINE x = [ 0 ] * 101 NEW_LINE for i in range ( a , b ) : NEW_LINE INDENT x [ i ] += 1 NEW_LINE DEDENT for i in range ( c , d ) : NEW_LINE INDENT x [ i ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( 101 ) : NEW_LINE INDENT if x [ i ] == 2 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' No ▁ input ▁ found ' ) NEW_LINE DEDENT DEDENT
def GFG ( a , b , n , m ) : NEW_LINE INDENT mul = 1 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if b [ i ] != 0 : NEW_LINE INDENT mul = mul * b [ i ] NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT x = int ( math . floor ( a [ i ] / mul ) ) NEW_LINE print ( x , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def quick_sort ( a , d , c ) : NEW_LINE INDENT i = d NEW_LINE j = c NEW_LINE mid = a [ ( d + c ) // 2 ] NEW_LINE while i <= j : NEW_LINE INDENT while a [ i ] < mid : NEW_LINE INDENT i += 1 NEW_LINE DEDENT while a [ j ] > mid : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT if i <= j : NEW_LINE INDENT tg = a [ i ] NEW_LINE a [ i ] = a [ j ] NEW_LINE a [ j ] = tg NEW_LINE i += 1 NEW_LINE j -= 1 NEW_LINE DEDENT DEDENT if d < j : NEW_LINE INDENT quick_sort ( a , d , j ) NEW_LINE DEDENT if i < c : NEW_LINE INDENT quick_sort ( a , i , c ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT sc = sys . stdin NEW_LINE n = sc . tell ( ) NEW_LINE a = [ None ] * ( n + 5 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a [ i ] = sc . read ( n ) NEW_LINE DEDENT b = [ None ] * ( n + 5 ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT b [ i ] = sc . read ( n ) NEW_LINE DEDENT c = [ None ] * ( n + 5 ) NEW_LINE for i in range ( 1 , n - 2 + 1 ) : NEW_LINE INDENT c [ i ] = sc . read ( n ) NEW_LINE DEDENT quick_sort ( a , 1 , n ) NEW_LINE quick_sort ( b , 1 , n - 1 ) NEW_LINE quick_sort ( c , 1 , n - 2 ) NEW_LINE res_a = a [ n ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if a [ i ] != b [ i ] : NEW_LINE INDENT res_a = a [ i ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( res_a ) NEW_LINE res_b = b [ n - 1 ] NEW_LINE for i in range ( 1 , n - 2 + 1 ) : NEW_LINE INDENT if b [ i ] != c [ i ] : NEW_LINE INDENT res_b = b [ i ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( res_b ) NEW_LINE sc . close ( ) NEW_LINE DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT T = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT T -= 1 NEW_LINE DEDENT n = len ( args ) NEW_LINE c = list ( args ) NEW_LINE del n - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if c [ i ] == ' > ' or c [ n - 1 - i ] == ' < ' : NEW_LINE INDENT print ( i ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT
def codforce ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE import math NEW_LINE import os NEW_LINE n = math . pi NEW_LINE s = " " NEW_LINE while n > 0 : NEW_LINE INDENT x = n % 2 NEW_LINE n //= 2 NEW_LINE s += " % d " % x NEW_LINE DEDENT ans = 0 NEW_LINE for c in s : NEW_LINE INDENT if c == '1' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE import testing as np NEW_LINE testing = np . testing . as_np ( np . testing . as_np ( np . testing . as_np ( np . testing . as_np ( np . testing . as_np ( np . testing . as_np ( np . np . testing . as_np ( np . np . testing . as_np ( np . np . testing . as_np ( np . np . testing . as_np ( np . np . testing . as_np ( np . np . testing . as_np ( np . np . testing . as_np ( np . np . testing . np ( np . np . testing . np ( np . np . testing . np ( np . np . testing . np ( np . np . np . testing . np ( np . np . testing . np ( np . np . testing . np ( np . np . np ( np . np . testing . np ( np . np . np ( np . np . testing . np ( np . np . np ( np . np . testing . np ( np . np . np ( np . np . np ( np . np . np ( np . np ( np . np ( np . np
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin . read ( ) . split ( ' : ' ) NEW_LINE t = sys . stdin . read ( ) . split ( ' : ' ) NEW_LINE x = time . localtime ( int ( s [ 0 ] ) , int ( s [ 1 ] ) ) NEW_LINE y = time . localtime ( int ( t [ 0 ] ) , int ( t [ 1 ] ) ) NEW_LINE print ( x - y . tm_hour - y . tm_min ) NEW_LINE DEDENT
def longest_alternating_substring ( a , n ) : NEW_LINE INDENT longest = 1 NEW_LINE cnt = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if a [ i ] * a [ i - 1 ] < 0 : NEW_LINE INDENT cnt += 1 NEW_LINE longest = max ( longest , cnt ) NEW_LINE DEDENT else : NEW_LINE INDENT cnt = 1 NEW_LINE DEDENT DEDENT return longest NEW_LINE DEDENT
def check_type_of_triangle ( a , b , c ) : NEW_LINE INDENT import math NEW_LINE sqa = int ( math . pow ( a , 2 ) ) NEW_LINE sqb = int ( math . pow ( b , 2 ) ) NEW_LINE sqc = int ( math . pow ( c , 2 ) ) NEW_LINE if sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb : NEW_LINE INDENT print ( " Right - angled ▁ Triangle " , end = " ▁ " ) NEW_LINE DEDENT elif sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb : NEW_LINE INDENT print ( " Obtuse - angled ▁ Triangle " , end = " ▁ " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Acute - angled ▁ Triangle " , end = " ▁ " ) NEW_LINE DEDENT DEDENT
def count_subgraph ( s , n ) : NEW_LINE INDENT global result , C NEW_LINE cntG , cntF , result , C = 0 , 0 , 0 , 0 NEW_LINE for c in s : NEW_LINE INDENT if c == ' G ' : NEW_LINE INDENT cntG += 1 NEW_LINE result += C NEW_LINE DEDENT elif c == ' F ' : NEW_LINE INDENT cntF += 1 NEW_LINE C += cntG NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT print ( result ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE MAX = 100 NEW_LINE try : NEW_LINE INDENT with open ( ' . . / examples / test . txt ' ) as f : NEW_LINE INDENT n = len ( f . readlines ( ) ) NEW_LINE x , y , h = np . zeros ( n ) , np . zeros ( n ) , np . zeros ( n ) NEW_LINE np . random . seed ( 0 ) NEW_LINE for i in range ( 0 , MAX + 1 ) : NEW_LINE INDENT x [ i ] = f . read ( ) NEW_LINE y [ i ] = f . read ( ) NEW_LINE h [ i ] = f . read ( ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT for i in range ( 0 , MAX + 1 ) : NEW_LINE INDENT for j in range ( 0 , MAX + 1 ) : NEW_LINE INDENT ch = check ( n , x , y , h , i , j ) NEW_LINE if ch > 0 : NEW_LINE INDENT print ( i , j , ch ) NEW_LINE DEDENT DEDENT DEDENT DEDENT def check ( n , x , y , h , cx , cy ) : NEW_LINE INDENT ch = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if h [ i ] > 0 : NEW_LINE INDENT ch = abs ( x [ i ] - cx ) + abs ( y [ i ] - cy ) + h [ i ] NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if h [ i ] != max ( ch - abs ( x [ i ] - cx ) - abs ( y [ i ] - cy ) , 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT return ch NEW_LINE DEDENT
def count_steps ( n ) : NEW_LINE INDENT steps = 0 NEW_LINE while n > 0 : NEW_LINE INDENT largest = int ( math . cbrt ( n ) ) NEW_LINE n -= ( largest * largest * largest ) NEW_LINE steps += 1 NEW_LINE DEDENT return steps NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE class AOJ_0138 ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . num = None NEW_LINE self . time = None NEW_LINE DEDENT def __lt__ ( self , other ) : NEW_LINE INDENT return self . time < other . time NEW_LINE DEDENT def __gt__ ( self , other ) : NEW_LINE INDENT return self . time > other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __ne__ ( self , other ) : NEW_LINE INDENT return self . time == other . time NEW_LINE DEDENT def __eq__ ( self , other ) : NEW_LINE INDENT return self . num == other . num NEW_LINE DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT arr = [ ] NEW_LINE mx , mn , mxcount , mncount = 0 , 0 , 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( math . floor ( math . log ( arr [ i ] , 2 ) ) ) NEW_LINE mx = max ( arr [ i ] , mx ) NEW_LINE mn = min ( arr [ i ] , mn ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == mx : NEW_LINE INDENT mxcount += 1 NEW_LINE DEDENT if arr [ i ] == mn : NEW_LINE INDENT mncount += 1 NEW_LINE DEDENT DEDENT if mx != mn : NEW_LINE INDENT print ( mx - mn , mxcount * mncount ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( mx - mn , mxcount * ( mxcount - 1 ) / 2 ) NEW_LINE DEDENT DEDENT
def GFG ( arr ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in arr : NEW_LINE INDENT x = sum ( i ) NEW_LINE if i % x == 0 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT N = len ( sys . stdin ) NEW_LINE A = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT A . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT print ( ' YES ' if check ( A ) else ' NO ' ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE return 0 NEW_LINE DEDENT def check ( A ) : NEW_LINE INDENT N = len ( A ) NEW_LINE sum = 0 NEW_LINE for i in A : NEW_LINE INDENT sum += A [ i ] NEW_LINE DEDENT if sum % ( int ( N ) * ( N + 1 ) / 2 ) != 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT op = int ( sum / ( int ( N ) * ( N + 1 ) / 2 ) ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT diff = A [ ( i + 1 ) % N ] - A [ i ] NEW_LINE if ( diff > op ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( op - diff ) % N : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT DEDENT
def max_prod ( N ) : NEW_LINE INDENT import math NEW_LINE if N == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if N < 10 : NEW_LINE INDENT return N NEW_LINE DEDENT return max ( max_prod ( N // 10 ) * ( N % 10 ) , max_prod ( N // 10 - 1 ) * 9 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE sugoroku = " " NEW_LINE def main ( ) : NEW_LINE INDENT global n NEW_LINE n = int ( n ) NEW_LINE global sugoroku NEW_LINE sugoroku = " " NEW_LINE DEDENT def solve_sugoroku ( ) : NEW_LINE INDENT dice = 0 NEW_LINE safes = sugoroku . split ( "0" ) NEW_LINE for i in safes : NEW_LINE INDENT dice = max ( dice , len ( i ) ) NEW_LINE DEDENT print ( dice + 1 ) NEW_LINE DEDENT def input_sugoroku ( ) : NEW_LINE INDENT s = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . append ( str ( i ) ) NEW_LINE DEDENT sugoroku = " " . join ( s ) NEW_LINE DEDENT return sugoroku NEW_LINE DEDENT
def practice2 ( ) : NEW_LINE INDENT import math NEW_LINE import numpy as np NEW_LINE import os NEW_LINE import sys NEW_LINE class practice2 ( np . array ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT np . array ( self ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT def fit ( self , x ) : NEW_LINE INDENT return np . sqrt ( x [ 0 ] + x [ 1 ] ) NEW_LINE DEDENT DEDENT DEDENT
def count_non_decreasing ( n ) : NEW_LINE INDENT N = 10 NEW_LINE count = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT count *= ( N + i - 1 ) NEW_LINE count //= i NEW_LINE DEDENT return count NEW_LINE DEDENT
def reduce_string ( s , l ) : NEW_LINE INDENT import string NEW_LINE count , steps = 1 , 0 NEW_LINE for i in range ( 1 , l ) : NEW_LINE INDENT if s [ i ] == s [ i - 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT steps += ( count // 2 ) NEW_LINE count = 1 NEW_LINE DEDENT DEDENT steps += count // 2 NEW_LINE return steps NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . read = sys . stdin . read ( ) NEW_LINE self . a = self . read ( ) NEW_LINE self . b = self . read ( ) NEW_LINE self . n = self . a + self . b NEW_LINE if self . b >= self . a : NEW_LINE INDENT print ( " Impossible " , end = " ▁ " ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = " " NEW_LINE honest = self . get_honest ( ) NEW_LINE for i in range ( self . n ) : NEW_LINE INDENT ans += "1" if self . q ( honest , i ) else "0" NEW_LINE DEDENT print ( " ! ▁ " + ans , end = " ▁ " ) NEW_LINE DEDENT DEDENT def get_honest ( self ) : NEW_LINE INDENT dis = self . b + 1 NEW_LINE self . data = list ( ) NEW_LINE for i in range ( self . n ) : NEW_LINE INDENT if self . data == [ ] : NEW_LINE INDENT self . data . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT if self . q ( self . data [ - 1 ] , i ) : NEW_LINE INDENT self . data . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT self . data . pop ( ) NEW_LINE dis -= 1 NEW_LINE DEDENT DEDENT if len ( self . data ) >= dis : NEW_LINE INDENT return self . data . pop ( ) NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def q ( self , a , b ) : NEW_LINE INDENT print ( " ? ▁ % d ▁ % d " % ( self . a , self . b ) ) NEW_LINE return self . read ( ) == " Y " NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE x , y , a , b = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE res = [ ] NEW_LINE for i in range ( a , x + 1 ) : NEW_LINE INDENT for j in range ( b , y + 1 ) : NEW_LINE INDENT if i <= j : NEW_LINE INDENT continue NEW_LINE DEDENT res . append ( ' % d ▁ % d ' % ( i , j ) ) NEW_LINE DEDENT DEDENT sys . stderr . write ( ' \n ' . join ( res ) ) NEW_LINE sys . stderr . write ( ' \n ' ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT mod = 1000000007L NEW_LINE def mult ( a , b ) : NEW_LINE INDENT return ( ( a % mod ) * ( b % mod ) ) % mod NEW_LINE DEDENT def calculate_factors ( n ) : NEW_LINE INDENT ans , cnt = 1 , 0 NEW_LINE ans = 1 NEW_LINE while n % 2 == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE n = n // 2 NEW_LINE DEDENT if cnt % 2 == 1 : NEW_LINE INDENT ans = mult ( ans , ( cnt + 1 ) ) NEW_LINE DEDENT for i in range ( 3 , math . sqrt ( n ) + 1 , 2 ) : NEW_LINE INDENT cnt = 0 NEW_LINE while n % i == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE n = n // i NEW_LINE DEDENT if cnt % 2 == 1 : NEW_LINE INDENT ans = mult ( ans , ( cnt + 1 ) ) NEW_LINE DEDENT DEDENT if n > 2 : NEW_LINE INDENT ans = mult ( ans , ( 2 ) ) NEW_LINE DEDENT return ans % mod NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 193748576239475639L NEW_LINE mod = 17 NEW_LINE print ( calculate_factors ( n ) , end = ' ' ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def cf32A ( ) : NEW_LINE INDENT import string NEW_LINE s = string . strip ( ) NEW_LINE data = " " NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] == " . " : NEW_LINE INDENT data += " ▁ " NEW_LINE DEDENT else : NEW_LINE INDENT if s [ i ] == " - " and s [ i + 1 ] == " . " : NEW_LINE INDENT data += " ▁ " NEW_LINE DEDENT else : NEW_LINE INDENT data += " ▁ " NEW_LINE DEDENT data += " ▁ " NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( data ) NEW_LINE DEDENT
def max_abs_diff ( arr , n ) : NEW_LINE INDENT min_ele = arr [ 0 ] NEW_LINE max_ele = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT min_ele = min ( min_ele , arr [ i ] ) NEW_LINE max_ele = max ( max_ele , arr [ i ] ) NEW_LINE DEDENT return ( max_ele - min_ele ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a , b , c , N = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if a == 0 and b == 0 and c == 0 : NEW_LINE INDENT sys . exit ( 0 ) NEW_LINE DEDENT N = sys . stdin . read ( ) NEW_LINE DEDENT checking = [ 0 ] * a + b + c NEW_LINE temp = list ( ) NEW_LINE checking . append ( 0 ) NEW_LINE for j in range ( 2 ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT a1 , b1 , c1 , check = select . select ( [ a , b , c ] ) NEW_LINE a1 = int ( a1 ) NEW_LINE b1 = int ( b1 ) NEW_LINE c1 = int ( c1 ) NEW_LINE check = int ( check ) NEW_LINE if check == 1 : NEW_LINE INDENT checking [ a1 - 1 ] = 1 NEW_LINE checking [ b1 - 1 ] = 1 NEW_LINE checking [ c1 - 1 ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT temp . append ( a1 ) NEW_LINE temp . append ( b1 ) NEW_LINE temp . append ( c1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if not temp : NEW_LINE INDENT break NEW_LINE DEDENT a2 , b2 , c2 = temp . pop ( ) NEW_LINE if checking [ a2 - 1 ] + checking [ b2 - 1 ] + checking [ c2 - 1 ] == 2 : NEW_LINE INDENT if checking [ a2 - 1 ] != 1 : NEW_LINE INDENT checking [ a2 - 1 ] = 3 NEW_LINE DEDENT elif checking [ b2 - 1 ] != 1 : NEW_LINE INDENT checking [ b2 - 1 ] = 3 NEW_LINE DEDENT else : NEW_LINE INDENT checking [ c2 - 1 ] = 3 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT for contents in checking : NEW_LINE INDENT if contents == 3 : NEW_LINE INDENT result = 0 NEW_LINE DEDENT elif contents == 0 : NEW_LINE INDENT result = 2 NEW_LINE DEDENT else : NEW_LINE INDENT result = 1 NEW_LINE DEDENT print ( result ) NEW_LINE DEDENT DEDENT
def min_remove ( a , b , n , m ) : NEW_LINE INDENT count_a = { } NEW_LINE count_b = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] in count_a : NEW_LINE INDENT count_a [ a [ i ] ] = count_a [ a [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_a [ a [ i ] ] = 1 NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT if b [ i ] in count_b : NEW_LINE INDENT count_b [ b [ i ] ] = count_b [ b [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_b [ b [ i ] ] = 1 NEW_LINE DEDENT DEDENT res = 0 NEW_LINE s = count_a . keys ( ) NEW_LINE for x in s : NEW_LINE INDENT if x in count_b : NEW_LINE INDENT res += min ( count_b [ x ] , count_a [ x ] ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT import re NEW_LINE import math NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import seed , randint NEW_LINE from numpy . linalg import norm NEW_LINE from numpy . random import norm NEW_LINE from numpy . random import seed , randint NEW_LINE seed = np . random ( seed = None ) NEW_LINE random = np . random ( seed = None ) NEW_LINE for i in range ( len ( np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . randint ( 0 , np . random . randint ( 0 , np . randint ( 0 , np . random ( 0 , np . random ( 0 ) ) ) ) ) )
def python_application125 ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT num = int ( sys . stdin . readline ( ) ) NEW_LINE old = - 1 NEW_LINE ans = 0 NEW_LINE for i in range ( num ) : NEW_LINE INDENT s = int ( sys . stdin . readline ( ) ) NEW_LINE if s == 1 : NEW_LINE INDENT if old >= 0 : NEW_LINE INDENT ans *= ( i - old ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = 1 NEW_LINE DEDENT old = i NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def GFG ( x ) : NEW_LINE INDENT import math NEW_LINE ans = 0 NEW_LINE while x > 0 : NEW_LINE INDENT x //= 2 NEW_LINE ans += 1 NEW_LINE DEDENT return ans NEW_LINE def check ( d , x ) : NEW_LINE INDENT if x / d <= x : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def bs ( n ) : NEW_LINE INDENT l , r = 1 , int ( math . sqrt ( n ) ) NEW_LINE while l < r : NEW_LINE INDENT m = ( l + r ) // 2 NEW_LINE if check ( m , n ) : NEW_LINE INDENT r = m NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT DEDENT if not check ( l , n ) : NEW_LINE INDENT return l + 1 NEW_LINE DEDENT else : NEW_LINE INDENT return l NEW_LINE DEDENT DEDENT def count_divisor ( n ) : NEW_LINE INDENT return n - bs ( n ) + 1 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 5 NEW_LINE print ( count_divisor ( n ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def minimal_steps ( s , n ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE s1 , s2 = " " , " " NEW_LINE dp [ 0 ] = 1 NEW_LINE s1 += s [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT s1 += s [ i ] NEW_LINE s2 = s [ i + 1 : i + 1 ] NEW_LINE dp [ i ] = min ( dp [ i ] , dp [ i - 1 ] + 1 ) NEW_LINE if s1 == s2 : NEW_LINE INDENT dp [ i * 2 + 1 ] = min ( dp [ i ] + 1 , dp [ i * 2 + 1 ] ) NEW_LINE DEDENT DEDENT return dp [ n - 1 ] NEW_LINE DEDENT
def check_util ( num , dig , base ) : NEW_LINE INDENT if dig == 1 and num < base : NEW_LINE INDENT return True NEW_LINE DEDENT if dig > 1 and num >= base : NEW_LINE INDENT return check_util ( num // base , -- dig , base ) NEW_LINE DEDENT return False NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT def getMin ( arr , i , j ) : NEW_LINE INDENT minVal = arr [ i ] NEW_LINE i += 1 NEW_LINE while i <= j : NEW_LINE INDENT minVal = min ( minVal , arr [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT return minVal NEW_LINE DEDENT def getMax ( arr , i , j ) : NEW_LINE INDENT maxVal = arr [ i ] NEW_LINE i += 1 NEW_LINE while i <= j : NEW_LINE INDENT maxVal = max ( maxVal , arr [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT return maxVal NEW_LINE DEDENT def generateArr ( arr , n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT print ( arr [ 0 ] ) NEW_LINE return NEW_LINE DEDENT tmpArr = [ ] NEW_LINE tmpArr . append ( getMax ( arr , 1 , n - 1 ) ) NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT tmpArr . append ( abs ( getMax ( arr , i + 1 , n - 1 ) - getMin ( arr , 0 , i - 1 ) ) ) NEW_LINE DEDENT tmpArr . append ( getMin ( arr , 0 , n - 2 ) ) NEW_LINE printArray ( tmpArr , n ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 1 , 5 , 2 , 4 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE generateArr ( arr , n ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( int ( sys . stdin . readline ( ) ) ) NEW_LINE DEDENT s = list ( s ) NEW_LINE sum = 0 NEW_LINE for ch in s : NEW_LINE INDENT if ch == ' B ' : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT DEDENT ans = sum NEW_LINE sum1 = sum NEW_LINE for ch in s : NEW_LINE INDENT if ch == ' A ' : NEW_LINE INDENT sum1 += a [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT sum1 -= a [ i ] NEW_LINE DEDENT ans = max ( ans , sum1 ) NEW_LINE DEDENT sum1 = sum NEW_LINE for ch in s [ : : - 1 ] : NEW_LINE INDENT if ch == ' A ' : NEW_LINE INDENT sum1 += a [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT sum1 -= a [ i ] NEW_LINE DEDENT ans = max ( ans , sum1 ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT print ( ' Error ▁ running ▁ % s ' % s ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT xa , ya , xb , yb , xc , yc , xd , yd = sys . argv [ 1 : ] NEW_LINE katamukiab = ( yb - ya ) / ( xb - xa ) NEW_LINE katamukicd = ( yd - yc ) / ( xd - xc ) NEW_LINE if katamukiab == katamukicd : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def nth_xor_fib ( n , a , b ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return a NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT return b NEW_LINE DEDENT if n == 2 : NEW_LINE INDENT return ( a ^ b ) NEW_LINE DEDENT return nth_xor_fib ( n % 3 , a , b ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' % d ▁ % d ' % ( n , n ) ) NEW_LINE return 0 NEW_LINE DEDENT player1 , player2 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT card1 = sys . stdin . read ( ) NEW_LINE card2 = sys . stdin . read ( ) NEW_LINE if card1 >= card2 : NEW_LINE INDENT player1 += 3 NEW_LINE DEDENT elif card1 <= card2 : NEW_LINE INDENT player2 += 3 NEW_LINE DEDENT elif card1 == card2 : NEW_LINE INDENT player1 += 1 NEW_LINE player2 += 1 NEW_LINE DEDENT DEDENT print ( ' % d ▁ % d ' % ( player1 , player2 ) ) NEW_LINE DEDENT
def area ( a ) : NEW_LINE INDENT import math NEW_LINE if a < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT h = float ( 1.268 ) * a NEW_LINE A = float ( 0.70477 * math . pow ( h , 2 ) ) NEW_LINE return A NEW_LINE DEDENT
def p073 ( ) : NEW_LINE INDENT print ( eval ( ' p073 ( ) ' ) ) NEW_LINE return str ( stern_brocot_count ( 1 , 3 , 1 , 2 ) ) NEW_LINE DEDENT
def Filling_Shapes ( n ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import tempfile NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import math NEW_LINE import math NEW_LINE import tempfile NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import tempfile NEW_LINE import tempfile NEW_LINE import os NEW_LINE import sys NEW_LINE import tempfile NEW_LINE import os NEW_LINE import tempfile NEW_LINE import os NEW_LINE import tempfile NEW_LINE import tempfile NEW_LINE import os NEW_LINE os = tempfile NEW_LINE try : NEW_LINE INDENT os = os NEW_LINE os = os NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os = os . popen ( ' % s ▁ - - version ' % n ) . read ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os . close ( os ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return int ( os . getpid ( ) ) , int ( os . getpid ( ) ) , int ( os . getpid ( ) ) NEW_LINE DEDENT
def GFG ( prime , n ) : NEW_LINE INDENT prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , p * n + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT def sumPrime ( d ) : NEW_LINE INDENT global i NEW_LINE maxVal = int ( math . pow ( 10 , d ) ) - 1 NEW_LINE prime = [ True ] * ( maxVal + 1 ) NEW_LINE for i in range ( maxVal + 1 ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT return sum NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( 2 , maxVal + 1 ) : NEW_LINE INDENT if prime [ i ] : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def sum_prime ( d ) : NEW_LINE INDENT import math NEW_LINE prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT def sum_prime ( d ) : NEW_LINE INDENT maxVal = int ( math . pow ( 2 , d ) - 1 ) NEW_LINE prime = [ True ] * ( maxVal + 1 ) NEW_LINE return prime [ maxVal ] NEW_LINE DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE if sys : NEW_LINE INDENT raise ImportError ( ' No ▁ csv ▁ file ▁ found ' ) NEW_LINE DEDENT
def age_difference ( ) : NEW_LINE INDENT import datetime NEW_LINE import sys NEW_LINE import os NEW_LINE d = [ ] NEW_LINE for i in range ( 6 ) : NEW_LINE INDENT d . append ( os . stat ( ' / etc / init . d ' ) . st_mtime ) NEW_LINE DEDENT d1 = datetime . date ( d [ 0 ] , d [ 1 ] , d [ 2 ] ) NEW_LINE d2 = datetime . date ( d [ 3 ] , d [ 4 ] , d [ 5 ] ) NEW_LINE age_diff = abs ( datetime . date ( d1 , d2 ) . total_seconds ( ) ) NEW_LINE if d [ 1 ] == d [ 4 ] and d [ 2 ] == d [ 5 ] : NEW_LINE INDENT print ( age_diff ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( age_diff + 1 ) NEW_LINE DEDENT os . remove ( ' / etc / init . d ' ) NEW_LINE DEDENT
def max_partitions ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE ans , max_so_far = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT max_so_far = np . maximum ( max_so_far , arr [ i ] ) NEW_LINE if max_so_far == i : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def count_max_contiguous ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE current_max , max_so_far = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 : NEW_LINE INDENT current_max = 0 NEW_LINE DEDENT else : NEW_LINE INDENT current_max += 1 NEW_LINE max_so_far = np . maximum ( current_max , max_so_far ) NEW_LINE DEDENT DEDENT return max_so_far NEW_LINE DEDENT
def cube ( h , r ) : NEW_LINE INDENT import math NEW_LINE if h < 0 and r < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT a = ( h * r * float ( math . sqrt ( 2 ) ) ) / ( h + float ( math . sqrt ( 2 ) ) * r ) NEW_LINE return a NEW_LINE DEDENT
def pattern ( rows_no ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( 1 , rows_no + 1 ) : NEW_LINE INDENT for k in range ( 1 , i + 1 ) : NEW_LINE INDENT sys . stdout . write ( " ▁ " ) NEW_LINE DEDENT for j in range ( i , rows_no + 1 ) : NEW_LINE INDENT sys . stdout . write ( " % d ▁ " % j ) NEW_LINE DEDENT sys . stdout . write ( " \n " ) NEW_LINE DEDENT for i in range ( rows_no - 1 , - 1 , - 1 ) : NEW_LINE INDENT for k in range ( 1 , i + 1 ) : NEW_LINE INDENT sys . stdout . write ( " ▁ " ) NEW_LINE DEDENT for j in range ( i , rows_no + 1 ) : NEW_LINE INDENT sys . stdout . write ( " % d ▁ " % j ) NEW_LINE DEDENT sys . stdout . write ( " \n " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT for c in n [ 1 : ] : NEW_LINE INDENT if c != '0' : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( len ( c ) ) : NEW_LINE INDENT sum += ord ( c ) - ord ( '0' ) NEW_LINE DEDENT print ( sum ) NEW_LINE return NEW_LINE DEDENT DEDENT if c == '1' : NEW_LINE INDENT print ( 10 ) NEW_LINE return NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
def geeks ( n ) : NEW_LINE INDENT while n > 0 : NEW_LINE INDENT if ( n % 10 ) % 2 == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT n //= 10 NEW_LINE DEDENT return 1 NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT while n != 0 : NEW_LINE INDENT if ( n % 10 ) % 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT n //= 10 NEW_LINE DEDENT return 1 NEW_LINE DEDENT
def triangular_series ( n ) : NEW_LINE INDENT import sys NEW_LINE i , j , k = 1 , 1 , 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % k ) NEW_LINE j = j + 1 NEW_LINE k = k + j NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( sys . argv [ 1 ] ) NEW_LINE data = f . read ( ) . split ( ) NEW_LINE n = int ( data [ 0 ] ) NEW_LINE m = int ( data [ 1 ] ) NEW_LINE arr = [ 0 ] * m NEW_LINE data = f . read ( ) . split ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ int ( data [ i ] ) - 1 ] += 1 NEW_LINE DEDENT print ( get_number_of_ways2 ( arr , n ) ) NEW_LINE def get_number_of_ways1 ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT count = count + ( arr [ i ] * ( n - arr [ i ] ) ) NEW_LINE DEDENT return count / 2 NEW_LINE DEDENT def sum_natual ( n ) : NEW_LINE INDENT return ( int ( n ) * ( n + 1 ) ) / 2 NEW_LINE DEDENT def get_number_of_ways2 ( arr , n ) : NEW_LINE INDENT t = get_number_of_ways1 ( n ) NEW_LINE for x in arr : NEW_LINE INDENT t -= get_number_of_ways2 ( x ) NEW_LINE DEDENT return t NEW_LINE DEDENT return None NEW_LINE DEDENT
def find_position ( k , n ) : NEW_LINE INDENT f1 , f2 , f3 = 0 , 1 , 2 NEW_LINE i = 2 NEW_LINE while i != 0 : NEW_LINE INDENT f3 = f1 + f2 NEW_LINE f1 = f2 NEW_LINE f2 = f3 NEW_LINE if f2 % k == 0 : NEW_LINE INDENT return n * i NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE s = list ( sys . stdin . readlines ( ) ) NEW_LINE s = list ( s ) NEW_LINE n = 0 NEW_LINE c = 0 NEW_LINE ans = " " NEW_LINE e = [ False ] * 26 NEW_LINE for c in s : NEW_LINE INDENT if e [ ord ( c ) - 97 ] == False : NEW_LINE INDENT n += 1 NEW_LINE DEDENT e [ ord ( c ) - 97 ] = True NEW_LINE DEDENT if n == 2 : NEW_LINE INDENT c = 0 NEW_LINE DEDENT else : NEW_LINE INDENT c = len ( s ) - 2 NEW_LINE if s [ 0 ] == s [ - 1 ] : NEW_LINE INDENT c -= 1 NEW_LINE DEDENT DEDENT if c % 2 == 0 : NEW_LINE INDENT ans = " Second " NEW_LINE DEDENT else : NEW_LINE INDENT ans = " First " NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def count_minimum_moves ( arr , n , k ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( k - 1 , n ) : NEW_LINE INDENT if arr [ i ] != arr [ k - 1 ] : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT for i in range ( k - 1 , - 1 , - 1 ) : NEW_LINE INDENT if arr [ i ] != arr [ k - 1 ] : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def power ( x , y , p ) : NEW_LINE INDENT res = 1 NEW_LINE x = x % p NEW_LINE while y > 0 : NEW_LINE INDENT if y & 1 : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT y = y >> 1 NEW_LINE x = ( x * x ) % p NEW_LINE DEDENT return res NEW_LINE def gcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def power_gcd ( a , b , n ) : NEW_LINE INDENT e = power ( a , n , b ) NEW_LINE return gcd ( e , b ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT a , b , n = 5 , 4 , 2 NEW_LINE print ( power_gcd ( a , b , n ) , end = ' ▁ ' ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT os . environ [ ' PATH ' ] = os . environ [ ' PATH ' ] NEW_LINE DEDENT except : NEW_LINE INDENT sys . stderr . write ( ' No ▁ PATH ▁ % s ▁ found ▁ in ▁ % s \n ' % ( sys . executable , sys . executable ) ) NEW_LINE return None NEW_LINE DEDENT try : NEW_LINE INDENT subprocess . check_output ( [ sys . executable , sys . stdout ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sys . stderr . write ( ' No ▁ PATH ▁ found ▁ in ▁ % s \n ' % sys . executable ) NEW_LINE return None NEW_LINE DEDENT try : NEW_LINE INDENT subprocess . check_output ( [ sys . executable , sys . stdout ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE s = n - 2 NEW_LINE print ( s * s ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def count_identical_rows ( mat ) : NEW_LINE INDENT import set NEW_LINE count = 0 NEW_LINE for i in range ( len ( mat ) ) : NEW_LINE INDENT hs = set ( ) NEW_LINE for j in mat [ i ] : NEW_LINE INDENT hs . add ( j ) NEW_LINE DEDENT if len ( hs ) == 1 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def create_sorted ( a , n ) : NEW_LINE INDENT import numpy as np NEW_LINE b = [ ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT if not b : NEW_LINE INDENT b . append ( a [ j ] ) NEW_LINE DEDENT else : NEW_LINE INDENT start , end = 0 , len ( b ) - 1 NEW_LINE pos = 0 NEW_LINE while start <= end : NEW_LINE INDENT mid = start + ( end - start ) // 2 NEW_LINE if b [ mid ] == a [ j ] : NEW_LINE INDENT b . append ( ( max ( 0 , mid + 1 ) , a [ j ] ) ) NEW_LINE break NEW_LINE DEDENT elif b [ mid ] > a [ j ] : NEW_LINE INDENT pos = end = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT pos = start = mid + 1 NEW_LINE DEDENT if start > end : NEW_LINE INDENT pos = start NEW_LINE b . append ( ( max ( 0 , pos ) , a [ j ] ) ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( b [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def count_total_distinct ( data ) : NEW_LINE INDENT cnt = 0 NEW_LINE items = set ( ) NEW_LINE for i in range ( len ( data ) ) : NEW_LINE INDENT temp = " " NEW_LINE ans = set ( ) NEW_LINE for c in data [ i : ] : NEW_LINE INDENT temp = temp + c NEW_LINE ans . add ( c ) NEW_LINE if temp not in items : NEW_LINE INDENT items . add ( temp ) NEW_LINE cnt += len ( ans ) NEW_LINE DEDENT DEDENT DEDENT return cnt NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import math NEW_LINE digits = int ( math . log10 ( n ) ) NEW_LINE n = int ( n / int ( math . pow ( 10 , digits ) ) ) NEW_LINE return n NEW_LINE DEDENT
def remove_zeros ( a , n ) : NEW_LINE INDENT import sys NEW_LINE ind = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] != 0 : NEW_LINE INDENT ind = i NEW_LINE break NEW_LINE DEDENT DEDENT if ind == - 1 : NEW_LINE INDENT sys . stdout . write ( " Array ▁ has ▁ leading ▁ zeros ▁ only \n " ) NEW_LINE return NEW_LINE DEDENT b = [ 0 ] * n - ind NEW_LINE for i in range ( n - ind ) : NEW_LINE INDENT b [ i ] = a [ ind + i ] NEW_LINE DEDENT for i in range ( n - ind ) : NEW_LINE INDENT sys . stdout . write ( " % d ▁ " % b [ i ] ) NEW_LINE DEDENT DEDENT
def find_maxm ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE mp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in mp : NEW_LINE INDENT mp [ arr [ i ] ] = mp [ arr [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for x , freq in mp . items ( ) : NEW_LINE INDENT if x == freq : NEW_LINE INDENT ans = max ( ans , x ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import list NEW_LINE import string NEW_LINE import defaultdict NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stream = sys . stdin NEW_LINE self . N = len ( self . stream ) NEW_LINE arr = [ ] NEW_LINE for i in range ( self . N ) : NEW_LINE INDENT arr . append ( self . stream . read ( ) ) NEW_LINE DEDENT self . tsk = Task ( ) NEW_LINE print ( self . tsk ( arr ) ) NEW_LINE DEDENT def solve ( self , arr ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE arr = list ( arr ) NEW_LINE arr . sort ( ) NEW_LINE total = int ( n ) * ( n + 1 ) / 2 NEW_LINE l , r = 0 , n - 1 NEW_LINE while l < r : NEW_LINE INDENT mid = l + ( r - l ) // 2 NEW_LINE target = arr [ mid ] NEW_LINE cur = 0 NEW_LINE cnt = 0 NEW_LINE bit = [ 0 ] * ( 2 * n + 2 ) NEW_LINE for x in range ( n + 1 , len ( bit ) ) : NEW_LINE INDENT x += 1 if x & - x else 1 NEW_LINE bit [ x ] += 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT cur += 1 if arr [ i ] <= target else - 1 NEW_LINE for x in range ( cur + n + 1 , len ( bit ) ) : NEW_LINE INDENT x += 1 if x & - x else 1 NEW_LINE bit [ x ] += 1 NEW_LINE DEDENT for x in range ( cur + n ) : NEW_LINE INDENT if x > 0 : NEW_LINE INDENT cnt += bit [ x ] NEW_LINE DEDENT DEDENT DEDENT if cnt >= total // 2 + 1 : NEW_LINE INDENT r = mid NEW_LINE DEDENT else : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT DEDENT return arr [ l ] NEW_LINE DEDENT DEDENT return Main NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE class GFG ( int ) : NEW_LINE INDENT def sum_of_digits_single ( x ) : NEW_LINE INDENT ans = 0 NEW_LINE while x != 0 : NEW_LINE INDENT ans += x % 10 NEW_LINE x //= 10 NEW_LINE DEDENT return ans NEW_LINE DEDENT def closest ( x ) : NEW_LINE INDENT ans = 0 NEW_LINE while ans * 10 + 9 <= x : NEW_LINE INDENT ans = ans * 10 + 9 NEW_LINE DEDENT return ans NEW_LINE DEDENT def sum_of_digits_two_parts ( N ) : NEW_LINE INDENT A = closest ( N ) NEW_LINE return sum_of_digits_single ( A ) + sum_of_digits_single ( N - A ) NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT N = 35 NEW_LINE sys . stdout . write ( sum_of_digits_two_parts ( N ) ) NEW_LINE DEDENT return GFG ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT import math NEW_LINE ca = np . array ( [ 35.5 , 37.5 , 40 , 43 , 50 , 55 , 70 ] ) NEW_LINE cb = np . array ( [ 71 , 77 , 83 , 89 , 105 , 116 , 148 ] ) NEW_LINE c = [ ' AAA ' , ' AA ' , ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' NA ' ] NEW_LINE for a , b in zip ( ca , cb ) : NEW_LINE INDENT ar = 100 NEW_LINE br = 100 NEW_LINE for i in range ( len ( ca ) ) : NEW_LINE INDENT if ca [ i ] > a : NEW_LINE INDENT ar = i NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( len ( cb ) ) : NEW_LINE INDENT if cb [ i ] > b : NEW_LINE INDENT br = i NEW_LINE break NEW_LINE DEDENT DEDENT ans = max ( ar , br ) NEW_LINE if ans == 100 : NEW_LINE INDENT ans = len ( c ) - 1 NEW_LINE DEDENT print ( c [ ans ] ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE try : NEW_LINE INDENT t = int ( math . ceil ( math . log ( math . pi / 4 ) ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT t -= 1 NEW_LINE DEDENT a , b , c , d = math . log ( math . pi / 4 ) NEW_LINE res = max ( c - 1 , a - c ) + max ( d - 1 , b - d ) NEW_LINE print ( res ) NEW_LINE DEDENT
def A_remove_Smallest ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import os NEW_LINE try : NEW_LINE INDENT os . remove ( ' ' ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def cal_sin ( n ) : NEW_LINE INDENT import math NEW_LINE accuracy = float ( 0.0001 ) , denominator , sinx , sinval = float ( n ) NEW_LINE n = n * float ( 3.142 / 180.0 ) NEW_LINE x1 = n NEW_LINE sinx = n NEW_LINE sinval = float ( math . sin ( n ) ) NEW_LINE i = 1 NEW_LINE while True : NEW_LINE INDENT denominator = 2 * i * ( 2 * i + 1 ) NEW_LINE x1 = - x1 * n * n / denominator NEW_LINE sinx = sinx + x1 NEW_LINE i = i + 1 NEW_LINE if accuracy <= sinval - sinx : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( sinx ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] NEW_LINE def multiply ( ) : NEW_LINE INDENT pro = 1 NEW_LINE for i in arr : NEW_LINE INDENT pro = pro * i NEW_LINE DEDENT return pro NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT print ( multiply ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import decimal NEW_LINE import sys NEW_LINE flag = [ False ] * 64 NEW_LINE try : NEW_LINE INDENT with open ( ' test . txt ' , ' r ' ) as f : NEW_LINE INDENT q = int ( f . read ( ) ) NEW_LINE for j in range ( q ) : NEW_LINE INDENT order_num = int ( f . read ( ) ) NEW_LINE if order_num <= 3 : NEW_LINE INDENT n = int ( f . read ( ) ) NEW_LINE DEDENT if order_num == 0 : NEW_LINE INDENT print ( '1' if flag [ n ] else '0' ) NEW_LINE DEDENT elif order_num == 1 : NEW_LINE INDENT flag [ n ] = True NEW_LINE DEDENT elif order_num == 2 : NEW_LINE INDENT flag [ n ] = False NEW_LINE DEDENT elif order_num == 3 : NEW_LINE INDENT flag [ n ] = not flag [ n ] NEW_LINE DEDENT elif order_num == 4 : NEW_LINE INDENT counter = 1 NEW_LINE for i in range ( 64 ) : NEW_LINE INDENT if flag [ i ] != True : NEW_LINE INDENT counter = 0 NEW_LINE break NEW_LINE DEDENT DEDENT print ( counter ) NEW_LINE DEDENT elif order_num == 5 : NEW_LINE INDENT counter = 0 NEW_LINE for i in range ( 64 ) : NEW_LINE INDENT if flag [ i ] != False : NEW_LINE INDENT counter = 1 NEW_LINE break NEW_LINE DEDENT DEDENT print ( counter ) NEW_LINE DEDENT elif order_num == 6 : NEW_LINE INDENT counter = 1 NEW_LINE for i in range ( 64 ) : NEW_LINE INDENT if flag [ i ] == True : NEW_LINE INDENT counter = 0 NEW_LINE break NEW_LINE DEDENT DEDENT print ( counter ) NEW_LINE DEDENT elif order_num == 7 : NEW_LINE INDENT counter = 0 NEW_LINE for i in range ( 64 ) : NEW_LINE INDENT if flag [ i ] == True : NEW_LINE INDENT counter = 1 NEW_LINE DEDENT DEDENT print ( counter ) NEW_LINE DEDENT elif order_num == 8 : NEW_LINE INDENT sum = decimal . Decimal ( '0' ) NEW_LINE big = decimal . Decimal ( '2' ) NEW_LINE for i in range ( 64 ) : NEW_LINE INDENT if flag [ i ] : NEW_LINE INDENT sum = sum + big ** i NEW_LINE DEDENT DEDENT print ( sum ) NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import io NEW_LINE class GFG ( int ) : NEW_LINE INDENT def bit ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while n > 0 : NEW_LINE INDENT count += 1 NEW_LINE n = n & ( n - 1 ) NEW_LINE DEDENT return count NEW_LINE DEDENT def max_sum_of_bits ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = bit ( arr [ i ] ) NEW_LINE DEDENT incl = arr [ 0 ] NEW_LINE excl = 0 NEW_LINE excl_new = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT excl_new = ( incl if incl > excl else excl ) NEW_LINE incl = excl + arr [ i ] NEW_LINE excl = excl_new NEW_LINE DEDENT return ( ( incl if incl > excl else excl ) ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 ] NEW_LINE n = len ( arr ) NEW_LINE print ( max_sum_of_bits ( arr , n ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT return GFG ( n ) NEW_LINE DEDENT
def python_application_70 ( ) : NEW_LINE INDENT import string NEW_LINE num = len ( sys . stdin ) NEW_LINE counter = 0 NEW_LINE fine = 0 NEW_LINE arr = [ ] NEW_LINE for i in range ( num ) : NEW_LINE INDENT s = sys . stdin . readline ( ) NEW_LINE arr . append ( s ) NEW_LINE DEDENT for i in range ( num ) : NEW_LINE INDENT for k in range ( num ) : NEW_LINE INDENT if arr [ k ] [ i ] == ' C ' : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT DEDENT fine += ( counter * ( counter - 1 ) ) / 2 NEW_LINE counter = 0 NEW_LINE DEDENT for i in range ( num ) : NEW_LINE INDENT for k in range ( num ) : NEW_LINE INDENT if arr [ i ] [ k ] == ' C ' : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT DEDENT fine += ( counter * ( counter - 1 ) ) / 2 NEW_LINE counter = 0 NEW_LINE DEDENT print ( fine ) NEW_LINE DEDENT
def find_min_index ( arr , low , high ) : NEW_LINE INDENT if high < low : NEW_LINE INDENT return 0 NEW_LINE DEDENT if high == low : NEW_LINE INDENT return low NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if mid < high and arr [ mid + 1 ] < arr [ mid ] : NEW_LINE INDENT return ( mid + 1 ) NEW_LINE DEDENT if mid > low and arr [ mid ] < arr [ mid - 1 ] : NEW_LINE INDENT return mid NEW_LINE DEDENT if arr [ high ] > arr [ mid ] : NEW_LINE INDENT return find_min_index ( arr , low , mid - 1 ) NEW_LINE DEDENT return find_min_index ( arr , mid + 1 , high ) NEW_LINE DEDENT def binary_search ( arr , l , h , x ) : NEW_LINE INDENT while l <= h : NEW_LINE INDENT mid = ( l + h ) // 2 NEW_LINE if arr [ mid ] <= x : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT h = mid - 1 NEW_LINE DEDENT DEDENT return h NEW_LINE DEDENT def count_elest_less_than ( arr , n , x ) : NEW_LINE INDENT min_index = find_min_index ( arr , 0 , n - 1 ) NEW_LINE if x <= arr [ n - 1 ] : NEW_LINE INDENT return ( binary_search ( arr , min_index , n - 1 , x ) + 1 - min_index ) NEW_LINE DEDENT if ( min_index - 1 ) >= 0 and x <= arr [ min_index - 1 ] : NEW_LINE INDENT return ( n - min_index + binary_search ( arr , 0 , min_index - 1 , x ) + 1 ) NEW_LINE DEDENT return n NEW_LINE DEDENT
def GFG ( x , y ) : NEW_LINE INDENT import math NEW_LINE v = y - 2 * x * x + 1 NEW_LINE return v NEW_LINE DEDENT def predict ( x , y , h ) : NEW_LINE INDENT y1p = y + h * f ( x , y ) NEW_LINE return y1p NEW_LINE DEDENT def correct ( x , y , x1 , y1 , h ) : NEW_LINE INDENT e = 0.00001 NEW_LINE y1c = y1 NEW_LINE while abs ( y1c - y1 ) > e : NEW_LINE INDENT y1 = y1c NEW_LINE y1c = y + 0.5 * h * ( f ( x , y ) + f ( x1 , y1 ) ) NEW_LINE DEDENT return y1c NEW_LINE DEDENT def print_final_values ( x , xn , y , h ) : NEW_LINE INDENT while x < xn : NEW_LINE INDENT x1 = x + h NEW_LINE y1p = predict ( x , y , h ) NEW_LINE y1c = correct ( x , y , x1 , y1p , h ) NEW_LINE x = x1 NEW_LINE y = y1c NEW_LINE DEDENT print ( ' The ▁ final ▁ value ▁ of ▁ y ▁ at ▁ x ▁ = ▁ % d ▁ is ▁ : ▁ % s ' % ( int ( x ) , ' % . 4 f ' % y ) ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT x , y = 0 , 0.5 NEW_LINE xn = 1 , 0.2 NEW_LINE print_final_values ( x , xn , y , h ) NEW_LINE DEDENT
def D_pattern ( n ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( 0 , n + 1 ) : NEW_LINE INDENT if j == 1 or ( ( i == 0 or i == n - 1 ) and ( j > 1 and j < n - 2 ) ) or ( j == n - 2 and i != 0 and i != n - 1 ) : NEW_LINE INDENT sys . stdout . write ( ' * ' ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' ▁ ' ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT DEDENT
def kth_string ( n , k ) : NEW_LINE INDENT total = 0 NEW_LINE i = 1 NEW_LINE while total < k : NEW_LINE INDENT total = total + n - i NEW_LINE i += 1 NEW_LINE DEDENT first_y_position = i - 1 NEW_LINE second_y_position = k - ( total - n + first_y_position ) NEW_LINE for j in range ( 1 , first_y_position ) : NEW_LINE INDENT print ( " x " , end = " ▁ " ) NEW_LINE DEDENT print ( " y " , end = " ▁ " ) NEW_LINE j = first_y_position + 1 NEW_LINE while second_y_position > 1 : NEW_LINE INDENT print ( " x " , end = " ▁ " ) NEW_LINE second_y_position -= 1 NEW_LINE j += 1 NEW_LINE DEDENT print ( " y " , end = " ▁ " ) NEW_LINE while j < n : NEW_LINE INDENT print ( " x " , end = " ▁ " ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT
def binomial_coeff ( n , k ) : NEW_LINE INDENT C = [ 1 ] * ( k + 1 ) NEW_LINE C [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( min ( i , k ) , 0 , - 1 ) : NEW_LINE INDENT C [ j ] = C [ j ] + C [ j - 1 ] NEW_LINE DEDENT DEDENT return C [ k ] NEW_LINE DEDENT
def product_except_self ( nums ) : NEW_LINE INDENT import numpy as np NEW_LINE n = len ( nums ) NEW_LINE res = [ 1 ] * n NEW_LINE res [ 0 ] = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT res [ i ] = res [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT right = 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT res [ i ] *= right NEW_LINE right *= nums [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT
def get_smallest_and_largest ( s , k ) : NEW_LINE INDENT curr_str = s [ : k ] NEW_LINE lex_min = curr_str NEW_LINE lex_max = curr_str NEW_LINE for c in s [ k : ] : NEW_LINE INDENT curr_str = curr_str [ 1 : k ] + c NEW_LINE if lex_max < curr_str : NEW_LINE INDENT lex_max = curr_str NEW_LINE DEDENT if lex_min > curr_str : NEW_LINE INDENT lex_min = curr_str NEW_LINE DEDENT DEDENT print ( lex_min ) NEW_LINE print ( lex_max ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin . readlines ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT n = 0 NEW_LINE DEDENT a = [ ] NEW_LINE b = [ [ ] for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ i ] . append ( int ( sys . stdin . readline ( ) ) ) NEW_LINE b [ i ] [ 1 ] = i NEW_LINE DEDENT a . sort ( reverse = True ) NEW_LINE b . sort ( reverse = True ) NEW_LINE res = [ 0 ] * n NEW_LINE for i , e in enumerate ( b ) : NEW_LINE INDENT res [ e [ 1 ] ] = a [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % i ) NEW_LINE DEDENT DEDENT
def max_subarray_XOR ( set , n ) : NEW_LINE INDENT import sys NEW_LINE index = 0 NEW_LINE for i in range ( INT_BITS - 1 , - 1 , - 1 ) : NEW_LINE INDENT max_ind = index NEW_LINE max_le = sys . maxint NEW_LINE for j in range ( index , n ) : NEW_LINE INDENT if ( set [ j ] & ( 1 << i ) ) and set [ j ] > max_le : NEW_LINE INDENT max_le = set [ j ] NEW_LINE max_ind = j NEW_LINE DEDENT DEDENT if max_le == - 2147483648 : NEW_LINE INDENT continue NEW_LINE DEDENT temp = set [ index ] NEW_LINE set [ index ] = set [ max_ind ] NEW_LINE set [ max_ind ] = temp NEW_LINE max_ind = index NEW_LINE for j in range ( n ) : NEW_LINE INDENT if j != max_ind and ( set [ j ] & ( 1 << i ) ) : NEW_LINE INDENT set [ j ] = set [ j ] ^ set [ max_ind ] NEW_LINE DEDENT DEDENT index += 1 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res ^= set [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT number = int ( sys . stdin . read ( ) ) NEW_LINE wooden = [ ] NEW_LINE for each in range ( number ) : NEW_LINE INDENT wooden . append ( each ) NEW_LINE DEDENT height = [ ] NEW_LINE count = 0 NEW_LINE for i in wooden : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT count = 1 NEW_LINE for j in range ( i + 1 , len ( wooden ) ) : NEW_LINE INDENT if wooden [ i ] == wooden [ j ] : NEW_LINE INDENT wooden [ j ] = 0 NEW_LINE count += 1 NEW_LINE DEDENT DEDENT height . append ( count ) NEW_LINE DEDENT DEDENT index = 0 NEW_LINE max = height [ 0 ] NEW_LINE for i in height : NEW_LINE INDENT if i != 0 : NEW_LINE INDENT index += 1 NEW_LINE DEDENT if max < i : NEW_LINE INDENT max = i NEW_LINE DEDENT DEDENT print ( max , index ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def min_abs_sum_pair ( arr , n ) : NEW_LINE INDENT import math NEW_LINE sum , min_sum = 999999 , 999999 NEW_LINE l , r = 0 , n - 1 NEW_LINE min_l , min_r = l , n - 1 NEW_LINE if n < 2 : NEW_LINE INDENT print ( ' Invalid ▁ Input ' ) NEW_LINE return NEW_LINE DEDENT sort ( arr , l , r ) NEW_LINE while l < r : NEW_LINE INDENT sum = arr [ l ] + arr [ r ] NEW_LINE if abs ( sum ) < abs ( min_sum ) : NEW_LINE INDENT min_sum = sum NEW_LINE min_l = l NEW_LINE min_r = r NEW_LINE DEDENT if sum < 0 : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT print ( ' ▁ The ▁ two ▁ elements ▁ whose ▁ ' ' sum ▁ is ▁ minimum ▁ are ▁ % d ▁ and ▁ % d ' % ( arr [ min_l ] , arr [ min_r ] ) ) NEW_LINE DEDENT
def first_uniq_char ( s ) : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE for c in s : NEW_LINE INDENT freq [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i in range ( len ( s ) ) : NEW_LINE INDENT if freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 1 : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def check_stack_permutation ( ip , op , n ) : NEW_LINE INDENT import collections NEW_LINE input = collections . deque ( ) NEW_LINE output = collections . deque ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT output . append ( op [ i ] ) NEW_LINE DEDENT temp_stack = [ ] NEW_LINE while not input . empty ( ) : NEW_LINE INDENT ele = input . popleft ( ) NEW_LINE if ele == output [ - 1 ] : NEW_LINE INDENT output . popleft ( ) NEW_LINE while not temp_stack . empty ( ) : NEW_LINE INDENT if temp_stack [ - 1 ] == output [ - 1 ] : NEW_LINE INDENT temp_stack . pop ( ) NEW_LINE output . popleft ( ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT temp_stack . append ( ele ) NEW_LINE DEDENT DEDENT return ( input . empty ( ) and temp_stack . empty ( ) ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE s = string . strip ( args ) NEW_LINE t = string . strip ( args ) NEW_LINE l = len ( s ) NEW_LINE ans = True NEW_LINE for i in range ( l ) : NEW_LINE INDENT if s . find ( s [ i ] , i + 1 ) != t . find ( t [ i ] , i + 1 ) : NEW_LINE INDENT ans = False NEW_LINE break NEW_LINE DEDENT DEDENT print ( ' Yes ' if ans else ' No ' ) NEW_LINE DEDENT
def get_sum ( n , d ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if i % 10 == d : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT st = sys . maxsize NEW_LINE end = sys . maxsize NEW_LINE n = sys . maxsize NEW_LINE m = sys . maxsize NEW_LINE sum = 0 NEW_LINE if st > end : NEW_LINE INDENT temp = end NEW_LINE end = st NEW_LINE st = temp NEW_LINE DEDENT if n + m <= st : NEW_LINE INDENT sum = end - st NEW_LINE DEDENT elif n + m >= st and n - m < st : NEW_LINE INDENT sum = end - n - m NEW_LINE DEDENT elif n - m >= st and n <= end - m : NEW_LINE INDENT sum = end - st - 2 * m NEW_LINE DEDENT elif n - m < end and n + m >= end : NEW_LINE INDENT sum = n - m - st NEW_LINE DEDENT else : NEW_LINE INDENT sum = end - st NEW_LINE DEDENT if sum < 0 : NEW_LINE INDENT sum = 0 NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT DEDENT
def code_chef ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT while n > 0 : NEW_LINE INDENT e = sys . stdin . read ( n ) NEW_LINE s = sys . stdin . read ( n ) NEW_LINE t = sys . stdin . read ( n ) NEW_LINE temp = max ( e - s , e - t ) NEW_LINE print ( temp + 1 ) NEW_LINE DEDENT DEDENT
def find_sum ( N , K ) : NEW_LINE INDENT import sys NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT ans += ( i % K ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def ishu ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not b : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return math . gcd ( b , a % b ) NEW_LINE DEDENT DEDENT
def GFG ( r , d ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE R = d / math . pi NEW_LINE R += math . pow ( r , 2 ) NEW_LINE R = math . sqrt ( R ) NEW_LINE area = math . pi * math . pow ( R , 2 ) NEW_LINE return area NEW_LINE DEDENT
def minimum_numbers ( n , s ) : NEW_LINE INDENT import sys NEW_LINE if ( s % n ) > 0 : NEW_LINE INDENT return s // n + 1 NEW_LINE DEDENT else : NEW_LINE INDENT return s // n NEW_LINE DEDENT DEDENT
def count_triplets ( arr , n , m ) : NEW_LINE INDENT count = 0 NEW_LINE arr . sort ( ) NEW_LINE end , start , mid = 0 , len ( arr ) - 1 , len ( arr ) - 1 NEW_LINE for end in range ( n - 1 , 2 , - 1 ) : NEW_LINE INDENT start = 0 NEW_LINE mid = end - 1 NEW_LINE while start < mid : NEW_LINE INDENT prod = arr [ end ] * arr [ start ] * arr [ mid ] NEW_LINE if prod > m : NEW_LINE INDENT mid -= 1 NEW_LINE DEDENT elif prod < m : NEW_LINE INDENT start += 1 NEW_LINE DEDENT elif prod == m : NEW_LINE INDENT count += 1 NEW_LINE mid -= 1 NEW_LINE start += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def find_index ( n ) : NEW_LINE INDENT import sys NEW_LINE if n <= 1 : NEW_LINE INDENT return n NEW_LINE DEDENT a , b , c = 0 , 1 , 1 NEW_LINE res = 1 NEW_LINE while c < n : NEW_LINE INDENT c = a + b NEW_LINE res += 1 NEW_LINE a = b NEW_LINE b = c NEW_LINE DEDENT return res NEW_LINE DEDENT
def is_vowel ( ch ) : NEW_LINE INDENT if ch in [ ' a ' , ' e ' , ' i ' , ' o ' , ' u ' ] : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT dp = [ 0 ] * ( n + 1 ) NEW_LINE dp [ 0 ] = 0 NEW_LINE dp [ 1 ] = 1 NEW_LINE dp [ 2 ] = 1 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] + 1 NEW_LINE DEDENT return dp [ n ] NEW_LINE DEDENT
def GFG ( m , n ) : NEW_LINE INDENT ans , i = 0.0 , i NEW_LINE for i in range ( m , 0 , - 1 ) : NEW_LINE INDENT ans += ( pow ( i / m , n ) - pow ( ( i - 1 ) / m , n ) ) * i NEW_LINE DEDENT return ans NEW_LINE DEDENT
def ProdOfPrimes ( n ) : NEW_LINE INDENT import sys NEW_LINE prime = [ True ] * ( n + 1 ) NEW_LINE for p in range ( 2 , p * n + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT prod = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if prime [ i ] : NEW_LINE INDENT prod *= i NEW_LINE DEDENT DEDENT return prod NEW_LINE DEDENT
def p019 ( ) : NEW_LINE INDENT print ( eval ( ' p019 ( ) ' ) ) NEW_LINE count = 0 NEW_LINE for y in range ( 1901 , 2000 + 1 ) : NEW_LINE INDENT for m in range ( 1 , 12 + 1 ) : NEW_LINE INDENT if weekday ( y , m , 1 ) == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return str ( count ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT class Date ( object ) : NEW_LINE INDENT def __init__ ( self , d , m , y ) : NEW_LINE INDENT self . d = d NEW_LINE self . m = m NEW_LINE self . y = y NEW_LINE DEDENT DEDENT month_days = [ 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ] NEW_LINE def count_leap_years ( d ) : NEW_LINE INDENT years = d . y NEW_LINE if d . m <= 2 : NEW_LINE INDENT years -= 1 NEW_LINE DEDENT return years // 4 - years // 100 + years // 400 NEW_LINE DEDENT def get_difference ( dt1 , dt2 ) : NEW_LINE INDENT n1 = dt1 . y * 365 + dt1 . d NEW_LINE for i in range ( dt1 . m - 1 ) : NEW_LINE INDENT n1 += month_days [ i ] NEW_LINE DEDENT n1 += count_leap_years ( dt1 ) NEW_LINE n2 = dt2 . y * 365 + dt2 . d NEW_LINE for i in range ( dt2 . m - 1 ) : NEW_LINE INDENT n2 += month_days [ i ] NEW_LINE DEDENT n2 += count_leap_years ( dt2 ) NEW_LINE return ( n2 - n1 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT dt1 = datetime ( 1 , 2 , 2000 ) NEW_LINE dt2 = datetime ( 1 , 2 , 2004 ) NEW_LINE print ( " Difference ▁ between ▁ two ▁ dates ▁ is ▁ % d " % get_difference ( dt1 , dt2 ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( n , num , a , b ) : NEW_LINE INDENT import sys NEW_LINE st = set ( ) NEW_LINE def generateNumbers ( n , num , a , b ) : NEW_LINE INDENT if num > 0 and num < n : NEW_LINE INDENT st . add ( num ) NEW_LINE DEDENT if num >= n : NEW_LINE INDENT return NEW_LINE DEDENT if num * 10 + a > num : NEW_LINE INDENT generateNumbers ( n , num * 10 + a , a , b ) NEW_LINE DEDENT DEDENT def printNumbers ( n ) : NEW_LINE INDENT for i in range ( 0 , 9 + 1 ) : NEW_LINE INDENT for j in range ( i + 1 , 9 + 1 ) : NEW_LINE INDENT generateNumbers ( n , 0 , i , j ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' The ▁ numbers ▁ are : ▁ ' ) NEW_LINE sys . stdout . writelines ( st ) NEW_LINE st = set ( ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT n = 12 NEW_LINE printNumbers ( n ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE k = int ( sys . stdin . readline ( ) ) NEW_LINE t = int ( sys . stdin . readline ( ) ) NEW_LINE temp = ( t * k * n ) / 100.0 NEW_LINE x = 0 NEW_LINE while temp - k >= 0 : NEW_LINE INDENT temp -= k NEW_LINE x += 1 NEW_LINE DEDENT for i in range ( x ) : NEW_LINE INDENT print ( k , end = ' ▁ ' ) NEW_LINE DEDENT if temp != 0 : NEW_LINE INDENT print ( int ( temp ) , end = ' ▁ ' ) NEW_LINE x += 1 NEW_LINE DEDENT for i in range ( x , n ) : NEW_LINE INDENT print ( 0 , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT import subprocess NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT subprocess . check_call ( [ ' / bin / sh ' , ' - c ' , ' - - ' , ' - - ' , ' - - ' ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT try : NEW_LINE INDENT import json NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT pass NEW_LINE DEDENT return json . dumps ( list ( ) ) NEW_LINE DEDENT
def odd_occurrence ( ar , ar_size ) : NEW_LINE INDENT global res NEW_LINE res = 0 NEW_LINE for i in range ( ar_size ) : NEW_LINE INDENT res = res ^ ar [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT
def GFG ( x , k ) : NEW_LINE INDENT rslt = ( 1 if ( x & ( 1 << ( k - 1 ) ) ) else 0 ) NEW_LINE return rslt NEW_LINE DEDENT
def GFG ( n , isPrime ) : NEW_LINE INDENT isPrime [ 0 ] = isPrime [ 1 ] = False NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT isPrime [ i ] = True NEW_LINE DEDENT for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if isPrime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT isPrime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT
def ggcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return math . gcd ( b % a , a ) NEW_LINE DEDENT
def ggcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return math . gcd ( b % a , a ) NEW_LINE DEDENT
def p174 ( ) : NEW_LINE INDENT print ( eval ( ' p174 ( ) ' ) ) NEW_LINE SIZE_LIMIT = 1000000 NEW_LINE TYPE_LIMIT = 10 NEW_LINE type = [ 0 ] * ( SIZE_LIMIT + 1 ) NEW_LINE for n in range ( 3 , ( n - 1 ) * 4 , SIZE_LIMIT + 1 ) : NEW_LINE INDENT for m in range ( n - 2 , 1 , - 2 ) : NEW_LINE INDENT tiles = n * n - m * m NEW_LINE if tiles > SIZE_LIMIT : NEW_LINE INDENT break NEW_LINE DEDENT type [ tiles ] += 1 NEW_LINE DEDENT DEDENT count = 0 NEW_LINE for t in type : NEW_LINE INDENT if 1 <= t <= TYPE_LIMIT : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return str ( count ) NEW_LINE DEDENT
def binary_removal ( s ) : NEW_LINE INDENT import sys NEW_LINE one = 0 NEW_LINE zero = 0 NEW_LINE for c in s [ 1 : ] : NEW_LINE INDENT if c == '1' : NEW_LINE INDENT if c [ - 1 ] == '1' : NEW_LINE INDENT one += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if c [ - 1 ] == '0' and one > 0 : NEW_LINE INDENT print ( ' No ' ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT print ( ' YES ' ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT f = sys . stdin NEW_LINE out = sys . stdout NEW_LINE test = sys . maxsize NEW_LINE while test > 0 : NEW_LINE INDENT s = f . readline ( ) NEW_LINE test -= 1 NEW_LINE s = s . strip ( ) NEW_LINE DEDENT return s NEW_LINE DEDENT class FastReader ( ) : NEW_LINE INDENT def readline ( self ) : NEW_LINE INDENT s = None NEW_LINE try : NEW_LINE INDENT s = list ( f . readline ( ) . strip ( ) . split ( ' \n ' ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return s NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT s = None NEW_LINE try : NEW_LINE INDENT s = s . strip ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return s NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT s = None NEW_LINE try : NEW_LINE INDENT s = s . strip ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return s NEW_LINE DEDENT DEDENT class FastWriter ( ) : NEW_LINE INDENT def write ( self , f ) : NEW_LINE INDENT self . write ( ' % r ' % ( f , ) ) NEW_LINE DEDENT def write ( self , f ) : NEW_LINE INDENT print ( f ) NEW_LINE self . write ( ' \n ' ) NEW_LINE DEDENT def close ( self ) : NEW_LINE INDENT f . close ( ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( N ) : NEW_LINE INDENT maxm = - 1 NEW_LINE cnt = 0 NEW_LINE while N != 0 : NEW_LINE INDENT if N & 1 == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE N >>= 1 NEW_LINE maxm = max ( maxm , cnt ) NEW_LINE DEDENT else : NEW_LINE INDENT maxm = max ( maxm , cnt ) NEW_LINE cnt = 0 NEW_LINE N >>= 1 NEW_LINE DEDENT DEDENT return maxm NEW_LINE DEDENT
def get_longest_seq ( a , n ) : NEW_LINE INDENT max_idx , max_len , curr_len , curr_idx = 0 , 0 , 0 , 0 , 0 NEW_LINE for k in range ( n ) : NEW_LINE INDENT if a [ k ] > 0 : NEW_LINE INDENT curr_len += 1 NEW_LINE if curr_len == 1 : NEW_LINE INDENT curr_idx = k NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if curr_len > max_len : NEW_LINE INDENT max_len = curr_len NEW_LINE max_idx = curr_idx NEW_LINE DEDENT curr_len = 0 NEW_LINE DEDENT DEDENT if max_len > 0 : NEW_LINE INDENT print ( ' Index ▁ : ▁ % d ' % max_idx , end = ' ▁ , ▁ Length ▁ : ▁ % d ' % max_len ) NEW_LINE print ( ' ▁ , Length ▁ : ▁ % d ' % max_len , end = ' ▁ , ▁ Length ▁ : ▁ % d ' % max_len ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ▁ positive ▁ sequence ▁ detected . ' ) NEW_LINE return NEW_LINE DEDENT arr = [ 1 , 2 , - 3 , 2 , 3 , 4 , - 6 , 1 , 2 , 3 , 4 , 5 , - 8 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE get_longest_seq ( arr , n ) NEW_LINE DEDENT
def Linked_list_2D_Matrix ( arr , i , j , m , n ) : NEW_LINE INDENT class Node ( object ) : NEW_LINE INDENT data = None NEW_LINE right = None NEW_LINE down = None NEW_LINE DEDENT def construct ( arr , i , j , m , n ) : NEW_LINE INDENT if i > n - 1 or j > m - 1 : NEW_LINE INDENT return None NEW_LINE DEDENT temp = Node ( ) NEW_LINE temp . data = arr [ i ] [ j ] NEW_LINE temp . right = construct ( arr , i , j + 1 , m , n ) NEW_LINE temp . down = construct ( arr , i + 1 , j , m , n ) NEW_LINE return temp NEW_LINE DEDENT def display ( head ) : NEW_LINE INDENT global Rp NEW_LINE Dp = head NEW_LINE while Dp is not None : NEW_LINE INDENT Rp = Dp NEW_LINE while Rp is not None : NEW_LINE INDENT print ( Rp . data , end = ' ▁ ' ) NEW_LINE Rp = Rp . right NEW_LINE DEDENT print ( ) NEW_LINE Dp = Dp . down NEW_LINE DEDENT DEDENT def main ( args ) : NEW_LINE INDENT arr = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] NEW_LINE m , n = 3 , 3 NEW_LINE head = construct ( arr , 0 , 0 , m , n ) NEW_LINE display ( head ) NEW_LINE DEDENT return Node ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if is_prime ( int ( sys . stdin . readline ( ) ) ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE def is_prime ( x ) : NEW_LINE INDENT if x < 2 : NEW_LINE INDENT return False NEW_LINE DEDENT if x <= 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if x % 2 == 0 or x % 3 == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , i * x , 6 ) : NEW_LINE INDENT if x % i == 0 or x % ( i + 2 ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT return True NEW_LINE DEDENT
def find_nth_term ( N ) : NEW_LINE INDENT if N % 2 == 0 : NEW_LINE INDENT ans = ( N // 2 ) * 6 + ( N // 2 ) * 2 NEW_LINE DEDENT else : NEW_LINE INDENT ans = ( N // 2 + 1 ) * 6 + ( N // 2 ) * 2 NEW_LINE DEDENT print ( ans , end = ' ' ) NEW_LINE DEDENT
def GFG ( a , b , c , d ) : NEW_LINE INDENT if a == b and a == c and a == d and c == d and b == c and b == d : NEW_LINE INDENT return True NEW_LINE DEDENT elif a == b and c == d : NEW_LINE INDENT return True NEW_LINE DEDENT elif a == d and c == b : NEW_LINE INDENT return True NEW_LINE DEDENT elif a == c and d == b : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def gf_int ( a , b , m ) : NEW_LINE INDENT n = int ( math . sqrt ( m ) + 1 ) NEW_LINE an = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT an = ( an * a ) % m NEW_LINE DEDENT value = [ 0 ] * m NEW_LINE for i , cur in enumerate ( range ( 1 , an + n + 1 ) ) : NEW_LINE INDENT if not value [ cur ] : NEW_LINE INDENT value [ cur ] = i NEW_LINE DEDENT cur = ( cur * an ) % m NEW_LINE DEDENT for i , cur in enumerate ( range ( 0 , b + n + 1 ) ) : NEW_LINE INDENT if value [ cur ] : NEW_LINE INDENT ans = value [ cur ] * n - i NEW_LINE if ans < m : NEW_LINE INDENT return ans NEW_LINE DEDENT DEDENT cur = ( cur * a ) % m NEW_LINE DEDENT return - 1 NEW_LINE DEDENT
def find_minimum_cost ( ind , a , n , k , dp ) : NEW_LINE INDENT import math NEW_LINE if ind == ( n - 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif dp [ ind ] != - 1 : NEW_LINE INDENT return dp [ ind ] NEW_LINE DEDENT else : NEW_LINE INDENT ans = math . inf NEW_LINE for i in range ( 1 , k + 1 ) : NEW_LINE INDENT if ind + i < n : NEW_LINE INDENT ans = min ( ans , abs ( a [ ind + i ] - a [ ind ] ) + find_minimum_cost ( ind + i , a , n , k , dp ) ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return dp [ ind ] = ans NEW_LINE DEDENT DEDENT
def __gcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT if not b : NEW_LINE INDENT return a NEW_LINE DEDENT if a == b : NEW_LINE INDENT return a NEW_LINE DEDENT if a > b : NEW_LINE INDENT return __gcd ( a - b , b ) NEW_LINE DEDENT return __gcd ( a , b - a ) NEW_LINE DEDENT def Probability ( sum , times ) : NEW_LINE INDENT favorable , total = 0 , 36 NEW_LINE probability = 0 NEW_LINE for i in range ( 1 , 6 + 1 ) : NEW_LINE INDENT for j in range ( 1 , 6 + 1 ) : NEW_LINE INDENT if ( i + j ) == sum : NEW_LINE INDENT favorable += 1 NEW_LINE DEDENT DEDENT DEDENT gcd1 = __gcd ( int ( favorable ) , int ( total ) ) NEW_LINE favorable = favorable / float ( gcd1 ) NEW_LINE total = total / float ( gcd1 ) NEW_LINE probability = int ( math . pow ( total , times ) ) NEW_LINE return probability NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT sum , times = 7 , 7 NEW_LINE print ( '1' + ' / ' + Probability ( sum , times ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE mod = 998244353 NEW_LINE nchoosek = [ [ 0 ] * math . pi for i in range ( 4001 ) ] NEW_LINE for i in range ( 4001 ) : NEW_LINE INDENT nchoosek [ i ] [ 0 ] = nchoosek [ i ] [ i ] = 1 NEW_LINE DEDENT for i in range ( 2 , len ( nchoosek ) ) : NEW_LINE INDENT for j in range ( 1 , i ) : NEW_LINE INDENT nchoosek [ i ] [ j ] = ( nchoosek [ i - 1 ] [ j ] + nchoosek [ i - 1 ] [ j - 1 ] ) % mod NEW_LINE DEDENT DEDENT with open ( ' / proc / % d / % d ' % ( sys . argv [ 0 ] , sys . argv [ 1 ] ) ) as f : NEW_LINE INDENT k = int ( f . read ( ) ) NEW_LINE n = int ( f . read ( ) ) NEW_LINE for i in range ( 2 , 2 * k + 1 ) : NEW_LINE INDENT if i > k : NEW_LINE INDENT pairs = k - i // 2 NEW_LINE DEDENT else : NEW_LINE INDENT pairs = ( i - 1 ) // 2 NEW_LINE DEDENT active = k - 2 * pairs NEW_LINE if i % 2 == 0 : NEW_LINE INDENT active -= 1 NEW_LINE DEDENT times2 = 1 NEW_LINE total = 0 NEW_LINE for j in range ( 0 , pairs + 1 ) : NEW_LINE INDENT choice = times2 * nchoosek [ pairs ] [ j ] % mod NEW_LINE times2 = times2 * 2 % mod NEW_LINE if active + j - 1 < 0 : NEW_LINE INDENT continue NEW_LINE DEDENT total += choice * nchoosek [ n + active - 1 ] [ active + j - 1 ] NEW_LINE if i % 2 == 0 : NEW_LINE INDENT total += choice * nchoosek [ n + active - 2 ] [ active + j - 1 ] NEW_LINE DEDENT total %= mod NEW_LINE DEDENT print ( total ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE try : NEW_LINE INDENT math . mp ( ' ' , 2 ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT N = int ( math . pi ) NEW_LINE total = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT money = math . mp ( ' ' , math . pi / 2 ) NEW_LINE A = string . strip ( ) NEW_LINE B = ' JPY ' NEW_LINE if A == B : NEW_LINE INDENT total += money NEW_LINE DEDENT else : NEW_LINE INDENT total += money * 380000 NEW_LINE DEDENT DEDENT print ( total ) NEW_LINE DEDENT
def get_count ( arr , n , num1 , num2 ) : NEW_LINE INDENT i = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == num1 : NEW_LINE INDENT break NEW_LINE DEDENT if i >= n - 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT j = 0 NEW_LINE for j in range ( n - 1 , i + 1 , - 1 ) : NEW_LINE INDENT if arr [ j ] == num2 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if j == i : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( j - i - 1 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE num1 , num2 = 5 , 4 NEW_LINE print ( get_count ( arr , n , num1 , num2 ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = [ ] NEW_LINE while True : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sys . stdin . read ( n ) ) NEW_LINE DEDENT arr . sort ( ) NEW_LINE min = sys . maxsize NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT min = min ( min , arr [ i ] - arr [ i - 1 ] ) NEW_LINE DEDENT s . append ( ' % d \n ' % min ) NEW_LINE DEDENT sys . stdout . write ( ' ' . join ( s ) ) NEW_LINE DEDENT
def count_set_bits ( n ) : NEW_LINE INDENT import numpy as np NEW_LINE cnt = 0 NEW_LINE set_bits = np . zeros ( n + 1 ) NEW_LINE set_bits [ 0 ] = 0 NEW_LINE set_bits [ 1 ] = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT set_bits [ i ] = set_bits [ i // 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT set_bits [ i ] = set_bits [ i - 1 ] + 1 NEW_LINE DEDENT DEDENT for i in range ( 0 , n + 1 ) : NEW_LINE INDENT cnt = cnt + set_bits [ i ] NEW_LINE DEDENT return cnt NEW_LINE DEDENT
def gf_gcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return gf_gcd ( b % a , a ) NEW_LINE DEDENT
def p179 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . pow ( 10 , 7 ) ) NEW_LINE LIMIT = math . pow ( 10 , 7 ) NEW_LINE def run ( ) : NEW_LINE INDENT num_divisors = [ 0 ] * ( LIMIT + 1 ) NEW_LINE for i in range ( 2 , len ( num_divisors ) ) : NEW_LINE INDENT for j in range ( i * 2 , len ( num_divisors ) , i ) : NEW_LINE INDENT num_divisors [ j ] += 1 NEW_LINE DEDENT DEDENT count = 0 NEW_LINE for i in range ( 2 , len ( num_divisors ) - 1 ) : NEW_LINE INDENT if num_divisors [ i ] == num_divisors [ i + 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return str ( count ) NEW_LINE DEDENT return run NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT for i in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT arr [ i ] = arr [ i - 1 ] NEW_LINE DEDENT arr [ 0 ] = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( sum - arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , n - 2 + 1 ) : NEW_LINE INDENT arr [ i ] = arr [ i + 1 ] NEW_LINE DEDENT arr [ n - 1 ] = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def find_min_difference ( arr , n ) : NEW_LINE INDENT global min , second_min , max , second_max NEW_LINE min = second_max = ( arr [ 0 ] if arr [ 0 ] < arr [ 1 ] else arr [ 1 ] ) NEW_LINE max = second_min = ( arr [ 1 ] if arr [ 0 ] < arr [ 1 ] else arr [ 0 ] ) NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT if arr [ i ] > max : NEW_LINE INDENT second_max = max NEW_LINE max = arr [ i ] NEW_LINE DEDENT elif arr [ i ] > second_max : NEW_LINE INDENT second_max = arr [ i ] NEW_LINE DEDENT elif arr [ i ] < min : NEW_LINE INDENT second_min = min NEW_LINE min = arr [ i ] NEW_LINE DEDENT elif arr [ i ] < second_min : NEW_LINE INDENT second_min = arr [ i ] NEW_LINE DEDENT DEDENT diff = min ( max - second_min , second_max - min ) NEW_LINE return diff NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT buf = sys . stdin . read ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT while not ( buf == '0' ) : NEW_LINE INDENT n = int ( buf ) NEW_LINE buf = buf . strip ( ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( int ( buf [ i ] ) ) NEW_LINE DEDENT a . sort ( ) NEW_LINE end = False NEW_LINE for i in range ( n ) : NEW_LINE INDENT count = 1 NEW_LINE j = a [ i ] NEW_LINE i += 1 NEW_LINE while i < len ( a ) and j == a [ i ] : NEW_LINE INDENT count += 1 NEW_LINE i += 1 NEW_LINE DEDENT if count > n // 2 : NEW_LINE INDENT print ( a [ i - 1 ] ) NEW_LINE end = True NEW_LINE DEDENT if end : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if not end : NEW_LINE INDENT print ( ' NO ▁ COLOR ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def factorial ( n ) : NEW_LINE INDENT return ( 1 if n == 1 or n == 0 else n * factorial ( n - 1 ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT words = sys . stdin . readline ( ) . split ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT words = words [ : ] NEW_LINE DEDENT n , d , x = None , None , None NEW_LINE n , d , x = int ( n ) , int ( d ) , int ( x ) , int ( n ) NEW_LINE price = np . zeros ( ( d , n ) ) NEW_LINE for i in range ( d ) : NEW_LINE INDENT words = words [ i ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT price [ i ] [ j ] = int ( words [ j ] ) NEW_LINE DEDENT DEDENT for i in range ( d - 1 ) : NEW_LINE INDENT dp = np . zeros ( x + 1 ) NEW_LINE for j in range ( 0 , x + 1 ) : NEW_LINE INDENT dp [ j ] = j NEW_LINE DEDENT for j in range ( n ) : NEW_LINE INDENT for k in range ( 0 , x + 1 ) : NEW_LINE INDENT if k >= price [ i ] [ j ] : NEW_LINE INDENT dp [ k ] = max ( dp [ k ] , dp [ k - price [ i ] [ j ] ] + price [ i + 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT x = dp [ x ] NEW_LINE DEDENT print ( x ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE import csv NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def find_minimum_x ( a , n ) : NEW_LINE INDENT import set NEW_LINE st = set ( a ) NEW_LINE if len ( st ) == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if len ( st ) == 2 : NEW_LINE INDENT for ( el1 , el2 ) in st : NEW_LINE INDENT if ( el2 - el1 ) % 2 == 0 : NEW_LINE INDENT return ( el2 - el1 ) // 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( el2 - el1 ) NEW_LINE DEDENT DEDENT DEDENT if len ( st ) == 3 : NEW_LINE INDENT for ( el1 , el2 , el3 ) in st : NEW_LINE INDENT if ( el2 - el1 ) == ( el3 - el2 ) : NEW_LINE INDENT return el2 - el1 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT
def find_x ( n , k ) : NEW_LINE INDENT import math NEW_LINE r = n , v , u = 0 , 0 , 0 NEW_LINE m = int ( math . sqrt ( k ) ) + 1 NEW_LINE for i in range ( 2 , m + 1 ) : NEW_LINE INDENT if i == m : NEW_LINE INDENT i = k NEW_LINE DEDENT for u = v = 0 NEW_LINE if k % i == 0 : NEW_LINE INDENT v //= i NEW_LINE DEDENT if v > 0 : NEW_LINE INDENT t = n NEW_LINE while t > 0 : NEW_LINE INDENT t //= i NEW_LINE u += t NEW_LINE DEDENT r = min ( r , u / v ) NEW_LINE DEDENT DEDENT return r NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT if x - y - b <= 0 and x - y + b >= 0 and x + y - 2 * a + b <= 0 and x + y - b >= 0 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def count_pairs ( arr , n ) : NEW_LINE INDENT N = 1000 NEW_LINE freq = [ 0 ] * size NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = arr [ i ] NEW_LINE freq [ x + N ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( size ) : NEW_LINE INDENT if freq [ i ] > 0 : NEW_LINE INDENT ans += ( ( freq [ i ] ) * ( freq [ i ] - 1 ) ) / 2 NEW_LINE for j in range ( i + 2 , 2001 , 2 ) : NEW_LINE INDENT if freq [ j ] > 0 and ( freq [ ( i + j ) / 2 ] > 0 ) : NEW_LINE INDENT ans += ( freq [ i ] * freq [ j ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT global sum , n NEW_LINE sum += x NEW_LINE return ( ( float ( sum ) ) / ++ n ) NEW_LINE DEDENT
def test_sieve_of_eratosthenes ( ) : NEW_LINE INDENT import random NEW_LINE prime = [ True ] * MAX NEW_LINE prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , MAX ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT product = 1 NEW_LINE for p in range ( 2 , MAX ) : NEW_LINE INDENT if prime [ p ] : NEW_LINE INDENT product = product * p NEW_LINE s . append ( product + 1 ) NEW_LINE DEDENT DEDENT def is_euclid ( n ) : NEW_LINE INDENT if n in s : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT sieve_of_eratosthenes ( ) NEW_LINE n = 31 NEW_LINE if is_euclid ( n ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT n = 42 NEW_LINE if is_euclid ( n ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE class SS ( string ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT string = " " NEW_LINE n = int ( self . count ) NEW_LINE b = math . floor ( math . sqrt ( b ) ) NEW_LINE self . arr = [ ] NEW_LINE v = [ ] NEW_LINE odd , even , count = 0 , 0 , 0 NEW_LINE for i in range ( len ( self . arr ) ) : NEW_LINE INDENT self . arr . append ( int ( self . arr [ i ] ) ) NEW_LINE DEDENT for i in range ( len ( self . arr ) ) : NEW_LINE INDENT if i != 0 and odd == even : NEW_LINE INDENT v . append ( abs ( self . arr [ i ] - self . arr [ i - 1 ] ) ) NEW_LINE DEDENT if self . arr [ i ] % 2 == 0 : NEW_LINE INDENT even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd += 1 NEW_LINE DEDENT DEDENT self . v . sort ( ) NEW_LINE for i in range ( len ( self . v ) ) : NEW_LINE INDENT if b >= self . v [ i ] : NEW_LINE INDENT count += 1 NEW_LINE b -= self . v [ i ] NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( data ) : NEW_LINE INDENT global i , g , gk , gks NEW_LINE i = g = gk = gks = 0 NEW_LINE for c in data : NEW_LINE INDENT if c == ' g ' : NEW_LINE INDENT g += 1 NEW_LINE DEDENT elif c == ' k ' : NEW_LINE INDENT if g > 0 : NEW_LINE INDENT g -= 1 NEW_LINE gk += 1 NEW_LINE DEDENT DEDENT elif c == ' s ' : NEW_LINE INDENT if gk > 0 : NEW_LINE INDENT gk -= 1 NEW_LINE gks += 1 NEW_LINE DEDENT DEDENT DEDENT return gks NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT a . sort ( ) NEW_LINE min , max = a [ 0 ] , a [ - 1 ] NEW_LINE res = max - min + 1 - n NEW_LINE print ( res ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' No ▁ such ▁ file ▁ or ▁ directory ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import collections NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE class Forming_Teams ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . count = 0 NEW_LINE self . seen = [ ] NEW_LINE self . path , self . cycle = 0 , 1 NEW_LINE self . graph = [ ] NEW_LINE def dfs ( self , child , par ) : NEW_LINE INDENT if self . seen [ child ] == True : NEW_LINE INDENT return self . cycle NEW_LINE DEDENT self . seen . append ( True ) NEW_LINE for i in self . graph [ child ] : NEW_LINE INDENT if i != par : NEW_LINE INDENT self . count += 1 NEW_LINE if self . dfs ( i , child ) == self . cycle : NEW_LINE INDENT return self . cycle NEW_LINE DEDENT DEDENT DEDENT DEDENT return self . path NEW_LINE DEDENT def dfs ( self , child , par ) : NEW_LINE INDENT if self . seen [ child ] == True : NEW_LINE INDENT self . cycle += 1 NEW_LINE DEDENT else : NEW_LINE INDENT self . cycle += 1 NEW_LINE DEDENT DEDENT DEDENT ft = Forming_Teams ( ) NEW_LINE ft . graph = list ( ) NEW_LINE for i in range ( 0 , m + 1 ) : NEW_LINE INDENT ft . graph . append ( list ( ) ) NEW_LINE DEDENT ft . seen = [ False ] * ( m + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = os . path . split ( ft . graph [ x ] ) NEW_LINE ft . graph [ x ] . append ( y ) NEW_LINE ft . graph [ y ] . append ( x ) NEW_LINE DEDENT toremove = 0 NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT if not ft . seen [ i ] : NEW_LINE INDENT ft . count = 0 NEW_LINE if ft . dfs ( i , 0 ) == ft . cycle : NEW_LINE INDENT if ft . count % 2 == 1 : NEW_LINE INDENT toremove += 1 NEW_LINE DEDENT DEDENT DEDENT if ( m - toremove ) % 2 == 1 : NEW_LINE INDENT toremove += 1 NEW_LINE DEDENT print ( toremove ) NEW_LINE DEDENT DEDENT
def kth_smallest ( arr , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE return arr [ k - 1 ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import math NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE DEDENT
def p329 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . pow ( 10 , 10 ) ) NEW_LINE START_NUM = 1 NEW_LINE END_NUM = 500 NEW_LINE CROAK_SEQ = ' PPPPNNPPPNPPNPN ' NEW_LINE def cross ( x ) : NEW_LINE INDENT assert 0 <= x < START_NUM and x < END_NUM and x < int ( x ) NEW_LINE return x NEW_LINE DEDENT NUM_JUMPS = len ( CROAK_SEQ ) - 1 NEW_LINE NUM_TRIALS = 1 << NUM_JUMPS NEW_LINE def run ( ) : NEW_LINE INDENT global_numerator = 0 NEW_LINE is_prime = math . list_primality ( END_NUM ) NEW_LINE for i in range ( START_NUM , END_NUM + 1 ) : NEW_LINE INDENT for j in range ( NUM_TRIALS ) : NEW_LINE INDENT pos = i NEW_LINE trial_numerator = 1 NEW_LINE if is_prime [ pos ] == ( CROAK_SEQ [ 0 ] == ' P ' ) : NEW_LINE INDENT trial_numerator *= 2 NEW_LINE DEDENT for k in range ( NUM_JUMPS ) : NEW_LINE INDENT if pos <= START_NUM : NEW_LINE INDENT pos += 1 NEW_LINE DEDENT elif pos >= END_NUM : NEW_LINE INDENT pos -= 1 NEW_LINE DEDENT elif ( ( j >> k ) & 1 ) == 0 : NEW_LINE INDENT pos += 1 NEW_LINE DEDENT else : NEW_LINE INDENT pos -= 1 NEW_LINE DEDENT if is_prime [ pos ] == ( CROAK_SEQ [ k + 1 ] == ' P ' ) : NEW_LINE INDENT trial_numerator *= 2 NEW_LINE DEDENT DEDENT global_numerator += trial_numerator NEW_LINE DEDENT DEDENT global_denominator = math . pow ( END_NUM + 1 - START_NUM , NUM_JUMPS ) * math . pow ( 3 , len ( CROAK_SEQ ) ) NEW_LINE return math . pow ( global_numerator , global_denominator ) NEW_LINE DEDENT return ' ' . join ( run ( ) ) NEW_LINE DEDENT
def distance ( lat1 , lat2 , lon1 , lon2 ) : NEW_LINE INDENT lon1 = math . radians ( lon1 ) NEW_LINE lon2 = math . radians ( lon2 ) NEW_LINE lat1 = math . radians ( lat1 ) NEW_LINE lat2 = math . radians ( lat2 ) NEW_LINE dlon = lon2 - lon1 NEW_LINE dlat = lat2 - lat1 NEW_LINE a = math . pow ( math . sin ( dlat / 2 ) , 2 ) + math . cos ( lat1 ) * math . cos ( lat2 ) * math . pow ( math . sin ( dlon / 2 ) , 2 ) NEW_LINE c = 2 * math . asin ( math . sqrt ( a ) ) NEW_LINE r = 6371 NEW_LINE return ( c * r ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE os = os NEW_LINE sys = sys NEW_LINE os = os NEW_LINE sys = os NEW_LINE sys = os NEW_LINE try : NEW_LINE INDENT os = os NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os = os NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os = os NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os = os NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os = os NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT os = os NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return os NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import numpy . testing as np NEW_LINE import testing as np NEW_LINE from numpy . testing as np NEW_LINE import testing as np NEW_LINE from numpy . testing as np NEW_LINE import testing as np NEW_LINE from numpy . testing as np NEW_LINE import testing as np NEW_LINE from numpy . testing as np NEW_LINE import testing as np NEW_LINE from numpy . testing as np NEW_LINE import testing as np NEW_LINE testing = np . testing as np NEW_LINE np . testing = np . testing NEW_LINE np . testing = np . testing NEW_LINE np . testing = np . testing NEW_LINE np . testing . as np . testing = np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing NEW_LINE np . testing . as np . testing = np . np . testing . as np . np . testing NEW_LINE np . testing . as np . testing = np . np . np . testing NEW_LINE np . testing . as np . testing = np . np . np . testing NEW_LINE np . testing . as np . testing = np . np . np . testing NEW_LINE np . testing . as np . testing . as np . testing : NEW_LINE INDENT np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE np . testing . testing = np . testing . as_testing NEW_LINE np . testing . as_testing = np . testing . as_testing NEW_LINE DEDENT
def SumDivPrime ( A , n ) : NEW_LINE INDENT max = int ( 0 ) NEW_LINE for i in A : NEW_LINE INDENT if max < i : NEW_LINE INDENT max = i NEW_LINE DEDENT DEDENT return max NEW_LINE DEDENT
def left_rotate ( arr , n , k ) : NEW_LINE INDENT import sys NEW_LINE arr = [ 1 , 3 , 5 , 7 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE left_rotate ( arr , n , k ) NEW_LINE print ( ) NEW_LINE k = 3 NEW_LINE left_rotate ( arr , n , k ) NEW_LINE print ( ) NEW_LINE k = 4 NEW_LINE left_rotate ( arr , n , k ) NEW_LINE print ( ) NEW_LINE DEDENT
def closest_multiple ( n , x ) : NEW_LINE INDENT import sys NEW_LINE if x > n : NEW_LINE INDENT return x NEW_LINE DEDENT n = n + x // 2 NEW_LINE n = n - ( n % x ) NEW_LINE return n NEW_LINE DEDENT
def compititive_programmer ( args ) : NEW_LINE INDENT global t NEW_LINE f = sys . stdin NEW_LINE t = len ( f ) NEW_LINE f . close ( ) NEW_LINE while t != 0 : NEW_LINE INDENT t -= 1 NEW_LINE s = f . readline ( ) NEW_LINE zero , sum , even = 0 , 0 , 0 NEW_LINE for c in s : NEW_LINE INDENT sum += ord ( c ) - ord ( '0' ) NEW_LINE if c == '0' : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT if c % 2 == 0 and c != '0' : NEW_LINE INDENT even += 1 NEW_LINE DEDENT DEDENT if zero != len ( s ) and ( ( even == 0 and zero == 1 ) or zero == 0 or sum % 3 != 0 ) : NEW_LINE INDENT print ( ' cyan ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' red ' ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( a , b ) : NEW_LINE INDENT import numpy as np NEW_LINE dp = np . zeros ( ( 901 , 8101 ) ) NEW_LINE def minimumNumberOfDigits ( a , b ) : NEW_LINE INDENT if a > b or a < 0 or b < 0 or a > 900 or b > 8100 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if a == 0 and b == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if dp [ a ] [ b ] != - 1 : NEW_LINE INDENT return dp [ a ] [ b ] NEW_LINE DEDENT ans = 101 NEW_LINE for i in range ( 9 , 1 , - 1 ) : NEW_LINE INDENT k = minimumNumberOfDigits ( a - i , b - ( i * i ) ) NEW_LINE if k != - 1 : NEW_LINE INDENT ans = min ( ans , k + 1 ) NEW_LINE DEDENT DEDENT return dp [ a ] [ b ] = ans NEW_LINE DEDENT def printSmallestNumber ( a , b ) : NEW_LINE INDENT for row in dp : NEW_LINE INDENT row [ - 1 ] = 0 NEW_LINE DEDENT dp [ 0 ] [ 0 ] = 0 NEW_LINE k = minimumNumberOfDigits ( a , b ) NEW_LINE if k == - 1 or k > 100 : NEW_LINE INDENT print ( ' - 1' ) NEW_LINE DEDENT else : NEW_LINE INDENT while a > 0 and b > 0 : NEW_LINE INDENT for i in range ( 1 , 9 + 1 ) : NEW_LINE INDENT if a >= i and b >= i * i and 1 + dp [ a - i ] [ b - i * i ] == dp [ a ] [ b ] : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE a -= i NEW_LINE b -= i * i NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT def main ( args ) : NEW_LINE INDENT a , b = 18 , 162 NEW_LINE printSmallestNumber ( a , b ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import math NEW_LINE N = 5005 NEW_LINE global n , k NEW_LINE gr = [ ] NEW_LINE d
def find_subgraph ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE arr = np . array ( arr ) NEW_LINE dp = np . zeros ( 10 ) NEW_LINE cnt = np . zeros ( 10 ) NEW_LINE loc_max = 0 NEW_LINE tmp = arr [ 0 ] NEW_LINE while tmp > 0 : NEW_LINE INDENT dp [ tmp % 10 ] = 1 NEW_LINE tmp //= 10 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT tmp = arr [ i ] NEW_LINE loc_max = 1 NEW_LINE cnt [ 0 ] = 0 NEW_LINE while tmp > 0 : NEW_LINE INDENT cnt [ tmp % 10 ] = 1 NEW_LINE tmp //= 10 NEW_LINE DEDENT for d in range ( 0 , 9 + 1 ) : NEW_LINE INDENT if cnt [ d ] == 1 : NEW_LINE INDENT dp [ d ] += 1 NEW_LINE loc_max = np . maximum ( loc_max , dp [ d ] ) NEW_LINE DEDENT DEDENT for d in range ( 0 , 9 + 1 ) : NEW_LINE INDENT if cnt [ d ] == 1 : NEW_LINE INDENT dp [ d ] = loc_max NEW_LINE DEDENT DEDENT arr = np . maximum ( arr , loc_max ) NEW_LINE DEDENT return arr NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import set NEW_LINE import os NEW_LINE import sys NEW_LINE t = sys . maxsize NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE m = sys . maxsize NEW_LINE set = set ( ) NEW_LINE for j in range ( n ) : NEW_LINE INDENT set . add ( sys . stdin . read ( ) ) NEW_LINE DEDENT count = 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT if set . add ( sys . stdin . read ( ) ) == False : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT DEDENT
def total_prime_factors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE if ( n % 2 == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE while ( n % 2 == 0 ) : NEW_LINE INDENT n //= 2 NEW_LINE DEDENT DEDENT for i in range ( 3 , n * 2 + 2 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT while ( n % i == 0 ) : NEW_LINE INDENT n //= 2 NEW_LINE DEDENT DEDENT if n > 2 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT
def calculate_sum ( a , N ) : NEW_LINE INDENT m = N // a NEW_LINE sum = m * ( m + 1 ) // 2 NEW_LINE ans = a * sum NEW_LINE return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE sys . stdout = sys . stdout NEW_LINE parts = list ( f . strip ( ) . split ( ' ▁ ' ) ) NEW_LINE n = int ( parts [ 0 ] ) NEW_LINE m = int ( parts [ 1 ] ) NEW_LINE k = int ( parts [ 2 ] ) NEW_LINE skills = defaultdict ( int ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT parts = list ( parts ) NEW_LINE skill_name = parts [ 0 ] NEW_LINE skill_score = int ( parts [ 1 ] ) NEW_LINE new_skill_score = skill_score * k / 100 NEW_LINE if new_skill_score < 100 : NEW_LINE INDENT continue NEW_LINE DEDENT skills [ skill_name ] += new_skill_score NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT skill_name = parts [ i ] NEW_LINE if skill_name in skills : NEW_LINE INDENT continue NEW_LINE DEDENT skills [ skill_name ] = 0 NEW_LINE DEDENT sys . stdout . write ( ' % d ▁ % d \n ' % ( len ( skills ) , skill_name ) ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE DEDENT
def count_solutions ( a ) : NEW_LINE INDENT import sys NEW_LINE count = 0 NEW_LINE for i in range ( 0 , a + 1 ) : NEW_LINE INDENT if a == ( i + ( a ^ i ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def next ( arr , target ) : NEW_LINE INDENT start , end = 0 , len ( arr ) - 1 NEW_LINE ans = - 1 NEW_LINE while start <= end : NEW_LINE INDENT mid = ( start + end ) // 2 NEW_LINE if arr [ mid ] <= target : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = mid NEW_LINE end = mid - 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT word = [ " zero " , " one " , " two " , " three " , " four " , " five " , " six " , " seven " , " eight " , " nine " ] NEW_LINE digits = [ 0 ] * 10 NEW_LINE dc = 0 NEW_LINE while True : NEW_LINE INDENT digits [ dc ] = n % 10 NEW_LINE n = n // 10 NEW_LINE dc += 1 NEW_LINE DEDENT for i in range ( dc - 1 , - 1 , - 1 ) : NEW_LINE INDENT print ( word [ digits [ i ] ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE out = sys . stdout NEW_LINE parts = list ( f . strip ( ) . split ( ' ▁ ' ) ) NEW_LINE n = int ( parts [ 0 ] ) NEW_LINE k = int ( parts [ 1 ] ) NEW_LINE m = int ( parts [ 2 ] ) NEW_LINE a = [ ] NEW_LINE parts = list ( parts ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( int ( parts [ i ] ) ) NEW_LINE sum += a [ i ] NEW_LINE DEDENT a . sort ( ) NEW_LINE max = ( sum + min ( m , n * k ) ) / float ( n ) NEW_LINE for i in range ( 1 , min ( n , m + 1 ) ) : NEW_LINE INDENT sum -= a [ i - 1 ] NEW_LINE max = max ( max , ( sum + min ( m - i , ( n - i ) * k ) ) / float ( n - i ) ) NEW_LINE DEDENT out . write ( ' % .20f \n ' % max ) NEW_LINE f . close ( ) NEW_LINE out . close ( ) NEW_LINE DEDENT
def GFG ( a , b ) : NEW_LINE INDENT l = len ( a ) NEW_LINE min , max = 0 , 0 NEW_LINE for i in range ( l ) : NEW_LINE INDENT if a [ i ] == ' + ' or b [ i ] == ' + ' or a [ i ] != b [ i ] : NEW_LINE INDENT max += 1 NEW_LINE DEDENT if a [ i ] != ' + ' and b [ i ] != ' + ' and a [ i ] != b [ i ] : NEW_LINE INDENT min += 1 NEW_LINE DEDENT DEDENT print ( min + str ( max ) , end = ' ' ) NEW_LINE DEDENT
def GFG ( n , s , k ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE dp [ s - 1 ] = 1 NEW_LINE for i in range ( s , n ) : NEW_LINE INDENT idx = max ( s - 1 , i - k ) NEW_LINE for j in range ( idx , i ) : NEW_LINE INDENT dp [ i ] += dp [ j ] NEW_LINE DEDENT DEDENT return dp [ n - 1 ] NEW_LINE DEDENT
def count_even_odd ( n ) : NEW_LINE INDENT import sys NEW_LINE even_count = 0 NEW_LINE odd_count = 0 NEW_LINE while n > 0 : NEW_LINE INDENT rem = n % 10 NEW_LINE if rem % 2 == 0 : NEW_LINE INDENT even_count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd_count += 1 NEW_LINE DEDENT n = n // 10 NEW_LINE DEDENT print ( " Even ▁ count ▁ : ▁ % d " % even_count ) NEW_LINE print ( " Odd ▁ count ▁ : ▁ % d " % odd_count ) NEW_LINE if even_count % 2 == 0 and odd_count % 2 != 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE sys . stdin . write ( ' \n ' ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import math NEW_LINE class GFG ( math . Vector ) : NEW_LINE INDENT def __init__ ( self , x , y ) : NEW_LINE INDENT self . x , self . y = x , y NEW_LINE DEDENT def findmin ( self , n ) : NEW_LINE INDENT a , b , c , d = 0 , 0 , 0 , 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if self . x <= 0 : NEW_LINE INDENT a += 1 NEW_LINE DEDENT elif self . x >= 0 : NEW_LINE INDENT b += 1 NEW_LINE DEDENT if self . y >= 0 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif self . y <= 0 : NEW_LINE INDENT d += 1 NEW_LINE DEDENT DEDENT return min ( min ( a , b ) , min ( c , d ) ) NEW_LINE DEDENT DEDENT return math . minimum ( math . minimum ( a , b ) , math . minimum ( c , d ) ) NEW_LINE DEDENT
def max_gcd ( N , P ) : NEW_LINE INDENT ans = 1 NEW_LINE prime_factors = { } NEW_LINE for i in range ( 2 , 2 * P + 1 ) : NEW_LINE INDENT while P % i == 0 : NEW_LINE INDENT if prime_factors [ i ] is None : NEW_LINE INDENT prime_factors [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT prime_factors [ i ] = ( prime_factors [ i ] + 1 ) NEW_LINE DEDENT P //= i NEW_LINE DEDENT DEDENT if P != 1 : NEW_LINE INDENT if prime_factors [ P ] is None : NEW_LINE INDENT prime_factors [ P ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT prime_factors [ P ] = ( prime_factors [ P ] + 1 ) NEW_LINE DEDENT DEDENT st = prime_factors . items ( ) NEW_LINE for me , n in st : NEW_LINE INDENT ans *= pow ( me , n / N ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE k = int ( sys . stdin . readline ( ) ) NEW_LINE mask = [ 0 ] * k NEW_LINE for i in range ( k ) : NEW_LINE INDENT mask [ i ] = sys . stdin . read ( ) NEW_LINE DEDENT for i in range ( pow ( 2 , k ) ) : NEW_LINE INDENT bit_list = [ 0 ] * n NEW_LINE temp = i NEW_LINE index = 0 NEW_LINE for j in range ( 0 , temp ) : NEW_LINE INDENT if temp % 2 == 1 : NEW_LINE INDENT bit_list [ mask [ j ] ] = 1 NEW_LINE index += pow ( 2 , mask [ j ] ) NEW_LINE DEDENT temp //= 2 NEW_LINE DEDENT print ( ' % d : ' % index , end = ' ▁ ' ) NEW_LINE for j in range ( k ) : NEW_LINE INDENT if bit_list [ mask [ j ] ] == 1 : NEW_LINE INDENT print ( ' ▁ % d ' % mask [ j ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT import sys NEW_LINE class PrimeFactorization ( int ) : NEW_LINE INDENT def __init__ ( self , count_of_pf , prime_factor ) : NEW_LINE INDENT self . count_of_pf = count_of_pf NEW_LINE self . prime_factor = prime_factor NEW_LINE DEDENT def generate_divisors ( self , cur_index , cur_divisor , arr ) : NEW_LINE INDENT if cur_index == len ( arr ) : NEW_LINE INDENT print ( cur_divisor , end = ' ▁ ' ) NEW_LINE return NEW_LINE DEDENT for i in range ( 0 , len ( arr [ cur_index ] ) + 1 ) : NEW_LINE INDENT generate_divisors ( self , cur_index + 1 , cur_divisor , arr ) NEW_LINE cur_divisor *= arr [ cur_index ] [ ' prime _ factor ' ] NEW_LINE DEDENT DEDENT def find_divisors ( n ) : NEW_LINE INDENT arr = [ ] NEW_LINE for i in range ( 2 , i * n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT count = 0 NEW_LINE while n % i == 0 : NEW_LINE INDENT n //= i NEW_LINE count += 1 NEW_LINE DEDENT arr . append ( ( count , i ) ) NEW_LINE DEDENT DEDENT if n > 1 : NEW_LINE INDENT arr . append ( ( 1 , n ) ) NEW_LINE DEDENT self . cur_index , self . cur_divisor = 0 , 1 NEW_LINE generate_divisors ( self , cur_index , cur_divisor , arr ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 6 NEW_LINE find_divisors ( n ) NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT subprocess . check_call ( [ ' bash ' , ' - c ' , ' - s ' , ' - sexcept :
def largestPalinSub ( s ) : NEW_LINE INDENT res = " " NEW_LINE mx = s [ 0 ] NEW_LINE for c in s [ 1 : ] : NEW_LINE INDENT mx = chr ( max ( ord ( c ) , ord ( c ) ) ) NEW_LINE DEDENT for c in s : NEW_LINE INDENT if c == mx : NEW_LINE INDENT res += c NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if n > 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT s = ' ' . join ( s ) NEW_LINE count = 0 NEW_LINE t = 0 NEW_LINE u = ' ' NEW_LINE for k in range ( n ) : NEW_LINE INDENT for i in range ( len ( s ) ) : NEW_LINE INDENT count = 1 NEW_LINE t = s [ i ] NEW_LINE while i < len ( s ) - 1 and s [ i + 1 ] == t : NEW_LINE INDENT i += 1 NEW_LINE count += 1 NEW_LINE DEDENT u += str ( count ) + chr ( t ) NEW_LINE DEDENT s = u + s NEW_LINE del u NEW_LINE DEDENT print ( s ) NEW_LINE DEDENT
def good_seq ( n ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import glob NEW_LINE import math NEW_LINE dp = [ 0 ] * 100001 NEW_LINE def factoriseopt ( n ) : NEW_LINE INDENT ans = [ ] NEW_LINE if n == 1 : NEW_LINE INDENT ans . append ( 1 ) NEW_LINE return ans NEW_LINE DEDENT for i in range ( 2 , n ** 2 + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT cnt = 0 NEW_LINE while n % i == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE n = n // i NEW_LINE DEDENT ans . append ( i ) NEW_LINE DEDENT DEDENT if n != 1 : NEW_LINE INDENT ans . append ( n ) NEW_LINE DEDENT return ans NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = int ( n ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( sc . randint ( 0 , n ) ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT anslist = factoriseopt ( arr [ i ] ) NEW_LINE best = 0 NEW_LINE for x in anslist : NEW_LINE INDENT best = max ( best , dp [ x ] ) NEW_LINE DEDENT for x in anslist : NEW_LINE INDENT dp [ x ] = best + 1 NEW_LINE DEDENT DEDENT maxsofar = 0 NEW_LINE for x in dp : NEW_LINE INDENT maxsofar = max ( maxsofar , x ) NEW_LINE DEDENT print ( maxsofar ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( A , D ) : NEW_LINE INDENT n = len ( A ) NEW_LINE D [ 0 ] = A [ 0 ] NEW_LINE D [ n ] = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT D [ i ] = A [ i ] - A [ i - 1 ] NEW_LINE DEDENT def update ( D , l , r , x ) : NEW_LINE INDENT D [ l ] += x NEW_LINE D [ r + 1 ] -= x NEW_LINE DEDENT def print_array ( A , D ) : NEW_LINE INDENT for i in range ( len ( A ) ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT A [ i ] = D [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT A [ i ] = D [ i ] + A [ i - 1 ] NEW_LINE DEDENT print ( A [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE return 0 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT A = [ 10 , 5 , 20 , 40 ] NEW_LINE n = len ( A ) NEW_LINE D = np . zeros ( n + 1 ) NEW_LINE initialize_diff_array ( A , D ) NEW_LINE update ( D , 0 , 1 , 10 ) NEW_LINE print_array ( A , D ) NEW_LINE update ( D , 1 , 3 , 20 ) NEW_LINE update ( D , 2 , 2 , 30 ) NEW_LINE print_array ( A , D ) NEW_LINE DEDENT return 1 NEW_LINE DEDENT
def find_max_guests ( arrl , exit , n ) : NEW_LINE INDENT arrl . sort ( ) NEW_LINE exit . sort ( ) NEW_LINE guests_in , max_guests , time = 1 , 1 , arrl [ 0 ] NEW_LINE i , j = 1 , 0 NEW_LINE while i < n and j < n : NEW_LINE INDENT if arrl [ i ] <= exit [ j ] : NEW_LINE INDENT guests_in += 1 NEW_LINE if guests_in > max_guests : NEW_LINE INDENT max_guests = guests_in NEW_LINE time = arrl [ i ] NEW_LINE DEDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT guests_in -= 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT print ( " Maximum ▁ Number ▁ of ▁ Guests ▁ = ▁ % d ▁ at ▁ time ▁ % d " % ( max_guests , time ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE sc = string . replace ( " # " , " " ) NEW_LINE for inp in sc : NEW_LINE INDENT if inp == " # END " : NEW_LINE INDENT return NEW_LINE DEDENT ans = " " NEW_LINE for i in range ( 1 , len ( inp ) ) : NEW_LINE INDENT lcs = lcs ( inp [ : i ] , inp [ i : len ( inp ) ] ) NEW_LINE if len ( lcs ) > len ( ans ) : NEW_LINE INDENT ans = lcs NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT def lcs ( s , t ) : NEW_LINE INDENT n = len ( s ) NEW_LINE m = len ( t ) NEW_LINE dp = np . zeros ( ( n + 1 , m + 1 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if s [ i ] == t [ j ] : NEW_LINE INDENT dp [ i + 1 ] [ j + 1 ] = dp [ i ] [ j ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i + 1 ] [ j + 1 ] = max ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] ) NEW_LINE DEDENT DEDENT DEDENT res = [ ] NEW_LINE while n > 0 and m > 0 : NEW_LINE INDENT if dp [ n ] [ m ] == dp [ n - 1 ] [ m ] : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT elif dp [ n ] [ m ] == dp [ n ] [ m - 1 ] : NEW_LINE INDENT m -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT res . append ( s [ n - 1 ] ) NEW_LINE n -= 1 NEW_LINE m -= 1 NEW_LINE DEDENT DEDENT return ' ' . join ( res ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT return ' ' . join ( res ) NEW_LINE DEDENT DEDENT
def GFG ( n , r ) : NEW_LINE INDENT final_denominator = 1 NEW_LINE mx = max ( r , n - r ) NEW_LINE for i in range ( mx + 1 , n + 1 ) : NEW_LINE INDENT denominator = int ( math . pow ( i , i ) ) NEW_LINE numerator = int ( math . pow ( i - mx , i - mx ) ) NEW_LINE final_denominator = ( final_denominator * denominator ) / numerator NEW_LINE DEDENT return final_denominator NEW_LINE DEDENT
def is_perfect_square ( x ) : NEW_LINE INDENT import math NEW_LINE sr = int ( math . sqrt ( x ) ) NEW_LINE if sr ** 2 == x : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE N = int ( 1e5 + 2 ) NEW_LINE d = { } NEW_LINE nums = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT tmp = int ( sys . stdin . read ( ) ) NEW_LINE nums . append ( tmp ) NEW_LINE d [ tmp ] = i NEW_LINE DEDENT bin = 0 NEW_LINE diff = 0 NEW_LINE while not nums : NEW_LINE INDENT num = nums . pop ( ) NEW_LINE idx = d [ num ] NEW_LINE if ( bin % 2 ) != ( idx % 2 ) : NEW_LINE INDENT diff += 1 NEW_LINE DEDENT bin += 1 NEW_LINE bin %= 2 NEW_LINE DEDENT ans = ( diff // 2 ) NEW_LINE print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT with open ( ' input . txt ' , ' w ' ) as inp : NEW_LINE INDENT n = len ( inp ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT value = inp . read ( ) NEW_LINE a . append ( value ) NEW_LINE DEDENT a = sorted ( a ) NEW_LINE found = False NEW_LINE for i in range ( len ( a ) ) : NEW_LINE INDENT if i + 1 < len ( a ) and i + 2 < len ( a ) : NEW_LINE INDENT if a [ i ] + 1 == a [ i + 1 ] and a [ i + 1 ] + 1 == a [ i + 2 ] : NEW_LINE INDENT found = True NEW_LINE DEDENT DEDENT DEDENT print ( ' YES ' if found else ' NO ' ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( b ) : NEW_LINE INDENT import sys NEW_LINE import gc NEW_LINE class Main ( list ) : NEW_LINE INDENT def check ( b ) : NEW_LINE INDENT if b [ 0 ] != 1 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 1 , len ( b ) ) : NEW_LINE INDENT if b [ i - 1 ] != b [ i ] - 1 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def gap ( b ) : NEW_LINE INDENT for i in b : NEW_LINE INDENT if b [ i ] <= 0 : NEW_LINE INDENT b . pop ( i ) NEW_LINE i -= 1 NEW_LINE continue NEW_LINE DEDENT DEDENT b . pop ( 0 ) NEW_LINE DEDENT def remove_gap ( b ) : NEW_LINE INDENT for i in b : NEW_LINE INDENT if b [ i ] <= 0 : NEW_LINE INDENT b . pop ( i ) NEW_LINE i -= 1 NEW_LINE continue NEW_LINE DEDENT DEDENT b . pop ( 0 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT sys . stdin . close ( ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stdout . flush ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def is_divisible ( S ) : NEW_LINE INDENT import re NEW_LINE n = len ( S ) NEW_LINE if S [ n - 1 ] != '5' and S [ n - 1 ] != '0' : NEW_LINE INDENT return False NEW_LINE DEDENT sum = 0 NEW_LINE for c in S : NEW_LINE INDENT sum += ord ( c ) NEW_LINE DEDENT if sum % 3 == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def p142 ( ) : NEW_LINE INDENT print ( eval ( ' p142 ( ) ' ) ) NEW_LINE global sum_limit NEW_LINE sum_limit = 10 NEW_LINE while True : NEW_LINE INDENT is_square = [ True ] * sum_limit NEW_LINE for i in range ( 0 , sum_limit ) : NEW_LINE INDENT is_square [ i ] = True NEW_LINE DEDENT sum = find_sum ( sum_limit ) NEW_LINE if sum != - 1 : NEW_LINE INDENT sum = sum_limit NEW_LINE break NEW_LINE DEDENT sum_limit *= 10 NEW_LINE DEDENT while True : NEW_LINE INDENT sum = find_sum ( sum_limit ) NEW_LINE if sum == - 1 : NEW_LINE INDENT return str ( sum_limit ) NEW_LINE DEDENT sum_limit = sum NEW_LINE DEDENT def find_sum ( limit ) : NEW_LINE INDENT for a in range ( 1 , limit ) : NEW_LINE INDENT for b in range ( a - 1 , 0 , - 1 ) : NEW_LINE INDENT if ( a + b ) % 2 : NEW_LINE INDENT continue NEW_LINE DEDENT x = ( a * a + b * b ) // 2 NEW_LINE y = ( a * a - b * b ) // 2 NEW_LINE if x + y + 1 >= limit : NEW_LINE INDENT continue NEW_LINE DEDENT zlimit = min ( y , limit - x - y ) NEW_LINE for c in range ( math . sqrt ( y ) + 1 , math . sqrt ( c ) - y , zlimit ) : NEW_LINE INDENT z = c * c - y NEW_LINE if is_square [ x + z ] and is_square [ x - z ] and is_square [ y - z ] : NEW_LINE INDENT return x + y + z NEW_LINE DEDENT DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT DEDENT
def GFG ( c ) : NEW_LINE INDENT return ( c in " ▁ a ▁ " or c in " ▁ e ▁ " or c in " ▁ i ▁ " or c in " ▁ o ▁ " or c in " ▁ u ▁ " ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE for N , M , S , T in enumerate ( open ( ' test . txt ' ) ) : NEW_LINE INDENT gcdNM = gcd ( N , M ) NEW_LINE lcmNM = ( int ( N ) / gcd ( N , M ) ) * M NEW_LINE stepS = M // gcdNM NEW_LINE stepT = N // gcdNM NEW_LINE curS = 0 NEW_LINE curT = 0 NEW_LINE isExisted = True NEW_LINE while curS < len ( S ) and curT < len ( T ) : NEW_LINE INDENT idxXS = curS * stepS + 1 NEW_LINE idxXT = curT * stepT + 1 NEW_LINE if idxXS == idxXT : NEW_LINE INDENT if S [ curS ] != T [ curT ] : NEW_LINE INDENT isExisted = False NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT curS += 1 NEW_LINE curT += 1 NEW_LINE DEDENT DEDENT elif idxXS < idxXT : NEW_LINE INDENT curS += 1 NEW_LINE DEDENT elif idxXT < idxXS : NEW_LINE INDENT curT += 1 NEW_LINE DEDENT DEDENT if isExisted : NEW_LINE INDENT print ( lcmNM ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . readline ( ) ) NEW_LINE M = int ( sys . stdin . readline ( ) ) NEW_LINE black = np . zeros ( ( N + 2 , N + 2 ) ) NEW_LINE for m in range ( 1 , M + 1 ) : NEW_LINE INDENT x = int ( sys . stdin . readline ( ) ) NEW_LINE y = int ( sys . stdin . readline ( ) ) NEW_LINE for xx in range ( x - 1 , x + 1 ) : NEW_LINE INDENT for yy in range ( y - 1 , y + 1 ) : NEW_LINE INDENT if 1 == black [ xx ] [ yy ] == 9 : NEW_LINE INDENT print ( m ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( ' - 1' ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT dx = { 1 , 1 , 0 , - 1 , } NEW_LINE dy = { 0 , 1 , 1 , 1 } NEW_LINE f = open ( ' test . txt ' , ' r ' ) NEW_LINE for _ in range ( len ( f ) ) : NEW_LINE INDENT n = len ( f ) NEW_LINE if n == 0 : NEW_LINE INDENT return NEW_LINE DEDENT a = np . zeros ( ( n , n ) ) NEW_LINE ans = 0 NEW_LINE for i , s in enumerate ( f ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT a [ i ] [ j ] = int ( s [ j ] ) - ord ( '0' ) NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT for k in range ( 4 ) : NEW_LINE INDENT cnt = 0 NEW_LINE sy = i NEW_LINE sx = j NEW_LINE while 0 <= sx < n and sy < n and a [ sy ] [ sx ] == 1 : NEW_LINE INDENT cnt += 1 NEW_LINE sx += dx [ k ] NEW_LINE sy += dy [ k ] NEW_LINE DEDENT ans = max ( ans , cnt ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT DEDENT DEDENT
def _fourth_power_sum ( n ) : NEW_LINE INDENT import math NEW_LINE import random NEW_LINE import math NEW_LINE return ( ( 6 * math . pi * math . pi * math . pi * math . pi ) + ( 15 * math . pi * math . pi * math . pi ) + ( 10 * math . pi * math . pi * math . pi ) - n ) / 30 NEW_LINE DEDENT
def max_length_sub ( arr ) : NEW_LINE INDENT max_val = 0 NEW_LINE start = 0 NEW_LINE d = { } NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT temp = 0 NEW_LINE if arr [ i ] - 1 in d : NEW_LINE INDENT temp = d [ arr [ i ] - 1 ] NEW_LINE DEDENT if arr [ i ] in d : NEW_LINE INDENT temp = max ( temp , d [ arr [ i ] ] ) NEW_LINE DEDENT if arr [ i ] + 1 in d : NEW_LINE INDENT temp = max ( temp , d [ arr [ i ] + 1 ] ) NEW_LINE DEDENT temp += 1 NEW_LINE if temp > max_val : NEW_LINE INDENT max_val = temp NEW_LINE DEDENT d [ arr [ i ] ] = temp NEW_LINE DEDENT return max_val NEW_LINE DEDENT
def rearrange ( arr ) : NEW_LINE INDENT import sys NEW_LINE if not arr or len ( arr ) % 2 == 1 : NEW_LINE INDENT return NEW_LINE DEDENT curr_idx = ( len ( arr ) - 1 ) // 2 NEW_LINE while curr_idx > 0 : NEW_LINE INDENT count , swap_idx = curr_idx , curr_idx NEW_LINE while count > 0 : NEW_LINE INDENT temp = arr [ swap_idx + 1 ] NEW_LINE arr [ swap_idx + 1 ] = arr [ swap_idx ] NEW_LINE arr [ swap_idx ] = temp NEW_LINE swap_idx += 1 NEW_LINE DEDENT curr_idx -= 1 NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE INF = 1 << 58 NEW_LINE while True : NEW_LINE INDENT n = random . randint ( 1 , 10000 ) NEW_LINE k = random . randint ( 1 , 10000 ) NEW_LINE if ( n | k ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT fare = [ [ INF ] * n for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT fare [ i ] [ i ] = 0 NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT init = random . randint ( 1 , n ) NEW_LINE if init == 1 : NEW_LINE INDENT c = random . randint ( 1 , n - 1 ) NEW_LINE d = random . randint ( 1 , n - 1 ) NEW_LINE e = random . randint ( 1 , n - 1 ) NEW_LINE if e < fare [ c ] [ d ] : NEW_LINE INDENT fare [ c ] [ d ] = fare [ d ] [ c ] = e NEW_LINE for p in range ( n ) : NEW_LINE INDENT for q in range ( n ) : NEW_LINE INDENT fare [ p ] [ q ] = min ( fare [ p ] [ q ] , fare [ p ] [ c ] + fare [ c ] [ d ] + fare [ d ] [ q ] ) NEW_LINE fare [ p ] [ q ] = min ( fare [ p ] [ q ] , fare [ p ] [ d ] + fare [ c ] [ d ] + fare [ c ] [ q ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT a = random . randint ( 1 , n - 1 ) NEW_LINE b = random . randint ( 1 , n - 1 ) NEW_LINE print ( fare [ a ] [ b ] if a != INF else - 1 ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def count_character_type ( data ) : NEW_LINE INDENT import string NEW_LINE vowels , consonant , special_char , digit = 0 , 0 , 0 , 0 NEW_LINE for ch in data : NEW_LINE INDENT if ( ch >= ' a ' and ch <= ' z ' ) or ( ch >= ' A ' and ch <= ' Z ' ) : NEW_LINE INDENT ch = ch . lower ( ) NEW_LINE if ch in [ ' a ' , ' e ' , ' i ' , ' o ' , ' u ' ] : NEW_LINE INDENT vowels += 1 NEW_LINE DEDENT else : NEW_LINE INDENT consonant += 1 NEW_LINE DEDENT DEDENT elif ch >= '0' and ch <= '9' : NEW_LINE INDENT digit += 1 NEW_LINE DEDENT else : NEW_LINE INDENT special_char += 1 NEW_LINE DEDENT DEDENT print ( ' Vowels : ▁ % d ' % vowels ) NEW_LINE print ( ' Consonant : ▁ % d ' % consonant ) NEW_LINE print ( ' Digit : ▁ % d ' % digit ) NEW_LINE print ( ' Special ▁ Character : ▁ % d ' % special_char ) NEW_LINE DEDENT
def GFG ( l , b , h ) : NEW_LINE INDENT percent_inc = ( 1 + ( l / 100 ) ) * ( 1 + ( b / 100 ) ) * ( 1 + ( h / 100 ) ) NEW_LINE percent_inc -= 1 NEW_LINE percent_inc *= 100 NEW_LINE return percent_inc NEW_LINE DEDENT
def max_total_rectangle_area ( a , n ) : NEW_LINE INDENT a . sort ( ) NEW_LINE sum = 0 NEW_LINE flag = 0 NEW_LINE len_ = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i + 1 ] == 1 ) and not flag : NEW_LINE INDENT flag = 1 NEW_LINE len_ = a [ i + 1 ] NEW_LINE i += 1 NEW_LINE DEDENT elif ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i + 1 ] == 1 ) and ( flag ) : NEW_LINE INDENT sum = sum + a [ i + 1 ] * len_ NEW_LINE flag = 0 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def GFG ( data ) : NEW_LINE INDENT class Node ( object ) : NEW_LINE INDENT data = None NEW_LINE next , prev = None , None NEW_LINE DEDENT def get_node ( data ) : NEW_LINE INDENT new_node = Node ( ) NEW_LINE new_node . data = data NEW_LINE return new_node NEW_LINE DEDENT def insert_end ( head , new_node ) : NEW_LINE INDENT if not head : NEW_LINE INDENT new_node . next = new_node . prev = new_node NEW_LINE head = new_node NEW_LINE return head NEW_LINE DEDENT last = ( head . prev , head ) NEW_LINE new_node . next = head NEW_LINE ( head . prev , new_node ) NEW_LINE new_node . prev = last NEW_LINE last . next = new_node NEW_LINE return head NEW_LINE DEDENT def reverse ( head ) : NEW_LINE INDENT if not head : NEW_LINE INDENT return None NEW_LINE DEDENT new_head = None NEW_LINE last = head . prev NEW_LINE curr , prev = last , prev NEW_LINE while curr . prev != last : NEW_LINE INDENT prev = curr . prev NEW_LINE new_head = insert_end ( new_head , curr ) NEW_LINE curr = prev NEW_LINE DEDENT new_head = insert_end ( new_head , curr ) NEW_LINE return new_head NEW_LINE DEDENT def display ( head ) : NEW_LINE INDENT if not head : NEW_LINE INDENT return None NEW_LINE DEDENT temp = head NEW_LINE print ( ' Forward ▁ direction : ▁ ' , end = ' ▁ ' ) NEW_LINE while temp . next != head : NEW_LINE INDENT print ( temp . data , end = ' ▁ ' ) NEW_LINE temp = temp . next NEW_LINE DEDENT print ( temp . data , end = ' ▁ ' ) NEW_LINE last = head . prev NEW_LINE temp = last NEW_LINE print ( ' \n Backward ▁ direction : ▁ ' , end = ' ▁ ' ) NEW_LINE while temp . prev != last : NEW_LINE INDENT print ( temp . data , end = ' ▁ ' ) NEW_LINE temp = temp . prev NEW_LINE DEDENT print ( temp . data , end = ' ▁ ' ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT head = None NEW_LINE head = insert_end ( head , get_node ( 1 ) ) NEW_LINE head = insert_end ( head , get_node ( 2 ) ) NEW_LINE head = insert_end ( head , get_node ( 3 ) ) NEW_LINE head = insert_end ( head , get_node ( 4 ) ) NEW_LINE head = insert_end ( head , get_node ( 5 ) ) NEW_LINE print ( ' Current ▁ list : \n ' , end = ' ▁ ' ) NEW_LINE display ( head ) NEW_LINE head = reverse ( head ) NEW_LINE print ( ' \n \n Reversed ▁ list : \n ' , end = ' ▁ ' ) NEW_LINE display ( head ) NEW_LINE DEDENT return Node ( ) NEW_LINE DEDENT
def last_five_digits ( n ) : NEW_LINE INDENT n = ( n // 10000 ) * 10000 + ( ( n // 100 ) % 10 ) * 1000 + ( n % 10 ) * 100 + ( ( n // 10 ) % 10 ) * 10 + ( n // 1000 ) % 10 NEW_LINE ans = 1 NEW_LINE for i in range ( 5 ) : NEW_LINE INDENT ans *= n NEW_LINE ans %= 100000 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def p080 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . pow ( 100 * 2 , 2 ) ) NEW_LINE def run ( ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , 100 + 1 ) : NEW_LINE INDENT x = math . pow ( i , 100 * 2 ) NEW_LINE x = x * math . pow ( 100 * 2 , 2 ) NEW_LINE y = math . sqrt ( x ) NEW_LINE if not y * y == x : NEW_LINE INDENT s = y . split ( ' ▁ ' ) [ 0 ] NEW_LINE for c in s : NEW_LINE INDENT sum += ord ( c ) - ord ( '0' ) NEW_LINE DEDENT DEDENT DEDENT return str ( sum ) NEW_LINE DEDENT def sqrt ( x ) : NEW_LINE INDENT i = 0 NEW_LINE while math . pow ( i * 2 , 2 ) <= x : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT y = 0 NEW_LINE for i in range ( 0 , - 1 , - 1 ) : NEW_LINE INDENT global delta NEW_LINE delta = None NEW_LINE for j in range ( 9 , - 1 , - 1 ) : NEW_LINE INDENT temp = math . pow ( j , 2 ) * math . pow ( i , 2 ) NEW_LINE delta = y + temp * temp NEW_LINE if delta <= x : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if j < 0 : NEW_LINE INDENT raise AssertionError ( ) NEW_LINE DEDENT x = x - delta NEW_LINE y = y + math . pow ( j , 2 ) * math . pow ( i , 2 ) NEW_LINE DEDENT return y NEW_LINE DEDENT
def evaluate ( n ) : NEW_LINE INDENT import sys NEW_LINE if n == 1 or n == 2 : NEW_LINE INDENT print ( " No ▁ Pythagoras ▁ " " Triplet ▁ exists " ) NEW_LINE DEDENT elif n % 2 == 0 : NEW_LINE INDENT var = 1 * n * n // 4 NEW_LINE print ( " Pythagoras ▁ Triplets ▁ " " exist ▁ i . e . ▁ " , end = " ▁ " ) NEW_LINE print ( n , end = " ▁ " ) NEW_LINE print ( var - 1 , end = " ▁ " ) NEW_LINE print ( var + 1 , end = " ▁ " ) NEW_LINE DEDENT elif n % 2 != 0 : NEW_LINE INDENT var = 1 * n * n + 1 NEW_LINE print ( " Pythagoras ▁ Triplets ▁ " " exist ▁ i . e . ▁ " , end = " ▁ " ) NEW_LINE print ( n , end = " ▁ " ) NEW_LINE print ( var / 2 - 1 , end = " ▁ " ) NEW_LINE print ( var / 2 , end = " ▁ " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . read ( ) ) NEW_LINE b = int ( sys . stdin . read ( ) ) NEW_LINE x = int ( sys . stdin . read ( ) ) NEW_LINE count = 0 NEW_LINE count += b // x + 1 NEW_LINE if a != 0 : NEW_LINE INDENT count -= ( a - 1 ) // x + 1 NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def gcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return math . gcd ( b % a , a ) NEW_LINE DEDENT def find_number ( arr , n ) : NEW_LINE INDENT ans = arr [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans = math . gcd ( ans , arr [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == ans : NEW_LINE INDENT return ans NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 2 , 2 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( find_number ( arr , n ) ) NEW_LINE DEDENT
def count_kdiv_pairs ( A , n , K ) : NEW_LINE INDENT freq = np . zeros ( K ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT rem = A [ i ] % K NEW_LINE if rem != 0 : NEW_LINE INDENT ans += freq [ K - rem ] NEW_LINE DEDENT else : NEW_LINE INDENT ans += freq [ 0 ] NEW_LINE DEDENT freq [ rem ] += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = sys . stdin . readline ( ) NEW_LINE b = sys . stdin . readline ( ) NEW_LINE c = sys . stdin . readline ( ) NEW_LINE print ( a , b , c ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' Error : ▁ % s ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT nums = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT nums . append ( i ) NEW_LINE DEDENT l , r = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if l == 0 and nums [ n - i - 1 ] != nums [ 0 ] : NEW_LINE INDENT l = n - i - 1 NEW_LINE DEDENT if r == 0 and nums [ i ] != nums [ n - 1 ] : NEW_LINE INDENT r = n - i - 1 NEW_LINE DEDENT DEDENT print ( max ( l , r ) ) NEW_LINE DEDENT
def count_subarrays ( arr , n ) : NEW_LINE INDENT difference = 0 NEW_LINE ans = 0 NEW_LINE hash_positive = [ 0 ] * ( n + 1 ) NEW_LINE hash_negative = [ 0 ] * ( n + 1 ) NEW_LINE hash_positive [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] & 1 == 1 : NEW_LINE INDENT difference += 1 NEW_LINE DEDENT else : NEW_LINE INDENT difference -= 1 NEW_LINE DEDENT if difference < 0 : NEW_LINE INDENT ans += hash_negative [ - difference ] NEW_LINE hash_negative [ - difference ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += hash_positive [ difference ] NEW_LINE hash_positive [ difference ] += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def GFG ( data , n ) : NEW_LINE INDENT import string NEW_LINE SIZE = 26 NEW_LINE freq = [ 0 ] * SIZE NEW_LINE for c in data [ n : ] : NEW_LINE INDENT freq [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for c in data [ n : ] : NEW_LINE INDENT if ord ( c ) % 2 == 0 : NEW_LINE INDENT print ( c , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( data , n ) : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE for c in data : NEW_LINE INDENT freq [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for c in data : NEW_LINE INDENT if ord ( c ) % 2 == 1 : NEW_LINE INDENT print ( c , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def count_greater ( arr , n , k ) : NEW_LINE INDENT l = 0 NEW_LINE r = n - 1 NEW_LINE left_greater = n NEW_LINE while l <= r : NEW_LINE INDENT m = l + ( r - l ) // 2 NEW_LINE if arr [ m ] > k : NEW_LINE INDENT left_greater = m NEW_LINE r = m - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT DEDENT return ( n - left_greater ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import math NEW_LINE import numpy . inf NEW_LINE import math NEW_LINE import numpy . sup NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random NEW_LINE import numpy . random . seed as random NEW_LINE import numpy . random NEW_LINE import numpy . random . seed as seed NEW_LINE seed = seed or random . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random . randint ( 0 , np . random ( 0 , np . randint ( 0 , np . random . randint ( 0 , np . random ( 0 , np . abs ( np . abs ( np . abs ( np . abs ( np . abs ( np . abs ( np . abs ( np . abs ( np ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( abs ( ( abs
def find_andB ( N ) : NEW_LINE INDENT val = N * N - 4.0 * N NEW_LINE if val < 0 : NEW_LINE INDENT print ( " NO " ) NEW_LINE return NEW_LINE DEDENT a = ( N + math . sqrt ( val ) ) / 2.0 NEW_LINE b = ( N - math . sqrt ( val ) ) / 2.0 NEW_LINE print ( " a ▁ = ▁ % f " % a ) NEW_LINE print ( " b ▁ = ▁ % f " % b ) NEW_LINE DEDENT
def submit_ ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE t = sys . maxsize NEW_LINE while t != 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE x , y = 0 , 0 NEW_LINE temp1 , temp2 = math . inf , math . inf NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = math . floor ( x ) NEW_LINE y = math . floor ( y ) NEW_LINE temp1 = max ( temp1 , x ) NEW_LINE temp2 = min ( temp2 , y ) NEW_LINE DEDENT print ( max ( 0 , ( temp1 - temp2 ) ) ) NEW_LINE t -= 1 NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE data = set ( ) NEW_LINE n , m = len ( sys . stdin ) , len ( sys . stdin ) NEW_LINE for x in sys . stdin : NEW_LINE INDENT if ' X ' in x : NEW_LINE INDENT data . add ( x ) NEW_LINE DEDENT DEDENT if len ( data ) == 1 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE MOD = 1000000007 NEW_LINE with open ( ' . . / . . / . . / . . / ' ) as sc : NEW_LINE INDENT while True : NEW_LINE INDENT aa = sc . readline ( ) . strip ( ) NEW_LINE if aa [ 0 ] == '0' : NEW_LINE INDENT break NEW_LINE DEDENT bb = sc . readline ( ) . strip ( ) NEW_LINE cc = sc . readline ( ) . strip ( ) NEW_LINE n = len ( aa ) NEW_LINE dp = np . zeros ( ( n + 1 , 2 ) ) NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT da = - 1 if aa [ n - i ] == ' ? ' else aa [ n - i ] - '0' NEW_LINE db = - 1 if bb [ n - i ] == ' ? ' else bb [ n - i ] - '0' NEW_LINE dc = - 1 if cc [ n - i ] == ' ? ' else cc [ n - i ] - '0' NEW_LINE for j in range ( 2 ) : NEW_LINE INDENT for carry in range ( 2 ) : NEW_LINE INDENT patterns = 0 NEW_LINE for a in range ( 10 ) : NEW_LINE INDENT if da != - 1 and da != a : NEW_LINE INDENT continue NEW_LINE DEDENT for b in range ( 10 ) : NEW_LINE INDENT if db != - 1 and db != b : NEW_LINE INDENT continue NEW_LINE DEDENT c = a + b + carry NEW_LINE if ( j == 0 and c >= 10 ) or ( j == 1 and c < 10 ) : NEW_LINE INDENT continue NEW_LINE DEDENT if i == n : NEW_LINE INDENT if a * b * c == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT if dc == - 1 or dc == c % 10 : NEW_LINE INDENT patterns += 1 NEW_LINE DEDENT DEDENT DEDENT dp [ i ] [ j ] += dp [ i - 1 ] [ carry ] * patterns % MOD NEW_LINE dp [ i ] [ j ] %= MOD NEW_LINE DEDENT DEDENT DEDENT print ( dp [ n ] [ 0 ] ) NEW_LINE DEDENT DEDENT DEDENT
def multiply ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT a = sys . maxsize NEW_LINE two = 0 NEW_LINE three = 0 NEW_LINE while a % 2 == 0 : NEW_LINE INDENT a = a // 2 NEW_LINE two += 1 NEW_LINE DEDENT while a % 3 == 0 : NEW_LINE INDENT a = a // 3 NEW_LINE three += 1 NEW_LINE DEDENT if a == 1 : NEW_LINE INDENT if three >= two : NEW_LINE INDENT temp = two NEW_LINE three -= two NEW_LINE temp += three * 2 NEW_LINE print ( temp ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' - 1' ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( ' - 1' ) NEW_LINE DEDENT DEDENT DEDENT
def min_increment_for_unique ( A ) : NEW_LINE INDENT import sys NEW_LINE mpp = { } NEW_LINE for i in A : NEW_LINE INDENT if i in mpp : NEW_LINE INDENT mpp [ i ] = mpp [ i ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mpp [ i ] = 1 NEW_LINE DEDENT DEDENT taken = [ ] NEW_LINE ans = 0 NEW_LINE for x in range ( 100000 ) : NEW_LINE INDENT if x in mpp and mpp [ x ] >= 2 : NEW_LINE INDENT taken . append ( x * ( mpp [ x ] - 1 ) ) NEW_LINE DEDENT elif taken and ( ( x in mpp and mpp [ x ] == 0 ) or not mpp . has_key ( x ) ) : NEW_LINE INDENT ans += x - taken [ - 1 ] NEW_LINE taken . pop ( ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE MOD = 1000003 NEW_LINE f = open ( sys . stdin , ' r ' ) NEW_LINE f . write ( ' \n ' ) NEW_LINE n = int ( f . readline ( ) ) NEW_LINE ans = 1 if n == 0 else math . pow ( 3 , n - 1 , MOD ) NEW_LINE f . write ( ans ) NEW_LINE f . close ( ) NEW_LINE os . chmod ( sys . stdout , 0 ) NEW_LINE DEDENT
def GFG ( s , n ) : NEW_LINE INDENT global dp NEW_LINE dp = np . zeros ( ( n + 1 , 13 ) ) NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( 10 ) : NEW_LINE INDENT nxt = ord ( s [ i ] ) - ord ( '0' ) NEW_LINE if s [ i ] == ' ? ' : NEW_LINE INDENT nxt = j NEW_LINE DEDENT for k in range ( 13 ) : NEW_LINE INDENT rem = ( 10 * k + nxt ) % 13 NEW_LINE dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] NEW_LINE dp [ i + 1 ] [ rem ] %= MOD NEW_LINE DEDENT if s [ i ] != ' ? ' : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return int ( dp [ n ] [ 5 ] ) NEW_LINE DEDENT
def count_nums ( a , b , c , d ) : NEW_LINE INDENT x = b // c - ( a - 1 ) // c NEW_LINE y = b // d - ( a - 1 ) // d NEW_LINE k = ( c * d ) // gcd ( c , d ) NEW_LINE z = b // k - ( a - 1 ) // k NEW_LINE return b - a + 1 - x - y + z NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE math = math NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT s = " " NEW_LINE c = 1 NEW_LINE for i in range ( 1 ) : NEW_LINE INDENT if c < 10 : NEW_LINE INDENT s += str ( c ) NEW_LINE DEDENT else : NEW_LINE INDENT s1 = " " NEW_LINE dup = c NEW_LINE while dup > 0 : NEW_LINE INDENT s1 += str ( dup % 10 ) NEW_LINE dup //= 10 NEW_LINE DEDENT temp = list ( s1 ) NEW_LINE temp = temp . reverse ( ) NEW_LINE s += temp NEW_LINE DEDENT c += 1 NEW_LINE if len ( s ) >= n : NEW_LINE INDENT return s [ n - 1 ] NEW_LINE DEDENT DEDENT return " " . join ( s ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT tosi = [ ] NEW_LINE M = [ ] NEW_LINE D = [ ] NEW_LINE i = 0 NEW_LINE k = 0 NEW_LINE c = 0 NEW_LINE for k in range ( n ) : NEW_LINE INDENT total = 0 NEW_LINE day = 0 NEW_LINE tosi . append ( int ( n ) ) NEW_LINE M . append ( int ( n ) ) NEW_LINE D . append ( int ( n ) ) NEW_LINE for i in range ( tosi [ k ] + 1 , 1000 + 1 ) : NEW_LINE INDENT if i % 3 == 0 : NEW_LINE INDENT total += 200 NEW_LINE DEDENT else : NEW_LINE INDENT total += 195 NEW_LINE DEDENT DEDENT if tosi [ k ] % 3 == 0 : NEW_LINE INDENT tuki = ( M [ k ] - 1 ) * 20 NEW_LINE day = tuki + D [ k ] - 6 NEW_LINE DEDENT else : NEW_LINE INDENT if ( M [ k ] - 1 ) % 2 == 0 : NEW_LINE INDENT day = ( ( M [ k ] - 1 ) / 2 ) * 20 + ( ( M [ k ] - 1 ) / 2 ) * 19 + D [ k ] - 1 NEW_LINE DEDENT else : NEW_LINE INDENT day = ( ( M [ k ] ) / 2 ) * 20 + ( ( M [ k ] - 1 ) / 2 ) * 19 + D [ k ] - 1 NEW_LINE DEDENT DEDENT total = total - day NEW_LINE print ( total ) NEW_LINE DEDENT DEDENT
def check_prime ( n ) : NEW_LINE INDENT import string NEW_LINE if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT if n <= 3 : NEW_LINE INDENT return True NEW_LINE DEDENT if n % 2 == 0 or n % 3 == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , n * 2 + 1 , 6 ) : NEW_LINE INDENT if n % i == 0 or n % ( i + 2 ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def count_prime_freent ( s ) : NEW_LINE INDENT count = 0 NEW_LINE mp = { } NEW_LINE for c in s : NEW_LINE INDENT if c in mp : NEW_LINE INDENT mp [ c ] = mp [ c ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ c ] = 1 NEW_LINE DEDENT DEDENT for c , count in mp . items ( ) : NEW_LINE INDENT if check_prime ( count ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT s = ' geeksforgeeks ' NEW_LINE print ( count_prime_freent ( s ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import sys NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE m = int ( sys . stdin . readline ( ) ) NEW_LINE req = [ ] NEW_LINE pre = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT req . append ( math . floor ( math . pi ) ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT pre . append ( math . floor ( math . pi ) ) NEW_LINE DEDENT i , j = n - 1 , m - 1 NEW_LINE ans = 0 NEW_LINE while i >= 0 and j >= 0 : NEW_LINE INDENT if req [ i ] > pre [ j ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT i -= 1 NEW_LINE DEDENT sys . stdout . write ( str ( ans ) + str ( i + 1 ) ) NEW_LINE DEDENT
def catalan_dp ( n ) : NEW_LINE INDENT catalan = [ 1 ] * ( n + 2 ) NEW_LINE catalan [ 0 ] = 1 NEW_LINE catalan [ 1 ] = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT catalan [ i ] = 0 NEW_LINE for j in range ( i ) : NEW_LINE INDENT catalan [ i ] += catalan [ j ] * catalan [ i - j - 1 ] NEW_LINE DEDENT DEDENT return catalan [ n ] NEW_LINE DEDENT
def p243 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . tan ( math . pi / 15499 ) ) NEW_LINE import math NEW_LINE TARGET = math . tan ( math . pi / 94744 ) NEW_LINE def run ( ) : NEW_LINE INDENT totient = 1 NEW_LINE denominator = 1 NEW_LINE for p in range ( 2 ) : NEW_LINE INDENT totient = totient * math . tan ( p - 1 ) NEW_LINE denominator = denominator * math . tan ( p ) NEW_LINE do NEW_LINE p += 1 NEW_LINE DEDENT if math . fabs ( totient - denominator ) < TARGET : NEW_LINE INDENT for numer , denom in zip ( math . fabs ( totient - 1 ) , math . fabs ( denominator - 1 ) ) : NEW_LINE INDENT if math . fabs ( numer - denom ) < TARGET : NEW_LINE INDENT return denom NEW_LINE DEDENT DEDENT DEDENT DEDENT return ' ' NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT i , j , x , y , k , dx , dy = 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 NEW_LINE flag = True NEW_LINE DEDENT except : NEW_LINE INDENT flag = False NEW_LINE DEDENT ch = string . ascii_lowercase NEW_LINE co = np . zeros ( ( 2 , 101 ) ) NEW_LINE s = s . replace ( ' ▁ ' , ' ' ) NEW_LINE ch = s . replace ( ' ▁ ' , ' ' ) NEW_LINE co [ 0 ] [ k ] = x NEW_LINE co [ 1 ] [ k ] = y NEW_LINE k += 1 NEW_LINE for c in ch : NEW_LINE INDENT if c == ' L ' : NEW_LINE INDENT x -= 1 NEW_LINE DEDENT elif c == ' R ' : NEW_LINE INDENT x += 1 NEW_LINE DEDENT elif c == ' U ' : NEW_LINE INDENT y += 1 NEW_LINE DEDENT elif c == ' D ' : NEW_LINE INDENT y -= 1 NEW_LINE DEDENT co [ 0 ] [ k ] = x NEW_LINE co [ 1 ] [ k ] = y NEW_LINE k += 1 NEW_LINE DEDENT for i in range ( k - 3 ) : NEW_LINE INDENT for j in range ( i + 3 , k ) : NEW_LINE INDENT dx = co [ 0 ] [ i ] - co [ 0 ] [ j ] NEW_LINE dy = co [ 1 ] [ i ] - co [ 1 ] [ j ] NEW_LINE if dx < 0 : NEW_LINE INDENT dx *= ( - 1 ) NEW_LINE DEDENT if dy < 0 : NEW_LINE INDENT dy *= ( - 1 ) NEW_LINE DEDENT if ( dx <= 1 and dy == 0 ) or ( dy <= 1 and dx == 0 ) : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT DEDENT if not flag : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT print ( ' OK ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' BUG ' ) NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , math . sqrt ( n ) + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def count_dyck_paths ( n ) : NEW_LINE INDENT res = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res *= ( 2 * n - i ) NEW_LINE res //= ( i + 1 ) NEW_LINE DEDENT return res / ( n + 1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE for tc in range ( t ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE print ( solve ( n ) ) NEW_LINE DEDENT sys . maxsize = t NEW_LINE def solve ( n ) : NEW_LINE INDENT if n <= 30 : NEW_LINE INDENT return " NO " NEW_LINE DEDENT elif n in [ 36 , 40 , 44 ] : NEW_LINE INDENT return " YES \n 6 ▁ 10 ▁ 15 ▁ % d " % ( n - 31 ) NEW_LINE DEDENT else : NEW_LINE INDENT return " YES \n 6 ▁ 10 ▁ 14 ▁ % d " % ( n - 30 ) NEW_LINE DEDENT DEDENT return " " NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT ans = a [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT ans = gcd ( ans , a [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE def gcd ( a , b ) : NEW_LINE INDENT if b == 0 : NEW_LINE INDENT return a NEW_LINE DEDENT return gcd ( b , a % b ) NEW_LINE DEDENT return gcd ( a , b ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE a = [ ] NEW_LINE for i in range ( 14 ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT max = 0 NEW_LINE for from_index in range ( 14 ) : NEW_LINE INDENT stones = a [ from_index ] NEW_LINE remainder = stones // 14 NEW_LINE score = ( remainder if remainder % 2 == 0 else 0 ) NEW_LINE for i in range ( 1 , 14 ) : NEW_LINE INDENT count = a [ ( from_index + i ) % 14 ] + ( stones + 14 - i ) // 14 NEW_LINE if count % 2 == 0 : NEW_LINE INDENT score += count NEW_LINE DEDENT DEDENT max = max NEW_LINE DEDENT print ( max ) NEW_LINE DEDENT
def gf_gcd ( a ) : NEW_LINE INDENT if a < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT d = 1.22 * a NEW_LINE return d NEW_LINE DEDENT
def hex_diagonal ( a ) : NEW_LINE INDENT if a < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT d = float ( 1.73 ) * a NEW_LINE return d NEW_LINE DEDENT
def translate ( str ) : NEW_LINE INDENT import string NEW_LINE s = list ( str ) NEW_LINE if len ( s ) < 2 : NEW_LINE INDENT return NEW_LINE DEDENT i = 0 NEW_LINE j = 0 NEW_LINE while j < len ( s ) - 1 : NEW_LINE INDENT if s [ j ] == ' A ' and s [ j + 1 ] == ' B ' : NEW_LINE INDENT j = j + 2 NEW_LINE s [ i ] = ' C ' NEW_LINE continue NEW_LINE DEDENT s [ i ] = s [ j ] NEW_LINE j = j + 1 NEW_LINE DEDENT if j == len ( s ) - 1 : NEW_LINE INDENT s [ i ] = s [ j ] NEW_LINE DEDENT s [ i ] = ' ▁ ' NEW_LINE s [ - 1 ] = ' ▁ ' NEW_LINE DEDENT
def translate ( str ) : NEW_LINE INDENT import string NEW_LINE for i in range ( 1 , len ( str ) ) : NEW_LINE INDENT if str [ i - 1 ] == ' A ' and str [ i ] == ' B ' : NEW_LINE INDENT str [ i - 1 ] = ' C ' NEW_LINE j = i NEW_LINE for j in range ( i , len ( str ) - 1 ) : NEW_LINE INDENT str [ j ] = str [ j + 1 ] NEW_LINE DEDENT str [ j ] = ' ▁ ' NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT
def p128 ( ) : NEW_LINE INDENT print ( eval ( ' p128 ( ) ' ) ) NEW_LINE TARGET = 2000 NEW_LINE count = 2 NEW_LINE for ring in range ( 2 ) : NEW_LINE INDENT if int ( ring ) * 12 + 5 > sys . maxsize : NEW_LINE INDENT raise OverflowError NEW_LINE DEDENT if math . isnan ( ring ) and math . isnan ( ring ) and math . isnan ( ring ) and math . isnan ( ring ) : NEW_LINE INDENT count += 1 NEW_LINE if count == TARGET : NEW_LINE INDENT return str ( int ( ring ) * ( ring - 1 ) * 3 + 2 ) NEW_LINE DEDENT DEDENT if math . isnan ( ring ) and math . isnan ( ring ) and math . isnan ( ring ) : NEW_LINE INDENT count += 1 NEW_LINE if count == TARGET : NEW_LINE INDENT return str ( int ( ring ) * ( ring + 1 ) * 3 + 1 ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE n = sys . maxsize NEW_LINE m = sys . maxsize NEW_LINE c = 0 NEW_LINE for i in range ( 0 , max ( n , m ) + 1 ) : NEW_LINE INDENT for j in range ( 0 , max ( n , m ) + 1 ) : NEW_LINE INDENT if ( i * i ) + j == n and i + ( j * j ) == m : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT DEDENT print ( c ) NEW_LINE DEDENT
def Digits ( n ) : NEW_LINE INDENT import math NEW_LINE import io NEW_LINE class GFG ( int ) : NEW_LINE INDENT largest = 0 NEW_LINE smallest = 9 NEW_LINE while n != 0 : NEW_LINE INDENT r = n % 10 NEW_LINE largest = max ( r , largest ) NEW_LINE smallest = min ( r , smallest ) NEW_LINE n = n // 10 NEW_LINE DEDENT print ( largest , smallest ) NEW_LINE DEDENT def Digits ( n ) : NEW_LINE INDENT n = 2346 NEW_LINE Digits ( n ) NEW_LINE DEDENT return GFG NEW_LINE DEDENT
def solve ( d1 , d2 , d3 ) : NEW_LINE INDENT import sys NEW_LINE maxx = max ( d1 , max ( d2 , d3 ) ) NEW_LINE sum = ( d1 + d2 + d3 ) NEW_LINE if 2 * maxx > sum or sum % 2 == 1 : NEW_LINE INDENT print ( " - 1" , end = " ▁ " ) NEW_LINE return NEW_LINE DEDENT x1 , y1 = 0 , 0 NEW_LINE x2 , y2 = d1 , 0 NEW_LINE x3 = ( d1 + d2 - d3 ) // 2 NEW_LINE y3 = ( d2 + d3 - d1 ) // 2 NEW_LINE print ( " ( % d , ▁ % d ) , ▁ ( % d , ▁ % d ) ▁ and ▁ ( % d , ▁ % d ) " % ( x1 , y1 , x2 , y2 , x3 , y3 ) , end = " ▁ " ) NEW_LINE DEDENT
def gf_gall ( x ) : NEW_LINE INDENT import string NEW_LINE a = list ( x ) NEW_LINE for c in range ( n ) : NEW_LINE INDENT a [ ord ( c ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for c in a : NEW_LINE INDENT if ord ( c ) > ord ( ' a ' ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def Lesson ( s ) : NEW_LINE INDENT import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE class Lesson ( string ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT string . __init__ ( self ) NEW_LINE self . s = s NEW_LINE self . OUTER_LOOP = None NEW_LINE DEDENT def check ( self ) : NEW_LINE INDENT t = 0 NEW_LINE for c in self . s : NEW_LINE INDENT if c . isspace ( ) : NEW_LINE INDENT t += 1 NEW_LINE DEDENT elif c . isspace ( ) : NEW_LINE INDENT if t <= 0 : NEW_LINE INDENT return False NEW_LINE DEDENT t -= 1 NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def main ( self ) : NEW_LINE INDENT t = self . OUTER_LOOP NEW_LINE while t > 0 : NEW_LINE INDENT n = self . OUTER_LOOP NEW_LINE s = list ( self . s ) NEW_LINE if s . find ( ' M ' ) < 0 : NEW_LINE INDENT self . OUTER_LOOP = True NEW_LINE continue NEW_LINE DEDENT T , m = 0 , 0 NEW_LINE for c in s : NEW_LINE INDENT if c . isspace ( ) : NEW_LINE INDENT T += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m += 1 NEW_LINE DEDENT DEDENT if T // 2 != m : NEW_LINE INDENT self . OUTER_LOOP = True NEW_LINE continue NEW_LINE DEDENT if self . check ( s ) == True and self . check ( s . reverse ( ) ) == True : NEW_LINE INDENT self . OUTER_LOOP = True NEW_LINE DEDENT else : NEW_LINE INDENT self . OUTER_LOOP = True NEW_LINE DEDENT DEDENT DEDENT DEDENT return Lesson NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT e = list ( range ( 13 ) ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( " No ▁ such ▁ file " ) NEW_LINE return NEW_LINE DEDENT for i in range ( 12 ) : NEW_LINE INDENT for j in range ( 12 - i ) : NEW_LINE INDENT if e [ j ] < e [ j + 1 ] : NEW_LINE INDENT y = e [ j ] NEW_LINE e [ j ] = e [ j + 1 ] NEW_LINE e [ j + 1 ] = y NEW_LINE DEDENT DEDENT DEDENT for u in range ( 3 ) : NEW_LINE INDENT for k in range ( 4 ) : NEW_LINE INDENT i = u * 4 NEW_LINE if e [ i ] == e [ i + 1 ] and e [ i + 2 ] == e [ i + 3 ] and e [ i ] == e [ i + 2 ] and e [ i + 1 ] == e [ i + 3 ] and e [ i ] == e [ i + 3 ] and e [ i + 1 ] == e [ i + 2 ] : NEW_LINE INDENT p += 1 NEW_LINE DEDENT else : NEW_LINE INDENT p += 0 NEW_LINE DEDENT DEDENT DEDENT if p == 12 : NEW_LINE INDENT print ( " yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " no " ) NEW_LINE DEDENT DEDENT
def GFG ( arr , low , high ) : NEW_LINE INDENT if high >= low : NEW_LINE INDENT mid = low + ( high - low ) // 2 NEW_LINE if ( mid == 0 or arr [ mid - 1 ] == 0 ) and arr [ mid ] == 1 : NEW_LINE INDENT return mid NEW_LINE DEDENT elif arr [ mid ] == 0 : NEW_LINE INDENT return first ( arr , ( mid + 1 ) , high ) NEW_LINE DEDENT else : NEW_LINE INDENT return first ( arr , low , ( mid - 1 ) ) NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def rowWith0s ( mat ) : NEW_LINE INDENT max_row_index , max = 0 , sys . maxint NEW_LINE min_row_index , min = 0 , sys . maxint NEW_LINE for i in range ( R ) : NEW_LINE INDENT index = first ( mat [ i ] , 0 , C - 1 ) NEW_LINE if index == - 1 : NEW_LINE INDENT col_zeroes = C NEW_LINE DEDENT else : NEW_LINE INDENT col_zeroes = index NEW_LINE DEDENT if max < col_zeroes : NEW_LINE INDENT max = col_zeroes NEW_LINE max_row_index = i NEW_LINE DEDENT if min > col_zeroes : NEW_LINE INDENT min = col_zeroes NEW_LINE min_row_index = i NEW_LINE DEDENT DEDENT print ( " Row ▁ with ▁ min ▁ 0s : ▁ % d " % ( min_row_index + 1 ) ) NEW_LINE print ( " Row ▁ with ▁ max ▁ 0s : ▁ % d " % ( max_row_index + 1 ) ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT mat = [ [ 0 , 0 , 0 , 1 ] , [ 0 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 ] , [ 0 , 0 , 0 , 0 ] ] NEW_LINE rowWith0s ( mat ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def bit_at_given_pos_set_unset ( n , k ) : NEW_LINE INDENT import sys NEW_LINE new_num = n >> ( k - 1 ) NEW_LINE return ( new_num & 1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( " / proc / cmdline " , " r " ) NEW_LINE n = int ( f . readline ( ) ) NEW_LINE if n % 4 != 0 : NEW_LINE INDENT print ( " = = = = " ) NEW_LINE return NEW_LINE DEDENT themost = n // 4 NEW_LINE numA = 0 NEW_LINE numG = 0 NEW_LINE numC = 0 NEW_LINE numT = 0 NEW_LINE numQM = 0 NEW_LINE s = f . read ( ) NEW_LINE s = ' ' . join ( s ) NEW_LINE for c in s : NEW_LINE INDENT if c == " A " : NEW_LINE INDENT numA += 1 NEW_LINE DEDENT elif c == " G " : NEW_LINE INDENT numG += 1 NEW_LINE DEDENT elif c == " C " : NEW_LINE INDENT numC += 1 NEW_LINE DEDENT elif c == " T " : NEW_LINE INDENT numT += 1 NEW_LINE DEDENT else : NEW_LINE INDENT numQM += 1 NEW_LINE DEDENT DEDENT if numA > themost or numC > themost or numG > themost or numT > themost : NEW_LINE INDENT print ( " = = = = " ) NEW_LINE return NEW_LINE DEDENT for j in range ( numQM ) : NEW_LINE INDENT for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] == " ? " : NEW_LINE INDENT if numA < themost : NEW_LINE INDENT s [ i ] = i + 1 NEW_LINE numA += 1 NEW_LINE DEDENT elif numC < themost : NEW_LINE INDENT s [ i ] = i + 1 NEW_LINE numC += 1 NEW_LINE DEDENT elif numG < themost : NEW_LINE INDENT s [ i ] = i + 1 NEW_LINE numG += 1 NEW_LINE DEDENT elif numT < themost : NEW_LINE INDENT s [ i ] = i + 1 NEW_LINE numT += 1 NEW_LINE DEDENT DEDENT DEDENT print ( s ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import os NEW_LINE import os . path as op NEW_LINE import sys NEW_LINE import os . path as op NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import os . path as op NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import os . path as op NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE return ufuncs NEW_LINE DEDENT
def sol_main ( argc ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT l = int ( sys . stdin . readline ( ) ) NEW_LINE r = int ( sys . stdin . readline ( ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , r + 1 ) : NEW_LINE INDENT for j in range ( 1 , r + 1 ) : NEW_LINE INDENT if i * j >= l : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . read ( ) ) NEW_LINE K = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT t = 1 NEW_LINE for i in range ( N ) : NEW_LINE INDENT t = min ( 2 * t , t + K ) NEW_LINE DEDENT print ( t ) NEW_LINE DEDENT DEDENT
def are_permutations ( a , b , n , m ) : NEW_LINE INDENT import numpy as np NEW_LINE sum1 , sum2 , mul1 , mul2 = 0 , 0 , 1 , 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum1 += a [ i ] NEW_LINE mul1 *= a [ i ] NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT sum2 += b [ i ] NEW_LINE mul2 *= b [ i ] NEW_LINE DEDENT return ( ( sum1 == sum2 ) and ( mul1 == mul2 ) ) NEW_LINE DEDENT
def GFG ( str1 , str2 ) : NEW_LINE INDENT global present NEW_LINE present = [ 0 for i in range ( MAX_CHAR ) ] NEW_LINE l1 = len ( str1 ) NEW_LINE l2 = len ( str2 ) NEW_LINE for i in range ( l1 ) : NEW_LINE INDENT present [ str1 [ i ] - ' a ' ] = 1 NEW_LINE DEDENT for i in range ( l2 ) : NEW_LINE INDENT if present [ str2 [ i ] - ' a ' ] == 1 or present [ str2 [ i ] - ' a ' ] == - 1 : NEW_LINE INDENT present [ str2 [ i ] - ' a ' ] = - 1 NEW_LINE DEDENT else : NEW_LINE INDENT present [ str2 [ i ] - ' a ' ] = 2 NEW_LINE DEDENT DEDENT for i in range ( MAX_CHAR ) : NEW_LINE INDENT if present [ i ] == 1 or present [ i ] == 2 : NEW_LINE INDENT print ( chr ( i + ord ( ' a ' ) ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def is_inside ( circle_x , circle_y , rad , x , y ) : NEW_LINE INDENT if ( x - circle_x ) ** 2 + ( y - circle_y ) ** 2 <= rad ** 2 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def min_sum ( arr , n , x ) : NEW_LINE INDENT sum = 0 NEW_LINE largest_divisible , minimum = - 1 , arr [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE if arr [ i ] % x == 0 and largest_divisible < arr [ i ] : NEW_LINE INDENT largest_divisible = arr [ i ] NEW_LINE DEDENT if arr [ i ] < minimum : NEW_LINE INDENT minimum = arr [ i ] NEW_LINE DEDENT DEDENT if largest_divisible == - 1 : NEW_LINE INDENT return sum NEW_LINE DEDENT sum_after_operation = sum - minimum - largest_divisible + ( x * minimum ) + ( largest_divisible // x ) NEW_LINE return min ( sum , sum_after_operation ) NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT nth = 2 * ( ( n * n ) - n ) NEW_LINE DEDENT else : NEW_LINE INDENT nth = ( 2 * n * n ) - n NEW_LINE DEDENT return nth NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE list = list ( ) NEW_LINE list . append ( 0 ) NEW_LINE with open ( ' / proc / cmdline ' , ' r ' ) as f : NEW_LINE INDENT n = len ( f . readlines ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT cmd = f . readline ( ) . strip ( ) NEW_LINE if cmd == 0 : NEW_LINE INDENT list . append ( f . readline ( ) ) NEW_LINE list . pop ( ) NEW_LINE DEDENT elif cmd == 1 : NEW_LINE INDENT d = f . readline ( ) . strip ( ) NEW_LINE if d > 0 : NEW_LINE INDENT for j in range ( d ) : NEW_LINE INDENT list . append ( f . readline ( ) ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for j in range ( 0 , d - 1 , - 1 ) : NEW_LINE INDENT list . append ( f . readline ( ) ) NEW_LINE DEDENT DEDENT DEDENT elif cmd == 2 : NEW_LINE INDENT list . append ( f . readline ( ) ) NEW_LINE list . pop ( ) NEW_LINE DEDENT DEDENT DEDENT for i in list : NEW_LINE INDENT print ( i ) NEW_LINE DEDENT DEDENT
def c1029_a ( ) : NEW_LINE INDENT import string NEW_LINE s = list ( string . ascii_lowercase ) NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , len ( s ) ) : NEW_LINE INDENT if s [ : i ] == s [ - i : ] : NEW_LINE INDENT ans = i NEW_LINE DEDENT DEDENT s = s [ - ans : ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT s . append ( s [ ans : ] ) NEW_LINE DEDENT print ( ' ' . join ( s ) ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT class Node ( object ) : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left , self . right = self . data , None NEW_LINE DEDENT def newNode ( self , data ) : NEW_LINE INDENT temp = Node ( ) NEW_LINE temp . data = data NEW_LINE temp . left = temp . right = None NEW_LINE return temp NEW_LINE DEDENT def printInorder ( self , node ) : NEW_LINE INDENT if not node : NEW_LINE INDENT return NEW_LINE DEDENT printInorder ( node . left ) NEW_LINE print ( ' % d ▁ ' % self . data ) NEW_LINE printInorder ( node . right ) NEW_LINE DEDENT def conBinaryTreeUtil ( pre , preM , preIndex , l , h , size ) : NEW_LINE INDENT if preIndex . a >= size or l > h : NEW_LINE INDENT return NEW_LINE DEDENT root = newNode ( pre [ preIndex . a ] ) NEW_LINE preIndex += 1 NEW_LINE if l == h : NEW_LINE INDENT return root NEW_LINE DEDENT i = 0 NEW_LINE for i in range ( l , h + 1 ) : NEW_LINE INDENT if pre [ preIndex . a ] == preM [ i ] : NEW_LINE INDENT break NEW_LINE DEDENT if i <= h : NEW_LINE INDENT root . left = conBinaryTreeUtil ( pre , preM , preIndex , i , h , size ) NEW_LINE root . right = conBinaryTreeUtil ( pre , preM , preIndex , l + 1 , i - 1 , size ) NEW_LINE DEDENT DEDENT return root NEW_LINE DEDENT def conBinaryTree ( root , pre , preMirror , size ) : NEW_LINE INDENT preIndex = INT ( 0 ) NEW_LINE preMIndex = 0 NEW_LINE root = conBinaryTreeUtil ( pre , preMirror , preIndex , 0 , size - 1 , size ) NEW_LINE printInorder ( root ) NEW_LINE DEDENT def main ( self , args ) : NEW_LINE INDENT preOrder = [ 1 , 2 , 4 , 5 , 3 , 6 , 7 ] NEW_LINE preOrderMirror = [ 1 , 3 , 7 , 6 , 2 , 5 , 4 ] NEW_LINE size = len ( preOrder ) NEW_LINE root = Node ( ) NEW_LINE conBinaryTree ( root , preOrder , preOrderMirror , size ) NEW_LINE DEDENT DEDENT return Node ( ) NEW_LINE DEDENT
def find_substring ( str , pat ) : NEW_LINE INDENT no_of_chars = 256 NEW_LINE if len ( str ) < no_of_chars : NEW_LINE INDENT print ( ' No ▁ such ▁ window ▁ exists ' ) NEW_LINE return ' ' NEW_LINE DEDENT hash_pat = { } NEW_LINE hash_str = { } NEW_LINE for c in pat : NEW_LINE INDENT hash_pat [ c ] += 1 NEW_LINE DEDENT start , start_index , min_len = 0 , - 1 , 0 NEW_LINE count = 0 NEW_LINE for j in range ( len1 ) : NEW_LINE INDENT hash_str [ str [ j ] ] += 1 NEW_LINE if ' ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁
def main ( ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT p = [ ] NEW_LINE for j in range ( 4 ) : NEW_LINE INDENT p . append ( ( float ( i ) , float ( j ) ) ) NEW_LINE DEDENT judge = False NEW_LINE if ( ( ccw ( p [ 0 ] , p [ 3 ] , p [ 1 ] ) > 0 and ccw ( p [ 1 ] , p [ 3 ] , p [ 2 ] ) > 0 and ccw ( p [ 2 ] , p [ 3 ] , p [ 0 ] ) > 0 ) or ( ccw ( p [ 0 ] , p [ 3 ] , p [ 1 ] ) < 0 and ccw ( p [ 1 ] , p [ 3 ] , p [ 2 ] ) < 0 and ccw ( p [ 2 ] , p [ 3 ] , p [ 0 ] ) < 0 ) : NEW_LINE INDENT judge = True NEW_LINE DEDENT print ( " YES " if judge else " NO " ) NEW_LINE DEDENT DEDENT
def PolandBoardAndGame ( ) : NEW_LINE INDENT import re NEW_LINE import sys NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE m = int ( sys . stdin . readline ( ) ) NEW_LINE if n > m : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT elif m > n : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT d = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT dem = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if d . has_key ( i ) : NEW_LINE INDENT dem += 1 NEW_LINE DEDENT DEDENT if dem % 2 == 0 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT import numpy as np NEW_LINE MAX = 100005 NEW_LINE def add_primes ( ) : NEW_LINE INDENT n = MAX NEW_LINE prime = np . zeros ( n + 1 ) NEW_LINE prime [ n ] = True NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT ans = [ ] NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if prime [ p ] : NEW_LINE INDENT ans . append ( p ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def is_prime ( n ) : NEW_LINE INDENT return ( n == 3 or n == 5 or n == 7 ) NEW_LINE DEDENT def find_sum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE v = add_primes ( ) NEW_LINE for i in range ( len ( v ) and n > 0 ) : NEW_LINE INDENT flag = 1 NEW_LINE a = v [ i ] NEW_LINE while a != 0 : NEW_LINE INDENT d = a % 10 NEW_LINE a = a // 10 NEW_LINE if is_prime ( d ) : NEW_LINE INDENT flag = 0 NEW_LINE break NEW_LINE DEDENT DEDENT if flag == 1 : NEW_LINE INDENT n -= 1 NEW_LINE sum = sum + v [ i ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 7 NEW_LINE print ( find_sum ( n ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE with open ( ' . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . . / . / . . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . . / . / . / . . / . / . / . . / . / . / . / . . / . / . / . / . / . / . / . . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . / . . / . / . / . / . / . / .
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import csv NEW_LINE class BearAndGame1 ( csv . reader ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sc = csv . reader ( sys . stdin ) NEW_LINE self . n = len ( sc ) NEW_LINE self . csv = sc NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT DEDENT class BearAndGame2 ( list ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . list = list ( range ( 100 ) ) NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT def index ( self ) : NEW_LINE INDENT return self . idx NEW_LINE DEDENT DEDENT
def GFG ( index , even_sum , odds_sum , tight ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE return np .
def main ( ) : NEW_LINE INDENT import string NEW_LINE sc = string . split ( " ▁ " ) NEW_LINE s = [ ] NEW_LINE c = [ [ ] for i in range ( 3 ) ] NEW_LINE b = True NEW_LINE for i in range ( 2 ) : NEW_LINE INDENT for j in range ( i + 1 , 3 ) : NEW_LINE INDENT c . append ( sc . split ( " ▁ " ) [ 0 ] ) NEW_LINE DEDENT DEDENT loop : NEW_LINE INDENT for i in range ( 2 ) : NEW_LINE INDENT for j in range ( i + 1 , 3 ) : NEW_LINE INDENT if c [ i ] [ 0 ] - c [ j ] [ 0 ] == c [ i ] [ 1 ] - c [ j ] [ 1 ] and c [ i ] [ 1 ] - c [ j ] [ 1 ] == c [ i ] [ 2 ] - c [ j ] [ 2 ] : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT b = False NEW_LINE break loop NEW_LINE DEDENT DEDENT DEDENT DEDENT loop : NEW_LINE INDENT for i in range ( 2 ) : NEW_LINE INDENT for j in range ( i + 1 , 3 ) : NEW_LINE INDENT if c [ 0 ] [ i ] - c [ 0 ] [ j ] == c [ 1 ] [ i ] - c [ 1 ] [ j ] and c [ 1 ] [ i ] - c [ 1 ] [ j ] == c [ 2 ] [ i ] - c [ 2 ] [ j ] : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT b = False NEW_LINE break loop NEW_LINE DEDENT DEDENT DEDENT if b : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE a = [ ] NEW_LINE b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( n ) ) NEW_LINE DEDENT flag = True NEW_LINE b . append ( a [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if a [ i ] != 0 and b [ i - 1 ] - a [ i ] >= 0 : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT b [ i ] = b [ i - 1 ] + a [ i ] NEW_LINE DEDENT DEDENT if not flag : NEW_LINE INDENT sys . stdout . write ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % b [ i ] ) NEW_LINE DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT DEDENT DEDENT
def p218 ( ) : NEW_LINE INDENT print ( int ( ) ) NEW_LINE return '0' NEW_LINE DEDENT
def GFG ( arr , x ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == x : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE class Main ( subprocess . Popen ) : NEW_LINE INDENT def communicate ( self ) : NEW_LINE INDENT return self . returncode NEW_LINE DEDENT DEDENT x = sys . stdin . read ( ) . split ( ) NEW_LINE n = int ( x [ 0 ] ) NEW_LINE c = int ( x [ 1 ] ) NEW_LINE forward_max = [ 0 ] * ( n + 1 ) NEW_LINE backward_max = [ 0 ] * ( n + 1 ) NEW_LINE positions = [ 0 ] * ( n + 1 ) NEW_LINE values = [ 0 ] * ( n + 1 ) NEW_LINE positions [ 0 ] = 0 NEW_LINE values [ 0 ] = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT x = sys . stdin . read ( ) . split ( ) NEW_LINE positions [ i ] = int ( x [ 0 ] ) NEW_LINE values [ i ] = int ( x [ 1 ] ) NEW_LINE DEDENT max = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT sum += values [ i ] NEW_LINE max = max ( max , sum - positions [ i ] ) NEW_LINE forward_max [ i ] = max NEW_LINE DEDENT max = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n , - 1 , - 1 ) : NEW_LINE INDENT sum += values [ i ] NEW_LINE max = max ( max , sum - ( c - positions [ i ] ) ) NEW_LINE backward_max [ i ] = max NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT res = max ( res , forward_max [ i ] ) NEW_LINE if i != n : NEW_LINE INDENT res = max ( res , forward_max [ i ] - ( positions [ i ] ) + backward_max [ i + 1 ] ) NEW_LINE DEDENT res = max ( res , backward_max [ i ] ) NEW_LINE if i != 0 : NEW_LINE INDENT res = max ( res , backward_max [ i ] - ( c - positions [ i ] ) + forward_max [ i - 1 ] ) NEW_LINE DEDENT DEDENT print ( res ) NEW_LINE DEDENT
def toggle_bits_from_l_to_r ( n , l , r ) : NEW_LINE INDENT import math NEW_LINE num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) NEW_LINE return ( n ^ num ) NEW_LINE DEDENT def unset_bits_in_given_range ( n , l , r ) : NEW_LINE INDENT num = ( 1 << ( 4 * 8 - 1 ) ) - 1 NEW_LINE num = toggle_bits_from_l_to_r ( num , l , r ) NEW_LINE return ( n & num ) NEW_LINE DEDENT
def GFG ( a , n ) : NEW_LINE INDENT positive , negative , zero = 0 , 0 , 0 NEW_LINE step = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == 0 : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT elif a [ i ] < 0 : NEW_LINE INDENT negative += 1 NEW_LINE step = step + ( - 1 - a [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT positive += 1 NEW_LINE step = step + ( a [ i ] - 1 ) NEW_LINE DEDENT DEDENT if negative % 2 == 0 : NEW_LINE INDENT step = step + zero NEW_LINE DEDENT else : NEW_LINE INDENT if zero > 0 : NEW_LINE INDENT step = step + zero NEW_LINE DEDENT else : NEW_LINE INDENT step = step + 2 NEW_LINE DEDENT DEDENT return step NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT number , start , end = int ( sys . stdin . readline ( ) ) , int ( sys . stdin . readline ( ) ) , int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT arr = [ 0 ] * ( number + 1 ) NEW_LINE data = list ( data ) NEW_LINE for i in range ( len ( data ) ) : NEW_LINE INDENT arr [ i + 1 ] = data [ i ] - '0' NEW_LINE DEDENT if arr [ start ] == arr [ end ] : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( abs ( arr [ start ] - arr [ end ] ) ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . maxsize NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE num = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT num . append ( sys . maxsize ) NEW_LINE DEDENT num . sort ( ) NEW_LINE print ( num [ n - 1 ] + num [ n - 2 ] ) NEW_LINE DEDENT DEDENT
def GFG ( a , b ) : NEW_LINE INDENT if not b : NEW_LINE INDENT return a NEW_LINE DEDENT return __gcd ( b , a % b ) NEW_LINE DEDENT
def GFG ( s , a ) : NEW_LINE INDENT n = len ( s ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] - '0' < a [ s [ i ] - '0' ] : NEW_LINE INDENT j = i NEW_LINE while j < n and ( s [ j ] - '0' <= a [ s [ j ] - '0' ] ) : NEW_LINE INDENT s [ j ] = chr ( ord ( '0' ) + a [ s [ j ] - '0' ] ) NEW_LINE j += 1 NEW_LINE DEDENT return ' ' . join ( s ) NEW_LINE DEDENT DEDENT return ' ' . join ( s ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT string = string NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE x , y = 0 , 0 NEW_LINE t = 0 NEW_LINE n = len ( args ) NEW_LINE data = args [ n ] NEW_LINE l = list ( data ) NEW_LINE for c in l : NEW_LINE INDENT if c != '4' and c != '7' : NEW_LINE INDENT t = 1 NEW_LINE DEDENT DEDENT if t == 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( n // 2 ) : NEW_LINE INDENT x = x + ord ( c ) NEW_LINE DEDENT for i in range ( n - 1 , ( n // 2 ) - 1 , - 1 ) : NEW_LINE INDENT y = y + ord ( c ) NEW_LINE DEDENT if x == y : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT
def binary_search ( arr , low , high ) : NEW_LINE INDENT if high < low : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE mid_value = arr [ mid ] NEW_LINE if mid == arr [ mid ] : NEW_LINE INDENT return mid NEW_LINE DEDENT leftindex = min ( mid - 1 , mid_value ) NEW_LINE left = binary_search ( arr , low , leftindex ) NEW_LINE if left >= 0 : NEW_LINE INDENT return left NEW_LINE DEDENT rightindex = max ( mid + 1 , mid_value ) NEW_LINE right = binary_search ( arr , rightindex , high ) NEW_LINE return right NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT import re NEW_LINE MAX = 10000 NEW_LINE prodDig = [ 0 ] * MAX NEW_LINE def getDigitProduct ( x ) : NEW_LINE INDENT if x < 10 : NEW_LINE INDENT return x NEW_LINE DEDENT if x in prodDig : NEW_LINE INDENT return prodDig [ x ] NEW_LINE DEDENT prod = ( x % 10 ) * getDigitProduct ( x // 10 ) NEW_LINE return ( prodDig [ x ] , prod ) NEW_LINE DEDENT def findSeed ( n ) : NEW_LINE INDENT res = [ ] NEW_LINE for i in range ( 1 , n // 2 + 1 ) : NEW_LINE INDENT if i * getDigitProduct ( i ) == n : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT DEDENT if len ( res ) == 0 : NEW_LINE INDENT print ( ' NO ▁ seed ▁ exists ' ) NEW_LINE return NEW_LINE DEDENT for i in res : NEW_LINE INDENT print ( i , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n = 138 NEW_LINE findSeed ( n ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE data = f . read ( ) . split ( ) NEW_LINE n = int ( data [ 0 ] ) NEW_LINE k = int ( data [ 1 ] ) NEW_LINE x = [ 0 ] * n NEW_LINE data = f . read ( ) . split ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x [ i ] = int ( data [ i ] ) NEW_LINE DEDENT ans = sys . maxsize NEW_LINE for i in range ( 0 , k - 1 , n ) : NEW_LINE INDENT left = x [ i ] NEW_LINE right = x [ i + k - 1 ] NEW_LINE ans = min ( ans , min ( abs ( left ) , abs ( right ) ) + right - left ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def diff ( n , mid ) : NEW_LINE INDENT import math NEW_LINE if n > ( mid ** 2 ) : NEW_LINE INDENT return ( n - ( mid ** 2 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( ( mid ** 2 ) - n ) NEW_LINE DEDENT DEDENT def cubicRoot ( n ) : NEW_LINE INDENT start , end = 0 , n NEW_LINE e = 0.0000001 NEW_LINE while True : NEW_LINE INDENT mid = ( start + end ) / 2 NEW_LINE error = diff ( n , mid ) NEW_LINE if error <= e : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( mid ** 2 ) > n : NEW_LINE INDENT end = mid NEW_LINE DEDENT else : NEW_LINE INDENT start = mid NEW_LINE DEDENT DEDENT return math . sqrt ( ( n - ( mid - 1 ) ) ** 2 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE n = int ( sys . stdin . readline ( ) ) NEW_LINE m = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ 0 ] * 105 NEW_LINE max = 0 NEW_LINE for i in range ( 0 , n - 1 + 1 ) : NEW_LINE INDENT a [ i ] = int ( sys . stdin . readline ( ) ) NEW_LINE if i > 0 and a [ i ] > a [ max ] : NEW_LINE INDENT max = i NEW_LINE DEDENT DEDENT ansmax = a [ max ] + m NEW_LINE for i in range ( 0 , m - 1 + 1 ) : NEW_LINE INDENT min = 0 NEW_LINE for j in range ( 0 , n - 1 + 1 ) : NEW_LINE INDENT if j > 0 and a [ j ] < a [ min ] : NEW_LINE INDENT min = j NEW_LINE DEDENT DEDENT a [ min ] += 1 NEW_LINE DEDENT max = 0 NEW_LINE for i in range ( 1 , n - 1 + 1 ) : NEW_LINE INDENT if a [ i ] > a [ max ] : NEW_LINE INDENT max = i NEW_LINE DEDENT DEDENT ansmin = a [ max ] NEW_LINE sys . stdout . write ( str ( ansmin ) + ' ▁ ' + str ( ansmax ) ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT
def inv ( a , m ) : NEW_LINE INDENT m0 = m , t , q = m NEW_LINE x0 , x1 = 0 , 1 NEW_LINE if m == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT while a > 1 : NEW_LINE INDENT q = a // m NEW_LINE t = m NEW_LINE m = a % m NEW_LINE a = t NEW_LINE t = x0 NEW_LINE x0 = x1 - q * x0 NEW_LINE x1 = t NEW_LINE DEDENT if x1 < 0 : NEW_LINE INDENT x1 += m0 NEW_LINE DEDENT return x1 NEW_LINE DEDENT
def solution ( arrgs ) : NEW_LINE INDENT import string NEW_LINE def find_max_OR ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if arr [ i ] < arr [ j ] : NEW_LINE INDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE DEDENT DEDENT DEDENT max_OR = arr [ 0 ] NEW_LINE count = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( max_OR | arr [ i ] ) > max_OR : NEW_LINE INDENT max_OR = max_OR | arr [ i ] NEW_LINE count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT arr = [ 5 , 1 , 3 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( find_max_OR ( arr , n ) ) NEW_LINE DEDENT
def series_sum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i * ( i + 1 ) / 2 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def aliquot_sum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def pentagon_pyramidal ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT p = ( 3 * i ** 2 - i ) / 2 NEW_LINE sum = sum + p NEW_LINE DEDENT return sum NEW_LINE DEDENT
def fifth_power_sum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum = sum + ( i * i * i * i * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def squaresum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( i * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def series_sum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i * ( i + 1 ) / 2 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def sum_of_series ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum = sum + ( 2 * i - 1 ) ** 2 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( ( i * ( i + 1 ) * ( 2 * i + 1 ) ) / 6 ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def fourth_power_sum ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum = sum + ( i * i * i * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def square_sum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( 2 * i ) ** 2 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def AvgofSquareN ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( i * i ) NEW_LINE DEDENT return sum / n NEW_LINE DEDENT
def find_sum ( n ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += i * ( n - i ) NEW_LINE DEDENT return 2 * sum NEW_LINE DEDENT
def GFG ( n , base ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE while n > 0 : NEW_LINE INDENT remainder = n % base NEW_LINE sum += remainder NEW_LINE n = n // base NEW_LINE DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE N = 10000 NEW_LINE def solve ( ) : NEW_LINE INDENT sc = sys . stdin NEW_LINE p = [ ] NEW_LINE for i in range ( 2 , len ( p ) + 1 ) : NEW_LINE INDENT f = True NEW_LINE for j in p : NEW_LINE INDENT f &= i % j != 0 NEW_LINE if not f : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if f : NEW_LINE INDENT p . append ( i ) NEW_LINE DEDENT DEDENT while True : NEW_LINE INDENT n = sc . recv_ready ( ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += p [ i ] NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT DEDENT def debug ( * os ) : NEW_LINE INDENT sys . stderr . write ( ' ' . join ( str ( i ) for i in os ) + ' \n ' ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE print ( sys . maxsize ) NEW_LINE print ( sys . maxsize ) NEW_LINE print ( sys . maxsize ) NEW_LINE DEDENT
def optimal_search_tree ( keys , freq , n ) : NEW_LINE INDENT cost = np . zeros ( ( n + 1 , n + 1 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT cost [ i ] [ i ] = freq [ i ] NEW_LINE DEDENT for L in range ( 2 , n + 1 ) : NEW_LINE INDENT for i in range ( 0 , n - L + 1 ) : NEW_LINE INDENT j = i + L - 1 NEW_LINE cost [ i ] [ j ] = np . inf NEW_LINE for r in range ( i , j + 1 ) : NEW_LINE INDENT c = ( ( r > i ) and cost [ i ] [ r - 1 ] or 0 ) + ( ( r < j ) and cost [ r + 1 ] [ j ] or 0 ) + sum ( freq , i , j ) NEW_LINE if c < cost [ i ] [ j ] : NEW_LINE INDENT cost [ i ] [ j ] = c NEW_LINE DEDENT DEDENT DEDENT DEDENT return cost [ 0 ] [ n - 1 ] NEW_LINE DEDENT def sum ( freq , i , j ) : NEW_LINE INDENT s = 0 NEW_LINE for k in range ( i , j + 1 ) : NEW_LINE INDENT if k >= len ( freq ) : NEW_LINE INDENT continue NEW_LINE DEDENT s += freq [ k ] NEW_LINE DEDENT return s NEW_LINE DEDENT
def GFG ( x , y , z ) : NEW_LINE INDENT if x > z : NEW_LINE INDENT return - 1 NEW_LINE DEDENT val = z - x NEW_LINE div = ( z - x ) // y NEW_LINE ans = div * y + x NEW_LINE return ans NEW_LINE DEDENT
def code_forces ( ) : NEW_LINE INDENT BUFFERSIZE = 512000 NEW_LINE sc = sys . stdin . fileno ( ) NEW_LINE out = sys . stdout . fileno ( ) NEW_LINE def solve ( ) : NEW_LINE INDENT n = sc . __next__ ( ) NEW_LINE d = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT d [ sc . __next__ ( ) ] = i NEW_LINE DEDENT last_loc = d [ 1 ] NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT new_loc = d [ i ] NEW_LINE ans += abs ( last_loc - new_loc ) NEW_LINE last_loc = new_loc NEW_LINE DEDENT out . write ( ans ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT sys . stdin . close ( ) NEW_LINE solve ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE DEDENT class inp ( ) : NEW_LINE INDENT def __init__ ( self , stream ) : NEW_LINE INDENT self . stream = stream NEW_LINE self . stream = stream NEW_LINE self . stream = stream NEW_LINE self . stream = ' ' NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT while not self . stream . eof ( ) : NEW_LINE INDENT self . stream = self . stream . readline ( ) NEW_LINE DEDENT return self . stream . __next__ ( ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT while not self . stream . eof ( ) : NEW_LINE INDENT self . stream = self . stream . readline ( ) NEW_LINE DEDENT return self . stream . __next__ ( ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT while self . stream . eof ( ) : NEW_LINE INDENT self . stream . next ( ) NEW_LINE DEDENT return self . stream . __next__ ( ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return float ( self . stream . read ( ) ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT def next ( self ) : NEW_LINE INDENT return int ( self . stream . read ( ) ) NEW_LINE DEDENT DEDENT return inp NEW_LINE DEDENT
def binomial_coeff ( n , k ) : NEW_LINE INDENT import numpy as np NEW_LINE C = np . zeros ( ( n + 1 , k + 1 ) ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , min ( i , k ) + 1 ) : NEW_LINE INDENT if j == 0 or j == i : NEW_LINE INDENT C [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] NEW_LINE DEDENT DEDENT DEDENT return C [ n ] [ k ] NEW_LINE DEDENT def max_coefficientvalue ( n ) : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT return binomial_coeff ( n , n // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return binomial_coeff ( n , ( n + 1 ) // 2 ) NEW_LINE DEDENT DEDENT
def is_vowel ( ch ) : NEW_LINE INDENT if ch in [ ' a ' , ' e ' , ' i ' , ' o ' , ' u ' ] : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT def vowelpairs ( s , n ) : NEW_LINE INDENT cnt = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if is_vowel ( s [ i ] ) and is_vowel ( s [ i + 1 ] ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT
def solve ( ) : NEW_LINE INDENT import sys NEW_LINE solve ( ) NEW_LINE sys . stdout = sys . stderr NEW_LINE while True : NEW_LINE INDENT N = sys . stdin . tell ( ) NEW_LINE if not N : NEW_LINE INDENT break NEW_LINE DEDENT W = sys . stdin . tell ( ) NEW_LINE H = sys . stdin . tell ( ) NEW_LINE map = np . zeros ( ( W + 1 , H + 1 ) ) NEW_LINE while N > 0 : NEW_LINE INDENT N -= 1 NEW_LINE DEDENT S = sys . stdin . tell ( ) NEW_LINE T = sys . stdin . tell ( ) NEW_LINE max = 0 NEW_LINE for s in range ( 1 , W - S + 1 ) : NEW_LINE INDENT for t in range ( 1 , H - T + 1 ) : NEW_LINE INDENT count = 0 NEW_LINE for a in range ( s , s + S ) : NEW_LINE INDENT for b in range ( t , t + T ) : NEW_LINE INDENT count += map [ a ] [ b ] NEW_LINE DEDENT DEDENT if max < count : NEW_LINE INDENT max = count NEW_LINE DEDENT DEDENT DEDENT pr . write ( max ) NEW_LINE DEDENT pr . flush ( ) NEW_LINE sys . stdout = sys . stderr NEW_LINE DEDENT
def is_substr ( s1 , s2 ) : NEW_LINE INDENT M = len ( s1 ) NEW_LINE N = len ( s2 ) NEW_LINE for i in range ( 0 , N - M + 1 ) : NEW_LINE INDENT j = 0 NEW_LINE for j in range ( M ) : NEW_LINE INDENT if s2 [ i + j ] != s1 [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if j == M : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def GFG ( z ) : NEW_LINE INDENT return ( z / 2 ) NEW_LINE DEDENT
def count_subarraysof1and0 ( a , n ) : NEW_LINE INDENT import numpy as np NEW_LINE count1 , count0 = 0 , 0 NEW_LINE number1 , number0 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == 1 : NEW_LINE INDENT count1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT number1 += ( count1 ) * ( count1 + 1 ) / 2 NEW_LINE count1 = 0 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if a [ i ] == 0 : NEW_LINE INDENT count0 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT number0 += ( count0 ) * ( count0 + 1 ) / 2 NEW_LINE count0 = 0 NEW_LINE DEDENT DEDENT if count1 > 0 : NEW_LINE INDENT number1 += ( count1 ) * ( count1 + 1 ) / 2 NEW_LINE DEDENT if count0 > 0 : NEW_LINE INDENT number0 += ( count0 ) * ( count0 + 1 ) / 2 NEW_LINE DEDENT print ( ' Count ▁ of ▁ subarrays ▁ of ▁ 0 ▁ only : ▁ % d ' % number0 ) NEW_LINE print ( ' \n Count ▁ of ▁ subarrays ▁ of ▁ 1 ▁ only : ▁ % d ' % number1 ) NEW_LINE DEDENT
def GFG ( N ) : NEW_LINE INDENT flag = 1 NEW_LINE x = N NEW_LINE if N > 0 : NEW_LINE INDENT while x > 0 and flag == 1 : NEW_LINE INDENT digit = x % 10 NEW_LINE if digit != 1 and digit != 3 : NEW_LINE INDENT flag = 0 NEW_LINE DEDENT x = x // 10 NEW_LINE DEDENT if flag == 1 : NEW_LINE INDENT print ( N , end = ' ▁ ' ) NEW_LINE DEDENT PrintNumbers ( N - 1 ) NEW_LINE DEDENT DEDENT
def print_permutation ( n , k ) : NEW_LINE INDENT import sys NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import
def the_rank ( ) : NEW_LINE INDENT import sys NEW_LINE n = len ( sys . stdin ) NEW_LINE ans = 0 NEW_LINE rank = 1 NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a = sys . stdin . read ( ) NEW_LINE b = sys . stdin . read ( ) NEW_LINE c = sys . stdin . read ( ) NEW_LINE d = sys . stdin . read ( ) NEW_LINE sum = a + b + c + d NEW_LINE arr . append ( sum ) NEW_LINE DEDENT for j in arr : NEW_LINE INDENT if arr [ 0 ] < j : NEW_LINE INDENT rank += 1 NEW_LINE DEDENT DEDENT print ( rank ) NEW_LINE DEDENT
def GFG ( s1 , s2 ) : NEW_LINE INDENT import re NEW_LINE mp = { } NEW_LINE for c in s1 : NEW_LINE INDENT mp [ c ] = 1 if mp . get ( c ) is None else mp . get ( c ) + 1 NEW_LINE DEDENT for c in s2 : NEW_LINE INDENT if mp [ c ] > 0 : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT while t : NEW_LINE INDENT n , a , b , c , d , flag = sys . stdin . read ( ) NEW_LINE if not flag : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT t = t + 1 NEW_LINE DEDENT DEDENT DEDENT
def find_elements ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if arr [ j ] > arr [ i ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if count >= 2 : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % arr [ i ] ) NEW_LINE DEDENT DEDENT import sys NEW_LINE arr = [ 2 , - 6 , 3 , 5 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE find_elements ( arr , n ) NEW_LINE DEDENT
def max_path_sum ( tri , m , n ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . random import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import sqrt NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE from numpy . math import gaussian_ratio NEW_LINE return gaussian_ratio NEW_LINE DEDENT
def GFG ( arr , n ) : NEW_LINE INDENT for i in range ( 0 , ( n - 2 ) // 2 + 1 ) : NEW_LINE INDENT if arr [ 2 * i + 1 ] > arr [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT if 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def GFG ( arr , i , n ) : NEW_LINE INDENT if i > ( n - 2 ) // 2 : NEW_LINE INDENT return True NEW_LINE DEDENT if arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr [ 2 * i + 2 ] and isHeap ( arr , 2 * i + 1 , n ) and isHeap ( arr , 2 * i + 2 , n ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import io NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT ax = int ( sys . stdin . readline ( ) ) NEW_LINE ay = int ( sys . stdin . readline ( ) ) NEW_LINE bx = int ( sys . stdin . readline ( ) ) NEW_LINE by = int ( sys . stdin . readline ( ) ) NEW_LINE cx = int ( sys . stdin . readline ( ) ) NEW_LINE cy = int ( sys . stdin . readline ( ) ) NEW_LINE print ( ( ( bx - ax ) * ( cy - ay ) == ( cx - ax ) * ( by - ay ) ) or ( ( ax - bx ) * ( ax - bx ) + ( ay - by ) * ( ay - by ) != ( cx - bx ) * ( cx - bx ) + ( cy - by ) * ( cy - by ) ) ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( " No ▁ - ▁ % s " % sys . argv [ 0 ] ) NEW_LINE DEDENT DEDENT
def find_min_del ( arr , n ) : NEW_LINE INDENT min_num = sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT min_num = min ( arr [ i ] , min_num ) NEW_LINE DEDENT cnt = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == min_num : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return n - cnt NEW_LINE DEDENT
def count ( x , y ) : NEW_LINE INDENT ans = 0 NEW_LINE m = { } NEW_LINE while x % y != 0 : NEW_LINE INDENT x = x % y NEW_LINE ans += 1 NEW_LINE if x in m : NEW_LINE INDENT return - 1 NEW_LINE DEDENT m [ x ] = 1 NEW_LINE x = x * 10 NEW_LINE DEDENT return ans NEW_LINE DEDENT
def is_possible_to_make_divisible ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE remainder = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT remainder = ( remainder + arr [ i ] ) % 3 NEW_LINE DEDENT return ( remainder == 0 ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE class Main ( sys . stdin ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . N , self . K = None , None NEW_LINE self . ans = 0 NEW_LINE self . vec = [ [ 0 ] ] * N NEW_LINE for i in range ( self . N ) : NEW_LINE INDENT self . vec [ i ] = [ 0 ] NEW_LINE DEDENT for i in range ( self . N ) : NEW_LINE INDENT a = self . N - 1 NEW_LINE if i != 0 : NEW_LINE INDENT self . vec [ a ] . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT if a != 0 : NEW_LINE INDENT self . ans += 1 NEW_LINE DEDENT DEDENT DEDENT self . dfs ( 0 , 0 ) NEW_LINE print ( self . ans ) NEW_LINE DEDENT def dfs ( v , pre ) : NEW_LINE INDENT self . hight = 0 NEW_LINE for j in self . vec [ v ] : NEW_LINE INDENT self . hight = max ( self . hight , self . dfs ( j , v ) ) NEW_LINE DEDENT if pre != 0 and self . hight == self . K - 1 : NEW_LINE INDENT self . hight = 0 NEW_LINE self . ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT self . hight += 1 NEW_LINE DEDENT return self . hight NEW_LINE DEDENT DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def print_cubes ( a , b ) : NEW_LINE INDENT for i in range ( a , b + 1 ) : NEW_LINE INDENT for j in range ( 1 , j ** 2 + 1 ) : NEW_LINE INDENT if j ** 2 == i : NEW_LINE INDENT print ( j ** 2 , end = ' ▁ ▁ ' ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT
def GFG ( n , d ) : NEW_LINE INDENT return ( n & ( d - 1 ) ) NEW_LINE DEDENT
def pre598 ( args ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import list NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT import readline NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT import math NEW_LINE DEDENT try : NEW_LINE INDENT data = string . strip ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT data = None NEW_LINE DEDENT return data NEW_LINE DEDENT
def code_force ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import security NEW_LINE import text NEW_LINE import util NEW_LINE import string NEW_LINE import util NEW_LINE class code_force ( None ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT pass NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT def decode ( self ) : NEW_LINE INDENT return self . decode ( ) NEW_LINE DEDENT def encode ( self ) : NEW_LINE INDENT return self . encode ( ) NEW_LINE DEDENT DEDENT
def is_perturb_cube ( x ) : NEW_LINE INDENT cr = int ( math . cbrt ( x ) ) NEW_LINE return ( cr * cr * cr == x ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE sc = string . split ( args ) NEW_LINE n = int ( sc ) NEW_LINE s = sc [ 0 ] NEW_LINE t = sc [ 1 ] NEW_LINE sc . close ( ) NEW_LINE result = 2 * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT foot = t [ : n - i ] NEW_LINE if s . endswith ( foot ) : NEW_LINE INDENT result -= len ( foot ) NEW_LINE break NEW_LINE DEDENT DEDENT print ( result ) NEW_LINE DEDENT
def DFS ( v ) : NEW_LINE INDENT import sys NEW_LINE import copy NEW_LINE import copy NEW_LINE adj = [ list ( ) ] NEW_LINE def Graph ( v ) : NEW_LINE INDENT V = v NEW_LINE adj = [ [ ] ] NEW_LINE for i in range ( v ) : NEW_LINE INDENT adj [ i ] . append ( w ) NEW_LINE DEDENT DEDENT def addEdge ( v , w ) : NEW_LINE INDENT adj [ v ] . append ( w ) NEW_LINE DEDENT def DFSUtil ( v , visited ) : NEW_LINE INDENT visited [ v ] = True NEW_LINE print ( v , end = ' ▁ ' ) NEW_LINE for ( n , v ) in adj [ v ] : NEW_LINE INDENT if not visited [ n ] : NEW_LINE INDENT DFSUtil ( n , visited ) NEW_LINE DEDENT DEDENT DEDENT def DFS ( v ) : NEW_LINE INDENT visited = [ False ] NEW_LINE DFSUtil ( v , visited ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT g = copy . deepcopy ( 4 ) NEW_LINE g . addEdge ( 0 , 1 ) NEW_LINE g . addEdge ( 0 , 2 ) NEW_LINE g . addEdge ( 1 , 2 ) NEW_LINE g . addEdge ( 2 , 0 ) NEW_LINE g . addEdge ( 2 , 3 ) NEW_LINE g . addEdge ( 3 , 3 ) NEW_LINE print ( ' Following ▁ is ▁ Depth ▁ First ▁ Traversal ▁ ( starting ▁ from ▁ vertex ▁ 2 ) ' ) NEW_LINE g . DFS ( 2 ) NEW_LINE DEDENT return { ' V ' : v } NEW_LINE DEDENT
def count_digits ( val , arr ) : NEW_LINE INDENT while int ( val ) > 0 : NEW_LINE INDENT digit = int ( val ) % 10 NEW_LINE arr [ int ( digit ) ] += 1 NEW_LINE val = int ( val ) // 10 NEW_LINE DEDENT return NEW_LINE DEDENT
def encode ( a ) : NEW_LINE INDENT import os NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import integer NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT string NEW_LINE INDENT string = string NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . stdin . read ( ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = sys . stdin . read ( ) NEW_LINE print ( max_left ( n ) ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return n - 2 if n > 2 else 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT hs = set ( ) NEW_LINE a = sys . stdin . readline ( ) . strip ( ) NEW_LINE for i in range ( a ) : NEW_LINE INDENT hs . add ( sys . stdin . readline ( ) . strip ( ) ) NEW_LINE DEDENT b = sys . stdin . readline ( ) . strip ( ) NEW_LINE for i in range ( b ) : NEW_LINE INDENT hs . add ( sys . stdin . readline ( ) . strip ( ) ) NEW_LINE DEDENT if len ( hs ) == n : NEW_LINE INDENT print ( ' I ▁ become ▁ the ▁ guy . ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' Oh , ▁ my ▁ keyboard ! ' , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def linear_check ( ar , arr ) : NEW_LINE INDENT import numpy as np NEW_LINE m , n = 6 , 4 NEW_LINE def linear_check ( ar , arr ) : NEW_LINE INDENT for i in range ( m ) : NEW_LINE INDENT matched = True NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ar [ i ] [ j ] != arr [ j ] : NEW_LINE INDENT matched = False NEW_LINE break NEW_LINE DEDENT DEDENT if matched : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT mat = np . array ( [ [ 0 , 0 , 1 , 0 ] , [ 10 , 9 , 22 , 23 ] , [ 40 , 40 , 40 , 40 ] , [ 43 , 44 , 55 , 68 ] , [ 81 , 73 , 100 , 132 ] , [ 100 , 75 , 125 , 133 ] ] ) NEW_LINE row = [ 10 , 9 , 22 , 23 ] NEW_LINE print ( linear_check ( mat , row ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE a = [ ] NEW_LINE sum , count = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( n ) ) NEW_LINE sum += a [ i ] NEW_LINE DEDENT if sum % n == 0 : NEW_LINE INDENT div = sum // n NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] > div : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT t -= 1 NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE main = sys . modules [ ' main ' ] NEW_LINE main . solve_d ( ) NEW_LINE def solve_d ( ) : NEW_LINE INDENT with open ( ' / tmp / ' , ' r ' ) as f : NEW_LINE INDENT N = len ( f . read ( ) ) NEW_LINE DEDENT t = [ 0 ] * N NEW_LINE sum_t = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT t [ i ] = f . read ( ) * 2 NEW_LINE sum_t += t [ i ] NEW_LINE DEDENT v = [ 0 ] * N NEW_LINE for i in range ( N ) : NEW_LINE INDENT v [ i ] = f . read ( ) * 2 NEW_LINE DEDENT tmp_v = 0 NEW_LINE tmp_t = 0 NEW_LINE max_v = [ 0 ] * sum_t + 1 NEW_LINE for i in range ( N ) : NEW_LINE INDENT max_v [ tmp_t ] = v [ i ] if v [ i ] < tmp_v else tmp_v NEW_LINE tmp_v = max_v [ tmp_t ] NEW_LINE for t_ind in range ( t [ i ] ) : NEW_LINE INDENT max_v [ ++ tmp_t ] = v [ i ] if v [ i ] < tmp_v + 1 else tmp_v + 1 NEW_LINE tmp_v = max_v [ tmp_t ] NEW_LINE DEDENT DEDENT tmp_v = 0 NEW_LINE for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT max_v [ tmp_t ] = v [ i ] if v [ i ] < tmp_v else tmp_v NEW_LINE tmp_v = max_v [ tmp_t ] NEW_LINE for t_ind in range ( t [ i ] ) : NEW_LINE INDENT back_v = v [ i ] if v [ i ] < tmp_v + 1 else tmp_v + 1 NEW_LINE del max_v [ tmp_t ] NEW_LINE max_v [ tmp_t ] = max_v [ tmp_t ] if max_v [ tmp_t ] < back_v else back_v NEW_LINE tmp_v = max_v [ tmp_t ] NEW_LINE DEDENT DEDENT answer = 0 NEW_LINE for i in range ( sum_t ) : NEW_LINE INDENT answer += ( max_v [ i ] + max_v [ i + 1 ] ) NEW_LINE DEDENT print ( answer * 0.125 ) NEW_LINE DEDENT return solve_d NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE def nth_term ( n ) : NEW_LINE INDENT return 2 * int ( math . pow ( n , 2 ) ) + 4 * n - 2 NEW_LINE DEDENT def main ( arr ) : NEW_LINE INDENT N = 4 NEW_LINE print ( nth_term ( N ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE return 7 * int ( math . pow ( n , 2 ) ) - 7 * n + 7 NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE return 5 * int ( math . pow ( n , 2 ) ) - 5 * n NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE def nth_term ( n ) : NEW_LINE INDENT return int ( math . pow ( n , 2 ) ) + 2 * n + 2 NEW_LINE DEDENT def main ( arr ) : NEW_LINE INDENT N = 4 NEW_LINE print ( nth_term ( N ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE return 2 * int ( math . pow ( n , 3 ) ) + int ( math . pow ( n , 2 ) ) NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE def nth_term ( n ) : NEW_LINE INDENT return 2 * int ( math . pow ( n , 2 ) ) - n - 1 NEW_LINE DEDENT def main ( arr ) : NEW_LINE INDENT N = 4 NEW_LINE print ( nth_term ( N ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE def nth_term ( n ) : NEW_LINE INDENT return int ( math . pow ( n , 2 ) ) - 2 * n + 2 NEW_LINE DEDENT def main ( arr ) : NEW_LINE INDENT N = 4 NEW_LINE print ( nth_term ( N ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def nth_term ( n ) : NEW_LINE INDENT import math NEW_LINE def nth_term ( n ) : NEW_LINE INDENT return 3 * int ( math . pow ( n , 2 ) ) + n - 2 NEW_LINE DEDENT def main ( arr ) : NEW_LINE INDENT N = 4 NEW_LINE print ( nth_term ( N ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def shashwat ( args ) : NEW_LINE INDENT import math NEW_LINE n1 = math . pi NEW_LINE n2 = math . pi NEW_LINE x = abs ( n1 ) + abs ( n2 ) NEW_LINE if n1 >= 0 and n2 >= 0 : NEW_LINE INDENT print ( ' % d ▁ % d ▁ % d ▁ % d ' % ( 0 , x , x , 0 ) ) NEW_LINE DEDENT elif n1 < 0 and n2 >= 0 : NEW_LINE INDENT print ( ' - % d ▁ % d ▁ % d ▁ % d ' % ( x , 0 , 0 , 0 , x ) ) NEW_LINE DEDENT elif n1 < 0 and n2 < 0 : NEW_LINE INDENT print ( ' - % d ▁ % d ▁ % d ▁ % d ▁ - % d ' % ( x , 0 , 0 , 0 , x ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' % d ▁ - % d ▁ % d ▁ % d ▁ % d ' % ( 0 , x , x , 0 , 0 ) ) NEW_LINE DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT s = sys . stdin . read ( ) NEW_LINE K = int ( sys . argv [ 1 ] ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( " Error : ▁ % s " % sys . exc_info ( ) [ 0 ] ) NEW_LINE return 1 NEW_LINE DEDENT subs = set ( ) NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT index = i NEW_LINE for j in range ( K ) : NEW_LINE INDENT if index + 1 + j <= len ( s ) : NEW_LINE INDENT subs . add ( s [ index : index + 1 + j ] ) NEW_LINE DEDENT DEDENT DEDENT subs2 = list ( subs ) NEW_LINE subs2 . sort ( ) NEW_LINE print ( subs2 [ K - 1 ] ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Solution ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . memo = [ 0 , 1 ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT if N < len ( self . memo ) : NEW_LINE INDENT return self . memo [ N ] NEW_LINE DEDENT for i in range ( len ( self . memo ) , N + 1 ) : NEW_LINE INDENT self . memo [ i - 1 ] = self . memo [ i - 2 ] NEW_LINE DEDENT return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 1 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 1 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 1 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 1 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 0 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT def fib ( self , N ) : NEW_LINE INDENT self . memo [ N ] = 1 NEW_LINE return self . memo [ N ] NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE from string NEW_LINE import string NEW_LINE import string NEW_LINE if string is None : NEW_LINE INDENT return string NEW_LINE DEDENT
def cos_x_serities_sum ( x , n ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE math = math NEW_LINE DEDENT
def GFG ( N , S ) : NEW_LINE INDENT i = ( ( float ( N ) * float ( N + 1 ) ) / 4 ) - ( ( float ( S + 1 ) / 2 ) ) NEW_LINE return i NEW_LINE DEDENT
def multiple_of_three ( K , dig0 , dig1 ) : NEW_LINE INDENT import sys NEW_LINE sum = 0 NEW_LINE temp = ( dig0 + dig1 ) % 10 NEW_LINE sum = dig0 + dig1 NEW_LINE if K == 2 : NEW_LINE INDENT if sum % 3 == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT sum += temp NEW_LINE numberof_groups = ( K - 3 ) // 4 NEW_LINE remnumberof_digits = ( K - 3 ) % 4 NEW_LINE sum += ( numberof_groups * 20 ) NEW_LINE for i in range ( remnumberof_digits ) : NEW_LINE INDENT temp = ( 2 * temp ) % 10 NEW_LINE sum += temp NEW_LINE DEDENT if sum % 3 == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT
def code_chef ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = sys . stdin . tell ( ) NEW_LINE a = [ ] NEW_LINE b = [ ] NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE sum += a [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT b . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT b . sort ( ) NEW_LINE ans = b [ n - 1 ] + b [ n - 2 ] NEW_LINE if sum <= ans : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def count_occ ( s ) : NEW_LINE INDENT cnt = 0 NEW_LINE for i in range ( len ( s ) - 3 ) : NEW_LINE INDENT c , l , a , p = 0 , 0 , 0 , 0 , 0 NEW_LINE for j in range ( i , i + 4 ) : NEW_LINE INDENT if s [ j ] == ' c ' : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif s [ j ] == ' l ' : NEW_LINE INDENT l += 1 NEW_LINE DEDENT elif s [ j ] == ' a ' : NEW_LINE INDENT a += 1 NEW_LINE DEDENT elif s [ j ] == ' p ' : NEW_LINE INDENT p += 1 NEW_LINE DEDENT DEDENT if c == 1 and l == 1 and a == 1 and p == 1 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT
def count_steps ( x , y ) : NEW_LINE INDENT import sys NEW_LINE if x % y == 0 : NEW_LINE INDENT return x // y NEW_LINE DEDENT return x // y + count_steps ( y , x % y ) NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT sr = math . sqrt ( x ) NEW_LINE return ( ( sr - math . floor ( sr ) ) == 0 ) NEW_LINE DEDENT
def area_inscribed ( P , B , H ) : NEW_LINE INDENT import math NEW_LINE PI = 3.14159265 NEW_LINE return ( ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT res = sys . stdin . read ( 256 ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT res = sys . stdin . read ( 256 ) NEW_LINE DEDENT while res : NEW_LINE INDENT N = res . find ( ' ▁ ' ) NEW_LINE if N == - 1 : NEW_LINE INDENT break NEW_LINE DEDENT replaces = [ res [ 0 ] ] * 256 NEW_LINE for i in range ( N ) : NEW_LINE INDENT replaces [ i ] = res [ i + 1 ] NEW_LINE DEDENT M = res [ : M ] NEW_LINE for i in range ( M ) : NEW_LINE INDENT c = res [ i + 1 ] NEW_LINE res [ i + 1 ] = replaces [ c ] if c in replaces else c NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT
def get_count ( v , n ) : NEW_LINE INDENT import numpy as np NEW_LINE v . sort ( ) NEW_LINE cnt = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT tmp = n - 1 - get_count ( v , n , v [ i ] - 1 ) NEW_LINE if tmp == v [ i ] : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT
def trailing_zeros ( N ) : NEW_LINE INDENT count_of_two , count_of_five = 0 , 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT val = i NEW_LINE while val % 2 == 0 and val > 0 : NEW_LINE INDENT val //= 2 NEW_LINE count_of_two += i NEW_LINE DEDENT while val % 5 == 0 and val > 0 : NEW_LINE INDENT val //= 5 NEW_LINE count_of_five += i NEW_LINE DEDENT DEDENT ans = min ( count_of_two , count_of_five ) NEW_LINE return ans NEW_LINE DEDENT
def gf_int ( n ) : NEW_LINE INDENT res = 0 NEW_LINE d = 1 NEW_LINE while n > 0 : NEW_LINE INDENT if n % 10 != 0 : NEW_LINE INDENT res += ( n % 10 ) * d NEW_LINE d *= 10 NEW_LINE DEDENT n //= 10 NEW_LINE DEDENT return res NEW_LINE def is_equal ( a , b ) : NEW_LINE INDENT if remove_zero ( a ) + remove_zero ( b ) == remove_zero ( a + b ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT a , b = 105 , 106 NEW_LINE if is_equal ( a , b ) == True : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import os NEW_LINE import math NEW_LINE import random NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import math NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import cos NEW_LINE import math NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE import math NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import locale NEW_LINE import string NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . scn = sys . stdin . read ( ) NEW_LINE self . size = len ( self . scn ) NEW_LINE self . arr = [ ] NEW_LINE for i in range ( self . size ) : NEW_LINE INDENT self . arr . append ( self . scn . read ( ) ) NEW_LINE DEDENT print ( self . asd ( self . arr ) ) NEW_LINE DEDENT def asd ( self . arr ) : NEW_LINE INDENT self . arr . sort ( ) NEW_LINE return self . arr [ len ( self . arr ) // 2 ] NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a , b = int ( sys . stdin . read ( ) ) , int ( sys . stdin . read ( ) ) NEW_LINE count = 0 NEW_LINE while True : NEW_LINE INDENT if a > 0 and b > 0 : NEW_LINE INDENT count += 1 NEW_LINE a -= 1 NEW_LINE b -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT ans = a // 2 + b // 2 NEW_LINE print ( count , ans ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' No ▁ good ▁ input ▁ found ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import csv NEW_LINE import csv NEW_LINE import math NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import csv NEW_LINE import sys NEW_LINE def readline ( ) : NEW_LINE INDENT return None NEW_LINE DEDENT try : NEW_LINE INDENT return sys . stdin . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def total_pairs ( s1 , s2 ) : NEW_LINE INDENT count = 0 NEW_LINE arr1 = [ 0 ] * 7 NEW_LINE arr2 = [ 0 ] * 7 NEW_LINE for c in s1 : NEW_LINE INDENT set_bits = len ( ord ( c ) ) NEW_LINE arr1 [ set_bits ] += 1 NEW_LINE DEDENT for c in s2 : NEW_LINE INDENT set_bits = len ( ord ( c ) ) NEW_LINE arr2 [ set_bits ] += 1 NEW_LINE DEDENT for i in range ( 1 , 6 + 1 ) : NEW_LINE INDENT count += ( arr1 [ i ] * arr2 [ i ] ) NEW_LINE DEDENT return count NEW_LINE DEDENT
def count_sub_seq ( i , sum , cnt , a , n ) : NEW_LINE INDENT if i == n : NEW_LINE INDENT if sum == 0 and cnt > 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE ans += count_sub_seq ( i + 1 , sum , cnt , a , n ) NEW_LINE ans += count_sub_seq ( i + 1 , sum + a [ i ] , cnt + 1 , a , n ) NEW_LINE return ans NEW_LINE DEDENT
def Decoding ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE s = [ ] NEW_LINE newS = [ ] NEW_LINE input = sys . stdin . read ( n ) NEW_LINE s = list ( input ) NEW_LINE mid = ( n - 1 ) // 2 NEW_LINE counter = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT temp = i + 1 NEW_LINE if n % 2 == 0 : NEW_LINE INDENT newS . append ( s [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT newS . append ( s [ i ] ) NEW_LINE DEDENT if counter >= 0 : NEW_LINE INDENT counter = counter - temp NEW_LINE DEDENT else : NEW_LINE INDENT counter = counter + temp NEW_LINE DEDENT DEDENT print ( ' ' . join ( newS ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import numpy as np NEW_LINE a = np . random . randint ( 1 , 4 ) NEW_LINE n = np . random . randint ( 1 , 4 ) NEW_LINE m = np . random . randint ( 1 , 4 ) NEW_LINE count = 0 NEW_LINE for i in range ( 1 , np . power ( i + a , n ) + 1 ) : NEW_LINE INDENT x = int ( np . power ( i + a , n ) ) NEW_LINE y = get_count ( x ) NEW_LINE if y == i : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE def get_count ( x ) : NEW_LINE INDENT count = 0 NEW_LINE while x > 0 : NEW_LINE INDENT count += x % 10 NEW_LINE x //= 10 NEW_LINE DEDENT return count NEW_LINE DEDENT return np . array ( [ get_count ( x ) for x in range ( 1 , len ( x ) + 1 ) ] ) NEW_LINE DEDENT
def pivoted_binary_search ( arr , n , key ) : NEW_LINE INDENT pivot = find_pivot ( arr , 0 , n - 1 ) NEW_LINE if pivot == - 1 : NEW_LINE INDENT return binary_search ( arr , 0 , n - 1 , key ) NEW_LINE DEDENT if arr [ pivot ] == key : NEW_LINE INDENT return pivot NEW_LINE DEDENT if arr [ 0 ] <= key : NEW_LINE INDENT return binary_search ( arr , 0 , pivot - 1 , key ) NEW_LINE DEDENT return binary_search ( arr , pivot + 1 , n - 1 , key ) NEW_LINE DEDENT def find_pivot ( arr , low , high ) : NEW_LINE INDENT if high < low : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if high == low : NEW_LINE INDENT return low NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if mid < high and arr [ mid ] > arr [ mid + 1 ] : NEW_LINE INDENT return mid NEW_LINE DEDENT if mid > low and arr [ mid ] < arr [ mid - 1 ] : NEW_LINE INDENT return ( mid - 1 ) NEW_LINE DEDENT if arr [ low ] >= arr [ mid ] : NEW_LINE INDENT return find_pivot ( arr , low , mid - 1 ) NEW_LINE DEDENT return find_pivot ( arr , mid + 1 , high ) NEW_LINE DEDENT def binary_search ( arr , low , high , key ) : NEW_LINE INDENT if high < low : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if key == arr [ mid ] : NEW_LINE INDENT return mid NEW_LINE DEDENT if key > arr [ mid ] : NEW_LINE INDENT return binary_search ( arr , ( mid + 1 ) , high , key ) NEW_LINE DEDENT return binary_search ( arr , low , ( mid - 1 ) , key ) NEW_LINE DEDENT
def hoc_python ( ) : NEW_LINE INDENT import sys NEW_LINE n , mod = 1000000007 , 1000000007 NEW_LINE n = int ( n ) NEW_LINE res = 0 NEW_LINE c = np . zeros ( ( 4050 , 4050 ) ) NEW_LINE dp = np . zeros ( 4050 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT c [ i ] [ 0 ] = 1 NEW_LINE for j in range ( 1 , i ) : NEW_LINE INDENT c [ i ] [ j ] = ( c [ i - 1 ] [ j - 1 ] + c [ i - 1 ] [ j ] ) % mod NEW_LINE DEDENT c [ i ] [ i ] = 1 NEW_LINE DEDENT dp [ 0 ] = 1 NEW_LINE dp [ 1 ] = 1 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT dp [ i ] = ( dp [ i ] + dp [ j ] * c [ i - 1 ] [ j ] ) % mod NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT g = dp [ i ] * c [ n ] [ i ] % mod NEW_LINE res = ( res + g ) % mod NEW_LINE DEDENT print ( res ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . random NEW_LINE import os NEW_LINE import sys NEW_LINE class A843 ( np . array ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT np . random . seed ( 0 ) NEW_LINE N = len ( sys . stdin . readline ( ) . strip ( ) ) NEW_LINE P = [ ( n , i ) for n in range ( N ) ] NEW_LINE P . sort ( key = lambda x : x [ 1 ] ) NEW_LINE output = [ ] NEW_LINE self . lineCount = 0 NEW_LINE self . used = [ False ] * N NEW_LINE for n in range ( N ) : NEW_LINE INDENT if not self . used [ n ] : NEW_LINE INDENT self . lineCount += 1 NEW_LINE count = 0 NEW_LINE pos = n NEW_LINE line = [ ] NEW_LINE while not self . used [ pos ] : NEW_LINE INDENT count += 1 NEW_LINE self . used [ pos ] = True NEW_LINE line . append ( ' ▁ ' + str ( pos + 1 ) ) NEW_LINE pos = self . P [ pos ] [ 0 ] NEW_LINE DEDENT DEDENT output . append ( ' % d % s \n ' % ( count , line ) ) NEW_LINE DEDENT DEDENT DEDENT print ( linecount ) NEW_LINE sys . stdout . write ( ' ' . join ( output ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE DEDENT else : NEW_LINE INDENT import sys NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE DEDENT else : NEW_LINE INDENT import string NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE DEDENT else : NEW_LINE INDENT import string NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE DEDENT else : NEW_LINE INDENT import string NEW_LINE DEDENT if sys . version_info [ 0 ] < 3 : NEW_LINE INDENT import string NEW_LINE DEDENT else : NEW_LINE INDENT import string NEW_LINE DEDENT return string NEW_LINE DEDENT
def p090 ( ) : NEW_LINE INDENT print ( eval ( ' p090' ) ) NEW_LINE count = 0 NEW_LINE for i in range ( ( 1 << 10 ) ) : NEW_LINE INDENT for j in range ( i , ( 1 << 10 ) ) : NEW_LINE INDENT if len ( bin ( i ) ) == 6 and len ( bin ( j ) ) == 6 and is_order_valid ( i , j ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return str ( count ) NEW_LINE DEDENT
def load_adj_list ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE class Graph ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . total_vertex = 0 NEW_LINE self . adj_list = [ ] NEW_LINE for i in range ( self . total_vertex ) : NEW_LINE INDENT tmp = [ ] NEW_LINE idx1 = sys . stdin . readline ( ) . strip ( ) NEW_LINE degree = sys . stdin . readline ( ) . strip ( ) NEW_LINE for j in range ( degree ) : NEW_LINE INDENT idx2 = sys . stdin . readline ( ) . strip ( ) NEW_LINE tmp . append ( idx2 ) NEW_LINE DEDENT self . adj_list . append ( tmp ) NEW_LINE DEDENT DEDENT DEDENT def print_adj_list ( self ) : NEW_LINE INDENT self . adj_matrix = [ [ ] for i in range ( self . total_vertex ) ] NEW_LINE for i in range ( self . adj_list ) : NEW_LINE INDENT vertexes = self . adj_list [ i ] NEW_LINE for j in range ( self . total_vertex ) : NEW_LINE INDENT if j in vertexes : NEW_LINE INDENT self . adj_matrix [ i ] [ j ] = 1 NEW_LINE print ( '1' , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT self . adj_matrix [ i ] [ j ] = 0 NEW_LINE print ( '0' , end = ' ▁ ' ) NEW_LINE DEDENT if j != self . total_vertex - 1 : NEW_LINE INDENT print ( ' ▁ ' , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . total_vertex = 0 NEW_LINE self . adj_list = [ ] NEW_LINE DEDENT def load_adj_list ( self ) : NEW_LINE INDENT self . total_vertex = 0 NEW_LINE self . adj_list = [ ] NEW_LINE DEDENT def load_adj_list ( self ) : NEW_LINE INDENT self . total_vertex = 0 NEW_LINE self . adj_list = [ ] NEW_LINE for i in range ( self . total_vertex ) : NEW_LINE INDENT self . adj_list . append ( self . adj_list [ i ] ) NEW_LINE DEDENT return self . adj_list NEW_LINE DEDENT DEDENT return Main NEW_LINE DEDENT
def main1 ( ) : NEW_LINE INDENT import string NEW_LINE import numpy as np NEW_LINE import math NEW_LINE n = int ( math . floor ( math . pi / 100 ) ) NEW_LINE m = int ( math . floor ( math . pi / 100 ) ) NEW_LINE pic = np . zeros ( ( n , m ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT temp = math . pi / 100 NEW_LINE for j in range ( m ) : NEW_LINE INDENT pic [ i ] [ j ] = temp [ j ] NEW_LINE DEDENT DEDENT inc , inc1 = 0 , 0 NEW_LINE come_in = np . zeros ( 4 ) NEW_LINE if n > 1 or m > 1 : NEW_LINE INDENT for x in range ( n - 1 ) : NEW_LINE INDENT for y in range ( m - 1 ) : NEW_LINE INDENT for i in range ( x , 2 + x ) : NEW_LINE INDENT for j in range ( y , 2 + y ) : NEW_LINE INDENT if pic [ i ] [ j ] == ' f ' and come_in [ 0 ] == False : NEW_LINE INDENT inc += 1 NEW_LINE come_in [ 0 ] = True NEW_LINE DEDENT elif pic [ i ] [ j ] == ' a ' and come_in [ 1 ] == False : NEW_LINE INDENT inc += 1 NEW_LINE come_in [ 1 ] = True NEW_LINE DEDENT elif pic [ i ] [ j ] == ' c ' and come_in [ 2 ] == False : NEW_LINE INDENT inc += 1 NEW_LINE come_in [ 2 ] = True NEW_LINE DEDENT elif pic [ i ] [ j ] == ' e ' and come_in [ 3 ] == False : NEW_LINE INDENT inc += 1 NEW_LINE come_in [ 3 ] = True NEW_LINE DEDENT DEDENT DEDENT DEDENT if inc == 4 : NEW_LINE INDENT inc1 += 1 NEW_LINE DEDENT inc = 0 NEW_LINE np . fill ( come_in , False ) NEW_LINE DEDENT DEDENT print ( inc1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( ' / etc / init . d / ' ) NEW_LINE inp = f . read ( ) . strip ( ) . split ( ' ▁ ' ) NEW_LINE stk = [ ] NEW_LINE for c in inp : NEW_LINE INDENT if not stk : NEW_LINE INDENT stk . append ( c ) NEW_LINE continue NEW_LINE DEDENT top = stk [ - 1 ] NEW_LINE if top == c : NEW_LINE INDENT stk . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT stk . append ( c ) NEW_LINE DEDENT DEDENT if not stk : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . X , self . Y , self . E = sys . stdin . read ( ) . strip ( ) . split ( ' ▁ ' ) NEW_LINE self . x , self . y = np . array ( self . x ) , np . array ( self . y ) NEW_LINE self . g = [ [ ] ] NEW_LINE self . vis = [ False ] NEW_LINE self . match_to = [ False ] * ( self . X + self . Y ) NEW_LINE self . match_to . append ( - 1 ) NEW_LINE DEDENT def dfs ( v ) : NEW_LINE INDENT if v < 0 : NEW_LINE INDENT return True NEW_LINE DEDENT for u in self . g [ v ] : NEW_LINE INDENT if self . vis [ u ] : NEW_LINE INDENT continue NEW_LINE DEDENT self . vis [ u ] = True NEW_LINE if self . dfs ( v ) : NEW_LINE INDENT self . match_to [ u ] = v NEW_LINE self . match_to [ v ] = u NEW_LINE return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def count_mountains ( a , n ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE A = np . zeros ( ( n + 2 , n + 2 ) ) NEW_LINE count = 0 NEW_LINE for i in range ( n + 2 ) : NEW_LINE INDENT for j in range ( n + 2 ) : NEW_LINE INDENT if ( i == 0 or j == 0 or i == n + 1 or j == n + 1 ) : NEW_LINE INDENT A [ i ] [ j ] = int ( a [ i - 1 ] [ j - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT A [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( A [ i ] [ j ] > A [ i - 1 ] [ j ] and A [ i ] [ j ] > A [ i + 1 ] [ j ] and A [ i ] [ j ] > A [ i ] [ j - 1 ] and A [ i ] [ j ] > A [ i ] [ j + 1 ] and A [ i ] [ j ] > A [ i - 1 ] [ j - 1 ] and A [ i ] [ j ] > A [ i + 1 ] [ j + 1 ] and A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] and A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] and A [ i ] [ j ] > A [ i + 1 ] [ j - 1 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT N = 100005 NEW_LINE d , pre = [ 0 ] * N , [ 0 ] * N NEW_LINE def Positive_Divisors ( ) : NEW_LINE INDENT for i in range ( 1 , N ) : NEW_LINE INDENT for j in range ( 1 , i + 1 ) : NEW_LINE INDENT if i % j == 0 : NEW_LINE INDENT if j * j == i : NEW_LINE INDENT d [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] += 2 NEW_LINE DEDENT DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 2 , N ) : NEW_LINE INDENT if d [ i ] == d [ i - 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT pre [ i ] = ans NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT Positive_Divisors ( ) NEW_LINE n = 15 NEW_LINE print ( pre [ n ] ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin NEW_LINE t = len ( s ) NEW_LINE m = len ( s ) NEW_LINE memory = [ 0 ] * m NEW_LINE alloc_idx = 0 NEW_LINE for j in range ( t ) : NEW_LINE INDENT if s [ j ] == ' alloc ' : NEW_LINE INDENT n = s [ j ] NEW_LINE data = 0 NEW_LINE can_alloc = False NEW_LINE for i in range ( m ) : NEW_LINE INDENT if not data : NEW_LINE INDENT data += 1 NEW_LINE DEDENT else : NEW_LINE INDENT data = 0 NEW_LINE DEDENT if data == n : NEW_LINE INDENT can_alloc = True NEW_LINE data = i - n + 1 NEW_LINE DEDENT DEDENT if can_alloc : NEW_LINE INDENT alloc_idx += 1 NEW_LINE for i in range ( data , data + n ) : NEW_LINE INDENT memory [ i ] = alloc_idx NEW_LINE DEDENT DEDENT print ( alloc_idx ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NULL ' ) NEW_LINE DEDENT DEDENT elif s [ j ] == ' erase ' : NEW_LINE INDENT x = s [ j ] NEW_LINE if x <= 0 : NEW_LINE INDENT print ( ' ILLEGAL _ ERASE _ ARGUMENT ' ) NEW_LINE DEDENT has_erasesed = False NEW_LINE for i in range ( m ) : NEW_LINE INDENT if memory [ i ] == x : NEW_LINE INDENT memory [ i ] = 0 NEW_LINE has_erasesed = True NEW_LINE DEDENT DEDENT if not has_erasesed : NEW_LINE INDENT print ( ' ILLEGAL _ ERASE _ ARGUMENT ' ) NEW_LINE DEDENT DEDENT elif s [ j ] == ' defragment ' : NEW_LINE INDENT d = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if not data : NEW_LINE INDENT d += 1 NEW_LINE DEDENT else : NEW_LINE INDENT memory [ i - d ] = data NEW_LINE DEDENT DEDENT for i in range ( m - d , m ) : NEW_LINE INDENT memory [ i ] = 0 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( ' h ' ) NEW_LINE DEDENT DEDENT DEDENT
def area_of_regular_polygon ( n , len_ ) : NEW_LINE INDENT import math NEW_LINE P = ( len_ * n ) NEW_LINE A = len_ / ( 2 * math . tan ( ( 180 / n ) * math . pi / 180 ) ) NEW_LINE area = ( P * A ) / 2 NEW_LINE return area NEW_LINE DEDENT
def GFG ( data , n ) : NEW_LINE INDENT global freq NEW_LINE freq = [ 0 ] * MAX NEW_LINE for c in data [ n : ] : NEW_LINE INDENT freq [ ord ( c ) ] += 1 NEW_LINE DEDENT for ch in data [ n - 1 : - 1 ] : NEW_LINE INDENT if freq [ ch ] == 1 : NEW_LINE INDENT return ( ' % d ' % ch ) NEW_LINE DEDENT DEDENT return ' - 1' NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE n = len ( sys . argv ) NEW_LINE a , b = [ 0 ] * n , [ 0 ] * n NEW_LINE left , right = math . inf , math . inf NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = math . floor ( math . log ( a [ i ] , 2 ) ) NEW_LINE b [ i ] = math . floor ( math . log ( b [ i ] , 2 ) ) NEW_LINE left = min ( a [ i ] , left ) NEW_LINE right = max ( b [ i ] , right ) NEW_LINE DEDENT ans = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == left and b [ i ] == right : NEW_LINE INDENT ans = i + 1 NEW_LINE break NEW_LINE DEDENT DEDENT sys . stdout . write ( str ( ans ) ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT
def GFG ( x ) : return ( 1 / ( 1 + x ) ) NEW_LINE def BooleRule ( a , b ) : NEW_LINE INDENT n = 4 NEW_LINE global h NEW_LINE h = int ( ( b - a ) / n ) NEW_LINE sum = 0 NEW_LINE bl = ( 7 * y ( a ) + 32 * y ( a + h ) + 12 * y ( a + 2 * h ) + 32 * y ( a + 3 * h ) + 7 * y ( a + 4 * h ) ) * 2 * h / 45 NEW_LINE sum = sum + bl NEW_LINE return sum NEW_LINE DEDENT
def GFG ( arr , i , curr , n , m ) : NEW_LINE INDENT import sys NEW_LINE if i == n : NEW_LINE INDENT if curr == m : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT if v [ i ] [ curr ] : NEW_LINE INDENT return dp [ i ] [ curr ] NEW_LINE DEDENT v [ i ] [ curr ] = True NEW_LINE l = find_len ( arr , i + 1 , curr , n , m ) NEW_LINE r = find_len ( arr , i + 1 , curr & arr [ i ] , n , m ) NEW_LINE dp [ i ] [ curr ] = l NEW_LINE if r != - 1 : NEW_LINE INDENT dp [ i ] [ curr ] = max ( dp [ i ] [ curr ] , r + 1 ) NEW_LINE DEDENT return dp [ i ] [ curr ] NEW_LINE DEDENT
def GFG ( arr , i , curr , n , m ) : NEW_LINE INDENT if i == n : NEW_LINE INDENT if curr == m : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT if v [ i ] [ curr ] : NEW_LINE INDENT return dp [ i ] [ curr ] NEW_LINE DEDENT v [ i ] [ curr ] = True NEW_LINE l = find_len ( arr , i + 1 , curr , n , m ) NEW_LINE r = find_len ( arr , i + 1 , curr | arr [ i ] , n , m ) NEW_LINE dp [ i ] [ curr ] = l NEW_LINE if r != - 1 : NEW_LINE INDENT dp [ i ] [ curr ] = max ( dp [ i ] [ curr ] , r + 1 ) NEW_LINE DEDENT return dp [ i ] [ curr ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE for _ in range ( sys . maxsize ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE if n == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT cost = np . zeros ( ( n + 1 , n + 1 ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT a = np . random . randint ( 0 , n - 1 ) NEW_LINE b = np . random . randint ( 0 , n - 1 ) NEW_LINE c = np . random . randint ( 0 , n - 1 ) NEW_LINE cost [ a ] [ b ] = cost [ b ] [ a ] = c NEW_LINE ans += cost [ a ] [ b ] * 2 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT reaf = 0 NEW_LINE ii , jj = 0 , 0 NEW_LINE for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if cost [ i ] [ j ] > 0 or cost [ i ] [ j ] == - 1 : NEW_LINE INDENT reaf += 1 NEW_LINE ii = i NEW_LINE jj = j NEW_LINE DEDENT DEDENT if i != 1 and reaf == 1 : NEW_LINE INDENT ans -= cost [ ii ] [ jj ] * 2 NEW_LINE cost [ ii ] [ jj ] = cost [ jj ] [ ii ] = - 1 NEW_LINE DEDENT DEDENT print ( ans - max ( 1 ) ) NEW_LINE DEDENT def max ( m ) : NEW_LINE INDENT cut = 0 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if cost [ m ] [ i ] > 0 : NEW_LINE INDENT cost [ i ] [ m ] = 0 NEW_LINE cut = max ( cut , cost [ m ] [ i ] + max ( i ) ) NEW_LINE DEDENT DEDENT return cut NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE S = string . strip ( S ) NEW_LINE N = int ( S ) NEW_LINE ans = 0 NEW_LINE for i in range ( 3 , len ( S ) - 1 + 1 ) : NEW_LINE INDENT ans += int ( math . pow ( 3 , i ) ) - 3 * int ( math . pow ( 2 , i ) ) + 3 NEW_LINE DEDENT ans += math . pow ( 3 , int ( S [ - 1 ] ) ) , S [ - 2 ] NEW_LINE ans += math . pow ( 5 , int ( S [ - 1 ] ) ) , S [ - 2 ] NEW_LINE ans += math . pow ( 7 , int ( S [ - 1 ] ) ) , S [ - 2 ] NEW_LINE print ( ans ) NEW_LINE def f ( a , m ) : NEW_LINE INDENT if m >= 0 : NEW_LINE INDENT return math . pow ( a + 3 * int ( math . pow ( 10 , m ) ) , m - 1 ) + math . pow ( a + 5 * int ( math . pow ( 10 , m ) ) , m - 1 ) + math . pow ( a + 7 * int ( math . pow ( 10 , m ) ) , m - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT s = str ( a ) NEW_LINE if s . find ( '3' ) != - 1 and s . find ( '5' ) != - 1 and s . find ( '7' ) != - 1 and a <= N : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT DEDENT return math . pow ( 3 , int ( S [ - 1 ] ) ) + math . pow ( 5 , int ( S [ - 1 ] ) ) + math . pow ( 7 , int ( S [ - 1 ] ) ) + math . pow ( 7 , int ( S [ - 1 ] ) ) NEW_LINE DEDENT
def min_diff ( arr , n , k ) : NEW_LINE INDENT result = sys . maxsize NEW_LINE arr . sort ( ) NEW_LINE for i in range ( 0 , n - k + 1 ) : NEW_LINE INDENT result = min ( result , arr [ i + k - 1 ] - arr [ i ] ) NEW_LINE DEDENT return result NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE t = [ ] NEW_LINE def solve ( ) : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE while n > 0 : NEW_LINE INDENT n -= 1 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT t . append ( sys . stdin . read ( n ) ) NEW_LINE DEDENT print ( solve ( ) ) NEW_LINE DEDENT DEDENT def solve ( ) : NEW_LINE INDENT L , R = 0 , 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT if L < t [ i ] : NEW_LINE INDENT L = t [ i ] NEW_LINE DEDENT elif R < t [ i ] : NEW_LINE INDENT R = t [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT return ' NO ' NEW_LINE DEDENT DEDENT return ' YES ' NEW_LINE DEDENT return solve NEW_LINE DEDENT
def problem1455b ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT x = sys . maxsize NEW_LINE val = 0 NEW_LINE turn = 0 NEW_LINE while val < x : NEW_LINE INDENT val += turn + 1 NEW_LINE turn += 1 NEW_LINE DEDENT if val == x : NEW_LINE INDENT print ( turn ) NEW_LINE DEDENT elif val == x + 1 : NEW_LINE INDENT print ( turn + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( turn ) NEW_LINE DEDENT DEDENT DEDENT
def Mean ( arr , n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + arr [ i ] NEW_LINE DEDENT return sum / n NEW_LINE def MeanAbsDevtion ( arr , n ) : NEW_LINE INDENT absSum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT absSum = absSum + abs ( arr [ i ] - Mean ( arr , n ) ) NEW_LINE DEDENT return absSum / n NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 10 , 15 , 15 , 17 , 18 , 21 ] NEW_LINE n = len ( arr ) NEW_LINE print ( MeanAbsDevtion ( arr , n ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def p204 ( ) : NEW_LINE INDENT print ( int ( count ( 0 , 1 ) ) ) NEW_LINE LIMIT = math . pow ( 10 , 9 ) NEW_LINE primes = math . list_primes ( 100 ) NEW_LINE def count ( prime_index , product ) : NEW_LINE INDENT if prime_index == len ( primes ) : NEW_LINE INDENT return 1 if product <= LIMIT else 0 NEW_LINE DEDENT else : NEW_LINE INDENT count = 0 NEW_LINE while product <= LIMIT : NEW_LINE INDENT count += count ( prime_index + 1 , product ) NEW_LINE product *= primes [ prime_index ] NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT return ' ' . join ( str ( x ) for x in range ( 100 ) ) NEW_LINE DEDENT
def maximum_XOR ( n , l , r ) : NEW_LINE INDENT import math NEW_LINE x = 0 NEW_LINE for i in range ( int ( math . log ( r ) / math . log ( 2 ) ) , - 1 , - 1 ) : NEW_LINE INDENT if ( n & ( 1 << i ) ) > 0 : NEW_LINE INDENT if ( x > r or ( x + ( 1 << i ) - 1 < l ) ) : NEW_LINE INDENT x ^= ( 1 << i ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( x ^ ( 1 << i ) ) <= r : NEW_LINE INDENT x ^= ( 1 << i ) NEW_LINE DEDENT DEDENT DEDENT return n ^ x NEW_LINE DEDENT
def max_primefactor_num ( N ) : NEW_LINE INDENT import numpy as np NEW_LINE arr = np . zeros ( N + 5 ) NEW_LINE for i in range ( 3 , N + 1 , 2 ) : NEW_LINE INDENT if not arr [ i ] : NEW_LINE INDENT for j in range ( i * i , N + 1 , i ) : NEW_LINE INDENT arr [ j ] = True NEW_LINE DEDENT DEDENT DEDENT prime = np . zeros ( N + 5 ) NEW_LINE prime [ 2 ] = True NEW_LINE for i in range ( 3 , N + 1 , 2 ) : NEW_LINE INDENT if not arr [ i ] : NEW_LINE INDENT prime [ 2 ] = True NEW_LINE DEDENT DEDENT i , ans = 0 , 1 NEW_LINE while ans * prime [ i ] <= N and i < len ( prime ) : NEW_LINE INDENT ans *= prime [ i ] NEW_LINE i += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT
def count_trailing_zeros ( n ) : NEW_LINE INDENT import string NEW_LINE import string NEW_LINE import io NEW_LINE class GFG ( object ) : NEW_LINE INDENT def count_trailing_zeros ( n ) : NEW_LINE INDENT bit = string . ascii_lowercase [ n ] NEW_LINE bit1 = list ( bit ) NEW_LINE bit1 = bit1 . reverse ( ) NEW_LINE zero = 0 NEW_LINE for i in range ( 64 ) : NEW_LINE INDENT if bit1 [ i ] == '0' : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return zero NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 4 NEW_LINE ans = count_trailing_zeros ( n ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT return GFG ( ) NEW_LINE DEDENT
def input ( number_one , number_two , number_three ) : NEW_LINE INDENT import sys NEW_LINE class Shopping ( ) : NEW_LINE INDENT def input ( number_one , number_two , number_three ) : NEW_LINE INDENT one = number_one + number_two + number_three NEW_LINE two = 2 * ( number_one + number_two ) NEW_LINE three = 2 * ( number_one + number_three ) NEW_LINE four = 2 * ( number_two + number_three ) NEW_LINE print ( min ( min ( one , two ) , min ( three , four ) ) ) NEW_LINE DEDENT DEDENT def main ( a ) : NEW_LINE INDENT input ( a ) NEW_LINE instance = Shopping ( ) NEW_LINE num_one = input ( ) NEW_LINE num_two = input ( ) NEW_LINE num_three = input ( ) NEW_LINE instance . input ( num_one , num_two , num_three ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import random NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT os . environ [ ' wsgi . input ' ] = string NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT os . environ [ ' wsgi . input ' ] = string NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return None NEW_LINE DEDENT
def distinctSubString ( P , Q , K , N ) : NEW_LINE INDENT S = set ( ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum = 0 NEW_LINE s = " " NEW_LINE for j in range ( i , N ) : NEW_LINE INDENT pos = ord ( P [ j ] ) - ord ( ' a ' ) NEW_LINE sum += ord ( Q [ pos ] ) - ord ( '0' ) NEW_LINE s += P [ j ] NEW_LINE if sum <= K : NEW_LINE INDENT S . add ( s ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return len ( S ) NEW_LINE DEDENT
def make_even ( string ) : NEW_LINE INDENT data = list ( string ) NEW_LINE n = len ( data ) NEW_LINE even , index = None , None NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( data [ i ] - '0' ) % 2 == 0 : NEW_LINE INDENT even = ord ( data [ i ] ) NEW_LINE index = i NEW_LINE DEDENT if even <= ord ( data [ n - 1 ] ) - ord ( '0' ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if even == 0 : NEW_LINE INDENT return data NEW_LINE DEDENT swap ( data , index , n - 1 ) NEW_LINE return data NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT div = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT div [ i * j ] += 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( div [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def ProB ( ) : NEW_LINE INDENT import string NEW_LINE class ProB ( string ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . a , self . b = 0 , 0 NEW_LINE self . ans = 0 NEW_LINE self . ss = string . strip ( self . ss ) NEW_LINE self . aa = self . aa NEW_LINE self . a = len ( self . ss ) NEW_LINE self . ss = self . ss . strip ( self . ss ) NEW_LINE self . bb = self . bb NEW_LINE self . b = len ( self . ss ) NEW_LINE for i in range ( 1 , self . b + 1 ) : NEW_LINE INDENT self . mm [ i ] = self . mm [ i - 1 ] + self . bb [ i - 1 ] - '0' NEW_LINE DEDENT DEDENT DEDENT for i in range ( a ) : NEW_LINE INDENT if self . aa [ i ] == '0' : NEW_LINE INDENT self . ans += int ( self . mm [ b - a + i + 1 ] ) - self . mm [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT self . ans += int ( self . b - a + 1 ) - ( self . mm [ b - a + i + 1 ] - self . mm [ i ] ) NEW_LINE DEDENT DEDENT print ( self . ans ) NEW_LINE DEDENT
def GFG ( data ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE MAX_CHAR = 256 NEW_LINE def printDistinct ( data ) : NEW_LINE INDENT n = len ( data ) NEW_LINE count = [ 0 ] * MAX_CHAR NEW_LINE index = [ [ n ] * MAX_CHAR NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT count [ i ] = 0 NEW_LINE index [ i ] = n NEW_LINE DEDENT for x in data : NEW_LINE INDENT count [ x ] += 1 NEW_LINE if count [ x ] == 1 and x != ' ▁ ' : NEW_LINE INDENT index [ x ] = i NEW_LINE DEDENT if count [ x ] == 2 : NEW_LINE INDENT index [ x ] = n NEW_LINE DEDENT DEDENT index . sort ( ) NEW_LINE for i in range ( MAX_CHAR , len ( index ) ) : NEW_LINE INDENT sys . stdout . write ( data [ index [ i ] ] ) NEW_LINE DEDENT DEDENT def printDistinct ( data ) : NEW_LINE INDENT data = ' GeeksforGeeks ' NEW_LINE printDistinct ( data ) NEW_LINE DEDENT return data NEW_LINE DEDENT
def GFG ( x , k , m ) : NEW_LINE INDENT result = x NEW_LINE k -= 1 NEW_LINE while k > 0 : NEW_LINE INDENT result = int ( math . pow ( result , x ) ) NEW_LINE if result > m : NEW_LINE INDENT result %= m NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT
def converthenumber ( n ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE import os NEW_LINE import sys NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE from math import pi NEW_LINE from math import log as pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import sys NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stdout = sys . stdout NEW_LINE self . stderr = sys . stderr NEW_LINE self . stdout = None NEW_LINE self . pos = self . pos + 1 NEW_LINE self . pos = self . pos + 1 NEW_LINE self . pos = self . pos + 2 NEW_LINE self . pos = self . pos + 3 NEW_LINE self . pos = self . pos + 4 NEW_LINE self . pos = self . pos + 4 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos + 6 NEW_LINE self . pos = self . pos NEW_LINE DEDENT DEDENT DEDENT
def GFG ( n , an ) : return ( n * ( 1 + an ) ) / 2 NEW_LINE def trace ( n , m ) : NEW_LINE INDENT an = 1 + ( n - 1 ) * ( m + 1 ) NEW_LINE rowmajorsum = sn ( n , an ) NEW_LINE an = 1 + ( n - 1 ) * ( n + 1 ) NEW_LINE colmajorsum = sn ( n , an ) NEW_LINE return rowmajorsum + colmajorsum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT h , w = int ( sys . stdin . read ( ) ) , int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT field = [ ] NEW_LINE orbs = [ [ 0 ] * ( h + 1 ) * ( w + 1 ) ] NEW_LINE ingots = [ [ 0 ] * ( h + 1 ) * ( w + 1 ) ] NEW_LINE for i in range ( h ) : NEW_LINE INDENT field [ i ] = string . ascii_lowercase + field [ i ] NEW_LINE for j in range ( w - 1 , - 1 , - 1 ) : NEW_LINE INDENT orbs [ i ] [ j ] = orbs [ i ] [ j + 1 ] NEW_LINE if field [ i ] [ j ] == ' O ' : NEW_LINE INDENT orbs [ i ] [ j ] += 1 NEW_LINE DEDENT DEDENT DEDENT for j in range ( w ) : NEW_LINE INDENT for i in range ( h - 1 , - 1 , - 1 ) : NEW_LINE INDENT ingots [ i ] [ j ] = ingots [ i + 1 ] [ j ] NEW_LINE if field [ i ] [ j ] == ' I ' : NEW_LINE INDENT ingots [ i ] [ j ] += 1 NEW_LINE DEDENT DEDENT DEDENT total = 0 NEW_LINE for i in range ( h ) : NEW_LINE INDENT for j in range ( w ) : NEW_LINE INDENT if field [ i ] [ j ] == ' J ' : NEW_LINE INDENT total += orbs [ i ] [ j ] * ingots [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT print ( total ) NEW_LINE DEDENT
def count_divisors ( n , k ) : NEW_LINE INDENT import math NEW_LINE count , i = 0 , 0 NEW_LINE for i in range ( 1 , math . sqrt ( n ) ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT if i % k == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( n // i ) % k == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT if ( i * i == n ) and ( i % k == 0 ) : NEW_LINE INDENT count -= 1 NEW_LINE DEDENT return count NEW_LINE DEDENT
def count_divisors ( n , k ) : NEW_LINE INDENT import sys NEW_LINE count , i = 0 , 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if n % i == 0 and i % k == 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def GFG ( x , y , p ) : NEW_LINE INDENT res = 1 NEW_LINE x = x % p NEW_LINE while y > 0 : NEW_LINE INDENT if y % 2 == 1 : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT y = y >> 1 NEW_LINE x = ( x * x ) % p NEW_LINE DEDENT return res NEW_LINE DEDENT
def integer_points ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT t = 0 NEW_LINE DEDENT out = [ ] NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE p2 = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT p2 += ( sys . stdin . readline ( ) % 2 + 1 ) % 2 NEW_LINE DEDENT m = int ( sys . stdin . readline ( ) ) NEW_LINE q2 = 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT q2 += ( sys . stdin . readline ( ) % 2 + 1 ) % 2 NEW_LINE DEDENT out . append ( int ( p2 ) * q2 + int ( n - p2 ) * ( m - q2 ) ) NEW_LINE DEDENT for i in range ( t ) : NEW_LINE INDENT print ( out [ i ] ) NEW_LINE DEDENT DEDENT
def find_max_diff ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE if n < 2 : NEW_LINE INDENT print ( " Invalid ▁ " ) NEW_LINE return 0 NEW_LINE DEDENT min_val , max_val = sys . maxsize , sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] - i ) > max_val : NEW_LINE INDENT max_val = arr [ i ] - i NEW_LINE DEDENT if ( arr [ i ] - i ) < min_val : NEW_LINE INDENT min_val = arr [ i ] - i NEW_LINE DEDENT DEDENT return ( max_val - min_val ) NEW_LINE DEDENT
def B1150 ( ) : NEW_LINE INDENT import string NEW_LINE f = open ( ' B1150 . txt ' ) NEW_LINE n = int ( f . readline ( ) ) NEW_LINE arr = [ [ ' % d ' % k for k in line . split ( ) ] for line in f . readlines ( ) ] NEW_LINE print ( solve ( arr , n ) ) NEW_LINE def solve ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for k in range ( n ) : NEW_LINE INDENT if arr [ i ] [ k ] == ' . ' : NEW_LINE INDENT if i + 2 < n and k + 1 < n and k - 1 >= 0 : NEW_LINE INDENT if arr [ i ] [ k ] == ' . ' and arr [ i + 1 ] [ k ] == ' . ' and arr [ i + 1 ] [ k - 1 ] == ' . ' and arr [ i + 1 ] [ k + 1 ] == ' . ' and arr [ i + 2 ] [ k ] == ' . ' : NEW_LINE INDENT arr [ i ] [ k ] = ' # ' NEW_LINE arr [ i + 1 ] [ k ] = ' # ' NEW_LINE arr [ i + 1 ] [ k - 1 ] = ' # ' NEW_LINE arr [ i + 1 ] [ k + 1 ] = ' # ' NEW_LINE arr [ i + 2 ] [ k ] = ' # ' NEW_LINE DEDENT else : NEW_LINE INDENT return ' NO ' NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT return ' NO ' NEW_LINE DEDENT DEDENT DEDENT return ' YES ' NEW_LINE DEDENT return solve ( arr , n ) NEW_LINE DEDENT
def number_of_paths ( m , n ) : NEW_LINE INDENT count = np . zeros ( ( m , n ) ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT count [ i ] [ 0 ] = 1 NEW_LINE DEDENT for j in range ( n ) : NEW_LINE INDENT count [ 0 ] [ j ] = 1 NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT return count [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT a = [ ] NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( random . randint ( 0 , n ) ) NEW_LINE sum += a [ i ] NEW_LINE DEDENT if sum % n != 0 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT sum //= n NEW_LINE flag = False NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == sum : NEW_LINE INDENT flag = True NEW_LINE break NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( n , k ) : NEW_LINE INDENT if ( n >> ( k - 1 ) ) == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def setKthBit ( n , k ) : NEW_LINE INDENT return ( ( 1 << ( k - 1 ) ) | n ) NEW_LINE DEDENT def allBitsAreSet ( n ) : NEW_LINE INDENT if ( ( n + 1 ) & n ) == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def bitsAreInAltOrder ( n ) : NEW_LINE INDENT num = n ^ ( n >> 1 ) NEW_LINE return allBitsAreSet ( num ) NEW_LINE DEDENT def bitsAreInAltPatrnInGivenRange ( n , l , r ) : NEW_LINE INDENT if isKthBitSet ( n , r ) : NEW_LINE INDENT num = n NEW_LINE left_shift = r NEW_LINE DEDENT else : NEW_LINE INDENT num = setKthBit ( n , ( r + 1 ) ) NEW_LINE left_shift = r + 1 NEW_LINE DEDENT num = num & ( ( 1 << left_shift ) - 1 ) NEW_LINE num = num >> ( l - 1 ) NEW_LINE return bitsAreInAltOrder ( num ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 18 NEW_LINE l = 1 , 3 NEW_LINE if bitsAreInAltPatrnInGivenRange ( n , l , r ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT import math NEW_LINE import numpy as np NEW_LINE import numpy as np NEW_LINE class GFG ( np . ndarray ) : NEW_LINE INDENT def factorial ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return n * np . factorial ( n - 1 ) NEW_LINE DEDENT def nCr ( n , r ) : NEW_LINE INDENT return math . factorial ( n ) / ( math . factorial ( n - r ) ** 2 ) NEW_LINE DEDENT def NumberOfWays ( n , x , y ) : NEW_LINE INDENT return np . nCr ( 2 * n - x - y , n - x ) * math . factorial ( n ) ** 2 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n , x , y = 5 , 4 , 2 NEW_LINE print ( NumberOfWays ( n , x , y ) ) NEW_LINE DEDENT DEDENT return GFG ( ) NEW_LINE DEDENT
def common_prefix_util ( str1 , str2 ) : NEW_LINE INDENT import string NEW_LINE result = " " NEW_LINE n1 , n2 = len ( str1 ) , len ( str2 ) NEW_LINE for i , j in enumerate ( [ 0 , n1 - 1 , n2 - 1 ] ) : NEW_LINE INDENT if str1 [ i ] != str2 [ j ] : NEW_LINE INDENT break NEW_LINE DEDENT result += str1 [ i ] NEW_LINE DEDENT return ( result ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE N = len ( sys . argv ) NEW_LINE a = np . zeros ( N * 3 ) NEW_LINE for i in range ( N * 3 ) : NEW_LINE INDENT a [ i ] = ufuncs [ i ] NEW_LINE DEDENT a . sort ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( N , 3 * N , 2 ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT N = 0 NEW_LINE DEDENT a = [ ] NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT sys . stdin . close ( ) NEW_LINE count = 0 NEW_LINE valid = True NEW_LINE current = 1 NEW_LINE while valid : NEW_LINE INDENT count += 1 NEW_LINE current = a [ current ] NEW_LINE if current == 2 : NEW_LINE INDENT valid = False NEW_LINE DEDENT if count == N : NEW_LINE INDENT count = 0 NEW_LINE valid = False NEW_LINE DEDENT DEDENT if count == 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( count ) NEW_LINE DEDENT DEDENT
def p301 ( ) : NEW_LINE INDENT print ( eval ( ' p301 ( ) ' ) ) NEW_LINE def run ( ) : NEW_LINE INDENT a = 0 NEW_LINE b = 1 NEW_LINE for i in range ( 32 ) : NEW_LINE INDENT c = a + b NEW_LINE a = b NEW_LINE b = c NEW_LINE DEDENT return str ( a ) NEW_LINE DEDENT return run NEW_LINE DEDENT
def find_frequency_util ( arr , low , high , freq ) : NEW_LINE INDENT import numpy as np NEW_LINE if arr [ low ] == arr [ high ] : NEW_LINE INDENT freq [ arr [ low ] ] += high - low + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mid = ( low + high ) // 2 NEW_LINE find_frequency_util ( arr , low , mid , freq ) NEW_LINE find_frequency_util ( arr , mid + 1 , high , freq ) NEW_LINE DEDENT DEDENT
def p070 ( ) : NEW_LINE INDENT import math NEW_LINE print ( math . pow ( 10 , 7 ) ) NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return math . factorial ( ) NEW_LINE DEDENT return math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( math . factorial ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) NEW_LINE DEDENT
def intersection ( a , b , n , m ) : NEW_LINE INDENT i , j = 0 , 0 NEW_LINE while i < n and j < m : NEW_LINE INDENT if a [ i ] > b [ j ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif b [ j ] > a [ i ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( a [ i ] , end = ' ▁ ' ) NEW_LINE i += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT
def find_min ( a , n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += math . log ( a [ i ] ) NEW_LINE DEDENT x = int ( math . exp ( sum / n ) ) NEW_LINE return x + 1 NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT import math NEW_LINE if not b : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return math . gcd ( b , a % b ) NEW_LINE DEDENT DEDENT def lcmOfArray ( arr , n ) : NEW_LINE INDENT if n < 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT lcm = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lcm = ( lcm * arr [ i ] ) / math . gcd ( lcm , arr [ i ] ) NEW_LINE DEDENT return lcm NEW_LINE DEDENT def minPerfectSquare ( arr , n ) : NEW_LINE INDENT global minPerfectSq NEW_LINE lcm = lcmOfArray ( arr , n ) NEW_LINE minPerfectSq = int ( lcm ) NEW_LINE cnt = 0 NEW_LINE while lcm > 1 and lcm % 2 == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= 2 NEW_LINE DEDENT if cnt % 2 != 0 : NEW_LINE INDENT minPerfectSq *= 2 NEW_LINE DEDENT i = 3 NEW_LINE while lcm > 1 : NEW_LINE INDENT cnt = 0 NEW_LINE while lcm % i == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= i NEW_LINE DEDENT if cnt % 2 != 0 : NEW_LINE INDENT minPerfectSq *= i NEW_LINE DEDENT i += 2 NEW_LINE DEDENT return minPerfectSq NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 5 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minPerfectSquare ( arr , n ) ) NEW_LINE DEDENT
def subarray_count ( arr , n ) : NEW_LINE INDENT result = 0 NEW_LINE fast , slow = 0 , 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i ] - arr [ i - 1 ] == 1 : NEW_LINE INDENT fast += 1 NEW_LINE DEDENT else : NEW_LINE INDENT len_ = fast - slow + 1 NEW_LINE result += len_ * ( len_ - 1 ) / 2 NEW_LINE fast = i NEW_LINE slow = i NEW_LINE DEDENT DEDENT if fast != slow : NEW_LINE INDENT len_ = fast - slow + 1 NEW_LINE result += len_ * ( len_ - 1 ) / 2 NEW_LINE DEDENT return result NEW_LINE DEDENT
def main ( arg ) : NEW_LINE INDENT import sys NEW_LINE class class1 ( object ) : NEW_LINE INDENT def __init__ ( self , * args ) : NEW_LINE INDENT self . input = sys . stdin . read ( ) NEW_LINE self . t = int ( args ) NEW_LINE DEDENT DEDENT for t in range ( 0 , len ( arg ) ) : NEW_LINE INDENT n = int ( arg [ t ] ) NEW_LINE ans = 0 NEW_LINE flag = 0 NEW_LINE while n > 0 : NEW_LINE INDENT x = 0 NEW_LINE if n % 2 == 0 : NEW_LINE INDENT temp = n // 2 NEW_LINE if n % 4 == 0 and n > 8 : NEW_LINE INDENT temp = n - 1 NEW_LINE x += 1 NEW_LINE DEDENT n = temp NEW_LINE if flag == 0 : NEW_LINE INDENT flag = 1 NEW_LINE if x > 0 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += temp NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT flag = 0 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if flag == 0 : NEW_LINE INDENT n = n - 1 NEW_LINE ans += 1 NEW_LINE flag = 1 NEW_LINE DEDENT else : NEW_LINE INDENT n = n - 1 NEW_LINE flag = 0 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT sum , min , max = 0 , - 1000000 , 1000000 NEW_LINE sum = 0 NEW_LINE max = - 1000000 NEW_LINE min = 1000000 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE if max <= a [ i ] : NEW_LINE INDENT max = a [ i ] NEW_LINE DEDENT if min >= a [ i ] : NEW_LINE INDENT min = a [ i ] NEW_LINE DEDENT DEDENT print ( min , max , sum ) NEW_LINE DEDENT
def find_substr ( data ) : NEW_LINE INDENT import string NEW_LINE MAX_CHARS = 256 NEW_LINE def find_substr ( x ) : NEW_LINE INDENT n = len ( x ) NEW_LINE dist_count = 0 NEW_LINE visited = [ False ] * MAX_CHARS NEW_LINE for c in x : NEW_LINE INDENT if visited [ c ] == False : NEW_LINE INDENT visited [ c ] = True NEW_LINE dist_count += 1 NEW_LINE DEDENT DEDENT start , start_index = 0 , - 1 NEW_LINE min_len = sys . maxsize NEW_LINE count = 0 NEW_LINE curr_count = [ 0 ] * MAX_CHARS NEW_LINE for c in x : NEW_LINE INDENT curr_count [ c ] += 1 NEW_LINE if curr_count [ c ] == 1 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if count == dist_count : NEW_LINE INDENT while curr_count [ start ] > 1 : NEW_LINE INDENT if curr_count [ start ] > 1 : NEW_LINE INDENT curr_count [ start ] -= 1 NEW_LINE DEDENT start += 1 NEW_LINE DEDENT len_window = c - start + 1 NEW_LINE if min_len > len_window : NEW_LINE INDENT min_len = len_window NEW_LINE start_index = start NEW_LINE DEDENT DEDENT DEDENT return ' ' . join ( curr_count ) NEW_LINE DEDENT def find_substr ( x ) : NEW_LINE INDENT x = ' aabcbcdbca ' NEW_LINE print ( ' Smallest ▁ window ▁ containing ▁ all ▁ distinct ' ' ▁ characters ▁ is : ▁ % s ' % str ( find_substr ( x ) ) ) NEW_LINE return x NEW_LINE DEDENT return find_substr ( data ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT A = float ( sys . stdin . read ( ) ) NEW_LINE B = float ( sys . stdin . read ( ) ) NEW_LINE C = float ( sys . stdin . read ( ) ) NEW_LINE D = float ( sys . stdin . read ( ) ) NEW_LINE E = float ( sys . stdin . read ( ) ) NEW_LINE F = float ( sys . stdin . read ( ) ) NEW_LINE water = 0 NEW_LINE suger = 0 NEW_LINE watmax = 0 NEW_LINE sugmax = 0 NEW_LINE maxnodo = 100 * E / ( 100 + E ) NEW_LINE nodo = 0 NEW_LINE nodomax = 0 NEW_LINE for a in range ( 0 , F // 100 + 1 ) : NEW_LINE INDENT for b in range ( 0 , F // 100 + 1 ) : NEW_LINE INDENT for c in range ( 0 , F // 100 + 1 ) : NEW_LINE INDENT for d in range ( 0 , F // 100 + 1 ) : NEW_LINE INDENT water = 100 * a + 100 * b NEW_LINE suger = c + d NEW_LINE if water == 0 or water + suger > F : NEW_LINE INDENT break NEW_LINE DEDENT nodo = 100 * suger / ( water + suger ) NEW_LINE if nodo >= nodomax and nodo <= maxnodo : NEW_LINE INDENT watmax = water NEW_LINE sugmax = suger NEW_LINE nodomax = nodo NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT print ( int ( watmax ) , int ( sugmax ) , int ( sugmax ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE before = [ ] NEW_LINE while True : NEW_LINE INDENT if not sys . stdin . isatty ( ) : NEW_LINE INDENT break NEW_LINE DEDENT data = sys . stdin . read ( ) . strip ( ) . split ( ' , ' ) NEW_LINE inner = [ int ( c ) for c in data ] NEW_LINE if before is None : NEW_LINE INDENT before = inner NEW_LINE DEDENT else : NEW_LINE INDENT tmp = [ ] NEW_LINE for i in range ( len ( before ) ) : NEW_LINE INDENT if i < len ( tmp ) : NEW_LINE INDENT if tmp [ i ] < before [ i ] + inner [ i ] : NEW_LINE INDENT tmp . append ( before [ i ] + inner [ i ] ) NEW_LINE DEDENT DEDENT DEDENT if len ( before ) > len ( tmp ) : NEW_LINE INDENT if ( i - 1 ) < len ( tmp ) and ( i - 1 ) >= 0 : NEW_LINE INDENT if tmp [ i - 1 ] < before [ i ] + inner [ i - 1 ] : NEW_LINE INDENT tmp [ i - 1 ] = before [ i ] + inner [ i - 1 ] NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT if ( i + 1 ) < len ( tmp ) : NEW_LINE INDENT if tmp [ i + 1 ] < before [ i ] + inner [ i + 1 ] : NEW_LINE INDENT tmp [ i + 1 ] = before [ i ] + inner [ i + 1 ] NEW_LINE DEDENT DEDENT DEDENT DEDENT before = tmp NEW_LINE DEDENT print ( before [ 0 ] ) NEW_LINE DEDENT
def count_pairs ( arr , n ) : NEW_LINE INDENT even , odd = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd += 1 NEW_LINE DEDENT DEDENT print ( ( even ) * ( n - 1 ) ) NEW_LINE print ( ( odd ) * ( n - 1 ) ) NEW_LINE DEDENT
def A1613 ( ) : NEW_LINE INDENT import math NEW_LINE import string NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import sys NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE if sys . platform == ' darwin ' : NEW_LINE INDENT import math NEW_LINE DEDENT elif sys . platform == ' linux2' : NEW_LINE INDENT import math NEW_LINE INDENT import math NEW_LINE DEDENT if math . isnan ( math . isnan ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( math . fabs ( ) ) ) ) ) )
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE m = int ( sys . stdin . readline ( ) ) NEW_LINE arrs = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arrs . append ( sys . stdin . readline ( ) ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT arrs = [ ] NEW_LINE DEDENT length = [ 0 ] * n NEW_LINE index = 0 NEW_LINE return_dereference = None NEW_LINE for tmp in arrs : NEW_LINE INDENT dex_g = tmp . find ( " G " ) NEW_LINE dex_s = tmp . find ( " S " ) NEW_LINE if dex_g > dex_s : NEW_LINE INDENT return_dereference = - 1 NEW_LINE DEDENT length [ index ] = dex_s - dex_g NEW_LINE index += 1 NEW_LINE index += 1 NEW_LINE return_dereference = None NEW_LINE DEDENT length = set ( ) NEW_LINE for len in length : NEW_LINE INDENT length . add ( len ) NEW_LINE DEDENT if return_dereference == None : NEW_LINE INDENT print ( return_dereference ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( len ( length ) ) NEW_LINE DEDENT DEDENT
def GFG ( arr , n , x ) : NEW_LINE INDENT front , back = 0 , n - 1 NEW_LINE while front <= back : NEW_LINE INDENT if arr [ front ] == x or arr [ back ] == x : NEW_LINE INDENT return True NEW_LINE DEDENT front += 1 NEW_LINE back -= 1 NEW_LINE DEDENT return False NEW_LINE DEDENT
def count_freq ( arr , n ) : NEW_LINE INDENT mp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT mp [ arr [ i ] ] = 1 if mp . get ( arr [ i ] ) is None else mp . get ( arr [ i ] ) + 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if mp [ arr [ i ] ] != - 1 : NEW_LINE INDENT print ( arr [ i ] , mp [ arr [ i ] ] ) NEW_LINE mp [ arr [ i ] ] = - 1 NEW_LINE DEDENT DEDENT DEDENT
def MinCostTree ( arr , n ) : NEW_LINE INDENT ans = 0 NEW_LINE st = [ sys . maxsize ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT while st [ - 1 ] <= arr [ i ] : NEW_LINE INDENT x = st [ - 1 ] NEW_LINE st . pop ( - 1 ) NEW_LINE ans += x * min ( st [ - 1 ] , arr [ i ] ) NEW_LINE DEDENT st . append ( arr [ i ] ) NEW_LINE DEDENT for i in range ( 2 , len ( st ) ) : NEW_LINE INDENT ans += st [ i ] * st [ i - 1 ] NEW_LINE DEDENT return ans NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT string = string . strip ( string ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return None NEW_LINE DEDENT if not string : NEW_LINE INDENT return None NEW_LINE DEDENT return string NEW_LINE DEDENT
def find_equation ( a , b ) : NEW_LINE INDENT sum = ( a + b ) NEW_LINE product = ( a * b ) NEW_LINE print ( " x ^ 2 ▁ - ▁ ( % x ) ▁ + ▁ ( % d ) ▁ = ▁ 0" % ( sum , product ) ) NEW_LINE DEDENT
def circle_equation ( x1 , y1 , r ) : NEW_LINE INDENT import sys NEW_LINE a = - 2 * x1 NEW_LINE b = - 2 * y1 NEW_LINE c = ( r ** 2 ) - ( x1 ** 2 ) - ( y1 ** 2 ) NEW_LINE print ( " x ^ 2 ▁ + ▁ ( % d ▁ x ) ▁ + ▁ " % a , end = " " ) NEW_LINE print ( " y ^ 2 ▁ + ▁ ( % d ▁ y ) ▁ = ▁ " % b , end = " " ) NEW_LINE print ( " % d . " % c ) NEW_LINE DEDENT
def unique_combination ( l , sum , K , local , A ) : NEW_LINE INDENT if sum == K : NEW_LINE INDENT print ( " { " , end = " ▁ " ) NEW_LINE for i in range ( len ( local ) ) : NEW_LINE INDENT if i != 0 : NEW_LINE INDENT print ( " ▁ " , end = " ▁ " ) NEW_LINE DEDENT print ( local [ i ] , end = " ▁ " ) NEW_LINE if i != len ( local ) - 1 : NEW_LINE INDENT print ( " , ▁ " , end = " ▁ " ) NEW_LINE DEDENT DEDENT print ( " } " ) NEW_LINE return NEW_LINE DEDENT for i in range ( l , len ( A ) ) : NEW_LINE INDENT if sum + A [ i ] > K : NEW_LINE INDENT continue NEW_LINE DEDENT if i == 1 and A [ i ] == A [ i - 1 ] and i > l : NEW_LINE INDENT continue NEW_LINE DEDENT local . append ( A [ i ] ) NEW_LINE unique_combination ( i + 1 , sum + A [ i ] , K , local , A ) NEW_LINE local . pop ( ) NEW_LINE DEDENT def combination ( A , K ) : NEW_LINE INDENT A . sort ( ) NEW_LINE local = [ ] NEW_LINE unique_combination ( 0 , 0 , K , local , A ) NEW_LINE DEDENT def combination ( A , K ) : NEW_LINE INDENT arr = [ 10 , 1 , 2 , 7 , 6 , 1 , 5 ] NEW_LINE A = np . array ( sorted ( arr ) ) NEW_LINE K = 8 NEW_LINE combination ( A , K ) NEW_LINE DEDENT return NEW_LINE DEDENT
def demo1 ( ) : NEW_LINE INDENT import string NEW_LINE n = len ( string . ascii_lowercase ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( string . ascii_lowercase [ i ] ) NEW_LINE DEDENT arr . sort ( ) NEW_LINE q = len ( string . ascii_lowercase ) NEW_LINE for j in range ( q ) : NEW_LINE INDENT x = string . ascii_lowercase [ j ] NEW_LINE l = 0 NEW_LINE r = n - 1 NEW_LINE m = 0 NEW_LINE while l <= r : NEW_LINE INDENT m = ( l + r ) // 2 NEW_LINE if x >= arr [ m ] : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = m - 1 NEW_LINE DEDENT DEDENT print ( l ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT f = open ( sys . argv [ 1 ] ) NEW_LINE DEDENT except IOError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT n = int ( f . readline ( ) ) NEW_LINE DEDENT pattern = re . compile ( ' that | this ' ) NEW_LINE while n > 0 : NEW_LINE INDENT n -= 1 NEW_LINE result = f . readline ( ) NEW_LINE a = result NEW_LINE loop : NEW_LINE INDENT for i in range ( 1 , 26 , i + 2 ) : NEW_LINE INDENT for j in range ( 26 ) : NEW_LINE INDENT a = rep ( result , i , j ) NEW_LINE if pattern . search ( a ) : NEW_LINE INDENT yield a + ' \n ' NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT sys . stdout . write ( ' ' . join ( a ) ) NEW_LINE DEDENT
def GFG ( a , b , n ) : NEW_LINE INDENT if not n : NEW_LINE INDENT return True if ( a & 1 ) == 1 else False NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT return True if ( b & 1 ) == 1 else False NEW_LINE DEDENT if ( a & 1 ) == 0 : NEW_LINE INDENT if ( b & 1 ) == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return ( n % 3 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( b & 1 ) == 0 : NEW_LINE INDENT return ( ( n - 1 ) % 3 ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( ( n + 1 ) % 3 ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE for a , b in enumerate ( sys . stdin ) : NEW_LINE INDENT if not a : NEW_LINE INDENT break NEW_LINE DEDENT print ( abs ( b - math . hypot ( i , a - i ) ) ) NEW_LINE DEDENT DEDENT
def max_sum ( a , n ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE if n == 1 : NEW_LINE INDENT dp [ 0 ] = max ( 0 , a [ 0 ] ) NEW_LINE DEDENT elif n == 2 : NEW_LINE INDENT dp [ 0 ] = max ( 0 , a [ 0 ] ) NEW_LINE dp [ 1 ] = max ( a [ 1 ] , dp [ 0 ] ) NEW_LINE DEDENT elif n >= 3 : NEW_LINE INDENT dp [ 0 ] = max ( 0 , a [ 0 ] ) NEW_LINE dp [ 1 ] = max ( a [ 1 ] , max ( 0 , a [ 0 ] ) ) NEW_LINE dp [ 2 ] = max ( a [ 2 ] , max ( a [ 1 ] , max ( 0 , a [ 0 ] ) ) ) NEW_LINE i = 3 NEW_LINE while i < n : NEW_LINE INDENT dp [ i ] = max ( dp [ i - 1 ] , a [ i ] + dp [ i - 3 ] ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return dp [ n - 1 ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import locale NEW_LINE import os NEW_LINE question = string . strip ( ) NEW_LINE original_q = question [ : - 1 ] . strip ( ) NEW_LINE ch = original_q [ - 1 : ] NEW_LINE vowels = ( ' A ' , ' E ' , ' I ' , ' O ' , ' U ' , ' Y ' ) NEW_LINE b = [ e . lower ( ) in ch or e . lower ( ) in ch . lower ( ) for e in vowels ] NEW_LINE print ( ' YES ' if b else ' NO ' ) NEW_LINE DEDENT
def minimum_x ( n , k ) : NEW_LINE INDENT mini = sys . maxsize NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT fir = i NEW_LINE sec = n // i NEW_LINE num1 = fir * k + sec NEW_LINE res = ( num1 // k ) ** 2 NEW_LINE if res == n : NEW_LINE INDENT mini = min ( num1 , mini ) NEW_LINE DEDENT num2 = sec * k + fir NEW_LINE res = ( num2 // k ) ** 2 NEW_LINE if res == n : NEW_LINE INDENT mini = min ( num2 , mini ) NEW_LINE DEDENT DEDENT DEDENT return mini NEW_LINE DEDENT
def largestCircle ( ) : NEW_LINE INDENT import sys NEW_LINE C = sys . maxsize NEW_LINE for thisCase in range ( 1 , C + 1 ) : NEW_LINE INDENT print ( " Case ▁ # % d : ▁ % d " % ( thisCase , largestCircle ( ) ) ) NEW_LINE DEDENT def largestCircle ( ) : NEW_LINE INDENT N = sys . maxsize NEW_LINE bff = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT bff . append ( sys . maxsize - 1 ) NEW_LINE DEDENT status = [ - 2 ] NEW_LINE chain_length = [ 0 ] * N NEW_LINE for i in range ( N ) : NEW_LINE INDENT status [ i ] = - 1 NEW_LINE chain_length [ i ] = 0 NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT if bff [ bff [ i ] ] == i : NEW_LINE INDENT status [ i ] = - 1 NEW_LINE DEDENT DEDENT max_loop_size = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if status [ i ] != - 1 : NEW_LINE INDENT current = bff [ i ] NEW_LINE status [ i ] = i NEW_LINE steps = 1 NEW_LINE done = False NEW_LINE while not done : NEW_LINE INDENT if current == i : NEW_LINE INDENT if steps > max_loop_size : NEW_LINE INDENT max_loop_size = steps NEW_LINE DEDENT done = True NEW_LINE DEDENT elif status [ current ] == i : NEW_LINE INDENT done = True NEW_LINE DEDENT elif status [ current ] == - 1 : NEW_LINE INDENT if steps > chain_length [ current ] : NEW_LINE INDENT chain_length [ current ] = steps NEW_LINE DEDENT done = True NEW_LINE DEDENT else : NEW_LINE INDENT steps += 1 NEW_LINE status [ current ] = i NEW_LINE current = bff [ current ] NEW_LINE DEDENT DEDENT DEDENT DEDENT frankenCircle = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if status [ i ] == - 1 : NEW_LINE INDENT frankenCircle += ( chain_length [ i ] + 1 ) NEW_LINE DEDENT DEDENT return max ( frankenCircle , max_loop_size ) NEW_LINE DEDENT DEDENT
def SellingPrice ( CP , PP ) : NEW_LINE INDENT import math NEW_LINE P_decimal = 1 + ( PP / 100 ) NEW_LINE res = P_decimal * CP NEW_LINE return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE t , j , i , n , p1 , p2 , c , p = [ ] NEW_LINE t = len ( sys . stdin ) NEW_LINE for j in range ( 1 , t + 1 ) : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE p = [ ] NEW_LINE for i in range ( n + 5 ) : NEW_LINE INDENT p . append ( i ) NEW_LINE DEDENT p1 = p2 = p [ 1 ] NEW_LINE sys . stdout . write ( ' \n ' ) NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT c = p [ i ] NEW_LINE if c > p2 : NEW_LINE INDENT p2 = c NEW_LINE DEDENT elif c < p1 : NEW_LINE INDENT p1 = c NEW_LINE DEDENT if ( p2 - p1 ) == i - 1 : NEW_LINE INDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE try : NEW_LINE INDENT n = int ( math . ceil ( math . log ( math . log ( math . pi ) ) ) ) NEW_LINE s = int ( math . ceil ( math . log ( math . pi ) ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT if n < s : NEW_LINE INDENT print ( - 1 ) NEW_LINE return 0 NEW_LINE DEDENT for d in range ( 39 , 1 , - 1 ) : NEW_LINE INDENT b = lower_bound ( d , n ) NEW_LINE while d * math . log ( b ) <= math . log ( n ) : NEW_LINE INDENT if test ( b , n , s ) : NEW_LINE INDENT print ( b ) NEW_LINE return 0 NEW_LINE DEDENT b += 1 NEW_LINE DEDENT DEDENT for a1 in range ( int ( math . sqrt ( n - s ) ) , 1 , - 1 ) : NEW_LINE INDENT if ( n - s ) % a1 == 0 : NEW_LINE INDENT b = ( n - s ) // a1 + 1 NEW_LINE a0 = n - a1 * b NEW_LINE if a0 >= 0 and a0 < b and a0 + a1 == s : NEW_LINE INDENT print ( b ) NEW_LINE return 0 NEW_LINE DEDENT DEDENT DEDENT if n == s : NEW_LINE INDENT print ( n + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT def test ( b , n , s ) : NEW_LINE INDENT if b < 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT sum = 0 NEW_LINE while n > 0 : NEW_LINE INDENT sum += n % b NEW_LINE n //= b NEW_LINE DEDENT return sum == s NEW_LINE DEDENT def lower_bound ( d , n ) : NEW_LINE INDENT left = 1 NEW_LINE right = n NEW_LINE logn = math . log ( n ) NEW_LINE while right - left > 1 : NEW_LINE INDENT mid = ( left + right ) / 2 NEW_LINE logm = ( d + 1 ) * math . log ( mid ) NEW_LINE if logm > logn : NEW_LINE INDENT right = mid NEW_LINE DEDENT else : NEW_LINE INDENT left = mid NEW_LINE DEDENT DEDENT return right NEW_LINE DEDENT
def _import ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import hex NEW_LINE import abs NEW_LINE import math NEW_LINE import sin NEW_LINE class B ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stream = sys . stdin NEW_LINE m = int ( self . stream . read ( ) ) NEW_LINE b = int ( self . stream . read ( ) ) NEW_LINE self . result = 0 NEW_LINE for x in range ( 1 , m * b + 1 ) : NEW_LINE INDENT y = int ( - 1.0 * x / m + b ) NEW_LINE self . result = max ( self . result , 1 * ( x + 1 ) * ( y ) ** 2 / 2 + 1 * ( y + 1 ) * ( x ) ** 2 / 2 ) NEW_LINE DEDENT print ( self . result ) NEW_LINE DEDENT DEDENT class B ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stream = sys . stdin NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT return sys . stdin . readline ( ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT while self . stream is None or not self . stream . readline ( ) : NEW_LINE INDENT try : NEW_LINE INDENT self . stream . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return self . stream . readline ( ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT return sys . stdin . readline ( ) NEW_LINE DEDENT def readline ( self ) : NEW_LINE INDENT data = ' ' NEW_LINE try : NEW_LINE INDENT data = self . stream . readline ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return data NEW_LINE DEDENT DEDENT return B NEW_LINE DEDENT
def GFG ( n , m ) : NEW_LINE INDENT if m % n == 0 : NEW_LINE INDENT print ( " YES " , end = " ▁ " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " , end = " ▁ " ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( argv ) : NEW_LINE INDENT import sys NEW_LINE f = open ( argv [ 1 ] ) NEW_LINE cantidad = f . readline ( ) NEW_LINE solucion = [ ] NEW_LINE for cantidadfor in range ( int ( cantidad ) ) : NEW_LINE INDENT cantidadfor = f . readline ( ) NEW_LINE cantidadelementos = int ( cantidadfor ) NEW_LINE elementos_s = f . readline ( ) . split ( ) NEW_LINE elementos = [ int ( j ) for j in elementos_s ] NEW_LINE for centinela in range ( cantidadelementos ) : NEW_LINE INDENT if elementos [ centinela ] == elementos [ k ] and k - j >= 2 : NEW_LINE INDENT solucion . append ( ' YES ' ) NEW_LINE break NEW_LINE DEDENT DEDENT if centinela : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in solucion : NEW_LINE INDENT if solucion [ i ] is None : NEW_LINE INDENT solucion [ i ] = ' NO ' NEW_LINE DEDENT DEDENT for i in solucion : NEW_LINE INDENT print ( i ) NEW_LINE DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . readline ( ) ) NEW_LINE b = int ( sys . stdin . readline ( ) ) NEW_LINE if a <= b : NEW_LINE INDENT print ( b - a ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( a - b ) NEW_LINE DEDENT DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . readline ( ) ) NEW_LINE b = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT c = [ ] NEW_LINE s = list ( s ) NEW_LINE c = [ ] NEW_LINE ch = [ None ] * 26 NEW_LINE for i in range ( b ) : NEW_LINE INDENT m = s [ i ] NEW_LINE n = s [ i ] NEW_LINE mm = m [ 0 ] NEW_LINE nn = n [ 0 ] NEW_LINE flag = 1 NEW_LINE for j in range ( 26 ) : NEW_LINE INDENT if ch [ j ] == mm and flag == 1 : NEW_LINE INDENT ch [ j ] = nn NEW_LINE flag = 0 NEW_LINE DEDENT if ch [ j ] == nn and flag == 1 : NEW_LINE INDENT ch [ j ] = mm NEW_LINE flag = 0 NEW_LINE DEDENT flag = 1 NEW_LINE DEDENT DEDENT for i in range ( a ) : NEW_LINE INDENT c [ i ] = ch [ c [ i ] - 97 ] NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
def find_nth_occur ( str , ch , N ) : NEW_LINE INDENT import sys NEW_LINE occur = 0 NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT if str [ i ] == ch : NEW_LINE INDENT occur += 1 NEW_LINE DEDENT if occur == N : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT
def muhandsticks ( ) : NEW_LINE INDENT import string NEW_LINE s = string . replace ( " ▁ " , " " ) NEW_LINE sticks = [ 0 ] * 9 NEW_LINE for i in range ( 6 ) : NEW_LINE INDENT sticks [ s [ i - 1 ] ] += 1 NEW_LINE DEDENT legs , headbody = False , False NEW_LINE for i in range ( 9 ) : NEW_LINE INDENT if sticks [ i ] >= 4 : NEW_LINE INDENT legs = True NEW_LINE DEDENT if sticks [ i ] >= 6 : NEW_LINE INDENT headbody = True NEW_LINE DEDENT if sticks [ i ] == 2 : NEW_LINE INDENT headbody = True NEW_LINE DEDENT DEDENT if legs and headbody : NEW_LINE INDENT print ( " Elephant " ) NEW_LINE DEDENT elif legs : NEW_LINE INDENT print ( " Bear " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Alien " ) NEW_LINE DEDENT DEDENT
def p401 ( ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math = math NEW_LINE DEDENT
def code_forces1389_b ( ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( sys . maxsize ) : NEW_LINE INDENT n , k , z = sys . maxsize NEW_LINE a = [ ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT res = 0 NEW_LINE for zz in range ( 0 , z + 1 ) : NEW_LINE INDENT dist = k - 2 * zz NEW_LINE if dist < 0 : NEW_LINE INDENT break NEW_LINE DEDENT max , score = 0 , 0 NEW_LINE for j in range ( 0 , dist + 1 ) : NEW_LINE INDENT if j < n - 1 : NEW_LINE INDENT max = max ( max , a [ j ] + a [ j + 1 ] ) NEW_LINE DEDENT score += a [ j ] NEW_LINE DEDENT res = max ( res , score + max * zz ) NEW_LINE DEDENT print ( res ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE self . nums = [ ] NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT b = np . zeros ( ( n , 3 , 2 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT for k , h , m in enumerate ( b [ : , 0 ] ) : NEW_LINE INDENT b [ i ] [ j ] [ k ] = sys . maxsize * 60 + sys . maxsize NEW_LINE DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT for k in range ( n ) : NEW_LINE INDENT res = 0 NEW_LINE for p in range ( n ) : NEW_LINE INDENT if b [ p ] [ 0 ] [ 0 ] <= b [ i ] [ 0 ] [ 1 ] and b [ i ] [ 0 ] [ 1 ] <= b [ p ] [ 0 ] [ 1 ] and b [ p ] [ 1 ] [ 0 ] <= b [ j ] [ 1 ] [ 1 ] and b [ j ] [ 1 ] [ 1 ] <= b [ p ] [ 1 ] [ 1 ] and b [ p ] [ 2 ] [ 0 ] <= b [ k ] [ 2 ] [ 1 ] and b [ k ] [ 2 ] [ 1 ] <= b [ p ] [ 2 ] [ 1 ] : NEW_LINE INDENT res += 1 NEW_LINE DEDENT DEDENT DEDENT ans = max ( ans , res ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import re NEW_LINE try : NEW_LINE INDENT return sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT try : NEW_LINE INDENT return sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import shlex NEW_LINE try : NEW_LINE INDENT p = subprocess . Popen ( [ ' / usr / bin / python ' , ' - c ' , ' - d ' , ' - - ' , ' - - ' ] , stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) NEW_LINE n = len ( p . stdout . read ( ) ) NEW_LINE q = len ( p . stdout . read ( ) ) NEW_LINE a = [ p . stdout . read ( ) ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT a . append ( p . stdout . read ( ) ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( q ) : NEW_LINE INDENT x = p . stdout . read ( ) NEW_LINE cnt = 0 NEW_LINE right = 0 NEW_LINE sum = 0 NEW_LINE for left in range ( n ) : NEW_LINE INDENT while right < n and sum + a [ right ] <= x : NEW_LINE INDENT sum += a [ right ] NEW_LINE right += 1 NEW_LINE DEDENT cnt += right - left NEW_LINE if right == left : NEW_LINE INDENT right += 1 NEW_LINE DEDENT else : NEW_LINE INDENT sum -= a [ left ] NEW_LINE DEDENT DEDENT print ( cnt , file = sys . stdout ) NEW_LINE DEDENT DEDENT subprocess . check_call ( [ ' / usr / bin / python ' , ' - c ' , ' - - ' , ' - ' , ' - - ' ] , stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) NEW_LINE DEDENT
def code_force_1409_a ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE a , b = 0 , 0 NEW_LINE for i in range ( t ) : NEW_LINE INDENT a = sys . maxsize NEW_LINE b = sys . maxsize NEW_LINE counter = 0 NEW_LINE if a < b : NEW_LINE INDENT counter = ( b - a ) // 10 NEW_LINE DEDENT elif a > b : NEW_LINE INDENT counter = ( a - b ) // 10 NEW_LINE DEDENT if a % 10 != b % 10 : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT print ( counter ) NEW_LINE DEDENT DEDENT
def GFG ( ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import ( np , np ) NEW_LINE from numpy . random import ( np , np ) NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import ( np , np ) NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import random NEW_LINE from numpy . random import as np NEW_LINE from numpy . random import ( np , np ) NEW_LINE from numpy . random import ( np , np ) NEW_LINE from numpy . random import ( np , np ) NEW_LINE from numpy . random import as np NEW_LINE np . random = np . random NEW_LINE from numpy . random import rand NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 2 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT T = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT for t in range ( T ) : NEW_LINE INDENT X = [ sys . stdin . read ( ) ] NEW_LINE Y = [ sys . stdin . read ( ) ] NEW_LINE answer = 0 NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT if Y [ i ] == Y [ ( i + 1 ) % 3 ] and Y [ i ] > Y [ ( i + 2 ) % 3 ] : NEW_LINE INDENT answer += abs ( X [ ( i + 1 ) % 3 ] - X [ i ] ) NEW_LINE DEDENT DEDENT print ( answer ) NEW_LINE DEDENT DEDENT
def GFG ( data ) : NEW_LINE INDENT data = list ( data ) NEW_LINE for i in range ( len ( data ) // 2 ) : NEW_LINE INDENT if data [ i ] != data [ len ( data ) - 1 - i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT array = np . zeros ( ( 4 , 13 ) ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s . strip ( ) NEW_LINE a = int ( sys . stdin . readline ( ) ) NEW_LINE if s == ' S ' : NEW_LINE INDENT array [ 0 ] [ a - 1 ] = 1 NEW_LINE DEDENT elif s == ' H ' : NEW_LINE INDENT array [ 1 ] [ a - 1 ] = 1 NEW_LINE DEDENT elif s == ' C ' : NEW_LINE INDENT array [ 2 ] [ a - 1 ] = 1 NEW_LINE DEDENT elif s == ' D ' : NEW_LINE INDENT array [ 3 ] [ a - 1 ] = 1 NEW_LINE DEDENT DEDENT for i in range ( len ( array ) ) : NEW_LINE INDENT for j in range ( len ( array [ 0 ] ) ) : NEW_LINE INDENT if array [ i ] [ j ] == 0 and i == 0 : NEW_LINE INDENT print ( ' S ▁ % d ' % ( j + 1 ) ) NEW_LINE DEDENT elif array [ i ] [ j ] == 0 and i == 1 : NEW_LINE INDENT print ( ' H ▁ % d ' % ( j + 1 ) ) NEW_LINE DEDENT elif array [ i ] [ j ] == 0 and i == 2 : NEW_LINE INDENT print ( ' C ▁ % d ' % ( j + 1 ) ) NEW_LINE DEDENT elif array [ i ] [ j ] == 0 and i == 3 : NEW_LINE INDENT print ( ' D ▁ % d ' % ( j + 1 ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def sum_even_and_even_index ( arr , n ) : NEW_LINE INDENT i , sum = 0 , 0 NEW_LINE for i in range ( 0 , n , 2 ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT
def code_chef ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import os NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def print_duplicates ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % n >= n : NEW_LINE INDENT if arr [ i ] % n < 2 * n : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % arr [ i ] ) NEW_LINE fl = 1 NEW_LINE DEDENT DEDENT arr [ i ] % n += n NEW_LINE DEDENT if not ( fl > 0 ) : NEW_LINE INDENT sys . stdout . write ( ' - 1' ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res += ( 1.0 / float ( n - i ) ) NEW_LINE DEDENT print ( res ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT return n * ( n + 1 ) * ( n + 2 ) / 3 NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT return ( n * ( n - 1 ) ) // 2 NEW_LINE DEDENT
def graycode ( n ) : NEW_LINE INDENT return n ^ ( n >> 1 ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT return ( n * ( n - 1 ) ) / 2 NEW_LINE DEDENT
def possibleways ( n ) : NEW_LINE INDENT if n % 2 == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif n % 4 == 0 : NEW_LINE INDENT return n // 4 - 1 NEW_LINE DEDENT else : NEW_LINE INDENT return n // 4 NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT if not n : NEW_LINE INDENT return 0 NEW_LINE DEDENT if n & 1 == 1 : NEW_LINE INDENT return 1 + CountSetBits ( n >> 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return CountSetBits ( n >> 1 ) NEW_LINE DEDENT DEDENT
def GFG ( m , n ) : NEW_LINE INDENT return 8 * m * n - 6 * m - 6 * n + 4 NEW_LINE DEDENT
def GFG ( n , m ) : NEW_LINE INDENT if m == 1 : NEW_LINE INDENT return ( n * ( n + 1 ) / 2 ) NEW_LINE DEDENT sum = sum ( n , m - 1 ) NEW_LINE return ( sum * ( sum + 1 ) / 2 ) NEW_LINE DEDENT
def gf_gcd ( n ) : NEW_LINE INDENT n = 3 NEW_LINE return ( n * ( n - 1 ) ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT return ( n * ( n + 1 ) * ( n + 1 ) * ( n + 2 ) ) / 12 NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT if n % 2 == 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return ( n - 2 ) // 4 NEW_LINE DEDENT DEDENT
def GFG ( n ) : NEW_LINE INDENT print ( 9 * n , 8 * n ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT if n < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( 1 if n & 1 else 6 ) NEW_LINE DEDENT
def count_max_intersect ( n ) : NEW_LINE INDENT return ( n ) * ( n - 1 ) / 2 NEW_LINE DEDENT
def sum ( n ) : NEW_LINE INDENT if n == 1 : NEW_LINE INDENT return 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( n * ( n + 1 ) + sum ( n - 1 ) ) NEW_LINE DEDENT DEDENT
def highestPowerOf2 ( n ) : NEW_LINE INDENT return ( n & ( ~ ( n - 1 ) ) ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT return n * ( n - 1 ) // 2 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin . read ( ) NEW_LINE sys . stdin . close ( ) NEW_LINE c = " None " NEW_LINE for i in [ ' a ' , ' z ' ] : NEW_LINE INDENT if ' % c ' % chr ( i ) not in s : NEW_LINE INDENT c = " % c " % chr ( i ) NEW_LINE break NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE DEDENT
def A1581 ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from math import pi NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from math import pi NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE sc = sys . stdin . read ( ) NEW_LINE print ( ' ABC ' if 1200 > len ( sc ) else ' ARC ' ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import math NEW_LINE import sys NEW_LINE class Main ( int ) : NEW_LINE INDENT max_element_value = int ( math . pow ( 10 , 9 ) ) NEW_LINE def __init__ ( self ) : NEW_LINE INDENT sys . stdout . write ( ' \n ' ) NEW_LINE self . max_element_value = int ( math . pow ( 10 , 9 ) ) NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT def __call__ ( self , * args ) : NEW_LINE INDENT return self . max_element_value NEW_LINE DEDENT DEDENT
def GFG ( x , y , z ) : NEW_LINE INDENT c = 0 NEW_LINE while x != 0 and y != 0 and z != 0 : NEW_LINE INDENT x -= 1 NEW_LINE y -= 1 NEW_LINE z -= 1 NEW_LINE c += 1 NEW_LINE DEDENT return c NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT c1 = int ( sys . stdin . readline ( ) ) NEW_LINE c5 = int ( sys . stdin . readline ( ) ) NEW_LINE c10 = int ( sys . stdin . readline ( ) ) NEW_LINE c50 = int ( sys . stdin . readline ( ) ) NEW_LINE c100 = int ( sys . stdin . readline ( ) ) NEW_LINE c500 = int ( sys . stdin . readline ( ) ) NEW_LINE if c1 + c5 * 5 + c10 * 10 + c50 * 50 + c100 * 100 + c500 * 500 < 1000 : NEW_LINE INDENT print ( '0' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( '1' ) NEW_LINE DEDENT DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE from io import BytesIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BufferedWriter NEW_LINE from io import BytesIO NEW_LINE from io import StringIO NEW_LINE from io import BufferedWriter NEW_LINE from io import StringIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE import BytesIO NEW_LINE from io import BytesIO NEW_LINE DEDENT
def count_cubes ( a , b ) : NEW_LINE INDENT return int ( math . floor ( math . cbrt ( b ) ) - math . ceil ( math . cbrt ( a ) ) + 1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import random NEW_LINE try : NEW_LINE INDENT random . seed ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sys . stderr . write ( ' Please ▁ enter ▁ a ▁ file ▁ or ▁ a ▁ file ▁ path ▁ to ▁ a ▁ file ▁ of ▁ file ▁ ' ' or ▁ a ▁ file ▁ path ▁ to ▁ a ▁ file ▁ of ▁ file ▁ ' ' or ▁ a ▁ file ▁ path ▁ to ▁ a ▁ file ▁ of ▁ file ▁ ' ' or ▁ a ▁ file ▁ path ▁ to ▁ a ▁ file ▁ of ▁ ' ' or ▁ a ▁ file ▁ path ▁ to ▁ a ▁ file ▁ of ▁ ' ' or ▁ a ▁ file ▁ of ▁ file ▁ ' ' or ▁ a ▁ file ▁ of ▁ ' ' ▁ and ▁ e ▁ of ▁ file ▁ to ▁ be ▁ created ▁ and ▁ ' ' or ▁ a ▁ file ▁ of ▁ file ▁ ' ' or ▁ a ▁ file ▁ of ▁ ' ' ▁ and ▁ e ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ r ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ r ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ e ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ of ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ and ▁ a ▁ file ▁ of ▁ ' ' ▁ and ▁ e ▁ of ▁ file ▁ of ▁ file ▁ ' ' ▁ and ▁ r ▁ of ▁ file ▁ ' ' ▁ and ▁ a ▁ file ▁ of ▁ file ▁ ' ' or ▁ a ▁ file ▁ of ▁ ' % s ' % sys . argv [ 0 ] )
def p012 ( ) : NEW_LINE INDENT print ( eval ( ' p012 ( ) ' ) ) NEW_LINE def run ( ) : NEW_LINE INDENT triangle = 0 NEW_LINE for i in range ( 1 ) : NEW_LINE INDENT if int ( i ) - triangle < i : NEW_LINE INDENT raise ZeroDivisionError ( ' Overflow ' ) NEW_LINE DEDENT triangle += i NEW_LINE if count_divisors ( triangle ) > 500 : NEW_LINE INDENT return str ( triangle ) NEW_LINE DEDENT DEDENT DEDENT def count_divisors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE end = math . sqrt ( n ) NEW_LINE for i in range ( 1 , end ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT count += 2 NEW_LINE DEDENT DEDENT if end * end == n : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT return run NEW_LINE DEDENT
def find_delta ( a , b , c , d ) : NEW_LINE INDENT import sys NEW_LINE return ( b * c - a * d ) / ( d - c ) NEW_LINE DEDENT
def GFG ( n , is_prime ) : NEW_LINE INDENT is_prime [ 0 ] = is_prime [ 1 ] = False NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT is_prime [ i ] = True NEW_LINE DEDENT for p in range ( 2 , p * n + 1 ) : NEW_LINE INDENT if is_prime [ p ] == True : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT is_prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT
def replace_digit ( x , d1 , d2 ) : NEW_LINE INDENT result , multiply = 0 , 1 NEW_LINE while x % 10 > 0 : NEW_LINE INDENT remainder = x % 10 NEW_LINE if remainder == d1 : NEW_LINE INDENT result = result + d2 * multiply NEW_LINE DEDENT else : NEW_LINE INDENT result = result + remainder * multiply NEW_LINE DEDENT multiply *= 10 NEW_LINE x = x // 10 NEW_LINE DEDENT return result NEW_LINE DEDENT
def GFG ( i , j , n ) : NEW_LINE INDENT if j >= n : NEW_LINE INDENT return 0 NEW_LINE DEDENT if i >= n : NEW_LINE INDENT return 1 NEW_LINE DEDENT if j == i or j == n - 1 - i : NEW_LINE INDENT if i == n - 1 - j : NEW_LINE INDENT print ( " / " , end = " ▁ " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " \\ " , end = " ▁ " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( " * " , end = " ▁ " ) NEW_LINE DEDENT if print_pattern ( i , j + 1 , n ) == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT print ( ) NEW_LINE return print_pattern ( i + 1 , 0 , n ) NEW_LINE DEDENT
def get_pairs_count ( n , sum ) : NEW_LINE INDENT import collections NEW_LINE arr = list ( range ( 1 , 5 , 7 , - 1 , 5 ) ) NEW_LINE hm = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] not in hm : NEW_LINE INDENT hm [ arr [ i ] ] = 0 NEW_LINE DEDENT hm [ arr [ i ] ] = hm [ arr [ i ] ] + 1 NEW_LINE DEDENT twice_count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if hm [ sum - arr [ i ] ] in arr : NEW_LINE INDENT twice_count += hm [ sum - arr [ i ] ] NEW_LINE DEDENT if sum - arr [ i ] == arr [ i ] : NEW_LINE INDENT twice_count -= 1 NEW_LINE DEDENT DEDENT return twice_count / 2 NEW_LINE DEDENT
def Count_subarray ( arr , n ) : NEW_LINE INDENT global subarray_sum , remaining_sum , count NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT subarray_sum = 0 NEW_LINE remaining_sum = 0 NEW_LINE for k in range ( i , j + 1 ) : NEW_LINE INDENT subarray_sum += arr [ k ] NEW_LINE DEDENT for l in arr [ i : ] : NEW_LINE INDENT remaining_sum += arr [ l ] NEW_LINE DEDENT for l in arr [ j + 1 : ] : NEW_LINE INDENT remaining_sum += arr [ l ] NEW_LINE DEDENT if subarray_sum > remaining_sum : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = sys . maxsize NEW_LINE x = sys . maxsize NEW_LINE a = sys . maxsize NEW_LINE b = sys . maxsize NEW_LINE times = min ( a , b ) - 1 + n - max ( a , b ) NEW_LINE if times > x : NEW_LINE INDENT print ( n - 1 - ( times - x ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n - 1 ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import math NEW_LINE import csv NEW_LINE class Main ( sys . stdout ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdout . write ( " \n " ) NEW_LINE self . N = len ( sys . stdin . readlines ( ) ) NEW_LINE self . sum = 0 NEW_LINE self . a = [ ] NEW_LINE for i in range ( self . N ) : NEW_LINE INDENT tmp = int ( sys . stdin . readline ( ) ) NEW_LINE self . sum += tmp NEW_LINE if tmp % 10 != 0 : NEW_LINE INDENT self . a . append ( tmp ) NEW_LINE DEDENT DEDENT self . a . sort ( ) NEW_LINE self . i = 0 NEW_LINE while self . sum % 10 == 0 and i < len ( self . a ) : NEW_LINE INDENT self . sum -= self . a [ i ] NEW_LINE self . i += 1 NEW_LINE DEDENT if self . sum % 10 == 0 : NEW_LINE INDENT self . sum = 0 NEW_LINE DEDENT print ( self . sum ) NEW_LINE DEDENT DEDENT DEDENT
def RepaintingStreet ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT t = sys . maxsize NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT t = 0 NEW_LINE DEDENT while t > 0 : NEW_LINE INDENT n = sys . maxsize NEW_LINE k = sys . maxsize NEW_LINE a = [ ] NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( 1 ) ) NEW_LINE if a [ i ] not in l : NEW_LINE INDENT l . append ( a [ i ] ) NEW_LINE DEDENT DEDENT ans = sys . maxsize NEW_LINE for j in l : NEW_LINE INDENT moves = 0 NEW_LINE big = l [ j ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == big : NEW_LINE INDENT i += 1 NEW_LINE continue NEW_LINE DEDENT moves += 1 NEW_LINE i += k NEW_LINE DEDENT ans = min ( moves , ans ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT
def find_repeating_number ( arr , n ) : NEW_LINE INDENT import math NEW_LINE sq = int ( math . sqrt ( n ) ) NEW_LINE range = ( n // sq ) + 1 NEW_LINE count = [ 0 ] * range NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT count [ ( arr [ i ] - 1 ) // sq ] += 1 NEW_LINE DEDENT selected_block = range - 1 NEW_LINE for i in range ( range - 1 ) : NEW_LINE INDENT if count [ i ] > sq : NEW_LINE INDENT selected_block = i NEW_LINE break NEW_LINE DEDENT DEDENT m = { } NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT if ( ( selected_block * sq ) < arr [ i ] ) and ( arr [ i ] <= ( ( selected_block + 1 ) * sq ) ) : NEW_LINE INDENT m [ arr [ i ] ] = 1 NEW_LINE if m [ arr [ i ] ] == 1 : NEW_LINE INDENT return arr [ i ] NEW_LINE DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT
def gf_max_prime_factors ( n ) : NEW_LINE INDENT import math NEW_LINE max_prime = - 1 NEW_LINE while n % 2 == 0 : NEW_LINE INDENT max_prime = 2 NEW_LINE n >>= 1 NEW_LINE DEDENT for i in range ( 3 , math . sqrt ( n ) + 1 , 2 ) : NEW_LINE INDENT while n % i == 0 : NEW_LINE INDENT max_prime = i NEW_LINE n = n // i NEW_LINE DEDENT DEDENT if n > 2 : NEW_LINE INDENT max_prime = n NEW_LINE DEDENT return max_prime NEW_LINE DEDENT
def main ( a ) : NEW_LINE INDENT import sys NEW_LINE class Beat ( int ) : NEW_LINE INDENT def __init__ ( self , number ) : NEW_LINE INDENT self . number = number NEW_LINE DEDENT def number ( self ) : NEW_LINE INDENT return self . number NEW_LINE DEDENT def number_even ( self ) : NEW_LINE INDENT pass NEW_LINE DEDENT def number_odd ( self ) : NEW_LINE INDENT pass NEW_LINE DEDENT def input ( number ) : NEW_LINE INDENT if number % 2 == 0 : NEW_LINE INDENT number_even ( ) NEW_LINE DEDENT else : NEW_LINE INDENT number_odd ( ) NEW_LINE DEDENT DEDENT def print_result ( ) : NEW_LINE INDENT print ( min ( number_even , number_odd ) ) NEW_LINE number_even = 0 NEW_LINE number_odd = 0 NEW_LINE DEDENT def main ( a ) : NEW_LINE INDENT sys . stdout . write ( a ) NEW_LINE DEDENT DEDENT def number ( ) : NEW_LINE INDENT return int ( a ) NEW_LINE DEDENT instance = Beat ( number ) NEW_LINE for i in range ( instance . number ) : NEW_LINE INDENT num = int ( i ) NEW_LINE for k in range ( num ) : NEW_LINE INDENT n = int ( n ) NEW_LINE instance . input ( n ) NEW_LINE DEDENT instance . print_result ( ) NEW_LINE DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE sc = string . split ( args ) NEW_LINE s1 = sc [ 0 ] NEW_LINE ans = 0 NEW_LINE c1 = 0 NEW_LINE c0 = 0 NEW_LINE for c in s1 : NEW_LINE INDENT if c == '1' : NEW_LINE INDENT if c0 > 0 : NEW_LINE INDENT c0 -= 1 NEW_LINE ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if c1 > 0 : NEW_LINE INDENT c1 -= 1 NEW_LINE ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT c0 += 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans * 2 ) NEW_LINE DEDENT
def pythagorean_triplet ( n ) : NEW_LINE INDENT for i in range ( 1 , n // 3 + 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n // 2 + 1 ) : NEW_LINE INDENT k = n - i - j NEW_LINE if i * i + j * j == k * k : NEW_LINE INDENT print ( i , j , k , end = ' ▁ ' ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT print ( ' No ▁ Triplet ' , end = ' ▁ ' ) NEW_LINE DEDENT
def count_digits ( a , b ) : NEW_LINE INDENT if not a or not b : NEW_LINE INDENT return 1 NEW_LINE DEDENT return int ( math . floor ( math . log10 ( abs ( a ) ) + math . log10 ( abs ( b ) ) ) ) + 1 NEW_LINE DEDENT
def index_of_first_one ( arr , low , high ) : NEW_LINE INDENT mid = 0 NEW_LINE while low <= high : NEW_LINE INDENT mid = ( low + high ) // 2 NEW_LINE if arr [ mid ] == 1 and ( mid == 0 or arr [ mid - 1 ] == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT elif arr [ mid ] == 1 : NEW_LINE INDENT high = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT DEDENT return mid NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import random NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import decimal NEW_LINE import sys NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . num = None NEW_LINE self . bd = None NEW_LINE self . integers = int ( self . num ) NEW_LINE self . decimals = decimal . Decimal ( self . num - self . integers ) NEW_LINE DEDENT def judge ( self ) : NEW_LINE INDENT if self . integers > 255 or self . decimals > 0.9375 : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def to_binary_digits ( self ) : NEW_LINE INDENT tmp = " " NEW_LINE count = 1 NEW_LINE for i in self . integers : NEW_LINE INDENT tmp += str ( i % 2 ) NEW_LINE DEDENT s = tmp NEW_LINE for i in range ( 8 - len ( tmp ) ) : NEW_LINE INDENT s += "0" NEW_LINE DEDENT s += " . " NEW_LINE while True : NEW_LINE INDENT if self . decimals == 0 : NEW_LINE INDENT s += "0000" NEW_LINE break NEW_LINE DEDENT if self . count > 4 : NEW_LINE INDENT return False NEW_LINE DEDENT self . decimals *= 2 NEW_LINE if self . decimals >= 1 : NEW_LINE INDENT self . decimals -= 1 NEW_LINE s += "1" NEW_LINE if self . decimals == 0 : NEW_LINE INDENT for i in range ( 4 - self . count ) : NEW_LINE INDENT s += "0" NEW_LINE DEDENT break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT s += "0" NEW_LINE DEDENT count += 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def get_bd ( self ) : NEW_LINE INDENT if self . to_binary_digits ( ) : NEW_LINE INDENT return s NEW_LINE DEDENT return " NA " NEW_LINE DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def digit_sum ( n ) : NEW_LINE INDENT sum , rem = 0 , 0 NEW_LINE while n > 0 : NEW_LINE INDENT rem = n % 10 NEW_LINE sum += rem NEW_LINE n //= 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import math NEW_LINE import string NEW_LINE class Main ( int ) : NEW_LINE INDENT mod = int ( math . pow ( 10 , 9 ) + 7 ) NEW_LINE def __init__ ( self ) : NEW_LINE INDENT self . mod = int ( math . pow ( 10 , 9 ) + 7 ) NEW_LINE DEDENT def __getitem__ ( self , i ) : NEW_LINE INDENT return self . mod + i NEW_LINE DEDENT DEDENT N = int ( sys . stdin . readline ( ) ) NEW_LINE a = [ 0 ] * N NEW_LINE for i in range ( N ) : NEW_LINE INDENT a [ int ( i ) - 1 ] = i NEW_LINE DEDENT ans = 1 NEW_LINE cnt = 1 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if i != N - 1 and a [ i ] < a [ i + 1 ] : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = max ( ans , cnt ) NEW_LINE cnt = 1 NEW_LINE DEDENT DEDENT ans = max ( ans , cnt ) NEW_LINE ans = N - ans NEW_LINE print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE class Main ( ) : NEW_LINE INDENT def compute ( ) : NEW_LINE INDENT with open ( ' / proc / self / * ' ) as f : NEW_LINE INDENT for i in range ( 7 ) : NEW_LINE INDENT n_high = int ( f . read ( ) ) NEW_LINE n_low = int ( f . read ( ) ) NEW_LINE print ( n_high - n_low ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return Main ( ) NEW_LINE DEDENT
def GFG ( A , q ) : NEW_LINE INDENT import numpy as np NEW_LINE class GFG ( object ) : NEW_LINE INDENT def __init__ ( self , first , second ) : NEW_LINE INDENT self . first = first NEW_LINE self . second = second NEW_LINE DEDENT def performQueries ( self , A , q ) : NEW_LINE INDENT n = len ( A ) NEW_LINE pref_xor = np . zeros ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] NEW_LINE DEDENT for i in q : NEW_LINE INDENT L , R = i NEW_LINE if L > R : NEW_LINE INDENT temp = L NEW_LINE L = R NEW_LINE R = temp NEW_LINE DEDENT if L != R and pref_xor [ R ] == pref_xor [ L - 1 ] : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT def main ( arg ) : NEW_LINE INDENT Arr = [ 1 , 1 , 2 , 2 , 1 ] NEW_LINE q = [ np . array ( [ 1 , 5 ] ) , np . array ( [ 1 , 4 ] ) , np . array ( [ 3 , 4 ] ) ] NEW_LINE return np . dot ( Arr , q ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import getopt NEW_LINE try : NEW_LINE INDENT opts , args = getopt . getopt ( sys . argv [ 1 : ] , " " ) NEW_LINE DEDENT except getopt . error , msg : NEW_LINE INDENT print ( msg , file = sys . stderr ) NEW_LINE return NEW_LINE DEDENT for o , a in opts : NEW_LINE INDENT if o == " - d " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - u " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - v " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - v " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - v " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - v " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - v " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - q " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - t " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - q " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT elif o == " - p " : NEW_LINE INDENT return NEW_LINE DEDENT else : NEW_LINE INDENT raise Exception ( " Unknown ▁ option ▁ % s " % str ( o ) ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import locale NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT N = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT R1 = [ ] NEW_LINE for n in range ( N ) : NEW_LINE INDENT R1 . append ( int ( sys . stdin . readline ( ) ) ) NEW_LINE DEDENT M = int ( sys . stdin . readline ( ) ) NEW_LINE P1 = [ ] NEW_LINE for m in range ( M ) : NEW_LINE INDENT P1 . append ( int ( sys . stdin . readline ( ) ) ) NEW_LINE DEDENT K = int ( sys . stdin . readline ( ) ) NEW_LINE P2 = [ ] NEW_LINE for k in range ( K ) : NEW_LINE INDENT P2 . append ( int ( sys . stdin . readline ( ) ) ) NEW_LINE DEDENT A = int ( sys . stdin . readline ( ) ) NEW_LINE B = int ( sys . stdin . readline ( ) ) NEW_LINE max_r1 = 0 NEW_LINE for r1 in R1 : NEW_LINE INDENT max_r1 = max ( max_r1 , r1 ) NEW_LINE DEDENT max_p1 = 0 NEW_LINE for p1 in P1 : NEW_LINE INDENT max_p1 = max ( max_p1 , p1 ) NEW_LINE DEDENT min_p2 = sys . maxsize NEW_LINE for p2 in P2 : NEW_LINE INDENT min_p2 = min ( min_p2 , p2 ) NEW_LINE DEDENT r2 = math . sqrt ( max_r1 ** 2 * float ( B ) ** 2 / ( A * min_p2 + B * max_p1 ) ) NEW_LINE print ( r2 ) NEW_LINE DEDENT
def trapezium_pattern ( num ) : NEW_LINE INDENT firsthalf = 1 NEW_LINE secondhalf = ( num * num ) + 1 NEW_LINE nb_spaces = 0 NEW_LINE for nb_lines in range ( num , 1 , - 1 ) : NEW_LINE INDENT for nb_spaces_counter in range ( nb_spaces , 1 , - 1 ) : NEW_LINE INDENT print ( " ▁ " , end = " " ) NEW_LINE DEDENT for first_half_counter in range ( 1 , nb_lines + 1 ) : NEW_LINE INDENT if first_half_counter == nb_lines : NEW_LINE INDENT print ( ( firsthalf , first_half ) ) NEW_LINE first_half += 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( firsthalf , first_half ) , end = " " ) NEW_LINE first_half += 1 NEW_LINE DEDENT DEDENT for second_half_counter in range ( 1 , nb_lines + 1 ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE second_half += 1 NEW_LINE DEDENT print ( ) NEW_LINE nb_spaces += 2 NEW_LINE secondhalf = ( secondhalf - 1 ) - ( ( nb_lines - 1 ) * 2 ) NEW_LINE DEDENT DEDENT
def find_perm ( n , differences ) : NEW_LINE INDENT import sys NEW_LINE ans = [ 0 ] NEW_LINE x = 0 NEW_LINE for i in range ( 0 , n - 2 + 1 ) : NEW_LINE INDENT diff = differences [ i ] NEW_LINE x = x + diff NEW_LINE ans . append ( x ) NEW_LINE DEDENT anss = [ obj for obj in ans if obj is not None ] NEW_LINE ans . sort ( ) NEW_LINE flag = - 1 NEW_LINE for i in range ( 1 , n - 1 + 1 ) : NEW_LINE INDENT res = ans [ i ] - ans [ i - 1 ] NEW_LINE if res != 1 : NEW_LINE INDENT flag = 0 NEW_LINE DEDENT DEDENT if flag == 0 : NEW_LINE INDENT sys . stdout . write ( - 1 ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT mpp = dict ( ) NEW_LINE mpp . clear ( ) NEW_LINE j = 1 NEW_LINE value_at_index = [ ] NEW_LINE for x1 in ans : NEW_LINE INDENT mpp [ x1 ] = j NEW_LINE j += 1 NEW_LINE DEDENT for x2 in anss : NEW_LINE INDENT value_at_index . append ( mpp [ x2 ] ) NEW_LINE DEDENT for x3 in value_at_index : NEW_LINE INDENT sys . stdout . write ( ' % d ▁ ' % x3 ) NEW_LINE DEDENT sys . stdout . write ( ' \n ' ) NEW_LINE DEDENT DEDENT
def count_prime_factors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while n % 2 == 0 : NEW_LINE INDENT n = n // 2 NEW_LINE count += 1 NEW_LINE DEDENT for i in range ( 3 , math . sqrt ( n ) + 1 , 2 ) : NEW_LINE INDENT while n % i == 0 : NEW_LINE INDENT n = n // i NEW_LINE count += 1 NEW_LINE DEDENT DEDENT if n > 2 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return ( count ) NEW_LINE DEDENT def print_k_almost_primes ( k , n ) : NEW_LINE INDENT for i , num in enumerate ( [ 1 , 2 , n + 1 ] ) : NEW_LINE INDENT if count_prime_factors ( num ) == k : NEW_LINE INDENT print ( num , end = ' ▁ ' ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n , k = 10 , 2 NEW_LINE print ( ' First ▁ % d ▁ % d - almost ▁ prime ▁ numbers : ▁ ' % ( n , k ) ) NEW_LINE print_k_almost_primes ( k , n ) NEW_LINE DEDENT
def GFG ( N , K ) : NEW_LINE INDENT global combo NEW_LINE combo = [ 1 ] * 50 NEW_LINE for i in range ( 1 , K + 1 ) : NEW_LINE INDENT for j in range ( 0 , N + 1 ) : NEW_LINE INDENT if j >= i : NEW_LINE INDENT combo [ j ] += combo [ j - i ] NEW_LINE DEDENT DEDENT DEDENT return combo [ N ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE sys . stdin . write ( ' ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁
def GFG ( m , n ) : NEW_LINE INDENT N = float ( ( abs ( m ) * abs ( n ) ) / math . sqrt ( ( abs ( m ) ** 2 ) + ( abs ( n ) ** 2 ) ) ) NEW_LINE return N NEW_LINE DEDENT
def assignment4 ( ) : NEW_LINE INDENT import math NEW_LINE f = open ( ' assignment4' ) NEW_LINE data = f . read ( ) NEW_LINE num = data . split ( ) NEW_LINE n = float ( num [ 0 ] ) NEW_LINE h = float ( num [ 1 ] ) NEW_LINE for i in range ( 1.0 , n ) : NEW_LINE INDENT ans = h * math . sqrt ( i / n ) NEW_LINE print ( ' % f ▁ ' % ans ) NEW_LINE if i == n - 1 : NEW_LINE INDENT print ( ) NEW_LINE DEDENT DEDENT DEDENT
def count_bits ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while n != 0 : NEW_LINE INDENT count += 1 NEW_LINE n >>= 1 NEW_LINE DEDENT return count NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT h = int ( sys . stdin . readline ( ) ) NEW_LINE w = int ( sys . stdin . readline ( ) ) NEW_LINE a = int ( sys . stdin . readline ( ) ) NEW_LINE b = int ( sys . stdin . readline ( ) ) NEW_LINE print ( h * w - ( h / a ** 2 ) * ( w / b ** 2 ) ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE n , max , ans = 0 , 0 , 0 NEW_LINE l = [ ] NEW_LINE t = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT t . append ( random . randint ( 0 , max ) ) NEW_LINE max = max ( max , t [ i ] ) NEW_LINE DEDENT for i in range ( 1 , max + 1 ) : NEW_LINE INDENT if max % i == 0 : NEW_LINE INDENT l . append ( i ) NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( len ( l ) ) : NEW_LINE INDENT if l [ j ] >= t [ i ] : NEW_LINE INDENT ans += l [ j ] - t [ i ] NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def LongestSubarray ( arr , n , k ) : NEW_LINE INDENT arr2 = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr2 . append ( arr [ i ] % k ) NEW_LINE DEDENT current_length , max_length = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT current_length = 1 NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT if arr2 [ j ] == arr2 [ i ] : NEW_LINE INDENT current_length += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT max_length = max ( max_length , current_length ) NEW_LINE i = j NEW_LINE DEDENT return max_length NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE fs = sys . stdin . fileno ( ) NEW_LINE T = 1 , i , j , k = 0 , 0 , 0 NEW_LINE n , m , l , ans , ans2 , ans3 , b , c = 0 , 0 , 0 , 0 , 0 , 0 NEW_LINE for tt in range ( T ) : NEW_LINE INDENT n = fs . readline ( ) NEW_LINE m = fs . readline ( ) NEW_LINE if n == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE return NEW_LINE DEDENT if n - m > m - 1 : NEW_LINE INDENT print ( m + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( m - 1 ) NEW_LINE DEDENT DEDENT import random NEW_LINE random . seed ( ) NEW_LINE def ruffle_sort ( a ) : NEW_LINE INDENT n = len ( a ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT oi , temp = random . randint ( n , i ) , a [ oi ] NEW_LINE a [ oi ] = a [ i ] NEW_LINE a [ i ] = temp NEW_LINE DEDENT a . sort ( ) NEW_LINE DEDENT class FastScanner ( sys . stdin . readline ) : NEW_LINE INDENT def readline ( ) : NEW_LINE INDENT while not a : NEW_LINE INDENT try : NEW_LINE INDENT a = list ( a ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT return a [ 0 ] NEW_LINE DEDENT def readline ( ) : NEW_LINE INDENT return int ( a ) NEW_LINE DEDENT def read_array ( n ) : NEW_LINE INDENT a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( randint ( 1 , n ) ) NEW_LINE DEDENT return a NEW_LINE DEDENT def readline ( ) : NEW_LINE INDENT return int ( next ( ) ) NEW_LINE DEDENT DEDENT DEDENT return FastScanner ( ) NEW_LINE DEDENT
def GFG ( s , n ) : NEW_LINE INDENT hash = { } NEW_LINE for c in s : NEW_LINE INDENT if c in ' ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁
def p024 ( ) : NEW_LINE INDENT print ( eval ( ' p024' ) ) NEW_LINE x = [ ] NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT x . append ( i ) NEW_LINE DEDENT for i in range ( 999999 ) : NEW_LINE INDENT if not lib . next_permutation ( x ) : NEW_LINE INDENT raise AssertionError NEW_LINE DEDENT DEDENT ans = ' ' NEW_LINE for i in x : NEW_LINE INDENT ans += str ( i ) NEW_LINE DEDENT return ans NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT if x > x1 and x < x2 and y > y1 and y < y2 : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def GFG ( n , points ) : NEW_LINE INDENT import math NEW_LINE import random NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return math NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT import subprocess NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT try : NEW_LINE INDENT X = subprocess . check_output ( [ ' / usr / bin / python ' , ' - m ' , ' - - no - color ' ] ) . strip ( ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT Y = int ( X ) NEW_LINE Z = Y / X NEW_LINE answer = f ( Z ) + 1 NEW_LINE print ( answer ) NEW_LINE DEDENT DEDENT def f ( Z ) : NEW_LINE INDENT t = 1 NEW_LINE result = 0 NEW_LINE while t < Z : NEW_LINE INDENT t *= 2 NEW_LINE result += 1 NEW_LINE DEDENT if t == Z : NEW_LINE INDENT return result NEW_LINE DEDENT return result - 1 NEW_LINE DEDENT DEDENT
def GFG ( data , n ) : NEW_LINE INDENT import string NEW_LINE sticks = [ 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 ] NEW_LINE def count_sticks ( data , n ) : NEW_LINE INDENT cnt = 0 NEW_LINE for c in data [ n : ] : NEW_LINE INDENT cnt += ( sticks [ ord ( c ) - ord ( '0' ) ] ) NEW_LINE DEDENT return cnt NEW_LINE DEDENT def main ( data ) : NEW_LINE INDENT data = '56' NEW_LINE n = len ( data ) NEW_LINE print ( count_sticks ( data , n ) ) NEW_LINE DEDENT return ' ' . join ( str ( n ) for n in range ( n ) ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE infile = sys . stdin NEW_LINE outfile = sys . stdout NEW_LINE t = int ( infile . readline ( ) ) NEW_LINE while t > 0 : NEW_LINE INDENT n = int ( infile . readline ( ) ) NEW_LINE a = [ None ] * n NEW_LINE f = open ( infile . readline ( ) , ' w ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = int ( f . readline ( ) ) NEW_LINE DEDENT replace_next = False NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT if replace_next : NEW_LINE INDENT a [ i ] = max ( a [ i - 1 ] , a [ i + 1 ] ) NEW_LINE ans += 1 NEW_LINE replace_next = False NEW_LINE DEDENT if a [ i ] > a [ i - 1 ] and a [ i ] > a [ i + 1 ] : NEW_LINE INDENT replace_next = True NEW_LINE DEDENT DEDENT if replace_next : NEW_LINE INDENT a [ n - 1 ] = a [ n - 2 ] NEW_LINE ans += 1 NEW_LINE replace_next = False NEW_LINE DEDENT outfile . write ( str ( ans ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT outfile . write ( str ( a [ i ] ) + ' ▁ ' ) NEW_LINE DEDENT outfile . write ( ' \n ' ) NEW_LINE DEDENT infile . close ( ) NEW_LINE outfile . close ( ) NEW_LINE DEDENT
def GFG ( arr , a , b ) : NEW_LINE INDENT arr [ a ] ^= True NEW_LINE arr [ b + 1 ] ^= True NEW_LINE def process ( arr , n ) : NEW_LINE INDENT for k in range ( 1 , n + 1 ) : NEW_LINE INDENT arr [ k ] ^= arr [ k - 1 ] NEW_LINE DEDENT DEDENT def result ( arr , n ) : NEW_LINE INDENT for k in range ( 1 , n + 1 ) : NEW_LINE INDENT if arr [ k ] == True : NEW_LINE INDENT print ( '1' , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( '0' , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT def main ( args ) : NEW_LINE INDENT n , m = 5 , 3 NEW_LINE arr = [ False ] * ( n + 2 ) NEW_LINE command ( arr , 1 , 5 ) NEW_LINE command ( arr , 2 , 5 ) NEW_LINE command ( arr , 3 , 5 ) NEW_LINE process ( arr , n ) NEW_LINE result ( arr , n ) NEW_LINE DEDENT DEDENT
def most_frequent ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE max_count , res = 1 , arr [ 0 ] NEW_LINE curr_count = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if arr [ i ] == arr [ i - 1 ] : NEW_LINE INDENT curr_count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if curr_count > max_count : NEW_LINE INDENT max_count = curr_count NEW_LINE res = arr [ i - 1 ] NEW_LINE DEDENT curr_count = 1 NEW_LINE DEDENT DEDENT if curr_count > max_count : NEW_LINE INDENT max_count = curr_count NEW_LINE res = arr [ n - 1 ] NEW_LINE DEDENT return res NEW_LINE DEDENT
def GFG ( data , len_ ) : NEW_LINE INDENT res = 0 NEW_LINE last_pos = [ - 1 ] * MAX NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT last_pos [ i ] = - 1 NEW_LINE DEDENT for i in range ( len_ ) : NEW_LINE INDENT C = ord ( data [ i ] ) - ord ( ' a ' ) NEW_LINE if last_pos [ C ] != - 1 : NEW_LINE INDENT res = max ( len_ - ( i - last_pos [ C ] - 1 ) - 1 , res ) NEW_LINE DEDENT last_pos [ C ] = i NEW_LINE DEDENT return res NEW_LINE DEDENT
def ksmallest ( arr , n , k ) : NEW_LINE INDENT b = [ 0 ] * MAX NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ arr [ i ] ] = 1 NEW_LINE DEDENT for j in range ( 1 , MAX ) : NEW_LINE INDENT if b [ j ] != 1 : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT if k != 1 : NEW_LINE INDENT return j NEW_LINE DEDENT DEDENT return sys . maxsize NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT while ( n // 100 ) > 0 : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n + ( d * 13 ) ) NEW_LINE DEDENT return ( n % 43 == 0 ) NEW_LINE DEDENT
def is_divisible ( n ) : NEW_LINE INDENT import math NEW_LINE while ( n // 100 ) > 0 : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n - ( d * 14 ) ) NEW_LINE DEDENT return ( n % 47 == 0 ) NEW_LINE DEDENT
def is_divisible ( n ) : NEW_LINE INDENT import math NEW_LINE while ( n // 100 ) > 0 : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n - ( d * 3 ) ) NEW_LINE DEDENT return ( n % 31 == 0 ) NEW_LINE DEDENT
def is_divisible ( n ) : NEW_LINE INDENT import math NEW_LINE while ( n // 100 ) <= 0 : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n - ( d * 7 ) ) NEW_LINE DEDENT return ( n % 71 == 0 ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT total = ( n + 1 ) // 2 NEW_LINE odd = total * total NEW_LINE return odd NEW_LINE DEDENT def Even_Sum ( n ) : NEW_LINE INDENT total = ( n ) // 2 NEW_LINE even = total * ( total + 1 ) NEW_LINE return even NEW_LINE DEDENT def sumLtoR ( L , R ) : NEW_LINE INDENT global odd_sum , even_sum NEW_LINE odd_sum = Odd_Sum ( R ) - Odd_Sum ( L - 1 ) NEW_LINE even_sum = Even_Sum ( R ) - Even_Sum ( L - 1 ) NEW_LINE return even_sum - odd_sum NEW_LINE DEDENT
def is_ratio_possible ( low_cost , up_cost , low_quant , up_quant , r ) : NEW_LINE INDENT import sys NEW_LINE for i in range ( low_quant , up_quant + 1 ) : NEW_LINE INDENT ans = i * r NEW_LINE if low_cost <= ans <= up_cost : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT
def is_power_of_two ( n ) : NEW_LINE INDENT if not n : NEW_LINE INDENT return False NEW_LINE DEDENT return int ( math . ceil ( ( math . log ( n ) / math . log ( 2 ) ) ) ) == int ( math . floor ( ( ( math . log ( n ) / math . log ( 2 ) ) ) ) ) NEW_LINE DEDENT
def p087 ( ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import random as np NEW_LINE from numpy . random import seed NEW_LINE seed = np . random . randint ( 1 , 10 , size = ( 10 , 20 , 30 ) ) NEW_LINE seed = np . random ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . shuffle ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE np . random . seed ( seed ) NEW_LINE DEDENT
def long_len_sub ( arr , n ) : NEW_LINE INDENT import re NEW_LINE um = { } NEW_LINE long_len = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT len = 0 NEW_LINE if arr [ i ] - 1 in um and len < um [ arr [ i ] - 1 ] : NEW_LINE INDENT len = um [ arr [ i ] - 1 ] NEW_LINE DEDENT if arr [ i ] + 1 in um and len < um [ arr [ i ] + 1 ] : NEW_LINE INDENT len = um [ arr [ i ] + 1 ] NEW_LINE DEDENT um [ arr [ i ] ] = len + 1 NEW_LINE if long_len < um [ arr [ i ] ] : NEW_LINE INDENT long_len = um [ arr [ i ] ] NEW_LINE DEDENT DEDENT return long_len NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE s = sys . stdin . read ( ) NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT a = s . find ( ' ▁ ' ) NEW_LINE b = s . find ( ' ▁ ' ) NEW_LINE print ( a + b ) NEW_LINE DEDENT DEDENT
def calculate_sum ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE sum = 1 << n NEW_LINE return ( sum - 1 ) NEW_LINE DEDENT
def calculate_sum ( n ) : NEW_LINE INDENT import math NEW_LINE sum = 0 NEW_LINE for row in range ( n ) : NEW_LINE INDENT sum = sum + ( 1 << row ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def max_diff ( arr , n ) : NEW_LINE INDENT diff = arr [ 1 ] - arr [ 0 ] NEW_LINE curr_sum = diff NEW_LINE max_sum = curr_sum NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT diff = arr [ i + 1 ] - arr [ i ] NEW_LINE if curr_sum > 0 : NEW_LINE INDENT curr_sum += diff NEW_LINE DEDENT else : NEW_LINE INDENT curr_sum = diff NEW_LINE DEDENT if curr_sum > max_sum : NEW_LINE INDENT max_sum = curr_sum NEW_LINE DEDENT DEDENT return max_sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE import random NEW_LINE import sys NEW_LINE mod = 100000007 NEW_LINE def solve ( len , loop ) : NEW_LINE INDENT ret = 0 NEW_LINE dp = [ 0 ] * len + 1 NEW_LINE dp [ 0 ] = 1 NEW_LINE for i in range ( 1 , len + 1 ) : NEW_LINE INDENT for j in range ( 1 , min ( loop , i ) + 1 ) : NEW_LINE INDENT dp [ i ] += dp [ i - j ] NEW_LINE DEDENT dp [ i ] %= mod NEW_LINE if ( len - i ) % loop == 0 : NEW_LINE INDENT ret += dp [ i ] NEW_LINE ret %= mod NEW_LINE DEDENT DEDENT return ret NEW_LINE DEDENT def solve ( ) : NEW_LINE INDENT ans = 1 NEW_LINE prev = 0 NEW_LINE for i in range ( 1 , len ( line ) ) : NEW_LINE INDENT if line [ i ] != line [ i - 1 ] : NEW_LINE INDENT ans *= solve ( i - prev , loop ( line [ prev ] ) ) NEW_LINE ans %= mod NEW_LINE prev = i NEW_LINE DEDENT DEDENT ans *= solve ( len ( line ) - prev , loop ( line [ prev ] ) ) NEW_LINE ans %= mod NEW_LINE return int ( ans ) NEW_LINE DEDENT def loop ( c ) : NEW_LINE INDENT return 3 if c in ( '8' , '0' ) else 5 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT line = input ( ) NEW_LINE if line == ' # ' : NEW_LINE INDENT break NEW_LINE DEDENT print ( solve ( ) ) NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def count_pairs ( n ) : NEW_LINE INDENT num = ( ( n // 2 ) + 1 ) NEW_LINE max = n % num NEW_LINE count = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT val = ( ( n % i ) % j ) % n NEW_LINE if val == max : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = sys . stdin NEW_LINE sys . stdout = sys . stderr NEW_LINE f = Fast ( ) NEW_LINE f . sol ( f , sys . stdout ) NEW_LINE sys . stdout . close ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT subprocess . check_call ( [ ' / usr / bin / env ' , ' - v ' ] ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT sys . stderr . write ( ' Error : ▁ % s \n ' % sys . exc_info ( ) [ 0 ] ) NEW_LINE DEDENT while True : NEW_LINE INDENT n = sys . stdin . read ( 1 ) NEW_LINE m = sys . stdin . read ( 1 ) NEW_LINE if ( n | m ) == 0 : NEW_LINE INDENT break NEW_LINE DEDENT pow3 = [ 1 ] * n + [ 0 ] NEW_LINE pow3 [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT pow3 [ i ] = pow3 [ i - 1 ] * 3 NEW_LINE DEDENT c = [ 0 ] * n NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT a = sys . stdin . read ( 1 ) NEW_LINE for j in range ( a , 0 , - 1 ) : NEW_LINE INDENT k = sys . stdin . read ( 1 ) NEW_LINE c [ n - k ] = i NEW_LINE DEDENT DEDENT p = 0 NEW_LINE x = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT d = abs ( p - c [ i ] ) NEW_LINE x += pow3 [ i ] * d NEW_LINE if d == 1 : NEW_LINE INDENT p = 2 - p NEW_LINE DEDENT DEDENT y = pow3 [ n ] - 1 - x NEW_LINE if x > y : NEW_LINE INDENT x = y NEW_LINE DEDENT print ( - 1 if x > m else x ) NEW_LINE DEDENT DEDENT
def GFG ( g1 , a , g2 , b ) : NEW_LINE INDENT import sys NEW_LINE MAX = 100000 NEW_LINE def print ( g1 , a , g2 , b ) : NEW_LINE INDENT for i in range ( a ) : NEW_LINE INDENT print ( g1 [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ' and ▁ ' , end = ' ▁ ' ) NEW_LINE for i in range ( b ) : NEW_LINE INDENT print ( g2 [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def checksum ( g1 , a , g2 , b ) : NEW_LINE INDENT i , x = 0 , 0 NEW_LINE for i , x in enumerate ( g1 ) : NEW_LINE INDENT x += g1 [ i ] NEW_LINE DEDENT for i in range ( b ) : NEW_LINE INDENT x -= g2 [ i ] NEW_LINE DEDENT return ( x == 0 ) NEW_LINE DEDENT def formgroups ( arr , x , g1 , a , g2 , b , n ) : NEW_LINE INDENT if x == n : NEW_LINE INDENT if checksum ( g1 , a , g2 , b ) : NEW_LINE INDENT print ( g1 , a , g2 , b ) NEW_LINE DEDENT return NEW_LINE DEDENT g1 [ a ] = arr [ x ] NEW_LINE formgroups ( arr , x + 1 , g1 , a + 1 , g2 , b , n ) NEW_LINE g2 [ b ] = arr [ x ] NEW_LINE formgroups ( arr , x + 1 , g1 , a , g2 , b + 1 , n ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 9 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE g1 = [ 0 ] * MAX NEW_LINE g2 = [ 0 ] * MAX NEW_LINE formgroups ( arr , 0 , g1 , 0 , g2 , 0 , n ) NEW_LINE DEDENT return ' ' . join ( g ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . random NEW_LINE n = len ( args ) NEW_LINE a = np . zeros ( ( 3 , n + 1 ) ) NEW_LINE a [ 0 ] = args [ 0 ] NEW_LINE a [ 1 ] = args [ 1 ] NEW_LINE a [ 2 ] = args [ 2 ] NEW_LINE a . sort ( ) NEW_LINE max = 0 NEW_LINE d = np . zeros ( n + 1 ) NEW_LINE d [ - 500 : ] = 0 NEW_LINE d [ 0 ] = 0 NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT if i - a [ j ] >= 0 and d [ i - a [ j ] ] != - 1 : NEW_LINE INDENT d [ i ] = max ( d [ i ] , d [ i - a [ j ] ] + 1 ) NEW_LINE DEDENT DEDENT print ( d [ n ] ) NEW_LINE DEDENT DEDENT
def max_subseq ( vec , n ) : NEW_LINE INDENT import numpy as np NEW_LINE suffix = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if vec [ i ] == 1 : NEW_LINE INDENT suffix += 1 NEW_LINE vec [ i ] = suffix NEW_LINE DEDENT DEDENT res = 0 NEW_LINE zero = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if vec [ i ] == 0 : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT if vec [ i ] > 0 : NEW_LINE INDENT res = max ( res , zero + vec [ i ] ) NEW_LINE DEDENT DEDENT return max ( res , zero ) NEW_LINE DEDENT
def count_paths ( maze ) : NEW_LINE INDENT import math NEW_LINE R = 4 NEW_LINE C = 4 NEW_LINE def count_paths ( maze ) : NEW_LINE INDENT if maze [ 0 ] [ 0 ] == - 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT for i in range ( R ) : NEW_LINE INDENT if maze [ i ] [ 0 ] == 0 : NEW_LINE INDENT maze [ i ] [ 0 ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( 1 , C ) : NEW_LINE INDENT if maze [ 0 ] [ i ] == 0 : NEW_LINE INDENT maze [ 0 ] [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( 1 , R ) : NEW_LINE INDENT for j in range ( 1 , C ) : NEW_LINE INDENT if maze [ i ] [ j ] == - 1 : NEW_LINE INDENT continue NEW_LINE DEDENT if maze [ i - 1 ] [ j ] > 0 : NEW_LINE INDENT maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i - 1 ] [ j ] ) NEW_LINE DEDENT if maze [ i ] [ j - 1 ] > 0 : NEW_LINE INDENT maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT return ( maze [ R - 1 ] [ C - 1 ] if maze [ R - 1 ] [ C - 1 ] > 0 else 0 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT maze = [ [ 0 , 0 , 0 , 0 ] , [ 0 , - 1 , 0 , 0 ] , [ - 1 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ] NEW_LINE print ( count_paths ( maze ) ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def is_prime ( N ) : NEW_LINE INDENT import math NEW_LINE is_prime = True NEW_LINE arr = [ 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 ] NEW_LINE if N < 2 : NEW_LINE INDENT is_prime = False NEW_LINE DEDENT if N % 2 == 0 or N % 3 == 0 or N % 5 == 0 : NEW_LINE INDENT is_prime = False NEW_LINE DEDENT for i in range ( 0 , math . sqrt ( N ) , 30 ) : NEW_LINE INDENT for c in arr : NEW_LINE INDENT if c > math . sqrt ( N ) : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT if N % ( c + i ) == 0 : NEW_LINE INDENT is_prime = False NEW_LINE break NEW_LINE DEDENT DEDENT if not is_prime : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT if is_prime : NEW_LINE INDENT print ( " Prime ▁ Number " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not ▁ a ▁ Prime ▁ Number " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT x1 = sys . stdin . readline ( ) NEW_LINE y1 = sys . stdin . readline ( ) NEW_LINE x2 = sys . stdin . readline ( ) NEW_LINE y2 = sys . stdin . readline ( ) NEW_LINE x3 = x2 + ( y1 - y2 ) NEW_LINE y3 = y2 - ( x1 - x2 ) NEW_LINE x4 = x1 - ( y2 - y1 ) NEW_LINE y4 = y1 + ( x2 - x1 ) NEW_LINE print ( ' % d ▁ % d ▁ % d ▁ % d ' % ( x3 , y3 , x4 , y4 ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def GFG ( x , y ) : return ( x if x > y else y ) NEW_LINE def lps ( seq , i , j ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT return 1 NEW_LINE DEDENT if seq [ i ] == seq [ j ] and i + 1 == j : NEW_LINE INDENT return 2 NEW_LINE DEDENT if seq [ i ] == seq [ j ] : NEW_LINE INDENT return lps ( seq , i + 1 , j - 1 ) + 2 NEW_LINE DEDENT return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT seq = ' GEEKSFORGEEKS ' NEW_LINE n = len ( seq ) NEW_LINE print ( ' The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ % d ' % lps ( seq [ : n - 1 ] ) ) NEW_LINE DEDENT
def find_length ( data , n ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 0 , n - 2 + 1 ) : NEW_LINE INDENT l , r = i , i + 1 NEW_LINE lsum , rsum = 0 , 0 NEW_LINE while r < n and l >= 0 : NEW_LINE INDENT lsum += ord ( data [ l ] ) - ord ( '0' ) NEW_LINE rsum += ord ( data [ r ] ) - ord ( '0' ) NEW_LINE if lsum == rsum : NEW_LINE INDENT ans = max ( ans , r - l + 1 ) NEW_LINE DEDENT l -= 1 NEW_LINE r += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def GfG ( a , n , ind ) : NEW_LINE INDENT for i in range ( ind , n + ind ) : NEW_LINE INDENT print ( a [ ( i % n ) ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def main ( argc ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE class GfG ( string ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . a = list ( ( 2 * n ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT self . b [ n + i ] = a [ i ] NEW_LINE DEDENT for i in range ( self . ind , self . n + self . ind ) : NEW_LINE INDENT print ( ' % s ▁ ' % self . b [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def __init__ ( self ) : NEW_LINE INDENT self . a = list ( ( ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' ) ) NEW_LINE n = 6 NEW_LINE self . a = a [ n : n + 3 ] NEW_LINE DEDENT def __str__ ( self ) : NEW_LINE INDENT return self . a [ n : n + 3 ] NEW_LINE DEDENT DEDENT return GfG ( ) NEW_LINE DEDENT
def er42b ( ) : NEW_LINE INDENT import string NEW_LINE n , a , b = list ( string . ascii_lowercase ) , list ( string . ascii_uppercase ) , list ( string . ascii_lowercase ) NEW_LINE s = ' ' . join ( s ) NEW_LINE ans = a + b NEW_LINE flip = 1 if a > b else - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if not a and not b : NEW_LINE INDENT break NEW_LINE DEDENT if s [ i ] == ' * ' : NEW_LINE INDENT flip = 1 if a > b else - 1 NEW_LINE DEDENT else : NEW_LINE INDENT if flip == 1 : NEW_LINE INDENT a = ( 0 if a == 0 else a - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT b = ( 0 if b == 0 else b - 1 ) NEW_LINE DEDENT flip *= - 1 NEW_LINE DEDENT DEDENT print ( ans - a - b ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import os NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE n = len ( sys . argv ) NEW_LINE id = sys . argv [ 1 ] NEW_LINE root = Node ( id = 1 , depth = 0 , name = sys . argv [ 2 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT target_id = sys . argv [ 2 ] NEW_LINE parent = root . find_node ( target_id ) NEW_LINE parent . children . append ( Node ( id = 1 , depth = parent . depth + 1 , name = sys . argv [ 3 ] ) ) NEW_LINE DEDENT root . print_contents ( ) NEW_LINE sys . exit ( 1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . fft as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 0 ) NEW_LINE import numpy . random as np NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 0 ) NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 0 ) NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 0 ) NEW_LINE import numpy . random as np NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 1 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE np . random . seed ( 0 ) NEW_LINE dp = np . zeros ( t ) NEW_LINE for
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = len ( sys . stdin ) NEW_LINE a , b = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE a . sort ( ) NEW_LINE b . sort ( ) NEW_LINE j = n - 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if b [ j ] >= a [ i ] : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT DEDENT print ( j + 1 ) NEW_LINE j = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if b [ i ] > a [ j ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT print ( j , end = ' ▁ ' ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE import numpy . testing . ufuncs as ufuncs NEW_LINE num = np . zeros ( 3 ) NEW_LINE num [ 0 ] = ufuncs [ 0 ] NEW_LINE num [ 1 ] = ufuncs [ 1 ] NEW_LINE num [ 2 ] = ufuncs [ 2 ] NEW_LINE num . sort ( ) NEW_LINE dis1 = num [ 2 ] - num [ 0 ] NEW_LINE dis2 = num [ 2 ] - num [ 1 ] NEW_LINE ans = 0 NEW_LINE if dis1 % 2 == 0 and dis2 % 2 == 0 : NEW_LINE INDENT ans = dis1 // 2 + dis2 // 2 NEW_LINE DEDENT elif dis1 % 2 != 0 and dis2 % 2 != 0 : NEW_LINE INDENT ans = dis1 // 2 + dis2 // 2 + 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = dis1 // 2 + dis2 // 2 + 2 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT T = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT while T > 0 : NEW_LINE INDENT T -= 1 NEW_LINE n = sys . stdin . read ( ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , i + 1 ) : NEW_LINE INDENT if j == 1 or i == j : NEW_LINE INDENT print ( 1 , end = ' ▁ ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT DEDENT
def bin ( n = None ) : NEW_LINE INDENT if n > 1 : NEW_LINE INDENT bin ( n >> 1 ) NEW_LINE DEDENT print ( " % d " % ( n & 1 ) ) NEW_LINE DEDENT
def p001 ( ) : NEW_LINE INDENT print ( eval ( ' p001 ( ) ' ) ) NEW_LINE def run ( ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1000 ) : NEW_LINE INDENT if i % 3 == 0 or i % 5 == 0 : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return str ( sum ) NEW_LINE DEDENT return run NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT str = string . strip ( sys . stdin . readline ( ) ) NEW_LINE s = " " NEW_LINE s1 = " " NEW_LINE for c in str : NEW_LINE INDENT if c == " n " : NEW_LINE INDENT s += "1 ▁ " NEW_LINE DEDENT if c == " z " : NEW_LINE INDENT s1 += "0 ▁ " NEW_LINE DEDENT DEDENT print ( s + s1 ) NEW_LINE DEDENT DEDENT
def solve ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT R , G = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE print ( ( 2 * G ) - R ) NEW_LINE sys . stdin . close ( ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( ' ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁
def Circular ( n ) : NEW_LINE INDENT import sys NEW_LINE from math import pi NEW_LINE from math import sin , cos , pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import pi NEW_LINE from math import
def product_diagonals ( arr , n ) : NEW_LINE INDENT product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT product = product * arr [ i ] [ i ] NEW_LINE product = product * arr [ i ] [ n - i - 1 ] NEW_LINE DEDENT if n % 2 == 1 : NEW_LINE INDENT product = product // arr [ n // 2 ] [ n // 2 ] NEW_LINE DEDENT return product NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import math NEW_LINE import sys NEW_LINE for _ in range ( 10 ) : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT map = [ 0 ] * 10 NEW_LINE for i in range ( n ) : NEW_LINE INDENT map [ sys . stdin . readline ( ) ] += 1 NEW_LINE DEDENT for i in range ( 10 ) : NEW_LINE INDENT ans = ' - ' NEW_LINE if map [ i ] != 0 : NEW_LINE INDENT ch = list ( map [ i ] ) NEW_LINE ch [ i ] = ' * ' NEW_LINE ans = ch [ i ] NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT DEDENT
def GFG ( data ) : NEW_LINE INDENT NO_OF_CHARS = 256 NEW_LINE count = [ 0 ] * NO_OF_CHARS NEW_LINE for c in data : NEW_LINE INDENT ( count [ ord ( c ) ] ) NEW_LINE DEDENT first , second = 0 , 0 NEW_LINE for i in range ( NO_OF_CHARS ) : NEW_LINE INDENT if count [ i ] > count [ first ] : NEW_LINE INDENT second = first NEW_LINE first = i NEW_LINE DEDENT elif count [ i ] > count [ second ] and count [ i ] != count [ first ] : NEW_LINE INDENT second = i NEW_LINE DEDENT DEDENT return chr ( second ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE dp = np . zeros ( ( 5 , 4001 ) ) NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , 5 ) : NEW_LINE INDENT for ii in range ( 0 , 1000 * i + 1 ) : NEW_LINE INDENT for iii in range ( max ( 0 , ii - 1000 ) , ii + 1 ) : NEW_LINE INDENT dp [ i ] [ ii ] += dp [ i - 1 ] [ iii ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( 4 ) : NEW_LINE INDENT print ( dp [ 4 ] [ i ] ) NEW_LINE DEDENT DEDENT
def my_sort ( arr = None ) : NEW_LINE INDENT import sys NEW_LINE n = len ( arr ) NEW_LINE arr . sort ( ) NEW_LINE arr . sort ( reverse = True ) NEW_LINE DEDENT
def minflip ( arr1 , arr2 , arr3 , p , q , n ) : NEW_LINE INDENT flip = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr1 [ i ] > 0 ^ arr2 [ i ] > 0 != arr3 [ i ] > 0 : NEW_LINE INDENT flip += 1 NEW_LINE DEDENT DEDENT return ( flip if flip <= p + q else - 1 ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i NEW_LINE DEDENT return s NEW_LINE DEDENT
def bitonic_generator ( arr , n ) : NEW_LINE INDENT import numpy as np NEW_LINE evenarr = [ ] NEW_LINE oddarr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i % 2 != 1 : NEW_LINE INDENT evenarr . append ( arr [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT oddarr . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT evenarr . sort ( ) NEW_LINE oddarr . sort ( reverse = True ) NEW_LINE i = 0 NEW_LINE for j in evenarr : NEW_LINE INDENT arr [ i ] += 1 NEW_LINE DEDENT for j in oddarr : NEW_LINE INDENT arr [ i ] += 1 NEW_LINE DEDENT DEDENT
def count_pairs ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE right , left = 0 , 0 NEW_LINE visited = [ False ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT visited [ i ] = False NEW_LINE DEDENT while right < n : NEW_LINE INDENT while right < n and not visited [ arr [ right ] ] : NEW_LINE INDENT count += ( right - left ) NEW_LINE visited [ arr [ right ] ] = True NEW_LINE right += 1 NEW_LINE DEDENT while left < right and ( right != n and visited [ arr [ right ] ] ) : NEW_LINE INDENT visited [ arr [ left ] ] = False NEW_LINE left += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT
def preorder ( root_data ) : NEW_LINE INDENT import string NEW_LINE class TreeNode ( int ) : NEW_LINE INDENT def __init__ ( self , root_data ) : NEW_LINE INDENT self . val = root_data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT class Solution ( object ) : NEW_LINE INDENT trees = set ( ) NEW_LINE def isSubtree ( self , s , t ) : NEW_LINE INDENT tree1 = self . preorder ( s , True ) NEW_LINE tree2 = self . preorder ( t , True ) NEW_LINE return tree1 . find ( tree2 ) >= 0 NEW_LINE DEDENT def preorder ( self , t , left ) : NEW_LINE INDENT if t is None : NEW_LINE INDENT if left : NEW_LINE INDENT return ' lnull ' NEW_LINE DEDENT else : NEW_LINE INDENT return ' rnull ' NEW_LINE DEDENT DEDENT return ' # % d ▁ % s ▁ % s ' % ( t . val , self . preorder ( t . left , True ) , self . preorder ( t . right , False ) ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE root = TreeNode ( 3 ) NEW_LINE root . left = TreeNode ( 4 ) NEW_LINE root . right = TreeNode ( 5 ) NEW_LINE root . left . left = TreeNode ( 1 ) NEW_LINE root . left . right = TreeNode ( 2 ) NEW_LINE subRoot = TreeNode ( 4 ) NEW_LINE subRoot . left = TreeNode ( 1 ) NEW_LINE subRoot . right = TreeNode ( 2 ) NEW_LINE out = sObj . isSubtree ( root , subRoot ) NEW_LINE print ( out ) NEW_LINE DEDENT DEDENT
def GFG ( idx , diff , N , M , K ) : NEW_LINE INDENT global dp NEW_LINE if idx > N : NEW_LINE INDENT if diff == K : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if dp [ idx ] [ diff ] != - 1 : NEW_LINE INDENT return dp [ idx ] [ diff ] NEW_LINE DEDENT ans = solve ( idx + 1 , diff , N , M , K ) NEW_LINE ans += ( M - 1 ) * solve ( idx + 1 , diff + 1 , N , M , K ) NEW_LINE return dp [ idx ] [ diff ] = ans % MOD NEW_LINE DEDENT
def p222 ( ) : NEW_LINE INDENT print ( eval ( ' p222 ( ) ' ) ) NEW_LINE global sphere_radii NEW_LINE sphere_radii = [ ( i + 30 ) * 1000 for i in range ( 21 ) ] NEW_LINE min_length = [ None ] * [ 1 << len ( sphere_radii ) ] NEW_LINE min = float ( ' inf ' ) NEW_LINE for i in range ( len ( sphere_radii ) ) : NEW_LINE INDENT min = min ( find_minimum_length ( i , ( 1 << len ( sphere_radii ) ) - 1 ) + sphere_radii [ i ] , min ) NEW_LINE DEDENT return str ( round ( min ) ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE sides = [ 0 ] * 3 NEW_LINE judge = False NEW_LINE for i in range ( len ( args ) ) : NEW_LINE INDENT line = args [ i ] NEW_LINE sides [ i ] = int ( line ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT line = args [ i ] NEW_LINE tmp = line . split ( ) NEW_LINE for j in range ( len ( sides ) ) : NEW_LINE INDENT sides [ j ] = int ( tmp [ j ] ) NEW_LINE sides [ j ] *= sides [ j ] NEW_LINE DEDENT for j in range ( len ( sides ) ) : NEW_LINE INDENT if sides [ j % 3 ] == sides [ ( j + 1 ) % 3 ] + sides [ ( j + 2 ) % 3 ] : NEW_LINE INDENT judge = True NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT judge = False NEW_LINE DEDENT DEDENT Answer ( judge ) NEW_LINE DEDENT def Answer ( j ) : NEW_LINE INDENT if j : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def get_total_xor_of_subarray_xors ( arr , N ) : NEW_LINE INDENT import numpy as np NEW_LINE if N % 2 == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( 0 , N , 2 ) : NEW_LINE INDENT res ^= arr [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT
def get_total_xor_of_subarray_xors ( arr , N ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT freq = ( i + 1 ) * ( N - i ) NEW_LINE if freq % 2 == 1 : NEW_LINE INDENT res = res ^ arr [ i ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT x = sys . stdin . read ( ) NEW_LINE DEDENT except AttributeError : NEW_LINE INDENT pass NEW_LINE DEDENT l , p , q = x . strip ( ) . split ( ' ▁ ' ) NEW_LINE print ( ( p * l ) / ( p + q ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT arr = [ ] NEW_LINE for i in range ( 2 * n ) : NEW_LINE INDENT arr . append ( math . pi * ( 2 * n - i ) ) NEW_LINE DEDENT arr . sort ( ) NEW_LINE print ( abs ( arr [ n ] - arr [ n - 1 ] ) ) NEW_LINE t -= 1 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE if math is None : NEW_LINE INDENT return math NEW_LINE DEDENT if math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT elif math is None : NEW_LINE INDENT return math . nan NEW_LINE DEDENT else : NEW_LINE INDENT return math . nan NEW_LINE DEDENT DEDENT
def CF95A ( ) : NEW_LINE INDENT import sys NEW_LINE class CF95A ( sys . stdout , True ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdout . write ( ' ' ) NEW_LINE self . flush ( ) NEW_LINE DEDENT DEDENT with open ( ' ' , ' rb ' ) as f : NEW_LINE INDENT def main ( * args , ** kwargs ) : NEW_LINE INDENT o = CF95A ( ) NEW_LINE o . main ( * args , ** kwargs ) NEW_LINE o . flush ( ) NEW_LINE DEDENT def compare ( aa , i , bb , j , m ) : NEW_LINE INDENT while m > 0 : NEW_LINE INDENT a = aa [ i ] . upper ( ) NEW_LINE b = bb [ j ] . upper ( ) NEW_LINE if a != b : NEW_LINE INDENT return a - b NEW_LINE DEDENT i += 1 NEW_LINE j += 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT def main ( * args , ** kwargs ) : NEW_LINE INDENT n = len ( f ) NEW_LINE ss = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT ss . append ( f . read ( n ) ) NEW_LINE DEDENT cc = list ( args ) NEW_LINE m = len ( cc ) NEW_LINE c = c . upper ( ) NEW_LINE c_ = c . upper ( ) NEW_LINE a = ' b ' if c == ' a ' else ' a ' NEW_LINE a_ = a . upper ( ) NEW_LINE lucky = [ False ] * m NEW_LINE for j in range ( m ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT l = len ( ss [ i ] ) NEW_LINE if m - j >= l and compare ( cc , j , ss [ i ] , 0 , l ) == 0 : NEW_LINE INDENT for h in range ( l ) : NEW_LINE INDENT lucky [ j + h ] = True NEW_LINE DEDENT DEDENT DEDENT for j in range ( m ) : NEW_LINE INDENT if lucky [ j ] : NEW_LINE INDENT if cc [ j ] . lower ( ) == c : NEW_LINE INDENT cc [ j ] = a_ if cc [ j ] . isupper ( ) else a NEW_LINE DEDENT else : NEW_LINE INDENT cc [ j ] = c_ if cc [ j ] . isupper ( ) else c NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( cc ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE try : NEW_LINE INDENT a = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT c = list ( sys . stdin . readlines ( ) ) NEW_LINE w = [ 0 ] * ( a + 1 ) NEW_LINE e = [ 0 ] * ( a + 1 ) NEW_LINE min = a NEW_LINE for i in range ( 1 , a + 1 ) : NEW_LINE INDENT if c [ i - 1 ] == ' W ' : NEW_LINE INDENT w [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT e [ i ] += 1 NEW_LINE DEDENT w [ i ] += w [ i - 1 ] NEW_LINE e [ i ] += e [ i - 1 ] NEW_LINE DEDENT for i in range ( 1 , a + 1 ) : NEW_LINE INDENT min = min ( min , w [ i - 1 ] + e [ a ] - e [ i ] ) NEW_LINE DEDENT print ( min ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE even = 0 NEW_LINE odd = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT num1 = sys . stdin . readline ( ) NEW_LINE if num1 % 2 == 0 : NEW_LINE INDENT even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd += 1 NEW_LINE DEDENT DEDENT if even > odd : NEW_LINE INDENT print ( odd ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( even ) NEW_LINE DEDENT DEDENT except : NEW_LINE INDENT print ( ' No ▁ such ▁ file ▁ or ▁ directory ' ) NEW_LINE DEDENT DEDENT
def do_it ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import random NEW_LINE MAX = 10000000 NEW_LINE prime = [ False ] * ( MAX + 1 ) NEW_LINE for i in range ( 3 , MAX + 1 , 2 ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT for i in range ( 3 , MAX + 1 , 2 ) : NEW_LINE INDENT if prime [ i ] : NEW_LINE INDENT for j in range ( i * 3 , MAX + 1 , 2 ) : NEW_LINE INDENT prime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT n = random . randint ( 0 , 1 ) NEW_LINE while n != 0 : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT for i in range ( n , 13 , - 2 ) : NEW_LINE INDENT if prime [ i ] and prime [ i - 2 ] and prime [ i - 6 ] and prime [ i - 8 ] : NEW_LINE INDENT print ( i ) NEW_LINE break NEW_LINE DEDENT DEDENT n = random . randint ( 0 , 1 ) NEW_LINE DEDENT DEDENT
def B_Spider_Man ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import random NEW_LINE import sys NEW_LINE class B_Spider_Man ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT try : NEW_LINE INDENT s = list ( sys . stdin . readline ( ) . split ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT return s NEW_LINE DEDENT DEDENT def __next__ ( self ) : NEW_LINE INDENT while not s or not s : NEW_LINE INDENT try : NEW_LINE INDENT s . next ( ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT return s [ 0 ] NEW_LINE DEDENT def __next__ ( self ) : NEW_LINE INDENT return int ( self . __next__ ) NEW_LINE DEDENT def __next__ ( self ) : NEW_LINE INDENT return int ( self . __next__ ) NEW_LINE DEDENT def __next__ ( self ) : NEW_LINE INDENT return int ( self . __next__ ) NEW_LINE DEDENT def __next__ ( self ) : NEW_LINE INDENT return int ( self . __next__ ) NEW_LINE DEDENT def __next__ ( self ) : NEW_LINE INDENT return float ( self . __next__ ) NEW_LINE DEDENT DEDENT return B_Spider_Man ( ) NEW_LINE DEDENT
def power_of_two ( n ) : NEW_LINE INDENT import re NEW_LINE return ( ( n & n - 1 ) == 0 ) NEW_LINE DEDENT
def minimum_cost_of_breaking ( X = None , Y = None , m = None , n = None ) : NEW_LINE INDENT res = 0 NEW_LINE X . sort ( reverse = True ) NEW_LINE Y . sort ( reverse = True ) NEW_LINE hzntl , vert = 1 , 1 NEW_LINE i , j = 0 , 0 NEW_LINE while i < m and j < n : NEW_LINE INDENT if X [ i ] > Y [ j ] : NEW_LINE INDENT res += X [ i ] * vert NEW_LINE hzntl += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT res += Y [ j ] * hzntl NEW_LINE vert += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT total = 0 NEW_LINE while i < m : NEW_LINE INDENT total += X [ i ] NEW_LINE i += 1 NEW_LINE DEDENT res += total * vert NEW_LINE total = 0 NEW_LINE while j < n : NEW_LINE INDENT total += Y [ j ] NEW_LINE j += 1 NEW_LINE DEDENT res += total * hzntl NEW_LINE return res NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def count_pairs ( G , L ) : NEW_LINE INDENT count = 0 NEW_LINE p = G * L NEW_LINE for a in range ( 1 , L + 1 ) : NEW_LINE INDENT if ( p % a == 0 ) and gcd ( a , p // a ) == G : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT G , L = 2 , 12 NEW_LINE print ( " Total ▁ possible ▁ pair ▁ with ▁ GCD ▁ % d " % G , end = ' ▁ & ▁ LCM ▁ % d ' % L ) NEW_LINE print ( " ▁ = ▁ % d " % count_pairs ( G , L ) , end = ' ▁ & ▁ LCM ▁ % d " % count_pairs ( G , L ) ) NEW_LINE DEDENT
def multiply ( a , b ) : NEW_LINE INDENT mul = np . zeros ( ( 3 , 3 ) ) NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT mul [ i ] [ j ] = 0 NEW_LINE for k in range ( 3 ) : NEW_LINE INDENT mul [ i ] [ j ] += a [ i ] [ k ] * b [ k ] [ j ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( 3 ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT a [ i ] [ j ] = mul [ i ] [ j ] NEW_LINE DEDENT DEDENT def power ( F , n ) : NEW_LINE INDENT M = np . array ( [ [ 1 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] ] ) NEW_LINE if n == 1 : NEW_LINE INDENT return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] NEW_LINE DEDENT power ( F , n // 2 ) NEW_LINE power ( F , F ) NEW_LINE if n % 2 : NEW_LINE INDENT power ( F , M ) NEW_LINE DEDENT return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] NEW_LINE DEDENT def findNthTerm ( n ) : NEW_LINE INDENT F = np . array ( [ [ 1 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] ] ) NEW_LINE return np . power ( F , n - 2 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 5 NEW_LINE print ( ' F ( 5 ) ▁ is ▁ % d ' % findNthTerm ( n ) ) NEW_LINE DEDENT DEDENT
def MinimumValue ( x , y ) : NEW_LINE INDENT import sys NEW_LINE if x > y : NEW_LINE INDENT temp = x NEW_LINE x = y NEW_LINE y = temp NEW_LINE DEDENT a = 1 NEW_LINE b = x - 1 NEW_LINE c = y - b NEW_LINE sys . stdout . write ( ' % d ▁ % d ▁ % d \n ' % ( a , b , c ) ) NEW_LINE DEDENT
def check_possibility ( nums ) : NEW_LINE INDENT broken_point = 0 NEW_LINE for i in range ( len ( nums ) - 1 ) : NEW_LINE INDENT if nums [ i ] > nums [ i + 1 ] : NEW_LINE INDENT broken_point += 1 NEW_LINE if broken_point >= 2 : NEW_LINE INDENT return False NEW_LINE DEDENT if i - 1 < 0 or nums [ i - 1 ] <= nums [ i + 1 ] : NEW_LINE INDENT nums [ i ] = nums [ i + 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i + 1 ] = nums [ i ] NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT
def GFG ( array , n , K ) : NEW_LINE INDENT count = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if array [ i ] > mid : NEW_LINE INDENT return False NEW_LINE DEDENT sum += array [ i ] NEW_LINE if sum > mid : NEW_LINE INDENT count += 1 NEW_LINE sum = array [ i ] NEW_LINE DEDENT DEDENT count += 1 NEW_LINE if count <= K : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import list NEW_LINE import math NEW_LINE memo = [ 0 ] * ( 1 << 22 ) NEW_LINE while True : NEW_LINE INDENT M , N = int ( sys . stdin . readline ( ) ) , int ( sys . stdin . readline ( ) ) NEW_LINE if not M : NEW_LINE INDENT break NEW_LINE DEDENT list = [ int ( i , 2 ) for i in string . split ( sys . stdin . readline ( ) , ' ▁ ' ) ] NEW_LINE memo [ used ] = - 1 NEW_LINE print ( rec ( 0 , list ) ) NEW_LINE DEDENT DEDENT def rec ( used , list ) : NEW_LINE INDENT if len ( list ) <= 1 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if memo [ used ] >= 0 : NEW_LINE INDENT return memo [ used ] NEW_LINE DEDENT ret = 99 NEW_LINE for i in range ( M ) : NEW_LINE INDENT if used & ( 3 << ( 2 * i ) ) : NEW_LINE INDENT continue NEW_LINE DEDENT on = [ ] NEW_LINE off = [ ] NEW_LINE for v in list : NEW_LINE INDENT if v & ( 1 << i ) : NEW_LINE INDENT on . append ( v ) NEW_LINE DEDENT else : NEW_LINE INDENT off . append ( v ) NEW_LINE DEDENT DEDENT if not on or not off : NEW_LINE INDENT continue NEW_LINE DEDENT ret = min ( ret , max ( rec ( used | ( 1 << ( 2 * i ) ) , on ) , rec ( used | ( 2 << ( 2 * i ) ) , off ) ) ) NEW_LINE DEDENT memo [ used ] = ret + 1 NEW_LINE return ret + 1 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE t = int ( sys . stdin . read ( ) ) NEW_LINE for tc in range ( t ) : NEW_LINE INDENT a = math . randint ( 0 , t ) NEW_LINE b = math . randint ( 0 , t ) NEW_LINE print ( solve ( a , b ) ) NEW_LINE DEDENT return min ( min ( compute_square_area ( a + a , b ) , compute_square_area ( a + b , max ( a , b ) ) ) , compute_square_area ( a , b + b ) ) NEW_LINE DEDENT
def solve ( a , b , n ) : NEW_LINE INDENT ans = [ ] NEW_LINE max = sys . maxint NEW_LINE for i in range ( n ) : NEW_LINE INDENT max = max ( max , ( a [ i ] - b [ i ] ) ) NEW_LINE DEDENT if max < 0 : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT temp = a [ i ] - max NEW_LINE if temp <= 0 : NEW_LINE INDENT ans . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( temp ) NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ans [ i ] != b [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT
def even_or_odd ( N ) : NEW_LINE INDENT N = list ( N ) NEW_LINE if N [ - 1 ] in [ '0' , '2' , '4' , '6' ] : NEW_LINE INDENT return ( " Even " ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( " Odd " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE class Vector ( list ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . A = [ 0 ] * 20 NEW_LINE DEDENT def add ( self , x ) : NEW_LINE INDENT if self . length == len ( self . A ) : NEW_LINE INDENT self . A = [ self . A ] * self . length NEW_LINE DEDENT self . A . append ( x ) NEW_LINE self . length += 1 NEW_LINE DEDENT def delete_back ( self ) : NEW_LINE INDENT self . length -= 1 NEW_LINE DEDENT def __str__ ( self ) : NEW_LINE INDENT s = [ ] NEW_LINE if self . length > 0 : NEW_LINE INDENT s . append ( self . A [ 0 ] ) NEW_LINE DEDENT for i in range ( 1 , self . length ) : NEW_LINE INDENT s . append ( ' ▁ % d ' % self . A [ i ] ) NEW_LINE DEDENT return ' ' . join ( s ) NEW_LINE DEDENT DEDENT class Main ( ) : NEW_LINE INDENT def main ( self ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n , q = sys . argv [ 1 ] . split ( ' ▁ ' ) NEW_LINE v = [ ] NEW_LINE active = [ False ] NEW_LINE for req , t in enumerate ( sys . argv [ 2 : ] ) : NEW_LINE INDENT if req == 0 : NEW_LINE INDENT if not active : NEW_LINE INDENT v . append ( [ ] ) NEW_LINE active . append ( True ) NEW_LINE DEDENT v [ t ] . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT elif req == 1 : NEW_LINE INDENT if active [ t ] : NEW_LINE INDENT print ( v [ t ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ) NEW_LINE DEDENT DEDENT elif req == 2 : NEW_LINE INDENT active [ t ] = False NEW_LINE DEDENT DEDENT DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT DEDENT return Main NEW_LINE DEDENT
def pr6 ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE n , k1 , k2 , w1 , w2 , a = list ( ) , 0 , 0 , 0 , 0 , 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( string . strip ( ) ) NEW_LINE if a [ i ] % 2 == 0 : NEW_LINE INDENT w1 += 1 NEW_LINE k1 = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT w2 += 1 NEW_LINE k2 = i + 1 NEW_LINE DEDENT DEDENT print ( ( k1 if w1 == 1 else k2 ) ) NEW_LINE DEDENT
def GFG ( X , Y , N , K ) : NEW_LINE INDENT count = [ 0 ] * ( N + 1 ) NEW_LINE sol = 0 NEW_LINE count [ 0 ] = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT count [ i ] = count [ i - 1 ] + abs ( X [ i - 1 ] - Y [ i - 1 ] ) NEW_LINE DEDENT j = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT while ( count [ i ] - count [ j ] ) > K : NEW_LINE INDENT j += 1 NEW_LINE DEDENT sol = max ( sol , i - j ) NEW_LINE DEDENT return sol NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE import numpy . core as np NEW_LINE np . core . as_global ( np ) NEW_LINE np . core . as_global ( ) NEW_LINE np . core . as_global ( ) NEW_LINE np . core . as_global ( ) NEW_LINE np . core . as_global ( ) NEW_LINE np . core . as_global ( ) NEW_LINE np . core . as_global ( ) NEW_LINE np . core . as_global ( ) NEW_LINE DEDENT
def is_prime ( n , i ) : NEW_LINE INDENT import sys NEW_LINE if n <= 2 : NEW_LINE INDENT return ( True if n == 2 else False ) NEW_LINE DEDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if i * i > n : NEW_LINE INDENT return True NEW_LINE DEDENT return is_prime ( n , i + 1 ) NEW_LINE DEDENT
def is_prime ( n ) : NEW_LINE INDENT import math NEW_LINE i = 2 NEW_LINE while i * i <= n : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return True NEW_LINE def minimum_sum ( n ) : NEW_LINE INDENT if n == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n % 2 == 0 : NEW_LINE INDENT return 2 NEW_LINE DEDENT if n == 2 : NEW_LINE INDENT return 2 NEW_LINE DEDENT if n == 3 : NEW_LINE INDENT return 3 NEW_LINE DEDENT return 4 NEW_LINE DEDENT def main ( n ) : NEW_LINE INDENT n = 27 NEW_LINE print ( minimum_sum ( n ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def is_prime ( x ) : NEW_LINE INDENT import math NEW_LINE for i in range ( 2 , x + 1 ) : NEW_LINE INDENT if x % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE def minimum_cost ( n ) : NEW_LINE INDENT if is_prime ( n ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n % 2 == 1 and is_prime ( n - 2 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if n % 2 == 0 : NEW_LINE INDENT return 2 NEW_LINE DEDENT return 3 NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT n = 6 NEW_LINE print ( minimum_cost ( n ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( x ) : NEW_LINE INDENT global next_higher_one_bit , right_ones_pattern , next NEW_LINE if x > 0 : NEW_LINE INDENT right_one = x & - x NEW_LINE next_higher_one_bit = x + right_one NEW_LINE right_ones_pattern = x ^ next_higher_one_bit NEW_LINE right_ones_pattern = ( right_ones_pattern ) // right_one NEW_LINE right_ones_pattern >>= 2 NEW_LINE next = next_higher_one_bit | right_ones_pattern NEW_LINE DEDENT return next NEW_LINE DEDENT
def proper_divisor_sum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , 2 * i + 1 ) : NEW_LINE INDENT if i % j == 0 : NEW_LINE INDENT sum += j NEW_LINE DEDENT else : NEW_LINE INDENT sum += j + i / j NEW_LINE DEDENT DEDENT sum = sum - i NEW_LINE DEDENT return sum NEW_LINE DEDENT
def get_min_length ( arr , n ) : NEW_LINE INDENT import math NEW_LINE count = 0 NEW_LINE result = math . inf NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == 1 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if count != 0 : NEW_LINE INDENT result = min ( result , count ) NEW_LINE DEDENT count = 0 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT
def get_levenstein ( x ) : NEW_LINE INDENT import string NEW_LINE rev_input = list ( x ) NEW_LINE rev_input = rev_input . reverse ( ) NEW_LINE n = len ( x ) NEW_LINE dp = np . zeros ( ( n + 1 , n + 1 ) ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT dp [ 0 ] [ i ] = i NEW_LINE dp [ i ] [ 0 ] = i NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if x [ i - 1 ] == rev_input [ j - 1 ] : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT res = np . inf NEW_LINE for i , j in enumerate ( dp [ n ] , 1 ) : NEW_LINE INDENT res = min ( res , dp [ i ] [ j ] ) NEW_LINE if i < n : NEW_LINE INDENT res = min ( res , dp [ i + 1 ] [ j ] ) NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT res = min ( res , dp [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT
def p088 ( ) : NEW_LINE INDENT import sys NEW_LINE print ( sys . argv ) NEW_LINE LIMIT = 12000 NEW_LINE min_sum_product = [ 0 ] * ( LIMIT + 1 ) NEW_LINE for i in range ( 2 , LIMIT * 2 + 1 ) : NEW_LINE INDENT factorize ( i , i , i , 0 , 0 ) NEW_LINE DEDENT items = set ( ) NEW_LINE for i in range ( 2 , len ( min_sum_product ) ) : NEW_LINE INDENT items . add ( min_sum_product [ i ] ) NEW_LINE DEDENT sum = 0 NEW_LINE for n in items : NEW_LINE INDENT sum += n NEW_LINE DEDENT def factorize ( n , remain , max_factor , sum , terms ) : NEW_LINE INDENT if remain == 1 : NEW_LINE INDENT if sum > n : NEW_LINE INDENT raise AssertionError ( ) NEW_LINE DEDENT terms += n - sum NEW_LINE if terms <= LIMIT and n < min_sum_product [ terms ] : NEW_LINE INDENT min_sum_product [ terms ] = n NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for i in range ( 2 , max_factor + 1 ) : NEW_LINE INDENT if remain % i == 0 : NEW_LINE INDENT factor = i NEW_LINE factorize ( n , remain // factor , min ( factor , max_factor ) , sum + factor , terms + 1 ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return sum NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT f = open ( ' / etc / init . d / ' ) NEW_LINE n = int ( f . readline ( ) ) NEW_LINE sa = f . readline ( ) . split ( ) NEW_LINE a = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = int ( sa [ i ] ) NEW_LINE DEDENT f . close ( ) NEW_LINE mod = 1000000007 NEW_LINE p = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT p = p * i % mod NEW_LINE DEDENT q = [ 0 ] * n NEW_LINE q [ 0 ] = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT q [ i ] = ( q [ i - 1 ] + modinv ( i + 1 , mod ) ) % mod NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT val = q [ i ] + q [ n - i - 1 ] - 1 NEW_LINE val *= a [ i ] NEW_LINE val %= mod NEW_LINE val *= p NEW_LINE val %= mod NEW_LINE ans += val NEW_LINE ans %= mod NEW_LINE DEDENT print ( ans ) NEW_LINE def modinv ( a , m ) : NEW_LINE INDENT b = m NEW_LINE u = 1 NEW_LINE v = 0 NEW_LINE tmp = 0 NEW_LINE while b > 0 : NEW_LINE INDENT t = a // b NEW_LINE a -= t * b NEW_LINE tmp = a NEW_LINE a = b NEW_LINE b = tmp NEW_LINE u -= t * v NEW_LINE tmp = u NEW_LINE u = v NEW_LINE v = tmp NEW_LINE DEDENT u %= m NEW_LINE if u < 0 : NEW_LINE INDENT u += m NEW_LINE DEDENT return u NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def Queue_reverse ( q ) : NEW_LINE INDENT import Queue NEW_LINE import sys NEW_LINE import traceback NEW_LINE queue = Queue ( ) NEW_LINE def Print ( ) : NEW_LINE INDENT while not sys . eof : NEW_LINE INDENT print ( ' % d ▁ ' % sys . maxsize ) NEW_LINE del sys . stdout NEW_LINE DEDENT DEDENT def reverse_queue ( q ) : NEW_LINE INDENT if not q : NEW_LINE INDENT return q NEW_LINE DEDENT data = q [ - 1 ] NEW_LINE del q [ - 1 ] NEW_LINE q = reverse_queue ( q ) NEW_LINE q . append ( data ) NEW_LINE return q NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT queue = Queue ( ) NEW_LINE queue . add ( 56 ) NEW_LINE queue . add ( 27 ) NEW_LINE queue . add ( 30 ) NEW_LINE queue . add ( 45 ) NEW_LINE queue . add ( 85 ) NEW_LINE queue . add ( 92 ) NEW_LINE queue . add ( 58 ) NEW_LINE queue . add ( 80 ) NEW_LINE queue . add ( 90 ) NEW_LINE queue . add ( 100 ) NEW_LINE queue = reverse_queue ( queue ) NEW_LINE Print ( ) NEW_LINE DEDENT return queue NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import sys NEW_LINE MAX = 1000000 NEW_LINE prime = [ False ] * ( MAX + 1 ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT for i in range ( MAX + 1 ) : NEW_LINE INDENT prime [ i ] = True NEW_LINE DEDENT prime [ 1 ] = False NEW_LINE for p in range ( 2 , p * MAX + 1 ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * 2 , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def findDiff ( arr , n ) : NEW_LINE INDENT min , max = MAX + 2 , - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if prime [ arr [ i ] ] == True : NEW_LINE INDENT if arr [ i ] > max : NEW_LINE INDENT max = arr [ i ] NEW_LINE DEDENT if arr [ i ] < min : NEW_LINE INDENT min = arr [ i ] NEW_LINE DEDENT DEDENT DEDENT return ( - 1 if max == - 1 else ( max - min ) ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT import sys NEW_LINE sys . stdout . write ( ' No ▁ prime ▁ numbers \n ' ) NEW_LINE sys . stdout . flush ( ) NEW_LINE DEDENT def findDiff ( arr , n ) : NEW_LINE INDENT if not prime : NEW_LINE INDENT sys . stdout . write ( ' No ▁ prime ▁ numbers \n ' ) NEW_LINE DEDENT else : NEW_LINE INDENT sys . stdout . write ( ' Difference ▁ is ▁ % d \n ' % res ) NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import sys NEW_LINE import re NEW_LINE import sys NEW_LINE class AOJ_GRL_2 ( sys . stdin ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT sys . stdin . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE sys . stderr . close ( ) NEW_LINE sys . stdout . close ( ) NEW_LINE DEDENT DEDENT
def A_Summer_Camp ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import math NEW_LINE import os . environ as environ NEW_LINE import os . path NEW_LINE import sys NEW_LINE import os . path NEW_LINE import sys NEW_LINE import sys NEW_LINE try : NEW_LINE INDENT os . environ [ ' A_Summer_Camp ' ] = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT import os NEW_LINE os . environ [ ' A_Summer_Camp ' ] = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT DEDENT
def distinctSubString ( P , N ) : NEW_LINE INDENT S = set ( ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT freq = [ False ] * 26 NEW_LINE s = " " NEW_LINE for j in range ( i , N ) : NEW_LINE INDENT pos = ord ( P [ j ] ) - ord ( " a " ) NEW_LINE if freq [ pos ] == True : NEW_LINE INDENT break NEW_LINE DEDENT freq [ pos ] = True NEW_LINE s += P [ j ] NEW_LINE S . add ( s ) NEW_LINE DEDENT DEDENT return len ( S ) NEW_LINE DEDENT
def solve ( ) : NEW_LINE INDENT import sys NEW_LINE solve ( ) NEW_LINE n = sys . maxsize NEW_LINE k = sys . maxsize NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( sys . stdin . read ( ) ) NEW_LINE DEDENT x = 0 NEW_LINE if ( n - k ) % ( k - 1 ) == 0 : NEW_LINE INDENT x = ( n - k ) // ( k - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT x = ( n - k ) // ( k - 1 ) + 1 NEW_LINE DEDENT print ( x + 1 ) NEW_LINE DEDENT
def minimum_adjacent_difference ( a , n , k ) : NEW_LINE INDENT min_diff = sys . maxsize NEW_LINE for i in range ( ( 1 << n ) ) : NEW_LINE INDENT cnt = sys . maxsize NEW_LINE if i == n - k : NEW_LINE INDENT temp = [ ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( i & ( 1 << j ) ) : NEW_LINE INDENT temp . append ( a [ j ] ) NEW_LINE DEDENT DEDENT max_diff = sys . maxsize NEW_LINE for j in range ( len ( temp ) - 1 ) : NEW_LINE INDENT max_diff = max ( max_diff , temp [ j + 1 ] - temp [ j ] ) NEW_LINE DEDENT min_diff = min ( min_diff , max_diff ) NEW_LINE DEDENT DEDENT return min_diff NEW_LINE DEDENT
def difference ( arr , n ) : NEW_LINE INDENT largest = arr [ 0 ] NEW_LINE i = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if largest < arr [ i ] : NEW_LINE INDENT largest = arr [ i ] NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = largest - arr [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT
def count_kdiv_pairs ( A , n , K ) : NEW_LINE INDENT freq = [ 0 ] * K NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ i % K ] += 1 NEW_LINE DEDENT sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) // 2 NEW_LINE for i in range ( 1 , K // 2 and i != ( K - i ) + 1 ) : NEW_LINE INDENT sum += freq [ i ] * freq [ K - i ] NEW_LINE DEDENT if K % 2 == 0 : NEW_LINE INDENT sum += ( freq [ K // 2 ] * ( freq [ K // 2 ] - 1 ) // 2 ) NEW_LINE DEDENT return sum NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE class Main ( string ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . s = [ ] NEW_LINE DEDENT def strip ( self ) : NEW_LINE INDENT return ' ' NEW_LINE DEDENT DEDENT S = [ ] NEW_LINE S . append ( ' ' ) NEW_LINE while True : NEW_LINE INDENT S . append ( ' ' ) NEW_LINE S . append ( ' ' ) NEW_LINE if S [ 0 ] == '0' : NEW_LINE INDENT break NEW_LINE DEDENT S . append ( ' ' ) NEW_LINE S . append ( ' ' ) NEW_LINE f = True NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT if S [ i ] [ 0 ] == S [ i ] [ 1 ] and S [ i ] [ 1 ] == S [ i ] [ 2 ] and S [ i ] [ 0 ] != ' + ' : NEW_LINE INDENT print ( S [ i ] [ 0 ] ) NEW_LINE f = False NEW_LINE break NEW_LINE DEDENT if S [ 0 ] [ i ] == S [ 1 ] [ i ] and S [ 1 ] [ i ] == S [ 2 ] [ i ] and S [ 0 ] [ i ] != ' + ' : NEW_LINE INDENT print ( S [ 0 ] [ i ] ) NEW_LINE f = False NEW_LINE break NEW_LINE DEDENT DEDENT if f and S [ 0 ] [ 0 ] == S [ 1 ] [ 1 ] and S [ 1 ] [ 1 ] == S [ 2 ] [ 2 ] and S [ 0 ] [ 0 ] != ' + ' : NEW_LINE INDENT print ( S [ 0 ] [ 0 ] ) NEW_LINE f = False NEW_LINE DEDENT if f and S [ 0 ] [ 2 ] == S [ 1 ] [ 1 ] and S [ 1 ] [ 1 ] == S [ 2 ] [ 0 ] and S [ 0 ] [ 2 ] != ' + ' : NEW_LINE INDENT print ( S [ 0 ] [ 2 ] ) NEW_LINE f = False NEW_LINE DEDENT if f : NEW_LINE INDENT print ( ' NA ' ) NEW_LINE DEDENT DEDENT DEDENT
def max_ones_index ( arr , n ) : NEW_LINE INDENT import sys NEW_LINE max_count = 0 NEW_LINE max_index = 0 NEW_LINE prev_zero = - 1 NEW_LINE prev_prev_zero = - 1 NEW_LINE for curr in range ( n ) : NEW_LINE INDENT if arr [ curr ] == 0 : NEW_LINE INDENT if curr - prev_prev_zero > max_count : NEW_LINE INDENT max_count = curr - prev_prev_zero NEW_LINE max_index = prev_zero NEW_LINE DEDENT prev_prev_zero = prev_zero NEW_LINE prev_zero = curr NEW_LINE DEDENT DEDENT if n - prev_prev_zero > max_count : NEW_LINE INDENT max_index = prev_zero NEW_LINE DEDENT return max_index NEW_LINE DEDENT
def minimum_x ( n , k ) : NEW_LINE INDENT ans = sys . maxsize NEW_LINE for rem in range ( k - 1 , 0 , - 1 ) : NEW_LINE INDENT if n % rem == 0 : NEW_LINE INDENT ans = min ( ans , rem + ( n // rem ) * k ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT
def modulo_multiplication ( a , b , mod ) : NEW_LINE INDENT res = 0 NEW_LINE a %= mod NEW_LINE while b > 0 : NEW_LINE INDENT if b & 1 : NEW_LINE INDENT res = ( res + a ) % mod NEW_LINE DEDENT a = ( 2 * a ) % mod NEW_LINE b >>= 1 NEW_LINE DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE MAX = ' Z ' - ' A ' + 1 NEW_LINE global n NEW_LINE global in_deg , out_deg , vis NEW_LINE global nei NEW_LINE def check ( ) : NEW_LINE INDENT for i in range ( MAX ) : NEW_LINE INDENT if vis [ i ] != 1 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT cnt = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if in_deg [ i ] != out_deg [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def dfs ( k ) : NEW_LINE INDENT if vis [ k ] == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT vis [ k ] = 1 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if 0 < nei [ k ] [ i ] : NEW_LINE INDENT dfs ( i ) NEW_LINE DEDENT DEDENT DEDENT def run ( ) : NEW_LINE INDENT with open ( ' / tmp / ' , ' r ' ) as f : NEW_LINE INDENT while True : NEW_LINE INDENT n = len ( f . read ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT s = 0 NEW_LINE in_deg = [ 0 ] * MAX NEW_LINE out_deg = [ 0 ] * MAX NEW_LINE vis = [ 0 ] * MAX NEW_LINE nei = [ [ 0 ] * MAX ] * MAX NEW_LINE vis [ n ] = 1 NEW_LINE for c in f . read ( ) : NEW_LINE INDENT u = ord ( c [ 0 ] ) - ord ( ' a ' ) NEW_LINE v = ord ( c [ - 1 ] ) - ord ( ' a ' ) NEW_LINE out_deg [ u ] += 1 NEW_LINE in_deg [ v ] += 1 NEW_LINE nei [ u ] [ v ] = 1 NEW_LINE vis [ u ] = vis [ v ] = - 1 NEW_LINE s = u NEW_LINE DEDENT DEDENT dfs ( s ) NEW_LINE if check ( ) : NEW_LINE INDENT print ( ' OK ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NG ' ) NEW_LINE DEDENT DEDENT DEDENT return ' ' . join ( [ str ( n ) for n in range ( MAX ) ] ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE N = len ( sys . argv ) NEW_LINE a = list ( range ( N ) ) NEW_LINE index = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if abs ( a [ index ] ) < abs ( a [ i ] ) : NEW_LINE INDENT index = i NEW_LINE DEDENT DEDENT print ( 2 * N - 1 ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT print ( ( index + 1 ) , ( i + 1 ) ) NEW_LINE DEDENT if a [ index ] > 0 : NEW_LINE INDENT for i in range ( 2 , N + 1 ) : NEW_LINE INDENT print ( ( i - 1 ) , i ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for i in range ( N - 1 , 1 , - 1 ) : NEW_LINE INDENT print ( ( i + 1 ) , i ) NEW_LINE DEDENT DEDENT DEDENT
def check_palindrome ( data ) : NEW_LINE INDENT data = list ( data ) NEW_LINE data . pop ( 0 ) NEW_LINE for i in range ( len ( data ) ) : NEW_LINE INDENT if data [ i ] != data [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT data . pop ( 0 ) NEW_LINE DEDENT return True NEW_LINE DEDENT def print_solution ( partitions ) : NEW_LINE INDENT for i in partitions : NEW_LINE INDENT for j in i : NEW_LINE INDENT print ( j , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT def add_strings ( v , s , temp , index ) : NEW_LINE INDENT data = ' ' NEW_LINE current = [ ] NEW_LINE if index == 0 : NEW_LINE INDENT temp = [ ] NEW_LINE DEDENT for i in range ( index , len ( s ) ) : NEW_LINE INDENT data = data + s [ i ] NEW_LINE if check_palindrome ( data ) : NEW_LINE INDENT temp . append ( data ) NEW_LINE if i + 1 < len ( s ) : NEW_LINE INDENT v = add_strings ( v , s , temp , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT v . append ( temp ) NEW_LINE DEDENT temp = [ current ] NEW_LINE DEDENT DEDENT return v NEW_LINE DEDENT def partition ( s , v ) : NEW_LINE INDENT temp = [ ] NEW_LINE v = add_strings ( v , s , temp , 0 ) NEW_LINE print_solution ( v ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT s = ' geeks ' NEW_LINE partitions = [ ] NEW_LINE partition ( s , partitions ) NEW_LINE DEDENT return ' ' . join ( partitions ) NEW_LINE DEDENT
def comb ( n , c ) : NEW_LINE INDENT import math NEW_LINE M = 100000007 NEW_LINE for i in range ( c ) : NEW_LINE INDENT b = math . pow ( math . floor ( str ( n - i ) ) / math . floor ( str ( i + 1 ) ) , 2 ) NEW_LINE DEDENT return b % math . floor ( math . floor ( str ( M ) ) ) NEW_LINE DEDENT
def find_subgraph ( arr , n , k ) : NEW_LINE INDENT M = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in M : NEW_LINE INDENT M [ arr [ i ] ] = M [ arr [ i ] ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT M [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT num_count = [ 0 ] * ( k + 1 ) NEW_LINE for i in range ( 0 , k + 1 ) : NEW_LINE INDENT num_count [ i ] = 0 NEW_LINE DEDENT for ( k , v ) in M . items ( ) : NEW_LINE INDENT if k <= k : NEW_LINE INDENT for i in range ( 1 , k + 1 ) : NEW_LINE INDENT if k * i > k : NEW_LINE INDENT break NEW_LINE DEDENT num_count [ k * i ] += v NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT lcm , length = 0 , 0 NEW_LINE for i in range ( 1 , k + 1 ) : NEW_LINE INDENT if num_count [ i ] > length : NEW_LINE INDENT length = num_count [ i ] NEW_LINE lcm = i NEW_LINE DEDENT DEDENT if not lcm : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' LCM ▁ = ▁ % d , ▁ Length ▁ = ▁ % d ' % ( lcm , length ) ) NEW_LINE print ( ' Indexes ▁ = ▁ ' , end = ' ▁ ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if lcm % arr [ i ] == 0 : NEW_LINE INDENT print ( str ( i ) , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def count_pairs ( a , b , n , m ) : NEW_LINE INDENT odd1 , even1 = 0 , 0 NEW_LINE odd2 , even2 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] % 2 == 1 : NEW_LINE INDENT odd1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT even1 += 1 NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT if b [ i ] % 2 == 1 : NEW_LINE INDENT odd2 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT even2 += 1 NEW_LINE DEDENT DEDENT pairs = min ( odd1 , odd2 ) + min ( even1 , even2 ) NEW_LINE return pairs NEW_LINE DEDENT
def count_pairs ( a , b , n , m ) : NEW_LINE INDENT odd1 , even1 = 0 , 0 NEW_LINE odd2 , even2 = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] % 2 == 1 : NEW_LINE INDENT odd1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT even1 += 1 NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT if b [ i ] % 2 == 1 : NEW_LINE INDENT odd2 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT even2 += 1 NEW_LINE DEDENT DEDENT pairs = min ( odd1 , even2 ) + min ( odd2 , even1 ) NEW_LINE return pairs NEW_LINE DEDENT
def max_diff ( arr , arr_size ) : NEW_LINE INDENT max_diff = arr [ 1 ] - arr [ 0 ] NEW_LINE min_element = arr [ 0 ] NEW_LINE for i in range ( 1 , arr_size ) : NEW_LINE INDENT if arr [ i ] - min_element > max_diff : NEW_LINE INDENT max_diff = arr [ i ] - min_element NEW_LINE DEDENT if arr [ i ] < min_element : NEW_LINE INDENT min_element = arr [ i ] NEW_LINE DEDENT DEDENT return max_diff NEW_LINE DEDENT
def binomial_coeff ( n , k ) : NEW_LINE INDENT C = np . zeros ( ( n + 1 , k + 1 ) ) NEW_LINE i , j = 0 , 0 NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , min ( i , k ) + 1 ) : NEW_LINE INDENT if j == 0 or j == i : NEW_LINE INDENT C [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] NEW_LINE DEDENT DEDENT DEDENT return C [ n ] [ k ] NEW_LINE DEDENT
def GFG ( freq ) : NEW_LINE INDENT MAX = 26 NEW_LINE max_ele = freq [ 0 ] NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if max_ele < freq [ i ] : NEW_LINE INDENT max_ele = freq [ i ] NEW_LINE DEDENT DEDENT return max_ele NEW_LINE def minimum_addition ( data , len_ ) : NEW_LINE INDENT freq = [ 0 ] * MAX NEW_LINE for c in data : NEW_LINE INDENT freq [ c ] - ' a ' NEW_LINE DEDENT max_freq = max_element ( freq ) NEW_LINE min_addition = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if freq [ i ] > 0 : NEW_LINE INDENT min_addition += abs ( max_freq - freq [ i ] ) NEW_LINE DEDENT DEDENT return min_addition NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT data = ' geeksforgeeks ' NEW_LINE len_ = len ( data ) NEW_LINE print ( minimum_addition ( data , len_ ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def test_195 ( ) : NEW_LINE INDENT import string NEW_LINE f = open ( ' test . txt ' ) NEW_LINE n = len ( f . readlines ( ) ) NEW_LINE a = list ( f ) NEW_LINE b = list ( f ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if abs ( a [ i ] - b [ i ] ) > 5 : NEW_LINE INDENT sum += 10 - abs ( a [ i ] - b [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT sum += abs ( a [ i ] - b [ i ] ) NEW_LINE DEDENT DEDENT print ( sum ) NEW_LINE f . close ( ) NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import sys NEW_LINE MAX = 32 NEW_LINE pow2 = [ 0 ] * MAX NEW_LINE visited = [ False ] * MAX NEW_LINE ans = [ ] NEW_LINE def power_2 ( ) : NEW_LINE INDENT ans = 1 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT pow2 [ i ] = ans NEW_LINE ans *= 2 NEW_LINE DEDENT DEDENT def count_set_bits ( x ) : NEW_LINE INDENT set_bits = 0 NEW_LINE while x : NEW_LINE INDENT x = x & ( x - 1 ) NEW_LINE set_bits += 1 NEW_LINE DEDENT return set_bits NEW_LINE DEDENT def add ( num ) : NEW_LINE INDENT point = 0 NEW_LINE value = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if visited [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT if num % 2 == 1 : NEW_LINE INDENT value += ( 1 << i ) NEW_LINE DEDENT num //= 2 NEW_LINE DEDENT DEDENT ans . append ( value ) NEW_LINE DEDENT def solve ( n , k ) : NEW_LINE INDENT ans . append ( k ) NEW_LINE countk = count_set_bits ( k ) NEW_LINE if pow2 [ countk ] < n : NEW_LINE INDENT print ( - 1 , end = ' ▁ ' ) NEW_LINE return NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( pow2 [ countk ] - 1 ) : NEW_LINE INDENT add ( i ) NEW_LINE count += 1 NEW_LINE if count == n : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( ans [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT n , k = 3 , 5 NEW_LINE power_2 ( ) NEW_LINE solve ( n , k ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def p027 ( ) : NEW_LINE INDENT print ( eval ( ' p027 ( ) ' ) ) NEW_LINE best_num = 0 NEW_LINE best_a = 0 NEW_LINE best_b = 0 NEW_LINE for a in range ( - 1000 , 1000 + 1 ) : NEW_LINE INDENT for b in range ( - 1000 , 1000 + 1 ) : NEW_LINE INDENT num = number_of_consecutive_primes_generated ( a , b ) NEW_LINE if num > best_num : NEW_LINE INDENT best_num = num NEW_LINE best_a = a NEW_LINE best_b = b NEW_LINE DEDENT DEDENT DEDENT return str ( best_a * best_b ) NEW_LINE DEDENT
def pre149 ( args ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE from string import encode NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT import numpy as np NEW_LINE MAX = 100001 NEW_LINE is_prime = np . zeros ( MAX ) NEW_LINE def sieve ( ) : NEW_LINE INDENT for p in range ( 2 , MAX ) : NEW_LINE INDENT if is_prime [ p ] == 0 : NEW_LINE INDENT for i in range ( p * 2 , MAX , i += p ) : NEW_LINE INDENT is_prime [ i ] = 1 NEW_LINE DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT def find_subset ( a , n ) : NEW_LINE INDENT cnt1 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == 1 : NEW_LINE INDENT cnt1 += 1 NEW_LINE DEDENT if cnt1 > 0 : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] != 1 ) and ( is_prime [ a [ i ] + 1 ] == 0 ) : NEW_LINE INDENT print ( cnt1 + 1 ) NEW_LINE for j in range ( cnt1 ) : NEW_LINE INDENT print ( 1 , end = ' ▁ ' ) NEW_LINE DEDENT print ( a [ i ] ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT DEDENT DEDENT if cnt1 >= 2 : NEW_LINE INDENT print ( cnt1 ) NEW_LINE for i in range ( cnt1 ) : NEW_LINE INDENT print ( 1 , end = ' ▁ ' ) NEW_LINE DEDENT print ( ) NEW_LINE return 0 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if is_prime [ a [ i ] + a [ j ] ] == 0 : NEW_LINE INDENT print ( 2 ) NEW_LINE print ( a [ i ] , a [ j ] ) NEW_LINE return 0 NEW_LINE DEDENT DEDENT DEDENT print ( - 1 ) NEW_LINE return - 1 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT sieve ( ) NEW_LINE A = np . array ( [ 2 , 1 , 1 ] ) NEW_LINE n = len ( A ) NEW_LINE find_subset ( A , n ) NEW_LINE DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n , r , t , sum , pos = select . select ( [ sys . stdin ] ) NEW_LINE DEDENT except : NEW_LINE INDENT print ( " No ▁ input ▁ found " ) NEW_LINE return NEW_LINE DEDENT p = [ 0 ] * n NEW_LINE water = [ 0 ] * r NEW_LINE empty = [ 0 ] * r NEW_LINE for i in range ( n ) : NEW_LINE INDENT p [ i ] = sys . stdin . read ( n ) NEW_LINE DEDENT for i in range ( 1 , t + 1 ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT pos = ( p [ j ] * i % r ) NEW_LINE if i > 1 : NEW_LINE INDENT empty [ pos ] += 1 NEW_LINE DEDENT if water [ pos ] > 0 : NEW_LINE INDENT water [ pos ] -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT sum += 1 NEW_LINE DEDENT DEDENT for j in range ( r ) : NEW_LINE INDENT if empty [ j ] > 0 : NEW_LINE INDENT water [ j ] += empty [ j ] NEW_LINE empty [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT print ( sum ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import string NEW_LINE s = list ( args ) NEW_LINE n = len ( s ) NEW_LINE s . sort ( ) NEW_LINE for j in range ( n ) : NEW_LINE INDENT c = s [ j ] NEW_LINE for i in range ( len ( c ) - 6 ) : NEW_LINE INDENT if c [ i ] == ' H ' and c [ i + 1 ] == ' o ' and c [ i + 2 ] == ' s ' and c [ i + 3 ] == ' h ' and c [ i + 4 ] == ' i ' and c [ i + 5 ] == ' n ' and c [ i + 6 ] == ' o ' : NEW_LINE INDENT c [ i + 6 ] = ' a ' NEW_LINE i += 6 NEW_LINE DEDENT DEDENT print ( ' ' . join ( c ) ) NEW_LINE DEDENT DEDENT
def count_rotations ( arr , low , high ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . fft as np NEW_LINE class BinarySearch ( np . ndarray ) : NEW_LINE INDENT def count_rotations ( arr , low , high ) : NEW_LINE INDENT if high < low : NEW_LINE INDENT return 0 NEW_LINE DEDENT if high == low : NEW_LINE INDENT return low NEW_LINE DEDENT mid = low + ( high - low ) // 2 NEW_LINE if mid < high and arr [ mid + 1 ] < arr [ mid ] : NEW_LINE INDENT return ( mid + 1 ) NEW_LINE DEDENT if mid > low and arr [ mid ] < arr [ mid - 1 ] : NEW_LINE INDENT return mid NEW_LINE DEDENT if arr [ high ] > arr [ mid ] : NEW_LINE INDENT return count_rotations ( arr , low , mid - 1 ) NEW_LINE DEDENT return count_rotations ( arr , mid + 1 , high ) NEW_LINE DEDENT DEDENT arr = np . array ( [ 15 , 18 , 2 , 3 , 6 , 12 ] ) NEW_LINE n = len ( arr ) NEW_LINE print ( count_rotations ( arr , 0 , n - 1 ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE scn = sys . stdin . read ( ) NEW_LINE n = scn . find ( ' ▁ ' ) NEW_LINE k = scn . find ( ' ▁ ' ) NEW_LINE i , req = 1 , 1 NEW_LINE while k - req >= 0 : NEW_LINE INDENT if k - req >= 0 : NEW_LINE INDENT k = k - req NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT i += 1 NEW_LINE if i % n != 0 : NEW_LINE INDENT req = i % n NEW_LINE DEDENT else : NEW_LINE INDENT req = n NEW_LINE DEDENT DEDENT print ( k ) NEW_LINE DEDENT
def modular_sum ( arr , n , m ) : NEW_LINE INDENT import numpy as np NEW_LINE if n > m : NEW_LINE INDENT return True NEW_LINE DEDENT DP = np . zeros ( m ) NEW_LINE DP [ 0 ] = False NEW_LINE for i in range ( n ) : NEW_LINE INDENT if DP [ 0 ] : NEW_LINE INDENT return True NEW_LINE DEDENT temp = np . zeros ( m ) NEW_LINE temp [ 0 ] = False NEW_LINE for j in range ( m ) : NEW_LINE INDENT if DP [ j ] == True : NEW_LINE INDENT if DP [ ( j + arr [ i ] ) % m ] == False : NEW_LINE INDENT temp [ ( j + arr [ i ] ) % m ] = True NEW_LINE DEDENT DEDENT DEDENT for j in range ( m ) : NEW_LINE INDENT if temp [ j ] : NEW_LINE INDENT DP [ j ] = True NEW_LINE DEDENT DEDENT DP [ arr [ i ] % m ] = True NEW_LINE DEDENT return DP NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import numpy as np NEW_LINE class Main ( object ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . n = len ( sys . argv ) NEW_LINE self . a = [ ] NEW_LINE for i in range ( self . n ) : NEW_LINE INDENT self . a . append ( np . random . randint ( 0 , n ) ) NEW_LINE DEDENT self . q = len ( sys . argv ) NEW_LINE for i in range ( self . q ) : NEW_LINE INDENT b , e , k = np . random . randint ( 0 , n ) NEW_LINE res = 0 NEW_LINE for j in range ( b , e ) : NEW_LINE INDENT if self . a [ j ] == k : NEW_LINE INDENT res += 1 NEW_LINE DEDENT DEDENT print ( res ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE x = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT arr = np . zeros ( ( n , n ) ) NEW_LINE totals = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ 0 ] [ i ] = int ( sys . stdin . readline ( ) ) NEW_LINE totals [ 0 ] += arr [ 0 ] [ i ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT arr [ i ] [ j ] = min ( arr [ i - 1 ] [ j ] , arr [ i - 1 ] [ ( j - 1 + n ) % n ] ) NEW_LINE totals [ i ] += arr [ i ] [ j ] NEW_LINE DEDENT totals [ i ] += x * i NEW_LINE DEDENT totals . sort ( ) NEW_LINE print ( totals [ 0 ] ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE while True : NEW_LINE INDENT d , w = sys . stdin . read ( ) . split ( ' ▁ ' ) NEW_LINE if not d : NEW_LINE INDENT break NEW_LINE DEDENT G = np . zeros ( ( d , w ) ) NEW_LINE max = 0 NEW_LINE for i in range ( d ) : NEW_LINE INDENT for j in range ( w ) : NEW_LINE INDENT G [ i ] [ j ] = int ( sys . stdin . read ( ) ) NEW_LINE DEDENT DEDENT for i in range ( 0 , d - 3 + 1 ) : NEW_LINE INDENT for j in range ( 0 , w - 3 + 1 ) : NEW_LINE INDENT solve ( G , i , j , 3 , 3 ) NEW_LINE DEDENT DEDENT print ( max ) NEW_LINE DEDENT def solve ( A , y , x , dep , wid ) : NEW_LINE INDENT if y + dep > d or x + wid > w : NEW_LINE INDENT return NEW_LINE DEDENT edgmin , lkmax , maxv = 9 , 0 , 0 NEW_LINE for i in range ( y , dep + y ) : NEW_LINE INDENT for j in range ( x , wid + x ) : NEW_LINE INDENT if i == y or i == dep + y - 1 or j == x or j == wid + x - 1 : NEW_LINE INDENT edgmin = min ( edgmin , A [ i ] [ j ] ) NEW_LINE DEDENT else : NEW_LINE INDENT lkmax = max ( lkmax , A [ i ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT if edgmin > lkmax : NEW_LINE INDENT for i in range ( y + 1 , dep + y - 1 ) : NEW_LINE INDENT for j in range ( x + 1 , x + wid - 1 ) : NEW_LINE INDENT maxv += edgmin - A [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT max = max ( maxv ) NEW_LINE solve ( A , y , x , dep + 1 , wid ) NEW_LINE solve ( A , y , x , dep , wid + 1 ) NEW_LINE DEDENT DEDENT
def code_chef ( ) : NEW_LINE INDENT import numpy as np NEW_LINE import numpy . fft as fft NEW_LINE import numpy . random as np NEW_LINE n = np . random . randint ( 0 , 100 , size = ( 100 , 100 ) ) NEW_LINE k = np . random . randint ( 0 , 100 , size = ( 100 , 100 ) ) NEW_LINE arr = np . zeros ( ( int ( n ) , int ( k ) ) ) NEW_LINE for i in range ( int ( n ) ) : NEW_LINE INDENT arr [ int ( n ) ] = fft ( n ) NEW_LINE DEDENT if k == 1 : NEW_LINE INDENT print ( n ) NEW_LINE sys . exit ( 0 ) NEW_LINE DEDENT ans = np . zeros ( ( int ( n ) , int ( n ) ) ) NEW_LINE arr . sort ( ) NEW_LINE for i in range ( int ( n ) ) : NEW_LINE INDENT if ans [ int ( i ) ] == 0 : NEW_LINE INDENT ktimes = k * arr [ int ( i ) ] NEW_LINE index = np . searchsorted ( arr , ktimes ) NEW_LINE if index >= 0 : NEW_LINE INDENT ans [ int ( index ) ] = - 1 NEW_LINE DEDENT DEDENT DEDENT ans1 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ans [ int ( i ) ] == 0 : NEW_LINE INDENT ans1 += 1 NEW_LINE DEDENT DEDENT print ( ans1 ) NEW_LINE DEDENT
def GFG ( k , n ) : NEW_LINE INDENT sum = int ( pow ( k , n + 1 ) - pow ( k - 1 , n + 1 ) ) NEW_LINE return sum NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT dp = np . zeros ( ( 18 , 2 , 162 ) ) NEW_LINE def solve ( i , tight , sum_so_far , Sum , number , len_ ) : NEW_LINE INDENT if i == len_ : NEW_LINE INDENT if sum_so_far == Sum : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT ans = dp [ i ] [ 1 ] [ sum_so_far ] NEW_LINE if ans != - 1 : NEW_LINE INDENT return ans NEW_LINE DEDENT ans = 0 NEW_LINE ntight = False NEW_LINE nsum_so_far = False NEW_LINE for currdigit in [ '0' , '9' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' , '10' , '11' , '11' , '13' , '14' , '14' , '15' , '16' , '17' , '17' , '18' , '19' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '20' , '
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE count = 0 NEW_LINE for i in range ( len ( args ) ) : NEW_LINE INDENT n = int ( args [ i ] ) NEW_LINE args [ i ] = args [ i ] NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr . append ( args [ i ] ) NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT def decision ( entery ) : NEW_LINE INDENT localct = 0 NEW_LINE inputs = entery . split ( ) NEW_LINE for i in inputs : NEW_LINE INDENT if i == '1' : NEW_LINE INDENT localct += 1 NEW_LINE DEDENT DEDENT if localct > 1 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def main ( args ) : NEW_LINE INDENT import sys NEW_LINE class Node ( int ) : NEW_LINE INDENT data = None NEW_LINE left = right = None NEW_LINE def __init__ ( self , key ) : NEW_LINE INDENT self . data = key NEW_LINE self . left = right = None NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __setitem__ ( self , key , value ) : NEW_LINE INDENT self . data [ key ] = value NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __setitem__ ( self , key , value ) : NEW_LINE INDENT self . data [ key ] = value NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self . data [ key ] NEW_LINE DEDENT def __getitem__ ( self , key ) : NEW_LINE INDENT return self .
def count_subarrays ( a , n , x ) : NEW_LINE INDENT count = 0 NEW_LINE number = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] > x : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT number += ( count ) * ( count + 1 ) / 2 NEW_LINE count = 0 NEW_LINE DEDENT DEDENT if count != 0 : NEW_LINE INDENT number += ( count ) * ( count + 1 ) / 2 NEW_LINE DEDENT return number NEW_LINE DEDENT
def gf_min_cost ( arr , n ) : NEW_LINE INDENT count_even = 0 NEW_LINE count_odd = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT count_even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_odd += 1 NEW_LINE DEDENT DEDENT return min ( count_even , count_odd ) NEW_LINE DEDENT
def print_last_occurrence ( a , n ) : NEW_LINE INDENT d = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT d [ a [ i ] ] = i NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if d [ a [ i ] ] == i : NEW_LINE INDENT print ( a [ i ] , end = ' ▁ ' ) NEW_LINE DEDENT DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT up1 , up2 = 0 , 0 NEW_LINE k = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT k . append ( sys . stdin . readline ( ) ) NEW_LINE if k [ i ] > 0 : NEW_LINE INDENT up1 += 1 NEW_LINE if k [ i ] >= 2 : NEW_LINE INDENT up2 += 1 NEW_LINE DEDENT DEDENT DEDENT if up2 == 0 : NEW_LINE INDENT print ( ' NA ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( up1 + 1 ) NEW_LINE DEDENT DEDENT DEDENT
def main ( args ) : NEW_LINE INDENT import re NEW_LINE import sys NEW_LINE import os NEW_LINE import sys NEW_LINE if not args : NEW_LINE INDENT return 0 NEW_LINE DEDENT if not args [ 0 ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT if not args [ 0 ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT return int ( args [ 0 ] ) NEW_LINE DEDENT
def sum_of_ap ( a , d , n ) : NEW_LINE INDENT sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) NEW_LINE return sum NEW_LINE DEDENT
def count_pairs ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT
def coordinateCompression ( arr , n ) : NEW_LINE INDENT s = set ( arr ) NEW_LINE index = 0 NEW_LINE mp = { } NEW_LINE for itr in s : NEW_LINE INDENT index += 1 NEW_LINE mp [ itr ] = index NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = mp [ arr [ i ] ] NEW_LINE DEDENT def query ( BIT , index , n ) : NEW_LINE INDENT ans = 0 NEW_LINE while index > 0 : NEW_LINE INDENT ans = max ( ans , BIT [ index ] ) NEW_LINE index -= index & ( - index ) NEW_LINE DEDENT return ans NEW_LINE DEDENT def update ( BIT , index , n ) : NEW_LINE INDENT x = query ( BIT , index - 1 , n ) NEW_LINE value = x + 1 NEW_LINE while index <= n : NEW_LINE INDENT BIT [ index ] = max ( BIT [ index ] , value ) NEW_LINE index += index & ( - index ) NEW_LINE DEDENT DEDENT def findLISLength ( arr , n ) : NEW_LINE INDENT coordinateCompression ( arr , n ) NEW_LINE BIT = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT BIT [ i ] = 0 NEW_LINE DEDENT for i in arr : NEW_LINE INDENT update ( BIT , i , n ) NEW_LINE DEDENT ans = query ( BIT , n , n ) NEW_LINE return ans NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT arr = [ 6 , 5 , 1 , 3 , 2 , 4 , 8 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE ans = findLISLength ( arr , n ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE f = open ( sys . argv [ 1 ] ) NEW_LINE Q = int ( f . readline ( ) ) NEW_LINE for i in range ( Q ) : NEW_LINE INDENT N = int ( f . readline ( ) ) NEW_LINE schedule = np . zeros ( ( N , 5 ) ) NEW_LINE x = 0 NEW_LINE for j in range ( N ) : NEW_LINE INDENT line = f . readline ( ) NEW_LINE sr = line . split ( ) NEW_LINE for k in range ( 5 ) : NEW_LINE INDENT schedule [ x ] [ k ] = int ( sr [ k ] ) NEW_LINE DEDENT x += 1 NEW_LINE DEDENT check = False NEW_LINE outer : NEW_LINE INDENT for j in range ( 4 ) : NEW_LINE INDENT for k in range ( j + 1 , 5 ) : NEW_LINE INDENT day1count = 0 NEW_LINE day2count = 0 NEW_LINE bothcount = 0 NEW_LINE neither = 0 NEW_LINE for l in range ( len ( schedule ) ) : NEW_LINE INDENT if schedule [ l ] [ j ] == 0 and schedule [ l ] [ k ] == 0 : NEW_LINE INDENT neither += 1 NEW_LINE DEDENT if schedule [ l ] [ j ] == 1 and schedule [ l ] [ k ] == 0 : NEW_LINE INDENT day1count += 1 NEW_LINE DEDENT elif schedule [ l ] [ j ] == 0 and schedule [ l ] [ k ] == 1 : NEW_LINE INDENT day2count += 1 NEW_LINE DEDENT elif schedule [ l ] [ j ] == 1 and schedule [ l ] [ k ] == 1 : NEW_LINE INDENT bothcount += 1 NEW_LINE DEDENT DEDENT if neither > 0 : NEW_LINE INDENT continue NEW_LINE DEDENT elif day1count > len ( schedule ) // 2 or day2count > len ( schedule ) // 2 : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT check = True NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT print ( check and " YES " or " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def p164 ( ) : NEW_LINE INDENT import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE import math NEW_LINE math NEW_LINE math = math NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT string NEW_LINE INDENT string = string NEW_LINE DEDENT DEDENT
def is_toeplitz_matrix ( matrix ) : NEW_LINE INDENT for r in range ( 1 , len ( matrix ) ) : NEW_LINE INDENT for c in range ( 1 , len ( matrix [ 0 ] ) ) : NEW_LINE INDENT if matrix [ r - 1 ] [ c - 1 ] != matrix [ r ] [ c ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT
def p094 ( ) : NEW_LINE INDENT print ( eval ( ' p094' ) ) NEW_LINE LIMIT = math . pow ( 10 , 9 ) NEW_LINE def run ( ) : NEW_LINE INDENT sum = 0 NEW_LINE for s in range ( 1 , ( LIMIT + 1 ) // 3 + 1 , 2 ) : NEW_LINE INDENT for t in range ( s - 2 , 0 , - 2 ) : NEW_LINE INDENT if math . gcd ( s , t ) == 1 : NEW_LINE INDENT a = s * t NEW_LINE b = ( s * s - t * t ) // 2 NEW_LINE c = ( s * s + t * t ) // 2 NEW_LINE if a * 2 == c - 1 : NEW_LINE INDENT p = c * 3 - 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT sum += p NEW_LINE DEDENT DEDENT if a * 2 == c + 1 : NEW_LINE INDENT p = c * 3 + 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT sum += p NEW_LINE DEDENT DEDENT if b * 2 == c - 1 : NEW_LINE INDENT p = c * 3 - 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT sum += p NEW_LINE DEDENT DEDENT if b * 2 == c + 1 : NEW_LINE INDENT p = c * 3 + 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT sum += p NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return str ( sum ) NEW_LINE DEDENT return run NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE class Main ( ) : NEW_LINE INDENT def solve ( self ) : NEW_LINE INDENT with self . open ( ' / dev / null ' ) as f : NEW_LINE INDENT while True : NEW_LINE INDENT N = len ( f . read ( ) ) NEW_LINE T = len ( f . read ( ) ) NEW_LINE L = len ( f . read ( ) ) NEW_LINE B = len ( f . read ( ) ) NEW_LINE if N == 0 and T == 0 and L == 0 and B == 0 : NEW_LINE INDENT break NEW_LINE DEDENT square = [ 0 for i in range ( L ) ] NEW_LINE for i in range ( B ) : NEW_LINE INDENT square [ i ] = 1 NEW_LINE DEDENT DEDENT dp = np . zeros ( ( N + 1 , T + 1 ) ) NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for j in range ( T ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT for s in range ( 1 , 6 + 1 ) : NEW_LINE INDENT idx = 1 NEW_LINE num = i + s NEW_LINE if square [ i ] == 1 : NEW_LINE INDENT idx = 2 NEW_LINE DEDENT if i + s > N : NEW_LINE INDENT num = 2 * N - ( i + s ) NEW_LINE DEDENT if square [ num ] == 2 and j + idx <= T : NEW_LINE INDENT dp [ 0 ] [ j + idx ] += dp [ i ] [ j ] * 1.0 / 6 NEW_LINE DEDENT elif j + idx <= T : NEW_LINE INDENT dp [ num ] [ j + idx ] += dp [ i ] [ j ] * 1.0 / 6 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT goal = 0.0 NEW_LINE for i in range ( 0 , T + 1 ) : NEW_LINE INDENT goal += dp [ N ] [ i ] NEW_LINE DEDENT print ( ' % .6f \n ' % goal ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def oddsum ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT s = 0 NEW_LINE o = 0 NEW_LINE e = 0 NEW_LINE a = sys . maxsize NEW_LINE x = 0 NEW_LINE for i in range ( a ) : NEW_LINE INDENT x = sys . maxsize NEW_LINE s += x NEW_LINE if x % 2 : NEW_LINE INDENT o += 1 NEW_LINE DEDENT else : NEW_LINE INDENT e += 1 NEW_LINE DEDENT DEDENT if s % 2 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT if o >= 1 and e >= 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def GFG ( H , n , K ) : NEW_LINE INDENT inser = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT diff = abs ( H [ i ] - H [ i - 1 ] ) NEW_LINE if diff <= K : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT inser += math . ceil ( diff / K ) - 1 NEW_LINE DEDENT DEDENT return inser NEW_LINE DEDENT
def count_words ( data , len_ ) : NEW_LINE INDENT count = 1 NEW_LINE if len_ == 1 : NEW_LINE INDENT return count NEW_LINE DEDENT if data [ 0 ] == data [ 1 ] : NEW_LINE INDENT count *= 1 NEW_LINE DEDENT else : NEW_LINE INDENT count *= 2 NEW_LINE DEDENT for j in range ( 1 , len_ - 1 ) : NEW_LINE INDENT if data [ j ] == data [ j - 1 ] and data [ j ] == data [ j + 1 ] : NEW_LINE INDENT count *= 1 NEW_LINE DEDENT elif data [ j ] == data [ j - 1 ] or data [ j ] == data [ j + 1 ] or data [ j - 1 ] == data [ j + 1 ] : NEW_LINE INDENT count *= 2 NEW_LINE DEDENT else : NEW_LINE INDENT count *= 3 NEW_LINE DEDENT DEDENT if data [ len_ - 1 ] == data [ len_ - 2 ] : NEW_LINE INDENT count *= 1 NEW_LINE DEDENT else : NEW_LINE INDENT count *= 2 NEW_LINE DEDENT return count NEW_LINE DEDENT
def evenSum ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import time NEW_LINE import sys NEW_LINE import subprocess NEW_LINE import subprocess NEW_LINE import sys NEW_LINE class evenSum ( subprocess ) : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . stdout = subprocess . PIPE NEW_LINE self . stderr = subprocess . STDOUT NEW_LINE self . stdout = subprocess . PIPE NEW_LINE DEDENT def run ( self ) : NEW_LINE INDENT n = int ( self . stdout . readline ( ) ) NEW_LINE self . max = 0 NEW_LINE s = self . stdout . readline ( ) NEW_LINE x = s . split ( ) NEW_LINE self . even = [ ] NEW_LINE self . odd = [ ] NEW_LINE while n > 0 : NEW_LINE INDENT n -= 1 NEW_LINE y = int ( x [ n ] ) NEW_LINE if y % 2 == 0 : NEW_LINE INDENT self . even . append ( y ) NEW_LINE DEDENT else : NEW_LINE INDENT self . odd . append ( y ) NEW_LINE DEDENT DEDENT for i in range ( len ( self . even ) ) : NEW_LINE INDENT self . max += self . even [ i ] NEW_LINE DEDENT DEDENT def odd2 ( self , odd ) : NEW_LINE INDENT self . odd += [ odd [ i ] ] NEW_LINE DEDENT DEDENT odd2 . sort ( ) NEW_LINE for i in range ( len ( odd2 ) - 1 , 0 , - 1 ) : NEW_LINE INDENT self . max += odd2 [ i ] NEW_LINE DEDENT if len ( odd2 ) % 2 == 0 and len ( odd2 ) > 0 : NEW_LINE INDENT self . max += odd2 [ 0 ] NEW_LINE DEDENT subprocess . call ( ' % d ▁ % s ' % ( max , len ( odd2 ) ) ) NEW_LINE DEDENT
def get_perfect_squares ( n ) : NEW_LINE INDENT perfect_squares = [ ] NEW_LINE current , i = 1 , 1 NEW_LINE while current <= n : NEW_LINE INDENT perfect_squares . append ( current ) NEW_LINE current = int ( math . pow ( i , 2 ) ) NEW_LINE i += 1 NEW_LINE DEDENT return perfect_squares NEW_LINE DEDENT
def find_hypotenuse ( side1 , side2 ) : NEW_LINE INDENT h = math . sqrt ( ( side1 ** 2 ) + ( side2 ** 2 ) ) NEW_LINE return h NEW_LINE DEDENT
def print_two_odd ( arr , size ) : NEW_LINE INDENT import sys NEW_LINE xor2 = arr [ 0 ] NEW_LINE set_bit_no = 0 NEW_LINE i = size - 2 NEW_LINE x , y = 0 , 0 NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT xor2 = xor2 ^ arr [ i ] NEW_LINE set_bit_no = xor2 & ~ ( xor2 - 1 ) NEW_LINE DEDENT for i in range ( size ) : NEW_LINE INDENT if arr [ i ] & set_bit_no : NEW_LINE INDENT x = x ^ arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ arr [ i ] NEW_LINE DEDENT DEDENT print ( " The ▁ two ▁ ODD ▁ elements ▁ are ▁ % d ▁ & ▁ % d " % ( x , y ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE t = sys . maxsize NEW_LINE while t > 0 : NEW_LINE INDENT n = len ( sys . argv ) NEW_LINE ar = [ ] NEW_LINE max = 0 NEW_LINE min = 100000 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ar . append ( sys . stdin . read ( n ) ) NEW_LINE if ar [ i ] < min : NEW_LINE INDENT min = ar [ i ] NEW_LINE x = i + 1 NEW_LINE DEDENT if ar [ i ] > max : NEW_LINE INDENT max = ar [ i ] NEW_LINE y = i + 1 NEW_LINE DEDENT DEDENT pos1 , pos2 = 1 , pos3 , pos4 = 1 , a , b , mm , total = 0 NEW_LINE pos1 = x NEW_LINE pos2 += n - x NEW_LINE if pos1 < pos2 : NEW_LINE INDENT a = pos1 NEW_LINE DEDENT else : NEW_LINE INDENT a = pos2 NEW_LINE DEDENT pos3 = y NEW_LINE pos4 += n - y NEW_LINE if pos3 < pos4 : NEW_LINE INDENT b = pos3 NEW_LINE DEDENT else : NEW_LINE INDENT b = pos4 NEW_LINE DEDENT div = abs ( y - x ) NEW_LINE if div < a or div < b : NEW_LINE INDENT mm = min ( a , b ) NEW_LINE total += mm + div NEW_LINE DEDENT else : NEW_LINE INDENT total += a + b NEW_LINE DEDENT print ( total ) NEW_LINE t -= 1 NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import os NEW_LINE import subprocess NEW_LINE import re NEW_LINE try : NEW_LINE INDENT res = subprocess . check_output ( [ ' / usr / bin / env ' , ' - c ' , ' - s ' , ' - - no - color ' ] ) NEW_LINE DEDENT except Exception as e : NEW_LINE INDENT res = None NEW_LINE DEDENT else : NEW_LINE INDENT res = res . decode ( ' utf - 8' ) NEW_LINE DEDENT return res NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE f = False NEW_LINE s = False NEW_LINE ind = 0 NEW_LINE x = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x . append ( string . strip ( ) ) NEW_LINE if f == False : NEW_LINE INDENT if ' OO ' in x [ i ] : NEW_LINE INDENT f = True NEW_LINE ind = i NEW_LINE DEDENT DEDENT DEDENT if f == True : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i != ind : NEW_LINE INDENT print ( x [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if x [ i ] [ : 2 ] == ' OO ' : NEW_LINE INDENT print ( ' + + ' + x [ i ] [ 2 : 5 ] + ' \n ' , end = ' ' ) NEW_LINE DEDENT elif x [ i ] [ 3 : 5 ] == ' OO ' : NEW_LINE INDENT print ( ' + + + ' + ' + ' + ' + ' \n ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def GFG ( x ) : NEW_LINE INDENT class GFG ( object ) : NEW_LINE INDENT data = None NEW_LINE next = None NEW_LINE def __init__ ( self , x ) : NEW_LINE INDENT self . data = x NEW_LINE self . next = None NEW_LINE DEDENT DEDENT def printList ( head ) : NEW_LINE INDENT if not head : NEW_LINE INDENT return NEW_LINE DEDENT temp = head NEW_LINE while True : NEW_LINE INDENT print ( ' % s - > ' % temp . data , end = ' ▁ ' ) NEW_LINE temp = temp . next NEW_LINE if temp is not head : NEW_LINE INDENT break NEW_LINE DEDENT print ( head . data ) NEW_LINE DEDENT DEDENT def deleteK ( head_ref , k ) : NEW_LINE INDENT head = head_ref NEW_LINE if not head : NEW_LINE INDENT return None NEW_LINE DEDENT curr , prev = head , None NEW_LINE while True : NEW_LINE INDENT if curr . next == head and curr == head : NEW_LINE INDENT break NEW_LINE DEDENT printList ( head ) NEW_LINE for i in range ( k ) : NEW_LINE INDENT prev = curr NEW_LINE curr = curr . next NEW_LINE DEDENT if curr is head : NEW_LINE INDENT prev = head NEW_LINE while prev . next != head : NEW_LINE INDENT prev = prev . next NEW_LINE DEDENT head = curr . next NEW_LINE prev . next = head NEW_LINE head_ref = head NEW_LINE DEDENT elif curr . next == head : NEW_LINE INDENT prev . next = head NEW_LINE DEDENT else : NEW_LINE INDENT prev . next = curr . next NEW_LINE DEDENT DEDENT return head NEW_LINE DEDENT def insertNode ( head_ref , x ) : NEW_LINE INDENT head = head_ref NEW_LINE temp = GFG ( x ) NEW_LINE if not head : NEW_LINE INDENT temp . next = temp NEW_LINE head_ref = temp NEW_LINE return head_ref NEW_LINE DEDENT else : NEW_LINE INDENT temp1 = head NEW_LINE while temp1 . next != head : NEW_LINE INDENT temp1 = temp1 . next NEW_LINE DEDENT temp1 . next = temp NEW_LINE temp . next = head NEW_LINE DEDENT return head NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT head = None NEW_LINE head = insertNode ( head , 1 ) NEW_LINE head = insertNode ( head , 2 ) NEW_LINE head = insertNode ( head , 3 ) NEW_LINE head = insertNode ( head , 4 ) NEW_LINE head = insertNode ( head , 5 ) NEW_LINE head = insertNode ( head , 6 ) NEW_LINE head = insertNode ( head , 7 ) NEW_LINE head = insertNode ( head , 8 ) NEW_LINE head = insertNode ( head , 9 ) NEW_LINE k = 4 NEW_LINE head = deleteK ( head , k ) NEW_LINE DEDENT return GFG ( head ) NEW_LINE DEDENT
def GFG ( cur , x , n ) : NEW_LINE INDENT if not x : NEW_LINE INDENT return sys . maxsize NEW_LINE DEDENT if x > 0 : NEW_LINE INDENT return abs ( ( n - cur ) / x ) NEW_LINE DEDENT else : NEW_LINE INDENT return abs ( ( cur - 1 ) / x ) NEW_LINE DEDENT DEDENT def count_steps ( curx , cury , n , m , moves ) : NEW_LINE INDENT count = 0 NEW_LINE k = len ( moves ) NEW_LINE for x , y in moves : NEW_LINE INDENT stepct = min ( steps ( curx , x , n ) , steps ( cury , y , m ) ) NEW_LINE count += stepct NEW_LINE curx += stepct * x NEW_LINE cury += stepct * y NEW_LINE DEDENT return count NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import math NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE DEDENT
def gf_gcd ( a , b ) : NEW_LINE INDENT arr = [ 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( gf_gcd ( arr , n ) ) NEW_LINE DEDENT
def is_vowel ( c ) : NEW_LINE INDENT import string NEW_LINE if c in " ▁ a ▁ " or c in " ▁ e ▁ " or c in " ▁ i ▁ " or c in " ▁ o ▁ " or c in " ▁ u ▁ " : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def is_vowelprime ( data , n ) : NEW_LINE INDENT prime = [ True ] * n NEW_LINE prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , n ) : NEW_LINE INDENT if prime [ p ] == True : NEW_LINE INDENT for i in range ( p * p , n , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if is_vowel ( data [ i ] ) and not prime [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT data = " geeksforgeeks " NEW_LINE n = len ( data ) NEW_LINE if is_vowelprime ( data , n ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def minStepToDeleteString ( data ) : NEW_LINE INDENT N = len ( data ) NEW_LINE dp = np . zeros ( ( N + 1 , N + 1 ) ) NEW_LINE for i in range ( 0 , N + 1 ) : NEW_LINE INDENT for j in range ( 0 , N + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT for len ( data ) in range ( 1 , N + 1 ) : NEW_LINE INDENT for i , j in enumerate ( data ) : NEW_LINE INDENT if len ( data ) == 1 : NEW_LINE INDENT dp [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] NEW_LINE if data [ i ] == data [ i + 1 ] : NEW_LINE INDENT dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) NEW_LINE DEDENT for K in range ( i + 2 , j + 1 ) : NEW_LINE INDENT if data [ i ] == data [ K ] : NEW_LINE INDENT dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return dp [ 0 ] [ N - 1 ] NEW_LINE DEDENT
def GFG ( ) : NEW_LINE INDENT limit = 10000000 NEW_LINE position = [ - 1 ] * ( limit + 1 ) NEW_LINE def sieve ( ) : NEW_LINE INDENT position [ 0 ] = - 1 NEW_LINE position [ 1 ] = - 1 NEW_LINE pos = 0 NEW_LINE for i in range ( 2 , limit + 1 ) : NEW_LINE INDENT if position [ i ] == 0 : NEW_LINE INDENT position [ i ] = 1 NEW_LINE pos += 1 NEW_LINE for j in range ( i * 2 , limit + 1 , i ) : NEW_LINE INDENT position [ j ] = - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT def main ( ) : NEW_LINE INDENT sieve ( ) NEW_LINE n = 11 NEW_LINE print ( position [ n ] , end = ' ▁ ' ) NEW_LINE DEDENT return ' ' . join ( position ) NEW_LINE DEDENT
def get_sum_monotone ( len_ ) : NEW_LINE INDENT DP_s = 9 NEW_LINE DP = np . zeros ( ( len_ , DP_s ) ) NEW_LINE for i in range ( DP_s ) : NEW_LINE INDENT DP [ 0 ] [ i ] = i + 1 NEW_LINE DEDENT for i in range ( len_ ) : NEW_LINE INDENT DP [ i ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , len_ ) : NEW_LINE INDENT for j in range ( 1 , DP_s ) : NEW_LINE INDENT DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT return DP [ len_ - 1 ] [ DP_s - 1 ] NEW_LINE DEDENT
def get_sum_monotone ( len_ ) : NEW_LINE INDENT DP_s = 9 NEW_LINE DP = np . zeros ( ( len_ , DP_s ) ) NEW_LINE for i in range ( DP_s ) : NEW_LINE INDENT DP [ 0 ] [ i ] = i + 1 NEW_LINE DEDENT for i in range ( len_ ) : NEW_LINE INDENT DP [ i ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , len_ ) : NEW_LINE INDENT for j in range ( 1 , DP_s ) : NEW_LINE INDENT DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT return DP [ len_ - 1 ] [ DP_s - 1 ] NEW_LINE DEDENT
def gf_max_cost ( a , n , l , r ) : NEW_LINE INDENT mx , k = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT mx = max ( mx , a [ i ] ) NEW_LINE DEDENT count = [ 0 ] * ( mx + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT count [ a [ i ] ] += 1 NEW_LINE DEDENT res = [ 0 ] * ( mx + 1 ) NEW_LINE res [ 0 ] = 0 NEW_LINE l = min ( l , r ) NEW_LINE for num in range ( 1 , mx + 1 ) : NEW_LINE INDENT k = max ( num - l - 1 , 0 ) NEW_LINE res [ num ] = max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) NEW_LINE DEDENT return res [ mx ] NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE T = len ( sys . stdin ) NEW_LINE for t in range ( T ) : NEW_LINE INDENT R = len ( sys . stdin ) NEW_LINE C = len ( sys . stdin ) NEW_LINE A = [ ] NEW_LINE for r in sys . stdin : NEW_LINE INDENT A . append ( ' ' . join ( sys . stdin ) ) NEW_LINE DEDENT r = - 1 NEW_LINE c = - 1 NEW_LINE outer : NEW_LINE INDENT for rr in range ( R ) : NEW_LINE INDENT for cc in range ( C ) : NEW_LINE INDENT if A [ rr ] [ cc ] == ' R ' : NEW_LINE INDENT r = rr NEW_LINE c = cc NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT ok = True NEW_LINE for rr in range ( r + 1 , R ) : NEW_LINE INDENT for cc in range ( c ) : NEW_LINE INDENT if A [ rr ] [ cc ] == ' R ' : NEW_LINE INDENT ok = False NEW_LINE DEDENT DEDENT DEDENT print ( ' YES ' if ok else ' NO ' ) NEW_LINE DEDENT DEDENT
def Test ( r ) : NEW_LINE INDENT PI = math . pi NEW_LINE def findArea ( r ) : NEW_LINE INDENT return PI * math . pow ( r , 2 ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT print ( " Area ▁ is ▁ % d " % findArea ( 5 ) ) NEW_LINE DEDENT return main NEW_LINE DEDENT
def DmwS ( ) : NEW_LINE INDENT import sys NEW_LINE import random NEW_LINE import math NEW_LINE from math import sin , cos , pi NEW_LINE from math import pi , pi , pi NEW_LINE from math import sin , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi , pi
def nth_term ( N ) : NEW_LINE INDENT import math NEW_LINE return abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) NEW_LINE DEDENT
def GFG ( X ) : NEW_LINE INDENT import math NEW_LINE import numpy as np NEW_LINE import numpy as np NEW_LINE class GFG ( np . ndarray ) : NEW_LINE INDENT def get_height ( X ) : NEW_LINE INDENT return ( 2 * X ) NEW_LINE DEDENT def get_height ( X ) : NEW_LINE INDENT X = 35 NEW_LINE return np . sum ( np . abs ( X - X ) ) NEW_LINE DEDENT DEDENT return GFG ( ) NEW_LINE DEDENT
def countwalks ( graph , u , v , k ) : NEW_LINE INDENT import sys NEW_LINE V = 4 NEW_LINE def countwalks ( graph , u , v , k ) : NEW_LINE INDENT if k == 0 and u == v : NEW_LINE INDENT return 1 NEW_LINE DEDENT if k == 1 and graph [ u ] [ v ] == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if k <= 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( V ) : NEW_LINE INDENT if graph [ u ] [ i ] == 1 : NEW_LINE INDENT count += countwalks ( graph , i , v , k - 1 ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT graph = np . array ( [ [ 0 , 1 , 1 , 1 ] , [ 0 , 0 , 0 , 1 ] , [ 0 , 0 , 0 , 1 ] , [ 0 , 0 , 0 , 0 ] ] ) NEW_LINE u , v , k = 0 , 3 , 2 NEW_LINE p = KPaths ( ) NEW_LINE print ( p . countwalks ( graph , u , v , k ) ) NEW_LINE DEDENT
def find_digits ( n , b ) : NEW_LINE INDENT if n < 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if n <= 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT math . pi = math . pi NEW_LINE M_E = 2.7182 NEW_LINE x = ( ( n * math . log10 ( n / M_E ) + math . log10 ( 2 * math . pi * n ) / 2.0 ) ) / ( math . log10 ( b ) ) NEW_LINE return int ( math . floor ( x ) + 1 ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE try : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) ) NEW_LINE q = int ( sys . stdin . readline ( ) ) NEW_LINE init ( n ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT if sys . stdin . readline ( ) == ' ' : NEW_LINE INDENT add ( sys . stdin . readline ( ) , sys . stdin . readline ( ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( sum ( sys . stdin . readline ( ) , sys . stdin . readline ( ) ) ) NEW_LINE DEDENT DEDENT DEDENT except ValueError : NEW_LINE INDENT pass NEW_LINE DEDENT else : NEW_LINE INDENT nodes = [ 0 ] * ( n - 1 ) NEW_LINE DEDENT def add ( target , value ) : NEW_LINE INDENT while target < len ( nodes ) : NEW_LINE INDENT nodes [ target ] += value NEW_LINE target += target & ( - target ) NEW_LINE DEDENT DEDENT def sum ( s , t ) : NEW_LINE INDENT return sum ( t ) - sum ( s - 1 ) NEW_LINE DEDENT def sum ( t ) : NEW_LINE INDENT res = 0 NEW_LINE while t > 0 : NEW_LINE INDENT res += nodes [ t ] NEW_LINE t -= t & ( - t ) NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import string NEW_LINE check = { } NEW_LINE def solve ( n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT return 2 NEW_LINE DEDENT if n // 2 in check : NEW_LINE INDENT a = check [ n // 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT a = solve ( n // 2 ) % 1000000007 NEW_LINE check [ n // 2 ] = a NEW_LINE DEDENT if n // 2 - 1 in check : NEW_LINE INDENT b = check [ n // 2 - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT b = solve ( n // 2 - 1 ) % 1000000007 NEW_LINE check [ n // 2 - 1 ] = b NEW_LINE DEDENT if n % 2 == 1 : NEW_LINE INDENT return ( 2 * a + b ) % 1000000007 NEW_LINE DEDENT else : NEW_LINE INDENT return ( 2 * b + a ) % 1000000007 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE import re NEW_LINE try : NEW_LINE INDENT numerator = int ( sys . stdin . readline ( ) ) NEW_LINE denominator = int ( sys . stdin . readline ( ) ) NEW_LINE maxproduct = int ( sys . stdin . readline ( ) ) NEW_LINE parts = int ( sys . stdin . readline ( ) ) NEW_LINE if not parts : NEW_LINE INDENT break NEW_LINE DEDENT count = 0 NEW_LINE count += Judge ( numerator , denominator , parts , 1 , 0 ) NEW_LINE print ( count ) NEW_LINE DEDENT except : NEW_LINE INDENT pass NEW_LINE DEDENT return count NEW_LINE DEDENT
def GFG ( s ) : NEW_LINE INDENT import string NEW_LINE import sys NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE import string NEW_LINE try : NEW_LINE INDENT string NEW_LINE DEDENT
def count_subsets ( arr , n ) : NEW_LINE INDENT import math NEW_LINE us = set ( ) NEW_LINE even_count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT us . add ( arr [ i ] ) NEW_LINE DEDENT DEDENT even_count = len ( us ) NEW_LINE return int ( math . pow ( 2 , even_count ) - 1 ) NEW_LINE DEDENT
def GFG ( n ) : NEW_LINE INDENT import string NEW_LINE MAX = 1000 NEW_LINE f = [ 0 ] * MAX NEW_LINE def fib ( n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if n in [ 1 , 2 ] : NEW_LINE INDENT return ( f [ n ] = 1 ) NEW_LINE DEDENT if f [ n ] : NEW_LINE INDENT return f [ n ] NEW_LINE DEDENT k = 0 NEW_LINE if n & 1 : NEW_LINE INDENT k = ( n + 1 ) // 2 NEW_LINE DEDENT else : NEW_LINE INDENT k = n // 2 NEW_LINE DEDENT if n & 1 : NEW_LINE INDENT f [ n ] = ( fib ( k ) ** 2 + fib ( k - 1 ) ** 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) ** 2 NEW_LINE DEDENT return f [ n ] NEW_LINE DEDENT def gcd ( a , b ) : NEW_LINE INDENT if not a : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def find_lcmfibonacci ( a , b ) : NEW_LINE INDENT return ( fib ( a ) * fib ( b ) ) / fib ( gcd ( a , b ) ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT a , b = 3 , 12 NEW_LINE print ( find_lcmfibonacci ( a , b ) ) NEW_LINE DEDENT return None NEW_LINE DEDENT
def GFG ( n , w ) : NEW_LINE INDENT x , sum = 0 , 0 NEW_LINE if w >= 0 and w <= 8 : NEW_LINE INDENT x = 9 - w NEW_LINE DEDENT elif w >= - 9 and w <= - 1 : NEW_LINE INDENT x = 10 + w NEW_LINE DEDENT sum = int ( math . pow ( 10 , n - 2 ) ) NEW_LINE sum = ( x * sum ) NEW_LINE return sum NEW_LINE DEDENT
def find_kth_char ( s , k ) : NEW_LINE INDENT s = list ( s ) NEW_LINE i = 0 NEW_LINE total_len = 0 NEW_LINE while i < len ( s ) : NEW_LINE INDENT if s [ i ] . isalpha ( ) : NEW_LINE INDENT total_len += 1 NEW_LINE if total_len == k : NEW_LINE INDENT return s [ i ] NEW_LINE DEDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT n = 0 NEW_LINE while i < len ( s ) and not s [ i ] . isalpha ( ) : NEW_LINE INDENT n = n * 10 + ( s [ i ] - '0' ) NEW_LINE i += 1 NEW_LINE DEDENT next_total_len = total_len * n NEW_LINE if k <= next_total_len : NEW_LINE INDENT pos = k % total_len NEW_LINE if pos == 0 : NEW_LINE INDENT pos = total_len NEW_LINE DEDENT return find_kth_char ( s , pos ) NEW_LINE DEDENT else : NEW_LINE INDENT total_len = next_total_len NEW_LINE DEDENT DEDENT DEDENT return ' ▁ ' NEW_LINE DEDENT
def count_non_empty_substr ( x ) : NEW_LINE INDENT import string NEW_LINE n = len ( x ) NEW_LINE return n * ( n + 1 ) / 2 NEW_LINE DEDENT
