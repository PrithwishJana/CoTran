import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; if ( n == 0 ) return false ; boolean [ ] isPrime = new boolean [ 1000000 ] ; Arrays . fill ( isPrime , true ) ; isPrime [ 0 ] = isPrime [ 1 ] = isPrime [ 2 ] = false ; for ( int i = 3 ; i <= 1000000 ; i += 2 ) { if ( isPrime [ i ] ) { out . println ( i ) ; return true ; } } for ( int i = 3 ; i <= 1000000 ; i += 2 ) { if ( isPrime [ i ] ) { out . println ( i ) ; return true ; } } for ( int i = 3 ; i <= 1000000 ; i += 2 ) { if ( isPrime [ i ] ) { out . println ( i + 1 ) ; return true ; } } return false ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static final int MAX_CHAR = 26 ; static void countFreq ( char [ ] str , int freq [ ] , int len ) { for ( int i = 0 ; i < len ; i ++ ) { freq [ str [ i ] - ' a ' ] ++ ; } } static boolean canMakePalindrome ( int freq [ ] , int len ) { int count_odd = 0 ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( freq [ i ] % 2 != 0 ) count_odd ++ ; } if ( len % 2 == 0 ) { if ( count_odd > 0 ) return false ; else return true ; } if ( count_odd != 1 ) return false ; return true ; } static String findOddAndRemoveItsFreq ( int freq [ ] ) { String odd_str = " " ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( freq [ i ] % 2 != 0 ) { freq [ i ] -- ; odd_str += ( char ) ( i + ' a ' ) ; return odd_str ; } } return odd_str ; } static String findPalindromicString ( String str ) { int len = str . length ( ) ; int freq [ ] = new int [ MAX_CHAR ] ; countFreq ( str , freq , len ) ; if ( canMakePalindrome ( freq , len ) == false ) return " No Palindromic String " ; String odd_str = findOddAndRemoveItsFreq ( freq ) ; String front_str = " " ; String rear_str = " " ; for ( int i = 0 ; i < len ; i ++ ) { char temp = str . charAt ( i ) ; if ( freq [ i ] != 0 ) { temp = ' a ' ; } front_str += temp ; } return front_str ; } public static void main ( String [ ] args ) { int freq [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 ,
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; if ( x1 * y1 + y1 * z1 + x2 * x3 + y2 * y3 == 0 ) { println ( 0 ) ; } else if ( x1 * x2 + y1 * y2 + x3 * x3 == 0 ) { println ( 0 ) ; } else if ( y1 * y2 + x1 * x3 == 0 ) { println ( 0 ) ; } else if ( x1 * x2 + y1 * y3 == 0 ) { println ( 0 ) ; } else { println ( Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static int count9s ( String number ) { int n = number . length ( ) ; int d [ ] = new int [ 9 ] ; d [ 0 ] = 1 ; int result = 0 ; int mod_sum = 0 , continuous_zero = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( number . charAt ( i ) - '0' == 0 ) continuous_zero ++ ; else continuous_zero = 0 ; mod_sum += number . charAt ( i ) - '0' ; result += d [ mod_sum ] ; d [ mod_sum ] ++ ; result -= continuous_zero ; } return result ; } public static void main ( String [ ] args ) { System . out . println ( count9s ( "01809" ) ) ; System . out . println ( count9s ( "1809" ) ) ; System . out . println ( count9s ( "4189" ) ) ; } }
public class GFG { static int fastPow ( int N , int K ) { if ( K == 0 ) return 1 ; int temp = fastPow ( N , K / 2 ) ; if ( K % 2 == 0 ) return temp * temp ; else return N * temp * temp ; } static int countWays ( int N , int K ) { return K * fastPow ( K - 1 , N - 1 ) ; } public static void main ( String [ ] args ) { int N = 3 , K = 3 ; System . out . println ( countWays ( N , K ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; double EPS = 1e-10 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == - 1 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] ^ = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
import java . util . * ; public class GFG { static int MAX = 10000 ; static Vector < Integer > arr = new Vector < Integer > ( ) ; static void SieveOfEratosthenes ( ) { boolean [ ] prime = new boolean [ MAX ] ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) arr . add ( p ) ; } } static boolean isEuclid ( int n ) { int product = 1 ; for ( int i = 0 ; product < n ; i ++ ) { product = product * arr . get ( i ) ; if ( product + 1 == n ) return true ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isEuclid ( n ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; n = 42 ; if ( isEuclid ( n ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class GFG { static int MAX = 100000 ; static boolean prime [ ] = new boolean [ MAX ] ; static ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; static void SieveOfEratosthenes ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) arr . add ( p ) ; } } static boolean isPrimorialPrime ( int n ) { if ( ! prime [ n ] ) return false ; int product = 1 , i = 0 ; while ( product < n ) { product *= arr . get ( i ) ; if ( product + 1 == n || product - 1 == n ) return true ; i ++ ; } return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isPrimorialPrime ( n ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
public class GFG { static int mul_table ( int N , int i ) { if ( i > 10 ) return ; System . out . println ( N + " * " + i + " = " + N * i ) ; return mul_table ( N , i + 1 ) ; } public static void main ( String [ ] args ) { int N = 8 ; mul_table ( N , 1 ) ; } }
public class GFG { static int closestNumber ( int n , int m ) { int q = n / m ; int n1 = m * q ; if ( ( n * m ) > 0 ) n2 = ( m * ( q + 1 ) ) ; else n2 = ( m * ( q - 1 ) ) ; if ( Math . abs ( n - n1 ) < Math . abs ( n - n2 ) ) return n1 ; return n2 ; } public static void main ( String [ ] args ) { int n = 13 , m = 4 ; System . out . println ( closestNumber ( n , m ) ) ; n = - 15 , m = 6 ; System . out . println ( closestNumber ( n , m ) ) ; n = 0 , m = 8 ; System . out . println ( closestNumber ( n , m ) ) ; n = 18 , m = - 7 ; System . out . println ( closestNumber ( n , m ) ) ; } }
import java . io . * ; public class GFG { static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) return 0 ; else if ( ( ang * n ) % 180 != 0 ) return 0 ; int ans = 1 ; int freq = ( ang * n ) / 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; } public static void main ( String [ ] args ) { int ang = 90 , n = 4 ; System . out . println ( solve ( ang , n ) ) ; } }
public class GFG { static int compute_lps ( String s ) { int n = s . length ( ) ; int lps [ ] = new int [ n ] ; int len = 0 ; lps [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( len ) ) { len ++ ; lps [ i ] = len ; } else { if ( len != 0 ) { len = lps [ len - 1 ] ; } else { lps [ i ] = 0 ; } } } return lps ; } static void Longestsubstring ( String s ) { int lps [ ] = compute_lps ( s ) ; int n = s . length ( ) ; if ( lps [ n - 1 ] == 0 ) { System . out . println ( - 1 ) ; return ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( lps [ i ] == lps [ n - 1 ] ) { System . out . println ( s . substring ( 0 , lps [ i ] ) ) ; return ; } } if ( lps [ lps [ n - 1 ] - 1 ] == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( s . substring ( 0 , lps [ lps [ n - 1 ] - 1 ] ) ) ; } } public static void main ( String [ ] args ) { String s = " fixprefixsuffix " ; Longestsubstring ( s ) ; } }
import java . util . * ; public class GFG { static void checkIfSortRotated ( int arr [ ] , int n ) { int minEle = Integer . MAX_VALUE , maxEle = Integer . MIN_VALUE , minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) { minEle = arr [ i ] ; minIndex = i ; } } int flag1 = 1 ; for ( int i = 1 ; i < minIndex ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag1 = 0 ; break ; } } int flag2 = 2 ; for ( int i = minIndex + 1 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { flag2 = 0 ; break ; } } if ( flag1 == 1 && flag2 == 1 && arr [ n - 1 ] < arr [ minIndex - 1 ] ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 , 1 , 2 } ; int n = arr . length ; checkIfSortRotated ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += ( arr [ i ] - arr [ i + 1 ] ) / d + 1 ; arr [ i + 1 ] += ( arr [ i ] - arr [ i + 1 ] ) / d + 1 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void checkIfPowerIsolated ( int num ) { int input1 = num ; int count = 0 ; int [ ] factor = new int [ num + 1 ] ; if ( num % 2 == 0 ) { while ( num % 2 == 0 ) { count ++ ; num /= 2 ; } factor [ 2 ] = count ; } for ( int i = 3 ; i * i <= num ; i ++ ) { count = 0 ; while ( num % i == 0 ) { count ++ ; num /= i ; } if ( count > 0 ) { factor [ i ] = count ; } } if ( num > 1 ) { factor [ num ] = 1 ; } int product = 1 ; for ( int i = 0 ; i < factor . length ; i ++ ) { if ( factor [ i ] > 0 ) { product = product * factor [ i ] * i ; } } if ( product == input1 ) { System . out . println ( " Power - isolated Integer " ) ; } else { System . out . println ( " Not a Power - isolated Integer " ) ; } } public static void main ( String [ ] args ) { checkIfPowerIsolated ( 12 ) ; checkIfPowerIsolated ( 18 ) ; checkIfPowerIsolated ( 35 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int a = 0 , c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' && a != 0 ) a -- ; if ( s . charAt ( i ) == ' Z ' && c != 0 ) c -- ; } if ( c == 0 ) System . out . println ( " AZ " ) ; else System . out . println ( - 1 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ arr [ i ] ] = i ; } int [ ] prev = ans [ n - 1 ] ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prev [ i ] != prev [ i ] ) { ans [ n - 1 ] += prev [ i ] ; ans [ n - 1 ] += prev [ i ] ; prev [ i ] = prev [ i ] ; } else { ans [ n - 1 ] += prev [ i ] ; ans [ n - 1 ] += prev [ i ] ; prev [ i ] = prev [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] > max ) { max = ans [ i ] ; } } if ( ans [ n - 1 ] > max ) { System . out . println ( - 1 ) ; } else { System . out . println ( max ) ; } } } }
import java . util . * ; public class GFG { static int multiply ( String num1 , String num2 ) { int len1 = num1 . length ( ) , len2 = num2 . length ( ) ; if ( len1 == 0 || len2 == 0 ) return 0 ; int result [ ] = new int [ len1 + len2 ] ; int i_n1 = 0 , i_n2 = 0 ; for ( int i = len1 - 1 ; i >= 0 ; i -- ) { int carry = 0 ; int n1 = num1 . charAt ( i ) - 48 ; int i_n2 = 0 ; for ( int j = len2 - 1 ; j >= 0 ; j -- ) { int n2 = num2 . charAt ( j ) - 48 ; int sum = n1 * n2 + result [ i_n1 + i_n2 ] + carry ; carry = sum / 10 ; result [ i_n1 + i_n2 ] = sum % 10 ; i_n2 ++ ; } if ( carry > 0 ) result [ i_n1 + i_n2 ] += carry ; i_n1 ++ ; } for ( int i = len - 1 ; i >= 0 && result [ i ] == 0 ; i -- ) { if ( i == - 1 ) return 0 ; String s = " " ; while ( i >= 0 ) s += ( char ) ( result [ i ] + 48 ) ; return s ; } return - 1 ; } public static void main ( String [ ] args ) { String str1 = "123542141545454545454545454544" ; String str2 = "1714546546546545454854454454545" ; if ( ( str1 . charAt ( 0 ) == ' - ' || str2 . charAt ( 0 ) == ' - ' ) && ( str1 . charAt ( 0 ) != ' - ' || str2 . charAt ( 0 ) != ' - ' ) ) System . out . print ( " - " ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; sum += arr [ i ] [ 0 ] ; } if ( sum >= arr [ 0 ] [ 0 ] ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( k > n - 1 ) { System . out . println ( " RIGHT " ) ; } else { int left = n - k ; for ( int i = left ; i >= 0 ; i -- ) { System . out . println ( " PRINT " + s . charAt ( i ) ) ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { System . out . println ( " RIGHT " ) ; } for ( int i = left ; i >= 0 ; i -- ) { System . out . println ( " PRINT " + s . charAt ( i ) ) ; } } } }
import java . util . * ; public class GFG { static void printDistSum ( int arr [ ] , int n ) { int sum = sum + arr [ 0 ] ; int dp [ ] [ ] = new int [ n + 1 ] [ sum + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = true ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ arr [ i - 1 ] ] = true ; for ( int j = 1 ; j <= sum ; j ++ ) { if ( dp [ i - 1 ] [ j ] == true ) { dp [ i ] [ j ] = true ; dp [ i ] [ j + arr [ i - 1 ] ] = true ; } } } for ( int j = 0 ; j <= sum ; j ++ ) { if ( dp [ n ] [ j ] == true ) System . out . print ( j + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; printDistSum ( arr , n ) ; } }
public class GFG { static int Subtract ( int a , int b ) { int c = a + ( ~ b + 1 ) ; return c ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; System . out . println ( Subtract ( a , b ) ) ; a = 9 , b = 7 ; System . out . println ( Subtract ( a , b ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; long n = sc . nextLong ( ) ; long ans = 0 ; for ( long i = 1 ; i <= n ; i ++ ) { long mid = ( i + 1 ) / 2 ; if ( n - i * mid >= 0 ) { ans = Math . min ( ans , mid ) ; } else { ans = Math . max ( ans , mid ) ; } } pw . println ( ans ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { visited [ arr [ i ] ] = true ; } int prev = arr [ n - 1 ] ; int prevIdx = - 1 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( visited [ prevIdx ] && visited [ prevIdx ] ) { prevIdx = i ; prev = arr [ prevIdx ] ; } else if ( visited [ prevIdx ] && visited [ prevIdx ] ) { prev = arr [ prevIdx ] ; prevIdx = prevIdx ; } else if ( visited [ prevIdx ] && visited [ prevIdx ] ) { prev = arr [ prevIdx ] ; prev = arr [ prevIdx ] ; } else if ( visited [ prevIdx ] && visited [ prevIdx ] ) { prevIdx = prevIdx ; prev = arr [ prevIdx ] ; prev = arr [ prevIdx ] ; } else if ( visited [ prevIdx ] && visited [ prevIdx ] ) { prev = arr [ prevIdx ] ; prevIdx = prevIdx ; } } if ( prevIdx != - 1 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
import java . util . * ; public class GFG { static int nextZero ( int i , int occurrences [ ] ) { while ( i < occurrences [ i ] ) { if ( occurrences [ i ] == 0 ) return i ; i ++ ; } return - 1 ; } static void getModifiedString ( String str ) { int n = str . length ( ) ; if ( n > 26 ) return ; char ch = str . charAt ( 0 ) ; int occurrences [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) occurrences [ ch - ' a ' ] ++ ; int index = nextZero ( 0 , occurrences ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( occurrences [ ch - ' a ' ] > 1 ) { occurrences [ ch - ' a ' ] -- ; ch = ( char ) ( ' a ' + index ) ; occurrences [ index ] = 1 ; index = nextZero ( index + 1 , occurrences ) ; } } String str = String . valueOf ( ch ) ; System . out . println ( str ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; getModifiedString ( str ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int h = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int time = sc . nextInt ( ) ; int hMax = h ; int mMax = m ; for ( int j = 0 ; j < hMax ; j ++ ) { hMax = hMax * 10 + hMax % 10 ; mMax = mMax * 10 + mMax % 10 ; if ( time < hMax && time < mMax ) { println ( hMax + " : " + mMax ) ; return ; } hMax = hMax * 10 + hMax % 10 ; mMax = mMax * 10 + mMax % 10 ; if ( time < mMax && time < hMax ) { println ( hMax + " : " + mMax ) ; return ; } } } println ( "00:00" ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int k = ( arr [ i ] + 1 ) / 2 ; if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long n = sc . nextLong ( ) ; if ( n == 1 ) { System . out . println ( 3 ) ; } else if ( n % 2 == 1 ) { System . out . println ( 1 ) ; } else { long count = 0 ; while ( n % 2 == 0 ) { n /= 2 ; count ++ ; } if ( count == n ) { System . out . println ( count + 1 ) ; } else { System . out . println ( count ) ; } } } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 3 ] ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = i ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ i ] == i ) { if ( i - 1 >= 0 && a [ i - 1 ] + 2 == i ) { ans += 2 ; } else if ( i - 1 >= 0 && a [ i - 1 ] + 2 == i ) { ans += 2 ; } else if ( i - 1 >= 0 && a [ i - 1 ] + 2 == i ) { ans += 2 ; } else if ( i - 1 >= 0 && a [ i - 1 ] + 2 == i ) { ans += 2 ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , m ; static void solve ( ) { int a [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = m + a [ i ] ; int b [ ] = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) b [ i ] = m + b [ i ] ; int c [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) c [ i ] = m - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { str . append ( a [ i ] ) . append ( " \n " ) ; } else { str . append ( b [ i ] ) . append ( " \n " ) ; } } str . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { boolean lenv = false ; BufferedReader bf ; PrintWriter pw ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } String st [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Integer . parseInt ( st [ 0 ] ) ; m = Integer . parseInt ( st [ 1 ] ) ; solve ( ) ; pw . println ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; long [ ] dp = new long [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - 1 ] ) % m ; } System . out . println ( dp [ n ] ) ; } }
import java . util . * ; public class GFG { static void printMax ( int arr [ ] , int n , int k ) { Queue < Integer > Qi = new LinkedList < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { while ( Qi . size ( ) > 0 && arr [ Qi . peek ( ) ] >= arr [ Qi . peek ( ) ] ) Qi . poll ( ) ; Qi . add ( i ) ; } for ( int i = k ; i < n ; i ++ ) { System . out . print ( arr [ Qi . peek ( ) ] + " " ) ; while ( Qi . size ( ) > 0 && Qi . peek ( ) <= i - k ) Qi . poll ( ) ; while ( Qi . size ( ) > 0 && arr [ Qi . peek ( ) ] >= arr [ Qi . peek ( ) ] ) Qi . poll ( ) ; Qi . add ( i ) ; } System . out . println ( arr [ Qi . peek ( ) ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 1 , 78 , 90 , 57 , 89 , 56 } ; int k = 3 ; printMax ( arr , arr . length , k ) ; } }
public class GFG { static int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( ( b & 1 ) > 0 ) res += a ; a = a << 1 ; b = b >> 1 ; } return res ; } public static void main ( String [ ] args ) { System . out . println ( russianPeasant ( 18 , 1 ) ) ; System . out . println ( russianPeasant ( 20 , 12 ) ) ; } }
public class GFG { static boolean isValid ( String str , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i - 1 ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = "0110" ; int len = str . length ( ) ; if ( isValid ( str , len ) ) System . out . println ( " Valid " ) ; else System . out . println ( " Invalid " ) ; } }
import java . util . * ; public class GFG { static int lehmann ( int n , int t ) { int a = ( int ) Math . random ( ) ; int e = ( n - 1 ) / 2 ; while ( t > 0 ) { int result = ( int ) ( Math . pow ( a , e ) ) % n ; if ( ( result % n ) == 1 || ( result % n ) == ( n - 1 ) ) { a = ( int ) Math . random ( ) ; t -- ; } else { return - 1 ; } } return 1 ; } public static void main ( String [ ] args ) { int n = 13 , t = 10 ; if ( n == 2 ) { System . out . println ( "2 is Prime . " ) ; } if ( n % 2 == 0 ) { System . out . println ( n + " is Composite " ) ; } else { int flag = lehmann ( n , t ) ; if ( flag == 1 ) { System . out . println ( n + " may be Prime . " ) ; } else { System . out . println ( n + " is Composite . " ) ; } } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long ans = 0 ; while ( a > 0 && b > 0 ) { if ( a % b == 0 ) { ans += a / b ; a -= a / b * b ; } else { ans += b / a ; b -= b / a * a ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int k = sc . nextInt ( ) ; HashSet < Character > hs = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { hs . add ( s . charAt ( i ) ) ; } if ( hs . size ( ) > k ) { System . out . println ( " impossible " ) ; } else { System . out . println ( k - hs . size ( ) ) ; } } }
import java . util . * ; public class GFG { static int N = 3 ; static int MaxTraceSub ( int mat [ ] [ ] ) { int max_trace = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { int r = i , s = j ; int trace = 0 ; while ( r < N && s < N ) { trace += mat [ r ] [ s ] ; r ++ ; s ++ ; max_trace = Math . max ( trace , max_trace ) ; } } } return max_trace ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 10 , 2 , 5 } , { 6 , 10 , 4 } , { 2 , 7 , -10 } } ; System . out . println ( MaxTraceSub ( mat ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; sc . hasNext ( ) ; ) { double [ ] [ ] p = { { - 1 , INF , INF } , { - 1 , INF , INF } , { - 1 , INF , INF } , { - 1 , INF , INF } , { - 1 , INF , INF } , { - 1 , INF , INF } } ; double [ ] [ ] p2 = { { INF , INF , INF } , { - 1 , INF , INF } , { - 1 , INF , INF } } ; for ( int i = 0 ; i < p . length ; i ++ ) { for ( int j = 0 ; j < p2 . length ; j ++ ) { p2 [ i ] [ j ] = p [ i ] [ j ] ; } } boolean f = true ; for ( int i = 0 ; i < p2 . length ; i ++ ) { for ( int j = 0 ; j < p2 . length ; j ++ ) { if ( p2 [ i ] [ j ] < p [ i ] [ j ] || p2 [ i ] [ j ] > p [ i ] [ j ] ) { f = false ; break ; } } if ( f ) { println ( " YES " ) ; break ; } } println ( " NO " ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] % 2 == 0 ) { sum ++ ; } else { ans [ i ] = sum ; min = Math . min ( min , sum ) ; } } } if ( min == Integer . MAX_VALUE ) { System . out . println ( 1 ) ; } else { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { sum ++ ; } else { ans [ i ] = sum ; min = Math . min ( min , sum ) ; } } System . out . println ( ans [ n - 1 ] ) ; } } } }
public class GFG { static int OddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; i ++ ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; j ++ ) { if ( i % j == 0 ) divCount ++ ; } if ( divCount % 2 == 1 ) res ++ ; } return res ; } public static void main ( String [ ] args ) { int a = 1 , b = 10 ; System . out . println ( OddDivCount ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { int val = arr [ i ] / m ; if ( val > max ) { max = val ; } } System . out . println ( max ) ; } }
public class GFG { static void printArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) System . out . print ( arr [ i ] + " " ) ; System . out . println ( ) ; } static void replacedArray ( int N , int arr [ ] ) { int pos_sum = 0 , neg_sum = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum ) ; if ( arr [ i ] > 0 ) pos_sum = pos_sum + arr [ i ] ; else neg_sum = neg_sum + arr [ i ] ; arr [ i ] = Math . abs ( diff ) ; } } public static void main ( String [ ] args ) { int N = 5 ; int arr [ ] = { 1 , - 1 , 2 , 3 , - 2 } ; replacedArray ( N , arr ) ; printArray ( N , arr ) ; N = 6 ; int arr1 [ ] = { - 3 , - 4 , - 2 , 5 , 1 , - 2 } ; replacedArray ( N , arr1 ) ; printArray ( N , arr1 ) ; } }
import java . util . * ; public class GFG { static void printArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) System . out . print ( arr [ i ] + " " ) ; System . out . println ( ) ; } static void replacedArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) { int pos_sum = 0 , neg_sum = 0 ; for ( int j = i + 1 ; j < N ; j ++ ) { if ( arr [ j ] > 0 ) pos_sum += arr [ j ] ; else neg_sum += arr [ j ] ; } int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum ) ; arr [ i ] = Math . abs ( diff ) ; } } public static void main ( String [ ] args ) { int N = 5 ; int arr [ ] = { 1 , - 1 , 2 , 3 , - 2 } ; replacedArray ( N , arr ) ; printArray ( N , arr ) ; N = 6 ; int arr1 [ ] = { - 3 , - 4 , - 2 , 5 , 1 , - 2 } ; replacedArray ( N , arr1 ) ; printArray ( N , arr1 ) ; } }
import java . util . * ; public class GFG { static int countDivisbleby4 ( int s [ ] ) { int n = s . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '4' || s [ i ] == '8' || s [ i ] == '0' ) count ++ ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { int h = ( s [ i ] - '0' ) * 10 + ( s [ i + 1 ] - '0' ) ; if ( h % 4 == 0 ) count += i + 1 ; } return count ; } public static void main ( String [ ] args ) { int s [ ] = { 1 , 2 , 4 } ; System . out . println ( countDivisbleby4 ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; if ( m == n ) { sum = arr [ 0 ] ; } else { sum = arr [ n - 1 ] ; } if ( m == n ) { sum = arr [ n - 1 ] ; } else { sum = arr [ n - 1 ] ; } if ( sum == m ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = arr [ i ] + i ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = arr . length - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] >= n ) { ans = arr [ i ] ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == k ) { flag = true ; break ; } } if ( flag == false ) { System . out . println ( " no " ) ; } else { System . out . println ( " yes " ) ; } } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class A { static int [ ] [ ] dp ; static int calc ( int D , int I , int M , int N ) { dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < dp . length ; i ++ ) { for ( int j = 0 ; j < dp [ 0 ] . length ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] + i * D ) ; } } return dp [ 0 ] [ 0 ] ; } public static void main ( String [ ] args ) throws Exception { Scanner in = new Scanner ( new File ( " input . txt " ) ) ; PrintWriter out = new PrintWriter ( new File ( " output . txt " ) ) ; int T = in . nextInt ( ) ; for ( int zz = 1 ; zz <= T ; zz ++ ) { int D = in . nextInt ( ) ; int I = in . nextInt ( ) ; int M = in . nextInt ( ) ; int N = in . nextInt ( ) ; int [ ] X = new int [ N ] ; for ( int i = 0 ; i < X . length ; i ++ ) { X [ i ] = in . nextInt ( ) ; } dp = new int [ N ] [ 256 ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 256 ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j ] + X [ i ] ) ; } } out . println ( " Case # " + zz + " : " + Math . min ( dp [ N - 1 ] [ D ] , dp [ N - 1 ] [ I ] ) ) ; } out . close ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int [ ] [ ] map = new int [ 12 ] [ 12 ] ; for ( int i = 0 ; i < 12 ; i ++ ) { for ( int j = 0 ; j < 12 ; j ++ ) { map [ i ] [ j ] = map [ i ] [ j ] = 0 ; } } boolean [ ] [ ] dp = new boolean [ 12 ] [ 12 ] ; dp [ 0 ] [ 0 ] = true ; for ( int i = 0 ; i < 12 ; i ++ ) { for ( int j = 0 ; j < 12 ; j ++ ) { if ( map [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = false ; } } } int ans = 0 ; for ( int i = 0 ; i < 12 ; i ++ ) { for ( int j = 0 ; j < 12 ; j ++ ) { if ( dp [ i ] [ j ] ) { ans ++ ; } } } println ( ans ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static boolean arraySortedOrNot ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 20 , 23 , 23 , 45 , 78 , 88 } ; int n = arr . length ; if ( arraySortedOrNot ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; min = Math . min ( min , arr [ i ] ) ; } int ans = 0 ; if ( n == 1 ) { System . out . println ( 0 ) ; } else { for ( int i = 0 ; i < n ; i ++ ) { ans += ( arr [ i ] - min ) ; } System . out . println ( ans ) ; } } } }
import java . util . * ; public class GFG { static int printKDistinct ( int arr [ ] , int size , int KthIndex ) { HashMap < Integer , Integer > dict = new HashMap < > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( dict . containsKey ( arr [ i ] ) ) { dict . put ( arr [ i ] , dict . get ( arr [ i ] ) + 1 ) ; } else { dict . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < size ; i ++ ) { if ( dict . get ( arr [ i ] ) > 1 ) continue ; else KthIndex = KthIndex - 1 ; if ( KthIndex == 0 ) return arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 1 , 3 , 4 , 2 } ; int size = arr . length ; System . out . println ( printKDistinct ( arr , size , 2 ) ) ; } }
public class GFG { static int fib ( int f [ ] , int n ) { f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 ; return f ; } static int findLastDigit ( int n ) { int f [ ] = new int [ 61 ] ; f = fib ( f , 60 ) ; return f [ n % 60 ] ; } public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( findLastDigit ( n ) ) ; n = 61 ; System . out . println ( findLastDigit ( n ) ) ; n = 7 ; System . out . println ( findLastDigit ( n ) ) ; n = 67 ; System . out . println ( findLastDigit ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a + b + c == 17 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = Math . abs ( a [ i ] - a [ n - 1 ] ) ; dp [ i ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] ) ; } for ( int i = n - 2 ; i >= 0 ; i -- ) { dp [ i ] [ 0 ] = Math . abs ( a [ i ] - a [ n - 1 ] ) ; dp [ i ] [ 1 ] = Math . min ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] ) ; } System . out . println ( dp [ n ] [ 0 ] ) ; } }
import java . util . * ; public class GFG { static void countEleLessThanOrEqual ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { for ( int i = 0 ; i < m ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr2 [ j ] <= arr1 [ i ] ) count ++ ; System . out . print ( count + " " ) ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 2 , 3 , 4 , 7 , 9 } ; int arr2 [ ] = { 0 , 1 , 2 , 1 , 1 , 4 } ; int m = arr1 . length ; int n = arr2 . length ; countEleLessThanOrEqual ( arr1 , arr2 , m , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } if ( k == 1 ) { System . out . println ( arr [ 0 ] ) ; } else if ( k == 2 ) { System . out . println ( Math . max ( arr [ 0 ] , arr [ n - 1 ] ) ) ; } else { System . out . println ( Math . max ( arr [ 0 ] , arr [ n - 1 ] ) ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; out . print ( a + " " ) ; out . print ( b + " " ) ; } out . flush ( ) ; out . close ( ) ; } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public Scanner ( String file ) throws FileNotFoundException { br = new BufferedReader ( new FileReader ( file ) ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } public boolean ready ( ) throws IOException { return br . ready ( ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ n - 1 ] ; int max = arr [ n - 1 ] ; if ( n % 2 == 0 ) { max = arr [ n / 2 ] ; } System . out . println ( max ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 1 ; i < k ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( sum % p ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] * ( i + 1 ) * ( i - a [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int lps ( String str ) { int n = str . length ( ) ; int L [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] [ i ] = 1 ; for ( int cl = 2 ; cl <= n ; cl ++ ) { for ( int i = 0 ; i < n - cl + 1 ; i ++ ) { int j = i + cl - 1 ; if ( str . charAt ( i ) == str . charAt ( j ) && cl == 2 ) L [ i ] [ j ] = 2 ; else if ( str . charAt ( i ) == str . charAt ( j ) ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ; else L [ i ] [ j ] = Math . max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ; } } return L [ 0 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { String seq = " GEEKSFORGEEKS " ; int n = seq . length ( ) ; System . out . println ( " The length of the LPS is " + lps ( seq ) ) ; } }
public class GFG { static void printConsecutive ( int last , int first ) { System . out . print ( first + " " ) ; first ++ ; for ( int x = first ; x <= last ; x ++ ) System . out . print ( " + " + x + " " ) ; } static void findConsecutive ( int N ) { for ( int last = 1 ; last < N ; last ++ ) { for ( int first = 0 ; first < last ; first ++ ) { if ( 2 * N == ( last - first ) * ( last + first + 1 ) ) { System . out . print ( N + " = " ) ; printConsecutive ( last , first + 1 ) ; return ; } } } System . out . print ( " - 1" ) ; } public static void main ( String [ ] args ) { int n = 12 ; findConsecutive ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( Math . abs ( a - b ) > 1 || Math . abs ( a + b ) == 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) / ( s * s ) ; return ans ; } public static void main ( String [ ] args ) { int m = 385 , n = 60 ; System . out . println ( NumberOfSquares ( m , n ) ) ; } }
import java . util . Arrays ; public class GFG { static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; int [ ] c = new int [ n ] ; Arrays . setAll ( c , i -> s . charAt ( i ) ) ; Arrays . sort ( c ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] != s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = " aabbbcc " ; if ( isAlphabaticOrder ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static void printMax ( int arr [ ] , int n , int k ) { int max = 0 ; for ( int i = 0 ; i <= n - k ; i ++ ) { max = arr [ i ] ; for ( int j = 1 ; j < k ; j ++ ) { if ( arr [ i + j ] > max ) max = arr [ i + j ] ; } System . out . print ( max + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int k = 3 ; printMax ( arr , n , k ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; ArrayList < ArrayList < Integer > > graph = new ArrayList < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { graph . add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { graph . get ( sc . nextInt ( ) - 1 ) . add ( sc . nextInt ( ) - 1 ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( graph . get ( i ) . get ( j ) . size ( ) == 1 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] ) ; } } } long ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += dp [ n ] [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long p = sc . nextLong ( ) ; long ans = 0 ; if ( a > b ) { ans = a ; } else { ans = b ; } if ( p > a ) { ans = b ; } else { ans = a ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; int [ ] [ ] P = new int [ N ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i ] [ 0 ] = sc . nextInt ( ) ; P [ i ] [ 1 ] = sc . nextInt ( ) ; P [ i ] [ 0 ] = Math . max ( P [ i ] [ 0 ] , P [ i ] [ 1 ] ) ; P [ i ] [ 1 ] = Math . min ( P [ i ] [ 0 ] , P [ i ] [ 1 ] ) ; } int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < N ; i ++ ) { int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < N ; j ++ ) { int min = Integer . MAX_VALUE ; for ( int k = 0 ; k < K ; k ++ ) { int x = P [ j ] [ 0 ] ; int y = P [ j ] [ 1 ] ; int l = P [ j ] [ 0 ] ; int r = P [ j ] [ 1 ] ; int count = 0 ; for ( int k = 0 ; k < K ; k ++ ) { if ( x >= min && x < K && y >= min && y < K ) { min = Math . min ( min , count ) ; count = 0 ; } if ( l >= min && y < K ) { min = Math . min ( min , count ) ; count = 0 ; } } if ( l >= min && y < K ) { ans = Math . min ( ans , count ) ; count = 0 ; } } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) ; Map < String , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String s = in . next ( ) ; if ( map . containsKey ( s ) ) { map . put ( s , map . get ( s ) + 1 ) ; } else { map . put ( s , 1 ) ; } } for ( Map . Entry < String , Integer > entry : map . entrySet ( ) ) { pw . print ( entry . getKey ( ) + " " ) ; } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static Vector < Integer > pre_process ( Vector < Integer > substrings , String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String dup = " " ; for ( int j = i ; j < n ; j ++ ) { dup += s . charAt ( j ) ; substrings . add ( dup ) ; } } Collections . sort ( substrings ) ; return substrings ; } public static void main ( String [ ] args ) { String s = " geek " ; Vector < Integer > substrings = new Vector < Integer > ( ) ; pre_process ( substrings , s ) ; int queries [ ] = { 1 , 5 , 10 } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( substrings . get ( queries [ i ] - 1 ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; if ( w == 0 && h == 0 ) break ; int r = 1 , c = 1 , d = 0 ; for ( int i = 0 ; i < w ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " RIGHT " ) ) { d = ( d + 1 ) % 4 ; } else if ( s . equals ( " LEFT " ) ) { d = ( d + 3 ) % 4 ; } else { if ( d == 0 ) { d = ( d + 1 ) % 4 ; } else { d = ( d + 2 ) % 4 ; } } r = Math . max ( r , c + d ) ; c = Math . max ( c , r + d ) ; } System . out . println ( c + " " + r ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' x ' ) { count ++ ; } else { if ( count > 1 ) { count -- ; } count = 0 ; } } if ( count > 1 ) { count -- ; } System . out . println ( count ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { String s = sc . next ( ) ; if ( s . equals ( "0" ) ) break ; int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' ) cnt ++ ; else cnt = 0 ; } if ( cnt > 0 ) { cnt = 0 ; } println ( " " + cnt ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
public class GFG { static int fact ( int N ) { int product = 1 ; for ( int i = 1 ; i <= N ; i ++ ) product = product * i ; return product ; } static int nthTerm ( int N ) { return ( N * N ) * fact ( N ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int longestSubArray ( int arr [ ] , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZeroPresent = true ; break ; } } if ( isZeroPresent ) return n ; return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 0 , 1 , 2 , 0 } ; int n = arr . length ; System . out . println ( longestSubArray ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; System . out . println ( ( n - 1 ) * 9 + x ) ; } } }
public class GFG { static void maximumArea ( int l , int b , int x , int y ) { int left = 0 , right = 0 , above = 0 , below = 0 ; left = x * b ; right = ( l - x - 1 ) * b ; above = l * y ; below = ( b - y - 1 ) * l ; System . out . println ( Math . max ( left , right ) , Math . max ( above , below ) ) ; } public static void main ( String [ ] args ) { int l = 8 , b = 8 ; int x = 0 , y = 0 ; maximumArea ( l , b , x , y ) ; } }
import java . util . * ; public class GFG { static final int NO_OF_CHARS = 256 ; static int max_distinct_char ( String str , int n ) { int [ ] count = new int [ NO_OF_CHARS ] ; for ( int i = 0 ; i < n ; i ++ ) { count [ str . charAt ( i ) ] ++ ; } int max_distinct = 0 ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] != 0 ) max_distinct ++ ; } return max_distinct ; } static int smallesteSubstr_maxDistictChar ( String str ) { int n = str . length ( ) ; int max_distinct = max_distinct_char ( str , n ) ; int minl = n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { String subs = str . substring ( i , j ) ; int subs_lenght = subs . length ( ) ; int sub_distinct_char = max_distinct_char ( subs , subs_lenght ) ; if ( subs_lenght < minl && max_distinct == sub_distinct_char ) minl = subs_lenght ; } } return minl ; } public static void main ( String [ ] args ) { String str = " AABBBCBB " ; int l = smallesteSubstr_maxDistictChar ( str ) ; System . out . println ( " The length of the smallest substring consisting of maximum distinct characters : " + l ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s1 = sc . next ( ) ; String s2 = sc . next ( ) ; boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( s1 . charAt ( i ) == ' R ' || s2 . charAt ( i ) == ' R ' ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int findNumberOfEvenCells ( int n , int q [ ] [ ] , int size ) { int row [ ] = new int [ n ] ; int col [ ] = new int [ n ] ; for ( int i = 0 ; i < size ; i ++ ) { int x = q [ i ] [ 0 ] ; int y = q [ i ] [ 1 ] ; row [ x - 1 ] ++ ; col [ y - 1 ] ++ ; } int r1 = 0 , r2 = 0 , c1 = 0 , c2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( row [ i ] % 2 == 0 ) r1 ++ ; if ( row [ i ] % 2 == 1 ) r2 ++ ; if ( col [ i ] % 2 == 0 ) c1 ++ ; if ( col [ i ] % 2 == 1 ) c2 ++ ; } int count = r1 * c1 + r2 * c2 ; return count ; } public static void main ( String [ ] args ) { int n = 2 ; int q [ ] [ ] = { { 1 , 1 } , { 1 , 2 } , { 2 , 1 } } ; int size = q . length ; System . out . println ( findNumberOfEvenCells ( n , q , size ) ) ; } }
public class GFG { static void checkType ( int arr [ ] , int n ) { if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] <= arr [ n - 1 ] ) System . out . println ( " Increasing " ) ; else if ( arr [ 0 ] >= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) System . out . println ( " Decreasing " ) ; else if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) System . out . println ( " Increasing then decreasing " ) ; else System . out . println ( " Decreasing then increasing " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; checkType ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } if ( n % 2 == 0 ) { System . out . println ( n / 2 - count ) ; } else { System . out . println ( n / 2 ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int ans = 0 ; if ( A * B - C * D > 0 ) { ans = 1 ; } else { ans = 0 ; } A = A / C ; B = A / D ; A = A / B ; B = B / D ; A = A / C ; B = A / D ; A = A / B ; B = B / D ; A = A / C ; B = B / D ; A = A / C ; B = B / D ; A = A / C ; System . out . println ( A * B - A * C ) ; } }
public class GFG { static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
import java . util . * ; public class GFG { static void rearrange ( int arr [ ] , int n ) { int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } System . out . println ( arr ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 } ; int n = arr . length ; rearrange ( arr , n ) ; } }
import java . io . * ; public class GFG { static int centered_square_num ( int n ) { return n * n + ( ( n - 1 ) * ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( n + " Centered square number : " + centered_square_num ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { if ( n % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { if ( n % 2 == 0 && k % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum / 2 ) ; } }
import java . util . * ; public class GFG { static int maxSubArraySum ( int arr [ ] , int size ) { int max_so_far = arr [ 0 ] ; int curr_max = arr [ 0 ] ; for ( int i = 1 ; i < size ; i ++ ) { curr_max = Math . max ( arr [ i ] , curr_max + arr [ i ] ) ; max_so_far = Math . max ( max_so_far , curr_max ) ; } return max_so_far ; } static int lenOfLongSubarrWithGivenSum ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; int sum = 0 , maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum == k ) maxLen = i + 1 ; if ( ! um . containsKey ( sum ) ) { um . put ( sum , i ) ; } if ( um . containsKey ( sum ) ) { if ( um . containsKey ( sum - k ) && maxLen < ( i - um . get ( sum - k ) ) ) { maxLen = i - um . get ( sum - k ) ; } } } return maxLen ; } static int lenLongSubarrWithMaxSum ( int arr [ ] , int n ) { int maxSum = maxSubArraySum ( arr , n ) ; return lenOfLongSubarrWithGivenSum ( arr , n , maxSum ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , - 2 , - 1 , 3 , - 4 } ; int n = arr . length ; System . out . println ( " Length of longest subarray having maximum sum = " + lenLongSubarrWithMaxSum ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] * arr [ i ] ; if ( x != max ) { max = x ; } } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static int find ( int dividend , int divisor , int start , int end ) { if ( start > end ) return ( 0 , dividend ) ; int mid = start + ( end - start ) / 2 ; int n = dividend - divisor * mid ; if ( n > divisor ) start = mid + 1 ; else if ( n < 0 ) end = mid - 1 ; else { if ( n == divisor ) { mid ++ ; n = 0 ; } return find ( dividend , divisor , start , end ) ; } } static int divide ( int dividend , int divisor ) { return find ( dividend , divisor , 1 , dividend ) ; } public static void main ( String [ ] args ) { int dividend = 10 , divisor = 3 ; int ans = divide ( dividend , divisor ) ; System . out . print ( ans + " , " ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Math . abs ( a [ 0 ] - a [ 1 ] ) ; int max = Math . abs ( a [ n - 1 ] - a [ n ] ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( i == 0 ) { min = Math . abs ( a [ n - 1 ] - a [ i + 1 ] ) ; } else { min = Math . min ( Math . abs ( a [ n - 1 ] - a [ i + 1 ] ) , Math . abs ( a [ n - 1 ] - a [ i + 1 ] ) ) ; } max = Math . max ( max , min ) ; System . out . println ( min + " " + max ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] != arr [ j + 1 ] ) { min = Math . min ( min , arr [ j ] - arr [ j + 1 ] ) ; } } System . out . println ( min ) ; } }
public class GFG { static void towerOfHanoi ( int n , char from_rod , char to_rod , char aux_rod1 , char aux_rod2 ) { if ( n == 0 ) return ; if ( n == 1 ) { System . out . println ( " Move disk " + n + " from rod " + from_rod + " to rod " + to_rod ) ; return ; } towerOfHanoi ( n - 2 , from_rod , aux_rod1 , aux_rod2 , to_rod ) ; System . out . println ( " Move disk " + n + " from rod " + from_rod + " to rod " + aux_rod2 ) ; System . out . println ( " Move disk " + n + " from rod " + from_rod + " to rod " + to_rod ) ; System . out . println ( " Move disk " + n - 1 + " from rod " + aux_rod2 + " to rod " + to_rod ) ; towerOfHanoi ( n - 2 , aux_rod1 , to_rod , from_rod , aux_rod2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; towerOfHanoi ( n , ' A ' , ' D ' , ' B ' , ' C ' ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; long mod = 1000000003 ; long [ ] dp = new long [ s . length ( ) ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' > ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' + ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' - ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' [ ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' ] ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' [ ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' ] ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' [ ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else if ( s . charAt ( i ) == ' ] ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } } long ans = ( dp [ s . length ( ) - 1 ] + dp [ s . length ( ) - 1 ] ) % mod ; System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n ; static int a [ ] ; static void solve ( ) { HashMap < String , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = new HashMap < > ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int op = in . nextInt ( ) ; int x = in . nextInt ( ) ; switch ( op ) { case 0 : map . put ( x , in . nextInt ( ) ) ; break ; case 1 : if ( map . get ( x ) == null ) { str . append ( 0 ) ; } else { str . append ( map . get ( x ) ) ; } break ; case 2 : if ( map . get ( x ) == null ) { str . append ( 0 ) ; } else { str . append ( map . get ( x ) ) ; } break ; } } str . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { boolean lenv = false ; BufferedReader bf ; PrintWriter pw ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } int q = Integer . parseInt ( bf . readLine ( ) . trim ( ) ) ; for ( int i = 0 ; i < q ; i ++ ) { String s [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; a = new int [ s . length ] ; for ( int j = 0 ; j < s . length ; j ++ ) a [ j ] = Integer . parseInt ( s [ j ] ) ; solve ( ) ; pw . print ( str ) ; pw . flush ( ) ; } } }
import java . util . * ; public class GFG { static int minSum ( int arr [ ] , int n ) { int sum = arr [ 0 ] , prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= prev ) { prev = prev + 1 ; sum = sum + prev ; } else { sum = sum + arr [ i ] ; prev = arr [ i ] ; } } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 3 , 5 , 6 } ; int n = arr . length ; System . out . println ( minSum ( arr , n ) ) ; } }
public class GFG { static int findN ( int k ) { if ( k == 0 ) return 3 ; if ( k == 1 ) return 1 ; if ( k % 4 == 0 ) return k ; if ( k % 4 == 3 ) return k - 1 ; return - 1 ; } public static void main ( String [ ] args ) { int k = 7 ; int res = findN ( k ) ; if ( res == - 1 ) System . out . println ( " Not possible " ) ; else System . out . println ( res ) ; } }
import java . util . * ; public class GFG { static int subsetXOR ( int arr [ ] , int n , int k ) { int max_ele = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max_ele ) max_ele = arr [ i ] ; } int m = ( 1 << ( Math . log ( max_ele ) + 1 ) ) - 1 ; int dp [ ] [ ] [ ] = new int [ n + 1 ] [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) dp [ i ] [ j ] [ k ] = 0 ; } } for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] ; if ( k != 0 ) dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ^ arr [ i - 1 ] ] [ k - 1 ] ; } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) ans += dp [ n ] [ k ] [ i ] ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 } ; int k = 1 ; int n = arr . length ; System . out . println ( subsetXOR ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int D = sc . nextInt ( ) ; int G = sc . nextInt ( ) ; int [ ] [ ] P = new int [ D ] [ 2 ] ; for ( int i = 0 ; i < D ; i ++ ) { P [ i ] [ 0 ] = sc . nextInt ( ) ; P [ i ] [ 1 ] = sc . nextInt ( ) ; } int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < Math . pow ( 2 , D ) ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < D ; j ++ ) { if ( ( i >> j ) % 2 == 0 ) { sum += P [ j ] [ 0 ] ; } else { sum += P [ j ] [ 1 ] ; } } if ( sum > G ) { continue ; } int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < D ; j ++ ) { int sum = 0 ; for ( int k = 0 ; k < D ; k ++ ) { if ( ( i >> k ) % 2 == 0 ) { sum += P [ j ] [ 0 ] ; } else { sum += P [ j ] [ 1 ] ; } min = Math . min ( min , sum ) ; } } ans = Math . min ( ans , min ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; sum += arr [ i ] ; } if ( sum == m ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int max = 0 , min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; if ( arr [ i ] > max ) max = arr [ i ] ; if ( arr [ i ] < min ) min = arr [ i ] ; } System . out . println ( n - max - min ) ; } }
import java . util . * ; public class GFG { static int minAbsDiff ( int n ) { int left = ( int ) Math . pow ( 2 , ( int ) Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) ; int right = left * 2 ; return Math . min ( ( n - left ) , ( right - n ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( minAbsDiff ( n ) ) ; } }
import java . util . * ; public class GFG { static int LCIS ( int arr1 [ ] , int n , int arr2 [ ] , int m ) { int table [ ] = new int [ m ] ; for ( int j = 0 ; j < m ; j ++ ) table [ j ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr1 [ i ] == arr2 [ j ] ) { if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ; } if ( arr1 [ i ] > arr2 [ j ] ) { if ( table [ j ] > current ) current = table [ j ] ; } } } int result = 0 ; for ( int i = 0 ; i < m ; i ++ ) if ( table [ i ] > result ) result = table [ i ] ; return result ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 3 , 4 , 9 , 1 } ; int arr2 [ ] = { 5 , 3 , 8 , 9 , 10 , 2 , 1 } ; int n = arr1 . length ; int m = arr2 . length ; System . out . println ( " Length of LCIS is " + LCIS ( arr1 , n , arr2 , m ) ) ; } }
import java . util . * ; public class GFG { static int countSetBits ( int n ) { int bitCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) bitCount += countSetBitsUtil ( i ) ; return bitCount ; } static int countSetBitsUtil ( int x ) { if ( x <= 0 ) return 0 ; return ( x % 2 == 0 ) ? 0 : 1 + countSetBitsUtil ( x / 2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Total set bit count is " + countSetBits ( n ) ) ; } }
import java . util . * ; public class GFG { static int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ low ] ; int i = low - 1 , j = high + 1 ; while ( true ) { i ++ ; while ( arr [ i ] < pivot ) i ++ ; j -- ; while ( arr [ j ] > pivot ) j -- ; if ( i >= j ) return j ; arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; } } static void quickSort ( int arr [ ] , int low , int high ) { if ( low < high ) { int pi = partition ( arr , low , high ) ; quickSort ( arr , low , pi ) ; quickSort ( arr , pi + 1 , high ) ; } } static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 7 , 8 , 9 , 1 , 5 } ; int n = arr . length ; quickSort ( arr , 0 , n - 1 ) ; System . out . println ( " Sorted array : " ) ; printArray ( arr , n ) ; } }
import java . util . * ; public class GFG { static int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j < high ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; arr [ j ] = arr [ i ] ; } } arr [ i + 1 ] = arr [ high ] ; arr [ high ] = arr [ i + 1 ] ; return ( i + 1 ) ; } static void quickSort ( int arr [ ] , int low , int high ) { if ( low < high ) { int pi = partition ( arr , low , high ) ; quickSort ( arr , low , pi - 1 ) ; quickSort ( arr , pi + 1 , high ) ; } } static void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) System . out . print ( arr [ i ] + " " ) ; System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 7 , 8 , 9 , 1 , 5 } ; int n = arr . length ; quickSort ( arr , 0 , n - 1 ) ; System . out . println ( " Sorted array : " ) ; printArray ( arr , n ) ; } }
import java . util . * ; public class GFG { static int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = Integer . MIN_VALUE ; int max_ending_here = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; } static void minPossibleSum ( int a [ ] , int n , int x ) { int mxSum = maxSubArraySum ( a , n ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; sum = sum - mxSum + mxSum / x ; System . out . println ( sum + 2 ) ; } public static void main ( String [ ] args ) { int N = 3 , X = 2 ; int A [ ] = { 1 , - 2 , 3 } ; minPossibleSum ( A , N , X ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > max ) { System . out . print ( arr [ i ] + " " ) ; } } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static void printArray ( int N , int SUM , int K ) { int minSum = ( N * ( N + 1 ) ) / 2 ; int maxSum = ( N * K ) - ( N * ( N - 1 ) ) / 2 ; if ( minSum > SUM || maxSum < SUM ) { System . out . println ( " Not Possible " ) ; return ; } int arr [ ] = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) arr [ i ] = i ; int sum = minSum ; for ( int i = N ; i >= 1 ; i -- ) { int x = sum + ( K - i ) ; if ( x < SUM ) { sum = sum + ( K - i ) ; arr [ i ] = K ; K -- ; } else { arr [ i ] += ( SUM - sum ) ; sum = sum ; break ; } } for ( int i = 1 ; i <= N ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int N = 3 , SUM = 15 , K = 8 ; printArray ( N , SUM , K ) ; } }
public class GFG { static int COST = 3 ; static int maxItems ( int x , int y , int z ) { int type1 = x / COST ; x %= COST ; int type2 = y / COST ; y %= COST ; int type3 = z / COST ; z %= COST ; int type4 = Math . min ( x , Math . min ( y , z ) ) ; int maxItems = type1 + type2 + type3 + type4 ; return maxItems ; } public static void main ( String [ ] args ) { int x = 4 , y = 5 , z = 6 ; System . out . println ( maxItems ( x , y , z ) ) ; } }
import java . util . * ; public class GFG { static int run_tasks ( int A [ ] , int B [ ] ) { int total_time = 0 ; while ( A [ A . length - 1 ] != B . length - 1 ) { int x = A [ A . length - 1 ] ; int y = B [ A . length - 1 ] ; if ( x == y ) total_time ++ ; else { B [ A . length - 1 ] = y ; A [ A . length - 1 ] = x ; A [ A . length - 1 ] = x ; total_time += 2 ; } } return total_time ; } public static void main ( String [ ] args ) { int A [ ] = new int [ 4 ] ; A [ 0 ] = 3 ; A [ 1 ] = 2 ; A [ 2 ] = 1 ; A [ 3 ] = 4 ; A [ 4 ] = 1 ; A [ 1 ] = 3 ; A [ 2 ] = 2 ; System . out . println ( run_tasks ( A , B ) ) ; } }
import java . io . * ; public class GFG { static void line ( int x0 , int y0 ) { int c = 2 * y0 * x0 ; System . out . println ( y0 + " x " + " + " x " + " + " y = " + c ) ; } public static void main ( String [ ] args ) { int x0 = 4 , y0 = 3 ; line ( x0 , y0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; HashSet < Character > hs = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hs . add ( sc . next ( ) . charAt ( 0 ) ) ; } System . out . println ( hs . size ( ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] [ ] a = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int s = 0 ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] == 0 && a [ i ] [ j ] == 0 && a [ i ] [ j ] == 0 && a [ i ] [ j ] == 0 && a [ i ] [ j ] == 0 ) { s = 1 ; t = - 1 ; break ; } } } println ( s == 1 ? "0" : "1" ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static boolean isAnyNotPalindrome ( String s ) { HashSet < Character > unique = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { unique . add ( s . charAt ( i ) ) ; } if ( unique . size ( ) > 1 ) return true ; else return false ; } public static void main ( String [ ] args ) { String s = " aaaaab " ; if ( isAnyNotPalindrome ( s ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class GFG { static int findMajority ( int arr [ ] , int n ) { return arr [ n / 2 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = arr . length ; System . out . println ( findMajority ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = 0 ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String name = sc . next ( ) ; String shen = sc . next ( ) ; if ( shen . equals ( " North " ) ) { s += name ; if ( s > 20000 ) { System . out . println ( " NO " ) ; return ; } } else if ( shen . equals ( " South " ) ) { t += name ; if ( t > 20000 ) { System . out . println ( " NO " ) ; return ; } } else if ( shen . equals ( " North " ) ) { s += name ; if ( t > 20000 ) { System . out . println ( " NO " ) ; return ; } } } System . out . println ( " YES " ) ; } }
public class GFG { static int countSubArrays ( int arr [ ] , int n , int K ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k <= j ; k ++ ) bitwise_or = bitwise_or | arr [ k ] ; if ( bitwise_or >= K ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; int k = 6 ; System . out . println ( countSubArrays ( arr , n , k ) ) ; } }
import java . util . * ; public class GFG { static boolean canBeEqual ( int a , int b , int c , int k ) { int arr [ ] = new int [ 3 ] ; arr [ 0 ] = a ; arr [ 1 ] = b ; arr [ 2 ] = c ; Arrays . sort ( arr ) ; int diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ; k = k - diff ; if ( k < 0 || k % 3 != 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int a1 = 6 , b1 = 3 , c1 = 2 , k1 = 7 ; if ( canBeEqual ( a1 , b1 , c1 , k1 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static ArrayList < Integer > [ ] adj ; static int [ ] leaf ; static void dfs ( int node , int [ ] leaf , int vis ) { leaf [ node ] = 0 ; vis = 1 ; for ( int it : adj [ node ] ) { if ( vis == 0 ) { dfs ( it , leaf , vis ) ; leaf [ node ] += leaf [ it ] ; } } if ( adj [ node ] . size ( ) == 0 ) { leaf [ node ] = 1 ; } } static void printLeaf ( int n , int [ ] leaf ) { for ( int i = 1 ; i <= n ; i ++ ) { System . out . println ( " The node " + i + " has " + leaf [ i ] + " leaf nodes " ) ; } } public static void main ( String [ ] args ) { int N = 6 ; adj = new ArrayList [ N ] ; adj [ 1 ] = new ArrayList < > ( ) ; adj [ 1 ] = new ArrayList < > ( ) ; adj [ 1 ] . add ( 1 ) ; adj [ 1 ] . add ( 3 ) ; adj [ 1 ] . add ( 3 ) ; adj [ 2 ] = new ArrayList < > ( ) ; adj [ 2 ] = new ArrayList < > ( ) ; adj [ 2 ] . add ( 1 ) ; adj [ 2 ] . add ( 3 ) ; adj [ 2 ] . add ( 3 ) ; adj [ 3 ] . add ( 4 ) ; adj [ 3 ] . add ( 5 ) ; adj [ 3 ] . add ( 6 ) ; leaf = new int [ N + 1 ] ; dfs ( 1 , leaf , vis ) ; printLeaf ( N , leaf ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int k = sc . nextInt ( ) ; int i = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == '1' ) { i ++ ; } else { break ; } } if ( k > s . length ( ) ) { System . out . println ( 1 ) ; } else { System . out . println ( s . charAt ( i ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int [ ] b = new int [ 26 ] ; int [ ] c = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { b [ s . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { c [ s . charAt ( i ) - ' a ' ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( b [ c [ i ] ] > 0 ) { ans = - 1 ; break ; } else if ( b [ c [ i ] ] > 0 ) { ans = b [ c [ i ] ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int lcsOf3 ( char X [ ] , char Y [ ] , char Z [ ] , int m , int n , int o ) { int L [ ] [ ] [ ] = new int [ m + 1 ] [ n + 1 ] [ o + 1 ] [ m + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= o ; k ++ ) { if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] && X [ i - 1 ] == Z [ k - 1 ] ) L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 ; else L [ i ] [ j ] [ k ] = Math . max ( Math . max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] ) , L [ i ] [ j ] [ k - 1 ] ) ; } } } return L [ m ] [ n ] [ o ] ; } public static void main ( String [ ] args ) { char X [ ] = { ' AGGT12' , ' AGGT12' , ' AGGT12' , ' AGGT12' , ' AGGT12' , ' AGGT12' } ; char Y [ ] = { '12TXAYB ' , ' AGGT12' , ' B ' , ' C ' } ; char Z [ ] = { '12XBA ' , ' AGGT12' , ' B ' , ' C ' } ; int m = X . length ; int n = Y . length ; int o = Z . length ; System . out . println ( " Length of LCS is " + lcsOf3 ( X , Y , Z , m , n , o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += Math . abs ( a [ i ] - a [ i + 1 ] ) ; } System . out . println ( sum ) ; } }
public class GFG { static boolean isSpiltPossible ( int n , int a [ ] ) { int sum = 0 , c1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( a [ i ] == 1 ) c1 ++ ; } if ( sum % 2 == 0 ) return false ; if ( ( sum / 2 ) % 2 == 0 ) return true ; if ( c1 > 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 3 ; int a [ ] = { 1 , 1 , 2 } ; if ( isSpiltPossible ( n , a ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( arr [ i ] == 1 ) { ans [ i ] = 0 ; } else { ans [ i ] = Math . max ( ans [ i ] , ans [ i + 1 ] + arr [ i ] ) ; } } System . out . println ( ans [ 3 ] ) ; } }
import java . util . * ; public class GFG { static void count_even_odd ( int min , int max , int steps [ ] [ ] ) { boolean beven = true , aeven = false , n = 2 ; for ( int i = 0 ; i < n ; i ++ ) { int a = steps [ i ] [ 0 ] , b = steps [ i ] [ 1 ] ; if ( ! aeven || a % 2 == 1 ) aeven = true ; if ( ! beven ) b % 2 == 1 ? b / 2 : b / 2 + 1 ; else if ( ! a % 2 == 1 ) a % 2 == 1 ? a / 2 : a / 2 + 1 ; else if ( ! b % 2 == 1 ) b % 2 == 1 ? b / 2 : b / 2 + 1 ; } if ( aeven == true && b % 2 == 1 ) System . out . println ( " even = " + ( max / 2 ) - ( min - 1 ) / 2 + " , odd = " + odd ) ; else System . out . println ( " even = " + ( max / 2 ) - ( min - 1 ) / 2 + " , odd = " + odd ) ; } public static void main ( String [ ] args ) { int min = 1 , max = 4 ; int steps [ ] [ ] = { { 1 , 2 } , { 3 , 4 } } ; count_even_odd ( min , max , steps ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = a / b + 1 ; System . out . println ( d * c ) ; } }
import java . util . * ; public class GFG { static void printKPFNums ( int A , int B , int K ) { boolean [ ] prime = new boolean [ B + 1 ] ; int [ ] p_factors = new int [ B + 1 ] ; for ( int p = 2 ; p <= B ; p ++ ) { if ( p_factors [ p ] == 0 ) { for ( int i = p ; i <= B ; i += p ) { p_factors [ i ] = p_factors [ i ] + 1 ; } } } for ( int i = A ; i <= B ; i ++ ) { if ( p_factors [ i ] == K ) { System . out . print ( i + " " ) ; } } } public static void main ( String [ ] args ) { int A = 14 , B = 18 , K = 2 ; printKPFNums ( A , B , K ) ; } }
import java . util . * ; public class GFG { static void reverserWords ( String str ) { Stack < Character > st = new Stack < > ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) != ' ' ) { st . push ( str . charAt ( i ) ) ; } else { while ( st . size ( ) > 0 ) { System . out . print ( st . peek ( ) ) ; st . pop ( ) ; } System . out . print ( " " ) ; } } while ( st . size ( ) > 0 ) { System . out . print ( st . peek ( ) ) ; st . pop ( ) ; } } public static void main ( String [ ] args ) { String str = " Geeks for Geeks " ; reverserWords ( str ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > b [ i ] ) { count = - 1 ; break ; } else if ( a [ i ] < b [ i ] ) { count = a [ i ] ; } } if ( count == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( count ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 2 ] ; for ( int i = 2 ; i <= n ; i ++ ) { a [ i ] = i + 1 ; } Arrays . sort ( a ) ; int cnt = 0 ; if ( n == 2 ) { System . out . println ( 2 ) ; System . out . println ( 1 ) ; System . out . println ( 2 ) ; return ; } if ( n == 3 ) { System . out . println ( 1 ) ; System . out . println ( 2 ) ; return ; } if ( n == 4 ) { System . out . println ( 1 ) ; System . out . println ( 2 ) ; return ; } if ( n == 5 ) { System . out . println ( 1 ) ; System . out . println ( 2 ) ; return ; } System . out . println ( 3 ) ; System . out . println ( 4 ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int [ ] stack = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { char c = in . next ( ) . charAt ( 0 ) ; if ( c == ' + ' ) stack [ i ] += stack [ i ] ; else if ( c == ' - ' ) stack [ i ] -= stack [ i ] ; else if ( c == ' * ' ) stack [ i ] *= stack [ i ] ; else if ( c == ' / ' ) stack [ i ] /= stack [ i ] ; } out . printf ( " % .6f \n " , stack [ 4 ] ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; if ( k % n == 0 ) { ans = k / n ; } else { ans = k / n + 1 ; } System . out . println ( ans ) ; } }
public class GFG { static void findNthTerm ( int n ) { if ( n % 2 == 0 ) { n /= 2 ; System . out . println ( ( int ) Math . pow ( 3 , n - 1 ) ) ; } else { n = ( n / 2 ) + 1 ; System . out . println ( ( int ) Math . pow ( 2 , n - 1 ) ) ; } } public static void main ( String [ ] args ) { int N = 4 ; findNthTerm ( N ) ; N = 11 ; findNthTerm ( N ) ; } }
import java . util . * ; public class GFG { static int countNonIncreasing ( int arr [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i + 1 ] >= arr [ i ] ) len ++ ; else { cnt += ( ( ( len + 1 ) * len ) / 2 ) ; len = 1 ; } } if ( len > 1 ) cnt += ( ( ( len - 1 ) * len ) / 2 ) ; return cnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 7 , 1 , 1 } ; int n = arr . length ; System . out . println ( countNonIncreasing ( arr , n ) ) ; } }
import java . util . Arrays ; public class GFG { static int maximize ( int A1 [ ] , int A2 [ ] , int n , int x , int y ) { int [ ] c = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = A2 [ i ] - A1 [ i ] ; sum += A1 [ i ] ; } Arrays . sort ( c ) ; int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += c [ i ] ; if ( i + 1 >= ( n - x ) ) { maxi = Math . max ( sum , maxi ) ; } } return maxi ; } public static void main ( String [ ] args ) { int A1 [ ] = { 1 , 2 , 3 , 4 , 5 } ; int A2 [ ] = { 5 , 4 , 3 , 2 , 1 } ; int n = 5 ; int x = 3 , y = 3 ; System . out . println ( maximize ( A1 , A2 , n , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 1000 == 0 ) { System . out . println ( 10 * ( n / 1000 ) ) ; } else if ( n % 100 == 0 ) { System . out . println ( 10 * ( n / 100 ) ) ; } else if ( n % 10 == 0 ) { System . out . println ( 10 * ( n / 10 - 1 ) + 3 ) ; } else { System . out . println ( 10 * ( n / 10 - 1 ) + 1 ) ; } } } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] cost = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { Arrays . fill ( cost [ i ] , Integer . MAX_VALUE ) ; cost [ i ] [ i ] = 0 ; } int m = in . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = in . nextInt ( ) - 1 ; int b = in . nextInt ( ) - 1 ; int c = in . nextInt ( ) ; int d = in . nextInt ( ) ; cost [ a ] [ b ] = c ; cost [ b ] [ a ] = d ; } int s = in . nextInt ( ) - 1 ; int g = in . nextInt ( ) - 1 ; int V = in . nextInt ( ) ; int P = in . nextInt ( ) ; for ( int k = 0 ; k < n ; k ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( cost [ i ] [ k ] + cost [ k ] [ j ] > cost [ i ] [ k ] + cost [ k ] [ j ] ) { cost [ i ] [ j ] = cost [ i ] [ k ] + cost [ k ] [ j ] ; } } } } out . println ( V - P - cost [ s - 1 ] [ g - 1 ] - cost [ g - 1 ] [ s - 1 ] ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int r1 = sc . nextInt ( ) ; int r2 = sc . nextInt ( ) ; int c1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int d1 = sc . nextInt ( ) ; int d2 = sc . nextInt ( ) ; int x = ( d1 + c1 - r2 ) / 2 ; int y = r1 - x ; int z = c1 - x ; int w = d1 - x ; if ( x == 1 && y == 1 && z == 1 && w == 1 && x == 1 && y == 1 && z == 1 && w == 1 ) { System . out . println ( x + " " + y ) ; System . out . println ( z + " " + w ) ; } else System . out . println ( - 1 ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) b [ i ] = sc . nextInt ( ) ; int [ ] dp = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) dp [ i ] = INF ; for ( int i = 0 ; i < m ; i ++ ) { if ( dp [ i ] != INF ) { int min = INF ; for ( int j = i ; j < n ; j ++ ) { if ( dp [ j ] != INF && dp [ j + a [ i ] ] < min ) { min = dp [ j + a [ i ] ] ; } } dp [ i ] = min ; } } int min = INF ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] != INF ) { int min = INF ; for ( int j = i ; j < n ; j ++ ) { if ( dp [ j ] != INF && dp [ j + a [ i ] ] < min ) { min = dp [ j + a [ i ] ] ; } } dp [ i ] = min ; } } if ( dp [ n ] != INF ) System . out . println ( min ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { dp [ i ] [ 0 ] = Integer . MAX_VALUE ; dp [ i ] [ 1 ] = Integer . MAX_VALUE ; } for ( int i = 0 ; i < n ; i ++ ) { String [ ] s = sc . next ( ) . split ( " " ) ; int a = Integer . parseInt ( s [ 0 ] ) ; int b = Integer . parseInt ( s [ 1 ] ) ; int c = Integer . parseInt ( s [ 2 ] ) ; dp [ i ] [ 0 ] = Math . min ( dp [ i ] [ 0 ] , Math . min ( a , b ) + c ) ; dp [ i ] [ 1 ] = Math . min ( dp [ i ] [ 1 ] , Math . min ( a , b ) + c ) ; } int ans = Integer . MAX_VALUE ; if ( dp [ n - 1 ] [ 0 ] != Integer . MAX_VALUE ) { ans = - 1 ; } System . out . println ( ans ) ; } }
public class GFG { static boolean startsWith ( String str , String pre ) { int strLen = str . length ( ) ; int preLen = pre . length ( ) ; int i = 0 , j = 0 ; while ( i < strLen && j < preLen ) { if ( str . charAt ( i ) != pre . charAt ( j ) ) return false ; i ++ ; j ++ ; } return true ; } static boolean endsWith ( String str , String suff ) { int i = str . length ( ) - 1 , j = suff . length ( ) - 1 ; while ( i >= 0 && j >= 0 ) { if ( str . charAt ( i ) != suff . charAt ( j ) ) return false ; i -- ; j -- ; } return true ; } static boolean checkString ( String str , String a , String b ) { if ( str . length ( ) != a . length ( ) + b . length ( ) ) return false ; if ( startsWith ( str , a ) ) { if ( endsWith ( str , b ) ) return true ; } if ( startsWith ( str , b ) ) { if ( endsWith ( str , a ) ) return true ; } return false ; } public static void main ( String [ ] args ) { String str = " GeeksforGeeks " ; String a = " Geeksfo " ; String b = " rGeeks " ; if ( checkString ( str , a , b ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 ) { for ( int k = 1 ; k < n ; k ++ ) { if ( k % 3 != 0 && ( i + j + k ) == n ) { System . out . println ( i + " " + j + " " + k ) ; return ; } } } } } } } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }
public class GFG { static int countIntegralSolutions ( int n ) { int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= n ; j ++ ) for ( int k = 0 ; k <= n ; k ++ ) if ( i + j + k == n ) result ++ ; return result ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }
public class GFG { static int TEN = 10 ; static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % TEN ; n /= TEN ; } return sum ; } static int getNthTerm ( int n ) { int sum = digitSum ( n ) ; if ( sum % TEN == 0 ) return ( n * TEN ) ; int extra = TEN - ( sum % TEN ) ; return ( ( n * TEN ) + extra ) ; } static void firstNTerms ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( getNthTerm ( i ) + " " ) ; } public static void main ( String [ ] args ) { int n = 10 ; firstNTerms ( n ) ; } }
public class GFG { static int power ( int x , int a ) { int res = 1 ; while ( a > 0 ) { if ( ( a & 1 ) == 1 ) res = res * x ; x = x * x ; a >>= 1 ; } return res ; } static int breakInteger ( int N ) { if ( N == 2 ) return 1 ; if ( N == 3 ) return 2 ; int maxProduct = 0 ; if ( N % 3 == 0 ) maxProduct = power ( 3 , N / 3 ) ; return maxProduct ; if ( N % 3 == 1 ) maxProduct = 2 * 2 * power ( 3 , N / 3 - 1 ) ; return maxProduct ; if ( N % 3 == 2 ) maxProduct = 2 * power ( 3 , N / 3 ) ; return maxProduct ; } public static void main ( String [ ] args ) { int maxProduct = breakInteger ( 10 ) ; System . out . println ( maxProduct ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { if ( dp [ i ] == i ) { for ( int k = j ; k <= n ; k ++ ) { dp [ k ] = dp [ i ] + a [ j ] ; } } } } System . out . println ( dp [ n ] ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String s1 = s . substring ( 4 , s . length ( ) - 1 ) ; String s2 = s . substring ( 0 , 4 ) ; String s3 = s . substring ( 4 , s . length ( ) ) ; String s4 = s . substring ( 0 , 4 ) ; String s5 = s . substring ( 4 , s . length ( ) ) ; String s6 = s . substring ( 0 , 4 ) ; String s7 = s . substring ( 0 , 4 ) ; String s8 = s . substring ( 4 , s . length ( ) ) ; System . out . println ( s1 + s2 + s3 + s4 + s5 + s6 ) ; } }
import java . util . * ; public class GFG { static int MAX_CHAR = 26 ; static void firstnonrepeating ( String str ) { Queue < Character > q = new LinkedList < > ( ) ; int [ ] charCount = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { q . add ( str . charAt ( i ) ) ; charCount [ str . charAt ( i ) - ' a ' ] ++ ; while ( ! q . isEmpty ( ) ) { if ( charCount [ q . peek ( ) - ' a ' ] > 1 ) { q . poll ( ) ; } else { System . out . print ( q . peek ( ) ) ; break ; } } if ( q . isEmpty ( ) ) { System . out . print ( - 1 ) ; } } System . out . println ( ) ; } public static void main ( String [ ] args ) { String str = " aabc " ; firstnonrepeating ( str ) ; } }
import java . util . * ; import java . io . * ; public class Main { static int n ; static int [ ] [ ] graph ; static int [ ] color ; static boolean [ ] visited ; static int dfs ( int v ) { visited [ v ] = true ; int ret = 0 ; for ( int i = 0 ; i < graph [ v ] . length ; i ++ ) { if ( visited [ i ] == false ) { ret += dfs ( i ) ; } } return ret ; } static void dfs ( int v ) { visited [ v ] = true ; int ret = 0 ; for ( int i = 0 ; i < graph [ v ] . length ; i ++ ) { if ( visited [ i ] == false ) { ret += dfs ( i ) ; } } System . out . println ( ret ) ; } public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; n = sc . nextInt ( ) ; graph = new int [ n ] [ n ] ; color = new int [ n ] ; visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { graph [ i ] [ i ] = sc . nextInt ( ) ; } visited [ 0 ] = true ; dfs ( 0 ) ; System . out . println ( dfs ( 0 ) ) ; } }
import java . util . Arrays ; public class GFG { static int solve ( int n , int m , int obstacles , int rangee [ ] ) { int val = Math . min ( n , m ) ; int rangee [ ] = new int [ rangee . length ] ; for ( int i = rangee . length - 1 ; i >= 0 ; i -- ) { rangee [ i ] = 2 * rangee [ i ] ; val -= rangee [ i ] ; if ( val <= 0 ) return c ; else c ++ ; } if ( val > 0 ) return - 1 ; return c ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 , obstacles = 3 ; int rangee [ ] = { 1 , 1.25 , 1.15 } ; System . out . println ( solve ( n , m , obstacles , rangee ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int u = Integer . parseInt ( s . substring ( 0 , 2 ) ) ; int l = Integer . parseInt ( s . substring ( 2 , 3 ) ) ; int m = Integer . parseInt ( s . substring ( 3 , 4 ) ) ; int l2 = Integer . parseInt ( s . substring ( 4 , 5 ) ) ; if ( s . charAt ( 0 ) == ' + ' ) { u += l ; } else { l2 *= l ; } if ( u == l && l2 == t ) { System . out . println ( " U " ) ; } else if ( u == l2 && l2 == t ) { System . out . println ( " M " ) ; } else if ( l2 == m && l1 == t ) { System . out . println ( " L " ) ; } else { System . out . println ( " I " ) ; } } }
import java . util . * ; public class GFG { static class MinStack { Stack < Integer > stack = new Stack < Integer > ( ) ; int min = Integer . MAX_VALUE ; public MinStack ( ) { stack = new Stack < Integer > ( ) ; min = Integer . MAX_VALUE ; } public void push ( int x ) { stack . push ( x ) ; if ( stack . size ( ) == 0 ) { min = Integer . MAX_VALUE ; stack . push ( x ) ; return ; } if ( x <= min ) { min = Integer . MAX_VALUE ; stack . push ( x ) ; return ; } if ( x <= min ) { min = Integer . MAX_VALUE ; stack . push ( x ) ; return ; } min = min . min ( min ) ; stack . push ( min ) ; } public int pop ( ) { if ( stack . size ( ) == 0 ) { return Integer . MAX_VALUE ; } return stack . pop ( ) ; } public int top ( ) { if ( stack . size ( ) == 0 ) { return stack . peek ( ) ; } return stack . peek ( ) ; } public int getMin ( ) { if ( min != Integer . MAX_VALUE ) { return min ; } return stack . peek ( ) ; } } public static void main ( String [ ] args ) { MinStack m = new MinStack ( ) ; m . push ( - 2 ) ; m . push ( 0 ) ; m . push ( - 3 ) ; System . out . println ( m . getMin ( ) ) ; m . pop ( ) ; System . out . println ( m . top ( ) ) ; System . out . println ( m . getMin ( ) ) ; } }
import java . util . * ; public class GFG { static String [ ] ten = { " " , " one " , " two " , " three " , " four " , " five " , " six " , " seven " , " eight " , " nine " , " ten " , " eleven " , " twelve " , " thirteen " , " fourteen " , " fifteen " , " sixteen " , " seventeen " , " eighteen " , " nineteen " } ; static String [ ] ten = { " " , " " , " twenty " , " thirty " , " forty " , " fifty " , " sixty " , " seventy " , " eighty " , " ninety " } ; static String numToWords ( int n , String s ) { String str = " " ; if ( n > 19 ) str += ten [ n / 10 ] + one [ n % 10 ] ; else str += one [ n ] ; if ( n > 100 && n % 100 != 0 ) str += s ; return str ; } static String convertToWords ( int n ) { String out = " " ; out += numToWords ( n / 10000000 , " crore " ) ; out += numToWords ( ( n / 100000 ) % 100 , " lakh " ) ; out += numToWords ( ( n / 1000 ) % 100 , " thousand " ) ; out += numToWords ( ( n / 100 ) % 10 , " hundred " ) ; if ( n > 100 && n % 100 != 0 ) out += " and " ; out += numToWords ( n % 100 ) ; return out ; } public static void main ( String [ ] args ) { int n = 438237764 ; System . out . println ( convertToWords ( n ) ) ; } }
public class GFG { static int flipSign ( int a ) { int neg = 0 ; int tmp = a < 0 ? 1 : - 1 ; while ( a != 0 ) { neg += tmp ; a += tmp ; } return neg ; } static boolean areDifferentSign ( int a , int b ) { return ( ( a < 0 && b > 0 ) || ( a > 0 && b < 0 ) ) ; } static int sub ( int a , int b ) { return a + flipSign ( b ) ; } static int mul ( int a , int b ) { if ( a < b ) return mul ( b , a ) ; int sum = 0 ; for ( int i = Math . abs ( b ) ; i >= 0 ; i -- ) { sum += a ; } if ( b < 0 ) sum = flipSign ( sum ) ; return sum ; } static int division ( int a , int b ) { int quotient = 0 ; int divisor = flipSign ( b ) ; for ( int dividend = Math . abs ( a ) ; dividend <= Math . abs ( b ) + divisor ; dividend += divisor ) { quotient ++ ; } if ( areDifferentSign ( a , b ) ) quotient = flipSign ( quotient ) ; return quotient ; } public static void main ( String [ ] args ) { int a = 8 , b = 2 ; if ( b > 0 ) System . out . println ( " Division is " + division ( a , b ) ) ; else System . out . println ( " Exception : - Divide by 0" ) ; } }
public class GFG { static int factorial ( int n ) { int i = n ; int fact = 1 ; while ( n / i != n ) { fact = fact * i ; i -- ; } return fact ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial of " + num + " is " + factorial ( num ) ) ; } }
public class GFG { static int CntDivbyX ( int arr [ ] , int n , int x ) { int number = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { number = number * 2 + arr [ i ] ; if ( ( number % x == 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 1 , 0 , 1 , 1 , 0 } ; int n = arr . length ; int x = 2 ; System . out . println ( CntDivbyX ( arr , n , x ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; while ( arr [ i ] > 0 ) { count ++ ; arr [ i ] -- ; } if ( map . containsKey ( count ) ) { int val = map . get ( count ) ; map . put ( count , val + 1 ) ; } else { map . put ( count , 1 ) ; } } long ans = 0 ; for ( int i : map . values ( ) ) { ans += i * ( i - 1 ) / 2 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int min_noOf_operation ( int arr [ ] , int n , int k ) { int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int noOfSubtraction = 0 ; if ( arr [ i ] > arr [ i - 1 ] ) { noOfSubtraction = ( arr [ i ] - arr [ i - 1 ] ) / k ; if ( ( arr [ i ] - arr [ i - 1 ] ) % k != 0 ) noOfSubtraction ++ ; arr [ i ] = arr [ i ] - k * noOfSubtraction ; } res += noOfSubtraction ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 } ; int N = arr . length ; int k = 5 ; System . out . println ( min_noOf_operation ( arr , N , k ) ) ; } }
public class GFG { static int CountSubSet ( int arr [ ] , int n , int X ) { int N = ( int ) Math . pow ( 2 , n ) ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i & ( 1 << j ) == X ) { if ( arr [ j ] == X ) count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 6 , 7 } ; int X = 5 ; int n = arr . length ; System . out . println ( CountSubSet ( arr , n , X ) ) ; } }
import java . util . * ; public class GFG { static int n = 5 ; static int FindMaxProduct ( int arr [ ] [ ] , int n ) { int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( j - 3 ) >= 0 ) { int result = arr [ i ] [ j ] * arr [ i ] [ j - 1 ] * arr [ i ] [ j - 2 ] * arr [ i ] [ j - 3 ] ; if ( max < result ) max = result ; } if ( ( i - 3 ) >= 0 ) { int result = arr [ i ] [ j ] * arr [ i - 1 ] [ j ] * arr [ i - 2 ] [ j ] * arr [ i - 3 ] [ j ] ; if ( max < result ) max = result ; } if ( ( i - 3 ) >= 0 && ( j - 3 ) >= 0 ) { int result = arr [ i ] [ j ] * arr [ i - 1 ] [ j - 1 ] * arr [ i - 2 ] [ j - 2 ] * arr [ i - 3 ] [ j - 3 ] ; if ( max < result ) max = result ; } if ( ( i - 3 ) >= 0 && ( j - 1 ) <= 0 ) { int result = arr [ i ] [ j ] * arr [ i - 1 ] [ j + 1 ] * arr [ i - 2 ] [ j + 2 ] * arr [ i - 3 ] [ j + 3 ] ; if ( max < result ) max = result ; } } } return max ; } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 1 , 2 , 3 , 4 , 5 } , { 6 , 7 , 8 , 9 , 1 } , { 2 , 3 , 4 , 5 , 6 } , { 7 , 8 , 9 , 1 , 0 } , { 9 , 6 , 4 , 2 , 3 } , { 9 , 6 , 4 , 2 , 3 } } ; System . out . println ( FindMaxProduct ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 50002 ; static ArrayList < Integer > primes = new ArrayList < Integer > ( ) ; static void sieve ( ) { boolean [ ] isPrime = new boolean [ MAX ] ; for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( isPrime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) isPrime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( isPrime [ p ] ) primes . add ( p ) ; } } static int power ( int x , int y ) { int count = 0 ; int z = y ; while ( x >= z ) { count += ( x / z ) ; z *= y ; } return count ; } static int modMult ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) res = ( res + a ) % mod ; a = ( a * 2 ) % mod ; b /= 2 ; } return res % mod ; } static int countWays ( int n , int m ) { int ans = 1 ; for ( int i = 1 ; i < primes . size ( ) ; i ++ ) { int powers = power ( n , primes . get ( i ) ) ; if ( powers == 0 ) break ; ans = modMult ( ans , powers + 1 , m ) % m ; } if ( ( ( ans - 1 ) % m ) < 0 ) return ( ans - 1 + m ) % m ; else return ( ans - 1 ) % m ; } public static void main ( String [ ] args ) { sieve ( ) ; int n = 4 ; int m = 7 ; System . out . println ( countWays ( n , m ) ) ; } }
public class GFG { static int smallestIndexsum ( int arr [ ] , int n ) { int i = n - 1 ; while ( i >= 0 && arr [ i ] % 2 == 1 ) i -- ; int sum = 0 ; for ( int j = 0 ; j <= i ; j ++ ) sum += arr [ j ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 6 , 3 , 3 } ; int n = arr . length ; System . out . println ( smallestIndexsum ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; String s = in . next ( ) ; String [ ] ss = s . split ( " : " ) ; int y1 = Integer . parseInt ( ss [ 0 ] ) ; int m1 = Integer . parseInt ( ss [ 1 ] ) ; int d1 = Integer . parseInt ( ss [ 2 ] ) ; String s2 = in . next ( ) ; int y2 = Integer . parseInt ( ss [ 3 ] ) ; int m2 = Integer . parseInt ( ss [ 4 ] ) ; int d2 = Integer . parseInt ( ss [ 5 ] ) ; int ans = Math . abs ( y2 - y1 ) ; pw . println ( ans ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' Q ' ) { count ++ ; } else if ( s . charAt ( i ) == ' A ' ) { count = ( count + 1 ) * ( count - 1 ) ; } } pw . println ( count ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; int sum = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( sum >= k ) { out . println ( i ) ; return ; } min = Math . min ( min , sum - a [ i ] ) ; } out . println ( min ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = s / n ; if ( s % n == 0 ) { ans ++ ; } System . out . println ( ans + 1 ) ; } }
import java . util . * ; public class GFG { static void multiply ( Vector < Integer > v , int x ) { int carry = 0 ; int size = v . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { int res = carry + v . get ( i ) * x ; v . set ( i , res % 10 ) ; carry = res / 10 ; } while ( carry != 0 ) { v . add ( carry % 10 ) ; carry /= 10 ; } } static int findSumOfDigits ( int n ) { Vector < Integer > v = new Vector < Integer > ( ) ; v . add ( 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) { multiply ( v , i ) ; } int sum = 0 ; int size = v . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { sum += v . get ( i ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 1000 ; System . out . println ( findSumOfDigits ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ i ] = sc . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] [ i ] == ' R ' ) { cnt ++ ; } else if ( arr [ i ] [ i ] == ' L ' ) { cnt ++ ; } else if ( arr [ i ] [ i ] == ' U ' ) { cnt ++ ; } else if ( arr [ i ] [ i ] == ' L ' ) { cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = i + 1 ; } while ( m -- > 0 ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int now = arr [ l ] ; int ans = arr [ l ] ; while ( now <= r ) { int next = arr [ now ] ; if ( ans == arr [ now ] ) { ans = now ; } else if ( ans == arr [ now ] ) { now ++ ; ans = now ; } else if ( now == x ) { now ++ ; ans = now ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int max = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { ans [ i ] = Math . max ( max , arr [ i ] - arr [ i + 1 ] + 1 ) ; max = Math . max ( max , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " " ) ; } } }
import java . io . * ; public class GFG { static int pell ( int n ) { if ( n <= 2 ) return n ; return ( 2 * pell ( n - 1 ) + pell ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pell ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = 1 ; int b = n * n ; while ( a <= b ) { System . out . println ( a + " " + b ) ; a ++ ; b -- ; } } }
import java . util . * ; public class GFG { static int binary_search ( int arr [ ] , int low , int high , int ele ) { while ( low < high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == ele ) return mid ; else if ( arr [ mid ] > ele ) high = mid ; else low = mid + 1 ; } return - 1 ; } static void printSmall ( int arr [ ] , int asize , int n ) { int copy_arr [ ] = new int [ asize ] ; for ( int i = 0 ; i < asize ; i ++ ) copy_arr [ i ] = arr [ i ] ; Arrays . sort ( copy_arr ) ; for ( int i = 0 ; i < asize ; i ++ ) { if ( binary_search ( copy_arr , low = 0 , high = n , ele = arr [ i ] ) > - 1 ) System . out . print ( arr [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int asize = arr . length ; int n = 5 ; printSmall ( arr , asize , n ) ; } }
public class GFG { static int countNumbers ( int n ) { int k = 0 , count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) count += ( int ) Math . pow ( 2 , k ) ; k ++ ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( countNumbers ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int R = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < B ; i ++ ) { int a = sc . nextInt ( ) ; if ( a < min ) { min = a ; } } int max = Integer . MIN_VALUE ; for ( int i = B ; i < B ; i ++ ) { max = Math . max ( max , R / a ) ; } System . out . println ( R + ( max - min ) * min ) ; } }
import java . util . * ; public class GFG { static int maximum , x , ans = Integer . MIN_VALUE ; static int [ ] graph = new int [ 100 ] ; static int [ ] weight = new int [ 100 ] ; static void dfs ( int node , int parent ) { int a = Integer . bitCount ( weight [ node ] + x ) ; if ( maximum < a ) { maximum = a ; ans = node ; } else if ( maximum == a ) { ans = Math . min ( ans , node ) ; } for ( int to : graph [ node ] ) { if ( to == parent ) continue ; dfs ( to , node ) ; } } public static void main ( String [ ] args ) { x = 15 ; weight [ 1 ] = 5 ; weight [ 2 ] = 10 ; weight [ 3 ] = 11 ; weight [ 4 ] = 8 ; weight [ 5 ] = 6 ; graph [ 1 ] . add ( 2 ) ; graph [ 2 ] . add ( 3 ) ; graph [ 2 ] . add ( 4 ) ; graph [ 1 ] . add ( 5 ) ; dfs ( 1 , 1 ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static final int MAX = 26 ; static void updateFreq ( String str , int freq [ ] ) { int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } } static int maxCount ( String str , int patt ) { int strFreq [ ] = new int [ MAX ] ; updateFreq ( str , strFreq ) ; int pattFreq [ ] = new int [ MAX ] ; updateFreq ( patt , pattFreq ) ; int ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( pattFreq [ i ] == 0 ) continue ; ans = Math . min ( ans , strFreq [ i ] / pattFreq [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; String patt = " geeks " ; System . out . println ( maxCount ( str , patt ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } System . out . println ( a [ 0 ] + b [ 0 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int rq = sc . nextInt ( ) ; int qq = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] wq = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { wq [ i ] = wq [ i ] + sc . nextInt ( ) ; } int [ ] wr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { wr [ i ] = wq [ i ] + wq [ i ] * q ; } int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = wr [ i ] + wq [ i ] * q ; } int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = wq [ i ] + wq [ n - i - 1 ] ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int minCost = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { int cost = w [ j ] + wr [ i ] + wq [ j ] + wq [ j ] + wr [ i ] ; if ( min > cost ) { min = cost ; minCost = cost ; } } w [ i ] = w [ n - i - 1 ] ; } System . out . println ( min ) ; } }
import java . io . * ; public class GFG { static double wastedWater ( int V , int M , int N ) { int amt_per_min = M - N ; int time_to_fill = V / amt_per_min ; double wasted_amt = N * time_to_fill ; return wasted_amt ; } public static void main ( String [ ] args ) { int V = 700 , M = 10 , N = 3 ; System . out . println ( wastedWater ( V , M , N ) ) ; V = 1000 ; M = 100 ; N = 50 ; System . out . println ( wastedWater ( V , M , N ) ) ; } }
public class GFG { static int maxSubStr ( String str , int n ) { int count0 = 0 , count1 = 0 , cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '0' ) count0 ++ ; else count1 ++ ; if ( count0 == count1 ) cnt ++ ; } if ( count0 != count1 ) return - 1 ; return cnt ; } public static void main ( String [ ] args ) { String str = "0100110101" ; int n = str . length ( ) ; System . out . println ( maxSubStr ( str , n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int min = Math . min ( a , b ) ; int max = Math . max ( a , b ) ; System . out . println ( min + " " + max ) ; } }
public class GFG { static int findS ( int s ) { int _sum = 0 , n = 1 ; while ( _sum < s ) { _sum += n ; n ++ ; } n -- ; if ( _sum == s ) return n ; return - 1 ; } public static void main ( String [ ] args ) { int s = 15 ; int n = findS ( s ) ; if ( n == - 1 ) System . out . println ( " - 1" ) ; else System . out . println ( n ) ; } }
import java . util . * ; public class GFG { static int maximumAbsolute ( int arr [ ] , int n ) { int mn = Integer . MAX_VALUE , mx = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arr [ i ] == - 1 && arr [ i - 1 ] != - 1 ) { mn = Math . min ( mn , arr [ i - 1 ] ) ; mx = Math . max ( mx , arr [ i - 1 ] ) ; } if ( i < n - 1 && arr [ i ] == - 1 && arr [ i + 1 ] != - 1 ) { mn = Math . min ( mn , arr [ i + 1 ] ) ; mx = Math . max ( mx , arr [ i + 1 ] ) ; } } int common_integer = ( mn + mx ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == - 1 ) arr [ i ] = common_integer ; } int max_diff = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; if ( diff > max_diff ) max_diff = diff ; } return max_diff ; } public static void main ( String [ ] args ) { int arr [ ] = { - 1 , - 1 , 11 , - 1 , 3 , - 1 } ; int n = arr . length ; System . out . println ( maximumAbsolute ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int MOD = 1000000007 ; static int countStrings ( int N ) { int dp [ ] [ ] = new int [ N + 1 ] [ 3 ] ; dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = 1 ; dp [ 1 ] [ 2 ] = 0 ; for ( int i = 2 ; i <= N ; i ++ ) { dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] % MOD ; dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] % MOD ; } int ans = ( dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ) % MOD ; return ans ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( countStrings ( N ) ) ; } }
import java . util . * ; public class GFG { static int longest_subseq ( int n , int k , String s ) { int dp [ ] = new int [ n ] ; int max_length [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr = s . charAt ( i ) - ' a ' ; int lower = Math . max ( 0 , curr - k ) ; int upper = Math . min ( 25 , curr + k ) ; for ( int j = lower ; j <= upper ; j ++ ) { dp [ i ] = Math . max ( dp [ i ] , max_length [ j ] + 1 ) ; } max_length [ curr ] = Math . max ( dp [ i ] , max_length [ curr ] ) ; } return Math . max ( dp [ 0 ] , max_length [ s . length ( ) ] ) ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; int n = s . length ( ) ; int k = 3 ; System . out . println ( longest_subseq ( n , k , s ) ) ; } }
public class GFG { static int longestFibonacciSubarray ( int n , int a [ ] ) { if ( n <= 2 ) return n ; int len = 2 , mx = Integer . MIN_VALUE ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) len ++ ; else len = 2 ; mx = Math . max ( mx , len ) ; } return mx ; } public static void main ( String [ ] args ) { int n = 5 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; System . out . println ( longestFibonacciSubarray ( n , a ) ) ; } }
import java . util . * ; public class GFG { static int minimumSubarrays ( int ar [ ] , int n ) { HashSet < Integer > se = new HashSet < > ( ) ; int cnt = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( se . contains ( ar [ i ] ) ) { se . add ( ar [ i ] ) ; } else { cnt ++ ; se . clear ( ) ; se . add ( ar [ i ] ) ; } } return cnt ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 1 , 3 , 4 , 2 , 4 , 4 , 4 } ; int n = ar . length ; System . out . println ( minimumSubarrays ( ar , n ) ) ; } }
import java . util . * ; public class GFG { static boolean check ( int s ) { int freq [ ] = new int [ 10 ] ; while ( s != 0 ) { int r = s % 10 ; s = s / 10 ; freq [ r ] ++ ; } int xor = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) xor ^= freq [ i ] ; if ( xor == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int s = 122233 ; if ( check ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; sum2 += arr [ i ] ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum2 / a ; ans [ i ] = sum ; sum2 = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { sum = sum2 - ans [ i ] ; System . out . print ( ans [ i ] + " " ) ; } } }
public class GFG { static int MAXN = 1000005 ; static int even [ ] = new int [ MAXN ] ; static int odd [ ] = new int [ MAXN ] ; static void precompute ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) odd [ i ] = 1 ; if ( arr [ i ] % 2 == 0 ) even [ i ] = 1 ; } for ( int i = 1 ; i < n ; i ++ ) { even [ i ] = even [ i ] + even [ i - 1 ] ; odd [ i ] = odd [ i ] + odd [ i - 1 ] ; } } static boolean isOdd ( int L , int R ) { int cnt = odd [ R ] ; if ( L > 0 ) cnt -= odd [ L - 1 ] ; if ( cnt == R - L + 1 ) return true ; return false ; } static void performQueries ( int a [ ] , int n , int q [ ] [ ] , int m ) { precompute ( a , n ) ; for ( int i = 0 ; i < m ; i ++ ) { int L = q [ i ] [ 0 ] ; int R = q [ i ] [ 1 ] ; if ( isOdd ( L , R ) ) System . out . println ( " Odd " ) ; else System . out . println ( " Even " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 2 , 1 , 5 , 7 , 6 , 8 , 9 } ; int n = a . length ; int q [ ] [ ] = { { 0 , 2 } , { 1 , 2 } , { 2 , 3 } , { 3 , 6 } } ; int m = q . length ; performQueries ( a , n , q , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 3 == 0 || n % 5 == 0 ) { System . out . println ( - 1 ) ; continue ; } for ( int i = 0 ; i < n / 3 ; i ++ ) { for ( int j = 0 ; j < n / 5 ; j ++ ) { if ( i % 7 == 0 || i % 5 == 0 || j % 7 == 0 ) { System . out . println ( i + " " + j + " " + ( n / 3 ) ) ; continue ; } } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int o = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int hh = sc . nextInt ( ) ; int count = 0 ; if ( h * 60 + m > 1440 ) { count = 0 ; } else { h += h * 60 ; m += m ; if ( h * 60 + m > 1440 ) { count = 0 ; } } if ( o > 0 && p > 0 ) { count = count + o ; } else { count = count + p ; } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , c = 3 ; for ( int i = 0 ; i < n ; i ++ ) { int x = in . nextInt ( ) ; if ( c == x ) { pw . println ( " NO " ) ; return ; } c ^= x ; } pw . println ( " YES " ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static int times ( int steps [ ] , int n ) { int current_level = 0 , previous_level = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { previous_level = current_level ; current_level = current_level + steps [ i ] ; if ( ( previous_level < 0 && current_level >= 0 ) || ( previous_level > 0 && current_level <= 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int steps [ ] = { 1 , - 1 , 0 , 0 , 1 , 1 , - 3 , 2 } ; int n = steps . length ; System . out . println ( times ( steps , n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { int m = sc . nextInt ( ) - 1 ; int d = sc . nextInt ( ) - 1 ; int v = sc . nextInt ( ) - 1 ; int s = sc . nextInt ( ) ; dp [ i ] [ 0 ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( dp [ i ] [ j ] > 0 ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , s - dp [ i ] [ j ] ) ; } } } println ( dp [ 0 ] [ 0 ] ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1000 ) { count ++ ; } } if ( count >= 1000 ) { System . out . println ( " Um _ nik " ) ; } else { System . out . println ( " Petr " ) ; } } }
public class GFG { static String smallest ( String s ) { int len = s . length ( ) ; String ans = " " ; for ( int i = 0 ; i < len ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i + 1 ) ) { for ( int j = 0 ; j < len ; j ++ ) { if ( i != j ) ans += s . charAt ( j ) ; } return ans ; } } ans = s . substring ( 0 , len - 1 ) ; return ans ; } public static void main ( String [ ] args ) { String s = " abcda " ; System . out . println ( smallest ( s ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int [ ] a = { 2 , 4 , 6 , 9 , 11 } ; int [ ] b = { 1 , 4 , 6 , 9 , 11 } ; int [ ] c = { 2 , 4 , 6 , 9 , 11 } ; int x1 = a [ 0 ] ; int y1 = b [ 0 ] ; int x2 = c [ 1 ] ; int y2 = c [ 2 ] ; if ( x1 == x2 && y1 == y2 ) { System . out . println ( " Yes " ) ; } else if ( x1 == x2 && y1 == y2 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static int FindMinNumber ( int arr [ ] , int n , int k ) { int i = 0 , j = 0 , min_num = Integer . MAX_VALUE ; boolean found = false ; int sum = 0 ; while ( i < n ) { sum = sum + arr [ i ] ; if ( sum == k ) { min_num = Math . min ( min_num , ( n - ( i + 1 ) ) + j ) ; found = true ; } else if ( sum > k ) { while ( sum > k ) { sum = sum - arr [ j ] ; j ++ ; } if ( sum == k ) { min_num = Math . min ( min_num , ( n - ( i + 1 ) ) + j ) ; found = true ; } } i ++ ; } if ( found ) return min_num ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 5 , 6 } ; int n = arr . length ; int k = 5 ; System . out . println ( FindMinNumber ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static void nthPalindrome ( int n , int k ) { int temp ; if ( k % 2 == 1 ) temp = k / 2 ; else temp = k / 2 - 1 ; int palindrome = ( int ) Math . pow ( 10 , temp ) ; palindrome = palindrome + n - 1 ; System . out . print ( palindrome + " " ) ; if ( k % 1 == 1 ) palindrome = palindrome / 10 ; while ( palindrome > 0 ) { System . out . print ( palindrome % 10 + " " ) ; palindrome = palindrome / 10 ; } } public static void main ( String [ ] args ) { int n = 6 , k = 5 ; System . out . print ( n + " th palindrome of " + k + " digit = " ) ; nthPalindrome ( n , k ) ; System . out . println ( ) ; n = 10 ; k = 6 ; System . out . print ( n + " th palindrome of " + k + " digit = " ) ; nthPalindrome ( n , k ) ; System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { y [ i ] = sc . nextInt ( ) ; } int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = y [ i ] + y [ i ] ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += y [ j ] ; if ( i == 0 ) { sum += y [ j ] ; } else { sum += y [ j ] - y [ i - 1 ] ; } } min = Math . min ( min , sum ) ; } System . out . println ( min ) ; } }
import java . util . Arrays ; public class GFG { static int MAX = 10000 ; static int hashTable [ ] = new int [ MAX ] ; static int minOperations ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { hashTable [ arr [ i ] ] ++ ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( hashTable [ arr [ i ] ] > 0 ) { for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] % arr [ i ] == 0 ) { hashTable [ arr [ j ] ] = 0 ; } } res ++ ; } } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 6 , 2 , 8 , 7 , 21 , 24 , 49 , 44 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int p1 = sc . nextInt ( ) ; int p2 = sc . nextInt ( ) ; int p3 = sc . nextInt ( ) ; int p4 = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int min = Math . min ( p1 , p2 ) ; int max = Math . max ( p1 , p2 ) ; if ( a == b ) { min = Math . min ( p1 , p2 ) ; max = Math . max ( max , p3 ) ; } if ( a == b ) { min = Math . min ( p1 , p2 ) ; max = Math . max ( max , p3 ) ; } if ( min == max ) { System . out . println ( 0 ) ; } else if ( a > b ) { System . out . println ( b - a + 1 ) ; } else { System . out . println ( b - a + 1 ) ; } } }
public final class p030 { public static void main ( String [ ] args ) { System . out . println ( new p030 ( ) . run ( ) ) ; } public String run ( ) { long numer = 1 , denom = 1 ; for ( int d = 10 ; d <= 100 ; d ++ ) { for ( int n = 10 ; n <= d ; n ++ ) { int n0 = n % 10 ; int n1 = n / 10 ; int d0 = d % 10 ; int d1 = d / 10 ; if ( n1 == d0 && n0 * d == n * d1 ) || ( n0 == d1 && n1 * d == n * d0 ) { numer *= n ; denom *= d ; } } } return denom / fractions . gcd ( numer , denom ) ; } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int countOfOddPascal ( int n ) { int c = countSetBits ( n ) ; return ( int ) Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddPascal ( n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long ans = Math . max ( b * x , Math . max ( a * y , b * ( x - 1 ) ) ) ; ans = Math . max ( ans , Math . max ( a * ( y - 1 ) , b * ( x - 1 ) ) ) ; ans = Math . max ( ans , a * ( y - 1 ) ) ; System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int minSwaps ( int arr [ ] ) { int n = arr . length ; int arrPos [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arrPos [ i ] = arr [ i ] ; Arrays . sort ( arrPos ) ; boolean vis [ ] = new boolean [ n ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] || arrPos [ i ] == i ) continue ; int cycle_size = 0 ; for ( int j = i ; j < n ; j ++ ) { vis [ j ] = true ; } if ( vis [ j ] ) { ans += ( cycle_size - 1 ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 4 , 3 , 2 } ; System . out . println ( minSwaps ( arr ) ) ; } }
import java . util . * ; public class GFG { static int N = 1000005 ; static boolean prime [ ] = new boolean [ N ] ; static void sieve ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int i = 2 ; i < N ; i ++ ) { if ( prime [ i ] == true ) { for ( int j = i * 2 ; j < N ; j += i ) prime [ j ] = false ; } } } static int sumTruncatablePrimes ( int n ) { int sum = 0 ; for ( int i = 2 ; i < n ; i ++ ) { int num = i ; boolean flag = true ; while ( num > 0 ) { if ( prime [ num ] == false ) { flag = false ; break ; } num /= 10 ; } num = i ; int power = 10 ; while ( num / power > 0 ) { if ( prime [ num % power ] == false ) { flag = false ; break ; } power *= 10 ; } if ( flag == true ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 25 ; sieve ( ) ; System . out . println ( sumTruncatablePrimes ( n ) ) ; } }
public class GFG { static void findWeights ( int X ) { int sum = 0 , power = 0 ; while ( sum < X ) { sum = ( int ) Math . pow ( 3 , power + 1 ) - 1 ; sum /= 2 ; power ++ ; } int ans = 1 ; for ( int i = 1 ; i <= power ; i ++ ) { System . out . print ( ans + " " ) ; ans = ans * 3 ; } } public static void main ( String [ ] args ) { int X = 2 ; findWeights ( X ) ; } }
import java . util . * ; public class GFG { static Vector < Integer > addToArrayForm ( int A [ ] , int K ) { Vector < Integer > v = new Vector < Integer > ( ) ; Vector < Integer > ans = new Vector < Integer > ( ) ; int rem = 0 , i = 0 ; for ( i = A . length - 1 ; i >= 0 ; i -- ) { int my = A [ i ] + ( K % 10 ) + rem ; if ( my > 9 ) { rem = 1 ; v . add ( my % 10 ) ; } else { v . add ( my ) ; rem = 0 ; } K = K / 10 ; } while ( K > 0 ) { int my = ( K % 10 ) + rem ; v . add ( my % 10 ) ; if ( my / 10 > 0 ) rem = 1 ; else rem = 0 ; K = K / 10 ; } if ( rem > 0 ) v . add ( rem ) ; for ( int i = v . size ( ) - 1 ; i >= 0 ; i -- ) ans . add ( v . get ( i ) ) ; return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 7 , 4 } ; int K = 181 ; Vector < Integer > ans = addToArrayForm ( A , K ) ; for ( int i = 0 ; i < ans . size ( ) ; i ++ ) System . out . print ( ans . get ( i ) + " " ) ; } }
import java . util . * ; public class GFG { static void printPaths ( char [ ] [ ] inputchar , int R , int C ) { for ( int i = 0 ; i < C ; i ++ ) { dfs ( inputchar , " " , 0 , i , R , C ) ; System . out . println ( ) ; } } static void dfs ( char [ ] [ ] inputchar , int res , int i , int j , int R , int C ) { if ( i == R ) { System . out . print ( res + " " ) ; return ; } res = res + inputchar [ i ] [ j ] ; for ( int k = 0 ; k < C ; k ++ ) { dfs ( inputchar , res , i + 1 , k , R , C ) ; if ( i + 1 == R ) { break ; } } } public static void main ( String [ ] args ) { char [ ] [ ] inputchar = { { ' a ' , ' b ' } , { ' d ' , ' e ' } } ; int R = inputchar . length ; int C = inputchar [ 0 ] . length ; printPaths ( inputchar , R , C ) ; } }
import java . util . * ; import java . io . * ; public class codeforces { static int [ ] [ ] rooms ; public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringBuilder sb = new StringBuilder ( ) ; int n = Integer . parseInt ( br . readLine ( ) ) ; String s = br . readLine ( ) ; rooms = new int [ 10 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { rooms [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' L ' ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( rooms [ j ] [ i ] == 0 ) { rooms [ j ] [ i ] = 1 ; } } } else if ( s . charAt ( i ) == ' R ' ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( rooms [ j ] [ i ] == 0 ) { rooms [ j ] [ i ] = 1 ; } } } else { for ( int j = 0 ; j < 10 ; j ++ ) { if ( rooms [ j ] [ i ] == 0 ) { rooms [ j ] [ i ] = 1 ; } } } } for ( int i = 0 ; i < 10 ; i ++ ) { sb . append ( rooms [ i ] [ 0 ] ) . append ( " " ) ; } sb . append ( rooms [ 10 ] [ 1 ] ) . append ( " \n " ) ; System . out . print ( sb ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = 0 ; if ( a > b ) { if ( a < b ) { if ( c == d ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { if ( a > b ) { if ( c == d ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } } else { if ( a > b ) { if ( c == d ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { if ( b > a ) { if ( c == d ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { if ( a < b ) { if ( c == d ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { System . out . println ( " NO " ) ; } } } } } }
public class GFG { static void precisionCompute ( int x , int y , int n ) { if ( y == 0 ) { System . out . println ( " Infinite " ) ; return ; } if ( x == 0 ) { System . out . println ( 0 ) ; return ; } if ( n <= 0 ) { System . out . println ( x / y ) ; return ; } if ( ( x > 0 && y < 0 ) || ( x < 0 && y > 0 ) ) { System . out . print ( " - " ) ; if ( x <= 0 ) x = - x ; if ( y <= 0 ) y = - y ; } int d = x / y ; for ( int i = 0 ; i <= n ; i ++ ) { System . out . print ( d + " " ) ; x = x - ( y * d ) ; if ( x == 0 ) break ; x = x * 10 ; d = x / y ; if ( i == 0 ) System . out . print ( " . " ) ; } } public static void main ( String [ ] args ) { int x = 22 , y = 7 , n = 15 ; precisionCompute ( x , y , n ) ; System . out . println ( ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; } static int lcmOfArray ( int arr [ ] , int n ) { if ( n < 1 ) return 0 ; int lcm = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) ; return lcm ; } static int minPerfectCube ( int arr [ ] , int n ) { int lcm = lcmOfArray ( arr , n ) ; int minPerfectCube = lcm ; int cnt = 0 ; while ( lcm > 1 && lcm % 2 == 0 ) { cnt ++ ; lcm /= 2 ; } if ( cnt % 3 == 2 ) minPerfectCube *= 2 ; else if ( cnt % 3 == 1 ) minPerfectCube *= 4 ; for ( int i = 3 ; lcm > 1 ; i ++ ) { cnt = 0 ; while ( lcm % i == 0 ) { cnt ++ ; lcm /= i ; } if ( cnt % 3 == 1 ) minPerfectCube *= i * i ; else if ( cnt % 3 == 2 ) minPerfectCube *= i ; } return minPerfectCube ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 125 , 14 , 42 , 100 } ; int n = arr . length ; System . out . println ( minPerfectCube ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node left , right ; Node ( int data ) { this . data = data ; left = right = null ; } } static void printSpecificLevelOrder ( Node root ) { s . add ( root ) ; Node prnt = s . remove ( ) ; s . add ( prnt ) ; if ( prnt . right != null ) s . add ( root . right ) ; if ( prnt . left != null ) s . add ( root . left ) ; while ( s . size ( ) > 0 ) { Node first = s . remove ( ) ; s . add ( first . data ) ; Node second = s . remove ( ) ; s . add ( second . data ) ; if ( first . left != null && second . right != null && first . right != null && second . left != null ) { s . add ( first . left ) ; s . add ( second . right ) ; s . add ( first . right ) ; s . add ( second . left ) ; } } for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) System . out . print ( s . get ( i ) + " " ) ; } public static void main ( String [ ] args ) { Node root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; System . out . println ( " Specific Level Order Traversal of Binary Tree is " ) ; root . printSpecificLevelOrder ( root ) ; } }
public class GFG { static void hollowSquare ( int rows ) { for ( int i = 1 ; i <= rows ; i ++ ) { if ( i == 1 || i == rows ) { for ( int j = 1 ; j <= rows ; j ++ ) { System . out . print ( " * " ) ; } } else { for ( int j = 1 ; j <= rows ; j ++ ) { if ( j == 1 || j == rows ) { System . out . print ( " * " ) ; } else { System . out . print ( " " ) ; } } } System . out . println ( ) ; } } static void solidSquare ( int rows ) { for ( int i = 1 ; i <= rows ; i ++ ) { for ( int j = 1 ; j <= rows ; j ++ ) { System . out . print ( " * " ) ; } System . out . println ( ) ; } } static void printPattern ( int rows ) { System . out . println ( " Solid Square : " ) ; solidSquare ( rows ) ; System . out . println ( " \n Hollow Square : " ) ; hollowSquare ( rows ) ; } public static void main ( String [ ] args ) { int rows = 5 ; printPattern ( rows ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n / 4 ; i ++ ) { sb . append ( " abcd " ) ; } for ( int i = 0 ; i < n % 4 ; i ++ ) { sb . append ( " abc " ) ; } System . out . println ( sb . toString ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] t = new int [ n ] [ 2 ] ; int [ ] [ ] w = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] [ 0 ] = sc . nextInt ( ) ; t [ i ] [ 1 ] = sc . nextInt ( ) ; w [ i ] [ 0 ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j + t [ i ] [ 0 ] ] = Math . max ( dp [ i ] [ j + t [ i ] [ 0 ] ] , dp [ i ] [ j ] + w [ i ] [ 1 ] ) ; } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( dp [ i ] [ j ] > 0 && dp [ i ] [ j ] + t [ i ] [ 1 ] <= w [ i ] [ 0 ] ) { ans = i ; break ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( a <= x && x <= a + b ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int findLargest ( int arr [ ] , int n ) { int gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) gcd = __gcd ( arr [ i ] , gcd ) ; return gcd ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 6 , 9 } ; int n = arr . length ; System . out . println ( findLargest ( arr , n ) ) ; } }
public class GFG { static void findWinner ( int n ) { if ( ( n - 1 ) % 6 == 0 ) System . out . println ( " Second Player wins the game " ) ; else System . out . println ( " First Player wins the game " ) ; } public static void main ( String [ ] args ) { int n = 7 ; findWinner ( n ) ; } }
import java . util . * ; public class GFG { static class Graph { ArrayList < Integer > [ ] edge ; public Graph ( ) { edge = new ArrayList [ 4 ] ; } public Graph ( int n ) { edge = new ArrayList [ 4 ] ; } public void addEdge ( int u , int v ) { edge [ u ] = new ArrayList < Integer > ( ) ; edge [ u ] . add ( v ) ; } public void BFS ( int s ) { boolean [ ] visited = new boolean [ 4 ] ; Queue < Integer > queue = new LinkedList < Integer > ( ) ; queue . add ( s ) ; visited [ s ] = true ; while ( ! queue . isEmpty ( ) ) { int s = queue . peek ( ) ; System . out . print ( s + " " ) ; for ( int i : edge [ s ] ) { if ( ! visited [ i ] ) { queue . add ( i ) ; visited [ i ] = true ; } } } } public static void main ( String [ ] args ) { Graph g = new Graph ( ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( " Following is Breadth First Traversal " + " ( starting from vertex 2 ) " ) ; g . BFS ( 2 ) ; } }
import java . util . * ; public class GFG { static class Graph { ArrayList < Integer > [ ] edge ; public Graph ( ) { edge = new ArrayList [ 4 ] ; } public Graph ( int n ) { edge = new ArrayList [ 4 ] ; } public void addEdge ( int u , int v ) { edge [ u ] = new ArrayList < Integer > ( ) ; edge [ u ] . add ( v ) ; } public void BFS ( int s ) { boolean [ ] visited = new boolean [ 4 ] ; Queue < Integer > queue = new LinkedList < Integer > ( ) ; queue . add ( s ) ; visited [ s ] = true ; while ( ! queue . isEmpty ( ) ) { int s = queue . peek ( ) ; System . out . print ( s + " " ) ; for ( int i : edge [ s ] ) { if ( ! visited [ i ] ) { queue . add ( i ) ; visited [ i ] = true ; } } } } public static void main ( String [ ] args ) { Graph g = new Graph ( ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( " Following is Breadth First Traversal " + " ( starting from vertex 2 ) " ) ; g . BFS ( 2 ) ; } }
import java . util . * ; public class GFG { static void getElements ( int a , int arr [ ] , int n ) { int elements [ ] = new int [ n + 1 ] ; elements [ 0 ] = a ; for ( int i = 0 ; i < n ; i ++ ) elements [ i + 1 ] = arr [ i ] ^ elements [ i ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) System . out . print ( elements [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 2 , 6 , 1 } ; int n = arr . length ; int a = 5 ; getElements ( a , arr , n ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int T = in . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { int N = in . nextInt ( ) ; int R = in . nextInt ( ) ; int P = in . nextInt ( ) ; String S = in . next ( ) ; if ( P < 0 || S . length ( ) == 0 ) { pw . println ( " IMPOSSIBLE " ) ; continue ; } if ( R > 0 && P > 0 ) { pw . println ( " R " ) ; } if ( S . length ( ) > 0 && S . length ( ) > 0 ) { pw . println ( " S " ) ; } if ( R > P ) { pw . println ( " R " ) ; } if ( S . length ( ) > 1 ) { pw . println ( " S " ) ; } if ( P > 0 ) { pw . println ( " P " ) ; } if ( R > R + P ) { pw . println ( " R " ) ; } if ( S . length ( ) > 1 ) { pw . println ( " S " ) ; } if ( P > 0 ) { pw . println ( " P " ) ; } if ( S . length ( ) > 1 ) { pw . println ( " S " ) ; } if ( R > S + P ) { pw . println ( " R " ) ; } if ( S . length ( ) > 1 ) { pw . println ( " S " ) ; } } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i % 2 == 0 ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; } else { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( dp [ i ] [ n ] == 0 ) ans ++ ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void printRepeating ( int arr [ ] , int size ) { int S = 0 , P = 1 , n = size - 2 ; for ( int i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; int D = ( int ) Math . sqrt ( S * S - 4 * P ) ; int x = ( D + S ) / 2 ; int y = ( S - D ) / 2 ; System . out . println ( " The two repeating elements are : " + ( x + y ) + " & " + ( y + x ) ) ; } static int fact ( int n ) { if ( n == 0 ) return 1 ; else return ( n * fact ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; printRepeating ( arr , arr_size ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; if ( n == 0 ) return false ; int cnt = 0 ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { cnt ++ ; break ; } } out . println ( cnt ) ; return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } double [ ] [ ] dp = new double [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] != 0 ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j ] + dp [ i ] [ j ] ) ; } } } double ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = min ( ans , dp [ i ] [ n ] + dp [ i ] [ n + 1 ] ) ; } println ( ans / 2 ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { String s = sc . next ( ) ; if ( s . equals ( " # " ) ) { break ; } int l = 0 , r = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' # ' ) { l ++ ; continue ; } if ( s . charAt ( i ) == ' # ' ) { r ++ ; continue ; } if ( s . charAt ( i ) == ' # ' ) { l -- ; continue ; } if ( l > 0 && l % 12 == 0 ) { l /= 12 ; } if ( l < 0 && r % 12 == 0 ) { r /= 12 ; } } println ( " " + l ) ; } } void println ( String s ) { System . out . println ( s ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int a = 0 ; int b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' SF ' ) a ++ ; else if ( s . charAt ( i ) == ' FS ' ) b ++ ; } if ( a > b ) System . out . println ( " NO " ) ; else System . out . println ( " YES " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = arr [ 0 ] * arr [ 1 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { max = Math . max ( max , arr [ i ] * arr [ i + 1 ] ) ; } System . out . println ( max ) ; } } }
public class GFG { static int __gcd ( int x , int y ) { if ( x > y ) { int small = y ; } else { small = x ; } for ( int i = 1 ; i <= small ; i ++ ) { if ( ( x % i == 0 ) && ( y % i == 0 ) ) { gcd = i ; } } return gcd ; } static int FindLCM ( int a , int b ) { return ( a * b ) / __gcd ( a , b ) ; } static int rangeDivisor ( int m , int n , int a , int b ) { int lcm = FindLCM ( a , b ) ; int a_divisor = n / a - ( m - 1 ) / a ; int b_divisor = n / b - ( m - 1 ) / b ; int common_divisor = n / lcm - ( m - 1 ) / lcm ; int ans = a_divisor + b_divisor - common_divisor ; return ans ; } public static void main ( String [ ] args ) { int m = 3 , n = 11 , a = 2 , b = 3 ; System . out . println ( rangeDivisor ( m , n , a , b ) ) ; m = 11 ; n = 1000000 ; a = 6 ; b = 35 ; System . out . println ( rangeDivisor ( m , n , a , b ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; s = s . replaceAll ( " , " , " . ? ! " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " ! " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; s = s . replaceAll ( " [ ^ . ] " , " " ) ; System . out . println ( s ) ; } }
import java . util . * ; public class GFG { static int smallestKFreq ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { int count = mp . get ( arr [ i ] ) ; if ( count == k ) { return arr [ i ] ; } else { mp . put ( arr [ i ] , count + 1 ) ; } } else { mp . put ( arr [ i ] , 1 ) ; } } int res = Integer . MAX_VALUE ; int res1 = Integer . MAX_VALUE ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) == k ) { res = Math . min ( res , entry . getKey ( ) ) ; } } return res1 != res ? res : - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 1 , 3 , 1 } ; int k = 2 ; int n = arr . length ; System . out . println ( smallestKFreq ( arr , n , k ) ) ; } }
import java . util . * ; public class GFG { static boolean areVowelsInOrder ( String s ) { int n = s . length ( ) ; char c = ( char ) ( ' a ' + ( int ) ' e ' ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' e ' || s . charAt ( i ) == ' i ' || s . charAt ( i ) == ' o ' || s . charAt ( i ) == ' u ' ) { if ( s . charAt ( i ) < c ) return false ; else c = s . charAt ( i ) ; } } return true ; } public static void main ( String [ ] args ) { String s = " aabbbddeecc " ; if ( areVowelsInOrder ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = i + 1 ; b [ i ] = n - i ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a [ i ] = a [ i - 1 ] + b [ i ] ; } else { b [ i ] = b [ i - 1 ] + a [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a [ i ] = a [ i - 1 ] + b [ i ] ; } else { b [ i ] = b [ i - 1 ] + a [ i ] ; } } println ( a [ 0 ] + " " + b [ 0 ] ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
public class GFG { static int countOfLetters ( String str ) { int letter = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) >= ' A ' && str . charAt ( i ) <= ' Z ' ) { letter ++ ; } else if ( str . charAt ( i ) >= ' a ' && str . charAt ( i ) <= ' z ' ) { letter ++ ; } } return letter ; } static int countOfNumbers ( String str ) { int number = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) >= '0' && str . charAt ( i ) <= '9' ) { number ++ ; } } return number ; } static void check ( String str ) { if ( countOfLetters ( str ) == countOfNumbers ( str ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } public static void main ( String [ ] args ) { String str = " GeeKs01324" ; check ( str ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; if ( n == 0 ) { out . println ( 0 ) ; return ; } int cnt = 0 ; while ( n > 0 ) { n -- ; cnt ++ ; out . println ( cnt ) ; cnt ++ ; } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( x == 1 || x == 2 * n - 1 ) { System . out . println ( " No " ) ; return ; } System . out . println ( " Yes " ) ; for ( int i = 1 ; i < 2 * n ; i ++ ) { if ( i == x ) { System . out . println ( i ) ; } else if ( i == x + 1 ) { System . out . println ( i ) ; } else if ( i == x - 1 ) { System . out . println ( i ) ; } else if ( i == x + 1 ) { System . out . println ( i ) ; } } } }
public class GFG { static int MAX = 100001 ; static int perfectDiv [ ] = new int [ MAX ] ; static void precomputeCounts ( ) { for ( int i = 1 ; i * i < MAX ; i ++ ) { for ( int j = i * i ; j < MAX ; j += i * i ) perfectDiv [ j ] ++ ; } } static int countPerfectDivisors ( int n ) { return perfectDiv [ n ] ; } public static void main ( String [ ] args ) { precomputeCounts ( ) ; int n = 16 ; System . out . println ( " Total perfect divisors of " + n + " = " + countPerfectDivisors ( n ) ) ; n = 12 ; System . out . println ( " Total perfect divisors of " + n + " = " + countPerfectDivisors ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; int [ ] [ ] b = new int [ m ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; a [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] [ 0 ] = sc . nextInt ( ) ; b [ i ] [ 1 ] = sc . nextInt ( ) ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += a [ i ] [ 0 ] * b [ i ] [ 0 ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { int cur = t - ( e - 1 ) / x [ i ] ; if ( cur <= x [ i ] * x [ i ] && cur <= t ) { ans = i + 1 ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void cal_IST ( int h , int r ) { int IST = ( h * r * 1.0 ) / 360 ; int int_IST = IST ; float float_IST = ( float ) Math . ceil ( ( IST - int_IST ) * 60 ) ; System . out . println ( int_IST + " : " + float_IST ) ; } public static void main ( String [ ] args ) { int h = 20 , r = 150 ; cal_IST ( h , r ) ; } }
import java . util . * ; public class GFG { static void printRoots ( int n ) { double theta = Math . PI * 2 / n ; for ( int k = 0 ; k < n ; k ++ ) { double real = Math . cos ( k * theta ) ; double img = Math . sin ( k * theta ) ; System . out . print ( real + " " ) ; if ( img >= 0 ) System . out . print ( " + i " ) ; else System . out . print ( " - i " ) ; System . out . println ( Math . abs ( img ) ) ; } } public static void main ( String [ ] args ) { printRoots ( 1 ) ; printRoots ( 2 ) ; printRoots ( 3 ) ; } }
import java . util . * ; public class GFG { static void findCart ( int arr1 [ ] , int arr2 [ ] , int n , int n1 ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n1 ; j ++ ) { System . out . print ( " { " + arr1 [ i ] + " , " + arr2 [ j ] + " } , " ) ; } } } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 2 , 3 } ; int arr2 [ ] = { 4 , 5 , 6 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; findCart ( arr1 , arr2 , n1 , n2 ) ; } }
import java . util . * ; public class GFG { static int no_of_ways ( String s ) { int n = s . length ( ) ; int count_left = 0 , count_right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( 0 ) ) count_left ++ ; else break ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == s . charAt ( n - 1 ) ) count_right ++ ; else break ; } if ( s . charAt ( 0 ) == s . charAt ( n - 1 ) ) return ( count_left + 1 ) * ( count_right + 1 ) ; else return ( count_left + count_right + 1 ) ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( no_of_ways ( s ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 100000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { Arrays . fill ( prime , true ) ; prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void SumOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) { sum += arr [ i ] ; c = 0 ; } } } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int arr [ ] = { 2 , 3 , 5 , 7 , 11 } ; int n = arr . length ; int k = 2 ; SumOfKthPrimes ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ MAX + 1 ] ; prime [ 1 ] = prime [ 0 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void solve ( int arr [ ] , int n , int k ) { int c = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) { sum += arr [ i ] ; c = 0 ; } } } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { int MAX = 1000000 ; boolean prime [ ] = new boolean [ MAX + 1 ] ; SieveOfEratosthenes ( ) ; int n = 5 , k = 2 ; int arr [ ] = { 2 , 3 , 5 , 7 , 11 } ; solve ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { Arrays . fill ( prime , true ) ; prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void productOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 , product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) { product *= arr [ i ] ; c = 0 ; } } } System . out . println ( product ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 5 , k = 2 ; int arr [ ] = { 2 , 3 , 5 , 7 , 11 } ; productOfKthPrimes ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static void findAllSequences ( int diff , char [ ] out , int start , int end ) { if ( Math . abs ( diff ) > ( end - start + 1 ) / 2 ) return ; if ( start > end ) { if ( diff == 0 ) { System . out . print ( out ) ; System . out . println ( ) ; } return ; } out [ start ] = '0' ; out [ end ] = '1' ; findAllSequences ( diff + 1 , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] = '1' ; findAllSequences ( diff , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] = '0' ; findAllSequences ( diff , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] = '1' ; findAllSequences ( diff - 1 , out , start + 1 , end - 1 ) ; } public static void main ( String [ ] args ) { int n = 2 ; char [ ] out = new char [ 2 * n ] ; findAllSequences ( 0 , out , 0 , 2 * n - 1 ) ; System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node next ; } static int cntNodes ( Node node ) { if ( node == null ) return 0 ; return ( 1 + cntNodes ( node . next ) ) ; } static void updateList ( Node head , int m ) { int cnt = cntNodes ( head ) ; if ( cnt != m && m < cnt ) { int skip = cnt - m ; Node prev = null ; Node curr = head ; while ( skip > 0 ) { prev = curr ; curr = curr . next ; skip -- ; } prev . next = null ; Node tempHead = head ; head = curr ; while ( curr . next != null ) { curr = curr . next ; } curr . next = tempHead ; } printList ( head ) ; } public static void main ( String [ ] args ) { Node head = new Node ( 4 ) ; head . next = new Node ( 5 ) ; head . next . next = new Node ( 6 ) ; head . next . next . next . next = new Node ( 1 ) ; head . next . next . next . next . next = new Node ( 2 ) ; head . next . next . next . next . next = new Node ( 3 ) ; int m = 3 ; updateList ( head , m ) ; } }
public class GFG { static int maxSubStrings ( String s , int k ) { int maxSubStr = 0 ; int n = s . length ( ) ; for ( int c = 0 ; c < 27 ; c ++ ) { char ch = ( char ) ( ' a ' + c ) ; int curr = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { if ( s . charAt ( i ) != ch ) continue ; int cnt = 0 ; while ( i < n && s . charAt ( i ) == ch && cnt != k ) { i ++ ; cnt ++ ; } if ( cnt == k ) curr ++ ; } maxSubStr = Math . max ( maxSubStr , curr ) ; } return maxSubStr ; } public static void main ( String [ ] args ) { String s = " aaacaabbaa " ; int k = 2 ; System . out . println ( maxSubStrings ( s , k ) ) ; } }
import java . util . * ; public class GFG { static int N = 100 ; static void ansQueries ( int prefeven [ ] , int prefodd [ ] , int l , int r ) { if ( ( r - l + 1 ) % 2 == 0 ) System . out . println ( "0" ) ; else { if ( l % 2 == 0 ) System . out . println ( prefeven [ r ] ^ prefeven [ l - 1 ] ) ; else System . out . println ( prefodd [ r ] ^ prefodd [ l - 1 ] ) ; } } static void wrapper ( int arr [ ] , int n , int l , int r , int q ) { int [ ] prefodd = new int [ N ] ; int [ ] prefeven = new int [ N ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ( i ) % 2 == 0 ) { prefeven [ i ] = arr [ i - 1 ] ^ prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ; } else { prefeven [ i ] = prefeven [ i - 1 ] ; prefodd [ i ] = prefodd [ i - 1 ] ^ arr [ i - 1 ] ; } } for ( int i = 0 ; i != q ; i ++ ) ansQueries ( prefeven , prefodd , l , r ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int l [ ] = { 1 , 1 , 2 } ; int r [ ] = { 2 , 3 , 4 } ; int q = l ; wrapper ( arr , n , l , r , q ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] >= arr [ i + 1 ] ) { arr [ i ] = arr [ i + 1 ] - 1 ; sum ++ ; } else { arr [ i ] = arr [ i + 1 ] ; sum ++ ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; if ( n % 2 == 0 ) { ans = ( n / 2 ) * k + ( n / 2 ) * k ; } else { ans = ( n / 2 ) * k + ( n / 2 ) * k ; } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , r ; static int a [ ] [ ] ; static int solve ( ) { int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < r ; j ++ ) { a [ i ] [ j ] = Integer . parseInt ( sc . next ( ) ) ; } } if ( c == 0 ) { a [ r ] [ 1 ] = - 1 ; } else if ( c == 1 ) { a [ r ] [ 0 ] = a [ r - 1 ] [ 0 ] = 1 ; } else if ( c == 2 ) { a [ r ] [ 1 ] = - 1 ; } return str ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } String st [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Integer . parseInt ( st [ 0 ] ) ; r = Integer . parseInt ( st [ 1 ] ) ; a = new int [ n ] [ r ] ; for ( int i = 0 ; i < n ; i ++ ) { st = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; for ( int j = 0 ; j < r ; j ++ ) a [ i ] [ j ] = Integer . parseInt ( st [ j ] ) ; } str . append ( solve ( ) ) . append ( " \n " ) ; pw . print ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } static void removeMin ( int arr [ ] , int n ) { int minVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) minVal = Math . min ( minVal , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] - minVal ; } static void removeFromMax ( int arr [ ] , int n ) { int maxVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) maxVal = Math . max ( maxVal , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = maxVal - arr [ i ] ; } static void modifyArray ( int arr [ ] , int n , int k ) { if ( k % 2 == 0 ) removeMin ( arr , n ) ; else removeFromMax ( arr , n ) ; printArray ( arr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; int k = 2 ; modifyArray ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static double find_Centroid ( int v [ ] ) { double ans = 0 , signedArea = 0 ; for ( int i = 0 ; i < v . length ; i ++ ) { int x0 = v [ i ] . x ; int y0 = v [ i ] . y ; int x1 = v [ ( i + 1 ) % v . length ] . x ; int y1 = v [ ( i + 1 ) % v . length ] . y ; int A = ( x0 * y1 ) - ( x1 * y0 ) ; signedArea += A ; ans += ( x0 + x1 ) * A ; ans += ( y0 + y1 ) * A ; } signedArea *= 0.5 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; ans /= 6 ; return ans ; } public static void main ( String [ ] args ) { int vp [ ] = { { 1 , 2 } , { 3 , - 4 } , { 6 , - 7 } } ; double ans = find_Centroid ( vp ) ; System . out . println ( ans + " " + ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] . equals ( " lock " ) ) { arr [ i ] = " blue " ; } else if ( arr [ i ] . equals ( " unlock " ) ) { arr [ i ] = " lock " ; } else if ( arr [ i ] . equals ( " blue " ) ) { arr [ i ] = " blue " ; } } System . out . println ( arr [ n - 1 ] ) ; } }
import java . util . * ; public class GFG { static int minOperations ( int arr [ ] , int k ) { Arrays . sort ( arr ) ; int opsNeeded = 0 ; for ( int i = 0 ; i < k ; i ++ ) opsNeeded += arr [ k - 1 ] - arr [ i ] ; int ans = opsNeeded ; for ( int i = k ; i < arr . length ; i ++ ) { opsNeeded = opsNeeded - ( arr [ i - 1 ] - arr [ i - k ] ) ; opsNeeded += ( k - 1 ) * ( arr [ i ] - arr [ i - k ] ) ; ans = Math . min ( ans , opsNeeded ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 9 , 100 } ; int n = arr . length ; int k = 3 ; System . out . println ( minOperations ( arr , k ) ) ; } }
import java . util . * ; public class GFG { static void charCheck ( char input ) { if ( ( input >= 65 && input <= 90 ) || ( input >= 97 && input <= 122 ) ) System . out . println ( " Alphabet " ) ; else if ( ( input >= 48 && input <= 57 ) ) System . out . println ( " Digit " ) ; else System . out . println ( " Special Character " ) ; } public static void main ( String [ ] args ) { char input = ' $ ' ; charCheck ( input ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) - 1 ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ arr [ i ] ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { int x = i ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == x ) { ans [ arr [ j ] ] = ans [ arr [ j ] ] + 1 ; break ; } } } System . out . println ( ans [ n - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < w . length ; i ++ ) { w [ i ] = sc . nextInt ( ) ; } int [ ] [ ] map = new int [ n ] [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { map [ i ] [ 0 ] = sc . nextInt ( ) ; map [ i ] [ 1 ] = sc . nextInt ( ) ; map [ i ] [ 2 ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( map [ i ] [ j ] == 0 ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] ) ; } else { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] ) ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math . min ( ans , dp [ n - 1 ] [ i ] + dp [ m - 1 ] [ i ] ) ; } System . out . println ( ans == 0 ? - 1 : ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = i + 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] == 0 ) { ans [ i ] = j + 1 ; break ; } } } for ( int i = 0 ; i < ans . length ; i ++ ) { System . out . print ( ans [ i ] + " " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] ans = new int [ n ] [ n ] ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] != 0 ) { dp [ i ] [ j ] = 1 ; ans [ i ] [ j ] = 1 ; } } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] != 0 ) { dp [ i ] [ j ] = ans [ i ] [ j ] ; ans [ i ] [ j ] = 1 ; } } } System . out . println ( count ) ; for ( int i = 0 ; i < count ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( ans [ i ] [ j ] + " " ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static int sameOccurrence ( int arr [ ] , int n , int x , int y ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int ctX = 0 , ctY = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] == x ) ctX ++ ; else if ( arr [ j ] == y ) ctY ++ ; if ( ctX == ctY ) result ++ ; } } return ( result ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 , 4 , 1 } ; int n = arr . length ; int x = 2 , y = 3 ; System . out . println ( sameOccurrence ( arr , n , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } if ( count > 2 ) { System . out . println ( count - 1 ) ; } else { System . out . println ( 0 ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; if ( a [ i ] == 0 ) { c ++ ; } else { if ( c % 2 == 0 ) { System . out . println ( " Conan " ) ; } else { System . out . println ( " Agasa " ) ; } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a [ ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int i = 0 ; i < 5 ; i ++ ) { System . out . print ( a [ i ] + " " ) ; } } }
import java . util . * ; public class GFG { public static void main ( String [ ] args ) { int target = 93 ; int arr [ ] = { 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 } ; int len = arr . length ; int totalCount = 0 ; for ( int i = 0 ; i < len - 2 ; i ++ ) { if ( target % arr [ i ] == 0 ) { for ( int j = i + 1 ; j < len - 1 ; j ++ ) { if ( target % ( arr [ i ] * arr [ j ] ) == 0 ) { int toFind = target / ( arr [ i ] * arr [ j ] ) ; for ( int k = j + 1 ; k < len ; k ++ ) { if ( arr [ k ] == toFind ) totalCount ++ ; } } } } } System . out . println ( " Total number of triplets found : " + totalCount ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; if ( n == 1 ) { ans [ 0 ] = 0 ; ans [ 1 ] = 0 ; } else { ans [ 0 ] = n ; ans [ 1 ] = n ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = ( n - 1 ) * arr [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int finalNum ( int arr [ ] , int n ) { int result = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) result = __gcd ( result , arr [ i ] ) ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 9 , 6 , 36 } ; int n = arr . length ; System . out . println ( finalNum ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int N = 1000 ; static int lastElement ( int a [ ] , int n ) { int steps = 1 ; Vector < Integer > [ ] v = new Vector [ n ] ; if ( n == 1 ) return a [ 0 ] ; for ( int i = 0 ; i < n ; i += 2 ) { v [ steps ] . add ( a [ i ] | a [ i + 1 ] ) ; } while ( v [ steps ] . size ( ) > 1 ) { steps ++ ; for ( int i = 0 ; i < v [ steps - 1 ] . size ( ) ; i += 2 ) { if ( steps % 2 == 1 ) { v [ steps ] . add ( v [ steps - 1 ] . get ( i ) | v [ steps - 1 ] . get ( i + 1 ) ) ; } else { v [ steps ] . add ( v [ steps - 1 ] . get ( i ) ^ v [ steps - 1 ] . get ( i + 1 ) ) ; } } } return v [ steps ] . get ( 0 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 5 , 6 } ; int n = a . length ; int index = 0 , value = 0 , a [ 0 ] = 0 , a [ 0 ] = 2 , 2 ; System . out . println ( lastElement ( a , n ) ) ; index = 3 , value = 5 ; a [ index ] = value ; System . out . println ( lastElement ( a , n ) ) ; } }
import java . io . * ; public class GFG { static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) / 6 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( number_cake ( n ) ) ; n = 8 ; System . out . println ( number_cake ( n ) ) ; n = 25 ; System . out . println ( number_cake ( n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; String s = sc . next ( ) ; int g = 0 , p = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' g ' && s . charAt ( i + 1 ) == ' p ' ) { p ++ ; } else if ( s . charAt ( i ) == ' p ' && s . charAt ( i + 1 ) == ' g ' ) { g ++ ; } else if ( s . charAt ( i ) == ' g ' && s . charAt ( i + 1 ) == ' p ' ) { p ++ ; } else if ( s . charAt ( i ) == ' p ' && s . charAt ( i + 1 ) == ' g ' ) { g ++ ; } } out . println ( ( g - p ) / 2 ) ; out . flush ( ) ; } }
import java . util . * ; public class GFG { static void pattern ( int N ) { int k = 0 , space = 1 , rows = N ; for ( int i = rows ; i >= 0 ; i -- ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( " * " ) ; } if ( i != rows ) { for ( int k = 1 ; k <= space ; k ++ ) { System . out . print ( " " ) ; } space += 2 ; } for ( int j = i ; j >= 0 ; j -- ) { if ( j != rows ) { System . out . print ( " * " ) ; } } System . out . println ( ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int N = 6 ; pattern ( N ) ; } }
public class GFG { static int maximum_middle_value ( int n , int k , int arr [ ] ) { int ans = - 1 ; int low = ( n + 1 - k ) / 2 ; int high = ( n + 1 - k ) / 2 + k ; for ( int i = low ; i <= high ; i ++ ) ans = Math . max ( ans , arr [ i - 1 ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; int arr [ ] = { 9 , 5 , 3 , 7 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr ) ) ; n = 9 , k = 3 ; int arr1 [ ] = { 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr1 ) ) ; } }
import java . util . * ; public class TreeNode { public int val ; public TreeNode left ; public TreeNode right ; public TreeNode ( int rootData ) { this . val = rootData ; this . left = null ; this . right = null ; } } public class Solution { public int pathSumHelper ( TreeNode root , int target , int so_far , HashMap < Integer , Integer > cache ) { if ( root == null ) { return 0 ; } int complement = so_far + root . val - target ; if ( cache . containsKey ( complement ) ) { return cache . get ( complement ) ; } cache . put ( so_far + root . val , cache . get ( so_far + root . val ) + 1 ) ; pathSumHelper ( root . left , target , so_far + root . val , cache ) ; pathSumHelper ( root . right , target , so_far + root . val , cache ) ; cache . put ( so_far + root . val , cache . get ( so_far + root . val ) - 1 ) ; return result ; } public int pathSum ( TreeNode root , int sum ) { int result = 0 ; pathSumHelper ( root , sum , 0 , new HashMap < Integer , Integer > ( ) ) ; return result ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; TreeNode tree = new TreeNode ( 10 ) ; tree . left = new TreeNode ( 5 ) ; tree . right = new TreeNode ( - 3 ) ; tree . left . left = new TreeNode ( 3 ) ; tree . left . right = new TreeNode ( 2 ) ; tree . right . right = new TreeNode ( 11 ) ; tree . left . left . left = new TreeNode ( 3 ) ; tree . left . left . left . right = new TreeNode ( - 2 ) ; tree . left . left . right . right = new TreeNode ( 1 ) ; int s = 8 ; int out = sObj . pathSum ( tree , s ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static void getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) s += arr [ i ] ; System . out . println ( Math . min ( s , x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int x = 5 ; int arr_size = arr . length ; getmax ( arr , arr_size , x ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class A { static StringBuffer str = new StringBuffer ( ) ; static int n ; static long a [ ] ; static void solve ( ) { long b = a [ 0 ] ; for ( int i = 1 ; i < 10 ; i ++ ) { b *= a [ i ] ; } str . append ( b ) . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { boolean lenv = false ; if ( lenv ) { String s = " " ; for ( int i = 0 ; i < 8 ; i ++ ) { s += "0" ; } solve ( ) ; str . append ( s ) . append ( " \n " ) ; } else { str = " " ; for ( int i = 0 ; i < 8 ; i ++ ) { str += "0" ; } solve ( ) ; str . append ( " \n " ) ; } System . out . print ( str ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int cnt = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) cnt ++ ; } System . out . println ( cnt ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
public class GFG { static int maxOR ( int arr [ ] , int n ) { int maxVal = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { maxVal = Math . max ( maxVal , arr [ i ] | arr [ j ] ) ; } } return maxVal ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; System . out . println ( maxOR ( arr , n ) ) ; } }
public class Solution { public int numJewelsInStones ( String J , String S ) { if ( J . length ( ) == 0 || S . length ( ) == 0 ) return 0 ; HashSet < Character > j_set = new HashSet < > ( ) ; int ans = 0 ; for ( char c : S . toCharArray ( ) ) { if ( j_set . contains ( c ) ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String J = " aA " ; String S = " aAAbbbb " ; int out = sObj . numJewelsInStones ( J , S ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static int MAX = 100 ; static int n = 0 ; static int store [ ] = new int [ MAX ] ; static int graph [ ] [ ] = new int [ MAX ] [ MAX ] ; static int d [ ] = new int [ MAX ] ; static boolean is_clique ( int b ) { for ( int i = 1 ; i < b ; i ++ ) { for ( int j = i + 1 ; j < b ; j ++ ) { if ( graph [ store [ i ] ] [ store [ j ] ] == 0 ) return false ; } } return true ; } static int maxCliques ( int i , int l ) { int max_ = 0 ; for ( int j = i + 1 ; j <= n ; j ++ ) { store [ l ] = j ; if ( is_clique ( l + 1 ) ) { max_ = Math . max ( max_ , l ) ; max_ = Math . max ( max_ , maxCliques ( j , l + 1 ) ) ; } } return max_ ; } public static void main ( String [ ] args ) { int edges [ ] [ ] = { { 1 , 2 } , { 2 , 3 } , { 3 , 1 } , { 4 , 3 } , { 4 , 1 } , { 4 , 2 } } ; int size = edges . length ; n = 4 ; for ( int i = 0 ; i < size ; i ++ ) { graph [ edges [ i ] [ 0 ] ] [ edges [ i ] [ 1 ] ] = 1 ; graph [ edges [ i ] [ 1 ] ] [ edges [ i ] [ 0 ] ] = 1 ; d [ edges [ i ] [ 0 ] ] ++ ; d [ edges [ i ] [ 1 ] ] ++ ; } System . out . println ( maxCliques ( 0 , 1 ) ) ; } }
import java . io . * ; public class GFG { static int setBitNumber ( int n ) { int k = ( int ) Math . log ( n ) ; return ( int ) Math . pow ( 2 , k ) ; } public static void main ( String [ ] args ) { int n = 273 ; System . out . println ( setBitNumber ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int x = 0 ; if ( s < f ) { System . out . print ( " R " ) ; x = 1 ; } else { System . out . print ( " L " ) ; x = - 1 ; } for ( int i = s ; i < f ; i ++ ) { if ( i > t && i < m ) { int t = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( x == 0 && t == 0 && l <= s && r <= f && t + x <= f ) { System . out . print ( " X " ) ; x = 1 ; } else { System . out . print ( " R " ) ; x = - 1 ; } } } } }
import java . util . * ; public class GFG { static int subsetPairNotDivisibleByK ( int arr [ ] , int N , int K ) { int f [ ] = new int [ K ] ; for ( int i = 0 ; i < N ; i ++ ) f [ arr [ i ] % K ] ++ ; if ( K % 2 == 0 ) f [ K / 2 ] = Math . min ( f [ K / 2 ] , 1 ) ; int res = Math . min ( f [ 0 ] , 1 ) ; for ( int i = 1 ; i <= K / 2 ; i ++ ) res += Math . max ( f [ i ] , f [ K - i ] ) ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 7 , 2 , 9 , 1 } ; int N = arr . length ; int K = 3 ; System . out . println ( subsetPairNotDivisibleByK ( arr , N , K ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int w = sc . nextInt ( ) , m = sc . nextInt ( ) , k = sc . nextInt ( ) ; int ans = 0 ; while ( m > 0 ) { ans += m / k ; m /= k ; } pw . println ( ans ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . io . * ; public class GFG { static void printRoots ( double a , double b , double c ) { System . out . println ( 1 + " , " + c / ( a * 1.0 ) ) ; } public static void main ( String [ ] args ) { double a = 2 , b = 3 , c = - 5 ; printRoots ( a , b , c ) ; } }
import java . util . * ; public class GFG { static int dp [ ] [ ] [ ] = new int [ 32 ] [ 32 ] [ 32 ] ; static int dp ( int pos , int fl , int pr , int bin ) { if ( pos == bin ) return 1 ; if ( dp [ pos ] [ fl ] [ pr ] != - 1 ) return dp [ pos ] [ fl ] [ pr ] ; int val = 0 ; if ( bin == 0 ) val = dp ( pos + 1 , fl , 0 , bin ) ; else if ( bin == 1 ) val = val + dp ( pos + 1 , 1 , 0 , bin ) ; if ( pr == 0 ) { if ( fl == 1 ) val += dp ( pos + 1 , fl , 1 , bin ) ; else if ( bin == 1 ) val += dp ( pos + 1 , fl , 1 , bin ) ; } dp [ pos ] [ fl ] [ pr ] = val ; return val ; } static int findIntegers ( int num ) { String bin = " " ; while ( num > 0 ) { if ( num % 2 == 1 ) bin += "1" ; else bin += "0" ; num /= 2 ; } bin = bin . substring ( 0 , 0 ) ; return dp ( 0 , 0 , 0 , bin ) ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( findIntegers ( N ) ) ; } }
import java . util . * ; public class GFG { static int N = 4 ; static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) { int dp [ ] [ ] = new int [ n ] [ n ] ; if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + ( 1 << i ) ; else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ; } for ( int i = 1 ; i < n ; i ++ ) { if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + ( 1 << i ) ; else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ; } for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 1 << i + j ) ; else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 1 , 0 , 1 } , { 0 , 1 , 1 , 0 } , { 1 , 0 , 0 , 1 } , { 1 , 0 , 1 , 1 } } ; System . out . println ( MaximumDecimalValue ( mat , 4 ) ) ; } }
import java . util . * ; public class GFG { static void createHash ( HashSet < Integer > hash1 , int maxElement ) { int prev = 0 , curr = 1 ; hash1 . add ( prev ) ; hash1 . add ( curr ) ; while ( curr < maxElement ) { int temp = curr + prev ; hash1 . add ( temp ) ; prev = curr ; curr = temp ; } } static void findFibonacciPair ( int n ) { HashSet < Integer > hash = new HashSet < Integer > ( ) ; createHash ( hash , n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash . contains ( i ) && hash . contains ( n - i ) ) { System . out . println ( i + " , " + n - i ) ; return ; } } System . out . println ( " - 1" ) ; } public static void main ( String [ ] args ) { int N = 90 ; findFibonacciPair ( N ) ; } }
import java . util . * ; public class GFG { static int countgroup ( int a [ ] , int n ) { int xs = 0 ; for ( int i = 0 ; i < n ; i ++ ) xs = xs ^ a [ i ] ; if ( xs == 0 ) return ( 1 << ( n - 1 ) ) - 1 ; return 0 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 } ; int n = a . length ; System . out . println ( countgroup ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int maxLength ( String s , int n ) { int ans = Integer . MIN_VALUE ; int A [ ] = new int [ n + 5 ] ; int L [ ] = new int [ n + 5 ] ; int R [ ] = new int [ n + 5 ] ; int freq [ ] = new int [ n + 5 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) - ' a ' == i ) count ++ ; freq [ j ] = count ; } for ( int j = 0 ; j < n ; j ++ ) { L [ ( 2 * freq [ j - 1 ] ) - j ] ; R [ ( 2 * freq [ j ] ) - j ] ; } int max_len = Integer . MIN_VALUE ; int min_val = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { min_val = Math . min ( min_val , L [ j ] ) ; A [ min_val ] = min_val ; int l = 0 , r = j ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; if ( A [ mid ] <= R [ j ] ) { max_len = Math . max ( max_len , j - mid + 1 ) ; r = mid - 1 ; } else l = mid + 1 ; } } ans = Math . max ( ans , max_len ) ; A . clear ( ) ; R . clear ( ) ; L . clear ( ) ; } return ans ; } public static void main ( String [ ] args ) { String s = " ababbbacbcbcca " ; int n = s . length ( ) ; System . out . println ( maxLength ( s , n ) ) ; } }
import java . util . * ; public class GFG { static int N = 100005 ; static Vector < Integer > [ ] gr = new Vector [ N ] ; static int [ ] colour = new int [ N ] ; static boolean bip = true ; static void add_edge ( int x , int y ) { gr [ x ] . add ( y ) ; gr [ y ] . add ( x ) ; edges . add ( x , y ) ; } static void dfs ( int x , int col ) { colour [ x ] = col ; for ( int i = 0 ; i < gr [ x ] . size ( ) ; i ++ ) { if ( colour [ i ] == - 1 ) dfs ( i , col ^ 1 ) ; else if ( colour [ i ] == col ) bip = false ; } } static void Directed_Graph ( int n , int m ) { dfs ( 1 , 1 ) ; if ( bip == true ) { System . out . println ( - 1 ) ; return ; } for ( int i = 0 ; i < m ; i ++ ) { if ( colour [ edges . get ( i ) ] == 0 ) { int x = edges . get ( i ) . get ( 0 ) , y = edges . get ( i ) . get ( 1 ) ; edges . set ( i , y ) ; System . out . println ( edges . get ( i ) . get ( 0 ) + " " + edges . get ( i ) . get ( 1 ) ) ; } } } public static void main ( String [ ] args ) { int n = 4 , m = 3 ; add_edge ( 1 , 2 ) ; add_edge ( 1 , 3 ) ; add_edge ( 1 , 4 ) ; Directed_Graph ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . print ( arr [ i ] + " " ) ; } else { System . out . print ( arr [ i ] + " " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { sum += k * i ; } if ( sum <= n ) { System . out . println ( 0 ) ; } else { System . out . println ( sum - n ) ; } } }
public class GFG { static boolean isPrime ( int k ) { if ( k <= 1 ) return false ; for ( int i = 2 ; i < k ; i ++ ) if ( k % i == 0 ) return false ; return true ; } static int check ( int num , int k ) { int flag = 1 ; for ( int i = 2 ; i < k ; i ++ ) { if ( num % i == 0 ) flag = 0 ; } if ( flag == 1 ) { if ( num % k == 0 ) return 1 ; else return 0 ; } else return 0 ; } static int findCount ( int a , int b , int k ) { int count = 0 ; if ( ! isPrime ( k ) ) return 0 ; else { for ( int i = a ; i <= b ; i ++ ) { int ans = check ( i , k ) ; if ( ans == 1 ) count ++ ; else continue ; } } return count ; } public static void main ( String [ ] args ) { int a = 2020 , b = 6300 , k = 29 ; System . out . println ( findCount ( a , b , k ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( k > n || ( k == 1 && n != 1 ) ) { System . out . println ( - 1 ) ; return ; } if ( k == n ) { System . out . println ( " a " ) ; return ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < k ; i ++ ) { sb . append ( ' a ' ) ; } sb . append ( ' z ' ) ; for ( int i = k ; i < n ; i ++ ) { sb . append ( ' z ' ) ; } System . out . println ( sb . toString ( ) ) ; } }
import java . util . * ; public class GFG { static int maxn = 16 ; static int dp [ ] = new int [ maxn ] ; static void precompute ( ) { dp [ 0 ] = 0 ; for ( int i = 1 ; i < maxn ; i ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { int j = v [ k ] ; if ( i >= j && dp [ i - j ] != - 1 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i - j ] + 1 ) ; } } } static int Maximum_Summands ( int dp [ ] , int n ) { if ( n < maxn ) return dp [ n ] ; else { int t = ( n - maxn ) / 4 + 1 ; return t + dp [ n - 4 * t ] ; } } public static void main ( String [ ] args ) { int n = 12 ; dp = new int [ maxn ] ; precompute ( ) ; System . out . println ( Maximum_Summands ( dp , n ) ) ; } }
import java . io . * ; public class GFG { static int countSquares ( int n ) { return ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( " Count of squares is " + countSquares ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } HashMap < Integer , Integer > map = new HashMap < > ( ) ; long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; sum %= m ; map . put ( sum , map . getOrDefault ( sum , 0 ) + 1 ) ; } long ans = 0 ; for ( Integer key : map . keySet ( ) ) { ans += map . get ( key ) ; sum %= m ; } System . out . println ( ans ) ; } }
public class GFG { static int FindSubarray ( int arr [ ] , int n , int k ) { int count_one [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { count_one [ i ] = Integer . bitCount ( arr [ i ] ) ; } int sum = count_one [ 0 ] ; if ( n == 1 ) { if ( count_one [ 0 ] >= k ) return 1 ; else return - 1 ; } int ans = Integer . MAX_VALUE ; int i = 1 , j = 0 ; while ( i < n ) { if ( k == count_one [ j ] ) { ans = 1 ; break ; } else if ( k == count_one [ i ] ) { ans = 1 ; break ; } else if ( sum + count_one [ i ] < k ) { sum += count_one [ i ] ; i ++ ; } else if ( sum + count_one [ i ] > k ) { ans = Math . min ( ans , ( i - j ) + 1 ) ; sum -= count_one [ j ] ; j ++ ; } else if ( sum + count_one [ i ] == k ) { ans = Math . min ( ans , ( i - j ) + 1 ) ; sum += count_one [ i ] ; i ++ ; } } if ( ans != Integer . MAX_VALUE ) return ans ; else return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 8 } ; int n = arr . length ; int k = 2 ; System . out . println ( FindSubarray ( arr , n , k ) ) ; } }
public class GFG { static void Loss ( int SP , int P ) { double loss = 0 ; loss = ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) ; System . out . printf ( " Loss = % . 3f " , loss ) ; } public static void main ( String [ ] args ) { int SP = 2400 , P = 30 ; Loss ( SP , P ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ n - 1 ] ; if ( m - x >= 0 ) { System . out . println ( m - x ) ; } else { System . out . println ( min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int left = 0 , right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ left ] ) { left ++ ; } else { right ++ ; } ans = Math . max ( ans , Math . min ( left , right ) ) ; left = right ; } System . out . println ( ans ) ; } }
public final class p035 { public static void main ( String [ ] args ) { System . out . println ( new p035 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 1 ; i < 10000000 ; i ++ ) { if ( get terminal ( i ) == 89 ) sum += 1 ; } return Integer . toString ( sum ) ; } private static int get terminal ( int n ) { while ( ! TERMINALS . contains ( n ) ) n = squareDigitSum ( n ) ; return n ; } private static int squareDigitSum ( int n ) { int result = 0 ; while ( n > 0 ) { result += SQUARE_DIGITS_SUM [ n % 1000 ] ; n /= 1000 ; } return result ; } private static int [ ] SQUARE_DIGITS_SUM = new int [ 1000 ] ; }
import java . util . * ; public class GFG { static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact *= i ; return fact ; } static int countStrings ( String str , int n ) { HashSet < Character > distinct_char = new HashSet < Character > ( ) ; for ( int i = 0 ; i < n ; i ++ ) distinct_char . add ( str . charAt ( i ) ) ; return fact ( distinct_char . size ( ) ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; System . out . println ( countStrings ( str , n ) ) ; } }
import java . util . * ; public class GFG { static int M = 4 , N = 5 ; static void printCommonElements ( int mat [ ] [ ] ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int j = 0 ; j < N ; j ++ ) { if ( mp . containsKey ( mat [ 0 ] [ j ] ) ) { mp . put ( mat [ 0 ] [ j ] , mp . get ( mat [ 0 ] [ j ] ) + 1 ) ; } else { mp . put ( mat [ 0 ] [ j ] , 1 ) ; } } for ( int i = 1 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mp . containsKey ( mat [ i ] [ j ] ) && mp . get ( mat [ i ] [ j ] ) == i ) { mp . put ( mat [ i ] [ j ] , i + 1 ) ; } } } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 1 , 4 , 8 } , { 3 , 7 , 8 , 5 , 1 } , { 8 , 7 , 7 , 3 , 1 } , { 8 , 1 , 2 , 7 , 9 } } ; printCommonElements ( mat ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n ; static long x1 , x2 ; static long a [ ] ; static long b [ ] ; static void solve ( ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; if ( a [ n - 1 ] - a [ n ] > b [ n - 1 ] ) str . append ( " Yes \n " ) ; else str . append ( " No \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { boolean lenv = false ; if ( lenv ) { String s = " " ; for ( int i = 0 ; i < n ; i ++ ) { s += " " + a [ i ] ; } str . append ( s ) ; } else str . append ( " No \n " ) ; solve ( ) ; str . append ( " \n " ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , t ; static long a [ ] ; static long solve ( ) { long min = Long . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { long val = a [ i ] ; if ( val < min ) { min = val ; } } return min ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } int q1 = Integer . parseInt ( bf . readLine ( ) ) ; for ( int i = 0 ; i < q1 ; i ++ ) { String s = bf . readLine ( ) ; pw . print ( solve ( ) ) ; pw . println ( ) ; } pw . flush ( ) ; } }
public class GFG { static int sumOfAP ( int a , int d , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + a ; a = a + d ; } return sum ; } public static void main ( String [ ] args ) { int n = 20 ; int a = 2.5 , d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } }
import java . util . * ; public class GFG { static void find3Numbers ( int arr [ ] , int n ) { int small = Integer . MAX_VALUE , large = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) small = arr [ i ] ; else if ( arr [ i ] <= large ) large = arr [ i ] ; else break ; } if ( i == n ) { System . out . println ( " No such triplet found " ) ; return ; } for ( int j = 0 ; j < i + 1 ; j ++ ) { if ( arr [ j ] < large ) { small = arr [ j ] ; break ; } } System . out . println ( small + " " + large + " " + arr [ i ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 7 , 4 , 8 } ; int n = arr . length ; find3Numbers ( arr , n ) ; } }
import java . util . * ; public class GFG { static void numbersWith3Divisors ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } System . out . println ( " Numbers with 3 divisors : " ) ; for ( int i = 0 ; i * i <= n ; i ++ ) { if ( prime [ i ] ) System . out . print ( i * i + " " ) ; } } public static void main ( String [ ] args ) { int n = 96 ; numbersWith3Divisors ( n ) ; } }
public class GFG { static int findPairCount ( int N , int K ) { int count = 0 ; int rem [ ] = new int [ K ] ; rem [ 0 ] = N / K ; for ( int i = 1 ; i < K ; i ++ ) rem [ i ] = ( N - i ) / K + 1 ; if ( K % 2 == 0 ) { count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; for ( int i = 1 ; i < K / 2 ; i ++ ) count += rem [ i ] * rem [ K - i ] ; count += ( rem [ K / 2 ] * ( rem [ K / 2 ] - 1 ) ) / 2 ; } else { count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; for ( int i = rage ( 1 , K / 2 + 1 ) ; i <= K / 2 ; i ++ ) count += rem [ i ] * rem [ K - i ] ; } return count ; } public static void main ( String [ ] args ) { int N = 10 , K = 4 ; System . out . println ( findPairCount ( N , K ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) , m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] a = new int [ n ] , b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) b [ i ] = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 , j = 0 ; i < n && j < m ; ) { if ( a [ i ] == b [ j ] ) { ans = max ( ans , i - j ) ; i = j ; j = i ; } else if ( a [ i ] == b [ j ] ) { ans = max ( ans , i - j ) ; i = j ; j = i ; } else if ( b [ j ] == a [ i ] ) { ans = max ( ans , i - j ) ; j = i ; } } System . out . println ( ans ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; max = Math . max ( max , arr [ i ] ) ; } int sum = max ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int PHI = 1.6180339 ; static int fib ( int n ) { if ( n < 6 ) return f [ n ] ; int t = 5 , fn = 5 ; while ( t < n ) { fn = fn * PHI ; t ++ ; } return fn ; } public static void main ( String args [ ] ) { int n = 9 ; System . out . println ( n + " th Fibonacci Number = " + fib ( n ) ) ; } }
public class GFG { static int kthSmallest ( int n , int k ) { return 2 * k ; } public static void main ( String [ ] args ) { int n = 8 , k = 4 ; System . out . println ( kthSmallest ( n , k ) ) ; } }
import java . util . * ; public class GFG { static void printSumTricky ( int mat [ ] [ ] , int k ) { if ( k > n ) return ; int sum [ ] [ ] = new int [ n ] [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 1 ] [ j ] = sum [ 1 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j ] = sum [ 1 ] [ j ] = sum [ 0 ] [ j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( b % a != 0 ) { System . out . println ( " No solution " ) ; return ; } int ans = 5 ; if ( b / a > n ) { System . out . println ( " No solution " ) ; return ; } ans = b / a ; if ( n % 2 == 0 ) { System . out . println ( " No solution " ) ; return ; } ans = b - n / 2 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b - n / 2 + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; if ( ans >= 0 ) { System . out . println ( ans ) ; return ; } ans = b / a + 1 ; System . out . println ( " No solution " ) ; } }
public class GFG { static int ncr ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i ++ ) { ans *= ( n - r + i ) ; ans /= i ; } return ans ; } static int totalWays ( int X , int Y , int M , int W ) { return ( ncr ( M , X ) * ncr ( W , Y ) ) ; } public static void main ( String [ ] args ) { int X = 4 , Y = 3 , M = 6 , W = 5 ; System . out . println ( totalWays ( X , Y , M , W ) ) ; } }
public class GFG { static int nextPowerOf2 ( int n ) { int count = 0 ; if ( n != 0 && n != 0 && ( n - 1 ) > 0 ) return n ; while ( n != 0 ) { n >>= 1 ; count ++ ; } return 1 << count ; } static int removeElement ( int n ) { if ( n == 1 || n == 2 ) return 0 ; int a = nextPowerOf2 ( n ) ; if ( n == a || n == a - 1 ) return 1 ; else if ( n == a - 2 ) return 0 ; else if ( n % 2 == 0 ) return 1 ; else return 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeElement ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = a [ i ] % 2 ; } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == 1 ) { cnt ++ ; } } if ( cnt % 2 == 0 ) { ans += ( b [ i ] * b [ i ] ) ; } else { ans += ( b [ i ] * b [ i ] ) ; } } System . out . println ( ans ) ; } }
public class GFG { static int modInverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) if ( ( a * x ) % m == 1 ) return x ; return 1 ; } public static void main ( String [ ] args ) { int a = 3 , m = 11 ; System . out . println ( modInverse ( a , m ) ) ; } }
public class GFG { static int sumOfDigits ( int x ) { int sum = 0 ; while ( x != 0 ) { sum += x % 10 ; x /= 10 ; } return sum ; } static int countNumbers ( int l , int r ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % 2 == 0 && sumOfDigits ( i ) % 3 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int l = 1000 , r = 6000 ; System . out . println ( countNumbers ( l , r ) ) ; } }
import java . util . * ; public class GFG { static void findGreater ( int a , int b ) { int x = a * ( int ) Math . log ( b ) ; int y = b * ( int ) Math . log ( a ) ; if ( y > x ) System . out . println ( " a ^ b is greater " ) ; else if ( y < x ) System . out . println ( " b ^ a is greater " ) ; else System . out . println ( " Both are equal " ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 , c = 2 , d = 4 ; findGreater ( a , b ) ; findGreater ( c , d ) ; } }
import java . util . * ; public class GFG { static int findAnswer ( String str1 , String str2 , int n ) { int l = 0 , r = 0 ; int ans = 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { l = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) { r = i ; break ; } } if ( r < l ) { return 26 * ( n + 1 ) ; } else if ( l == r ) { return ans ; } else { for ( int i = l + 1 ; i <= r ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i - 1 ) ) { ans -- ; break ; } } for ( int i = l + 1 ; i <= r ; i ++ ) { if ( str1 . charAt ( i - 1 ) != str2 . charAt ( i ) ) { ans -- ; break ; } } return ans ; } } public static void main ( String [ ] args ) { String str1 = " toy " ; String str2 = " try " ; int n = str1 . length ( ) ; System . out . println ( findAnswer ( str1 , str2 , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int l = x ; int r = x ; for ( int i = 0 ; i < m ; i ++ ) { int l1 = sc . nextInt ( ) ; int r1 = sc . nextInt ( ) ; if ( l1 > r1 ) { l = l1 ; r = r1 ; } } System . out . println ( r - l + 1 ) ; } } }
public class GFG { static boolean bitsAreInAltPatrnInGivenTRange ( int n , int l , int r ) { int num = n >> ( l - 1 ) ; int prev = num & 1 ; num = num >> 1 ; for ( int i = 1 ; i < ( r - l ) ; i ++ ) { int curr = num & 1 ; if ( curr == prev ) return false ; prev = curr ; num = num >> 1 ; } return true ; } public static void main ( String [ ] args ) { int n = 18 ; int l = 1 , r = 3 ; if ( bitsAreInAltPatrnInGivenTRange ( n , l , r ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , m ; static long a [ ] , b [ ] ; static void solve ( ) { a = new long [ m ] ; b = new long [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = a [ i ] - ( ( i == 0 ) ? 0 : 1 ) ; b [ i ] = b [ i ] - ( ( i == 0 ) ? 0 : 1 ) ; } for ( int i = 0 ; i < m ; i ++ ) { if ( ( b [ i ] & 1 ) == 0 ) { if ( b [ i ] > 0 ) { str . append ( b [ i ] ) . append ( " " ) ; } else { str . append ( a [ i ] ) . append ( " " ) ; } } else { str . append ( b [ i ] ) . append ( " " ) ; } } str . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } String st [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Long . parseLong ( st [ 0 ] ) ; m = Long . parseLong ( st [ 1 ] ) ; solve ( ) ; pw . println ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class GFG { static int nth_group ( int n ) { return n * ( 2 * Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( nth_group ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; sum += dp [ i ] [ j ] ; } } if ( sum == 0 ) { System . out . println ( - 1 ) ; return ; } int res = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] [ n - 1 ] != sum ) { System . out . println ( - 1 ) ; return ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] [ n - 1 ] != sum ) { System . out . println ( - 1 ) ; return ; } } System . out . println ( res ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int days = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ days ] ; int minWalks = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; minWalks = Math . min ( minWalks , arr [ i ] ) ; } System . out . println ( minWalks ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static int maximumOccurredElement ( int L [ ] , int R [ ] , int n ) { int arr [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ L [ i ] ] ++ ; arr [ R [ i ] + 1 ] -- ; } int msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) { arr [ i ] += arr [ i - 1 ] ; if ( msum < arr [ i ] ) { msum = arr [ i ] ; ind = i ; } } return ind ; } public static void main ( String [ ] args ) { int L [ ] = { 1 , 4 , 9 , 13 , 21 } ; int R [ ] = { 15 , 8 , 12 , 20 , 30 } ; int n = L . length ; System . out . println ( maximumOccurredElement ( L , R , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { String t = sc . next ( ) ; if ( s . substring ( 0 , i ) . equals ( t ) ) { count ++ ; s = t ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( m > n ) { System . out . println ( n + " " + m ) ; return ; } if ( m < n ) { System . out . println ( n + " " + m ) ; return ; } System . out . println ( m + " " + n ) ; } }
import java . util . * ; public class GFG { static double func ( double x ) { return ( double ) 1 / ( 1 + x * x ) ; } static double calculate ( double lower_limit , double upper_limit , double interval_limit ) { double interval_size = ( upper_limit - lower_limit ) / interval_limit ; double sum = func ( lower_limit ) + func ( upper_limit ) ; for ( int i = 1 ; i < interval_limit ; i ++ ) { if ( i % 3 == 0 ) { sum += 2 * func ( lower_limit + i * interval_size ) ; } else { sum += 3 * func ( lower_limit + i * interval_size ) ; } } return ( ( double ) ( 3 * interval_size ) / 8 ) * sum ; } public static void main ( String [ ] args ) { double interval_limit = 10 , lower_limit = 1 , upper_limit = 10 ; double integral_res = calculate ( lower_limit , upper_limit , interval_limit ) ; System . out . println ( integral_res ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( n <= k ) { ans = k * x + ( n - k ) * y ; } else { ans = k * x + ( n - k ) * y ; } out . println ( ans ) ; out . flush ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { double x = sc . nextDouble ( ) ; if ( x == 0 ) { break ; } double h = sc . nextDouble ( ) ; double s = h * h ; double sqrt = ( h * h ) * ( h - x ) ; sqrt = sqrt ( sqrt ) ; println ( x * x + h * h ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int sum = 10 ; while ( k > 0 ) { sum += k % 10 ; k -- ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int MAX = 100000 ; static boolean prime [ ] = new boolean [ MAX ] ; static void sieve ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } } static void printPrimeQuad ( int n ) { for ( int i = 0 ; i < n - 7 ; i ++ ) { if ( prime [ i ] && prime [ i + 2 ] && prime [ i + 6 ] && prime [ i + 8 ] ) { System . out . println ( i + " " + ( i + 2 ) + " " + ( i + 6 ) + " " + ( i + 8 ) ) ; } } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 20 ; printPrimeQuad ( 20 ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static int maxSubsequenceSubstring ( String x , String y , int n , int m ) { int dp [ ] [ ] = new int [ MAX ] [ MAX ] ; for ( int i = 1 ; i <= m ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( x . charAt ( j - 1 ) == y . charAt ( i - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ; return ans ; } public static void main ( String [ ] args ) { String x = " ABCD " , y = " BACDBDCD " ; int n = x . length ( ) ; int m = y . length ( ) ; System . out . println ( maxSubsequenceSubstring ( x , y , n , m ) ) ; } }
public class GFG { static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % a == 0 || i % b == 0 ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 , a = 3 , b = 5 ; System . out . println ( findSum ( n , a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int [ ] a = new int [ 26 ] ; int [ ] b = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ s . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < t . length ( ) ; i ++ ) { b [ t . charAt ( i ) - ' a ' ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { ans += Math . min ( a [ i ] , b [ i ] ) ; a [ i ] -= a [ i ] ; b [ i ] -= b [ i ] ; a [ i ] += b [ i ] ; b [ i ] -= b [ i ] ; b [ i ] -= a [ i ] ; a [ i ] += b [ i ] ; } System . out . println ( ans + " " + a [ s . length ( ) ] ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) sequence [ i ] = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getNthTerm ( int n ) { return sequence [ n ] ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 6 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; } }
public class GFG { static int MAX = 10000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getCount ( int n ) { int count = 1 ; int i = n - 1 ; while ( sequence [ i + 1 ] != 0 ) { count ++ ; i = i - sequence [ i + 1 ] ; } return count ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 10000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getCount ( int n ) { int nthTerm = sequence [ n - 1 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sequence [ i ] == nthTerm ) count ++ ; } return count ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; int n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
import java . util . * ; public class GFG { static int nthElement ( int a , int b , int n ) { int lcm = ( a * b ) / ( int ) Math . gcd ( a , b ) ; int l = 1 ; int r = Math . min ( a , b ) * n ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; int val = mid / a + mid / b - mid / lcm ; if ( val == n ) return Math . max ( mid / a , mid / b * b ) ; if ( val < n ) l = mid + 1 ; else r = mid - 1 ; } return 0 ; } public static void main ( String [ ] args ) { int a = 5 , b = 3 , n = 5 ; System . out . println ( nthElement ( a , b , n ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int y = in . nextInt ( ) ; if ( isWeek ( y ) ) return true ; out . println ( y ) ; return false ; } static boolean isWeek ( int y ) { if ( y == 0 ) return true ; if ( y == 3 ) return false ; if ( y == 5 ) return true ; if ( y == 7 ) return true ; if ( y == 8 ) return true ; if ( y == 9 ) return true ; if ( y == 10 ) return true ; if ( y == 11 ) return true ; if ( y == 12 ) return true ; if ( y == 13 ) return true ; if ( y == 14 ) return true ; if ( y == 15 ) return true ; if ( y == 16 ) return true ; if ( y == 17 ) return true ; if ( y == 18 ) return true ; if ( y == 19 ) return true ; return false ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] map = new int [ 3 ] [ 3 ] ; int cnt = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { String s = in . next ( ) ; if ( s . equals ( " HIT " ) ) { if ( map [ 2 ] [ 1 ] == 1 ) { cnt ++ ; } map [ 2 ] [ 1 ] = map [ 1 ] [ 0 ] ; map [ 1 ] [ 0 ] = 1 ; } else if ( s . equals ( " HOMERUN " ) ) { cnt += map [ 0 ] [ 1 ] ; map [ 0 ] [ 0 ] = 0 ; } else { if ( map [ 2 ] [ 1 ] == 1 ) { cnt ++ ; } map [ 2 ] [ 1 ] = 1 ; map [ 1 ] [ 0 ] = 1 ; } } out . println ( cnt ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int findValue ( int x , int y , int z ) { int g = __gcd ( y , z ) ; return ( x * g ) / __gcd ( x , g ) ; } public static void main ( String [ ] args ) { int x = 30 , y = 40 , z = 400 ; System . out . println ( findValue ( x , y , z ) ) ; } }
import java . util . * ; public class GFG { static void foot ( int a , int b , int c , int d , int x1 , int y1 , int z1 ) { int k = ( - a * x1 - b * y1 - c * z1 - d ) / ( a * a + b * b + c * c ) ; int x2 = a * k + x1 ; int y2 = b * k + y1 ; int z2 = c * k + z1 ; System . out . println ( " x2 = " + x2 + " , y2 = " + y2 + " , z2 = " + z2 ) ; } public static void main ( String [ ] args ) { int a = 1 , b = - 2 , c = 0 , d = 0 ; int x1 = - 1 , y1 = 3 , z1 = 4 ; foot ( a , b , c , d , x1 , y1 , z1 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s1 = sc . nextLine ( ) ; String s2 = sc . nextLine ( ) ; String s3 = sc . nextLine ( ) ; if ( s1 . charAt ( 0 ) == s2 . charAt ( 0 ) && s1 . charAt ( 1 ) == s2 . charAt ( 1 ) && s1 . charAt ( 2 ) == s2 . charAt ( 0 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int getMinimumOps ( int ar [ ] ) { int n = ar . length ; int small = Arrays . stream ( ar ) . min ( ) . getAsInt ( ) ; int large = Arrays . stream ( ar ) . max ( ) . getAsInt ( ) ; int dp [ ] [ ] = new int [ n ] [ large + 1 ] ; for ( int j = small ; j <= large ; j ++ ) dp [ 0 ] [ j ] = Math . abs ( ar [ 0 ] - j ) ; for ( int i = 1 ; i < n ; i ++ ) { int minimum = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { minimum = Math . min ( minimum , dp [ i - 1 ] [ j ] ) ; dp [ i ] [ j ] = minimum + Math . abs ( ar [ i ] - j ) ; } } int ans = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) ans = Math . min ( ans , dp [ n - 1 ] [ j ] ) ; return ans ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 1 , 4 , 3 } ; System . out . println ( getMinimumOps ( ar ) ) ; } }
import java . io . * ; public class GFG { static double PI = 3.14159265 ; static double area_leaf ( double a ) { return ( a * a * ( PI / 2 - 1 ) ) ; } public static void main ( String [ ] args ) { double a = 7 ; System . out . println ( area_leaf ( a ) ) ; } }
import java . io . * ; public class GFG { static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n / 2 ) - 1 ; else return 2 * removeAlternate ( ( ( n - 1 ) / 2 ) ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeAlternate ( n ) ) ; n = 10 ; System . out . println ( removeAlternate ( n ) ) ; } }
public class GFG { static void check ( int n , int m ) { if ( n == 2 || m == 2 || n % m == 0 ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } public static void main ( String [ ] args ) { int m = 3 , n = 9 ; check ( n , m ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] / n >= m ) { cnt ++ ; } } if ( m % 2 == 1 ) { if ( cnt == 0 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } else { if ( cnt == 0 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } } } }
import java . util . * ; public class GFG { static int negProdSubArr ( int arr [ ] , int n ) { int positive = 1 , negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) arr [ i ] = 1 ; else arr [ i ] = - 1 ; if ( i > 0 ) arr [ i ] *= arr [ i - 1 ] ; if ( arr [ i ] == 1 ) positive ++ ; else negative ++ ; } return ( positive * negative ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out . println ( negProdSubArr ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int negProdSubArr ( int arr [ ] , int n ) { int positive = 1 , negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) arr [ i ] = 1 ; else arr [ i ] = - 1 ; if ( i > 0 ) arr [ i ] *= arr [ i - 1 ] ; if ( arr [ i ] == 1 ) positive ++ ; else negative ++ ; } return ( positive * negative ) ; } static int posProdSubArr ( int arr [ ] , int n ) { int total = ( n * ( n + 1 ) ) / 2 ; int cntNeg = negProdSubArr ( arr , n ) ; return ( total - cntNeg ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out . println ( posProdSubArr ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int count = 0 ; while ( n > 0 ) { n = n - n % k ; count ++ ; } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long x = sc . nextLong ( ) ; long y = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long k = Math . min ( x , y ) ; long l = Math . max ( x , y ) ; long m = Math . min ( x , y ) ; long ans = 0 ; if ( k % l == 0 ) { ans = b / l ; } else { ans = b / l ; } System . out . println ( ans - k / l ) ; } }
import java . util . * ; public class GFG { static int minRemove ( int arr [ ] , int n ) { int LIS [ ] = new int [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) LIS [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ; } len = Math . max ( len , LIS [ i ] ) ; } return ( n - len ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 5 , 4 } ; int n = arr . length ; System . out . println ( minRemove ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void print_max ( int a [ ] , int n , int k ) { int max_upto [ ] = new int [ n ] ; int s [ ] = new int [ n ] ; s [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { while ( s [ s [ s [ s [ i ] ] ] < a [ i ] ) { max_upto [ s [ s [ i ] ] ] = i - 1 ; s [ s [ i ] ] = i - 1 ; } s [ i ] = i ; } while ( s [ s [ n - 1 ] ] > 0 ) { max_upto [ s [ n - 1 ] ] = n - 1 ; s [ n - 1 ] = n - 1 ; } int j = 0 ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) { while ( j < i || max_upto [ j ] < i + k - 1 ) j ++ ; System . out . print ( a [ j ] + " " ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int a [ ] = { 9 , 7 , 2 , 4 , 6 , 8 , 2 , 1 , 5 } ; int n = a . length ; int k = 3 ; print_max ( a , n , k ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int max = 0 ; for ( int a = 0 ; a <= 100 ; a ++ ) { for ( int b = 0 ; b <= 100 ; b ++ ) { int c = a * a ; int d = b * b ; int sum = 0 ; while ( c > max ) { sum += c ; c /= 10 ; } max = Math . max ( sum , max ) ; } } return Integer . toString ( max ) ; } }
import java . util . * ; public class GFG { static int countWindowDistinct ( int win [ ] , int k ) { int dist_count = 0 ; for ( int i = 0 ; i < k ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( win [ i ] == win [ j ] ) { break ; } else { j ++ ; } } if ( j == i ) dist_count ++ ; } return dist_count ; } static void countDistinct ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i <= n - k ; i ++ ) System . out . println ( countWindowDistinct ( arr , i , k ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 1 , 3 , 4 , 2 , 3 } ; int k = 4 ; countDistinct ( arr , n , k ) ; } }
public class GFG { static int evenNumSubstring ( String str ) { int len = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < len ; i ++ ) { int temp = str . charAt ( i ) - '0' ; if ( temp % 2 == 0 ) count += ( i + 1 ) ; } return count ; } public static void main ( String [ ] args ) { String str = { '1' , '2' , '3' , '4' } ; System . out . println ( evenNumSubstring ( str ) ) ; } }
import java . util . * ; public class GFG { static int max = 4 ; static int countWays ( int index , int cnt , int dp [ ] [ ] , int n , int m , int k ) { if ( index == n ) { if ( cnt == k ) return 1 ; else return 0 ; } if ( dp [ index ] [ cnt ] != - 1 ) return dp [ index ] [ cnt ] ; int ans = 0 ; ans += countWays ( index + 1 , cnt , dp , n , m , k ) ; ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k ) ; dp [ index ] [ cnt ] = ans ; return dp [ index ] [ cnt ] ; } public static void main ( String [ ] args ) { int n = 3 , m = 3 , k = 2 ; int dp [ ] [ ] = new int [ max ] [ n + 1 ] ; for ( int i = 0 ; i < max ; i ++ ) for ( int j = 0 ; j < n + 1 ; j ++ ) dp [ i ] [ j ] = - 1 ; System . out . println ( m * countWays ( 1 , 0 , dp , n , m , k ) ) ; } }
import java . util . * ; public class GFG { static int getSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { sum += i ; } else { sum += i ; } } } return sum - n ; } static void printAliquot ( int n ) { System . out . print ( n + " " ) ; HashSet < Integer > s = new HashSet < Integer > ( ) ; s . add ( n ) ; int next = 0 ; while ( n > 0 ) { n = getSum ( n ) ; if ( s . contains ( n ) ) { System . out . println ( " Repeats with " + n ) ; break ; } System . out . print ( n + " " ) ; s . add ( n ) ; next ++ ; } } public static void main ( String [ ] args ) { printAliquot ( 12 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arr1 = new int [ n ] ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] == arr2 [ i ] ) { System . out . print ( 1 + " " ) ; } else { System . out . print ( 2 + " " ) ; } } } }
import java . util . * ; public class GFG { static void reverseArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n / 2 ; i ++ ) { int temp = arr [ i ] ; arr [ i ] = arr [ ( n + ~ i + 1 ) + ~ 1 + 1 ] ; arr [ ( n + ~ i + 1 ) + ~ 1 + 1 ] = temp ; } } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 7 , 2 , 1 , 6 } ; int n = arr . length ; reverseArray ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } }
public class GFG { static void printSeriesSum ( int N ) { int sum = 0 ; int a = 1 , cnt = 0 ; boolean flag = true ; sum += a ; while ( cnt < N ) { int nextElement = null ; if ( flag ) { nextElement = a * 2 ; sum += nextElement ; flag = ! flag ; } else { nextElement = a * ( 3 / 2 ) ; sum += nextElement ; flag = ! flag ; } a = nextElement ; cnt ++ ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { int N = 8 ; printSeriesSum ( N ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long gcd = gcd ( a , b ) ; long ans1 = a / gcd ; long ans2 = b / gcd ; if ( a % gcd == 0 && b % gcd == 0 ) { ans1 = 1 ; ans2 = 0 ; } else if ( a % gcd == 0 && b % gcd == 0 ) { ans1 = a / gcd + 1 ; ans2 = b / gcd ; } System . out . println ( ans1 + " " + ans2 ) ; } } static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java . util . * ; public class GFG { static int sz = ( int ) 1e5 ; static boolean isPrime [ ] = new boolean [ sz + 1 ] ; static void sieve ( ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i * i <= sz ; i ++ ) { if ( isPrime [ i ] ) { for ( int j = i * i ; j < sz ; j += i ) isPrime [ j ] = false ; } } } static int minDifference ( int L , int R ) { int fst = 0 ; for ( int i = L ; i <= R ; i ++ ) { if ( isPrime [ i ] ) { fst = i ; break ; } } int snd = 0 ; for ( int i = fst + 1 ; i <= R ; i ++ ) { if ( isPrime [ i ] ) { snd = i ; break ; } } if ( snd == 0 ) return - 1 ; int diff = snd - fst ; int left = snd + 1 ; int right = R ; for ( int i = left ; i <= right ; i ++ ) { if ( isPrime [ i ] ) { if ( i - snd <= diff ) { fst = snd ; snd = i ; diff = snd - fst ; } } } return diff ; } public static void main ( String [ ] args ) { sieve ( ) ; int L = 21 , R = 50 ; System . out . println ( minDifference ( L , R ) ) ; } }
public class GFG { static int getMaxLength ( int arr [ ] , int n ) { int start = 0 , preCnt = 0 ; while ( start < n && arr [ start ] == 1 ) { preCnt ++ ; start ++ ; } int end = n - 1 , suffCnt = 0 ; while ( end >= 0 && arr [ end ] == 1 ) { suffCnt ++ ; end -- ; } if ( start > end ) return n ; int midCnt = 0 , result = 0 ; while ( i <= end ) { if ( arr [ i ] == 1 ) { midCnt ++ ; result = Math . max ( result , midCnt ) ; } else { midCnt = 0 ; } i ++ ; } return Math . max ( result , preCnt + suffCnt ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMaxLength ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ d ] ; int [ ] b = new int [ d ] ; int [ ] c = new int [ d ] ; for ( int i = 0 ; i < d ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ d + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < d ; i ++ ) { dp [ i ] [ 0 ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { if ( dp [ i ] [ j ] >= 0 && dp [ i ] [ j ] <= c [ j ] ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j ] + Math . abs ( a [ i ] - b [ j ] ) ) ; } } } System . out . println ( dp [ d ] [ n ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) < s . charAt ( i - 1 ) ) { System . out . println ( " YES " ) ; System . out . println ( i + " " + ( i + 1 ) ) ; return ; } } System . out . println ( " NO " ) ; } }
public class GFG { static double sqroot ( double s ) { double pSq = 0 , N = 0 ; for ( int i = s ; i >= 1 ; i -- ) { for ( int j = 1 ; j * j == i ; j ++ ) { pSq = i ; N = j ; break ; } } if ( pSq > 0 ) { break ; } double d = s - pSq ; double P = d / ( 2.0 * N ) ; double A = N + P ; double sqrt_of_s = A - ( ( P * P ) / ( 2 * A ) ) ; return sqrt_of_s ; } public static void main ( String [ ] args ) { double num = 9.2345 ; double sqroot_of_num = sqroot ( num ) ; System . out . println ( " Square root of " + num + " = " + sqroot_of_num / 100000.0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; int prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > prev ) { count ++ ; prev = arr [ i ] ; } else { prev = arr [ i ] ; } } if ( count % 2 == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( count ) ; } } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int R = sc . nextInt ( ) ; int N = sc . nextInt ( ) ; if ( ( R | N ) == 0 ) { break ; } int [ ] [ ] dp = new int [ N + 1 ] [ 2 ] ; for ( int i = 0 ; i < N ; i ++ ) { int x = sc . nextInt ( ) + 1 ; int y = sc . nextInt ( ) + 1 ; dp [ i ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , x ) ; dp [ i ] [ 1 ] = Math . max ( dp [ i ] [ 1 ] , y ) ; } double left = 0 , right = 20 ; for ( int i = 0 ; i < dp . length ; i ++ ) { for ( int j = 0 ; j < dp [ i ] . length ; j ++ ) { if ( dp [ i ] [ j ] >= R + EPS ) { left = Math . min ( left , dp [ i ] [ j ] ) ; } else { right = Math . min ( right , dp [ i ] [ j ] ) ; } } } println ( " " + left ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] > ans ) { ans = arr [ i ] ; } } System . out . println ( ans + 1 ) ; } } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d = d * 10 + ( n - i ) / 10 ; } println ( String . valueOf ( d ) ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static int maxAlternateSum ( int arr [ ] , int n ) { if ( n == 1 ) return arr [ 0 ] ; int dec [ ] = new int [ n + 1 ] ; int inc [ ] = new int [ n + 1 ] ; dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) { dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr [ i ] ) ; flag = 1 ; } else if ( arr [ j ] < arr [ i ] && flag == 1 ) { inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr [ i ] ) ; } } } int result = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( result < inc [ i ] ) result = inc [ i ] ; if ( result < dec [ i ] ) result = dec [ i ] ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 2 , 3 , 5 , 7 , 9 , 10 } ; int n = arr . length ; System . out . println ( " Maximum sum = " + maxAlternateSum ( arr , n ) ) ; } }
public class GFG { static void generateArr ( int arr [ ] , int n ) { if ( n == 1 ) { System . out . println ( arr [ 0 ] ) ; return ; } int barr [ ] = new int [ n ] ; barr [ 0 ] = arr [ 0 ] & arr [ 1 ] ; barr [ n - 1 ] = arr [ n - 1 ] & arr [ n - 2 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) barr [ i ] = arr [ i - 1 ] & arr [ i + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( barr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; generateArr ( arr , n ) ; } }
import java . util . * ; public class GFG { static void ReplaceElements ( int arr [ ] , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev ^ arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev ^ arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; ReplaceElements ( arr , arr . length ) ; for ( int i = 0 ; i < arr . length ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } }
import java . util . * ; public class GFG { static void ReplaceElements ( int arr [ ] , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev + arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev + arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } }
public class GFG { static int countTriplets ( int A , int B , int C ) { int ans = 0 ; for ( int i = 1 ; i <= A ; i ++ ) for ( int j = 1 ; j <= B ; j ++ ) for ( int k = 1 ; k <= C ; k ++ ) if ( i * k > j * j ) ans ++ ; return ans ; } public static void main ( String [ ] args ) { int A = 3 , B = 2 , C = 2 ; System . out . println ( countTriplets ( A , B , C ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 100000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int smallestPrime ( int d ) { int l = ( int ) Math . pow ( 10 , d - 1 ) ; int r = ( int ) Math . pow ( 10 , d ) - 1 ; for ( int i = l ; i <= r ; i ++ ) if ( prime [ i ] ) return i ; return - 1 ; } static int largestPrime ( int d ) { int l = ( int ) Math . pow ( 10 , d - 1 ) ; int r = ( int ) Math . pow ( 10 , d ) - 1 ; for ( int i = r ; i >= l ; i -- ) if ( prime [ i ] ) return i ; return - 1 ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int queries [ ] = { 2 , 5 } ; int q = queries . length ; for ( int i = 0 ; i < q ; i ++ ) { System . out . println ( smallestPrime ( queries [ i ] ) + " " + largestPrime ( queries [ i ] ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] dist = new int [ n ] ; int [ ] w = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { dist [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { w [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { dp [ i ] [ j ] = Integer . MAX_VALUE ; } } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j - 1 ] + dist [ j ] * w [ i ] ) ; } } System . out . println ( dp [ n ] [ n ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , m , a , d , t ; static void solve ( ) { int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int cnt = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( arr [ i ] == a * n ) cnt ++ ; else { int min = arr [ i ] / a ; int max = arr [ i ] % a ; if ( max < min ) max = min ; cnt += ( max - min ) / a + 1 ; arr [ i ] = arr [ min ] ; } } str . append ( cnt ) . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } String st [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Integer . parseInt ( st [ 0 ] ) ; m = Integer . parseInt ( st [ 1 ] ) ; a = Integer . parseInt ( st [ 2 ] ) ; d = Integer . parseInt ( st [ 3 ] ) ; t = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; for ( int i = 0 ; i < t ; i ++ ) { solve ( ) ; } pw . println ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int ans = n * ( n + 1 ) / 2 ; for ( int i = 1 ; i <= n ; i ++ ) { ans -= i * 2 ; } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; String s = sc . next ( ) ; int count = 0 ; int count2 = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) { count ++ ; } else { count2 ++ ; } } if ( count % 2 == 0 ) { pw . println ( " First " ) ; } else if ( count2 % 2 == 0 ) { pw . println ( " Second " ) ; } else { pw . println ( " First " ) ; } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static int reverse ( int n ) { int rev = 0 ; while ( n != 0 ) { rev = rev * 10 + ( n % 10 ) ; n /= 10 ; } return rev ; } static void getSum ( int n ) { int sumOdd = 0 , sumEven = 0 , c = 1 ; while ( n != 0 ) { if ( c % 2 == 0 ) sumEven += n % 10 ; else sumOdd += n % 10 ; n /= 10 ; c ++ ; } System . out . println ( " Sum odd = " + sumOdd ) ; System . out . println ( " Sum even = " + sumEven ) ; } public static void main ( String [ ] args ) { int n = 457892 ; getSum ( n ) ; } }
public class GFG { static void disp ( int row_no , int block ) { System . out . println ( row_no * block ) ; } static int row ( int ht , int h ) { return ht / h ; } static void calculate ( int l , int w , int h , int a , int ht ) { int no_block = ( 4 * a ) / l ; if ( h < w ) row_no = row ( ht , w ) ; else row_no = row ( ht , h ) ; disp ( row_no , no_ block ) ; } public static void main ( String [ ] args ) { int l = 50 , w = 20 , h = 35 , a = 700 , ht = 140 ; calculate ( l , w , h , a , ht ) ; } }
import java . util . * ; public class GFG { static String bin [ ] = { "000" , "001" , "010" , "011" , "100" , "101" , "110" , "111" } ; static int maxFreq ( String s ) { String binary = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) binary += bin [ s . charAt ( i ) - '0' ] ; binary = binary . substring ( 0 , binary . length ( ) - 1 ) ; int count = 1 , prev = - 1 , j = 0 ; for ( int i = binary . length ( ) - 1 ; i >= 0 ; i -- ) { if ( binary . charAt ( i ) == '1' ) { count = Math . max ( count , j - prev ) ; prev = j ; } j ++ ; } return count ; } public static void main ( String [ ] args ) { String octal = "13" ; System . out . println ( maxFreq ( octal ) ) ; } }
public class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } static String encryptString ( String s , int n , int k ) { int cv [ ] = new int [ n ] ; int cc [ ] = new int [ n ] ; if ( isVowel ( s . charAt ( 0 ) ) ) cv [ 0 ] = 1 ; else cc [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { cv [ i ] = cv [ i - 1 ] + isVowel ( s . charAt ( i ) ) ; cc [ i ] = cc [ i - 1 ] + ( isVowel ( s . charAt ( i ) ) == false ) ; } String ans = " " ; int prod = 0 ; prod = cc [ k - 1 ] * cv [ k - 1 ] ; ans += prod ; for ( int i = k ; i < s . length ( ) ; i ++ ) { prod = ( cc [ i ] - cc [ i - k ] ) * ( cv [ i ] - cv [ i - k ] ) ; ans += prod ; } return ans ; } public static void main ( String [ ] args ) { String s = " hello " ; int n = s . length ( ) ; int k = 2 ; System . out . println ( encryptString ( s , n , k ) ) ; } }
import java . io . * ; public class GFG { static double harmonicMean ( int arr [ ] , int freq [ ] , int n ) { double sum = 0 , frequency_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + freq [ i ] / arr [ i ] ; frequency_sum = frequency_sum + freq [ i ] ; } return ( sum / ( double ) ( frequency_sum / ( double ) ( frequency_sum / ( double ) ( frequency_sum / ( double ) ( frequency_sum ) ) ) ) ; } public static void main ( String [ ] args ) { int num [ ] = { 13 , 14 , 15 , 16 , 17 } ; int freq [ ] = { 2 , 5 , 13 , 7 , 3 } ; int n = num . length ; System . out . println ( harmonicMean ( num , freq , n ) ) ; } }
import java . io . * ; public class GFG { static double polyarea ( int n , int a ) { if ( a < 0 && n < 0 ) return - 1 ; double A = ( a * a * n ) / ( 4 * Math . tan ( ( 180 / n ) * Math . PI / 180 ) ) ; return A ; } public static void main ( String [ ] args ) { int a = 9 , n = 6 ; System . out . println ( polyarea ( n , a ) ) ; } }
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int lcm ( int a , int b ) { return ( a / __gcd ( a , b ) * b ) ; } static int getMinValue ( int c ) { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= Math . pow ( c , 1 / 2 ) ; i ++ ) { if ( c % i == 0 && lcm ( i , c / i ) == c ) { ans = Math . min ( ans , i ) ; } } return ans ; } public static void main ( String [ ] args ) { int c = 6 ; System . out . println ( getMinValue ( c ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int min = sc . nextInt ( ) ; int max = sc . nextInt ( ) ; if ( ( m | n | min | max ) == 0 ) break ; int [ ] p = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) p [ i ] = sc . nextInt ( ) ; int [ ] d = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) d [ i ] = p [ i ] - p [ i + 1 ] ; int ans = min ; for ( int i = min ; i <= max ; i ++ ) { if ( d [ i ] >= i ) { ans = i ; break ; } } System . out . println ( ans ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long b = sc . nextLong ( ) ; long q = sc . nextLong ( ) ; long i = sc . nextLong ( ) ; long m = sc . nextLong ( ) ; HashSet < Long > hs = new HashSet < > ( ) ; for ( long j = 0 ; j < m ; j ++ ) { hs . add ( sc . nextLong ( ) ) ; } long inf = Long . MAX_VALUE ; for ( long j = 0 ; j < m ; j ++ ) { if ( hs . contains ( j ) ) inf = Math . min ( inf , j * q ) ; } System . out . println ( inf ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] ans = new int [ n ] ; int [ ] prev = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { prev [ i ] = arr [ i ] ; ans [ i ] = i + 1 ; } Arrays . sort ( ans ) ; System . out . println ( ans [ prev [ 0 ] ] + " " + ans [ prev [ n - 1 ] ] ) ; } } }
import java . io . * ; public class GFG { static double findIndex ( int n ) { double fibo = 2.078087 * Math . log ( n ) + 1.672276 ; return Math . round ( fibo ) ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( findIndex ( n ) ) ; } }
public class GFG { static boolean isSmaller ( String str1 , String str2 ) { int n1 = str1 . length ( ) , n2 = str2 . length ( ) ; if ( n1 < n2 ) return true ; if ( n2 < n1 ) return false ; for ( int i = 0 ; i < n1 ; i ++ ) if ( str1 . charAt ( i ) < str2 . charAt ( i ) ) return true ; else if ( str1 . charAt ( i ) > str2 . charAt ( i ) ) return false ; return false ; } static void findDiff ( String str1 , String str2 ) { if ( isSmaller ( str1 , str2 ) ) { String temp = str1 ; str1 = str2 ; str2 = temp ; } String str3 = " " ; int n1 = str1 . length ( ) , n2 = str2 . length ( ) ; str1 = str1 . substring ( 0 , n1 ) ; str2 = str2 . substring ( 0 , n2 ) ; int carry = 0 ; for ( int i = 0 ; i < n2 ; i ++ ) { int sub = ( str1 . charAt ( i ) - '0' ) - ( str2 . charAt ( i ) - '0' ) - carry ; if ( sub < 0 ) sub = sub + 10 ; else carry = 1 ; str3 = str3 + String . valueOf ( sub ) ; } for ( int i = n2 ; i < n1 ; i ++ ) { int sub = ( str1 . charAt ( i ) - '0' ) - carry ; if ( sub < 0 ) sub = sub + 10 ; else carry = 0 ; str3 = str3 + String . valueOf ( sub ) ; } str3 = str3 + str ( ) ; System . out . println ( str3 ) ; } public static void main ( String [ ] args ) { String str = " " ; findDiff ( str , str ) ; } }
public class GFG { static int minSwaps ( String s1 , String s2 ) { int c0 = 0 , c1 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == '0' && s2 . charAt ( i ) == '1' ) c0 ++ ; else if ( s1 . charAt ( i ) == '1' && s2 . charAt ( i ) == '0' ) c1 ++ ; } int ans = c0 / 2 + c1 / 2 ; if ( c0 % 2 == 0 && c1 % 2 == 0 ) return ans ; else if ( ( c0 + c1 ) % 2 == 0 ) return ans + 2 ; else return - 1 ; } public static void main ( String [ ] args ) { String s1 = "0011" , s2 = "1111" ; int ans = minSwaps ( s1 , s2 ) ; System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] dp = new int [ n + 1 ] ; dp [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i ] + a [ i ] ) ; } out . println ( dp [ n ] ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int left = 0 , right = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' ^ ' ) { left = i ; } else { right = i ; } } if ( left > right ) { System . out . println ( " left " ) ; } else { System . out . println ( " right " ) ; } sc . close ( ) ; } }
import java . util . * ; public class GFG { static void normalSieve ( int n ) { int prime [ ] = new int [ n / 2 ] ; for ( int i = 3 ; i * i < n ; i ++ ) { if ( prime [ i / 2 ] == 0 ) { int j = i * i ; while ( j < n ) { prime [ j / 2 ] = 1 ; j += i * 2 ; } } } System . out . print ( 2 + " " ) ; for ( int i = 3 ; i < n ; i ++ ) { if ( prime [ i / 2 ] == 0 ) { System . out . print ( i + " " ) ; } } } public static void main ( String [ ] args ) { int n = 100 ; normalSieve ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int cnt = 0 ; int small = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= 97 && s . charAt ( i ) <= 122 ) { cnt ++ ; } else if ( s . charAt ( i ) >= 65 && s . charAt ( i ) <= 90 ) { small ++ ; } else if ( s . charAt ( i ) >= 97 && s . charAt ( i ) <= 122 ) { small ++ ; } } if ( small >= cnt ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { System . out . print ( s . charAt ( i ) ) ; } } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { System . out . print ( s . charAt ( i ) ) ; } } } }
import java . util . * ; public class GFG { static int frequencyOfSmallest ( int n , int arr [ ] ) { int mn = arr [ 0 ] ; int freq = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < mn ) { mn = arr [ i ] ; freq = 1 ; } else if ( arr [ i ] == mn ) { freq ++ ; } } return freq ; } public static void main ( String [ ] args ) { int N = 5 ; int arr [ ] = { 3 , 2 , 3 , 4 , 4 } ; System . out . println ( frequencyOfSmallest ( N , arr ) ) ; } }
public class GFG { static boolean isSubArray ( int A [ ] , int B [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( A [ i ] == B [ j ] ) { i ++ ; j ++ ; if ( j == m ) return true ; } else { i = i - j + 1 ; j = 0 ; } } return false ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 3 , 0 , 5 , 1 , 1 , 2 } ; int n = A . length ; int B [ ] = { 3 , 0 , 5 , 1 } ; int m = B . length ; if ( isSubArray ( A , B , n , m ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += Math . abs ( arr [ i ] - arr [ i + 1 ] ) + 1 ; arr [ i + 1 ] = arr [ i ] ; } System . out . println ( sum ) ; } }
public class GFG { static int calculateSum ( int n , int k ) { int res = 1 ; int MOD = 1000000007 ; for ( int i = 0 ; i < k ; i ++ ) res = ( res * n ) % MOD ; return res ; } public static void main ( String [ ] args ) { int n = 4 , k = 3 ; System . out . println ( calculateSum ( n , k ) ) ; } }
import java . util . * ; public class Main { static final int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ 4 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( i == j ) { dp [ i ] [ j ] = 0 ; } else { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j ] ; } } } System . out . println ( dp [ n ] [ 0 ] ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; int c = in . nextInt ( ) ; int d = a * b ; out . println ( c / d + 0.5 ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 100 ; static int binomialCoeff ( int n , int k ) { int C [ ] = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = Math . min ( i , k ) ; j > 0 ; j -- ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; } static int sumOfproduct ( int n ) { return binomialCoeff ( 2 * n , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfproduct ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s1 = sc . next ( ) ; String s2 = sc . next ( ) ; if ( s1 . equals ( s2 ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class GFG { static int pairCount ( int arr [ ] , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_val ) max_val = arr [ i ] ; } boolean prime [ ] = new boolean [ max_val + 1 ] ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) count ++ ; } return ( count * ( count - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( pairCount ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int getPrime ( int arr [ ] , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_val ) max_val = arr [ i ] ; } boolean prime [ ] = new boolean [ max_val + 1 ] ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int maximum = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) maximum = Math . max ( maximum , arr [ i ] ) ; } return maximum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 10 , 15 , 7 , 6 , 8 , 13 } ; int n = arr . length ; System . out . println ( getPrime ( arr , n ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { sum += NUMBERS [ i ] ; } return Integer . toString ( sum ) ; } }
import java . util . * ; public class GFG { static void findElements ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
import java . util . * ; public class GFG { static void printDistinct ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { i ++ ; } } else { System . out . print ( arr [ i ] + " " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; printDistinct ( arr , arr . length ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a * b ) ; } }
public class GFG { static int nth_term ( int a , int b , int n ) { int z ; if ( n % 6 == 1 ) z = a ; else if ( n % 6 == 2 ) z = b ; else if ( n % 6 == 3 ) z = b - a ; else if ( n % 6 == 4 ) z = - a ; else if ( n % 6 == 5 ) z = - b ; if ( n % 6 == 0 ) z = - ( b - a ) ; return z ; } public static void main ( String [ ] args ) { int a = 10 , b = 17 , n = 3 ; System . out . println ( nth_term ( a , b , n ) ) ; } }
public class GFG { static int findSubSequence ( String s , int num ) { int res = 0 ; for ( int i = 0 ; num > 0 ; i ++ ) { if ( num % 2 == 1 ) res += s . charAt ( i ) - '0' ; } return res ; } static int combinedSum ( String s ) { int n = s . length ( ) ; int c_sum = 0 ; int ran = ( 1 << n ) - 1 ; for ( int i = 0 ; i <= ran ; i ++ ) c_sum += findSubSequence ( s , i ) ; return c_sum ; } public static void main ( String [ ] args ) { String s = "123" ; System . out . println ( combinedSum ( s ) ) ; } }
public class GFG { static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 , dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { dp0 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumCost ( a , n ) ) ; } }
import java . io . * ; public class GFG { static int countMultiples ( int n ) { return n / 3 + n / 7 - n / 21 ; } public static void main ( String [ ] args ) { int n = countMultiples ( 25 ) ; System . out . println ( " Count = " + n ) ; } }
import java . util . * ; public class GFG { static int SIZE = 26 ; static int longSub ( String str , int k ) { int [ ] freq = new int [ 26 ] ; int start = 0 , maxLen = 0 , n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char ch = str . charAt ( i ) ; freq [ ch - ' a ' ] ++ ; if ( freq [ ch - ' a ' ] > k ) { if ( maxLen < ( i - start ) ) maxLen = i - start ; while ( freq [ ch - ' a ' ] > k ) { freq [ str . charAt ( start ) - ' a ' ] -- ; start ++ ; } } } if ( maxLen < ( n - start ) ) maxLen = n - start ; return maxLen ; } public static void main ( String [ ] args ) { String str = " babcaag " ; int k = 1 ; System . out . println ( " Length = " + longSub ( str , k ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x <= y ) { if ( a + y >= 500 ) { a += x ; } else { b += y ; } } else { if ( a + y >= 500 ) { a += x ; } else { b += y ; } } } System . out . println ( a + " " + b ) ; } }
public class Solution { public String toHex ( int num ) { if ( num == 0 ) return "0" ; String mp = "0123456789abcdef " ; String ans = " " ; for ( int i = 0 ; i < 8 ; i ++ ) { int n = num & 15 ; String c = mp . substring ( n , n + 1 ) ; ans = c + ans ; num = num >> 4 ; } return ans . trim ( ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int num = 26 ; String out = sObj . toHex ( num ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int l = 0 ; int r = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( i == j ) { if ( l == 0 ) { System . out . print ( " L " ) ; l = 1 ; } else if ( l == 1 ) { System . out . print ( " S " ) ; l = 2 ; } else if ( l == 2 ) { System . out . print ( " S " ) ; l = 1 ; } else if ( l == 3 ) { System . out . print ( " S " ) ; l = 0 ; } } else if ( j == m ) { if ( l == 0 ) { System . out . print ( " L " ) ; l = 1 ; } else if ( l == 1 ) { System . out . print ( " S " ) ; l = 0 ; } else if ( l == 2 ) { System . out . print ( " S " ) ; l = 0 ; } } } } if ( l == 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; for ( int i = 0 ; i < l ; i ++ ) { System . out . print ( i + " " ) ; } } } }
public class GFG { static void longestString ( String str1 , String str2 ) { int count1 [ ] = new int [ 26 ] ; int count2 [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) { count1 [ str1 . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) { count2 [ str2 . charAt ( i ) - ' a ' ] ++ ; } String result = " " ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 1 ; j <= Math . min ( count1 [ i ] , count2 [ i ] ) ; j ++ ) { result += ( char ) ( ' a ' + i ) ; } } System . out . println ( result ) ; } public static void main ( String [ ] args ) { String str1 = " geeks " ; String str2 = " cake " ; longestString ( str1 , str2 ) ; } }
import java . util . * ; public class GFG { static int msb ( int x ) { int ret = 0 ; while ( ( x >> ( ret + 1 ) ) != 0 ) ret ++ ; return ret ; } static int xorRange ( int l , int r ) { int max_bit = msb ( r ) ; int mul = 2 ; int ans = 0 ; for ( int i = 1 ; i <= max_bit ; i ++ ) { if ( ( l / mul ) * mul == ( r / mul ) * mul ) { if ( ( ( l & ( 1 << i ) ) != 0 ) && ( ( r - l + 1 ) % 2 == 1 ) ) ans += mul ; mul = mul * 2 ; continue ; } int odd_c = 0 ; if ( ( ( l & ( 1 << i ) ) != 0 ) && ( l % 2 == 1 ) ) odd_c = ( odd_c ^ 1 ) ; if ( ( ( r & ( 1 << i ) ) != 0 ) && ( r % 2 == 0 ) ) odd_c = ( odd_c ^ 1 ) ; if ( odd_c ) ans += mul ; mul = mul * 2 ; } int zero_bit_cnt = ( r - l + 1 ) / 2 ; if ( ( l % 2 == 1 ) && ( r % 2 == 1 ) ) zero_bit_cnt ++ ; if ( zero_bit_cnt % 2 == 1 ) ans ++ ; return ans ; } public static void main ( String [ ] args ) { int l = 1 , r = 4 ; System . out . println ( xorRange ( l , r ) ) ; } }
public class GFG { static void q1 ( char [ ] s , int i ) { if ( i == s . length ) { System . out . println ( " Yes " ) ; return ; } if ( s [ i ] == ' a ' ) q1 ( s , i + 1 ) ; else q2 ( s , i + 1 ) ; } static void q2 ( char [ ] s , int i ) { if ( i == s . length ) { System . out . println ( " No " ) ; return ; } if ( s [ i ] == ' a ' ) q1 ( s , i + 1 ) ; else q2 ( s , i + 1 ) ; } static void q3 ( char [ ] s , int i ) { if ( i == s . length ) { System . out . println ( " Yes " ) ; return ; } if ( s [ i ] == ' a ' ) q4 ( s , i + 1 ) ; else q3 ( s , i + 1 ) ; } static void q4 ( char [ ] s , int i ) { if ( i == s . length ) { System . out . println ( " No " ) ; return ; } if ( s [ i ] == ' a ' ) q1 ( s , i + 1 ) ; else q4 ( s , i + 1 ) ; } public static void q0 ( char [ ] s , int i ) { if ( i == s . length ) { System . out . println ( " No " ) ; return ; } if ( s [ i ] == ' a ' ) q1 ( s , i + 1 ) ; else q3 ( s , i + 1 ) ; } public static void main ( String [ ] args ) { char [ ] s = " abba " . toCharArray ( ) ; String str = "abb " ; q0 ( s , 0 ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int m = sc . nextInt ( ) ; if ( m == 0 ) break ; int [ ] [ ] dp = new int [ m ] [ 2 ] ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) dp [ i ] [ j ] = sc . nextInt ( ) ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) { for ( int k = 0 ; k < 2 ; k ++ ) { if ( dp [ i ] [ j ] == 0 ) continue ; if ( dp [ i ] [ j ] == 0 ) dp [ i ] [ j ] = dp [ i + 1 ] [ j ] + dp [ i + 1 ] [ j + 1 ] ; else dp [ i ] [ j ] = dp [ i + 1 ] [ j ] + dp [ i + 1 ] [ j + 1 ] ; } } int g = sc . nextInt ( ) ; for ( int i = 0 ; i < g ; i ++ ) System . out . println ( dp [ i ] [ 0 ] ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static void findTime ( int T , int K ) { int minutes = ( T - '0' ) * 10 + T - '0' ; minutes += 60 ; minutes += T - '0' ; int hour = ( minutes / 60 ) % 24 ; int min = minutes % 60 ; if ( hour < 10 ) System . out . print ( "0" + hour + " : " ) ; else System . out . print ( hour + " : " ) ; if ( min < 10 ) System . out . print ( "0" + min ) ; else System . out . print ( min ) ; } public static void main ( String [ ] args ) { int T = "21:39" ; int K = 43 ; findTime ( T , K ) ; } }
import java . util . * ; public class GFG { static void maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = Integer . MIN_VALUE , maxSum = Integer . MIN_VALUE ; for ( int i = 0 ; i < n - m ; i ++ ) { int product = 1 , sum = 0 ; for ( int j = i ; j < m + i ; j ++ ) { product = product * ( str . charAt ( j ) - '0' ) ; sum = sum + ( str . charAt ( j ) - '0' ) ; } maxProd = Math . max ( maxProd , product ) ; maxSum = Math . max ( maxSum , sum ) ; } System . out . println ( " Maximum Product = " + maxProd ) ; System . out . println ( " Maximum Sum = " + maxSum ) ; } public static void main ( String [ ] args ) { String str = "3675356291" ; int m = 5 ; maxProductSum ( str , m ) ; } }
public class GFG { static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + Math . min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) ; } static int min ( int x , int y , int z ) { if ( x < y ) return x ; else if ( x < z ) return z ; else return y ; } public static void main ( String [ ] args ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 8 , 2 } , { 1 , 5 , 3 } } ; System . out . println ( minCost ( cost , 2 , 2 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int diff = Math . abs ( arr [ i ] - arr [ n - 1 ] ) ; if ( diff < min ) { min = diff ; } } System . out . println ( min ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; int q = in . nextInt ( ) ; if ( n == 0 && q == 0 ) return false ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( i == j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] - dp [ i ] [ j ] ; } } if ( dp [ n ] [ n ] != 0 ) return false ; if ( solve ( ) ) return true ; out . println ( " ? " ) ; return false ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static int sumDivisibles ( int A , int B , int M ) { int sum = 0 ; for ( int i = A ; i <= B ; i ++ ) { if ( i % M == 0 ) { sum += i ; } } return sum ; } public static void main ( String [ ] args ) { int A = 6 , B = 15 , M = 3 ; System . out . println ( sumDivisibles ( A , B , M ) ) ; } }
import java . util . * ; public class GFG { static int countNumbersWith4 ( int n ) { if ( n < 4 ) return 0 ; int d = ( int ) Math . log10 ( n ) ; int a [ ] = new int [ d + 1 ] ; a [ 0 ] = 0 ; if ( a . length > 1 ) a [ 1 ] = 1 ; for ( int i = 2 ; i <= d ; i ++ ) a [ i ] = a [ i - 1 ] * 9 + ( int ) Math . ceil ( Math . pow ( 10 , i - 1 ) ) ; int p = ( int ) Math . ceil ( Math . pow ( 10 , d ) ) ; int msd = n / p ; if ( msd == 4 ) return ( msd ) * a [ d ] + ( n % p ) + 1 ; if ( msd > 4 ) return ( msd - 1 ) * a [ d ] + p + countNumbersWith4 ( n % p ) ; return ( msd ) * a [ d ] + countNumbersWith4 ( n % p ) ; } public static void main ( String [ ] args ) { int n = 328 ; System . out . println ( " Count of numbers from 1 to " + n + " that have 4 as a digit is " + countNumbersWith4 ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ 6 ] ; a [ 0 ] = x ; a [ 1 ] = y ; a [ 2 ] = - x ; a [ 3 ] = - y ; a [ 4 ] = x ; a [ 5 ] = y ; a [ 6 ] = - x ; System . out . println ( a [ 0 ] + a [ 1 ] + a [ 2 ] + a [ 3 ] + a [ 4 ] ) ; } }
import java . util . * ; public class GFG { static int INT_MIN = - 2 << 31 ; static int INT_MAX = 2 << 31 ; static void findPostOrderUtil ( int pre [ ] , int n , int minval , int maxval , int preIndex ) { if ( preIndex == n ) return ; if ( pre [ preIndex ] < minval || pre [ preIndex ] > maxval ) return ; int val = pre [ preIndex ] ; preIndex ++ ; findPostOrderUtil ( pre , n , minval , val , preIndex ) ; findPostOrderUtil ( pre , n , val , maxval , preIndex ) ; System . out . print ( val + " " ) ; } static void findPostOrder ( int pre [ ] , int n ) { int preIndex = 0 ; findPostOrderUtil ( pre , n , INT_MIN , INT_MAX , preIndex ) ; } public static void main ( String [ ] args ) { int pre [ ] = { 40 , 30 , 35 , 80 , 100 } ; int n = pre . length ; findPostOrder ( pre , n ) ; } }
import java . util . * ; public class GFG { static int countWays ( int n , int arr [ ] , int k ) { if ( k <= 0 || k >= n ) return 0 ; Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i : arr ) s . add ( i ) ; if ( s . size ( ) <= k ) return 0 ; return s . size ( ) - k ; } public static void main ( String [ ] args ) { int arr [ ] = { 100 , 200 , 400 , 50 } ; int k = 3 ; int n = arr . length ; System . out . println ( countWays ( n , arr , k ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { String s = in . next ( ) ; if ( s . length ( ) == 0 ) return false ; int n = s . length ( ) ; int [ ] a = new int [ n ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' : ' ) { a [ i ] = 0 ; } else if ( s . charAt ( i ) == ' : ' ) { a [ i ] = 1 ; } else if ( s . charAt ( i ) == ' : ' ) { a [ i ] = 2 ; } else { a [ i ] = 4 ; } } StringBuilder sb = new StringBuilder ( ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { sb . append ( "0000" ) ; } else { sb . append ( a [ i ] ) ; } } out . println ( sb . toString ( ) ) ; return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static boolean isPrime ( int n ) { boolean flag = true ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { flag = false ; break ; } } return ( flag == true ) ; } static boolean isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } static int countInterestingPrimes ( int n ) { int answer = 0 ; for ( int i = 2 ; i < n ; i ++ ) { if ( isPrime ( i ) != null ) { for ( int j = 1 ; j * j * j * j <= i ; j ++ ) { if ( isPerfectSquare ( i - j * j * j * j ) ) { answer ++ ; break ; } } } } return answer ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( countInterestingPrimes ( N ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; char [ ] [ ] a = new char [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . next ( ) . toCharArray ( ) ; } Arrays . sort ( a ) ; boolean flag = true ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] [ 0 ] != a [ i + 1 ] [ 0 ] ) { flag = false ; break ; } } if ( flag == true ) { out . println ( " Yes " ) ; } else { out . println ( " No " ) ; } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static int findNum ( int div [ ] , int rem [ ] , int N ) { int num = rem [ N - 1 ] ; for ( int i = N - 2 ; i >= 0 ; i -- ) { num = num * div [ i ] + rem [ i ] ; } return num ; } public static void main ( String [ ] args ) { int div [ ] = { 8 , 3 } ; int rem [ ] = { 2 , 2 } ; int N = div . length ; System . out . println ( findNum ( div , rem , N ) ) ; } }
import java . util . * ; public class GFG { static void segregate0and1 ( int arr [ ] , int size ) { int type0 = 0 , type1 = size - 1 ; while ( type0 < type1 ) { if ( arr [ type0 ] == 1 ) { swap ( arr , type0 , arr [ type1 ] ) ; type1 -- ; } else { type0 ++ ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 1 , 0 , 1 , 1 , 1 } ; int arr_size = arr . length ; segregate0and1 ( arr , arr_size ) ; System . out . print ( " Array after segregation is " ) ; for ( int i = 0 ; i < arr_size ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; System . out . println ( a [ 0 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int dx = Math . abs ( s . charAt ( 0 ) - s . charAt ( 0 ) ) ; int dy = Math . abs ( t . charAt ( 0 ) - s . charAt ( 0 ) ) ; int [ ] dxs = { 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] a = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } long ans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { ans += ( i + 1 ) * ( w - a [ i ] [ j ] ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] == 1 ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; if ( a == b ) { ans = 0 ; } else if ( a > b ) { ans = a ^ b ; } else { ans = a | b ; } System . out . println ( ans ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( n / 2 ) ; } else { System . out . println ( n / 2 + 1 ) ; } } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { String s = in . next ( ) ; int [ ] c = new int [ 3 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' M ' ) c [ 0 ] ++ ; else c [ 1 ] ++ ; } int m = c [ 0 ] ; int n = c [ 1 ] ; int mn = c [ 2 ] ; int nn = c [ 3 ] ; for ( int i = 0 ; i < m ; i ++ ) { if ( c [ i ] == m ) { n = i ; mn = n ; break ; } } out . println ( n * mn * mn ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( a [ i ] == b [ j ] ) { ans ++ ; i ++ ; j ++ ; } else if ( a [ i ] < b [ j ] ) { i ++ ; j ++ ; } else { i ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { while ( true ) { String s = sc . next ( ) ; if ( s . equals ( " ? " ) ) break ; int a = Integer . parseInt ( s . substring ( 0 , 2 ) ) ; int b = Integer . parseInt ( s . substring ( 3 ) ) ; if ( s . equals ( " + " ) ) System . out . println ( a + b ) ; else if ( s . equals ( " - " ) ) System . out . println ( a - b ) ; else if ( s . equals ( " * " ) ) System . out . println ( a * b ) ; else if ( s . equals ( " / " ) ) System . out . println ( a / b ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] diff = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { diff [ i ] = a [ i ] - a [ i + 1 ] ; } int count = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int start = i ; int end = i + 1 ; while ( start < n && diff [ start ] > 0 ) { start ++ ; } if ( start == n ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int MAX = 256 ; static int countPairs ( String s ) { int [ ] cnt = new int [ MAX ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ s . charAt ( i ) - 97 ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { ans += cnt [ i ] * cnt [ i ] ; } return ans ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( countPairs ( s ) ) ; } }
import java . util . * ; public class GFG { static int prime [ ] = new int [ 100005 ] ; static void SieveOfEratosthenes ( int n ) { for ( int i = 0 ; i < prime . length ; i ++ ) prime [ i ] = 1 ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == 1 ) { for ( int i = p * 2 ; i < n ; i += p ) prime [ i ] = 0 ; } } } static void sortedArray ( int arr [ ] , int n ) { SieveOfEratosthenes ( 100005 ) ; ArrayList < Integer > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == 0 ) v . add ( arr [ i ] ) ; } Collections . sort ( v ) ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == 1 ) System . out . print ( arr [ i ] + " " ) ; else System . out . print ( v . get ( j ++ ) + " " ) ; } } public static void main ( String [ ] args ) { int n = 6 ; int arr [ ] = { 100 , 11 , 500 , 2 , 17 , 1 } ; sortedArray ( arr , n ) ; } }
import java . util . * ; public class GFibonacciFreq { static void createHash ( HashSet < Integer > hash1 , int maxElement ) { int prev = 0 , curr = 1 ; hash1 . add ( prev ) ; hash1 . add ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; if ( temp <= maxElement ) hash1 . add ( temp ) ; prev = curr ; curr = temp ; } } static int gcdFibonacciFreq ( int arr [ ] , int n ) { HashSet < Integer > hash1 = new HashSet < Integer > ( ) ; createHash ( hash1 , Math . max ( arr ) ) ; HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } int gcd = 0 ; for ( Map . Entry < Integer , Integer > it : m . entrySet ( ) ) { if ( m . get ( it . getKey ( ) ) == hash1 . get ( it . getKey ( ) ) ) { gcd = gcd ( gcd , it . getValue ( ) ) ; } } return gcd ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 6 , 5 , 6 , 6 , 5 , 5 } ; int n = arr . length ; System . out . println ( gcdFibonacciFreq ( arr , n ) ) ; } }
public class GFG { static double find_Area ( double a ) { double R = a * ( 2 - Math . sqrt ( 2 ) ) ; double area = 3.14 * R * R / 2.0 ; return area ; } public static void main ( String [ ] args ) { double a = 4 ; System . out . println ( " Area of semicircle = " + find_Area ( a ) ) ; } }
public class GFG { static int findQuadruples ( int a [ ] , int b [ ] , int c [ ] , int d [ ] , int x , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { for ( int l = 0 ; l < n ; l ++ ) { if ( ( a [ i ] ^ b [ j ] ^ c [ k ] ^ d [ l ] ) == x ) count ++ ; } } } } return count ; } public static void main ( String [ ] args ) { int x = 3 ; int a [ ] = { 0 , 1 } ; int b [ ] = { 2 , 0 } ; int c [ ] = { 0 , 1 } ; int d [ ] = { 0 , 1 } ; int n = a . length ; System . out . println ( findQuadruples ( a , b , c , d , x , n ) ) ; } }
import java . util . * ; public class GFG { static void findSmallest ( String s , int q [ ] [ ] , int m ) { int N = s . length ( ) ; int H [ ] [ ] = new int [ N + 1 ] [ 26 ] ; for ( int i = 1 ; i <= N ; i ++ ) { H [ i ] [ s . charAt ( i - 1 ) - ' a ' ] ++ ; for ( int j = 0 ; j < 26 ; j ++ ) { H [ i ] [ j ] += H [ i - 1 ] [ j ] ; } } for ( int j = 0 ; j < m ; j ++ ) { int l = q [ j ] [ 0 ] , r = q [ j ] [ 1 ] , n = q [ j ] [ 2 ] ; int sum = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { sum += H [ r ] [ i ] - H [ l - 1 ] [ i ] ; if ( sum >= n ) { System . out . println ( ( char ) ( ' a ' + i ) ) ; break ; } } } } public static void main ( String [ ] args ) { String s = " afbccdeb " ; int q [ ] [ ] = { { 2 , 4 , 1 } , { 1 , 6 , 4 } , { 1 , 8 , 7 } } ; int x = q . length ; findSmallest ( s , q , x ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arr = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < a ; i ++ ) { if ( arr [ i ] == 0 ) { ans += Math . min ( b , arr [ i ] ) ; } else { ans += Math . min ( b , arr [ i ] ) ; } } ans += a ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 3 == 0 ) { System . out . println ( n / 3 ) ; } else if ( n % 3 == 1 ) { System . out . println ( n / 3 + 1 ) ; } else if ( n % 3 == 2 ) { System . out . println ( n / 3 + 2 ) ; } else { System . out . println ( n / 3 + 1 ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; StringBuilder sb = new StringBuilder ( s ) ; for ( int i = n ; i > 0 ; i -- ) { if ( n % i == 0 ) { sb . append ( i ) ; } } System . out . println ( sb . toString ( ) ) ; } }
import java . util . * ; public class GFG { static void printPairs ( int arr [ ] , int n ) { Vector < Integer > v = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( arr [ i ] ) == Math . abs ( arr [ j ] ) ) v . add ( Math . abs ( arr [ i ] ) ) ; } } if ( v . size ( ) == 0 ) return ; Collections . sort ( v ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) System . out . print ( - v . get ( i ) + " " + v . get ( i ) + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , - 4 , 1 , - 1 , - 8 , - 9 } ; int n = arr . length ; printPairs ( arr , n ) ; } }
public class GFG { static int doublefactorial ( int n ) { if ( n == 0 || n == 1 ) return 1 ; return n * doublefactorial ( n - 2 ) ; } public static void main ( String [ ] args ) { System . out . println ( " Double factorial is " + doublefactorial ( 5 ) ) ; } }
public class GFG { static boolean isPalindrome ( String str ) { int l = 0 , h = str . length ( ) - 1 ; while ( h > l ) { if ( str . charAt ( l ) != str . charAt ( h ) ) return false ; l ++ ; h -- ; } return true ; } static int minRemovals ( String str ) { if ( str . charAt ( 0 ) == ' ' ) return 0 ; if ( isPalindrome ( str ) ) return 1 ; return 2 ; } public static void main ( String [ ] args ) { System . out . println ( minRemovals ( "010010" ) ) ; System . out . println ( minRemovals ( "0100101" ) ) ; } }
import java . util . * ; public class GFG { static int sumOfSubstrings ( String num ) { int n = num . length ( ) ; int sumofdigit = 0 ; sumofdigit += num . charAt ( 0 ) - '0' ; sumofdigit += num . charAt ( 0 ) - '0' ; for ( int i = 1 ; i < n ; i ++ ) { int numi = num . charAt ( i ) - '0' ; sumofdigit += ( i + 1 ) * numi + 10 * sumofdigit ; sumofdigit += numi ; } return sumofdigit ; } public static void main ( String [ ] args ) { String num = "1234" ; System . out . println ( sumOfSubstrings ( num ) ) ; } }
public class GFG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * a / n * b / n ; ans += a / n * ( b % n ) ; ans += ( a % n ) * ( b / n ) ; ans += ( ( a % n ) + ( b % n ) ) / n ; return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 , n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = 1000000 ; int maxnumer = 0 , maxdenom = 1 ; for ( int d = 1 ; d <= LIMIT ; d ++ ) { int n = d * 3 / 7 ; if ( d % 7 == 0 ) n -- ; if ( n * maxdenom > d * maxnumer ) { maxnumer = n ; maxdenom = d ; } } return Integer . toString ( maxnumer ) ; } }
import java . util . * ; public class GFG { static int c [ ] = new int [ 100 ] ; static void coef ( int n ) { c [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { c [ 1 + i ] = 1 ; for ( int j = i ; j > 0 ; j -- ) { c [ j ] = c [ j - 1 ] - c [ j ] ; } c [ 0 ] = - c [ 0 ] ; } } static boolean isPrime ( int n ) { coef ( n ) ; c [ 0 ] = c [ 0 ] + 1 ; c [ n ] = c [ n ] - 1 ; int i = n ; while ( i > - 1 && c [ i ] % n == 0 ) i -- ; return i < 0 ? true : false ; } public static void main ( String [ ] args ) { int n = 37 ; if ( isPrime ( n ) ) System . out . println ( " Prime " ) ; else System . out . println ( " Not Prime " ) ; } }
import java . util . * ; public class GFG { static int count_greater ( int arr [ ] , int n ) { int min = Integer . MAX_VALUE ; int counter = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > min ) counter ++ ; if ( arr [ i ] <= min ) min = arr [ i ] ; } return counter ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 2 , 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( count_greater ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x - arr [ i ] <= 0 ) { count ++ ; } else { break ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; int left = 0 ; int right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > 0 ) { count ++ ; } else if ( a < 0 ) { count ++ ; } else { left ++ ; } } if ( count == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; int T , D , L ; int [ ] A , B ; void run ( ) { for ( ; ) { T = sc . nextInt ( ) ; D = sc . nextInt ( ) ; L = sc . nextInt ( ) ; if ( T == 0 && D == 0 && L == 0 ) break ; A = new int [ T ] ; B = new int [ T ] ; for ( int i = 0 ; i < T ; i ++ ) { A [ i ] = sc . nextInt ( ) ; B [ i ] = A [ i ] ; } solve ( ) ; } } void solve ( ) { int ans = T - 1 ; for ( int i = 0 ; i < T ; i ++ ) { ans += ( ( T - A [ i ] ) + D ) ; } println ( ans ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
public class GFG { static int minimumSwaps ( int arr [ ] ) { int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] != i + 1 ) { while ( arr [ i ] != i + 1 ) { int temp = 0 ; temp = arr [ arr [ i ] - 1 ] ; arr [ arr [ i ] - 1 ] = arr [ i ] ; arr [ i ] = temp ; count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 1 , 5 } ; System . out . println ( minimumSwaps ( arr ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int TARGET = 500500 ; int MODULUS = 500500507 ; boolean [ ] isPrime = Library . listPrimality ( 7376507 ) ; Queue < Integer > queue = new LinkedList < > ( ) ; queue . add ( 2 ) ; queue . add ( 2 ) ; queue . add ( 2 ) ; queue . add ( 2 ) ; queue . add ( 2 ) ; long ans = 1 ; for ( int i = 0 ; i < TARGET ; i ++ ) { int item = queue . poll ( ) ; ans *= item ; ans %= MODULUS ; queue . add ( item * item ) ; if ( item == nextPrime ) { nextPrime ++ ; while ( ! isPrime [ nextPrime ] ) nextPrime ++ ; queue . add ( nextPrime ) ; } } return Long . toString ( ans ) ; } }
import java . util . * ; public class GFG { static void findUniquePair ( int arr [ ] , int n ) { int XOR = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) XOR = XOR ^ arr [ i ] ; int set_bit_no = XOR & ~ ( XOR - 1 ) ; int x = 0 , y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } System . out . println ( " The unique pair is ( " + x + " , " + y + " ) " ) ; } public static void main ( String [ ] args ) { int a [ ] = { 6 , 1 , 3 , 5 , 1 , 3 , 7 , 6 } ; int n = a . length ; findUniquePair ( a , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s [ ] [ ] = new String [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) ; } boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( s [ i ] [ j ] . equals ( s [ i ] [ j ] ) ) { flag = false ; break ; } } } if ( flag == true ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( sc . hasNext ( ) ) { String s = sc . next ( ) ; int n = s . length ( ) ; int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; if ( c == ' @ ' ) { x = x * 10 ; } else if ( c == ' d ' ) { x = x * ( int ) c - ( int ) x ; } } System . out . println ( x ) ; } } }
import java . util . * ; public class GFG { static boolean isMajority ( int a [ ] ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } else { mp . put ( a [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) { if ( x . getValue ( ) >= a . length / 2 ) { return true ; } } return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 9 , 2 , 2 } ; if ( isMajority ( a ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] v = new int [ n ] ; int [ ] w2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = sc . nextInt ( ) ; w2 [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ w2 . length ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < w2 . length ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i + 1 ] [ j ] + v [ i ] ) ; } } System . out . println ( dp [ n ] [ w2 . length - 1 ] ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == - 1 ) { break ; } double [ ] [ ] p = new double [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] [ 0 ] = sc . nextDouble ( ) ; p [ i ] [ 1 ] = sc . nextDouble ( ) ; p [ i ] [ 2 ] = sc . nextDouble ( ) ; } double [ ] [ ] p2 = new double [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { p2 [ i ] [ 0 ] = p [ i ] [ 0 ] + p [ i ] [ 1 ] ; p2 [ i ] [ 1 ] = p [ i ] [ 1 ] + p [ i ] [ 0 ] ; p2 [ i ] [ 2 ] = p [ i ] [ 1 ] + p [ i ] [ 1 ] ; } double [ ] [ ] dp = new double [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = p2 [ i ] [ j ] + p [ i ] [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { System . out . printf ( " % .0f \n " , dp [ i ] [ j ] ) ; } } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; }
import java . util . * ; public class GFG { static void printKMissing ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int i = 0 ; while ( i < n && arr [ i ] <= 0 ) i ++ ; int count = 0 , curr = 1 ; while ( count < k && i < n ) { if ( arr [ i ] != curr ) { System . out . print ( curr + " " ) ; count ++ ; } else i ++ ; curr ++ ; } while ( count < k ) { System . out . print ( curr + " " ) ; curr ++ ; count ++ ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 } ; int n = arr . length ; int k = 3 ; printKMissing ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static void printNumbers ( int a [ ] , int n ) { HashMap < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; for ( int j = 1 ; j * j <= num ; j ++ ) { if ( num % j == 0 ) { if ( j != 1 ) mpp . put ( j , mpp . get ( j ) + 1 ) ; if ( ( num / j ) != j ) mpp . put ( num / j , mpp . get ( num / j ) + 1 ) ; } } } int maxi = 0 ; for ( Map . Entry < Integer , Integer > it : mpp . entrySet ( ) ) { maxi = Math . max ( it . getValue ( ) , maxi ) ; } for ( Map . Entry < Integer , Integer > it : mpp . entrySet ( ) ) { if ( it . getValue ( ) == maxi ) System . out . print ( it . getKey ( ) + " " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 12 , 15 , 27 , 20 , 40 } ; int n = a . length ; printNumbers ( a , n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int len = s . length ( ) ; int left = len / 2 ; String ans = s . substring ( 0 , left ) ; if ( len % 2 == 1 ) { ans = ans . substring ( left + 1 , len ) ; } else { ans = ans . substring ( left + 1 , len ) ; } if ( len % 2 == 1 ) { ans = ans . substring ( left + 1 , len ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } System . out . println ( max ) ; } }
public class GFG { static int checkIfStartsWithCapital ( String str ) { if ( str . charAt ( 0 ) >= ' A ' && str . charAt ( 0 ) <= ' Z ' ) return 1 ; else return 0 ; } static void check ( String str ) { if ( checkIfStartsWithCapital ( str ) ) System . out . println ( " Accepted " ) ; else System . out . println ( " Not Accepted " ) ; } public static void main ( String [ ] args ) { String str = " GeeksforGeeks " ; check ( str ) ; str = " geeksforgeeks " ; check ( str ) ; } }
import java . util . * ; public class GFG { static int getAvg ( int prev_avg , int x , int n ) { return ( prev_avg * n + x ) / ( n + 1 ) ; } static void streamAvg ( int arr [ ] , int n ) { int avg = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( avg , arr [ i ] , i ) ; System . out . println ( " Average of " + i + " numbers is " + avg ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int [ ] isPrime = Library . listPrimality ( 999999 ) ; int [ ] primes = Library . listPrimes ( 999999 ) ; int consecutive = 0 ; for ( int i = 0 ; i < primes . length ; i ++ ) { int sum = primes [ i ] ; int consec = 1 ; for ( int j = i + 1 ; j < primes . length ; j ++ ) { sum += primes [ j ] ; consec ++ ; if ( sum >= isPrime . length ) break ; if ( isPrime [ sum ] && consec > consecutive ) { ans = sum ; consecutive = consec ; } } } return Integer . toString ( ans ) ; } }
import java . util . * ; public class GFG { static int lis ( int arr [ ] , int n ) { int i , j , maxm = 0 , maxm = 0 ; int [ ] lst = new int [ n ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && lst [ i ] < lst [ j ] + 1 ) { lst [ i ] = lst [ j ] + 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( maxm < lst [ i ] ) { maxm = lst [ i ] ; } } return maxm ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 } ; int n = arr . length ; System . out . println ( " Length of lst is " + lis ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = ( int ) Math . sqrt ( a + b ) ; if ( c * c == a + b ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int fix ( int [ ] A ) { HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) s . add ( A [ i ] ) ; for ( int i = 0 ; i < A . length ; i ++ ) { if ( s . contains ( i ) ) A [ i ] = i ; else A [ i ] = - 1 ; } return A ; } public static void main ( String [ ] args ) { int [ ] A = { - 1 , - 1 , 6 , 1 , 9 , 3 , 2 , - 1 , 4 , - 1 } ; System . out . println ( fix ( A ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int ans = Math . abs ( A - B ) + Math . abs ( C - D ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node prev ; Node next ; } static void push ( Node head_ref , int new_data ) { Node new_node = new Node ( ) ; new_node . data = new_data ; new_node . prev = head_ref ; head_ref = new_node ; } static void makeOddNode ( Node head_ref , int A [ ] , int n ) { Node ptr = head_ref ; for ( int i = 0 ; ptr != null ; i ++ ) { next = ptr . next ; if ( ptr . data % 2 == 0 ) { ptr . data = A [ i ] ; } ptr = next ; } } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + " " ) ; head = head . next ; } } public static void main ( String [ ] args ) { Node head = null ; int Arr [ ] = { 3 , 5 , 23 , 17 , 1 } ; head = push ( head , 4 ) ; head = push ( head , 7 ) ; head = push ( head , 8 ) ; head = push ( head , 9 ) ; head = push ( head , 6 ) ; int n = Arr . length ; System . out . println ( " Original List : " ) ; printList ( head ) ; System . out . println ( ) ; makeOddNode ( head , Arr , n ) ; System . out . println ( " New odd List : " ) ; printList ( head ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; sc . hasNext ( ) ; ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ 10 ] [ 11 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 11 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 11 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } int ans = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( dp [ i ] [ 0 ] == 0 ) continue ; ans += dp [ i ] [ 0 ] ; for ( int j = 0 ; j < 11 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } System . out . println ( ans ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int mod = 1000000007 ; static int fact ( int n ) { int res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static int nCr ( int n , int r ) { return fact ( n ) / ( fact ( r ) * fact ( n - r ) ) ; } static int powmod ( int a , int n ) { if ( n == 0 ) return 1 ; int pt = ( int ) Math . powmod ( a , n / 2 ) ; pt = ( pt * pt ) % mod ; if ( n % 2 == 1 ) return ( pt * a ) % mod ; else return pt ; } static int CountSubset ( int arr [ ] , int n ) { int ans = ( int ) Math . powmod ( 2 , n - 1 ) ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { int j = i + 1 ; while ( j < n && arr [ j ] == arr [ i ] ) { int r = n - 1 - j ; int l = i ; ans = ( ans + nCr ( l + r , l ) ) % mod ; j ++ ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 2 } ; int n = arr . length ; System . out . println ( CountSubset ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000001 ; static int primeUpto [ ] = new int [ MAX ] ; static void SieveOfEratosthenes ( ) { boolean isPrime [ ] = new boolean [ MAX ] ; isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i < MAX ; i ++ ) { if ( isPrime [ i ] == true ) { for ( int j = i * 2 ; j < MAX ; j += i ) isPrime [ j ] = false ; } } for ( int i = 1 ; i < MAX ; i ++ ) primeUpto [ i ] = primeUpto [ i - 1 ] ; for ( int i = 0 ; i < MAX ; i ++ ) primeUpto [ i ] = ( isPrime [ i ] == true ) ? primeUpto [ i ] : ( primeUpto [ i ] + 1 ) ; } static int countOfNumbers ( int N , int K ) { SieveOfEratosthenes ( ) ; int low = 1 , high = N , ans = 0 ; while ( low <= high ) { int mid = ( low + high ) >> 1 ; if ( mid - primeUpto [ mid ] >= K ) { ans = mid ; high = mid - 1 ; } else low = mid + 1 ; } return ( ans > 0 ? N - ans + 1 : 0 ) ; } public static void main ( String [ ] args ) { int N = 10 , K = 3 ; System . out . println ( countOfNumbers ( N , K ) ) ; } }
import java . io . * ; public class GFG { static int countOperations ( int n ) { int i = 2 ; while ( ( i * i ) < n && ( n % i ) ) i ++ ; if ( ( i * i ) > n ) i = n ; return ( 1 + ( n - i ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countOperations ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int q = in . nextInt ( ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; int [ ] a = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ' A ' && s [ i + 1 ] == ' C ' ) { a [ i ] = 1 ; c [ i ] = 0 ; } else if ( s [ i ] == ' C ' ) { c [ i ] = 1 ; } } for ( int i = 0 ; i < q ; i ++ ) { out . println ( a [ in . nextInt ( ) - 1 ] - a [ in . nextInt ( ) - 1 ] ) ; } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; System . out . println ( l + " " + ( l * 2 ) ) ; } } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = 5000 ; int MODULUS = ( int ) Math . pow ( 10 , 16 ) ; int [ ] count = new int [ LIMIT * LIMIT * 2 ] ; count [ 0 ] = 1 ; int s = 0 ; for ( int p = Library . listPrimes ( LIMIT ) ; p > 0 ; p -- ) { count [ Library . listPrimality ( s + 1 ) ] = count [ Library . listPrimality ( s + 1 ) ] + count [ Library . listPrimality ( p ) ] % MODULUS ; s += p ; } int isPrime = Library . listPrimality ( s + 1 ) ; int ans = 0 ; for ( int i = 0 ; i < s + 1 ; i ++ ) { if ( isPrime == count [ i ] ) ans ++ ; } return Integer . toString ( ans ) ; } }
public class GFG { static int countOddNumber ( int row_num ) { int count = 0 ; while ( row_num != 0 ) { count += row_num & 1 ; row_num >>= 1 ; } return ( 1 << count ) ; } static void gouldSequence ( int n ) { for ( int row_num = 0 ; row_num < n ; row_num ++ ) { System . out . print ( countOddNumber ( row_num ) + " " ) ; } } public static void main ( String [ ] args ) { int n = 16 ; gouldSequence ( n ) ; } }
import java . util . * ; public class GFG { static void findMin ( int V ) { int deno [ ] = { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 } ; int n = deno . length ; Vector < Integer > ans = new Vector < > ( ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( V >= deno [ i ] ) { V -= deno [ i ] ; ans . add ( deno [ i ] ) ; } } for ( int i = 0 ; i < ans . size ( ) ; i ++ ) System . out . print ( ans . get ( i ) + " " ) ; } public static void main ( String [ ] args ) { int n = 93 ; System . out . println ( " Following is minimal number of change for " + n + " : " ) ; findMin ( n ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { Arrays . sort ( A ) ; int count = 0 ; for ( int i = 2 ; i <= 6 ; i ++ ) { if ( A [ i ] == 1 ) count ++ ; } return Integer . toString ( count ) ; } }
public class GFG { static int count ( int arr [ ] , int n , int x ) { if ( x == 1 ) { int ans = ( int ) Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) count ++ ; } int ans = ( int ) Math . pow ( 2 , count ) - 1 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 5 } ; int n = arr . length ; int x = 1 ; System . out . println ( count ( arr , n , x ) ) ; } }
public class GFG { static int findEle ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == sum - arr [ i ] ) return arr [ i ] ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 6 } ; int n = arr . length ; System . out . println ( findEle ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int findExtraCharacter ( String strA , String strB ) { HashMap < Character , Integer > m1 = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < strB . length ( ) ; i ++ ) { if ( m1 . containsKey ( strB . charAt ( i ) ) ) { m1 . put ( strB . charAt ( i ) , m1 . get ( strB . charAt ( i ) ) + 1 ) ; } else { m1 . put ( strB . charAt ( i ) , 1 ) ; } } for ( Character h : m1 . keySet ( ) ) { if ( m1 . get ( h ) == 1 ) { return h ; } } return 0 ; } public static void main ( String [ ] args ) { String strA = " abcd " ; String strB = " cbdad " ; System . out . println ( findExtraCharacter ( strA , strB ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int max = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( ( i + j ) % 6 == 0 ) { int k = ( i + j ) / 6 ; int d = ( i + j ) / 6 ; int c = ( k * d ) + ( k * c ) ; max = max ( max , c ) ; } } } println ( max ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] [ ] map = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { map [ i ] [ 0 ] = sc . nextInt ( ) ; map [ i ] [ 1 ] = sc . nextInt ( ) ; map [ i ] [ 0 ] = map [ i ] [ 1 ] = 0 ; } String s = sc . next ( ) ; String t = sc . next ( ) ; if ( s . equals ( t ) ) { println ( " - 1" ) ; } else { println ( s ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { visited [ arr [ i ] ] = true ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ i ] ) { count ++ ; } } if ( count == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int maxSumPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int max1 = Integer . MIN_VALUE , max2 = Integer . MIN_VALUE ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( arr1 [ i ] > max1 ) max1 = arr1 [ i ] ; } for ( int i = 0 ; i < n2 ; i ++ ) { if ( arr2 [ i ] > max2 ) max2 = arr2 [ i ] ; } return max1 + max2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 3 } ; int arr2 [ ] = { 3 , 4 , 7 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) ; } }
import java . util . * ; public class GFG { static int operations ( int op [ ] , int n , int k ) { int i , count = 0 , nVal = 0 , minimum = Integer . MAX_VALUE ; for ( i = 0 ; i < n ; i ++ ) { nVal += op [ i ] ; minimum = Math . min ( minimum , nVal ) ; if ( ( k + nVal ) <= 0 ) { return ( i + 1 ) ; } } if ( nVal >= 0 ) { return - 1 ; } int times = ( k - Math . abs ( minimum ) ) / Math . abs ( nVal ) ; k = ( k - ( times * Math . abs ( nVal ) ) ) ; count = ( times * n ) ; while ( k > 0 ) { for ( i = 0 ; i < n ; i ++ ) { k = k + op [ i ] ; count ++ ; if ( k <= 0 ) { break ; } } } return count ; } public static void main ( String [ ] args ) { int op [ ] = { - 60 , 65 , - 1 , 14 , - 25 } ; int n = op . length ; int k = 100000 ; System . out . println ( operations ( op , n , k ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { new p021 ( ) . run ( ) ; } private static final int pref [ ] = new int [ 100010 ] ; private static void run ( ) { for ( int i = 1 ; i < pref . length ; i ++ ) { pref [ i ] = pref [ i - 1 ] + isPerfectCube ( i ) ; } } private static void printSum ( int L , int R ) { int sum = pref [ R ] - pref [ L - 1 ] ; System . out . print ( sum + " " ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int r = in . nextInt ( ) ; int l = in . nextInt ( ) ; int [ ] d = new int [ n ] ; int [ ] t = new int [ n ] ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = in . nextInt ( ) ; t [ i ] = in . nextInt ( ) ; x [ i ] = in . nextInt ( ) ; } int [ ] dp = new int [ n ] ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = 0 ; if ( d [ i ] > 0 ) { if ( t [ i ] > d [ i ] ) { dp [ i ] = Math . max ( dp [ i ] , d [ i ] ) ; } else { dp [ i ] = Math . max ( dp [ i ] , d [ i ] ) ; } } max = Math . max ( max , dp [ i ] ) ; } out . println ( max ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . io . * ; public class GFG { static int centered_cube ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( n + " th Centered cube number : " + centered_cube ( n ) ) ; n = 10 ; System . out . println ( n + " th Centered cube number : " + centered_cube ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( s . charAt ( 0 ) == '0' ) { System . out . println ( s ) ; continue ; } int l = 0 , r = s . length ( ) - 1 ; while ( l < r ) { if ( s . charAt ( l ) == '1' ) { l ++ ; } else { r -- ; } } if ( l == r ) { System . out . println ( s ) ; continue ; } int i = 0 , j = l ; while ( i < r ) { if ( s . charAt ( i ) == '1' ) { i ++ ; } else { j -- ; } } if ( i == r ) { System . out . println ( s . substring ( 0 , l ) + s . substring ( l + 1 ) ) ; } else { System . out . println ( s . substring ( 0 , l ) + s . substring ( l + 1 ) ) ; } } } }
public class GFG { static int nthTerm ( int N ) { int nth = 0 ; for ( int i = N ; i >= 0 ; i -- ) nth += ( int ) Math . pow ( i , i ) ; return nth ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) { pow = pow * x ; } return ( pow == y ) ; } public static void main ( String [ ] args ) { if ( isPower ( 10 , 1 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 1 , 20 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; } }
public class GFG { static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) { pow = pow * x ; } return ( pow == y ) ; } public static void main ( String [ ] args ) { if ( isPower ( 10 , 1 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 1 , 20 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; } }
import java . util . Arrays ; public class GFG { static int minimumValue ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int answer = 0 ; for ( int i = 0 ; i < k ; i ++ ) { answer += arr [ i ] * arr [ i ] ; } return answer * ( 2 * k - 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 21 , 5 , 3 , 8 } ; int k = 3 ; int n = arr . length ; System . out . println ( minimumValue ( arr , n , k ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; boolean [ ] [ ] adj = new boolean [ n ] [ 2 ] ; for ( int i = 0 ; i < adj . length ; i ++ ) { adj [ i ] [ 0 ] = in . next ( ) . equals ( " lock " ) ; adj [ i ] [ 1 ] = in . next ( ) . equals ( " . " ) ; } int [ ] [ ] dp = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] [ 0 ] == 0 ) { dp [ i ] [ 0 ] = 1 ; } else { dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 1 ; } } boolean [ ] visited = new boolean [ 200 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( ! visited [ i ] ) { if ( solve ( ) ) { out . println ( 1 ) ; return true ; } visited [ i ] = true ; for ( int j = 0 ; j < adj [ i ] . length ; j ++ ) { if ( ! visited [ j ] ) { if ( solve ( ) ) { out . println ( 1 ) ; return true ; } visited [ j ] = true ; } } } } out . println ( 0 ) ; return false ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . io . * ; public class GFG { static int countWays ( int N ) { int E = ( N * ( N - 1 ) ) / 2 ; if ( N == 1 ) return 0 ; return ( int ) Math . pow ( 2 , E - 1 ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( countWays ( N ) ) ; } }
import java . util . * ; public class GFG { static int findLCM ( int arr [ ] , int n ) { int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) lcm = ( lcm * arr [ i ] ) / Math . gcd ( arr [ i ] , lcm ) ; return lcm ; } static void countNumbers ( int arr [ ] , int n , int l , int r ) { int lcm = findLCM ( arr , n ) ; int count = ( r / lcm ) - ( ( l - 1 ) / lcm ) ; System . out . println ( count ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 } ; int n = arr . length ; int l = 1 , r = 10 ; countNumbers ( arr , n , l , r ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ 100 ] ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = i ; dp [ i ] [ 1 ] = sc . nextInt ( ) ; } Arrays . sort ( dp , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ; System . out . println ( dp [ n ] [ 1 ] ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; while ( t -- > 0 ) { int n = in . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] * arr [ i ] != arr [ i ] * arr [ i ] ) { count ++ ; } } if ( count % 2 == 0 ) { pw . println ( " NO " ) ; } else { pw . println ( " YES " ) ; } } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static int MinDeletion ( int a [ ] , int n ) { HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( a [ i ] ) == null ) { map . put ( a [ i ] , 1 ) ; } else { map . put ( a [ i ] , map . get ( a [ i ] ) + 1 ) ; } } int ans = 0 ; for ( Map . Entry < Integer , Integer > entry : map . entrySet ( ) ) { int x = entry . getKey ( ) ; int frequency = entry . getValue ( ) ; if ( x <= frequency ) { ans += ( frequency - x ) ; } else { ans += frequency ; } } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 2 , 3 , 4 , 4 , 4 , 4 , 5 } ; int n = a . length ; System . out . println ( MinDeletion ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int fromStart ( char [ ] inp , int del11 ) { int inp1 = inp [ 0 ] - del11 , inp2 = inp [ del11 ] - 1 ; return inp1 + inp2 ; } static int fromEnd ( char [ ] inp , int del1 ) { int inp1 = inp [ 0 ] - del1 , inp2 = inp [ inp . length - del1 + 1 ] - 1 ; return inp1 + inp2 ; } public static void main ( String [ ] args ) { char [ ] inp = 1234 . toCharArray ( ) ; int del1 = 3 ; System . out . println ( " num _ after _ deleting _ from _ starting " + fromStart ( inp , del1 ) ) ; System . out . println ( " num _ after _ deleting _ from _ ending " + fromEnd ( inp , del1 ) ) ; } }
import java . util . * ; public class GFG { static int nondecdigits ( int n ) { int x = 0 ; for ( int x = n ; x >= 1 ; x -- ) { int no = x ; int prev_dig = 11 ; boolean flag = true ; while ( no != 0 ) { if ( prev_dig < no % 10 ) { flag = false ; break ; } prev_dig = no % 10 ; no /= 10 ; } if ( flag == true ) { break ; } } return x ; } public static void main ( String [ ] args ) { int n = 200 ; System . out . println ( nondecdigits ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int D = sc . nextInt ( ) ; int sum = Math . abs ( A - C ) + Math . abs ( B - D ) ; if ( sum == C ) System . out . println ( A + " " + B + " " + C + " " + D ) ; else if ( sum == D ) System . out . println ( " - 1" ) ; else System . out . println ( sum + " " + ( C + D ) + " " + ( B + C ) + " " + ( A + D ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int min = Math . min ( x , y ) ; if ( min == 0 && x <= 22 ) { System . out . println ( " Ciel " ) ; } else if ( min == 1 && x <= 22 ) { System . out . println ( " Hanako " ) ; } else if ( min == 2 && x <= 22 ) { System . out . println ( " Ciel " ) ; } else if ( min == 2 && x <= 22 ) { System . out . println ( " Hanako " ) ; } else if ( min == 2 && x <= 22 ) { System . out . println ( " Ciel " ) ; } else { System . out . println ( " Ciel " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; char [ ] [ ] map = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { map [ i ] = sc . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( map [ i ] [ j ] == ' . ' ) { map [ i ] [ j ] = ' W ' ; } else { map [ i ] [ j ] = ' B ' ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { System . out . print ( map [ i ] [ j ] ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } if ( count == 0 ) { System . out . println ( n ) ; return ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { count -- ; } } max = Math . max ( count , max ) ; } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static int countDistictSubarray ( int arr [ ] , int n ) { HashMap < Integer , Integer > vis = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { vis . put ( arr [ i ] , 1 ) ; } int k = vis . size ( ) ; int [ ] vid = new int [ n ] ; int ans = 0 ; int right = 0 , window = 0 ; for ( int left = 0 ; left < n ; left ++ ) { while ( right < n && window < k ) { if ( ! vis . containsKey ( arr [ right ] ) ) { vid [ arr [ right ] ] ++ ; } else { vid [ arr [ right ] ] = 1 ; } if ( vid [ arr [ right ] ] == 1 ) { window ++ ; } right ++ ; } if ( window == k ) { ans += ( n - right + 1 ) ; } vid [ arr [ left ] ] -- ; if ( vid [ arr [ left ] ] == 0 ) { window -- ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( countDistictSubarray ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int max = s ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; max = Math . max ( max , a + b ) ; } System . out . println ( max ) ; } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static int primeBitsInRange ( int l , int r ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { int tot_bit = Integer . bitCount ( i ) ; if ( isPrime ( tot_bit ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int l = 6 , r = 10 ; System . out . println ( primeBitsInRange ( l , r ) ) ; } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int pairs ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = countSetBits ( arr [ i ] ) + countSetBits ( arr [ j ] ) ; if ( sum == k ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 4 ; System . out . println ( pairs ( arr , n , k ) ) ; } }
import java . util . * ; public class GFG { static void reverseQueueFirstKElements ( int k , Queue < Integer > Queue ) { if ( Queue . empty ( ) || k > Queue . qsize ( ) ) return ; Queue . push ( Queue . peek ( ) ) ; Queue . poll ( ) ; Queue . push ( Queue . peek ( ) ) ; while ( Queue . size ( ) - k > 0 ) { Queue . push ( Queue . peek ( ) ) ; Queue . poll ( ) ; } for ( int i = 0 ; i < Queue . size ( ) - k ; i ++ ) { Queue . push ( Queue . peek ( ) ) ; Queue . poll ( ) ; } } static void print ( Queue < Integer > Queue ) { while ( Queue . isEmpty ( ) ) { System . out . print ( Queue . peek ( ) + " " ) ; Queue . poll ( ) ; } } public static void main ( String [ ] args ) { Queue < Integer > Queue = new LinkedList < Integer > ( ) ; Queue . push ( 10 ) ; Queue . push ( 20 ) ; Queue . push ( 30 ) ; Queue . push ( 40 ) ; Queue . push ( 50 ) ; Queue . push ( 60 ) ; Queue . push ( 70 ) ; Queue . push ( 80 ) ; Queue . push ( 90 ) ; Queue . push ( 100 ) ; int k = 5 ; reverseQueueFirstKElements ( k , Queue ) ; print ( Queue ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { sum ++ ; } } if ( sum % 2 == 0 ) { System . out . println ( " errorgorn " ) ; } else { System . out . println ( " maomao90" ) ; } } } }
public class GFG { static int xorCalc ( int k ) { if ( k == 1 ) return 2 ; if ( ( ( k + 1 ) & k ) == 0 ) return k / 2 ; return 1 ; } public static void main ( String [ ] args ) { int k = 31 ; System . out . println ( xorCalc ( k ) ) ; } }
public class Solution { public boolean isPerfectSquare ( int num ) { int low = 1 , high = num ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int mid_square = mid * mid ; if ( mid_square == num ) return true ; else if ( mid_square < num ) low = mid + 1 ; else high = mid - 1 ; } return false ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int num = 16 ; boolean out = sObj . isPerfectSquare ( num ) ; System . out . println ( out ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a + b + c == 0 && a + b + c == 0 && a + b + c == 0 && a + c == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; sum += arr [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum == arr [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int time = 0 ; while ( a [ time ] > 0 ) { time += a [ time ] - m ; if ( b [ time ] > 0 ) { b [ time ] = b [ time ] - m ; a [ time ] = a [ time ] ; } else { a [ time ] = a [ time ] + m ; b [ time ] = b [ time ] ; } time ++ ; } System . out . println ( a [ time ] + " " + b [ time ] ) ; } }
import java . util . * ; public class GFG { static int findElement ( int arr [ ] , int ranges [ ] [ ] , int rotations , int index ) { for ( int i = rotations - 1 ; i >= 0 ; i -- ) { int left = ranges [ i ] [ 0 ] ; int right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) { if ( index == left ) index = right ; else index = index - 1 ; } } return arr [ index ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int rotations = 2 ; int ranges [ ] [ ] = { { 0 , 2 } , { 0 , 3 } } ; int index = 1 ; System . out . println ( findElement ( arr , ranges , rotations , index ) ) ; } }
import java . util . * ; public class GFG { static int MAXN = 1000001 ; static int spf [ ] = new int [ MAXN ] ; static int hash1 [ ] = new int [ MAXN ] ; static void sieve ( ) { for ( int i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( int i = 3 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ; for ( int i = 3 ; i < MAXN ; i += 2 ) spf [ i ] = i ; for ( int i = 3 ; i < MAXN ; i += 2 ) spf [ i ] = i ; } static boolean check ( int x ) { while ( x != 1 ) { int temp = spf [ x ] ; if ( x % temp == 0 && hash1 [ temp ] > 1 ) return false ; while ( x % temp == 0 ) x /= temp ; } return true ; } static boolean hasValidNum ( int arr [ ] , int n ) { sieve ( ) ; for ( int i = 0 ; i < n ; i ++ ) getFactorization ( arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) if ( check ( arr [ i ] ) ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 8 , 4 , 10 , 6 , 7 } ; int n = arr . length ; if ( hasValidNum ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static boolean isExists ( int a [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; sum += a [ i ] ; } if ( sum % 2 == 0 ) { if ( freq . get ( sum / 2 ) == 1 ) return true ; } return false ; } public static void main ( String [ ] args ) { int a [ ] = { 5 , 1 , 2 , 2 } ; int n = a . length ; if ( isExists ( a , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static double areaOfKite ( double d1 , double d2 ) { double area = ( d1 * d2 ) / 2 ; return area ; } public static void main ( String [ ] args ) { double d1 = 4 , d2 = 6 ; System . out . println ( " Area of Kite = " + areaOfKite ( d1 , d2 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n == 0 ) { System . out . println
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static boolean productEqual ( int n ) { if ( n < 10 ) return false ; int prodOdd = 1 , prodEven = 1 ; while ( n > 0 ) { int digit = n % 10 ; prodOdd *= digit ; n = n / 10 ; if ( n == 0 ) break ; digit = n % 10 ; prodEven *= digit ; n = n / 10 ; } if ( prodOdd == prodEven ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 4324 ; if ( productEqual ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( Character . isUpperCase ( s . charAt ( i ) ) ) { int j = ( int ) s . charAt ( i ) - ( int ) ' A ' + 26 ; } else { int j = ( int ) s . charAt ( i ) - ( int ) ' a ' ; } println ( s . substring ( i % a . length , j ) ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static void checkEVENodd ( int arr [ ] , int n , int l , int r ) { if ( arr [ r ] == 1 ) System . out . println ( " odd " ) ; else System . out . println ( " even " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 1 } ; int n = arr . length ; checkEVENodd ( arr , n , 1 , 3 ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( x - r >= 0 && y - r >= 0 && x + r <= w && y + r <= h ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static int findPrime ( int n ) { int num = n + 1 ; while ( num > 0 ) { if ( isPrime ( num ) ) return num ; num ++ ; } return 0 ; } static int minNumber ( int arr [ ] ) { int s = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) s += arr [ i ] ; if ( isPrime ( s ) ) return 0 ; int num = findPrime ( s ) ; return num - s ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 12 } ; System . out . println ( minNumber ( arr ) ) ; } }
import java . util . * ; public class GFG { static int compositeProduct ( int arr [ ] , int n ) { int max_val = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; boolean prime [ ] = new boolean [ max_val + 1 ] ; prime [ 0 ] = prime [ 1 ] = true ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == false ) product *= arr [ i ] ; } return product ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( compositeProduct ( arr , n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( ( x | y ) == 0 ) { break ; } int [ ] a = new int [ 3 ] ; a [ 0 ] = x ; a [ 1 ] = y ; Arrays . sort ( a ) ; println ( a [ 0 ] + " " + a [ 1 ] ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; if ( s . substring ( 0 , 2 ) . equals ( " op " ) ) { System . out . println ( " FILIPINO " ) ; } else if ( s . substring ( 0 , 5 ) . equals ( " adinm " ) ) { System . out . println ( " KOREAN " ) ; } else { System . out . println ( " JAPANESE " ) ; } } } }
public class GFG { static int findSum ( int arr [ ] , int n , int left , int right ) { int k = right - left ; int d = arr [ 1 ] - arr [ 0 ] ; int ans = arr [ left - 1 ] * ( k + 1 ) ; ans = ans + ( d * ( k * ( k + 1 ) ) ) / 2 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 } ; int queries = 3 ; int q [ ] [ ] = { { 2 , 4 } , { 2 , 6 } , { 5 , 6 } } ; int n = arr . length ; for ( int i = 0 ; i < queries ; i ++ ) { System . out . println ( findSum ( arr , n , q [ i ] [ 0 ] , q [ i ] [ 1 ] ) ) ; } } }
public class GFG { static int maxResult ( int n , int a , int b , int c ) { int maxVal = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n - i ; j ++ ) { int z = ( n - ( i + j ) ) / c ; if ( Math . floor ( z ) == Math . ceil ( z ) ) { int x = i / a ; int y = j / b ; maxVal = Math . max ( maxVal , x + y + z ) ; } } } return maxVal ; } public static void main ( String [ ] args ) { int n = 10 , a = 5 , b = 3 , c = 4 ; System . out . println ( maxResult ( n , a , b , c ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < 10 ; i ++ ) { System . out . println ( arr [ i ] ) ; } } }
import java . util . * ; public class GFG { static int fact ( int n ) { int ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) ans = ans * i ; return ( ans ) ; } static int numberOfPossiblePallindrome ( String str , int n ) { HashMap < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( str . charAt ( i ) ) ) mp . put ( str . charAt ( i ) , mp . get ( str . charAt ( i ) ) + 1 ) ; else mp . put ( str . charAt ( i ) , 1 ) ; } int k = 0 , num = 0 , den = 1 , fi = 0 ; for ( Map . Entry < Character , Integer > it : mp . entrySet ( ) ) { if ( it . getValue ( ) % 2 == 0 ) fi = it . getValue ( ) / 2 ; else { fi = ( it . getValue ( ) - 1 ) / 2 ; k ++ ; } num = num + fi ; den = den * fact ( fi ) ; } if ( num != 0 ) num = fact ( num ) ; int ans = num / den ; if ( k != 0 ) ans = ans * k ; return ( ans ) ; } public static void main ( String [ ] args ) { String str = " ababab " ; int n = str . length ( ) ; System . out . println ( numberOfPossiblePallindrome ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ 0 ] , max = arr [ n - 1 ] ; if ( n % 2 == 0 ) { System . out . println ( n / 2 ) ; return ; } for ( int i = 0 ; i < n / 2 ; i ++ ) { if ( arr [ i ] < arr [ min ] ) { min = arr [ i ] ; max = arr [ min ] ; } } System . out . println ( max ) ; } }
public class GFG { static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } public static void main ( String [ ] args ) { int n = 107 , m = 4 ; System . out . println ( toggleLastMBits ( n , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; if ( s . charAt ( s . length ( ) - 1 ) == ' B ' ) { System . out . println ( " YES " ) ; } else { int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' ) { cnt ++ ; } else { cnt = 0 ; } } if ( cnt > 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } } }
import java . util . * ; public class GFG { static int first_substring ( String s ) { int n = s . length ( ) , c = 0 ; HashMap < String , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ' || s . charAt ( i ) == ' # ' ) { s = s . substring ( c , i ) ; mpp . put ( s , mpp . getOrDefault ( s , 0 ) + 1 ) ; c = i + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ' ) continue ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' ' ) { break ; } String s1 = s . substring ( i , j + 1 ) ; String s2 = s1 ; s1 = s1 . substring ( 0 , s1 . length ( ) - 1 ) ; if ( mpp . containsKey ( s1 ) ) { if ( mpp . get ( s1 ) == 0 ) return s2 ; } } } return - 1 ; } public static void main ( String [ ] args ) { String s = " mango is sweet when nam en tastes it # " ; int s1 = first_substring ( s ) ; System . out . println ( s1 ) ; } }
public class GFG { static int countConsecutive ( int n ) { String s = Integer . toString ( n ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 44522255 ; System . out . println ( countConsecutive ( n ) ) ; } }
import java . io . * ; public class GFG { static void findAngle ( int n ) { int interiorAngle = ( n - 2 ) * 180 / n ; int exteriorAngle = 360 / n ; System . out . println ( " Interior angle : " + interiorAngle ) ; System . out . println ( " Exterior angle : " + exteriorAngle ) ; } public static void main ( String [ ] args ) { int n = 10 ; findAngle ( n ) ; } }
import java . io . * ; public class GFG { static void nDigitPerfectSquares ( int n ) { System . out . print ( ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n - 1 ) ) , 2 ) ) + " " ) ; System . out . println ( ( int ) Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n ) ) ) - 1 , 2 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; nDigitPerfectSquares ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; String t1 = sc . next ( ) ; if ( s . length ( ) - t1 . length ( ) > t1 . length ( ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i += 2 ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' b ' || s . charAt ( i ) == ' ab ' ) { count ++ ; } } System . out . println ( count ) ; System . out . println ( s ) ; } }
import java . util . * ; public class GFG { static int discard_count = 0 ; static int power ( int a , int n ) { if ( n == 0 ) return 1 ; int p = power ( a , n / 2 ) ; p = p * p ; if ( n % 2 == 1 ) p = p * a ; return p ; } static void solve ( int i , int n , double sum , double k , int [ ] a , int [ ] prefix ) { if ( sum > k ) { discard_count += power ( 2 , n - i ) ; return ; } if ( i == n ) return ; double rem = prefix [ n - 1 ] - prefix [ i ] ; if ( sum + a [ i ] + rem > k ) solve ( i + 1 , n , sum + a [ i ] , k , a , prefix ) ; if ( sum + rem > k ) solve ( i + 1 , n , sum , k , a , prefix ) ; } static double countSubsequences ( int arr [ ] , int n , double K ) { double sum = 0.0 ; double k = ( double ) K ; double [ ] prefix = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { prefix [ i ] = ( double ) arr [ i ] ; sum += a [ i ] ; } prefix [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) prefix [ i ] = prefix [ i - 1 ] + a [ i ] ; double total = power ( 2 , n ) - 1 ; if ( sum <= k ) return total ; solve ( 0 , n , 0.0 , k , a , prefix ) ; return total - discard_count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 7 , 8 , 50 } ; int n = arr . length ; System . out . println ( countSubsequences ( arr , n , 50 ) ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node left , right ; } static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = null ; temp . right = null ; return temp ; } static void inorder ( Node root ) { if ( root == null ) return ; inorder ( root . left ) ; System . out . print ( root . data + " " ) ; inorder ( root . right ) ; } static boolean isIdentical ( Node root1 , Node root2 ) { if ( root1 == null && root2 == null ) return true ; else if ( root1 != null && root2 == null ) return false ; else if ( root1 == null && root2 != null ) return false ; else { if ( root1 . data == root2 . data && isIdentical ( root1 . left , root2 . left ) && isIdentical ( root1 . right , root2 . right ) ) return true ; else return false ; } } public static void main ( String [ ] args ) { Node root1 = newNode ( 5 ) ; Node root2 = newNode ( 5 ) ; root1 . left = newNode ( 3 ) ; root1 . right = newNode ( 8 ) ; root1 . left . left = newNode ( 2 ) ; root1 . left . right = newNode ( 4 ) ; root2 . left = newNode ( 3 ) ; root2 . right = newNode ( 8 ) ; root2 . left . left = newNode ( 2 ) ; root2 . left . right = newNode ( 4 ) ; if ( isIdentical ( root1 , root2 ) ) System . out . println ( " Both BSTs are identical " ) ; else System . out . println ( " BSTs are not identical " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; long [ ] dp = new long [ n + 1 ] ; dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s . charAt ( i ) == ' O ' ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 1 ] ; } else { dp [ i ] = dp [ i - 1 ] + dp [ i ] ; } } long ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += Math . max ( dp [ i ] , dp [ n ] - dp [ i - 1 ] ) ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String [ ] s = sc . nextLine ( ) . split ( " " ) ; int [ ] d = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { d [ i ] = Integer . parseInt ( s [ i ] ) ; } String t = sc . nextLine ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( t . equals ( " N " ) ) { System . out . println ( d [ 0 ] ) ; } else if ( t . equals ( " S " ) ) { System . out . println ( d [ 1 ] ) ; } else if ( t . equals ( " W " ) ) { System . out . println ( d [ 2 ] ) ; } else if ( t . equals ( " E " ) ) { System . out . println ( d [ 3 ] ) ; } } } }
import java . util . * ; public class GFG { static class node { int data ; node next ; node prev ; } static void printArr ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + " " ) ; } } static int findlength ( node head ) { node curr = head ; int cnt = 0 ; while ( curr != null ) { cnt ++ ; curr = curr . next ; } return cnt ; } static void convertArr ( node head ) { int len = findlength ( head ) ; node arr [ ] = new node [ len ] ; int index = 0 ; node curr = head ; while ( curr != null ) { arr [ index ++ ] = curr . data ; curr = curr . next ; } printArr ( arr , len ) ; } public static void main ( String [ ] args ) { node head = new node ( 0 ) ; head . next = new node ( 1 ) ; head . next . next = new node ( 2 ) ; head . next . next . next = new node ( 3 ) ; head . next . next . next = new node ( 4 ) ; head . next . next . next . next = new node ( 5 ) ; convertArr ( head ) ; } }
import java . util . * ; public class GFG { static int nonDecNums ( int n ) { int [ ] [ ] a = new int [ n + 1 ] [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) a [ 0 ] [ i ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] [ 9 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 8 ; j >= 0 ; j -- ) { a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } return a [ n ] [ 0 ] ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( " Non - decreasing digits = " + nonDecNums ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { int x = ( i + arr [ i ] ) % n ; if ( arr [ x ] == 0 ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Solution { public int minMoves ( int [ ] nums ) { if ( nums . length == 0 ) return 0 ; int min_num = Integer . MAX_VALUE ; for ( int i = 0 ; i < nums . length ; i ++ ) min_num = Math . min ( min_num , nums [ i ] ) ; return min_num + min_num ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 } ; int out = sObj . minMoves ( nums ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > 0 && b > 0 ) { if ( a % 2 == 0 && b % 2 == 0 ) { System . out . println ( " Positive " ) ; } else { System . out . println ( " Negative " ) ; } } else { System . out . println ( " Zero " ) ; } } }
import java . io . * ; public class GFG { static int firstSetBit ( int n ) { int x = n & ( n - 1 ) ; return ( n ^ x ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( firstSetBit ( n ) ) ; } }
import java . util . * ; public class GFG { static int MAX_CHAR = 256 ; static int maximumChars ( String str ) { int n = str . length ( ) ; int res = - 1 ; int firstInd [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { first_ind [ str . charAt ( i ) - ' a ' ] = i ; if ( first_ind [ str . charAt ( i ) - ' a ' ] == - 1 ) firstInd [ str . charAt ( i ) - ' a ' ] = i ; else res = Math . max ( res , Math . abs ( i - first_ind [ str . charAt ( i ) - ' a ' ] - 1 ) ) ; } return res ; } public static void main ( String [ ] args ) { String str = " abba " ; System . out . println ( maximumChars ( str ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } Arrays . sort ( arr , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] ) < d ) { ans += arr [ i ] [ 1 ] ; } else { ans -= arr [ i ] [ 1 ] ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static double findArea ( double a ) { double area = 5 * Math . sqrt ( 3 ) * a * a ; return area ; } static double findVolume ( double a ) { double volume = ( 5 / 12 ) * ( 3 + Math . sqrt ( 5 ) ) * a * a * a ; return volume ; } public static void main ( String [ ] args ) { double a = 5 ; System . out . println ( " Area : " + findArea ( a ) ) ; System . out . println ( " Volume : " + findVolume ( a ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int [ ] [ ] dp = new int [ 9 ] [ 6 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < 6 ; j ++ ) { dp [ i ] [ j ] = dp [ i + j ] [ j ] + dp [ i + j ] [ j + 1 ] ; } } int [ ] [ ] CUBIC_DIE_PDF = new int [ 6 ] [ 6 ] ; for ( int i = 0 ; i < 6 ; i ++ ) { for ( int j = 0 ; j < 6 ; j ++ ) { CUBIC_DIE_PDF [ i ] [ j ] = dp [ i ] [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < dp . length ; i ++ ) { ans += dp [ i ] [ 0 ] * CUBIC_DIE_PDF [ i ] [ 1 ] ; ans += dp [ i ] [ 1 ] * CUBIC_DIE_PDF [ i ] [ 2 ] ; } ans /= dp [ 0 ] . length ; return String . format ( " % .6f " , ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = 6 ; int Even = N / 2 ; int Odd = N - Even ; System . out . println ( Even * Odd ) ; } }
public class GFG { static int solve ( int M , int N , int s ) { if ( N % s == 0 ) N = N / s ; else N = ( N / s ) + 1 ; if ( M % s == 0 ) M = M / s ; else M = ( M / s ) + 1 ; return M * N ; } public static void main ( String [ ] args ) { int N = 12 , M = 13 , s = 4 ; System . out . println ( solve ( M , N , s ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } static int countPairs ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( lcm ( arr [ i ] , arr [ j ] ) == gcd ( arr [ i ] , arr [ j ] ) ) { ans ++ ; } } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class _1176A_Teams { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int sum = 0 ; for ( int i = 0 ; i < 6 ; i ++ ) { int a = input . nextInt ( ) ; sum += a ; } if ( sum == 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
import java . util . * ; public class GFG { static int _popcnt32 ( int number ) { int counter = 0 ; while ( number > 0 ) { if ( number % 2 == 1 ) counter ++ ; number = number / 2 ; } return counter ; } static int maximize ( int a ) { int n = _popcnt32 ( a ) ; int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { res = res | ( 1 << ( 32 - i ) ) ; } return Math . abs ( res ) ; } public static void main ( String [ ] args ) { int a = 1 ; System . out . println ( maximize ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a > k ) count ++ ; } System . out . println ( count ) ; } } }
import java . util . * ; public class _1176A_AnotherOneBitesTheDust { public static void main ( String [ ] args ) { Scanner input = new Scanner ( System . in ) ; int a = input . nextInt ( ) ; int b = input . nextInt ( ) ; int count = 0 ; if ( a == 1 && b == 1 ) { System . out . println ( 0 ) ; return ; } while ( a > 0 && b > 0 ) { if ( a > b ) { a -- ; b -- ; } else { a -- ; b -- ; } count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class Solution { public int xorQueries ( int arr [ ] , int queries [ ] ) { int [ ] pref = new int [ arr . length ] ; for ( int i = 0 ; i < arr . length ; i ++ ) pref [ i ] = arr [ i ] ^ pref [ arr . length - 1 ] ; int ans = 0 ; for ( int i = 0 ; i < queries . length ; i ++ ) ans = ( pref [ r + 1 ] ^ pref [ arr . length - 1 ] ) ; return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int arr [ ] = { 1 , 3 , 4 , 8 } ; int queries [ ] = { { 0 , 1 } , { 1 , 2 } , { 0 , 3 } , { 3 , 3 } } ; int out = sObj . xorQueries ( arr , queries ) ; System . out . println ( out ) ; } }
public class GFG { static String encodedChar ( String str , int k ) { String expand = " " ; int freq = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { String temp = " " ; freq = 0 ; while ( i < str . length ( ) && str . charAt ( i ) >= ' a ' && str . charAt ( i ) <= ' z ' ) { temp += str . charAt ( i ) ; i ++ ; } while ( i < str . length ( ) && str . charAt ( i ) >= '1' && str . charAt ( i ) <= '9' ) { freq = freq * 10 + str . charAt ( i ) - '0' ; i ++ ; } for ( int j = 1 ; j <= freq ; j ++ ) { expand += temp ; } } if ( freq == 0 ) { expand += temp ; } return expand . charAt ( k - 1 ) ; } public static void main ( String [ ] args ) { String str = " ab4c12ed3" ; int k = 21 ; System . out . println ( encodedChar ( str , k ) ) ; } }
public class GFG { static void printPossible ( int a , int b , int c ) { if ( ( a + b + c ) % 2 != 0 || a + b < c ) System . out . println ( " NO " ) ; else System . out . println ( " YES " ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 , c = 2 ; printPossible ( a , b , c ) ; } }
public class GFG { static int summation ( int n ) { int abs_sum = n * ( n + 1 ) / 2 ; int sign = ( ( n + 1 ) % 2 == 0 ) ? 1 : - 1 ; int result_sum = sign * abs_sum ; return result_sum ; } public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( summation ( N ) ) ; } }
import java . util . * ; public class GFG { static void sortSquare ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] * arr [ i ] ; Arrays . sort ( arr ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 6 , - 3 , - 1 , 2 , 4 , 5 } ; int n = arr . length ; System . out . println ( " Before sort " ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; System . out . println ( ) ; sortSquare ( arr , n ) ; System . out . println ( " After sort " ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int i = 0 ; while ( i < n - 1 && arr [ i ] + arr [ i + 1 ] < t ) { i ++ ; } if ( i == n - 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] == 0 ) { continue ; } int count = 0 ; for ( int j = i ; j < dp . length ; j ++ ) { if ( dp [ j ] == 0 ) { dp [ j ] = 1 ; count ++ ; } } if ( count == 2 ) { dp [ i ] = 2 ; count = 1 ; } } System . out . println ( count ) ; } }
import java . io . * ; public class GFG { static boolean isTriangular ( int num ) { if ( num < 0 ) return false ; int c = ( - 2 * num ) ; int b = 1 , a = 1 ; int d = ( b * b ) - ( 4 * a * c ) ; if ( d < 0 ) return false ; int root1 = ( - b + Math . sqrt ( d ) ) / ( 2 * a ) ; int root2 = ( - b - Math . sqrt ( d ) ) / ( 2 * a ) ; if ( root1 > 0 && root1 == root1 ) return true ; if ( root2 > 0 && root2 == root2 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 55 ; if ( isTriangular ( n ) ) System . out . println ( " The number is a triangular number " ) ; else System . out . println ( " The number is NOT a triangular number " ) ; } }
public class GFG { static void printNumberWithDR ( int k , int d ) { if ( d == 0 && k != 1 ) System . out . print ( - 1 + " " ) ; else { System . out . print ( d + " " ) ; k -- ; while ( k > 0 ) System . out . print ( 0 + " " ) ; k -- ; } } public static void main ( String [ ] args ) { int k = 4 , d = 4 ; printNumberWithDR ( k , d ) ; } }
public class GFG { static int N = 3 ; static void rotateMatrix ( int mat [ ] [ ] ) { for ( int i = N - 1 ; i >= 0 ; i -- ) { int j = N - 1 ; while ( j >= 0 ) { System . out . print ( mat [ i ] [ j ] + " " ) ; j -- ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; rotateMatrix ( mat ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; if ( n % 500 == 0 ) { ans = n / 500 ; } System . out . println ( ans ) ; } }
public class GFG { static int getProduct ( int n ) { int product = 1 ; while ( n != 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } return product ; } public static void main ( String [ ] args ) { int n = 4513 ; System . out . println ( getProduct ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int b = sc . nextInt ( ) , r = sc . nextInt ( ) , g = sc . nextInt ( ) , c = sc . nextInt ( ) , s = sc . nextInt ( ) , t = sc . nextInt ( ) ; if ( ( b | r | g | c | s | t ) == 0 ) { break ; } solve ( ) ; } } void solve ( ) { int [ ] coins = new int [ 4 ] ; coins [ 0 ] = b * 5 + r * 3 + s ; coins [ 1 ] = ( t - coins [ 0 ] ) * 7 ; coins [ 2 ] = ( t - coins [ 1 ] ) * 2 ; coins [ 3 ] += ( t - coins [ 2 ] ) * 2 ; coins [ 4 ] += ( t - coins [ 3 ] ) * 3 ; coins [ 5 ] += ( t - coins [ 4 ] ) * 2 ; coins [ 6 ] += ( t - coins [ 5 ] ) * 3 ; System . out . println ( coins [ 0 ] ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) % 1000000007 ; } } int m = sc . nextInt ( ) ; for ( int i = 1 ; i <= m ; i ++ ) { int c = sc . nextInt ( ) ; for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) % 1000000007 ; } } System . out . println ( dp [ n ] [ m ] ) ; } }
import java . io . * ; public class GFG { static double PI = 3.14159265 ; static double length_rope ( double r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { double r = 7 ; System . out . println ( length_rope ( r ) ) ; } }
public class GFG { static int reverseDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } static boolean isPalindrome ( int n ) { int rev_n = reverseDigits ( n ) ; if ( rev_n == n ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 4562 ; if ( isPalindrome ( n ) == true ) System . out . println ( " Is " + n + " a Palindrome number ? - > " ) ; else System . out . println ( " Is " + n + " a Palindrome number ? - > " ) ; n = 2002 ; if ( isPalindrome ( n ) == true ) System . out . println ( " Is " + n + " a Palindrome number ? - > " ) ; else System . out . println ( " Is " + n + " a Palindrome number ? - > " ) ; } }
public class Solution { public String addStrings ( String num1 , String num2 ) { String res = " " ; int pos1 = num1 . length ( ) - 1 , pos2 = num2 . length ( ) - 1 ; int carry = 0 ; while ( pos1 >= 0 || pos2 >= 0 || carry == 1 ) { int digit1 = 0 , digit2 = 0 ; if ( pos1 >= 0 ) digit1 = num1 . charAt ( pos1 ) - '0' ; if ( pos2 >= 0 ) digit2 = num2 . charAt ( pos2 ) - '0' ; res += ( digit1 + digit2 + carry ) % 10 ; carry = ( digit1 + digit2 + carry ) / 10 ; pos1 -- ; pos2 -- ; } return res . substring ( 0 , res . length ( ) - 1 ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String num1 = "11" , num2 = "123" ; String out = sObj . addStrings ( num1 , num2 ) ; System . out . println ( out ) ; } }
public class GFG { static boolean isPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { sum = sum + i + n / i ; } } return ( sum == n && n != 1 ) ; } public static void main ( String [ ] args ) { System . out . println ( " Below are all perfect numbers till 10000" ) ; int n = 2 ; for ( int i = 0 ; i < 10000 ; i ++ ) { if ( isPerfect ( n ) ) { System . out . println ( n + " is a perfect number " ) ; } } } }
import java . io . * ; public class GFG { static boolean isPower ( int n ) { if ( n <= 1 ) return true ; for ( int x = 2 ; x <= Math . sqrt ( n ) ; x ++ ) { int p = x ; while ( p <= n ) { p = p * x ; if ( p == n ) return true ; } } return false ; } public static void main ( String [ ] args ) { for ( int i = 2 ; i < 100 ; i ++ ) { if ( isPower ( i ) ) System . out . print ( i + " " ) ; } } }
import java . io . * ; public class GFG { static boolean isPower ( int n ) { if ( n == 1 ) return true ; for ( int x = 2 ; x <= Math . sqrt ( n ) ; x ++ ) { int y = 2 ; int p = ( int ) Math . pow ( x , y ) ; while ( p <= n && p > 0 ) { if ( p == n ) return true ; y ++ ; p = ( int ) Math . pow ( x , y ) ; } } return false ; } public static void main ( String [ ] args ) { for ( int i = 2 ; i <= 100 ; i ++ ) { if ( isPower ( i ) ) System . out . print ( i + " " ) ; } } }
import java . util . * ; public class GFG { static void findTwoNumbers ( int sum , int gcd ) { if ( __gcd ( gcd , sum - gcd ) == gcd && sum != gcd ) { System . out . println ( " a = " + Math . min ( gcd , sum - gcd ) + " , b = " + sum - Math . min ( gcd , sum - gcd ) ) ; } else { System . out . println ( - 1 ) ; } } public static void main ( String [ ] args ) { int sum = 8 ; int gcd = 2 ; findTwoNumbers ( sum , gcd ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int rb = sc . nextInt ( ) ; int rd = sc . nextInt ( ) ; int cd = sc . nextInt ( ) ; int count = 0 ; int i = 1 ; while ( rb == n ) { rb += i ; i ++ ; } while ( cb == m ) { rd += i ; cb += i ; count ++ ; } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long a = sc . nextLong ( ) ; long b = sc . nextLong ( ) ; long c = sc . nextLong ( ) ; long d = sc . nextLong ( ) ; long x = 0 ; if ( n % a == 0 ) { x = n / a ; } else { x = n / a + 1 ; } if ( n % c == 0 ) { y = n / c ; } else { y = n / c + 1 ; } System . out . println ( x * b < y * d ? y * d : y * d ) ; } }
import java . util . * ; public class GFG { static int totalPairs ( int arr [ ] , int n ) { HashMap < Integer , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = Integer . bitCount ( arr [ i ] ) ; if ( m . containsKey ( x ) ) m . put ( x , m . get ( x ) + 1 ) ; else m . put ( x , 1 ) ; } int result = 0 ; for ( Map . Entry < Integer , Integer > it : m . entrySet ( ) ) result += ( ( int ) it . getValue ( ) * ( int ) ( it . getValue ( ) - 1 ) ) / 2 ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 5 , 3 , 9 , 1 , 2 } ; int n = arr . length ; System . out . println ( totalPairs ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int center_hexadecagonal_num ( int n ) { return 8 * n * n - 8 * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( n + " th centered hexadecagonal number : " + center_hexadecagonal_num ( n ) ) ; n = 12 ; System . out . println ( n + " th centered hexadecagonal number : " + center_hexadecagonal_num ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = ( i + 1 ) * 4 ; } Arrays . sort ( arr ) ; int min = Math . min ( h , s ) ; int min2 = Math . min ( d , 2 * n ) ; int sum = 0 ; if ( n % 2 == 0 ) { sum += min2 * 2 ; } else { sum += min2 * 4 ; } System . out . println ( sum ) ; } }
public class GFG { static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) K = 0 ; int totalnumbers = R - L + 1 ; int factor9 = totalnumbers / 9 ; int rem = totalnumbers % 9 ; int ans = factor9 ; for ( int i = R ; i >= R ; i -- ) { int rem1 = i % 9 ; if ( rem1 == K ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int L = 10 , R = 22 , K = 3 ; System . out . println ( countNumbers ( L , R , K ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) , c = sc . nextInt ( ) , d = sc . nextInt ( ) , e = sc . nextInt ( ) , f = sc . nextInt ( ) ; long ans = 0 ; if ( e > f ) { ans += Math . min ( a , d ) * e ; d -= a ; ans += Math . min ( b , c ) * f ; } else { ans += Math . min ( b , c ) * e ; d -= b ; ans += Math . min ( a , d ) * f ; } pw . println ( ans ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . Arrays ; public class Solution { public int Solve ( int [ ] A ) { int ans = 2 ; int n = A . length ; Arrays . sort ( A ) ; for ( int j = n - 2 ; j >= 0 ; j -- ) { int i = j - 1 , k = j + 1 ; while ( i >= 0 && k < n ) { if ( A [ i ] + A [ k ] == 2 * A [ j ] ) { llap [ j ] = Math . max ( llap [ k ] + 1 , llap [ j ] ) ; ans = Math . max ( ans , llap [ j ] ) ; i -- ; k ++ ; } else if ( A [ i ] + A [ k ] < 2 * A [ j ] ) k ++ ; else i -- ; } } return ans ; } public static void main ( String [ ] args ) { Solution obj = new Solution ( ) ; int [ ] a = { 9 , 4 , 7 , 2 , 10 } ; int [ ] ans = new int [ a . length ] ; for ( int i = 0 ; i < a . length ; i ++ ) ans [ i ] = obj . Solve ( a ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int minimumChanges ( int arr [ ] , int n , int d ) { int maxFreq = Integer . MIN_VALUE ; HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a0 = arr [ i ] - i * d ; if ( freq . containsKey ( a0 ) ) { freq . put ( a0 , freq . get ( a0 ) + 1 ) ; } else { freq . put ( a0 , 1 ) ; } if ( freq . get ( a0 ) > maxFreq ) { maxFreq = freq . get ( a0 ) ; } } return ( n - maxFreq ) ; } public static void main ( String [ ] args ) { int n = 5 , d = 1 ; int arr [ ] = { 1 , 3 , 3 , 4 , 6 } ; int ans = minimumChanges ( arr , n , d ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; arr [ i ] [ 2 ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( arr [ i ] [ j ] >= arr [ i ] [ j ] ) { min = Math . min ( min , arr [ i ] [ j ] ) ; } } } System . out . println ( min + 1 ) ; } }
import java . util . Arrays ; public class GFG { static int countPoints ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m && a [ i ] + y < b [ j ] ) { if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else j ++ ; } } return count ; } public static void main ( String [ ] args ) { int x = 1 , y = 4 ; int a [ ] = { 1 , 5 } ; int n = a . length ; int b [ ] = { 1 , 1 , 2 } ; int m = b . length ; System . out . println ( countPoints ( n , m , a , b , x , y ) ) ; } }
public class GFG { static int multiplyWith3Point5 ( int x ) { return ( x << 1 ) + x + ( x >> 1 ) ; } public static void main ( String [ ] args ) { int x = 4 ; System . out . println ( multiplyWith3Point5 ( x ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; for ( int tt = 0 ; tt < t ; tt ++ ) { int n = in . nextInt ( ) ; int s = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int sum = 0 ; int l = 0 ; int r = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( sum >= s ) { pw . println ( - 1 ) ; continue ; } else { l = Math . min ( l , r ) ; r = Math . max ( r , l - 1 ) ; } } if ( sum >= s ) { pw . println ( l ) ; } else { pw . println ( - 1 ) ; } } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
public class GFG { static int longestSubstring ( String s ) { int cnt = 1 , maxi = 1 , n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) cnt ++ ; else { maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } } maxi = Math . max ( cnt , maxi ) ; return maxi ; } public static void main ( String [ ] args ) { String s = " ccccdeededff " ; System . out . println ( longestSubstring ( s ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int [ ] ans = new int [ 50 ] ; for ( int i = 0 ; i < 50 ; i ++ ) { ans [ i ] = i + 50 ; } for ( int i = 0 ; i < 50 ; i ++ ) { ans [ i ] += k / 50 ; } System . out . println ( 50 ) ; for ( int i = 0 ; i < 50 ; i ++ ) { System . out . print ( ans [ i ] + " " ) ; } } }
public class GFG { static int zeroUpto ( int digits ) { int first = ( int ) Math . pow ( 10 , digits - 1 ) / 9 ; int second = ( int ) Math . pow ( 9 , digits - 1 ) / 8 ; return 9 * ( first - second ) ; } static int countZero ( String num ) { int k = num . length ( ) ; int total = zeroUpto ( k - 1 ) ; int non_zero = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '0' ) { non_zero -- ; break ; } non_zero += ( ( ( num . charAt ( i ) - '0' ) - 1 ) * ( ( int ) Math . pow ( 9 , k - 1 - i ) ) ) ; } int no = 0 , remaining = 0 , calculatedUpto = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { no = no * 10 + ( num . charAt ( i ) - '0' ) ; if ( i != 0 ) calculatedUpto = calculatedUpto * 10 + 9 ; } remaining = no - calculatedUpto ; int ans = zeroUpto ( k - 1 ) + ( remaining - non_zero - 1 ) ; return ans ; } public static void main ( String [ ] args ) { String num = "107" ; System . out . println ( " Count of numbers from 1 to " + num + " is " + countZero ( num ) ) ; num = "1264" ; System . out . println ( " Count of numbers from 1 to " + num + " is " + countZero ( num ) ) ; } }
import java . io . * ; public class GFG { static double cone ( double a ) { if ( a < 0 ) return - 1 ; double r = ( a * Math . sqrt ( 2 ) ) / 3 ; double h = ( 2 * a ) / 3 ; double V = 3.14 * Math . pow ( r , 2 ) * h ; return V ; } public static void main ( String [ ] args ) { double a = 5 ; System . out . println ( cone ( a ) ) ; } }
import java . util . * ; public class GFG { static boolean Prime ( int n ) { if ( n == 1 ) return false ; for ( int i = 2 ; i <= Math . sqrt ( n + 1 ) ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static boolean checkSumPrime ( String str ) { int sum = 0 ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) { sum += Math . abs ( str . charAt ( i - 1 ) - str . charAt ( i ) ) ; } if ( Prime ( sum ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int num = 142 ; String str = Integer . toString ( num ) ; if ( checkSumPrime ( str ) ) System . out . println ( " Prime " ) ; else System . out . println ( " Not Prime " ) ; } }
import java . io . * ; public class GFG { static double sum ( int n ) { if ( n < 2 ) return 1 ; else return 1 / n + ( sum ( n - 1 ) ) ; } public static void main ( String [ ] args ) { System . out . println ( sum ( 8 ) ) ; System . out . println ( sum ( 10 ) ) ; } }
public class GFG { static int countElements ( int p [ ] , int n ) { int ans = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( p [ i - 1 ] > p [ i ] && p [ i ] > p [ i + 1 ] ) ans ++ ; else if ( p [ i - 1 ] < p [ i ] && p [ i ] < p [ i + 1 ] ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int p [ ] = { 2 , 5 , 1 , 3 , 4 } ; int n = p . length ; System . out . println ( countElements ( p , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; if ( s . charAt ( 0 ) == t . charAt ( 0 ) ) { System . out . println ( " = " ) ; } else if ( s . charAt ( 0 ) < t . charAt ( 0 ) ) { System . out . println ( " < " ) ; } else if ( s . charAt ( 0 ) > t . charAt ( 0 ) ) { System . out . println ( " > " ) ; } else { System . out . println ( " < " ) ; } } }
public class GFG { static double findVolume ( double l , double b , double h ) { return ( ( l * b * h ) / 2 ) ; } public static void main ( String [ ] args ) { double l = 18 , b = 12 , h = 9 ; System . out . println ( " Volume of triangular prism : " + findVolume ( l , b , h ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] count = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count [ s . charAt ( i ) - ' A ' ] ++ ; } Arrays . sort ( count ) ; int ans = 0 ; for ( int i = 26 ; i >= 0 ; i -- ) { if ( count [ i ] >= k ) { ans += k * count [ i ] ; } else { ans += k * count [ i ] ; } } System . out . println ( ans ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int i = 286 , j = 166 , k = 144 ; while ( true ) { int triangle = i * ( i + 1 ) / 2 ; int pentagon = j * ( j * 3 - 1 ) / 2 ; int hexagon = k * ( k * 2 - 1 ) ; int minimum = Math . min ( triangle , pentagon , hexagon ) ; if ( minimum == triangle && triangle == pentagon && hexagon == k ) return Integer . toString ( triangle ) ; if ( minimum == triangle ) i ++ ; if ( minimum == pentagon ) j ++ ; if ( minimum == hexagon ) k ++ ; } } }
import java . util . * ; public class GFG { static int maxPrimefactorNum ( int N ) { if ( N < 2 ) return 0 ; boolean arr [ ] = new boolean [ N + 1 ] ; int prod = 1 ; int res = 0 ; for ( int p = 2 ; p * p <= N ; p ++ ) { if ( arr [ p ] == true ) { for ( int i = p * 2 ; i <= N ; i += p ) arr [ i ] = false ; prod *= p ; if ( prod > N ) return res ; res ++ ; } } return res ; } public static void main ( String [ ] args ) { int N = 500 ; System . out . println ( maxPrimefactorNum ( N ) ) ; } }
import java . util . * ; public class GFG { static boolean checkDivisors ( int a [ ] , int n ) { int X = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; List < Integer > b = new ArrayList < > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( X ) ; i ++ ) { if ( X % i == 0 ) { b . add ( i ) ; if ( X / i != i ) b . add ( X / i ) ; } } if ( b . size ( ) != n ) return false ; Arrays . sort ( b ) ; Arrays . sort ( a ) ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) if ( b . get ( i ) != a [ i ] ) return false ; return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 2 , 12 , 48 , 6 , 4 , 24 , 16 , 3 } ; int N = arr . length ; if ( checkDivisors ( arr , N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static void subArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = i ; k <= j ; k ++ ) { System . out . print ( arr [ k ] + " " ) ; } System . out . println ( ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( " All Non - empty Subarrays " ) ; subArray ( arr , n ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( n / 3 ) ; } else if ( n % 4 == 0 ) { System . out . println ( n / 2 ) ; } else { System . out . println ( - 1 ) ; } } } }
import java . util . * ; public class GFG { static int maxSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] * i ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 6 , 1 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
import java . util . Arrays ; public class GFG { static int maxSum ( int [ ] a , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i += 2 ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
import java . util . Arrays ; public class GFG { static int findAnswer ( int n , int arr [ ] ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { sum += ( arr [ i ] + arr [ n - i - 1 ] ) * ( arr [ i ] + arr [ n - i - 1 ] ) ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 53 , 28 , 143 , 5 } ; int n = arr . length ; System . out . println ( findAnswer ( n , arr ) ) ; } }
import java . util . Arrays ; public class GFG { static int findSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = arr [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) sum += arr [ i + 1 ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 1 , 1 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }
import java . util . * ; public class LectureSleep { public static void main ( String [ ] args ) { LectureSleep d = new LectureSleep ( ) ; d . show ( ) ; } public static class LectureSleep { public void show ( ) { System . out . println ( " Deepest LeftLeaf Node : : " + d . doit ( ) ) ; } public int doit ( ) { LinkedList < Lecture > l = new LinkedList < Lecture > ( ) ; l . add ( new Lecture ( 1 , 1 ) ) ; l . add ( new Lecture ( 2 , 2 ) ) ; l . add ( new Lecture ( 3 , 4 ) ) ; l . add ( new Lecture ( 5 , 6 ) ) ; l . add ( new Lecture ( 7 , 8 ) ) ; l . add ( new Lecture ( 9 , 10 ) ) ; l . add ( new Lecture ( 11 , 11 ) ) ; l . add ( new Lecture ( 12 , 13 ) ) ; l . add ( new Lecture ( 14 , 15 ) ) ; l . add ( new Lecture ( 15 , 16 ) ) ; l . add ( new Lecture ( 15 , 17 ) ) ; l . add ( new Lecture ( 15 , 18 ) ) ; l . add ( new Lecture ( 15 , 19 ) ) ; l . add ( new Lecture ( 15 , 21 ) ) ; l . add ( new Lecture ( 15 , 22 ) ) ; l . add ( new Lecture ( 15 , 23 ) ) ; l . add ( new Lecture ( 15 , 27 ) ) ; if ( l . size ( ) == 0 ) return - 1 ; System . out . println ( " No result , leaf not found " ) ; return - 1 ; } } }
import java . util . * ; public class GFG { static class newnode { int data ; newnode ( int data ) { this . data = data ; this . left = null ; this . right = null ; } } static int getDeepestRightLeafNode ( newnode root ) { if ( root == null ) return - 1 ; Queue < newnode > q = new LinkedList < > ( ) ; q . add ( root ) ; int result = - 1 ; while ( q . size ( ) > 0 ) { newnode temp = q . peek ( ) ; q . remove ( ) ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; if ( temp . right . left != null && temp . right . left . right != null ) result = temp . right ; } return result ; } public static void main ( String [ ] args ) { newnode root = new newnode ( 1 ) ; root . left = new newnode ( 2 ) ; root . right = new newnode ( 3 ) ; root . left . right = new newnode ( 4 ) ; root . right . left = new newnode ( 5 ) ; root . right . right = new newnode ( 6 ) ; root . right . left . right = new newnode ( 7 ) ; root . right . right . right = new newnode ( 8 ) ; root . right . left . right . left = new newnode ( 9 ) ; root . right . right . right . right = new newnode ( 10 ) ; int result = getDeepestRightLeafNode ( root ) ; if ( result != - 1 ) System . out . println ( " No result , leaf not found " ) ; else System . out . println ( " Deepest Right Leaf Node : " + result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 1 ; for ( int i = 1 ; i < n ; i ++ ) { sum += 2 ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static void printRatio ( int a , int b , int c , int d ) { if ( b * c > a * d ) { swap ( c , d ) ; swap ( a , b ) ; } int lcm = ( a * c ) / gcd ( a , c ) ; int x = lcm / a ; int y = lcm / c ; int d = d * y ; int k = gcd ( b , d ) ; b = b / k ; d = d / k ; System . out . println ( b + " : " + d ) ; } public static void main ( String [ ] args ) { int a = 4 , b = 3 , c = 2 , d = 2 ; printRatio ( a , b , c , d ) ; } }
import java . util . * ; public class GFG { static int maxsum_SIS ( int arr [ ] , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) current_sum += arr [ i ] ; else { max_sum = Math . max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } } return Math . max ( max_sum , current_sum ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( " Maximum sum : " + maxsum_SIS ( arr , n ) ) ; } }
public class GFG { static int GCD ( int a , int b ) { if ( b == 0 ) return a ; return GCD ( b , a % b ) ; } static int findMaxSumUtil ( int arr [ ] , int n ) { int finalGCD = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) finalGCD = GCD ( arr [ i ] , finalGCD ) ; return finalGCD ; } static int findMaxSum ( int arr [ ] , int n ) { int maxElement = findMaxSumUtil ( arr , n ) ; return ( maxElement * n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 20 , 12 , 36 } ; int n = arr . length ; System . out . println ( findMaxSum ( arr , n ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { while ( b != 0 ) { int t = b ; b = a % b ; a = t ; } return a ; } static int findMinDiff ( int a , int b , int x , int y ) { int g = gcd ( a , b ) ; int diff = Math . abs ( x - y ) % g ; return Math . min ( diff , g - diff ) ; } public static void main ( String [ ] args ) { int a = 20 , b = 52 , x = 5 , y = 7 ; System . out . println ( findMinDiff ( a , b , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int cx = sc . nextInt ( ) ; int cy = sc . nextInt ( ) ; if ( cx <= x + w && cy <= y + h ) { count ++ ; } } System . out . println ( count ) ; } } }
public class GFG { static boolean divisibleby37 ( String n ) { int len = n . length ( ) ; if ( n . equals ( "0" ) ) return true ; if ( len % 3 == 1 ) { n = "00" + n ; len += 2 ; } else if ( len % 3 == 2 ) { n = "0" + n ; len += 1 ; } int gSum = 0 ; while ( len != 0 ) { int group = Integer . parseInt ( n . substring ( len - 3 , len ) ) ; len = len - 3 ; gSum += group ; } if ( gSum >= 1000 ) return ( divisibleby37 ( Integer . toString ( gSum ) ) ) ; else return ( gSum % 37 == 0 ) ; } public static void main ( String [ ] args ) { System . out . println ( divisibleby37 ( "8955795758" ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( y >= n ) { if ( x == y ) System . out . println ( - 1 ) ; else { if ( Math . pow ( y - n + 1 , 2 ) >= x ) System . out . println ( 1 ) ; else System . out . println ( - 1 ) ; } } else { if ( Math . pow ( y - n + 1 , 2 ) >= x ) System . out . println ( 1 ) ; else System . out . println ( - 1 ) ; } } }
import java . util . * ; public class GFG { static int lcs ( String X , String Y , int m , int n ) { int L [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) L [ i ] [ j ] = 0 ; else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) L [ i ] [ j ] = L [ i - 1 ] [ j - 1 ] + 1 ; else L [ i ] [ j ] = Math . max ( L [ i - 1 ] [ j ] , L [ i ] [ j - 1 ] ) ; } } return L [ m ] [ n ] ; } static int findMinCost ( String X , String Y , int costX , int costY ) { int m = X . length ( ) ; int n = Y . length ( ) ; int len_LCS = lcs ( X , Y , m , n ) ; return ( costX * ( m - len_LCS ) + costY * ( n - len_LCS ) ) ; } public static void main ( String [ ] args ) { String X = " ef " ; String Y = " gh " ; System . out . println ( " Minimum Cost to make two strings " ) ; System . out . println ( " identical is = " + findMinCost ( X , Y , 10 , 20 ) ) ; } }
import java . io . * ; public class GFG { static int numberOfSquares ( int base ) { base = ( base - 2 ) ; base = base / 2 ; return base * ( base + 1 ) / 2 ; } public static void main ( String [ ] args ) { int base = 8 ; System . out . println ( numberOfSquares ( base ) ) ; } }
import java . io . * ; public class GFG { static double rmsValue ( int arr [ ] , int n ) { double square = 0 , mean = 0.0 , root = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) square += arr [ i ] * arr [ i ] ; mean = ( square / ( double ) ( n ) ) ; root = Math . sqrt ( mean ) ; return root ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 4 , 6 , 8 } ; int n = arr . length ; System . out . println ( rmsValue ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { dp [ i ] [ 0 ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; dp [ i ] [ a ] = Math . min ( dp [ i ] [ a ] , dp [ i ] [ b ] + b ) ; } int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { ans = Math . max ( ans , dp [ i ] [ m ] - dp [ n ] [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] p = new int [ n ] ; int [ ] nl = new int [ n ] ; int [ ] nr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = - 1 ; nl [ i ] = in . nextInt ( ) ; nr [ i ] = in . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { Arrays . fill ( dp [ i ] , - 1 ) ; } dp [ 1 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i != n - 1 ) { out . print ( " node " ) ; out . print ( i + " : " ) ; out . print ( p [ i ] ) ; } if ( i != n - 1 ) { out . print ( " node " ) ; out . print ( nl [ i ] ) ; } if ( i != n - 1 ) { out . print ( " node " ) ; out . print ( nl [ i ] ) ; } } out . println ( ) ; return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static int n = 6 , m = 6 ; static int maxSum ( int arr [ ] [ ] ) { int dp [ ] [ ] = new int [ n + 1 ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { int m1 = 0 , m2 = 0 , m3 = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( ( j / ( m / 3 ) ) == 0 ) m1 = Math . max ( m1 , arr [ i ] [ j ] ) ; else if ( ( j / ( m / 3 ) ) == 1 ) m2 = Math . max ( m2 , arr [ i ] [ j ] ) ; else if ( ( j / ( m / 3 ) ) == 2 ) m3 = Math . max ( m3 , arr [ i ] [ j ] ) ; } dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 1 ] , dp [ i ] [ 2 ] ) + m1 ; dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 2 ] ) + m2 ; dp [ i + 1 ] [ 2 ] = Math . max ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) + m3 ; } return Math . max ( Math . max ( dp [ n ] [ 0 ] , dp [ n ] [ 1 ] ) , dp [ n ] [ 2 ] ) ; } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 1 , 3 , 5 , 2 , 4 , 6 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 1 , 3 , 5 , 2 , 4 , 6 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 6 , 4 , 5 , 1 , 3 , 2 } , { 1 , 3 , 5 , 2 , 4 , 6 } } ; maxSum ( arr ) ; } }
public class GFG { static void FindPoints ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int x4 , int y4 ) { int x5 = Math . max ( x1 , x3 ) ; int y5 = Math . max ( y1 , y3 ) ; int x6 = Math . min ( x2 , x4 ) ; int y6 = Math . min ( y2 , y4 ) ; if ( x5 > x6 || y5 > y6 ) { System . out . println ( " No intersection " ) ; return ; } System . out . print ( " ( " + x5 + " , " + y5 + " ) " ) ; System . out . print ( " ( " + x6 + " , " + y6 + " ) " ) ; int x7 = x5 ; int y7 = y6 ; System . out . print ( " ( " + x7 + " , " + y7 + " ) " ) ; int x8 = x6 ; int y8 = y5 ; System . out . print ( " ( " + x8 + " , " + y8 + " ) " ) ; } public static void main ( String [ ] args ) { int x1 = 0 , y1 = 0 ; int x2 = 10 , y2 = 8 ; int x3 = 2 , y3 = 3 ; int x4 = 7 , y4 = 9 ; FindPoints ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) ; } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int x = s . length ( ) ; int y = 0 ; if ( s . charAt ( x ) == ' X ' ) { y = 0 ; x = s . charAt ( x ) ; } else { y = s . charAt ( x ) ; } System . out . println ( y ) ; if ( x == y ) { System . out . println ( 0 ) ; System . out . println ( s . length ( ) ) ; } else if ( x == y ) { System . out . println ( ( s . length ( ) - y ) / 2 ) ; System . out . println ( x ) ; for ( int i = 0 ; i < x ; i ++ ) { if ( s . charAt ( i ) == ' X ' ) { System . out . print ( " X " ) ; x -- ; } else { System . out . print ( s . charAt ( i ) ) ; } } } else { System . out . println ( ( s . length ( ) - y ) / 2 ) ; System . out . println ( x ) ; for ( int i = 0 ; i < x ; i ++ ) { if ( s . charAt ( i ) == ' X ' ) { System . out . print ( " X " ) ; x -- ; } else { System . out . print ( s . charAt ( i ) ) ; } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int min = Math . min ( d , e ) ; int max = Math . max ( d , e ) ; int ans = n ; for ( int i = min ; i <= max ; i ++ ) { int remain = i - min ; int remained = n - remain ; int x = i * d + remained ; int y = i * e + remained ; int z = x + remained * y ; int y1 = y + remained * z ; int z1 = z + remained * x ; int z2 = z + remained * y1 ; int x3 = x + remained * z1 ; int y3 = y + remained * z2 ; int z3 = z + remained * z3 ; int z4 = x + remained * z2 ; int m = Math . min ( z1 , y3 ) ; if ( m < z4 ) { ans = m ; } } System . out . println ( ans ) ; } }
public class GFG { static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int maxratio = Integer . MIN_VALUE , maxindex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( val [ i ] / wt [ i ] ) > maxratio ) { maxratio = ( val [ i ] / wt [ i ] ) ; maxindex = i ; } } return ( W * maxratio ) ; } public static void main ( String [ ] args ) { int val [ ] = { 14 , 27 , 44 , 19 } ; int wt [ ] = { 6 , 7 , 9 , 8 } ; int n = val . length ; int W = 50 ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }
import java . util . * ; public class GFG { static void AlternateRearrange ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; Vector < Integer > v1 = new Vector < > ( ) ; Vector < Integer > v2 = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) v1 . add ( arr [ i ] ) ; else v2 . add ( arr [ i ] ) ; } int index = 0 ; int i = 0 , j = 0 ; boolean flag = false ; if ( arr [ 0 ] % 2 == 0 ) flag = true ; while ( index < n ) { if ( flag == true ) { arr [ index ++ ] = v1 . get ( i ) ; i ++ ; flag = ~ flag ; } else { arr [ index ++ ] = v2 . get ( j ) ; j ++ ; flag = ~ flag ; } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 8 , 13 , 2 , 19 , 14 } ; int n = arr . length ; AlternateRearrange ( arr , n ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a <= c && b >= c ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class GFG { static String decToBinary ( int n ) { int binaryNum [ ] = new int [ 32 ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n / 2 ; i ++ ; } String binary = " " ; for ( int j = i - 1 ; j >= 0 ; j -- ) binary += binaryNum [ j ] ; return binary ; } static int countFreq ( int pat [ ] , String txt ) { int M = pat . length ; int N = txt . length ( ) ; int res = 0 ; for ( int i = 0 ; i < N - M + 1 ; i ++ ) { int j = 0 ; while ( j < M ) { if ( txt . charAt ( i + j ) != pat [ j ] ) break ; j ++ ; } if ( j == M ) { res ++ ; j = 0 ; } } return res ; } static void findOccurrence ( int arr [ ] , int n , int pattern ) { for ( int i = 0 ; i < n ; i ++ ) { int binary = decToBinary ( arr [ i ] ) ; System . out . print ( countFreq ( pattern , binary ) + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 106 , 7 , 8 } ; int pattern = "10" ; int n = arr . length ; findOccurrence ( arr , n , pattern ) ; } }
public class GFG { static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x += arr [ i ] & 1 ; } System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearrayequal ( arr , n ) ; } }
import java . util . * ; public class Solution { public int findKthLargest ( int [ ] nums , int k ) { Arrays . sort ( nums ) ; return quickSelection ( nums , 0 , nums . length - 1 , nums . length - k ) ; } public int quickSelection ( int [ ] nums , int start , int end , int k ) { if ( start > end ) return Integer . MAX_VALUE ; int pivot = nums [ end ] ; int left = start ; for ( int i = start ; i < end ; i ++ ) { if ( nums [ i ] <= pivot ) { int temp = nums [ left ] ; nums [ left ] = nums [ i ] ; nums [ i ] = nums [ left ] ; left ++ ; } } int temp = nums [ left ] ; nums [ left ] = nums [ end ] ; nums [ end ] = nums [ left ] ; if ( left == k ) return nums [ left ] ; else if ( left < k ) return quickSelection ( nums , left + 1 , end , k ) ; else return quickSelection ( nums , start , left - 1 , k ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 3 , 2 , 1 , 5 , 6 , 4 } ; int k = 2 ; int out = sObj . findKthLargest ( nums , k ) ; System . out . println ( out ) ; } }
public class GFG { static String isDivisible ( int n ) { int temp = n ; while ( n > 0 ) { int k = n % 10 ; if ( temp % k == 0 ) return " YES " ; n /= 10 ; } return " NO " ; } public static void main ( String [ ] args ) { int n = 9876543 ; System . out . println ( isDivisible ( n ) ) ; } }
public class GFG { static String isDivisible ( int n ) { int temp = n ; int sum = 0 ; while ( n > 0 ) { int k = n % 10 ; sum += k ; n /= 10 ; } if ( temp % sum == 0 ) return " YES " ; return " NO " ; } public static void main ( String [ ] args ) { int n = 123 ; System . out . println ( isDivisible ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > b ) { System . out . println ( " GREATER " ) ; } else if ( a < b ) { System . out . println ( " EQUAL " ) ; } else { System . out . println ( " GREATER " ) ; } } }
public class GFG { static int calculateAreaSum ( int l , int b ) { int size = 1 , maxSize = Math . min ( l , b ) ; int totalArea = 0 ; for ( int i = 1 ; i <= maxSize ; i ++ ) { totalSquares = ( ( l - size + 1 ) * ( b - size + 1 ) ) ; int area = ( totalSquares * size * size ) ; totalArea += area ; size ++ ; } return totalArea ; } public static void main ( String [ ] args ) { int l = 4 , b = 3 ; System . out . println ( calculateAreaSum ( l , b ) ) ; } }
public class GFG { static void arrange ( int N ) { if ( N == 1 ) { System . out . println ( "1" ) ; return ; } if ( N == 2 || N == 3 ) { System . out . println ( " - 1" ) ; return ; } int even = - 1 , odd = - 1 ; if ( N % 2 == 0 ) { even = N ; odd = N - 1 ; } else { odd = N ; even = N - 1 ; } while ( odd >= 1 ) { System . out . print ( odd + " " ) ; odd -- ; } while ( even >= 2 ) { System . out . print ( even + " " ) ; even -- ; } } public static void main ( String [ ] args ) { int N = 5 ; arrange ( N ) ; } }
import java . util . * ; public class GFG { static int findMinEqualSums ( int a [ ] , int N ) { int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) sum += a [ i ] ; int sum1 = 0 , sum2 = 0 , min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum1 += a [ i ] ; sum2 = sum - sum1 ; if ( Math . abs ( sum1 - sum2 ) < min ) min = Math . abs ( sum1 - sum2 ) ; if ( min == 0 ) break ; } return min ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 5 , 7 , 8 } ; int N = a . length ; System . out . println ( findMinEqualSums ( a , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n == 1 || n == 2 ) { System . out . println ( n ) ; } else { int x = n / 3 ; if ( n % 3 == 0 ) { x += 2 ; } else { x += 1 ; } System . out . println ( x ) ; } } } }
import java . util . Arrays ; public class GFG { static int findOptimalSolution ( int a [ ] , int N ) { Arrays . sort ( a ) ; int points = 0 ; for ( int i = 0 ; i < N ; i ++ ) { points += a [ i ] * i ; } return points ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 2 , 3 , 9 } ; int N = a . length ; System . out . println ( findOptimalSolution ( a , N ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int time = 0 ; int [ ] timeArr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { timeArr [ i ] = sc . nextInt ( ) ; } int [ ] timeArrToTime = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { timeArrToTime [ i ] = sc . nextInt ( ) ; } int time = timeArrToTime [ n - 1 ] + b ; int [ ] timeArrToTime = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { timeArrToTime [ i ] = timeArrToTime [ i ] + timeArr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( time >= timeArrToTime [ i ] ) { System . out . print ( time + " " ) ; time = 0 ; break ; } } System . out . println ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum <= m ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int getPairs ( int a [ ] ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < a [ i ] ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 3 , 1 } ; System . out . println ( getPairs ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( k == 0 ) { System . out . println ( s ) ; return ; } int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) { cnt ++ ; } else { if ( cnt == k ) { System . out . println ( s . charAt ( i ) ) ; return ; } cnt = - 1 ; } } System . out . println ( s . charAt ( s . length ( ) - 1 ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class codeforces { static int [ ] arr = new int [ 4 ] ; public static void main ( String [ ] args ) throws Exception { Scanner sc = new Scanner ( System . in ) ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = true ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( arr [ i ] % 2 == 1 ) { flag = false ; } } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int N = 10000 ; static int MOD = 1000000007 ; static int F [ ] = new int [ N ] ; static void precompute ( ) { F [ 1 ] = 2 ; F [ 2 ] = 3 ; F [ 3 ] = 4 ; for ( int i = 4 ; i < N ; i ++ ) F [ i ] = ( F [ i - 1 ] + F [ i - 2 ] ) % MOD ; } public static void main ( String [ ] args ) { int n = 8 ; precompute ( ) ; System . out . println ( F [ n ] ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int cnt = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i * ( i + 1 ) / 2 >= n ) { break ; } cnt ++ ; } println ( cnt ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static int CeilIndex ( int A [ ] , int l , int r , int key ) { while ( r - l > 1 ) { int m = l + ( r - l ) / 2 ; if ( A [ m ] >= key ) r = m ; else l = m ; } return r ; } static int LongestIncreasingSubsequenceLength ( int A [ ] , int size ) { int tailTable [ ] = new int [ size + 1 ] ; int len = 0 ; tailTable [ 0 ] = A [ 0 ] ; len = 1 ; for ( int i = 1 ; i < size ; i ++ ) { if ( A [ i ] < tailTable [ 0 ] ) tailTable [ 0 ] = A [ i ] ; else if ( A [ i ] > tailTable [ len - 1 ] ) tailTable [ len ++ ] = A [ i ] ; else tailTable [ tailTable [ CeilIndex ( tailTable , - 1 , len - 1 , A [ i ] ) ] = A [ i ] ; } return len ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 5 , 3 , 7 , 11 , 8 , 10 , 13 , 6 } ; int n = A . length ; System . out . println ( " Length of Longest Increasing Subsequence is " + LongestIncreasingSubsequenceLength ( A , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int min = Math . abs ( x [ 0 ] - x [ 0 ] ) ; int max = Math . abs ( x [ 0 ] - x [ 1 ] ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( Math . abs ( x [ i ] - x [ j ] ) < min ) { min = Math . abs ( x [ i ] - x [ j ] ) ; } } } System . out . println ( min ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = Library . pow ( 10 , 6 ) ; int sum = 0 ; for ( int i = 0 ; i < LIMIT ; i ++ ) { if ( getChainLength ( i ) == 60 ) sum ++ ; } return Integer . toString ( sum ) ; } private static int getChainLength ( int n ) { HashSet < Integer > seen = new HashSet < Integer > ( ) ; while ( true ) { seen . add ( n ) ; n = factorialize ( n ) ; if ( seen . contains ( n ) ) return seen . size ( ) ; } } private static int factorialize ( int n ) { int result = 0 ; while ( n != 0 ) { result += FACTORIAL [ n % 10 ] ; n /= 10 ; } return result ; } }
import java . util . * ; public class GFG { static int colourVisible ( int height [ ] , int colour [ ] , int K ) { int arr [ ] = new int [ K + 1 ] ; int visible = 0 ; int max = height [ K - 1 ] ; arr [ colour [ K - 1 ] ] = 1 ; for ( int i = K - 2 ; i >= 0 ; i -- ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ colour [ i ] ] = 1 ; } } for ( int i = 1 ; i <= K ; i ++ ) { if ( arr [ i ] == 1 ) { visible ++ ; } } return visible ; } public static void main ( String [ ] args ) { int height [ ] = { 3 , 5 , 1 , 2 , 3 } ; int colour [ ] = { 1 , 2 , 3 , 4 , 3 } ; int K = colour . length ; System . out . println ( colourVisible ( height , colour , K ) ) ; } }
import java . io . * ; public class GFG { static boolean checkPowerof8 ( int n ) { double i = Math . log ( n ) ; return ( i - trunc ( i ) < 0.000001 ) ; } public static void main ( String [ ] args ) { int n = 65 ; if ( checkPowerof8 ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = Math . min ( a , b ) ; if ( a == b ) { ans = ( a + b ) / 4 ; } else { ans = Math . min ( a , b ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] [ ] students = new int [ n ] [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) students [ i ] [ j ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( students [ i ] [ j ] > max ) { max = students [ i ] [ j ] ; } } } System . out . println ( max ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } int ans = arr [ 0 ] [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] [ 0 ] <= ans ) { System . out . print ( ans ) ; ans = arr [ i ] [ 0 ] ; } else if ( ans == arr [ i ] [ 1 ] ) { System . out . print ( 0 ) ; ans = arr [ i ] [ 1 ] ; } else { System . out . print ( ans ) ; ans = arr [ i ] [ 0 ] ; } } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static int countWays ( int n , int m ) { int count [ ] = new int [ n + 2 ] ; for ( int i = 0 ; i <= n + 2 ; i ++ ) count [ i ] = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ; else if ( i < m ) count [ i ] = 1 ; else count [ i ] = 2 ; } return count [ n ] ; } public static void main ( String [ ] args ) { int n = 7 , m = 4 ; System . out . println ( " Number of ways = " + countWays ( n , m ) ) ; } }
import java . util . * ; public class GFG { static void bomb_required ( int n ) { System . out . println ( n + n / 2 ) ; for ( int i = 2 ; i <= n ; i += 2 ) System . out . print ( i + " " ) ; for ( int i = 1 ; i <= n ; i += 2 ) System . out . print ( i + " " ) ; for ( int i = 2 ; i <= n ; i += 2 ) System . out . print ( i + " " ) ; } public static void main ( String [ ] args ) { bomb_required ( 3 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; if ( n % 2 == 0 ) { ans = ( n / 2 ) + 1 ; } else { ans = ( n / 2 ) + 1 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String ans = " " ; int len = s . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( s . charAt ( i ) == '1' || s . charAt ( i ) == '0' ) { ans += s . charAt ( i ) ; } else if ( s . charAt ( i ) == ' B ' && len > 0 ) { ans += s . charAt ( i ) ; } else { ans += s . charAt ( i ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( ( n | x ) == 0 ) break ; int cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { if ( i == j && j == i && i == n ) { cnt ++ ; } } } System . out . println ( cnt ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 100 ; static int recur ( int ind , int cnt , int last , int a [ ] , int n , int k , int dp [ ] [ ] ) { if ( cnt == k ) return 0 ; if ( ind == n ) return Integer . MIN_VALUE ; if ( dp [ ind ] [ cnt ] != - 1 ) return dp [ ind ] [ cnt ] ; int ans = 0 ; for ( int i = ind ; i < n ; i ++ ) { if ( cnt % 2 == 0 ) ans = Math . max ( ans , recur ( i + 1 , cnt + 1 , i , a , n , k , dp ) ) ; else ans = Math . max ( ans , __gcd ( a [ last ] , a [ i ] ) + recur ( i + 1 , cnt + 1 , 0 , a , n , k , dp ) ) ; } dp [ ind ] [ cnt ] = ans ; return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 4 , 5 , 3 , 7 , 8 , 10 , 9 , 8 } ; int n = a . length ; int k = 4 ; int dp [ ] [ ] = new int [ MAX ] [ MAX ] ; System . out . println ( recur ( 0 , 0 , 0 , a , n , k , dp ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double [ ] arr = new double [ n ] ; double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextDouble ( ) ; sum += arr [ i ] ; } Arrays . sort ( arr ) ; double min = Math . abs ( n - arr [ 0 ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i + 1 ] > min ) { min = arr [ i ] - arr [ i + 1 ] ; } } System . out . println ( min ) ; } }
public class GFG { static int equivalentBase4 ( String bin ) { if ( bin . equals ( "00" ) ) return 0 ; if ( bin . equals ( "01" ) ) return 1 ; if ( bin . equals ( "10" ) ) return 2 ; if ( bin . equals ( "11" ) ) return 3 ; return 0 ; } static String isDivisibleBy5 ( String bin ) { int l = bin . length ( ) ; if ( ( l % 2 ) == 1 ) bin = '0' + bin ; int odd_sum = 0 , even_sum = 0 , isOddDigit = 1 ; for ( int i = 0 ; i < bin . length ( ) ; i += 2 ) { if ( isOddDigit == 0 ) odd_sum += equivalentBase4 ( bin . substring ( i , i + 2 ) ) ; else even_sum += equivalentBase4 ( bin . substring ( i , i + 2 ) ) ; isOddDigit = isOddDigit ^ 1 ; } if ( Math . abs ( odd_sum - even_sum ) % 5 == 0 ) return " Yes " ; else return " No " ; } public static void main ( String [ ] args ) { String bin = "10000101001" ; System . out . println ( isDivisibleBy5 ( bin ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; sc . hasNext ( ) ; ) { int [ ] p = new int [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) p [ i ] = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ 8 ] [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { if ( j == i ) continue ; int [ ] a = new int [ 8 ] ; for ( int k = 0 ; k < 8 ; k ++ ) a [ k ] = p [ k ] ; dp [ a [ 0 ] ] [ i ] = 1 ; } } int [ ] ans = new int [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) ans [ i ] = dp [ i ] [ 0 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { for ( int j = 0 ; j < 8 ; j ++ ) { if ( j == i ) continue ; int a = p [ i ] , b = p [ j ] ; if ( a != b ) dp [ i ] [ b ] = ans [ i ] + 1 ; } } System . out . println ( ans [ 8 - 1 ] ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] b = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) b [ i ] = sc . nextInt ( ) ; int [ ] c = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) c [ i ] = sc . nextInt ( ) ; int [ ] d = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) d [ i ] = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a [ i ] < b [ i ] ) min = Math . min ( min , a [ i ] ) ; } for ( int i = 0 ; i < 4 ; i ++ ) { if ( a [ i ] < c [ i ] ) min = Math . min ( min , a [ i ] ) ; } System . out . println ( min ) ; } }
import java . util . * ; public class GFG { static int MAX = 1005 ; static Vector < Boolean > SieveOfEratosthenes ( boolean [ ] primes ) { boolean [ ] prime = new boolean [ MAX ] ; for ( int i = 0 ; i < primes . length ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p <= primes [ 0 ] ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < primes . length ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < primes . length ; p ++ ) { if ( prime [ p ] ) primes [ p ] = false ; } return primes ; } static int minimumSquareFreeDivisors ( int N ) { Vector < Boolean > prime = new Vector < Boolean > ( ) ; for ( int i = 0 ; i < prime . size ( ) ; i ++ ) prime . add ( prime . get ( i ) ) ; int max_count = 0 ; for ( int i = 0 ; i < prime . size ( ) && primes [ i ] * primes [ i ] <= N ; i ++ ) { if ( N % primes [ i ] == 0 ) { int tmp = 0 ; while ( N % primes [ i ] == 0 ) { tmp ++ ; N /= primes [ i ] ; } max_count = Math . max ( max_count , tmp ) ; } } if ( max_count == 0 ) max_count = 1 ; return max_count ; } public static void main ( String [ ] args ) { int N = 24 ; System . out . println ( " Minimum Number of Square Free Divisors is " + minimumSquareFreeDivisors ( N ) ) ; N = 6 ; System . out . println ( " Minimum Number of SquareFree Divisors is " + minimumSquareFreeDivisors ( N ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int x = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = ( x - a ) % b ; out . println ( ans ) ; out . flush ( ) ; out . close ( ) ; } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public Scanner ( String file ) throws FileNotFoundException { br = new BufferedReader ( new FileReader ( file ) ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } public boolean ready ( ) throws IOException { return br . ready ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } if ( k == 1 ) { if ( arr [ 0 ] == arr [ n - 1 ] ) { System . out . println ( 0 ) ; return ; } else { System . out . println ( - 1 ) ; return ; } } int cnt = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { if ( arr [ i ] == arr [ i + k ] ) { cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class GFG { static int fun ( int n ) { return n & ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( " The number after unsetting the rightmost set bit " + fun ( n ) ) ; } }
import java . util . * ; public class GFG { static int LongestFibSubseq ( int A [ ] , int n ) { HashSet < Integer > S = new HashSet < Integer > ( A ) ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = A [ j ] ; int y = A [ i ] + A [ j ] ; int length = 2 ; while ( S . contains ( y ) ) { int z = x + y ; x = y ; y = z ; length ++ ; maxLen = Math . max ( maxLen , length ) ; } } } return maxLen >= 3 ? maxLen : 0 ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = A . length ; System . out . println ( LongestFibSubseq ( A , n ) ) ; } }
import java . util . * ; public class GFG { static int countPairs ( int a [ ] , int b [ ] , int n , int m ) { int cnt = 0 ; HashMap < Integer , Integer > s = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { int sum = a [ i ] + b [ j ] ; if ( ! s . containsKey ( sum ) ) { cnt ++ ; s . put ( sum , 1 ) ; } } } return cnt ; } public static void main ( String [ ] args ) { int a [ ] = { 12 , 2 , 7 } ; int b [ ] = { 4 , 3 , 8 } ; int m = b . length ; System . out . println ( countPairs ( a , b , n , m ) ) ; } }
import java . util . * ; public class GFG { static boolean check ( int a [ ] , int y ) { int sum = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { int x = ( int ) Math . sqrt ( a [ i ] ) ; if ( x == ( int ) Math . floor ( x ) ) sum += a [ i ] ; } if ( sum % y == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 4 , 9 , 10 } ; int x = 13 ; if ( check ( a , x ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int query = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; switch ( query ) { case 0 : pq . add ( sc . nextInt ( ) ) ; break ; case 1 : int y = sc . nextInt ( ) ; if ( pq . isEmpty ( ) ) { System . out . println ( - x ) ; } else if ( x == y ) { pq . remove ( ) ; } break ; case 2 : pq . add ( sc . nextInt ( ) ) ; break ; } } } }
import java . util . Arrays ; public class GFG { static int calculate_min_sum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int min_sum = 0 ; for ( int i = 1 ; i < n ; i += 2 ) min_sum += Math . abs ( a [ i ] - a [ i - 1 ] ) ; return min_sum ; } static int calculate_max_sum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int max_sum = 0 ; for ( int i = 0 ; i < n / 2 ; i += 2 ) max_sum += Math . abs ( a [ n - 1 - i ] - a [ i ] ) ; return max_sum ; } public static void main ( String [ ] args ) { int a [ ] = { 10 , - 10 , 20 , - 40 } ; int n = a . length ; System . out . println ( " The minimum sum of pairs is " + calculate_min_sum ( a , n ) ) ; System . out . println ( " The maximum sum of pairs is " + calculate_max_sum ( a , n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { cnt ++ ; } } if ( cnt == n ) { System . out . println ( 1 ) ; } else if ( cnt == n ) { System . out . println ( 0 ) ; } else { System . out . println ( n - cnt ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int oddCount = 0 ; int evenCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) evenCount ++ ; else oddCount ++ ; } if ( oddCount > evenCount ) System . out . println ( " No " ) ; else if ( evenCount > oddCount ) System . out . println ( " No " ) ; else if ( oddCount > oddCount - 1 ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } }
import java . util . * ; public class GFG { static boolean isPalindrome ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) return false ; } return true ; } static boolean ans ( String s ) { String s2 = s ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 = s2 . substring ( s2 . length ( ) - 1 ) + s2 ; s2 = s2 . substring ( 0 , s2 . length ( ) - 1 ) ; if ( s != s2 && isPalindrome ( s2 ) ) return true ; } return false ; } static int solve ( String s ) { if ( s . length ( ) <= 3 ) return - 1 ; int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ s . charAt ( i ) - ' a ' ] ++ ; } int max = cnt [ 0 ] ; for ( int i = 0 ; i < cnt . length ; i ++ ) { if ( cnt [ i ] > max ) max = cnt [ i ] ; } if ( max >= s . length ( ) - 1 ) return - 1 ; else { if ( ans ( s ) == true ) return 1 ; else return 2 ; } } public static void main ( String [ ] args ) { String s = " nolon " ; System . out . println ( solve ( s ) ) ; } }
import java . util . * ; public class GFG { static int count_numbers ( int k , int n ) { int dp [ ] [ ] = new int [ n + 1 ] [ 2 ] ; dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = k - 1 ; for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] ) * ( k - 1 ) ; } return dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ; } public static void main ( String [ ] args ) { int k = 10 , n = 3 ; System . out . println ( count_numbers ( k , n ) ) ; } }
public class GFG { static int minCost ( int n , int arr [ ] , int cost ) { int sum = 0 , totalCost = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } totalCost += cost * sum ; arr [ n - 1 ] += sum ; totalCost += ( 2 * cost * arr [ n - 1 ] ) ; return totalCost ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 } ; int n = arr . length ; int cost = 1 ; System . out . println ( minCost ( n , arr , cost ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int q = sc . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int c = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int min = Math . min ( c , a ) ; int max = Math . max ( a , n ) ; c -= min ; a -= min ; max -= max ; if ( c > 0 ) { c -= ( c / 2 ) ; a -= min ; max -= max ; } c -= min ; if ( c > 0 ) { c += ( c / 3 ) ; a -= min ; max -= max ; } System . out . println ( c + a + max ) ; } } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] dp = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { if ( s . charAt ( i ) == ' IO ' ) dp [ i ] = 0 ; else if ( s . charAt ( i ) == ' I ' ) dp [ i ] = dp [ i - 1 ] + 1 ; else dp [ i ] = dp [ i - 1 ] + 1 ; } int ans = 0 ; if ( m >= 3 ) { for ( int i = 0 ; i < m ; i ++ ) { if ( s . charAt ( i ) == ' IO ' ) { if ( dp [ i ] >= n ) ans ++ ; } } } System . out . println ( ans ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { for ( int j = i + 1 ; j < s . length ( ) ; j ++ ) { int val = s . charAt ( j ) - '0' ; if ( val % 25 == 0 ) { min = Math . min ( min , val ) ; } } } System . out . println ( min ) ; } } }
public class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; temp . left = null ; temp . right = null ; return temp ; } static void insert ( Node root , int data ) { if ( root == null ) { return ; } else { if ( data < root . data ) { root . left = insert ( root . left , data ) ; } if ( data > root . data ) { root . right = insert ( root . right , data ) ; } } } static void inOrder ( Node root ) { if ( root == null ) { return ; } else { inOrder ( root . left ) ; System . out . print ( root . data + " " ) ; inOrder ( root . right ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 2 , 5 , 4 , 4 } ; int n = arr . length ; Node root = null ; for ( int i = 0 ; i < n ; i ++ ) { root = insert ( root , arr [ i ] ) ; } inOrder ( root ) ; } }
import java . util . * ; public class GFG { static final int MAX_CHAR = 26 ; static String removeChars ( String str , int k ) { int hash [ ] = new int [ MAX_CHAR ] ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } String res = " " ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] >= k ) { res += str . charAt ( i ) ; } } return res ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int k = 2 ; System . out . println ( removeChars ( str , k ) ) ; } }
import java . util . * ; public class GFG { static int LCSubStr ( String X , String Y , int m , int n ) { int LCSuff [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LCSuff [ i ] [ j ] = 0 ; else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) { LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ; result = Math . max ( result , LCSuff [ i ] [ j ] ) ; } else LCSuff [ i ] [ j ] = 0 ; } } return result ; } public static void main ( String [ ] args ) { String X = " OldSite : GeeksforGeeks . org " ; String Y = " NewSite : GeeksQuiz . com " ; int m = X . length ( ) ; int n = Y . length ( ) ; System . out . println ( " Length of Longest Common Substring is " + LCSubStr ( X , Y , m , n ) ) ; } }
public class GFG { static int countOccurrences ( int x , int d ) { int count = 0 ; while ( x > 0 ) { if ( x % 10 == d ) count ++ ; x /= 10 ; } return count ; } static int maxOccurring ( int x ) { if ( x < 0 ) x = - x ; int result = 0 ; int max_count = 1 ; for ( int d = 0 ; d < 10 ; d ++ ) { int count = countOccurrences ( x , d ) ; if ( count >= max_count ) { max_count = count ; result = d ; } } return result ; } public static void main ( String [ ] args ) { int x = 1223355 ; System . out . println ( " Max occurring digit is " + maxOccurring ( x ) ) ; } }
import java . util . * ; public class GFG { static void printLogestIncSubArr ( int arr [ ] , int n ) { int m = 1 , l = 1 , maxIndex = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) l ++ ; else { if ( m < l ) { m = l ; maxIndex = i - m ; } l = 1 ; } } if ( m < l ) { m = l ; maxIndex = n - m ; } for ( int i = maxIndex ; i < ( m + maxIndex ) ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 3 , 5 , 7 , 8 , 9 , 1 , 2 } ; int n = arr . length ; printLogestIncSubArr ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = n ; i >= 1 ; i -- ) { if ( n % i == 0 ) { System . out . print ( i + " " ) ; n = i ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int count = 0 ; for ( int j = l ; j < r ; j ++ ) { if ( arr [ j ] > arr [ x ] ) { count ++ ; } } if ( count == x - l ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
import java . util . * ; public class GFG { static int Max_Sum ( int a [ ] , int n ) { int b [ ] = new int [ n ] ; int S = 0 , res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = res ; res += a [ i ] ; S += a [ i ] ; res = Math . max ( res , - S ) ; } int ans = S ; ans = Math . max ( ans , res ) ; int g = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { g -= a [ i ] ; ans = Math . max ( ans , g + b [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { - 6 , 10 , - 3 , 10 , - 2 } ; int n = a . length ; System . out . println ( " Maximum sum is : " + Max_Sum ( a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int [ ] arr = new int [ x ] ; for ( int i = 0 ; i < x ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; int i = 0 , j = 0 ; while ( i < x && j < y ) { if ( arr [ i ] == arr [ j ] ) { i ++ ; j ++ ; } else { if ( arr [ i ] == arr [ j ] ) { count ++ ; i ++ ; j ++ ; } else { i -- ; j ++ ; } } } if ( x == y ) { System . out . println ( count ) ; } else { System . out . println ( count - 1 ) ; } } } }
public class GFG { static void reverse ( String str , int x ) { int n = ( str . length ( ) - x ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( str . charAt ( i ) ) ; for ( int i = n + x - 1 ; i < n - 1 ; i ++ ) System . out . print ( str . charAt ( i ) ) ; for ( int i = n + x ; i < str . length ( ) ; i ++ ) System . out . print ( str . charAt ( i ) ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int x = 3 ; reverse ( str , x ) ; } }
public class GFG { static int lps ( String str ) { int n = str . length ( ) ; int L [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] [ i ] = 1 ; for ( int cl = 2 ; cl <= n ; cl ++ ) { for ( int i = 0 ; i < n - cl + 1 ; i ++ ) { int j = i + cl - 1 ; if ( str . charAt ( i ) == str . charAt ( j ) && cl == 2 ) L [ i ] [ j ] = 2 ; else if ( str . charAt ( i ) == str . charAt ( j ) ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ; else L [ i ] [ j ] = Math . max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ; } } return L [ 0 ] [ n - 1 ] ; } static int minimumNumberOfDeletions ( String str ) { int n = str . length ( ) ; int l = lps ( str ) ; return ( n - l ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; System . out . println ( " Minimum number of deletions = " + minimumNumberOfDeletions ( str ) ) ; } }
public class GFG { static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 14 ; if ( bit_check ( n ) ) System . out . println ( "1" ) ; else System . out . println ( "0" ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } int sum = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > min ) { sum += arr [ i ] ; } } System . out . println ( sum ) ; } } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = Library . pow ( 10 , 8 - 1 ) ; int ans = 0 ; int [ ] primes = Library . listPrimes ( LIMIT / 2 ) ; int sqrt = Library . sqrt ( LIMIT ) ; for ( int i = 0 ; i < primes . length ; i ++ ) { if ( primes [ i ] > sqrt ) break ; int end = binarySearch ( primes , LIMIT / p ) ; ans += ( end >= 0 ? end : - end - 1 ) - i ; } return Integer . toString ( ans ) ; } private static int binarySearch ( int [ ] lst , int x ) { int start = 0 , end = lst . length ; while ( start < end ) { int mid = ( start + end ) / 2 ; if ( x < lst [ mid ] ) end = mid ; else if ( x > lst [ mid ] ) start = mid + 1 ; else if ( x == lst [ mid ] ) return mid ; else throw new AssertionError ( ) ; } return - start - 1 ; } }
import java . util . * ; public class GFG { static int M = 20 ; static int dp [ ] [ ] [ ] = new int [ M ] [ 20 ] [ 20 ] ; static int count ( int pos , int cnt , int tight , int nonz , int num [ ] ) { if ( pos == num . length ) { if ( cnt == K ) { return 1 ; } return 0 ; } if ( dp [ pos ] [ cnt ] [ tight ] [ nonz ] != - 1 ) { return dp [ pos ] [ cnt ] [ tight ] [ nonz ] ; } int ans = 0 ; int limit = tight > 0 ? tight : num [ pos ] ; for ( int dig = 0 ; dig <= limit ; dig ++ ) { int currCnt = cnt ; if ( dig == d ) { if ( d != 0 || ! d && nonz > 0 ) { currCnt ++ ; } } int currTight = tight ; if ( dig < num [ pos ] ) { currTight = 1 ; } ans += count ( pos + 1 , currCnt , currTight , ( nonz != 0 || dig != 0 ) , num ) ; } return dp [ pos ] [ cnt ] [ tight ] [ nonz ] = ans ; } static int solve ( int x ) { int [ ] num = new int [ M ] ; while ( x > 0 ) { num [ x % 10 ] ++ ; x /= 10 ; } int res = 0 ; for ( int i = 0 ; i < M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( num [ i ] == 0 ) { num [ i ] = 0 ; } else { num [ i ] = num [ i ] + 1 ; } } res += count ( i + 1 , 0 , 0 , 0 , num ) ; } return res ; } public static void main ( String [ ] args ) { int L = 11 , R = 100 , d = 2 , K = 1 ; System . out . println ( solve ( R ) - solve ( L - 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; if ( s . length ( ) == 1 ) { System . out . println ( s ) ; return ; } s = s . substring ( 0 , 1 ) ; s = s . substring ( 1 ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { s = s . substring ( i , i + 1 ) ; } else if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { s = s . substring ( i , i + 1 ) ; } else if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { s = s . substring ( i , i + 1 ) ; } else if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { s = s . substring ( i , i + 1 ) ; } } System . out . println ( s ) ; } }
public class GFG { static boolean isPeak ( int arr [ ] , int n , int num , int i , int j ) { if ( i >= 0 && arr [ i ] > num ) return false ; if ( j < n && arr [ j ] > num ) return false ; return true ; } static boolean isTrough ( int arr [ ] , int n , int num , int i , int j ) { if ( i >= 0 && arr [ i ] < num ) return false ; if ( j < n && arr [ j ] < num ) return false ; return true ; } static void printPeaksTroughs ( int arr [ ] , int n ) { System . out . print ( " Peaks : " ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( isPeak ( arr , n , arr [ i ] , i - 1 , i + 1 ) ) System . out . print ( arr [ i ] ) ; } System . out . println ( ) ; System . out . print ( " Troughs : " ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( isTrough ( arr , n , arr [ i ] , i - 1 , i + 1 ) ) System . out . print ( arr [ i ] ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 10 , 5 , 7 , 4 , 3 , 5 } ; int n = arr . length ; printPeaksTroughs ( arr , n ) ; } }
import java . util . * ; public class GFG { static int index ( int i ) { return 1 + ( i >> 31 ) - ( - i >> 31 ) ; } static void check ( int n ) { String s = " negative " ; String zero = " zero " ; int val = index ( n ) ; System . out . println ( n + " is " + s . charAt ( val ) ) ; } public static void main ( String [ ] args ) { check ( 30 ) ; check ( - 20 ) ; check ( 0 ) ; } }
import java . util . * ; public class GFG { static int frequency ( int a [ ] , int x ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == x ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 5 , 5 , 5 , 4 } ; int x = 5 ; System . out . println ( frequency ( a , x ) ) ; } }
import java . util . * ; public class GFG { static boolean isNumBalanced ( int N ) { String str = Integer . toString ( N ) ; boolean isBalanced = true ; int freq [ ] = new int [ 10 ] ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) - '0' ] ++ ; } for ( int i = 0 ; i < 9 ; i ++ ) { if ( freq [ i ] != freq [ i + 1 ] ) { isBalanced = false ; } } if ( isBalanced ) return true ; else return false ; } public static void main ( String [ ] args ) { int N = 1234567890 ; boolean flag = isNumBalanced ( N ) ; if ( flag ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; int k = ( int ) Math . sqrt ( n ) + 1 ; for ( int i = 5 ; i <= k ; i += 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; } return true ; } static boolean isThreeDisctFactors ( int n ) { int sq = ( int ) Math . sqrt ( n ) ; if ( 1 * sq * sq != n ) return false ; if ( isPrime ( sq ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int num = 9 ; if ( isThreeDisctFactors ( num ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; num = 15 ; if ( isThreeDisctFactors ( num ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; num = 12397923568441 ; if ( isThreeDisctFactors ( num ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public final class p035 { public static void main ( String [ ] args ) { System . out . println ( new p035 ( ) . run ( ) ) ; } public String run ( ) { int numer = 1 , denom = 0 ; for ( int i = 100 ; i >= 0 ; i -- ) { numer = econtfracTerm ( i ) * numer + denom ; denom = econtfracTerm ( i ) ; } return Integer . toString ( numer ) ; } private static int econtfracTerm ( int i ) { if ( i == 0 ) return 2 ; else if ( i % 3 == 2 ) return i / 3 * 2 + 2 ; else return 1 ; } }
import java . util . * ; public class GFG { static int LCM ( int x , int y , int z ) { int ans = ( x * y ) / ( gcd ( x , y ) ) ; return ( z * ans ) / ( gcd ( ans , z ) ) ; } static int findDivisible ( int n , int x , int y , int z ) { int lcm = LCM ( x , y , z ) ; int ndigitnumber = ( int ) Math . pow ( 10 , n - 1 ) ; int reminder = ndigitnumber % lcm ; if ( reminder == 0 ) return ndigitnumber ; ndigitnumber += lcm - reminder ; if ( ndigitnumber < ( int ) Math . pow ( 10 , n ) ) return ndigitnumber ; else return 0 ; } public static void main ( String [ ] args ) { int n = 4 , x = 2 , y = 3 , z = 5 ; int res = findDivisible ( n , x , y , z ) ; if ( res != 0 ) System . out . println ( res ) ; else System . out . println ( " Not possible " ) ; } }
import java . util . * ; public class GFG { static int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ 100001 ] ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= 100001 ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= 100001 ; i += p ) prime [ i ] = false ; } } } static void common_prime ( int a , int b ) { int gcd = gcd ( a , b ) ; for ( int i = 2 ; i <= gcd ; i ++ ) { if ( prime [ i ] && gcd % i == 0 ) System . out . print ( i + " " ) ; } } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int a = 6 , b = 12 ; common_prime ( a , b ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; int [ ] s = new int [ n ] ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = in . nextInt ( ) ; p [ i ] = in . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ 394 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = s [ i ] ; j <= s [ i ] + p [ j ] ; j ++ ) { dp [ j ] [ i ] = Math . min ( dp [ j ] [ i ] , dp [ j ] [ i + 1 ] ) ; } } int [ ] ans = new int [ n + 1 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { ans [ i ] = dp [ n ] [ i ] ; } for ( int i = 0 ; i < dp . length ; i ++ ) { out . println ( ans [ i ] ) ; } return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } boolean [ ] vis = new boolean [ n ] ; boolean [ ] vis2 = new boolean [ n ] ; boolean f = true ; for ( int i = 0 ; i < n ; i ++ ) { vis2 [ a [ i ] ] = vis2 [ b [ i ] ] == false ; vis2 [ b [ i ] ] = vis2 [ a [ i ] ] == false ; f = false ; } int [ ] cnt = new int [ n ] ; Arrays . fill ( cnt , 0 ) ; cnt [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] == false ) { out . println ( " First " ) ; return ; } cnt [ i ] = 0 ; vis2 [ b [ i ] ] = true ; cnt [ b [ i ] ] ++ ; f = true ; } int [ ] cnt2 = new int [ n ] ; Arrays . fill ( cnt2 , 0 ) ; cnt2 [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis2 [ i ] == false ) { out . println ( " Second " ) ; return ; } cnt2 [ i ] = cnt2 [ i ] + 1 ; } out . println ( cnt2 [ 0 ] == 0 ? " Second " : cnt2 [ 0 ] ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; arr [ i ] [ 2 ] = sc . nextInt ( ) ; } boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == arr [ i + 1 ] [ j ] + arr [ i ] [ j + 1 ] + arr [ i + 1 ] [ j + 1 ] + arr [ i ] [ j ] ) { flag = false ; break ; } } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - ' a ' ; } Arrays . sort ( arr ) ; int i = n - 1 ; int j = 0 ; while ( i >= 0 && arr [ i ] != arr [ j ] ) { i -- ; j ++ ; } i -- ; int sum = 0 ; if ( i == 0 ) { sum = arr [ 0 ] ; } else { sum = arr [ 0 ] + arr [ i ] ; } System . out . println ( sum + " " + sum ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ 3 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { Arrays . fill ( dp [ i ] , INF ) ; dp [ i ] [ 0 ] = dp [ i ] [ 0 ] + dp [ i ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i ] [ 1 ] + dp [ i ] [ 2 ] ; } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { String s = sc . next ( ) ; String t = sc . next ( ) ; String c = sc . next ( ) ; dp [ i ] [ 0 ] = dp [ i ] [ 0 ] + dp [ i ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i ] [ 1 ] + dp [ i ] [ 2 ] ; dp [ i ] [ 2 ] = c + dp [ i ] [ 2 ] ; } for ( int j = 0 ; j < dp . length ; j ++ ) { if ( dp [ j ] [ 0 ] == INF && dp [ j ] [ 1 ] == INF && dp [ j ] [ 2 ] == INF ) { System . out . println ( " ACC " ) ; return ; } } System . out . println ( " WA " ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class A { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean solve ( ) { int n = in . nextInt ( ) ; int l = in . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] ^ b [ j ] == 0 ) { count ++ ; } } if ( count == l ) { min = Math . min ( min , l ) ; } else { min = Math . min ( min , count ) ; } } out . println ( " Case # " + ( i + 1 ) + " : " + min ) ; return true ; } public static void main ( String [ ] args ) { int T = in . nextInt ( ) ; for ( int t = 1 ; t <= T ; t ++ ) { out . println ( " Case # " + t + " : " + solve ( ) ) ; } out . close ( ) ; } }
import java . util . * ; public class Solution { public int maxAreaOfIsland ( int [ ] [ ] grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . length ; i ++ ) { for ( int j = 0 ; j < grid [ i ] . length ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { grid [ i ] [ j ] = 0 ; ans = Math . max ( dfs ( grid , i , j ) , ans ) ; } } } return ans ; } public int dfs ( int [ ] [ ] grid , int i , int j ) { Stack < Integer > stack = new Stack < > ( ) ; int area = 0 ; while ( ! stack . isEmpty ( ) ) { int r = stack . peek ( ) ; int c = stack . peek ( ) ; area ++ ; for ( int nr = r - 1 ; nr < c ; nr ++ ) { for ( int nc = r + 1 ; nc < c ; nc ++ ) { if ( grid [ nr ] [ nc ] == 1 ) { grid [ nr ] [ nc ] = 0 ; ans = Math . max ( dfs ( grid , nr , nc ) , ans ) ; grid [ nr ] [ nc ] = 0 ; } } } } return area ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] [ ] grid = { { 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 } , { 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 } , { 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } , { 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 } , { 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } , } ; System . out . println ( sObj . maxAreaOfIsland ( grid ) ) ; } }
public class GFG { static int sum ( int x , int y , int n ) { int sum1 = ( int ) Math . pow ( x , 2 ) * ( int ) Math . pow ( x , ( 2 * n ) - 1 ) ; int sum2 = ( int ) Math . pow ( x , ( int ) Math . pow ( y , ( int ) Math . pow ( x , ( int ) n ) - 1 ) ) ; return ( sum1 + sum2 ) ; } public static void main ( String [ ] args ) { int x = 2 , y = 2 , n = 2 ; System . out . println ( sum ( x , y , n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { n -- ; int sum = 0 ; sum += ( n * ( n + 1 ) ) / 2 ; sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n /= 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n /= 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node next ; } static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i <= n ; i += 6 ) { if ( i * i < n + 2 && ( n % i == 0 || n % ( i + 2 ) == 0 ) ) return false ; } return true ; } static boolean deleteNonPrimeNodes ( Node head ) { Node ptr = head ; while ( ptr != null && isPrime ( ptr . data ) != true ) { Node temp = ptr ; ptr = ptr . next ; ptr = ptr . next ; if ( ptr == null ) return false ; } Node curr = ptr ; while ( curr != null ) { if ( isPrime ( curr . data ) != true ) { ptr . next = curr . next ; curr = ptr . next ; } else { ptr = curr ; curr = curr . next ; } } return true ; } static void printList ( Node head ) { while ( head != null ) { System . out . print ( head . data + " " ) ; head = head . next ; } } public static void main ( String [ ] args ) { printList ( head ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) , m = in . nextInt ( ) , l = in . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { int d = in . nextInt ( ) , a = in . nextInt ( ) , k = in . nextInt ( ) , t = in . nextInt ( ) ; dp [ d ] [ a ] = Math . max ( dp [ d ] [ a ] , t ) ; } int ans = 0 ; for ( int i = 0 ; i < dp [ 0 ] . length ; i ++ ) { ans = Math . max ( ans , dp [ i ] [ 0 ] ) ; } out . println ( ans ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] map = new int [ n ] [ 2 ] ; map [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; map [ x ] [ y ] = 1 ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map [ i ] [ 0 ] == 1 ) { map [ i ] [ 1 ] = 1 ; } else { map [ i ] [ 1 ] = 0 ; } } for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( map [ x ] [ y ] == 1 ) { map [ x ] [ y ] = 0 ; } else { map [ x ] [ y ] = 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( map [ i ] [ 0 ] == 1 ) { cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int H = sc . nextInt ( ) ; int W = sc . nextInt ( ) ; int [ ] [ ] map = new int [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < W ; j ++ ) { map [ i ] [ j ] = s . charAt ( j ) ; } } int max = 0 ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( map [ i ] [ j ] == ' B ' ) { int distance = Math . abs ( i - j ) + Math . abs ( j - i ) ; max = Math . max ( max , distance ) ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static void minReplacement ( String str ) { if ( str . length ( ) > 26 ) { System . out . println ( " IMPOSSIBLE " ) ; } else { int [ ] hash = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { hash [ str . charAt ( i ) - ' a ' ] ++ ; } int count = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( hash [ j ] == 0 ) { hash [ str . charAt ( i ) - ' a ' ] -- ; str . charAt ( i ) = ( char ) ( j + ' a ' ) ; hash [ j ] ++ ; break ; } } } } System . out . println ( String . valueOf ( str ) ) ; } } public static void main ( String [ ] args ) { String str = " xxxxyyyy " ; minReplacement ( str . toCharArray ( ) ) ; } }
import java . util . * ; public class GFG { static int longestSubseq ( String s ) { int n = s . length ( ) ; int pre_count_0 [ ] = new int [ n + 2 ] ; int pre_count_1 [ ] = new int [ n + 1 ] ; int post_count_0 [ ] = new int [ n + 2 ] ; pre_count_0 [ 0 ] = 0 ; post_count_0 [ n + 1 ] = 0 ; pre_count_1 [ 0 ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { pre_count_0 [ j ] = pre_count_0 [ j - 1 ] ; pre_count_1 [ j ] = pre_count_1 [ j - 1 ] ; post_count_0 [ n - j + 1 ] = post_count_0 [ n - j + 2 ] ; if ( s . charAt ( j - 1 ) == '0' ) pre_count_0 [ j ] ++ ; else pre_count_1 [ j ] ++ ; if ( s . charAt ( n - j ) == '0' ) post_count_0 [ n - j + 1 ] ++ ; } if ( pre_count_0 [ n ] == n || pre_count_0 [ n ] == 0 ) return n ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) ans = Math . max ( pre_count_0 [ i - 1 ] + pre_count_1 [ j ] - pre_count_1 [ i - 1 ] + post_count_0 [ j + 1 ] , ans ) ; } return ans ; } public static void main ( String [ ] args ) { String s = "000011100000" ; System . out . println ( longestSubseq ( s ) ) ; } }
import java . util . * ; public class GFG { static void sieveOfEratosthenes ( int N , int s [ ] ) { boolean prime [ ] = new boolean [ N + 1 ] ; for ( int i = 2 ; i <= N ; i += 2 ) s [ i ] = 2 ; for ( int i = 3 ; i <= N ; i += 2 ) { if ( prime [ i ] == false ) { s [ i ] = i ; for ( int j = i ; j <= N / i ; j += 2 ) { if ( prime [ i * j ] == false ) { prime [ i * j ] = true ; s [ i * j ] = i ; } } } } } static void generatePrimeFactors ( int N ) { int s [ ] = new int [ N + 1 ] ; sieveOfEratosthenes ( N , s ) ; System . out . println ( " Factor Power " ) ; int curr = s [ N ] ; int cnt = 1 ; while ( N > 1 ) { N /= s [ N ] ; if ( curr == s [ N ] ) { cnt ++ ; continue ; } System . out . println ( curr + " \ t " + cnt ) ; curr = s [ N ] ; cnt = 1 ; } } public static void main ( String [ ] args ) { int N = 360 ; generatePrimeFactors ( N ) ; } }
import java . util . * ; public class GFG { static int longestSubarray ( int a [ ] , int n ) { int hash [ ] [ ] = new int [ 10 ] [ 10 ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; while ( num > 0 ) { hash [ i ] [ num % 10 ] = 1 ; num /= 10 ; } } int longest = Integer . MIN_VALUE ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] == 0 && hash [ i + 1 ] [ j ] == 0 ) { count ++ ; break ; } } if ( j == 10 ) { longest = Math . max ( longest , count + 1 ) ; count = 0 ; } } longest = Math . max ( longest , count + 1 ) ; return longest ; } public static void main ( String [ ] args ) { int a [ ] = { 11 , 22 , 33 , 44 , 54 , 56 , 63 } ; int n = a . length ; System . out . println ( longestSubarray ( a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( ( a + b + c ) / 2 ) ; } } }
import java . util . * ; public class GFG { static Vector < Integer > Divisors ( int x ) { int c = 0 ; Vector < Integer > v = new Vector < Integer > ( ) ; while ( x % 2 == 0 ) { c ++ ; x /= 2 ; } v . add ( c ) ; c = 0 ; while ( x % 3 == 0 ) { c ++ ; x /= 3 ; } v . add ( c ) ; c = 0 ; while ( x % 7 == 0 ) { c ++ ; x /= 7 ; } v . add ( c ) ; v . add ( x ) ; return v ; } static int MinOperations ( int a , int b ) { Vector < Integer > va = Divisors ( a ) ; Vector < Integer > vb = Divisors ( b ) ; if ( va . get ( 3 ) != vb . get ( 3 ) ) return - 1 ; int minOperations = Math . abs ( va . get ( 0 ) - vb . get ( 0 ) ) + Math . abs ( va . get ( 1 ) - vb . get ( 1 ) ) + Math . abs ( va . get ( 2 ) - vb . get ( 2 ) ) ; return minOperations ; } public static void main ( String [ ] args ) { int a = 14 , b = 28 ; System . out . println ( MinOperations ( a , b ) ) ; } }
import java . util . * ; public class GFG { static int N = 1000001 ; static int c = 0 ; static int n = 0 ; static int m = 0 ; static void dfs ( int a , int b , int v [ ] , int vis [ ] ) { vis [ a ] = 1 ; c ++ ; for ( int i = 0 ; i < v [ a ] ; i ++ ) { if ( vis [ i ] == 0 && i != b ) { dfs ( i , b , v , vis ) ; } } } static void Calculate ( int v [ ] ) { int vis [ ] = new int [ n + 1 ] ; c = 0 ; dfs ( a , b , v , vis ) ; int ans1 = n - c - 1 ; vis = new int [ n + 1 ] ; c = 0 ; dfs ( b , a , v , vis ) ; int ans2 = n - c - 1 ; System . out . println ( ans1 * ans2 ) ; } public static void main ( String [ ] args ) { int n = 7 , m = 7 ; int a = 3 , b = 5 ; int v [ ] = { { 1 , 2 } , { 2 , 3 } , { 3 , 4 } , { 4 , 5 } , { 5 , 6 } , { 6 , 7 } , { 7 , 5 } } ; int v [ ] [ ] = new int [ m ] [ 2 ] ; for ( int i = 0 ; i < m ; i ++ ) { v [ v [ i ] [ 0 ] ] = v [ i ] [ 1 ] ; v [ v [ i ] [ 1 ] ] = v [ i ] [ 0 ] ; } Calculate ( v ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; long ans = 0 ; if ( n == 1 ) { ans = 1 ; } else if ( n == 2 ) { ans = 1 ; } else if ( n == 3 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 4 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 5 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 6 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 7 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 8 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 9 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 10 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 11 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 12 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 13 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 14 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 15 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 17 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 19 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 21 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 24 ) { ans = Math . max ( ans , 9 ) ; } else if ( n == 25 ) { ans = Math . max ( ans , 9 ) ; } else { ans = Math . max ( ans , 9 ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int count = 0 ; int x = a ; while ( x > 0 ) { x -- ; count ++ ; count ++ ; } while ( x > 0 ) { x -- ; count ++ ; count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum = sum + n % 10 ; n = n / 10 ; } return sum ; } static int largestDigitSumdivisior ( int n ) { int res = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { res = Math . max ( res , getSum ( i ) ) ; res = Math . max ( res , getSum ( n / i ) ) ; } } return res ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( largestDigitSumdivisior ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long l = sc . nextLong ( ) ; long r = sc . nextLong ( ) ; long ans = 0 ; while ( l > 0 ) { l /= 10 ; ans ++ ; } l /= 2 ; long temp = Math . pow ( 10 , ans ) ; if ( temp <= r ) { System . out . println ( - 1 ) ; return ; } long tmp = r ; long sum = 0 ; while ( temp > l ) { temp /= 10 ; ans ++ ; sum += temp ; } l /= 2 ; if ( temp <= r ) { System . out . println ( - 1 ) ; return ; } long tmp = l ; long sum = 0 ; while ( temp > l ) { sum += temp ; temp /= 10 ; ans ++ ; } l /= 2 ; if ( sum <= r ) { System . out . println ( ans ) ; return ; } long tmp = l ; long sum = 0 ; while ( temp > l ) { sum += temp ; temp /= 10 ; ans ++ ; } l /= 2 ; if ( sum <= r ) { System . out . println ( ans ) ; return ; } long tmp = l ; long sum = 0 ; while ( temp > l ) { sum += temp ; temp /= 10 ; ans ++ ; } l /= 2 ; if ( sum <= r ) { tmp = r ; sum = 0 ; } tmp /= 10 ; ans ++ ; tmp /= 2 ; ans = Math . max ( ans , tmp ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { int temp = arr [ i ] ; arr [ i ] = arr [ i + 1 ] ; arr [ i + 1 ] = temp ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } }
import java . util . * ; public class GFG { static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } static boolean isProduct ( int num ) { int cnt = 0 ; for ( int i = 2 ; cnt < 2 && i * i <= num ; i ++ ) { while ( num % i == 0 ) { num /= i ; cnt ++ ; } } if ( num > 1 ) cnt ++ ; return cnt == 2 ; } static void findNumbers ( int N ) { Vector < Integer > vec = new Vector < > ( ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( isProduct ( i ) && ! isPerfectSquare ( i ) ) { vec . add ( i ) ; } } for ( int i = 0 ; i < vec . size ( ) ; i ++ ) { System . out . print ( vec . get ( i ) + " " ) ; } } public static void main ( String [ ] args ) { int N = 30 ; findNumbers ( N ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int [ ] [ ] a = new int [ 4 ] [ 2 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = in . nextInt ( ) ; } } int [ ] [ ] b = new int [ 4 ] [ 2 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = a [ i ] [ j ] ; } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b [ i ] [ j ] == 0 ) continue ; b [ i ] [ j ] = b [ i ] [ j ] + a [ i ] [ j ] ; } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b [ i ] [ j ] == 0 ) continue ; out . println ( b [ i ] [ j ] ) ; } } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int count = 0 ; for ( int i = 1 ; i <= 9 ; i ++ ) { for ( int j = 1 ; j <= 9 ; j ++ ) { if ( i * 10 + j * 10 + i <= n ) { count ++ ; i = j ; } } } System . out . println ( count ) ; } } }
import java . io . * ; public class GFG { static int divSum ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { sum = sum + i + Math . floor ( n / i ) ; } } return sum ; } static boolean areEquivalent ( int num1 , int num2 ) { return divSum ( num1 ) == divSum ( num2 ) ; } public static void main ( String [ ] args ) { int num1 = 559 , num2 = 703 ; if ( areEquivalent ( num1 , num2 ) == true ) System . out . println ( " Equivalent " ) ; else System . out . println ( " Not Equivalent " ) ; } }
public class GFG { static int findY ( int x ) { if ( x > 2 ) return x - 2 ; return x + 2 ; } public static void main ( String [ ] args ) { int x = 5 ; System . out . println ( findY ( x ) ) ; } }
import java . util . * ; public class GFG { static int MOD = 1000000007 ; static int modFact ( int n , int m ) { int result = 1 ; for ( int i = 1 ; i <= m ; i ++ ) result = ( result * i ) % MOD ; return result ; } public static void main ( String [ ] args ) { int n = 3 , m = 2 ; System . out . println ( modFact ( n , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = arr [ i ] ; for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] < min ) { min = arr [ j ] ; } } if ( min != arr [ i ] ) { int temp = arr [ i ] ; arr [ i ] = arr [ min ] ; arr [ min ] = temp ; count ++ ; } } System . out . println ( count ) ; System . out . println ( " " ) ; } }
import java . util . Scanner ; public class Main { static int W , H ; static int [ ] [ ] map ; static int [ ] dx = { 1 , 0 , - 1 , 1 } ; static int [ ] dy = { 0 , 1 , 0 , - 1 , - 1 } ; static int count = 0 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; W = sc . nextInt ( ) ; H = sc . nextInt ( ) ; map = new int [ H ] [ W ] ; for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( map [ i ] [ j ] == 1 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int min = Math . min ( arr [ i ] , arr [ i + 1 ] ) ; int max = Math . max ( arr [ i ] , arr [ i + 1 ] ) ; arr [ i ] = min ; arr [ i + 1 ] = max ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } }
public class GFG { static float circlearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float A = ( ( float ) ( 3.14 * Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) ) / ( 4 * ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) ) ; return A ; } public static void main ( String [ ] args ) { float a = 8 , b = 10 ; System . out . println ( circlearea ( a , b ) ) ; } }
import java . util . * ; public class GFG { static void find ( int [ ] arr , int n ) { int sum = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { sum += arr [ i ] ; } if ( sum == n ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { int [ ] arr = { - 1 , 2 , 4 , 121 } ; int n = arr . length ; find ( arr , n ) ; } }
import java . util . * ; public class GFG { static String K_String ( String s , int k ) { int n = s . length ( ) ; int [ ] fre = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) fre [ s . charAt ( i ) - ' a ' ] ++ ; String str = " " ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( fre [ i ] % k == 0 ) { int x = fre [ i ] / k ; while ( x > 0 ) { str += ( char ) ( i + ' a ' ) ; x -- ; } } else { return " - 1" ; } } return str ; } public static void main ( String [ ] args ) { String s = " aabb " ; int k = 2 ; System . out . println ( K_String ( s , k ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] dp = new int [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { dp [ i ] = 1 ; } dp [ 1 ] = 1. ; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { if ( dp [ i ] == 0 ) { continue ; } dp [ i ] += dp [ j ] ; } } println ( " " + dp [ n ] ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; double EPS = 1e-10 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < 100000 ; i ++ ) { ans += ( a % b ) * pow ( 10 , n / b ) ; } System . out . println ( ans ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; int l = 0 , r = 0 ; boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ i ] ) continue ; if ( a [ i ] > a [ i + 1 ] ) { out . println ( 1 ) ; return ; } if ( a [ i ] < a [ i + 1 ] ) { out . println ( 0 ) ; return ; } if ( a [ i ] > a [ i + 1 ] ) { out . println ( 1 ) ; return ; } if ( a [ i ] < a [ i + 1 ] ) { out . println ( 0 ) ; return ; } if ( a [ i ] > a [ i + 1 ] ) { out . println ( 1 ) ; return ; } if ( a [ i ] < a [ i + 1 ] ) { out . println ( 0 ) ; return ; } if ( visited [ i ] ) { out . println ( 1 ) ; return ; } } out . println ( 0 ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( ( n | k ) == 0 ) break ; int [ ] s = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = INF ; for ( int i = 0 ; i < k ; i ++ ) { min = min ( min , s [ i ] - b [ i ] ) ; } if ( min == INF ) System . out . println ( " No " ) ; else System . out . println ( " Yes " ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int maxFreq ( String s , int a , int b ) { int [ ] fre = new int [ 10 ] ; int n = s . length ( ) ; if ( a > b ) { swap ( a , b ) ; } for ( int i = 0 ; i < n ; i ++ ) { a = s . charAt ( i ) - '0' ; fre [ a ] ++ ; } if ( fre [ a ] == 0 && fre [ b ] == 0 ) { return - 1 ; } else if ( fre [ a ] >= fre [ b ] ) { return a ; } else { return b ; } } public static void main ( String [ ] args ) { int a = 4 , b = 7 ; String s = "47744" ; System . out . println ( maxFreq ( s , a , b ) ) ; } }
public class GFG { static int maxZeros ( int n ) { if ( n == 0 || ( n & ( n - 1 ) ) == 0 ) return - 1 ; int setBit = 1 ; int prev = 0 ; for ( int i = 1 ; i < 33 ; i ++ ) { prev ++ ; if ( ( n & setBit ) == setBit ) { setBit = setBit << 1 ; break ; } setBit = setBit << 1 ; } int max0 = Integer . MIN_VALUE ; int cur = prev ; for ( int j = i + 1 ; j < 33 ; j ++ ) { cur ++ ; if ( ( n & setBit ) == setBit ) { if ( max0 < ( cur - prev - 1 ) ) max0 = cur - prev - 1 ; prev = cur ; } setBit = setBit << 1 ; } return max0 ; } public static void main ( String [ ] args ) { int n = 549 ; System . out . println ( maxZeros ( n ) ) ; } }
public class GFG { static int sumPowersK ( int n , int k ) { int sum = 0 , num = 1 ; while ( num <= n ) { sum += num ; num *= k ; } return sum ; } static int getSum ( int n , int k ) { int pwrK = sumPowersK ( n , k ) ; int sumAll = ( n * ( n + 1 ) ) / 2 ; return ( sumAll - pwrK ) ; } public static void main ( String [ ] args ) { int n = 10 , k = 3 ; System . out . println ( getSum ( n , k ) ) ; } }
public class GFG { static double XandYandZintercept ( double A , double B , double C , double D ) { double x = - D / A ; double y = - D / B ; double z = - D / C ; return Math . abs ( x ) + Math . abs ( y ) + Math . abs ( z ) ; } public static void main ( String [ ] args ) { double A = 2 , B = 5 , C = 7 , D = 8 ; System . out . println ( XandYandZintercept ( A , B , C , D ) ) ; } }
import java . util . * ; public class GFG { static void maxSum ( int arr [ ] , int n ) { int s = 0 ; Vector < Integer > l = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s += Math . abs ( arr [ i ] ) ; if ( arr [ i ] >= 0 ) continue ; if ( i == 0 ) l . add ( i + 1 ) ; else { l . add ( i + 1 ) ; l . add ( i ) ; } } System . out . println ( s ) ; System . out . print ( l . toString ( ) + " " ) ; } public static void main ( String [ ] args ) { int n = 4 ; int a [ ] = { 1 , - 2 , - 3 , 4 } ; maxSum ( a , n ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static String replaceSpaces ( String str ) { str = str . trim ( ) ; int i = str . length ( ) ; int space_count = str . length ( ) ; int new_length = i + space_count * 2 ; if ( new_length > MAX ) return - 1 ; int index = new_length - 1 ; String str = str ; for ( int f = i - 2 ; f < new_length - 2 ; f ++ ) str = str . substring ( 0 , f ) ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( str . charAt ( j ) == ' ' ) { str = str . substring ( index ) ; str = str . substring ( index - 1 , index ) ; str = str . substring ( index - 2 , index - 3 ) ; } else { str = str . substring ( index ) ; str = str . substring ( j ) ; } } return str ; } public static void main ( String [ ] args ) { String s = " Mr John Smith " ; s = replaceSpaces ( s ) ; System . out . println ( s ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int d = sc . nextInt ( ) ; StringBuilder sb = new StringBuilder ( s ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { sb . append ( "0" ) ; } else { sb . append ( "1" ) ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( i % 2 == 0 ) { sb . append ( "0" ) ; } else { sb . append ( "1" ) ; } } System . out . println ( sb . toString ( ) ) ; } }
public class GFG { static boolean check ( int n ) { int m = n ; while ( n != 0 ) { int r = n % 10 ; if ( r > 0 ) { if ( ( m % r ) != 0 ) return false ; } n = n / 10 ; } return true ; } static int count ( int l , int r ) { int ans = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( check ( i ) ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int l = 10 , r = 20 ; System . out . println ( count ( l , r ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > b ) { if ( a == 9 && b == 9 ) { System . out . println ( 9 + " " + 9 ) ; } else if ( a == 1 && b == 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( a + " " + b ) ; } } else if ( a == 1 && b == 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( a + " " + b ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = a [ n - 1 ] - a [ n - 2 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int min = Math . min ( a [ i ] - a [ i + 1 ] , a [ i + 2 ] - a [ i ] ) ; ans = Math . max ( ans , min ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 4 == 0 ) System . out . println ( "4" ) ; else System . out . println ( "0" ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] arr = s . toCharArray ( ) ; Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { sum += arr [ i ] - '0' ; } if ( sum >= k ) { System . out . println ( 0 ) ; } else { int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { sum += arr [ i ] - '0' ; count ++ ; } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int x = n ; int ans = 0 ; if ( x == 1 ) { ans = n ; } else if ( x % k == 0 ) { if ( A > x / k ) { ans = n - ( A - x / k ) ; } else { ans = n - ( A - x / k ) ; } } else { if ( B > x / k ) { ans = n - ( B - x / k ) ; } else { ans = n - ( B - x / k ) ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int digSum ( int n ) { int sum = 0 ; while ( n > 0 || sum > 9 ) { if ( n == 0 ) { n = sum ; sum = 0 ; } sum += n % 10 ; n = n / 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 1234 ; System . out . println ( digSum ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { if ( s . charAt ( i ) == t . charAt ( j ) ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i + 1 ] [ j ] - 1 ) ; if ( i == n && j == m ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i + 1 ] [ j ] + 2 ) ; } } } int ans = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { ans = Math . max ( ans , dp [ i ] [ j ] ) ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int centered_heptagonal_num ( int n ) { return ( 7 * n * n - 7 * n + 2 ) / 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( n + " Centered heptagonal number : " + centered_heptagonal_num ( n ) ) ; } }
import java . util . * ; public class GFG { static int missingNum ( int arr [ ] , int n ) { int minvalue = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; int xornum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xornum ^= ( minvalue ) ^ arr [ i ] ; minvalue ++ ; } return xornum ^ minvalue ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 12 , 11 , 15 } ; int n = arr . length ; System . out . println ( missingNum ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static String smallestPermute ( int n ) { String res [ ] = new String [ n + 1 ] ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = 48 + i + 2 ; else res [ i ] = 48 + i ; } } else { for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = 48 + i + 2 ; else res [ i ] = 48 + i ; } } res [ n - 1 ] = ( char ) ( 48 + n - 2 ) ; res [ n - 2 ] = ( char ) ( 48 + n ) ; res [ n - 3 ] = ( char ) ( 48 + n - 1 ) ; return String . valueOf ( res ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( smallestPermute ( n ) ) ; } }
import java . util . * ; public class GFG { static int minOperations ( int a [ ] , int n , int K ) { HashMap < Integer , Boolean > Map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Map . get ( a [ i ] ) == null ) return 0 ; Map . put ( a [ i ] , true ) ; } Map . Entry < Integer , Boolean > b = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { b . put ( a [ i ] , true ) ; b . put ( a [ i ] , true ) ; } Map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b . get ( i ) ) Map . put ( b . get ( i ) , true ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( Map . get ( a [ i ] ) == null ) return 1 ; Map . put ( a [ i ] , true ) ; } Map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( Map . get ( b . get ( i ) ) == null ) return 2 ; Map . put ( b . get ( i ) , true ) ; } return - 1 ; } public static void main ( String [ ] args ) { int K = 3 ; int a [ ] = { 1 , 2 , 3 , 7 } ; int n = a . length ; System . out . println ( minOperations ( a , n , K ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; if ( ( w | h ) == 0 ) { break ; } char [ ] [ ] map = new char [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { map [ i ] = sc . next ( ) . toCharArray ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( map [ i ] [ j ] == ' . ' ) { map [ i ] [ j ] = ' # ' ; cnt ++ ; } else { map [ i ] [ j ] = ' W ' ; cnt ++ ; } } } println ( cnt + " " + cnt ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n >= 360 && n <= 360 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } catch ( Exception e ) { } } }
import java . math . BigInteger ; import java . util . * ; public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int NUM_COLORS = 7 ; private static final int BALLS_PER_COLOR = 10 ; private static final int NUM_PICKED = 20 ; private static final int DECIMALS = 9 ; private BigInteger numerator ; private BigInteger denominator ; private BigInteger [ ] hist ; private void run ( ) { hist = new BigInteger [ NUM_COLORS + 1 ] ; hist = new BigInteger [ NUM_COLORS + 1 ] ; for ( int i = 0 ; i < hist . length ; i ++ ) hist [ hist [ i ] ] = hist [ i ] . multiply ( Library . factorial ( NUM_COLORS ) ) ; hist = new BigInteger [ NUM_PICKED + 1 ] ; for ( int i = 0 ; i < hist . length ; i ++ ) hist [ hist [ i ] ] = Library . factorial ( hist [ i ] ) ; for ( int i = 0 ; i < hist . length ; i ++ ) hist [ hist [ i ] ] = Library . binomial ( BALLS_PER_COLOR , hist [ i ] ) ; hist = new BigInteger [ NUM_PICKED + 1 ] ; hist = new BigInteger [ NUM_COLORS + 1 ] ; for ( int i = 0 ; i < hist . length ; i ++ ) hist [ hist [ i ] ] = Library . binomial ( BALLS_PER_COLOR , hist [ i ] ) ; BigInteger distinct colors = hist . toString ( ) ; numerator = BigInteger . valueOf ( distinct colors ) ; denominator = BigInteger . valueOf ( hist . toString ( ) ) ; if ( hist . compareTo ( BigInteger . ZERO ) == 0 ) { numerator = BigInteger . ZERO ; denominator = BigInteger . valueOf ( 0 ) ; } else if ( hist . compareTo ( BigInteger . ZERO ) == 0 ) { numerator = BigInteger . ZERO ; denominator = BigInteger . ZERO ; } else { numerator = hist . toString ( ) ; denominator = BigInteger . valueOf ( hist . toString ( ) ) ; } BigInteger ans = numerator . add ( denominator ) ; BigInteger sum = BigInteger . valueOf ( ans ) ; System . out . println ( ans . subtract ( BigInteger . ZERO ) . toString ( ) )
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int min = Math . min ( h , m ) ; int max = Math . max ( h , m ) ; if ( min + m - s > 0 ) { System . out . println ( 0 + " " + min ) ; } else { System . out . println ( min + " " + max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( b == 1 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; System . out . println ( a * b + " " + a * a ) ; } } } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int r = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; if ( ( r | a ) == 0 ) break ; int h = 0 , b = 0 ; for ( int i = 0 ; i < r ; i ++ ) { if ( a == sc . nextInt ( ) ) h ++ ; } for ( int i = 0 ; i < a ; i ++ ) { if ( r == sc . nextInt ( ) ) b ++ ; } System . out . println ( h + " " + b ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int findMaxValue ( int arr [ ] , int n ) { if ( n < 4 ) { System . out . println ( " The array should have atlest 4 elements " ) ; return Integer . MIN ; } int table1 [ ] = new int [ n + 1 ] ; int table2 [ ] = new int [ n + 1 ] ; int table3 [ ] = new int [ n - 1 ] ; int table4 [ ] = new int [ n - 2 ] ; for ( int i = n - 1 ; i >= 0 ; i -- ) table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ; for ( int i = n - 3 ; i >= 0 ; i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ; for ( int i = n - 4 ; i >= 0 ; i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ; return table4 [ 0 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , 2 , 20 } ; int n = arr . length ; int MIN = - 100000000 ; System . out . println ( findMaxValue ( arr , n ) ) ; } }
public class GFG { static void centeredHexagonalSeries ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( 3 * i * ( i - 1 ) + 1 + " " ) ; } } public static void main ( String [ ] args ) { int n = 10 ; centeredHexagonalSeries ( n ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String [ ] ABC = { " A " , " B " , " C " } ; String [ ] ABC_B = { " B " , " C " , " A " } ; String [ ] ABC_C = { " C " , " B " , " C " } ; String result = " Yes " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String com = s . substring ( i , i + 1 ) ; String com_a = s . substring ( 0 , i ) ; String com_b = s . substring ( i + 1 , i + 2 ) ; String com_c = s . substring ( i + 2 , i + 3 ) ; String com_a = com_a . replace ( com_a , com_b ) ; String com_c = com_c . replace ( com_b , com_c ) ; String com_c = com_c . replace ( com_c , com_a ) ; if ( com_a . equals ( com_c ) && com_b . equals ( com_c ) && com_c . equals ( com_a ) ) { result = " No " ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int b = 0 ; int ans = 0 ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == ' B ' ) { b ++ ; } else { ans = i + 1 ; } } System . out . println ( b + " " + ans ) ; } }
import java . util . * ; public class GFG { static void diagonalsMinMax ( int mat [ ] [ ] ) { int n = mat . length ; if ( n == 0 ) return ; int principalMin = mat [ 0 ] [ 0 ] ; int principalMax = mat [ 0 ] [ 0 ] ; int secondaryMin = mat [ n - 1 ] [ 0 ] ; int secondaryMax = mat [ n - 1 ] [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { if ( i == j ) { if ( mat [ i ] [ j ] < principalMin ) principalMin = mat [ i ] [ j ] ; if ( mat [ i ] [ j ] > principalMax ) principalMax = mat [ i ] [ j ] ; } if ( ( i + j ) == ( n - 1 ) ) { if ( mat [ i ] [ j ] < secondaryMin ) secondaryMin = mat [ i ] [ j ] ; if ( mat [ i ] [ j ] > secondaryMax ) secondaryMax = mat [ i ] [ j ] ; } } } System . out . println ( " Principal Diagonal Smallest Element : " + principalMin ) ; System . out . println ( " Principal Diagonal Greatest Element : " + principalMax ) ; System . out . println ( " Secondary Diagonal Smallest Element : " + secondaryMin ) ; System . out . println ( " Secondary Diagonal Greatest Element : " + secondaryMax ) ; } public static void main ( String [ ] args ) { int matrix [ ] [ ] = { { 1 , 2 , 3 , 4 , - 10 } , { 5 , 6 , 7 , 8 , 6 } , { 1 , 2 , 11 , 3 , 4 } , { 5 , 6 , 70 , 5 , 8 } , { 4 , 9 , 7 , 1 , - 5 } } ; diagonalsMinMax ( matrix ) ; } }
import java . util . * ; public class GFG { static int n = 5 ; static void diagonalsMinMax ( int mat [ ] [ ] ) { if ( n == 0 ) return ; int principalMin = mat [ 0 ] [ 0 ] ; int principalMax = mat [ 0 ] [ 0 ] ; int secondaryMin = mat [ n - 1 ] [ 0 ] ; int secondaryMax = mat [ n - 1 ] [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( mat [ i ] [ i ] < principalMin ) principalMin = mat [ i ] [ i ] ; if ( mat [ i ] [ i ] > principalMax ) principalMax = mat [ i ] [ i ] ; if ( mat [ n - 1 - i ] [ i ] < secondaryMin ) secondaryMin = mat [ n - 1 - i ] [ i ] ; if ( mat [ n - 1 - i ] [ i ] > secondaryMax ) secondaryMax = mat [ n - 1 - i ] [ i ] ; } System . out . println ( " Principal Diagonal Smallest Element : " + principalMin ) ; System . out . println ( " Principal Diagonal Greatest Element : " + principalMax ) ; System . out . println ( " Secondary Diagonal Smallest Element : " + secondaryMin ) ; System . out . println ( " Secondary Diagonal Greatest Element : " + secondaryMax ) ; } public static void main ( String [ ] args ) { int matrix [ ] [ ] = { { 1 , 2 , 3 , 4 , - 10 } , { 5 , 6 , 7 , 8 , 6 } , { 1 , 2 , 11 , 3 , 4 } , { 5 , 6 , 70 , 5 , 8 } , { 4 , 9 , 7 , 1 , - 5 } } ; diagonalsMinMax ( matrix ) ; } }
public class GFG { static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( " Invalid Input " ) ; return - 1 ; } int sum = 0 , count = 0 ; while ( n >= 1 ) { count ++ ; sum = sum + n ; n = n - 2 ; } return sum / count ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } }
public class GFG { static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( " Invalid Input " ) ; return - 1 ; } return ( n + 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } }
import java . util . * ; public class GFG { static boolean areElementsContiguous ( int arr [ ] ) { HashSet < Integer > us = new HashSet < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) us . add ( arr [ i ] ) ; int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( curr_ele >= 0 ) { count ++ ; curr_ele -- ; } curr_ele = arr [ 0 ] + 1 ; while ( curr_ele >= 0 ) { count ++ ; curr_ele ++ ; } return ( count == us . size ( ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; if ( areElementsContiguous ( arr ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int zero = 0 , one = 0 ; static int getLeftMostZero ( ) { if ( zero > 0 ) return - 1 ; zero -- ; return 0 ; } static int getLeftMostOne ( ) { if ( one > 0 ) return - 1 ; one -- ; return 1 ; } static int getLeftMostElement ( ) { if ( zero != 0 && one != 0 ) return - 1 ; else if ( zero != 0 ) { one -- ; return 1 ; } else if ( one != 0 ) { zero -- ; return 0 ; } int res = 0 ; if ( zero < one ) res = getLeftMostZero ( ) ; else if ( one != 0 ) res = getLeftMostOne ( ) ; else res = getLeftMostElement ( ) ; return res ; } static void performQueries ( int arr [ ] , int n , int queries [ ] , int q ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) zero . add ( i ) ; else one . add ( i ) ; } for ( int i = 0 ; i < q ; i ++ ) { int type = queries [ i ] ; if ( type == 1 ) System . out . println ( getLeftMostZero ( ) ) ; else if ( type == 2 ) System . out . println ( getLeftMostOne ( ) ) ; else if ( type == 3 ) System . out . println ( getLeftMostElement ( ) ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 1 , 1 , 1 } ; int n = arr . length ; int queries [ ] = { 1 , 3 , 1 } ; int q = queries . length ; performQueries ( arr , n , queries , q ) ; } }
public class GFG { static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; if ( x < 0 ) x = - 1 ; else x = 1 ; System . out . print ( val * x + " " ) ; if ( y < 0 ) y = - 1 ; else y = 1 ; System . out . print ( "0" + val * y ) ; } public static void main ( String [ ] args ) { int x = 3 , y = 3 ; Vertices ( x , y ) ; } }
import java . util . * ; public class GFG { static void getSum ( int a [ ] , int n ) { int P [ ] = new int [ n ] ; P [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) P [ i ] = a [ i ] + P [ i - 1 ] ; int S = P [ n - 1 ] ; HashSet < Integer > hash = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) hash . add ( P [ i ] ) ; for ( int i = 1 ; i * i <= S ; i ++ ) { if ( S % i == 0 ) { boolean pres = true ; int div1 = i ; int div2 = S / i ; for ( int j = div1 ; j <= S ; j += div1 ) { if ( hash . contains ( j ) ) { pres = false ; break ; } } if ( pres && div1 != S ) res . add ( div1 ) ; pres = true ; for ( int j = S / i ; j <= S ; j += S / i ) { if ( hash . contains ( j ) ) { pres = false ; break ; } } if ( pres && div2 != S ) res . add ( div2 ) ; } } if ( res . size ( ) == 0 ) { System . out . println ( " - 1" ) ; return ; } for ( int i : res ) System . out . print ( i + " " ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 1 , 1 , 2 , 1 , 3 } ; int n = a . length ; getSum ( a , n ) ; } }
import java . util . * ; public class GFG { static void originalArray ( int greater [ ] , int n ) { Vector < Integer > temp = new Vector < Integer > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) temp . add ( i ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int k = n - greater [ i ] - i ; arr [ i ] = temp . get ( k ) ; temp . remove ( k ) ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 2 , 1 , 0 , 1 , 0 } ; int n = arr . length ; originalArray ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String t = sc . next ( ) ; int a = 0 , b = 0 ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == t . charAt ( 0 ) ) a ++ ; else if ( s . charAt ( j ) == t . charAt ( 1 ) ) b ++ ; else { ans += Math . min ( a , b ) ; a = 0 ; b = 0 ; } } ans += Math . min ( a , b ) ; } System . out . println ( ans ) ; } }
import java . util . Arrays ; public class Solution { public double findRadius ( int [ ] houses , int [ ] heaters ) { Arrays . sort ( heaters ) ; double ans = Integer . MAX_VALUE ; for ( int i = 0 ; i < houses . length ; i ++ ) { while ( heaters [ i ] >= ( double ) Math . pow ( ( i + 1 ) / 2. , 2 ) ) { i ++ ; } ans = Math . max ( ans , Math . abs ( heaters [ i ] - houses [ i ] ) ) ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] houses = { 1 , 2 , 3 } ; int [ ] heaters = { 2 } ; double out = sObj . findRadius ( houses , heaters ) ; System . out . println ( out ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { if ( Library . isPrime ( Library . pow ( 5 , Library . pow ( 7 , 2 ) ) ) ) return Integer . toString ( Library . pow ( 5 , Library . pow ( 7 , 2 ) ) ) ; else return Library . pow ( 5 , Library . pow ( 7 , 2 ) ) ; } }
public class GFG { static int res = 0 ; static void checkRecursive ( int num , int x , int k , int n ) { if ( x == 0 ) res ++ ; int r = ( int ) Math . floor ( Math . pow ( num , ( 1 / n ) ) ) ; for ( int i = k + 1 ; i <= r ; i ++ ) { int a = x - ( int ) Math . pow ( i , n ) ; if ( a >= 0 ) checkRecursive ( num , x - ( int ) Math . pow ( i , n ) , i , n ) ; } } public static int check ( int x , int n ) { return checkRecursive ( x , x , 0 , n ) ; } public static void main ( String [ ] args ) { System . out . println ( check ( 10 , 2 ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] bit = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) bit [ i ] = Integer . parseInt ( s . charAt ( i ) + " " ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { int bitIndex = i % 2 ; if ( bit [ i ] == 1 ) { if ( bitIndex == 0 ) { ans [ i ] = 1 ; } else { ans [ i ] = ans [ i - 1 ] + bit [ i ] ; } } else { if ( bitIndex == 0 ) { ans [ i ] = 1 ; } else { ans [ i ] = ans [ i - 1 ] + bit [ i ] ; } } } for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { if ( bit [ i ] == 1 ) continue ; int bitIndex = i % 2 ; if ( bitIndex == 0 ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if ( bitIndex == n ) continue ; if (
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( dp [ j ] [ k ] == - 1 ) continue ; int min = Math . min ( b [ j ] , k + a [ j ] - b [ k ] ) ; dp [ j + 1 ] [ min ] = Math . max ( dp [ j + 1 ] [ min ] , dp [ j ] [ k ] + min ) ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { out . print ( dp [ i ] [ j ] + " " ) ; } out . println ( ) ; } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long n = sc . nextLong ( ) ; if ( n < 10 ) System . out . println ( n ) ; else { int len = ( int ) Math . pow ( 10 , len - 1 ) ; long ans = 0 ; for ( int i = len - 1 ; i >= 0 ; i -- ) { ans += ( n % 10 ) ; n /= 10 ; } System . out . println ( ans ) ; } } }
public class GFG { static boolean prime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } static void thirdNumber ( int a , int b ) { int sum = 0 , temp = 0 ; sum = a + b ; temp = 1 ; if ( sum % 2 == 1 ) temp = 2 ; while ( prime ( sum + temp ) == false ) temp += 2 ; System . out . println ( temp ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 ; thirdNumber ( a , b ) ; } }
public class GFG { static int Squares ( int n , int m , int a ) { return ( ( ( m + a - 1 ) / a ) * ( ( n + a - 1 ) / a ) ) ; } public static void main ( String [ ] args ) { int n = 6 , m = 6 , a = 4 ; System . out . println ( Squares ( n , m , a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n >= 6 && n % m == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int countCubes ( int a , int b ) { int cnt = 0 ; for ( int i = a ; i <= b ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { if ( j * j * j > i ) break ; if ( j * j * j == i ) cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int a = 7 , b = 30 ; System . out . println ( " Count of Cubes is " + countCubes ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ a [ i ] ] ++ ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == b [ j ] ) { cnt ++ ; } } min = Math . min ( min , cnt ) ; } else { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == b [ j ] ) { cnt ++ ; } } min = Math . min ( min , cnt ) ; } } System . out . println ( min ) ; } }
public class GFG { static void subString ( String s , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int len = i + 1 ; len <= n ; len ++ ) { System . out . print ( s . substring ( i , len ) ) ; } } } public static void main ( String [ ] args ) { String s = " abcd " ; subString ( s , s . length ( ) ) ; } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static void countPrimePosition ( int arr [ ] ) { int c0 = 0 , c1 = 0 ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 && isPrime ( i ) ) c0 ++ ; if ( arr [ i ] == 1 && isPrime ( i ) ) c1 ++ ; } System . out . println ( " Number of 0s = " + c0 ) ; System . out . println ( " Number of 1s = " + c1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 1 , 0 , 1 } ; countPrimePosition ( arr ) ; } }
public class GFG { static void angleextcycquad ( int z ) { System . out . print ( " The exterior angle of the " + z + " cyclic quadrilateral is " ) ; System . out . print ( z + " degrees " ) ; } public static void main ( String [ ] args ) { int z = 48 ; angleextcycquad ( z ) ; } }
import java . util . * ; public class GFG { static void printMinIndexChar ( String str , String patt ) { int minIndex = Integer . MAX_VALUE ; int m = str . length ( ) ; int n = patt . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) { minIndex = j ; break ; } } } if ( minIndex != Integer . MAX_VALUE ) System . out . println ( " Minimum Index Character = " + str . charAt ( minIndex ) ) ; else System . out . println ( " No character present " ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; String patt = " set " ; printMinIndexChar ( str , patt ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a != b ) { System . out . println ( " Happy Alex " ) ; } else { System . out . println ( " Poor Alex " ) ; } } } catch ( Exception e ) { } } }
public class GFG { static int maxnumber ( int n , int k ) { for ( int i = 0 ; i < k ; i ++ ) { int ans = 0 ; for ( int i = 1 ; n / i > 0 ; i *= 10 ) { int temp = ( n / i ) * i + ( n % i ) ; ans = Math . max ( ans , temp ) ; } n = ans ; } return ans ; } public static void main ( String [ ] args ) { int n = 6358 , k = 1 ; System . out . println ( maxnumber ( n , k ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) , m = in . nextInt ( ) ; int [ ] a = new int [ m ] , b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } int [ ] dp = new int [ n + 1 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] == 0 ) dp [ i + 1 ] = 1 ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] == 0 ) { dp [ i + 1 ] = Math . min ( dp [ i + 1 ] , b [ i ] ) ; min = Math . min ( min , dp [ i + 1 ] ) ; } } out . println ( min + " " + dp . length ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int left = 0 ; int right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { left += a [ i ] ; } else { right += a [ i ] ; } } int ans = Math . min ( left , right ) ; System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int get_last_two_digit ( int N ) { if ( N <= 10 ) { int ans = 0 ; int fac = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { fac = fac * i ; ans += fac ; } ans = ans % 100 ; return ans ; } else return 13 ; } public static void main ( String [ ] args ) { int N = 1 ; for ( int N = 1 ; N <= 10 ; N ++ ) { System . out . println ( " For N = " + N + " : " + get_last_two_digit ( N ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( n % 2 == 0 ? n : n + 2 ) ; } }
import java . util . * ; public class GFG { static boolean isPossible ( double x , double y , double z ) { double a = x * x + y * y + z * z ; a = Math . round ( a ) ; if ( ( int ) Math . ceil ( a ) == 1 && ( int ) Math . floor ( a ) == 1 ) return true ; return false ; } public static void main ( String [ ] args ) { double l = 0.70710678 ; double m = 0.5 , n = 0.5 ; if ( isPossible ( l , m , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static int MOD = ( int ) Math . pow ( 10 , 9 ) + 7 ; static int result [ ] = new int [ MAX + 1 ] ; static int fact [ ] = new int [ MAX + 1 ] ; static void preCompute ( ) { fact [ 0 ] = 1 ; result [ 0 ] = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) { fact [ i ] = ( ( fact [ i - 1 ] % MOD ) * i ) % MOD ; result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD ; } } static void performQueries ( int q [ ] , int n ) { preCompute ( ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . println ( result [ q [ i ] ] ) ; } public static void main ( String [ ] args ) { int q [ ] = { 4 , 5 } ; int n = q . length ; performQueries ( q , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; long sum = arr [ n - 1 ] ; long min = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { sum += ( arr [ i ] - arr [ i + 1 ] ) ; min = Math . min ( min , sum ) ; } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static int segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } return j ; } static int findMissingPositive ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) { if ( Math . abs ( arr [ i ] ) - 1 < size && arr [ Math . abs ( arr [ i ] ) - 1 ] > 0 ) { arr [ Math . abs ( arr [ i ] ) - 1 ] = - arr [ Math . abs ( arr [ i ] ) - 1 ] ; } } for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] > 0 ) return i + 1 ; } return size + 1 ; } static int findMissing ( int arr [ ] , int size ) { int shift = segregate ( arr , size ) ; return findMissingPositive ( arr , shift ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 10 , 2 , - 10 , - 20 } ; int arr_size = arr . length ; int missing = findMissing ( arr , arr_size ) ; System . out . println ( " The smallest positive missing number is " + missing ) ; } }
public class GFG { static int mod = 1000000007 ; static int digitNumber ( int n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 9 ; if ( n % 2 != 0 ) { int temp = digitNumber ( ( n - 1 ) / 2 ) % mod ; return ( 9 * ( temp * temp ) % mod ) % mod ; } else { int temp = digitNumber ( n / 2 ) % mod ; return ( temp * temp ) % mod ; } } static int countExcluding ( int n , int d ) { if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; } public static void main ( String [ ] args ) { int d = 9 , n = 3 ; System . out . println ( countExcluding ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } if ( arr [ 0 ] + arr [ n - 1 ] > arr [ n - 1 ] ) { System . out . println ( - 1 ) ; } else { System . out . println ( 1 + " " + 2 + n ) ; } } } }
public class GFG { static void convert12 ( String str ) { int h1 = str . charAt ( 0 ) - '0' ; int h2 = str . charAt ( 1 ) - '0' ; int hh = h1 * 10 + h2 ; String Meridien = " " ; if ( hh < 12 ) Meridien = " AM " ; else Meridien = " PM " ; hh %= 12 ; if ( hh == 0 ) { System . out . print ( "12" ) ; for ( int i = 2 ; i < 8 ; i ++ ) System . out . print ( str . charAt ( i ) ) ; } else { System . out . print ( hh ) ; for ( int i = 2 ; i < 8 ; i ++ ) System . out . print ( str . charAt ( i ) ) ; } System . out . println ( Meridien ) ; } public static void main ( String [ ] args ) { String str = "17:35:20" ; convert12 ( str ) ; } }
public class GFG { static boolean check ( String s , int k ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) != s . charAt ( i % k ) ) return false ; return true ; } static int countCommonDivisors ( String a , String b ) { int ct = 0 ; int n = a . length ( ) , m = b . length ( ) ; for ( int i = 1 ; i <= Math . min ( n , m ) ; i ++ ) { if ( n % i == 0 && m % i == 0 ) { if ( a . substring ( 0 , i ) . equals ( b . substring ( 0 , i ) ) ) { if ( check ( a , i ) && check ( b , i ) ) ct ++ ; } } } return ct ; } public static void main ( String [ ] args ) { String a = " xaxa " , b = " xaxaxaxa " ; System . out . println ( countCommonDivisors ( a , b ) ) ; } }
import java . util . * ; public class GFG { static void print knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int [ ] [ ] K = new int [ n + 1 ] [ W + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int w = 0 ; w <= W ; w ++ ) { if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ; else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) ; else K [ i ] [ w ] = K [ i - 1 ] [ w ] ; } } int res = K [ n ] [ W ] ; System . out . println ( res ) ; int w = W ; for ( int i = n ; i >= 0 ; i -- ) { if ( res <= 0 ) break ; if ( res == K [ i - 1 ] [ w ] ) { continue ; } else { System . out . println ( wt [ i - 1 ] ) ; res = res - val [ i - 1 ] ; w = w - wt [ i - 1 ] ; } } } public static void main ( String [ ] args ) { int val [ ] = { 60 , 100 , 120 } ; int wt [ ] = { 10 , 20 , 30 } ; int W = 50 ; int n = val . length ; print knapSack ( W , wt , val , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < arr [ i ] . length ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < arr [ i ] . length ; j ++ ) { if ( arr [ i ] [ j ] == arr [ i ] [ j + 1 ] ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static void indexedSequentialSearch ( int arr [ ] , int n , int k ) { int elements [ ] = new int [ 20 ] ; int indices [ ] = new int [ 20 ] ; int j = 0 , ind = 0 ; for ( int i = 0 ; i < n ; i ++ ) { elements [ ind ++ ] = arr [ i ] ; indices [ ind ++ ] = i ; } if ( k < elements [ 0 ] ) { System . out . println ( " Not found " ) ; return ; } else { for ( int i = 1 ; i <= ind ; i ++ ) { if ( k < elements [ i ] ) { start = indices [ i - 1 ] ; end = indices [ i ] ; break ; } } for ( int i = start ; i <= end ; i ++ ) { if ( k == arr [ i ] ) { j = 1 ; break ; } } if ( j == 1 ) { System . out . println ( " Found at index " + i ) ; } else { System . out . println ( " Not found " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int k = 8 ; indexedSequentialSearch ( arr , n , k ) ; } }
public class GFG { static int larrgestPalindrome ( int n ) { int upper_limit = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { upper_limit = upper_limit * 10 ; upper_limit = upper_limit + 9 ; } int lower_limit = 1 + upper_limit / 10 ; int max_product = 0 ; for ( int i = upper_limit ; i >= 0 ; i -- ) { for ( int j = i ; j >= 0 ; j -- ) { int product = i * j ; if ( product < max_product ) { break ; } int number = product ; int reverse = 0 ; while ( number != 0 ) { reverse = reverse * 10 + number % 10 ; number = number / 10 ; } if ( product == reverse && product > max_product ) { max_product = product ; } } } return max_product ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( larrgestPalindrome ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ n - 1 ] ) { dp [ n - 1 ] = arr [ i ] ; } else { dp [ n - 1 ] = arr [ i ] ; } } System . out . println ( dp [ n - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int ans = 0 ; if ( a > 0 ) { a -- ; ans ++ ; } if ( b > 0 ) { b -- ; ans ++ ; } if ( c > 0 ) { c -- ; ans ++ ; } if ( a > 0 && b > 0 && c > 0 ) { ans ++ ; } System . out . println ( Math . min ( 7 , ans ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , Math . abs ( arr [ i ] - arr [ j + 1 ] ) ) ; } } System . out . println ( dp [ n - 1 ] [ 0 ] + Math . max ( dp [ n - 1 ] [ 1 ] , dp [ n - 2 ] [ 2 ] ) ) ; } }
import java . util . * ; public class GFG { static int maximumXor ( int arr [ ] , int n ) { Stack < Integer > sForward = new Stack < > ( ) ; Stack < Integer > sBackward = new Stack < > ( ) ; int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { while ( ! sForward . isEmpty ( ) && arr [ i ] < arr [ sForward . peek ( ) ] ) { ans = Math . max ( ans , arr [ i ] ^ arr [ sForward . peek ( ) ] ) ; sForward . pop ( ) ; } sForward . push ( i ) ; while ( ! sBackward . isEmpty ( ) && arr [ n - i - 1 ] < arr [ sBackward . peek ( ) ] ) { ans = Math . max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward . peek ( ) ] ) ; sBackward . pop ( ) ; } sBackward . push ( n - i - 1 ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 2 } ; int n = arr . length ; System . out . println ( maximumXor ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void decToHexa ( int n ) { int hexaDeciNum [ ] = new int [ 100 ] ; int i = 0 ; while ( n != 0 ) { int temp = 0 ; temp = n % 16 ; if ( temp < 10 ) { hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ; i ++ ; } else { hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ; i ++ ; } n = n / 16 ; } for ( int j = i - 1 ; j >= 0 ; j -- ) { System . out . print ( hexaDeciNum [ j ] + " " ) ; } } public static void main ( String [ ] args ) { int n = 2545 ; decToHexa ( n ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ sc . nextInt ( ) ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < ( 1 << n ) - 2 ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == i ) { cnt ++ ; } } if ( cnt > ans ) { ans = cnt ; } } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; if ( ( h | w ) == 0 ) { break ; } String [ ] s = new String [ h ] ; for ( int i = 0 ; i < h ; i ++ ) { s [ i ] = sc . next ( ) ; } int [ ] [ ] dp = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { dp [ i ] [ j ] = s [ i ] . substring ( j , j + 1 ) ; } } int ans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { ans += dp [ h - 1 ] [ i ] - dp [ h - 1 ] [ i ] + 1 ; } println ( ans ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n == 1 ) { System . out . println ( " Hello World " ) ; } else { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + b ) ; } } }
import java . util . * ; public class GFG { static int extractMaximum ( String ss ) { int num = 0 , res = 0 ; for ( int i = 0 ; i < ss . length ( ) ; i ++ ) { if ( ss . charAt ( i ) >= '0' && ss . charAt ( i ) <= '9' ) num = num * 10 + ( ss . charAt ( i ) - '0' ) ; else { res = Math . max ( res , num ) ; num = 0 ; } } return Math . max ( res , num ) ; } public static void main ( String [ ] args ) { String ss = "100klh564abc365bg " ; System . out . println ( extractMaximum ( ss ) ) ; } }
import java . util . * ; public class GFG { static int max = 50009 ; static void find_Indices ( int arr [ ] , int n ) { int sum [ ] = new int [ max ] ; int k = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum [ i ] = sum [ i - 1 ] + arr [ k ] ; k ++ ; } int ans = - ( 1e15 ) ; int index_1 = index_2 = index_3 = - 1 ; for ( int l = 0 ; l <= n ; l ++ ) { int index = 0 ; int vmin = ( int ) 1e15 ; for ( int r = l ; r <= n ; r ++ ) { if ( sum [ r ] < vmin ) { vmin = sum [ r ] ; index = r ; } if ( sum [ l ] + sum [ r ] - vmin > ans ) { ans = sum [ l ] + sum [ r ] - vmin ; index_1 = l ; index_2 = index ; index_3 = r ; } } } System . out . println ( index_1 + " " + index_2 + " " + index_3 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 1 , 2 , 3 } ; int n = arr . length ; find_Indices ( arr , n ) ; } }
public class GFG { static void printElements ( int arr [ ] , int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) { System . out . print ( arr [ i ] + " " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 1 , 5 , 4 , 9 , 8 , 7 , 5 } ; int n = arr . length ; printElements ( arr , n ) ; } }
import java . io . * ; public class GFG { static int valueofX ( int ar [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ar [ i ] ; } if ( sum % n == 0 ) { return sum / n ; } else { int A = sum / n ; int B = sum / n + 1 ; int ValueA = 0 , ValueB = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ValueA += ( ar [ i ] - A ) * ( ar [ i ] - A ) ; ValueB += ( ar [ i ] - B ) * ( ar [ i ] - B ) ; } if ( ValueA < ValueB ) { return A ; } else { return B ; } } } public static void main ( String [ ] args ) { int n = 7 ; int arr [ ] = { 6 , 9 , 1 , 6 , 1 , 3 , 7 } ; System . out . println ( valueofX ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] % 2 == 0 ) { cnt ++ ; } } if ( cnt > n ) { ans += 1 << i ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( n - 1 - i ) ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int findNth ( int n ) { int count = 0 , curr = 19 ; while ( true ) { int sum = 0 , x = curr ; while ( x > 0 ) { sum = sum + x % 10 ; x /= 10 ; } if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; curr += 9 ; } return - 1 ; } public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } }
import java . util . * ; public class GFG { static int findNth ( int n ) { int count = 0 ; for ( int curr = 0 ; ; curr ++ ) { int sum = 0 ; int x = curr ; while ( x > 0 ) { sum += x % 10 ; x /= 10 ; } if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; } } public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } }
public class GFG { static int countNumber ( int N , int S ) { int countElements = 0 ; int currentSum = 0 ; int currSum = 0 ; while ( currSum <= S ) { currSum += N ; N -- ; countElements ++ ; } return countElements ; } public static void main ( String [ ] args ) { int N = 5 , S = 11 ; int count = countNumber ( N , S ) ; System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static boolean strrmatch ( String str , String pattern , int n , int m ) { if ( m == 0 ) return ( n == 0 ) ; int [ ] [ ] lookup = new int [ n + 1 ] [ m + 1 ] ; lookup [ 0 ] [ 0 ] = true ; for ( int j = 1 ; j <= m ; j ++ ) { if ( pattern . charAt ( j - 1 ) == ' * ' ) lookup [ 0 ] [ j ] = lookup [ 0 ] [ j - 1 ] ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( pattern . charAt ( j - 1 ) == ' * ' ) { lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] || lookup [ i - 1 ] [ j ] ; } else if ( pattern . charAt ( j - 1 ) == ' ? ' || str . charAt ( i - 1 ) == pattern . charAt ( j - 1 ) ) { lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] ; } else { lookup [ i ] [ j ] = false ; } } } return lookup [ n ] [ m ] ; } public static void main ( String [ ] args ) { String str = " baaabab " ; String pattern = " * * * * * ba * * * * * ab " ; if ( strrmatch ( str , pattern , str . length ( ) , pattern . length ( ) ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( ( a | b ) == 0 ) { break ; } int max = 0 ; for ( int i = 2 ; i * i <= a ; i ++ ) { while ( a % i == 0 ) { a /= i ; } max = max ( max , i ) ; } if ( max == 1 ) { println ( " a " ) ; } else if ( max == 2 ) { println ( " b " ) ; } else { println ( " a " ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static double nCr ( int n , int r ) { double fac [ ] = new double [ n + 1 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i ; double ans = fac [ n ] / ( fac [ n - r ] * fac [ r ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 , k = 3 ; double ans = nCr ( n + k - 1 , k ) + nCr ( k - 1 , n - 1 ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; max = Math . max ( max , arr [ i ] ) ; } System . out . println ( max + " " + max ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int powGCD ( int a , int n , int b ) { for ( int i = 0 ; i <= n ; i ++ ) a = a * a ; return gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 5 , n = 2 ; System . out . println ( powGCD ( a , n , b ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ a [ i ] ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { c [ a [ i ] ] += c [ i - 1 ] ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { c [ a [ i ] ] -- ; c [ a [ i ] ] -- ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( c [ i ] + " " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '8' ) cnt ++ ; } System . out . println ( Math . min ( n / 11 , cnt ) ) ; } }
public class GFG { static int sumOfDigit ( int n , int b ) { int unitDigit = 0 , sum = 0 ; while ( n > 0 ) { unitDigit = n % b ; sum += unitDigit ; n = n / b ; } return sum ; } public static void main ( String [ ] args ) { int n = 50 , b = 2 ; System . out . println ( sumOfDigit ( n , b ) ) ; } }
import java . util . * ; public class GFG { static void printLargestDivisible ( int n , int a [ ] ) { int c0 = 0 , c5 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) c0 ++ ; else c5 ++ ; } c5 = ( int ) Math . floor ( c5 / 9 ) * 9 ; if ( c0 == 0 ) System . out . print ( - 1 + " " ) ; else if ( c5 == 0 ) System . out . print ( 0 + " " ) ; else { for ( int i = 0 ; i < c5 ; i ++ ) System . out . print ( 5 + " " ) ; for ( int i = 0 ; i < c0 ; i ++ ) System . out . print ( 0 + " " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 0 , 5 , 5 } ; int n = a . length ; printLargestDivisible ( n , a ) ; } }
public class GFG { static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { for ( int k = j ; k < n ; k ++ ) { for ( int l = k ; l < n ; l ++ ) { if ( i + j + k + l == n ) counter ++ ; } } } } return counter ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }
import java . io . * ; public class GFG { static int numberOfMinutes ( int S , int S1 ) { int Min = 0 ; Min = ( S - S1 ) / ( Math . floor ( S ) ) * 60 ; return Min ; } public static void main ( String [ ] args ) { int S = 30 , S1 = 10 ; System . out . println ( numberOfMinutes ( S , S1 ) + " min " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int ans = n ; for ( int i = 0 ; i < n - k ; i ++ ) { ans += a [ i ] - b [ i ] ; } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int onesComplement ( int n ) { int number_of_bits = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) + 1 ; return ( 1 << number_of_bits ) - 1 ^ n ; } public static void main ( String [ ] args ) { int n = 22 ; System . out . println ( onesComplement ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int count = 0 ; if ( w % 2 == 0 && h % 2 == 0 ) { count = 1 ; } else if ( w % 2 == 0 && h % 2 == 0 ) { count = 2 ; } else if ( w % 2 == 1 && h % 2 == 1 ) { count = 1 ; } else if ( h % 2 == 0 && w % 2 == 0 ) { count = 2 ; } else if ( w % 2 == 1 && h % 2 == 1 ) { count = 1 ; } else if ( h % 2 == 0 && w % 2 == 0 ) { count = 0 ; } else if ( w % 2 == 1 && h % 2 == 1 ) { count = 1 ; } else if ( h % 2 == 0 && w % 2 == 1 ) { count = 1 ; } else if ( h % 2 == 0 && w % 2 == 1 ) { count = 0 ; } else if ( w % 2 == 0 && w % 2 == 1 ) { count = 1 ; } else if ( w % 2 == 1 && h % 2 == 0 ) { count = 1 ; } else if ( h % 2 == 0 && w % 2 == 1 ) { count = 1 ; } else if ( w % 2 == 0 && h % 2 == 1 ) { count = 0 ; } else if ( h % 2 == 0 && w % 2 == 1 ) { count = 1 ; } else if ( w % 2 == 0 && h % 2 == 1 ) { count = 1 ; } else if ( h % 2 == 0 && w % 2 == 1 ) { count = 0 ; } else if ( h % 2 == 0 && w % 2 == 1 ) { count = 1 ; } else if ( w % 2 == 0 && h % 2 == 1 ) { count = 1 ; } System . out . println ( count ) ; } } }
public class GFG { static void findPoint ( int x1 , int y1 , int x2 , int y2 ) { System . out . println ( " ( " + 2 * x2 - x1 + " , " + 2 * y2 - y1 + " ) " ) ; } public static void main ( String [ ] args ) { int x1 = 0 , y1 = 0 ; int x2 = 1 , y2 = 1 ; findPoint ( x1 , y1 , x2 , y2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int min = Math . min ( a , n - a ) ; int max = Math . max ( b , n - b ) ; if ( min % 3 == 0 && max % 3 == 0 ) { System . out . println ( min + 1 ) ; } else if ( min % 3 == 1 && max % 3 == 1 ) { System . out . println ( min + 1 ) ; } else if ( min % 3 == 2 && max % 3 == 2 ) { System . out . println ( min + 2 ) ; } else if ( min % 3 == 3 && max % 3 == 1 ) { System . out . println ( min + 1 ) ; } else if ( min % 3 == 0 && max % 3 == 0 ) { System . out . println ( min + 2 ) ; } else if ( min % 3 == 1 && max % 3 == 2 ) { System . out . println ( min + 1 ) ; } } } }
import java . util . * ; public class GFG { static void alter ( int x , int y ) { while ( true ) { if ( x == 0 || y == 0 ) break ; if ( x >= 2 * y ) x = x % ( 2 * y ) ; else if ( y >= 2 * x ) y = y % ( 2 * x ) ; else break ; } System . out . println ( " X = " + x + " , " + " Y = " + y ) ; } public static void main ( String [ ] args ) { int x = 12 , y = 5 ; alter ( x , y ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 2 ; int [ ] pos = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pos [ arr [ i ] ] = i ; } for ( int i = 0 ; i < n ; i ++ ) { int [ ] dp = new int [ n ] ; Arrays . fill ( dp , - 1 ) ; dp [ i ] = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( dp [ j ] == - 1 ) continue ; int a = arr [ j ] ; int b = arr [ j ] - pos [ a ] ; int c = dp [ j ] + 1 ; dp [ j ] = Math . max ( dp [ j ] , c ) ; } ans = Math . max ( ans , dp [ n - 1 ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; boolean flag = false ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' a ' ) { flag = true ; break ; } } if ( flag == false ) { System . out . println ( i + 1 + " " + j ) ; break ; } } if ( flag == false ) { System . out . println ( - 1 - 1 ) ; } } } }
public class GFG { static int mod = 1000000007 ; static int inv2 = 500000004 ; static int modulo ( int num ) { int res = 0 ; for ( int i = 0 ; i < num ; i ++ ) res = ( res * 10 + num - 0 ) % mod ; return res ; } static int findSum ( int L , int R ) { int a = modulo ( L ) ; int b = modulo ( R ) ; int l = ( a * ( a - 1 ) ) % mod * inv2 ; int r = ( b * ( b + 1 ) ) % mod * inv2 ; int ret = ( r % mod - l % mod ) ; if ( ret < 0 ) ret = ret + mod ; else ret = ret % mod ; return ret ; } public static void main ( String [ ] args ) { int L = "88949273204" , R = "98429729474298592" ; System . out . println ( findSum ( L , R ) ) ; } }
import java . util . * ; public class GFG { static void unsort ( int l , int r , int a [ ] , int k ) { if ( k < 1 || l + 1 == r ) return ; k -- ; int mid = ( l + r ) / 2 ; int temp = a [ mid - 1 ] ; a [ mid - 1 ] = a [ mid ] ; a [ mid ] = temp ; unsort ( l , mid , a , k ) ; unsort ( mid , r , a , k ) ; } static void arrayWithKCalls ( int n , int k ) { if ( k % 2 == 0 ) { System . out . println ( " NO SOLUTION " ) ; return ; } int a [ ] = new int [ n + 2 ] ; a [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) a [ i ] = i + 1 ; k -- ; unsort ( 0 , n , a , k ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( a [ i ] + " " ) ; } public static void main ( String [ ] args ) { int n = 10 , k = 17 ; arrayWithKCalls ( n , k ) ; } }
import java . util . * ; public class GFG { static double mean ( int mid [ ] , int freq [ ] , int n ) { int sum = 0 , freqSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + mid [ i ] * freq [ i ] ; freqSum = freqSum + freq [ i ] ; } return sum / freqSum ; } static double groupedSD ( int lower_limit [ ] , int upper_limit [ ] , int freq [ ] , int n ) { int mid [ ] = new int [ n ] ; int sum = 0 , freqSum = 0 ; double sd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mid [ i ] = ( lower_limit [ i ] + upper_limit [ i ] ) / 2 ; sum = sum + freq [ i ] * mid [ i ] * mid [ i ] ; freqSum = freqSum + freq [ i ] ; } sd = Math . sqrt ( ( sum - freqSum * mean ( mid , freq , n ) * mean ( mid , freq , n ) ) / ( freqSum - 1 ) ) ; return sd ; } public static void main ( String [ ] args ) { int lower_limit [ ] = { 50 , 61 , 71 , 86 , 96 } ; int upper_limit [ ] = { 60 , 70 , 85 , 95 , 100 } ; int freq [ ] = { 9 , 7 , 9 , 12 , 8 } ; int n = lower_limit . length ; System . out . println ( groupedSD ( lower_limit , upper_limit , freq , n ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 ; System . out . println ( gcd ( a , b ) ) ; } }
public class GFG { static int rectanglearea ( int a , int b ) { if ( a < 0 || b < 0 ) return - 1 ; return 2 * a * b ; } public static void main ( String [ ] args ) { int a = 10 , b = 8 ; System . out . println ( rectanglearea ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int count = 0 ; while ( l > 0 && r > 0 ) { l -- ; r -- ; count ++ ; } if ( n % l == 0 && ( n / l ) * r >= n ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
import java . io . * ; public class GFG { static int getsum ( int x ) { return ( x * ( x + 1 ) ) / 2 ; } static int countJumps ( int n ) { n = Math . abs ( n ) ; int ans = 0 ; while ( getsum ( ans ) < n || ( getsum ( ans ) - n ) % 2 == 1 ) ans ++ ; return ans ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( countJumps ( n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 10 ; static int lcs ( int dp [ ] [ ] , int arr1 [ ] , int n , int arr2 [ ] , int m , int k ) { if ( k < 0 ) return - ( Integer . MAX ) ; if ( n < 0 || m < 0 ) return 0 ; int ans = dp [ n ] [ m ] [ k ] ; if ( ans != - 1 ) return ans ; ans = Math . max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lcs ( dp , arr1 , n , arr2 , m - 1 , k ) ) ; if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) ans = Math . max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ) ; ans = Math . max ( ans , lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k - 1 ) ) ; return ans ; } public static void main ( String [ ] args ) { int k = 1 ; int arr1 [ ] = { 1 , 2 , 3 , 4 , 5 } ; int arr2 [ ] = { 5 , 3 , 1 , 4 , 2 } ; int n = arr1 . length ; int m = arr2 . length ; int dp [ ] [ ] = new int [ MAX ] [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) for ( int j = 0 ; j < MAX ; j ++ ) dp [ i ] [ j ] = - 1 ; System . out . println ( lcs ( dp , arr1 , n , arr2 , m , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i * d ; ans += ( ( n - i ) / ( 2 * d ) ) * x ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void Reverseorder ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } for ( int p = n ; p >= 1 ; p -- ) { if ( prime [ p ] ) System . out . print ( p + " " ) ; } } public static void main ( String [ ] args ) { int N = 25 ; System . out . println ( " Prime number in reverse order " ) ; if ( N == 1 ) System . out . println ( " No prime no exist in this range " ) ; else { Reverseorder ( N ) ; } } }
import java . util . * ; public class GFG { static void pattern ( int min_stars , int p_height ) { int p_space = p_height - 1 , x = 1 ; for ( int i = 0 ; i < p_height ; i ++ ) { for ( int j = p_space ; j > i ; j -- ) System . out . print ( " " ) ; for ( int k = 0 ; k < min_stars ; k ++ ) System . out . print ( " * " ) ; for ( int n = ( p_height + p_height - 2 ) , x - 1 ; x -- ) System . out . print ( " " ) ; for ( int k = 0 ; k < min_stars ; k ++ ) System . out . print ( " * " ) ; min_stars = min_stars + 2 ; x = x + 2 ; System . out . println ( ) ; } } public static void main ( String [ ] args ) { int min_stars = 1 , p_height = 5 ; pattern ( min_stars , p_height ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int minDay = 0 ; int maxDay = 366 ; int [ ] [ ] students = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { students [ i ] [ 0 ] = sc . nextInt ( ) ; students [ i ] [ 1 ] = sc . nextInt ( ) ; students [ i ] [ 2 ] = sc . nextInt ( ) ; } int cnt = 0 ; for ( int i = minDay ; i <= maxDay ; i ++ ) { for ( int j = 0 ; j < students [ i ] . length ; j ++ ) { if ( students [ i ] [ j ] == students [ i ] [ j ] ) { cnt ++ ; } } } System . out . println ( cnt ) ; } }
public class GFG { static int distancesum ( int x [ ] , int y [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { sum += Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ; } } return sum ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( distancesum ( x , y , n ) ) ; } }
import java . io . * ; public class GFG { static int MAX = 1000000 ; static int fib ( int n ) { int phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } static int sumFibonacci ( int k ) { int l = ( k * ( k - 1 ) ) / 2 ; int r = l + k ; int sum = calculateSum ( l , r - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int k = 3 ; System . out . println ( sumFibonacci ( k ) ) ; } }
public class GFG { static int fib ( int n ) { int phi = ( ( 1 + ( Math . pow ( 5 , 1 / 2 ) ) ) / 2 ) ; return ( int ) Math . round ( ( Math . pow ( phi , n ) ) / ( Math . pow ( 5 , 1 / 2 ) ) ) ; } static int calculateSum ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) sum += fib ( i ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }
import java . io . * ; public class GFG { static int fib ( int n ) { int phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) Math . round ( Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { int sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; if ( arr [ a ] . equals ( arr [ b ] ) ) { arr [ b ] = s ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } }
public class GFG { static int compareStrings ( String str1 , String str2 ) { int i = 0 ; while ( i < str1 . length ( ) - 1 && str1 . charAt ( i ) == str2 . charAt ( i ) ) i ++ ; if ( str1 . charAt ( i ) > str2 . charAt ( i ) ) return - 1 ; return str1 . charAt ( i ) < str2 . charAt ( i ) ; } static int searchStr ( String arr [ ] , String str , int first , int last ) { if ( first > last ) return - 1 ; int mid = ( last + first ) / 2 ; if ( arr [ mid ] == 0 ) { int left = mid - 1 , right = mid + 1 ; while ( left < first && right > last ) { return - 1 ; } if ( right <= last && arr [ right ] != 0 ) { mid = right ; break ; } if ( left >= first && arr [ left ] != 0 ) { mid = left ; break ; } right ++ ; left -- ; } if ( compareStrings ( str , arr [ mid ] ) == 0 ) return mid ; if ( compareStrings ( str , arr [ mid ] ) < 0 ) return searchStr ( arr , str , first , mid + 1 , last ) ; return searchStr ( arr , str , first , mid - 1 ) ; } public static void main ( String [ ] args ) { String arr [ ] = { " for " , " " , " " , " geeks " , " ide " , " " , " quiz " , " " , " " } ; String str = " quiz " ; int n = arr . length ; System . out . println ( searchStr ( arr , str , 0 , n - 1 ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int a = sc . nextInt ( ) , b = sc . nextInt ( ) ; out . println ( a + b ) ; out . flush ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int ax = sc . nextInt ( ) ; int ay = sc . nextInt ( ) ; int bx = sc . nextInt ( ) ; int by = sc . nextInt ( ) ; int cx = sc . nextInt ( ) ; int cy = sc . nextInt ( ) ; int bx_x = bx ; int by_x = by ; int bx_y = bx ; int by_y = by ; int cx_x = cx - ax ; int cy_y = cy - ay ; System . out . println ( bx_x + bx_y + by_x + " " + cx_y + " " + cy_x ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] arr = s . toCharArray ( ) ; Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] != arr [ i ] ) { count ++ ; } } System . out . println ( count ) ; } } }
public class GFG { static int sumAP ( int n , int d ) { n = n / d ; return ( n ) * ( 1 + n ) * ( d / 2 ) ; } static int sumMultiples ( int n ) { n -- ; return ( int ) ( sumAP ( n , 2 ) + sumAP ( n , 5 ) - sumAP ( n , 10 ) ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( sumMultiples ( n ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int t = sc . nextInt ( ) ; if ( t == 0 ) break ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int s = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; t -= f - s ; } if ( t > 0 ) System . out . println ( " OK " ) ; else System . out . println ( t ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
public class GFG { static int fact ( int num ) { int fact = 1 ; while ( num > 1 ) { fact = fact * num ; num -- ; } return fact ; } static int catalan ( int n ) { return fact ( 2 * n ) / ( fact ( n ) * fact ( n + 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int k = 0 ; k < n ; k ++ ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ k ] ) s ++ ; } int catalan_leftBST = catalan ( s ) ; int catalan_rightBST = catalan ( n - s - 1 ) ; int totalBST = catalan_rightBST * catalan_leftBST ; System . out . print ( totalBST + " " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a - b == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > b ) { if ( a % 2 == 0 && b % 2 == 0 ) System . out . println ( 0 ) ; else System . out . println ( 1 ) ; } else if ( a % 2 == 0 && b % 2 == 0 ) System . out . println ( 1 ) ; else if ( a % 2 == 0 && b % 2 == 0 ) System . out . println ( 0 ) ; else System . out . println ( 1 ) ; } } }
import java . util . * ; public class GFG { static int countWays ( int n , int arr [ ] ) { int count [ ] = new int [ n + 1 ] ; count [ 0 ] = 1 ; if ( n == 0 ) return 1 ; for ( int i = 1 ; i <= n ; i ++ ) { int no_ways = 0 ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( i - j >= 0 ) no_ways += count [ i - j ] ; count [ i ] = no_ways ; } } return count [ n ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 } ; int n = 5 ; System . out . println ( countWays ( n , arr ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int L = sc . nextInt ( ) ; if ( L == 0 ) { break ; } int sum = 0 ; for ( int i = 0 ; i < 12 ; i ++ ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; sum += m - n ; } if ( sum >= L ) { println ( " NA " ) ; } else { println ( sum ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( c > a ) { int tmp = c ; c = a ; a = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( b > c ) { int tmp = c ; c = a ; a = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( a > c ) { int tmp = a ; a = b ; b = tmp ; } if ( b > c ) { int tmp = c ; c = a ; a = b ; b = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( b > c ) { int tmp = a ; a = b ; b = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( b > c ) { int tmp = c ; c = a ; a = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } if ( a > b ) { int tmp = a ; a = b ; b = tmp ; } System . out . println ( a * 2 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= b ) { sum += arr [ i ] ; } else { sum = 0 ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int binarySearch ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; if ( key == arr [ mid ] ) return mid ; if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return binarySearch ( arr , low , ( mid - 1 ) , key ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int key = 10 ; System . out . println ( " Index : " + binarySearch ( arr , 0 , n , key ) ) ; } }
public class GFG { static void equal_xor_sum ( int arr [ ] , int n ) { int sum = 0 , Xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum = sum + arr [ i ] ; Xor = Xor ^ arr [ i ] ; } if ( sum == Xor ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 7 , 10 } ; int n = arr . length ; equal_xor_sum ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] h = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < h . length ; i ++ ) { h [ i ] [ 0 ] = sc . nextInt ( ) ; h [ i ] [ 1 ] = sc . nextInt ( ) ; } int ans = 1 ; for ( int i = 0 ; i < k ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( h [ x ] [ 0 ] == h [ y ] [ 0 ] && h [ x ] [ 1 ] == h [ y ] [ 1 ] ) { ans = Math . min ( ans , x ) ; } } System . out . println ( ans ) ; } }
public class GFG { static void findPairs ( int arr [ ] , int n ) { int cntEven = 0 , cntOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) cntEven ++ ; else cntOdd ++ ; } int evenPairs = 0 ; evenPairs += ( ( cntEven * ( cntEven - 1 ) ) / 2 ) ; evenPairs += ( ( cntOdd * ( cntOdd - 1 ) ) / 2 ) ; int oddPairs = 0 ; oddPairs += ( cntEven * cntOdd ) ; System . out . println ( " Odd pairs = " + oddPairs ) ; System . out . println ( " Even pairs = " + evenPairs ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; findPairs ( arr , n ) ; } }
import java . util . * ; public class GFG { static int minBroadcastRange ( int houses [ ] , int towers [ ] , int n , int m ) { int leftTower = Integer . MIN_VALUE , rightTower = Integer . MIN_VALUE ; int j = 0 , k = 0 ; int min_range = 0 ; while ( j < n ) { if ( houses [ j ] < rightTower ) { int left = houses [ j ] - leftTower ; int right = rightTower - houses [ j ] ; if ( left < right ) { int local_max = left ; } else { int local_max = right ; } if ( local_max > min_range ) { min_range = local_max ; } j ++ ; } else { leftTower = towers [ k ] ; if ( k < m - 1 ) { k ++ ; rightTower = towers [ k ] ; } else { rightTower = Integer . MIN_VALUE ; } } } return min_range ; } public static void main ( String [ ] args ) { int a [ ] = { 12 , 13 , 11 , 80 } ; int b [ ] = { 4 , 6 , 15 , 60 } ; int n = a . length ; int m = b . length ; int max = minBroadcastRange ( a , b , n , m ) ; System . out . println ( max ) ; } }
import java . io . * ; public class GFG { static int getRemainder ( int num , int divisor ) { return ( num - divisor * ( num / divisor ) ) ; } public static void main ( String [ ] args ) { int num = 100 , divisor = 7 ; System . out . println ( getRemainder ( num , divisor ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = i ; } for ( int i = 1 ; i <= m ; i ++ ) { arr [ i ] = i ; } int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i ] != arr [ i - 1 ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; double EPS = 1e-10 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( ( m | n ) == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; solve ( a ) ; } } void solve ( int [ ] a ) { int l = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; int r = l ; int mid = l + ( r - l ) / 2 ; if ( check ( a , mid ) ) l = mid + 1 ; else r = mid ; while ( l <= r ) { int m = ( l + r ) / 2 ; if ( check ( a , m ) ) r = mid + 1 ; else l = mid + 1 ; } System . out . println ( l ) ; } boolean check ( int [ ] a , int m ) { int l = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ; int r = Arrays . stream ( a ) . min ( ) . getAsInt ( ) ; return l <= r ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; double [ ] [ ] dp = new double [ n ] [ 2 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { dp [ i ] [ 0 ] = sc . nextInt ( ) ; dp [ i ] [ 1 ] = sc . nextInt ( ) ; } Arrays . sort ( dp , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ; double ans = 0 ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] [ 0 ] > 0 ) { ans += dp [ i ] [ 0 ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int getSingle ( int arr [ ] , int n ) { int ones = 0 , twos = 0 ; for ( int i = 0 ; i < n ; i ++ ) { twos = twos | ( ones & arr [ i ] ) ; ones = ones ^ arr [ i ] ; int common_bit_mask = ~ ( ones & twos ) ; ones &= common_bit_mask ; twos &= common_bit_mask ; } return ones ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( " The element with single occurrence is " + getSingle ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int maxdiff ( int arr [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( arr [ i ] , freq . get ( arr [ i ] ) == null ? 0 : freq . get ( arr [ i ] ) + 1 ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ] ) && arr [ i ] > arr [ j ] ) { ans = Math . max ( ans , freq . get ( arr [ i ] ) - freq . get ( arr [ j ] ) ) ; } else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ j ] ) && arr [ i ] < arr [ j ] ) { ans = Math . max ( ans , freq . get ( arr [ j ] ) - freq . get ( arr [ i ] ) ) ; } } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 3 , 2 , 3 , 2 } ; int n = arr . length ; System . out . println ( maxdiff ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] < 0 ) { min = Math . min ( min , arr [ i ] [ j ] ) ; ans += Math . abs ( arr [ i ] [ j ] ) ; } else { ans += Math . min ( arr [ i ] [ j ] , min ) ; } } } if ( min % 2 == 0 ) { System . out . println ( ans ) ; } else { System . out . println ( ans - min * 2 ) ; } } } }
import java . util . * ; public class GFG { static void makeAP ( int arr [ ] , int n ) { int initial_term , common_difference ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else if ( ( arr [ 1 ] - arr [ 0 ] ) == ( arr [ 2 ] - arr [ 1 ] ) ) { initial_term = arr [ 0 ] ; common_difference = arr [ 1 ] - arr [ 0 ] ; } else if ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else { common_difference = ( arr [ 3 ] - arr [ 0 ] ) / 3 ; initial_term = arr [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( initial_term + ( i * common_difference ) + " " ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 7 } ; int n = arr . length ; makeAP ( arr , n ) ; } }
public class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) for ( int y = x + 1 ; y <= n ; y ++ ) if ( ( y + x ) % ( y ^ x ) == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countPairs ( n ) ) ; } }
public class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x < n ; x ++ ) for ( int y = x + 1 ; y < n ; y ++ ) if ( ( y * x ) % ( y + x ) == 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( countPairs ( n ) ) ; } }
import java . util . * ; public class Solution { public int longestPalindrome ( String s ) { int ans = 0 ; HashMap < Character , Integer > charMap = new HashMap < > ( ) ; for ( char c : s . toCharArray ( ) ) { if ( charMap . containsKey ( c ) ) { charMap . put ( c , charMap . get ( c ) + 1 ) ; } else { charMap . put ( c , 1 ) ; } charMap . put ( c , charMap . get ( c ) - 1 ) ; } for ( Character c : charMap . keySet ( ) ) { if ( charMap . get ( c ) % 2 == 0 ) { ans += charMap . get ( c ) ; charMap . remove ( c ) ; } else { ans += charMap . get ( c ) / 2 * 2 ; } } if ( charMap . size ( ) != 0 ) ans += charMap . get ( ' a ' ) ; return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " abccccdd " ; int out = sObj . longestPalindrome ( s ) ; System . out . println ( out ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; i ++ ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; } static int catalan ( int n ) { int c = binomialCoeff ( 2 * n , n ) ; return c / ( n + 1 ) ; } static int findWays ( int n ) { if ( n % 2 == 1 ) return 0 ; return catalan ( n / 2 ) ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( " Total possible expressions of length " + n + " is " + findWays ( 6 ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int a = in . nextInt ( ) , b = in . nextInt ( ) ; int [ ] ans = new int [ 12 ] ; for ( int i = 0 ; i < 12 ; i ++ ) { if ( i % 2 == 0 ) { ans [ i ] = a ; } else { ans [ i ] = b ; } } int cnt = 0 ; for ( int i = 0 ; i < 12 ; i ++ ) { if ( ans [ i ] == 0 ) { cnt ++ ; } } out . println ( cnt ) ; for ( int i = 0 ; i < 12 ; i ++ ) { if ( ans [ i ] == 0 ) { out . print ( " O " + i + " " ) ; } else { out . print ( ans [ i ] + " " ) ; } } out . flush ( ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int da = sc . nextInt ( ) ; int db = sc . nextInt ( ) ; boolean flag = true ; for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < t ; j ++ ) { if ( a - da * i + b - db * j == d || a - da * i == d || b - db * j == d ) { flag = false ; break ; } } } if ( flag == true ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static boolean isSumOfPowersOfTwo ( int n ) { if ( n % 2 == 1 ) return false ; else return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isSumOfPowersOfTwo ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int countNumber ( int n ) { int result = 0 ; for ( int i = 1 ; i <= 10 ; i ++ ) { Stack < Integer > s = new Stack < Integer > ( ) ; if ( i <= n ) { s . add ( i ) ; result ++ ; } while ( ! s . isEmpty ( ) ) { int tp = s . peek ( ) ; s . pop ( ) ; for ( int j = tp % 10 ; j <= 10 ; j ++ ) { int x = tp * 10 + j ; if ( x <= n ) { s . add ( x ) ; result ++ ; } } } } return result ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( countNumber ( n ) ) ; } }
import java . util . * ; public class GFG { static int M = 100 ; static double maxAverageOfPath ( int cost [ ] [ ] , int N ) { int dp [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( int i = 1 ; i < N ; i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( int j = 1 ; j < N ; j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ; for ( int i = 1 ; i < N ; i ++ ) for ( int j = 1 ; j < N ; j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; return dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ; } public static void main ( String [ ] args ) { int cost [ ] [ ] = { { 1 , 2 , 3 } , { 6 , 5 , 4 } , { 7 , 3 , 9 } } ; System . out . println ( maxAverageOfPath ( cost , 3 ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static int sieve_Prime [ ] = new int [ MAX + 4 ] ; static int sieve_count [ ] = new int [ MAX + 4 ] ; static void form_sieve ( ) { sieve_Prime [ 1 ] = 1 ; for ( int i = 2 ; i <= MAX ; i ++ ) { if ( sieve_Prime [ i ] == 0 ) { for ( int j = i * 2 ; j <= MAX ; j += i ) { if ( sieve_Prime [ j ] == 0 ) { sieve_Prime [ j ] = 1 ; sieve_count [ i ] ++ ; } } } } form_sieve ( ) ; int n = 2 ; System . out . println ( " Count = " + sieve_count [ n ] + 1 ) ; n = 3 ; System . out . println ( " Count = " + sieve_count [ n ] + 1 ) ; } public static void main ( String [ ] args ) { form_sieve ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int u = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; double sum = 0 ; int i = 0 ; double sum2 = 0 ; int j = 0 ; for ( i = 0 ; i < n ; i ++ ) { int d = sc . nextInt ( ) ; if ( d == l ) { sum2 = sum ; j = 0 ; } else { if ( j == 0 ) { sum2 = sum ; i = 0 ; } else { sum2 = sum2 + d ; j = 0 ; } } sum += d ; sum2 = sum2 ; } System . out . println ( sum2 / u ) ; } }
import java . util . * ; public class GFG { static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; int [ ] prefix = new int [ n ] ; int [ ] suffix = new int [ n ] ; int [ ] seen = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int prev = ( i > 0 ) ? prefix [ i - 1 ] : 0 ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { prefix [ i ] += ( prev + 1 ) ; } else { prefix [ i ] = prev ; } seen [ s . charAt ( i ) - ' a ' ] = 1 ; } seen = new int [ 26 ] ; suffix [ n - 1 ] = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int prev = suffix [ i ] ; if ( seen [ s . charAt ( i ) - ' a ' ] == 0 ) { suffix [ i ] += ( prev + 1 ) ; } else { suffix [ i ] = prev ; } seen [ s . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prefix [ i ] == suffix [ i ] ) { answer ++ ; } } return answer ; } public static void main ( String [ ] args ) { String s = " ababa " ; System . out . println ( waysToSplit ( s ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int TURNS = 15 ; public String run ( ) { int [ ] [ ] ways = new int [ TURNS ] [ ] ; for ( int i = 1 ; i <= TURNS ; i ++ ) { for ( int j = 0 ; j <= i ; j ++ ) { int temp = 0 ; if ( j < i ) temp = ways [ i - 1 ] [ j ] * i ; if ( j > 0 ) temp += ways [ i - 1 ] [ j - 1 ] ; ways [ i ] [ j ] = temp ; } ways [ i ] [ i ] = 1 ; } int numer = 0 ; for ( int i = TURNS / 2 + 1 ; i <= TURNS ; i ++ ) numer += ways [ TURNS ] [ i ] ; int denom = factorial ( TURNS + 1 ) ; return Integer . toString ( denom / numer ) ; } private static int factorial ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) result += ways [ i ] [ n ] ; return result ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] t = new int [ n ] ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { if ( t [ i ] == 1 ) { int j = i ; while ( c [ j ] == 1 ) { c [ j ] = c [ j - 1 ] + 1 ; j = j - 1 ; } if ( j > 0 ) { c [ j ] = c [ j - 1 ] + 1 ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math . max ( ans , c [ i ] ) ; } System . out . println ( ans ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void merge ( int ar1 [ ] , int ar2 [ ] , int m , int n ) { for ( int i = n - 1 ; i >= 0 ; i -- ) { int last = ar1 [ m - 1 ] ; int j = m - 2 ; while ( j >= 0 && ar1 [ j ] > ar2 [ i ] ) { ar1 [ j + 1 ] = ar1 [ j ] ; j -- ; } if ( j != m - 2 || last > ar2 [ i ] ) { ar1 [ j + 1 ] = ar2 [ i ] ; ar2 [ i ] = last ; } } } public static void main ( String [ ] args ) { int ar1 [ ] = { 1 , 5 , 9 , 10 , 15 , 20 } ; int ar2 [ ] = { 2 , 3 , 8 , 13 } ; int m = ar1 . length ; int n = ar2 . length ; merge ( ar1 , ar2 , m , n ) ; System . out . println ( " After Merging \n First Array : " ) ; System . out . println ( ar1 ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int sameRemainder ( int a , int b , int c ) { int a1 = ( b - a ) ; int b1 = ( c - b ) ; int c1 = ( c - a ) ; return gcd ( a1 , gcd ( b1 , c1 ) ) ; } public static void main ( String [ ] args ) { int a = 62 , b = 132 , c = 237 ; System . out . println ( sameRemainder ( a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ 3 ] ; arr [ 0 ] = a ; arr [ 1 ] = b ; arr [ 2 ] = c ; Arrays . sort ( arr ) ; int sum = 0 ; if ( a - b >= 0 ) { sum += a - b ; arr [ 0 ] = a ; } if ( a - b >= 0 ) { sum += b - c ; arr [ 1 ] = b ; arr [ 2 ] = c ; } if ( c - d >= 0 ) { sum += c - d ; arr [ 2 ] = c ; arr [ 3 ] = d ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int dp [ ] [ ] [ ] = new int [ 501 ] [ 501 ] [ 501 ] ; static int countWaysUtil ( int n , int parts , int nextPart ) { if ( parts == 0 && n == 0 ) return 1 ; if ( n <= 0 || parts <= 0 ) return 0 ; if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) return dp [ n ] [ nextPart ] [ parts ] ; int ans = 0 ; for ( int i = nextPart ; i <= n ; i ++ ) ans += countWaysUtil ( n - i , parts - 1 , i ) ; dp [ n ] [ nextPart ] [ parts ] = ans ; return ( ans ) ; } static int countWays ( int n ) { return countWaysUtil ( n , 4 , 1 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }
public class GFG { static int find_k ( int a , int b ) { if ( ( a + b ) % 2 == 0 ) return ( ( a + b ) / 2 ) ; return - 1 ; } public static void main ( String [ ] args ) { int a = 2 , b = 16 ; System . out . println ( find_k ( a , b ) ) ; } }
import java . util . * ; public class GFG { static int mod = 1000000007 ; static int exactSum ( int x , int y , int z ) { int ans = 0 ; int [ ] [ ] [ ] dp = new int [ x + 1 ] [ y + 1 ] [ z + 1 ] ; dp [ 0 ] [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i <= x ; i ++ ) { for ( int j = 0 ; j <= y ; j ++ ) { for ( int k = 0 ; k <= z ; k ++ ) { if ( i > 0 ) { dp [ i ] [ j ] [ k ] += ( exactSum ( i - 1 , j , k ) * 10 + 4 * dp [ i - 1 ] [ j ] [ k ] ) % mod ; dp [ i ] [ j ] [ k ] += dp [ i - 1 ] [ j ] [ k ] ; ans %= mod ; } if ( j > 0 ) { dp [ i ] [ j ] [ k ] += ( exactSum ( i - 1 , j , k ) * 10 + 5 * dp [ i ] [ j - 1 ] [ k ] ) % mod ; ans %= mod ; } } } } return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 1 , z = 1 ; System . out . println ( exactSum ( x , y , z ) ) ; } }
import java . util . * ; public class GFG { static int CHARS = 26 ; static boolean isValidString ( String str ) { int freq [ ] = new int [ CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } int freq1 = 0 , count_freq1 = 0 ; for ( int i = 0 ; i < CHARS ; i ++ ) { if ( freq [ i ] != 0 ) { freq1 = freq [ i ] ; count_freq1 = 1 ; break ; } } int freq2 = 0 , count_freq2 = 0 ; for ( int j = i + 1 ; j < CHARS ; j ++ ) { if ( freq [ j ] != 0 ) { if ( freq [ j ] == freq1 ) { count_freq1 ++ ; } else { count_freq2 ++ ; } } } for ( int k = j + 1 ; k < CHARS ; k ++ ) { if ( freq [ k ] != 0 ) { if ( freq [ k ] == freq1 ) { count_freq1 ++ ; } if ( freq [ k ] == freq2 ) { count_freq2 ++ ; } else { return false ; } } } if ( count_freq1 > 1 && count_freq2 > 1 ) { return false ; } return true ; } public static void main ( String [ ] args ) { String str = " abcbc " ; if ( isValidString ( str ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i % 2 == 0 ) { if ( s . charAt ( i ) == ' a ' ) { s . setCharAt ( i , ' b ' ) ; } else { s . setCharAt ( i , ' a ' ) ; } } else { if ( s . charAt ( i ) == ' z ' ) { s . setCharAt ( i , ' y ' ) ; } else { s . setCharAt ( i , ' z ' ) ; } } } System . out . println ( s ) ; } } }
import java . util . * ; public class GFG { static int findMinimumSubsequences ( String A , String B ) { int numberOfSubsequences = 1 ; int sizeOfB = B . length ( ) ; int sizeOfA = A . length ( ) ; int [ ] [ ] next = new int [ sizeOfB ] [ sizeOfA ] ; for ( int i = 0 ; i < sizeOfB ; i ++ ) next [ B . charAt ( i ) - ' a ' ] [ i ] = i ; for ( int i = 0 ; i < sizeOfA ; i ++ ) { for ( int j = sizeOfB - 2 ; j >= 0 ; j -- ) { if ( next [ i ] [ j ] == inf ) next [ i ] [ j ] = next [ i ] [ j + 1 ] ; } } int pos = 0 ; for ( int i = 0 ; i < sizeOfA ; i ++ ) { if ( pos == 0 && next [ A . charAt ( i ) - ' a ' ] [ pos ] == inf ) { numberOfSubsequences = - 1 ; break ; } else if ( pos < sizeOfB && next [ A . charAt ( i ) - ' a ' ] [ pos ] < inf ) { int nextIndex = next [ A . charAt ( i ) - ' a ' ] [ pos ] + 1 ; pos = nextIndex ; } else { numberOfSubsequences ++ ; pos = 0 ; } } return numberOfSubsequences ; } public static void main ( String [ ] args ) { String A = " aacbe " ; String B = " aceab " ; System . out . println ( findMinimumSubsequences ( A , B ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = i + 1 ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < m - 1 ; j ++ ) { arr [ i ] = Math . max ( arr [ i ] , arr [ j ] ) ; arr [ j ] = Math . max ( arr [ j ] , arr [ i + 1 ] ) ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } System . out . println ( ) ; } } }
public class GFG { static void FindRank ( int arr [ ] , int len ) { System . out . print ( 1 + " " ) ; for ( int i = 1 ; i < len ; i ++ ) { int rank = 1 ; for ( int j = 0 ; j < i ; j ++ ) { if ( arr [ j ] > arr [ i ] ) rank ++ ; } System . out . print ( rank + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 88 , 14 , 69 , 30 , 29 , 89 } ; int len = arr . length ; FindRank ( arr , len ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int [ ] s = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . nextInt ( ) ; } int count = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int maxI = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( s [ j ] > max ) { maxI = j ; } } if ( s [ i ] > max ) { s [ i ] = max ; count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int firstkdigits ( int n , int k ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( product / ( int ) Math . pow ( 10 , k ) ) != 0 ) product = product / 10 ; return product ; } public static void main ( String [ ] args ) { int n = 15 , k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == 0 && b == 0 ) { break ; } int gcd = gcd ( a , b ) ; println ( gcd ) ; } } int gcd ( int a , int b ) { if ( a < b ) { int tmp = a ; a = b ; b = tmp ; } return b ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { String s = in . next ( ) ; int [ ] cnt = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { cnt [ s . charAt ( i ) ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( cnt [ i ] % 2 == 0 ) ans ++ ; } out . println ( ans ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . io . * ; public class GFG { static int complement ( int num ) { int i = 0 , len = 0 , comp = 0 , temp = num ; while ( true ) { len ++ ; num = num / 10 ; if ( Math . abs ( num ) == 0 ) break ; } num = temp ; comp = ( int ) Math . pow ( 10 , len ) - num ; return comp ; } public static void main ( String [ ] args ) { System . out . println ( complement ( 25 ) ) ; System . out . println ( complement ( 456 ) ) ; } }
import java . util . * ; public class GFG { static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; int t = ( int ) Math . ceil ( Math . log ( x ^ n ) ) ; return ( int ) Math . floor ( t ) ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } }
import java . util . * ; public class GFG { static int minOperations ( int arr [ ] , int n ) { int result = 0 ; int freq [ ] = new int [ 1000001 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } int maxi = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; for ( int i = 1 ; i <= maxi ; i ++ ) { if ( freq [ i ] != 0 ) { for ( int j = i * 2 ; j <= maxi ; j += i ) { freq [ j ] = 0 ; } result ++ ; } } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 2 , 4 , 4 , 4 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int totalWays ( int N , int M , int X ) { int dp [ ] [ ] = new int [ N + 1 ] [ 2 ] ; if ( X == 1 ) dp [ 0 ] [ 0 ] = 1 ; else dp [ 0 ] [ 1 ] = 0 ; if ( X == 1 ) { dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = M - 1 ; } else { dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = ( M - 2 ) ; } for ( int i = 2 ; i < N ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) ; } return dp [ N - 1 ] [ 0 ] ; } public static void main ( String [ ] args ) { int N = 4 , M = 3 , X = 2 ; System . out . println ( totalWays ( N , M , X ) ) ; } }
public class GFG { static int getMinNum ( int a , int b , int c ) { if ( c < a || c > b ) return c ; int x = ( ( b / c ) * c ) + c ; return x ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 , c = 4 ; System . out . println ( getMinNum ( a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int i = 0 ; int max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' I ' ) { i ++ ; } else { i -- ; } max = Math . max ( max , i ) ; } System . out . println ( max ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } Arrays . sort ( d ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] > max ) { max = d [ i ] ; } } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] > max ) { cnt ++ ; max = d [ i ] ; } } System . out . println ( cnt ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; PriorityQueue < Long > left = new PriorityQueue < > ( ) ; PriorityQueue < Long > right = new PriorityQueue < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { left . add ( in . nextLong ( ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { right . add ( in . nextLong ( ) ) ; } long [ ] leftSum = new long [ n ] ; long [ ] rightSum = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { leftSum [ i ] = leftSum [ i ] + in . nextLong ( ) ; rightSum [ i ] = rightSum [ i ] + in . nextLong ( ) ; } long [ ] leftSums = new long [ n ] ; long [ ] rightSums = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { leftSums [ i ] = leftSums [ i ] + in . nextLong ( ) ; rightSums [ i ] = rightSums [ i ] + in . nextLong ( ) ; } long [ ] leftSums1 = new long [ n ] ; long [ ] rightSums2 = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { leftSums1 [ i ] = leftSums1 [ i ] + rightSums [ i ] ; rightSums2 [ i ] = rightSums2 [ i ] + leftSums1 [ i ] ; } long [ ] leftSums2 = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { leftSums2 [ i ] = leftSums2 [ i ] + rightSums [ i ] ; } long [ ] leftSums3 = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { leftSums3 [ i
import java . util . * ; public class GFG { static int countWays ( int arr [ ] , int m , int N ) { int count [ ] = new int [ N + 1 ] ; count [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ; } } return count [ N ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 6 } ; int m = arr . length ; System . out . println ( " Total number of ways = " + countWays ( arr , m , N ) ) ; } }
public class GFG { static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
import java . util . * ; public class GFG { static void countFreq ( int a [ ] , int n ) { HashMap < Integer , Integer > hm = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hm . containsKey ( a [ i ] ) ) hm . put ( a [ i ] , hm . get ( a [ i ] ) + 1 ) ; else hm . put ( a [ i ] , 1 ) ; } int cumul = 0 ; for ( int i = 0 ; i < n ; i ++ ) { cumul += hm . get ( a [ i ] ) ; if ( hm . get ( a [ i ] ) > 0 ) System . out . println ( a [ i ] + " - > " + cumul ) ; hm . put ( a [ i ] , 0 ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 2 , 4 , 2 , 1 } ; int n = a . length ; countFreq ( a , n ) ; } }
public class GFG { static void possibleTripletInRange ( int L , int R ) { boolean flag = false ; int possibleA = 0 , possibleB = 0 , possibleC = 0 ; int numbersInRange = ( R - L + 1 ) ; if ( numbersInRange < 3 ) flag = false ; else if ( numbersInRange > 3 ) { flag = true ; if ( ( L % 2 ) > 0 ) { L ++ ; } possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else { if ( ( L % 2 ) == 0 ) { flag = true ; possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else flag = false ; } if ( flag == true ) System . out . println ( " ( " + possibleA + " , " + possibleB + " , " + possibleC + " ) is one such possible triplet between " + L + " and " + R ) ; else System . out . println ( " No Such Triplet exists between " + L + " and " + R ) ; } public static void main ( String [ ] args ) { int L = 2 , R = 10 ; possibleTripletInRange ( L , R ) ; L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ; } }
import java . util . * ; public class GFG { static String conversion ( charSet , String str ) { String s2 = " " ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) s2 += alphabets . charAt ( str . charAt ( i ) ) ; return s2 ; } public static void main ( String [ ] args ) { charSet = " qwertyuiopasdfghjklzxcvbnm " ; String str = " egrt " ; System . out . println ( conversion ( charSet , str ) ) ; } }
import java . util . * ; public class GFG { static Set < Integer > s = new HashSet < Integer > ( ) ; static void generateNumber ( int count , int a [ ] , int n , int num , int k ) { if ( k == count ) { s . add ( num ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) generateNumber ( count + 1 , a , n , num + a [ i ] , k ) ; } static void printDistinctIntegers ( int k , int a [ ] , int n ) { generateNumber ( 0 , a , n , 0 , k ) ; System . out . println ( " The distinct integers are : " ) ; for ( int i : s ) System . out . print ( i + " " ) ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 8 , 17 , 5 } ; int n = a . length , k = 2 ; printDistinctIntegers ( k , a , n ) ; } }
public class GFG { static int product ( int x ) { int prod = 1 ; while ( x > 0 ) { prod *= ( x % 10 ) ; x /= 10 ; } return prod ; } static int findNumber ( int l , int r ) { String a = String . valueOf ( l ) ; String b = String . valueOf ( r ) ; int ans = r ; for ( int i = 0 ; i < b . length ( ) ; i ++ ) { if ( b . charAt ( i ) == '0' ) continue ; int curr = b . charAt ( i ) - '0' ; curr = ( int ) ( ( curr - 1 ) * 10 + ( curr - 1 ) ) + '0' ; for ( int j = i + 1 ; j < curr ; j ++ ) curr = ( int ) ( ( curr - 1 ) * 10 + ( curr - 1 ) ) + '0' ; int num = 0 ; for ( int c : curr ) num = num * 10 + ( int ) c - '0' ; if ( num >= l && product ( ans ) < product ( num ) ) ans = num ; } return ans ; } public static void main ( String [ ] args ) { int l = 1 , r = 10 ; System . out . println ( findNumber ( l , r ) ) ; l = 51 , r = 62 ; System . out . println ( findNumber ( l , r ) ) ; } }
import java . util . * ; public class GFG { static boolean isPrime [ ] = new boolean [ 100005 ] ; static void sieveOfEratostheneses ( ) { isPrime [ 1 ] = false ; for ( int i = 2 ; i * i < 100005 ; i ++ ) { if ( isPrime [ i ] ) { for ( int j = 2 * i ; j < 100005 ; j += i ) isPrime [ j ] = false ; } } } static int findPrime ( int n ) { int num = n + 1 ; while ( num < 100005 ) { if ( isPrime [ num ] ) return num ; num ++ ; } return 0 ; } static int minNumber ( int arr [ ] ) { sieveOfEratostheneses ( ) ; int s = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) s += arr [ i ] ; if ( isPrime [ s ] == true ) return 0 ; int num = findPrime ( s ) ; return num - s ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 12 } ; System . out . println ( minNumber ( arr ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 25 ; static int getMinSum ( int arr [ ] , int n ) { int [ ] bits_count = new int [ MAX ] ; int max_bit = 0 , sum = 0 , ans = 0 ; for ( int d = 0 ; d < n ; d ++ ) { int e = arr [ d ] , f = 0 ; while ( e > 0 ) { int rem = e % 2 ; e = e / 2 ; if ( rem == 1 ) { bits_count [ f ] += rem ; } f ++ ; } max_bit = Math . max ( max_bit , f ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = ( int ) Math . pow ( 2 , d ) ; if ( bits_count [ d ] > n / 2 ) { ans = ans + temp ; } } for ( int d = 0 ; d < n ; d ++ ) { arr [ d ] = arr [ d ] ^ ans ; sum = sum + arr [ d ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 11 , 15 } ; int n = arr . length ; System . out . println ( getMinSum ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; int i = 0 ; int j = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == ' ' && s . charAt ( j ) == ' ' ) { count ++ ; i ++ ; j ++ ; } else { if ( s . charAt ( i ) == ' ? ' || s . charAt ( i ) == ' ! ' || s . charAt ( i ) == ' . ' ) { i ++ ; j ++ ; } else { if ( s . charAt ( i ) == ' ? ' || s . charAt ( i ) == ' ! ' ) { i ++ ; j ++ ; } else { if ( s . charAt ( i ) == ' ? ' ) { i ++ ; } else { j ++ ; } } } } } if ( i == s . length ( ) ) { System . out . println ( " Impossible " ) ; } else { System . out . println ( count ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] k = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { k [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = i ; } for ( int i = 0 ; i < n ; i ++ ) { if ( k [ i ] == 0 ) { System . out . print ( i ) ; break ; } int cur = k [ i ] ; if ( cur > 0 ) { System . out . print ( i ) ; } } System . out . println ( ) ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] k = new int [ n ] ; int [ ] c = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { k [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } Arrays . sort ( k ) ; Arrays . sort ( c ) ; int sum = 0 ; int i = 0 ; while ( i < n && c [ i ] < c [ k [ i ] - 1 ] ) { sum += c [ i ] ; i ++ ; } System . out . println ( sum ) ; } } }
public class GFG { static int findMaximumNum ( int arr [ ] , int n ) { int i = n ; while ( i >= 1 ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i <= arr [ j ] ) count ++ ; } if ( count >= i ) return i ; i -- ; } return 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 8 , 10 } ; int n = arr . length ; System . out . println ( findMaximumNum ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; String [ ] ss = s . split ( " " ) ; int a = Integer . parseInt ( ss [ 0 ] ) ; int b = Integer . parseInt ( ss [ 1 ] ) ; if ( s . equals ( " print " ) ) { for ( int i = a ; i < b ; i ++ ) { out . print ( ss [ i ] ) ; } out . println ( ) ; } else if ( s . equals ( " reverse " ) ) { for ( int i = a ; i < b ; i ++ ) { out . print ( ss [ i ] ) ; } out . println ( ) ; } else if ( s . equals ( " replace " ) ) { for ( int i = a ; i < b ; i ++ ) { out . print ( ss [ i ] ) ; } out . println ( ) ; } else { for ( int i = a ; i < b ; i ++ ) { out . print ( ss [ i ] ) ; } out . println ( ) ; } } out . flush ( ) ; } }
import java . util . * ; public class GFG { static int solve ( int A [ ] , int n ) { int dp [ ] [ ] = new int [ 2000 ] [ 2000 ] ; int flag = 1 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += A [ i ] ; for ( int i = - sum ; i <= sum ; i ++ ) dp [ 0 ] [ i ] = Integer . MAX_VALUE ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = - sum ; j <= sum ; j ++ ) { dp [ flag ] [ j ] = Integer . MAX_VALUE ; if ( j - A [ i - 1 ] <= sum && j - A [ i - 1 ] >= - sum ) dp [ flag ] [ j ] = dp [ flag ^ 1 ] [ j - A [ i - 1 ] ] ; if ( j + A [ i - 1 ] <= sum && j + A [ i - 1 ] >= - sum && dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] != Integer . MAX_VALUE ) dp [ flag ] [ j ] = Math . min ( dp [ flag ] [ j ] , dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] + 1 ) ; } flag = flag ^ 1 ; } for ( int i = 0 ; i <= sum ; i ++ ) { if ( dp [ flag ^ 1 ] [ i ] != Integer . MAX_VALUE ) return dp [ flag ^ 1 ] [ i ] ; } return n - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 } ; int n = arr . length ; System . out . println ( solve ( arr , n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; sc . hasNext ( ) ; ) { double [ ] p = new double [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { p [ i ] = sc . nextDouble ( ) ; } solve ( ) ; } } void solve ( ) { int [ ] AB = new int [ 8 ] ; int [ ] CD = new int [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { AB [ i ] = P [ i ] - ( AB [ i ] * p [ 0 ] ) ; CD [ i ] = P [ i ] - ( AB [ i ] * p [ 1 ] ) ; } int sum = 0 ; for ( int i = 0 ; i < 8 ; i ++ ) { sum += AB [ i ] * CD [ i ] ; } println ( sum == 0 ? " YES " : " NO " ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( ( m | n ) == 0 ) { break ; } int [ ] a = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int p = 0 ; String fizz = " " ; String buzz = " " ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 3 == 0 ) { fizz += " " ; } if ( a [ i ] % 5 == 0 ) { buzz += " " ; } p = ( p + 1 ) % m ; } println ( fizz + " " + buzz ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static int l [ ] [ ] = new int [ 1001 ] [ 1001 ] ; static void initialize ( ) { l [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < 1001 ; i ++ ) { l [ i ] [ 0 ] = 1 ; for ( int j = 1 ; j <= i ; j ++ ) { l [ i ] [ j ] = l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ; } } } static int nCr ( int n , int r ) { return l [ n ] [ r ] ; } public static void main ( String [ ] args ) { initialize ( ) ; int n = 8 , r = 3 ; System . out . println ( nCr ( n , r ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a > b ) { a = b ; b = d ; } if ( a < c ) { a = c ; c = d ; } if ( b < d ) { b = d ; d = a ; } if ( a > c ) { c = a ; a = d ; } if ( b > d ) { b = d ; d = a ; } if ( a > c ) { c = a ; a = d ; } System . out . println ( c - b ) ; } }
import java . util . * ; public class GFG { static void calculate ( int a [ ] , int b [ ] , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] != 0 ) mul = mul * b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] / mul ; System . out . print ( x + " " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 100 , 8 } ; int b [ ] = { 2 , 3 } ; int n = a . length ; int m = b . length ; calculate ( a , b , n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] ans = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] [ 0 ] = arr [ i ] [ 0 ] - arr [ i ] [ 1 ] ; ans [ i ] [ 1 ] = arr [ i ] [ 1 ] - arr [ i ] [ 0 ] ; } System . out . println ( ans [ 0 ] [ 0 ] + " " + ans [ n - 1 ] [ 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int i = 0 , j = 0 ; while ( i < s . length ( ) && s . charAt ( i ) == ' < ' ) i ++ ; while ( j < s . length ( ) && s . charAt ( j ) == ' > ' ) j -- ; System . out . println ( Math . min ( i , j ) ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 1 ; while ( n > 1 ) { ans ++ ; n -= 2 ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int p = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int time = sc . nextInt ( ) ; int wait = sc . nextInt ( ) ; int dist = sc . nextInt ( ) ; int time1 = time * p ; int time2 = time * d ; int count = 0 ; while ( time1 < dist && time2 < dist ) { time1 += time2 ; time2 += time1 ; count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int h2 = h * 60 ; int m2 = m * 60 ; int h3 = h2 * 60 ; int m3 = m2 * 60 ; int m4 = h2 * 60 ; int m5 = h2 * 60 ; int m6 = h2 * 60 ; int m7 = h2 * 60 ; int m8 = h2 * 60 ; int m9 = h2 * 60 ; int m10 = h2 * 60 ; int m11 = h2 * 60 + m1 ; if ( m1 < m2 ) { m10 = m1 % 60 ; m11 = m2 % 60 ; } if ( m1 < m3 ) { m10 = m3 % 60 ; m12 = m1 % 60 ; } if ( m1 < m2 ) { m10 = m2 % 60 ; m11 = m1 % 60 ; } if ( m1 < m3 ) { m10 = m3 % 60 ; m12 = m1 % 60 ; } if ( m1 < m2 ) { m10 = m2 % 60 ; m1 = m1 % 60 ; } if ( m1 < m3 ) { m10 = m3 % 60 ; m1 = m1 % 60 ; } if ( m1 < m4 ) { m10 = m4 % 60 ; m1 = m1 % 60 ; } System . out . println ( m10 + " : " + m1 ) ; } }
import java . util . * ; public class GFG { static int longestAlternatingSubarray ( int a [ ] , int n ) { int longest = 1 ; int cnt = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] * a [ i - 1 ] < 0 ) { cnt ++ ; longest = Math . max ( longest , cnt ) ; } else { cnt = 1 ; } } return longest ; } public static void main ( String [ ] args ) { int a [ ] = { - 5 , - 1 , - 1 , 2 , - 2 , - 3 } ; int n = a . length ; System . out . println ( longestAlternatingSubarray ( a , n ) ) ; } }
public class GFG { static void checkTypeOfTriangle ( int a , int b , int c ) { int sqa = ( int ) Math . pow ( a , 2 ) ; int sqb = ( int ) Math . pow ( b , 2 ) ; int sqc = ( int ) Math . pow ( c , 2 ) ; if ( sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb ) System . out . println ( " Right - angled Triangle " ) ; else if ( sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb ) System . out . println ( " Obtuse - angled Triangle " ) ; else System . out . println ( " Acute - angled Triangle " ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 2 , c = 2 ; checkTypeOfTriangle ( a , b , c ) ; } }
public class GFG { static int MAX = 100 ; static void countSubsequence ( String s , int n ) { int cntG = 0 , cntF = 0 , result = 0 ; int C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' G ' ) { cntG ++ ; result += C ; continue ; } if ( s . charAt ( i ) == ' F ' ) { cntF ++ ; C += cntG ; continue ; } else { continue ; } } System . out . println ( result ) ; } public static void main ( String [ ] args ) { String s = " GFGFG " ; int n = s . length ( ) ; countSubsequence ( s , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] edges = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { edges [ i ] [ 0 ] = sc . nextInt ( ) ; edges [ i ] [ 1 ] = sc . nextInt ( ) ; edges [ i ] [ 2 ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ 101 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 101 ; j ++ ) { if ( edges [ i ] [ 0 ] != edges [ i ] [ 0 ] && edges [ i ] [ 1 ] != edges [ i ] [ 1 ] ) { dp [ i ] [ j ] = Math . abs ( edges [ i ] [ 0 ] - edges [ i ] [ 0 ] ) + Math . abs ( edges [ i ] [ 1 ] - edges [ i ] [ 1 ] ) ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math . min ( dp [ i ] [ 0 ] , ans ) ; } System . out . println ( ans + " " + dp [ n - 1 ] [ ans ] ) ; } }
import java . io . * ; public class GFG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( int ) Math . floor ( Math . sqrt ( n ) ) ; n -= ( largest * largest * largest ) ; steps ++ ; } return steps ; } public static void main ( String [ ] args ) { int n = 150 ; System . out . println ( countSteps ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = in . nextInt ( ) ; } } Arrays . sort ( a , ( o1 , o2 ) -> o1 [ 0 ] - o2 [ 0 ] ) ; Arrays . sort ( a , ( o1 , o2 ) -> o1 [ 1 ] - o2 [ 1 ] ) ; for ( int i = 0 ; i < n ; i ++ ) { out . println ( a [ i ] [ 0 ] + " " + a [ i ] [ 1 ] ) ; } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ 0 ] ; int max = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] == arr [ i + 1 ] ) { min = arr [ i ] ; max = arr [ i ] ; } } System . out . println ( max - min + " " + min ) ; } }
import java . util . * ; public class GFG { static int bitsoncount ( int x ) { return Integer . bitCount ( x ) ; } static int find_count ( int arr [ ] ) { int ans = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int x = bitsoncount ( arr [ i ] ) ; if ( i % x == 0 ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; System . out . println ( find_count ( arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % ( n * n / 2 ) != 0 ) { System . out . println ( " NO " ) ; return ; } int [ ] diff = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { diff [ i ] = sum - arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { sum -= diff [ i ] ; } if ( sum % ( n * n / 2 ) != 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
public class GFG { static int maxProd ( int N ) { if ( N == 0 ) return 1 ; if ( N < 10 ) return N ; return Math . max ( maxProd ( N / 10 ) * ( N % 10 ) , maxProd ( N / 10 - 1 ) * 9 ) ; } public static void main ( String [ ] args ) { int N = 390 ; System . out . println ( maxProd ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] == 1 ) { arr [ j ] = 2 ; } else { break ; } } max = Math . max ( max , arr [ i ] ) ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ 2 * n ] [ 2 ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; a [ i ] [ 1 ] = sc . nextInt ( ) ; } Arrays . sort ( a , ( o1 , o2 ) -> o1 [ 0 ] - o2 [ 0 ] ) ; Arrays . sort ( a , ( o1 , o2 ) -> o1 [ 1 ] - o2 [ 1 ] ) ; double ans = 0 ; for ( int i = 0 ; i < 2 * n ; i ++ ) { ans += Math . sqrt ( a [ i ] [ 0 ] * a [ i ] [ 0 ] + a [ i ] [ 1 ] * a [ i ] [ 1 ] ) ; } System . out . println ( ans ) ; } } }
import java . io . * ; public class GFG { static int countNonDecreasing ( int n ) { int N = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count = count * ( N + i - 1 ) ; count = count / i ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countNonDecreasing ( n ) ) ; } }
public class GFG { static int reduceString ( String s , int l ) { int count = 1 ; int steps = 0 ; for ( int i = 1 ; i < l ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) count ++ ; else { steps += ( count / 2 ) ; count = 1 ; } } steps += ( count / 2 ) ; return steps ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; int l = s . length ( ) ; System . out . println ( reduceString ( s , l ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int a = in . nextInt ( ) ; int b = in . nextInt ( ) ; if ( a + b > 0 ) { out . println ( " Impossible " ) ; return ; } int [ ] c = new int [ a + b ] ; for ( int i = 0 ; i < c . length ; i ++ ) { c [ i ] = ( in . nextInt ( ) == 0 ) ? 1 : 0 ; } int [ ] d = new int [ a + b ] ; for ( int i = 0 ; i < c . length ; i ++ ) { d [ c [ i ] ] = c [ i ] ; } boolean f = true ; for ( int i = 0 ; i < a + b ; i ++ ) { if ( f ) { out . print ( " ? " ) ; out . print ( c [ i ] ) ; f = false ; } else { out . print ( " " ) ; out . print ( c [ i ] ) ; f = true ; } } out . println ( ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ b + 1 ] [ x + 1 ] ; int count = 0 ; for ( int i = 0 ; i < b + 1 ; i ++ ) { for ( int j = 0 ; j < x + 1 ; j ++ ) { arr [ i ] [ j ] = i ; } } for ( int i = 0 ; i < x + 1 ; i ++ ) { for ( int j = 0 ; j < y + 1 ; j ++ ) { arr [ i ] [ j ] = arr [ i ] [ j ] ; } } System . out . println ( count ) ; for ( int i = 0 ; i < count ; i ++ ) { System . out . print ( arr [ i ] [ 0 ] + " " ) ; } } }
public class GFG { static int mod = 1000000007 ; static int mult ( int a , int b ) { return ( ( a % mod ) * ( b % mod ) ) % mod ; } static int calculate_factors ( int n ) { int cnt = 0 ; int ans = 1 ; while ( n % 2 == 0 ) { cnt ++ ; n = n / 2 ; } if ( cnt > 0 ) ans = mult ( ans , ( cnt + 1 ) ) ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { cnt = 0 ; while ( n % i == 0 ) { cnt ++ ; n = n / i ; } if ( cnt > 0 ) ans = mult ( ans , ( cnt + 1 ) ) ; } if ( n > 2 ) ans = mult ( ans , 2 ) ; return ans % mod ; } public static void main ( String [ ] args ) { int n = 19374857 ; int mod = 17 ; System . out . println ( calculate_factors ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == ' . ' ) { i ++ ; } else { if ( s . charAt ( i ) == ' . ' ) { i ++ ; } else { i ++ ; } } } System . out . println ( s ) ; } }
import java . util . * ; public class GFG { static int maxAbsDiff ( int arr [ ] , int n ) { int minEle = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minEle = Math . min ( minEle , arr [ i ] ) ; maxEle = Math . max ( maxEle , arr [ i ] ) ; } return ( maxEle - minEle ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 5 , 3 } ; int n = arr . length ; System . out . println ( maxAbsDiff ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( ( a | b | c ) == 0 ) break ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ a + b + c + 1 ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; if ( x == 0 && y == 0 && z == 0 ) continue ; dp [ i ] [ y ] [ x ] = 1 ; } for ( int i = 0 ; i < dp . length ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { if ( dp [ i ] [ j ] == 1 ) cnt ++ ; } if ( cnt == 2 ) dp [ i ] [ 0 ] = 0 ; } System . out . println ( " " + cnt ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int minRemove ( int a [ ] , int b [ ] , int n , int m ) { HashMap < Integer , Integer > countA = new HashMap < > ( ) ; HashMap < Integer , Integer > countB = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { countA . put ( a [ i ] , countA . get ( a [ i ] ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { countB . put ( b [ i ] , countB . get ( b [ i ] ) + 1 ) ; } int res = 0 ; for ( Map . Entry < Integer , Integer > x : countA . entrySet ( ) ) { if ( x . getValue ( ) == 1 ) res += Math . min ( countA . get ( x . getKey ( ) ) , countB . get ( x . getKey ( ) ) ) ; } return res ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 4 } ; int b [ ] = { 2 , 3 , 4 , 5 , 8 } ; int n = a . length ; int m = b . length ; System . out . println ( minRemove ( a , b , n , m ) ) ; } }
public class GFG { static int count ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i < r ; i ++ ) { if ( i < 10 ) cnt ++ ; else { int n = i % 10 ; int k = i ; while ( k >= 10 ) k = k / 10 ; if ( n == k ) cnt ++ ; } } return ( cnt ) ; } public static void main ( String [ ] args ) { int L = 2 , R = 60 ; System . out . println ( count ( L , R ) ) ; L = 1 ; R = 1000 ; System . out . println ( count ( L , R ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = in . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { cnt ++ ; } } if ( cnt == 0 ) { pw . println ( " NO " ) ; pw . close ( ) ; return ; } int first = arr [ 0 ] ; int second = arr [ n - 1 ] ; int third = arr [ n - 2 ] ; if ( arr [ 0 ] == 1 && arr [ n - 1 ] == 1 ) { pw . println ( " YES " ) ; } else { pw . println ( " NO " ) ; pw . close ( ) ; return ; } pw . println ( 1 ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static int bit ( int x ) { int ans = 0 ; while ( x > 0 ) { x /= 2 ; ans ++ ; } return ans ; } static boolean check ( int d , int x ) { if ( bit ( x / d ) <= bit ( d ) ) return true ; return false ; } static int bs ( int n ) { int l = 1 , r = ( int ) Math . sqrt ( n ) ; while ( l < r ) { int m = ( l + r ) / 2 ; if ( check ( m , n ) ) r = m ; else l = m + 1 ; } if ( check ( l , n ) == false ) return ( int ) Math . floor ( l + 1 ) ; else return ( int ) Math . floor ( l ) ; } static int countDivisor ( int n ) { return n - bs ( n ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countDivisor ( n ) ) ; } }
import java . util . * ; public class GFG { static int minimalSteps ( String s , int n ) { int dp [ ] = new int [ n ] ; String s1 = " " ; String s2 = " " ; dp [ 0 ] = 1 ; s1 += s . charAt ( 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { s1 += s . charAt ( i ) ; s2 += s . charAt ( i ) ; dp [ i ] = Math . min ( dp [ i ] , dp [ i - 1 ] + 1 ) ; if ( s1 . equals ( s2 ) ) { dp [ i * 2 + 1 ] = Math . min ( dp [ i ] + 1 , dp [ i * 2 + 1 ] ) ; } } return dp [ n - 1 ] ; } public static void main ( String [ ] args ) { String s = " aaaaaaaa " ; int n = s . length ( ) ; System . out . println ( minimalSteps ( s , n ) ) ; } }
public class GFG { static boolean checkUtil ( int num , int dig , int base ) { if ( dig == 1 && num < base ) return true ; if ( dig > 1 && num >= base ) return checkUtil ( num / base , - - dig , base ) ; return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base < 33 ; base ++ ) if ( checkUtil ( num , dig , base ) ) return true ; return false ; } public static void main ( String [ ] args ) { int num = 8 , dig = 3 ; if ( check ( num , dig ) == true ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } static int getMin ( int arr [ ] , int i , int j ) { int minVal = arr [ i ] ; i ++ ; while ( i <= j ) { minVal = Math . min ( minVal , arr [ i ] ) ; i ++ ; } return minVal ; } static int getMax ( int arr [ ] , int i , int j ) { int maxVal = arr [ i ] ; i ++ ; while ( i <= j ) { maxVal = Math . max ( maxVal , arr [ i ] ) ; i ++ ; } return maxVal ; } static void generateArr ( int arr [ ] , int n ) { if ( n == 0 ) return ; if ( n == 1 ) { System . out . print ( arr [ 0 ] + " " ) ; return ; } int tmpArr [ ] = new int [ n ] ; tmpArr [ 0 ] = getMax ( arr , 1 , n - 1 ) ; for ( int i = 1 ; i < n - 1 ; i ++ ) tmpArr [ i ] = Math . abs ( getMax ( arr , i + 1 , n - 1 ) - getMin ( arr , 0 , i - 1 ) ) ; tmpArr [ n - 1 ] = getMin ( arr , 0 , n - 2 ) ; printArray ( tmpArr , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 2 , 4 , 3 } ; int n = arr . length ; generateArr ( arr , n ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } String c = sc . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( c . charAt ( i ) == ' B ' ) { sum += a [ i ] ; } else { sum += b [ i ] ; } } System . out . println ( sum ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { double [ ] [ ] arr = new double [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { arr [ i ] [ j ] = sc . nextDouble ( ) ; } } double ans = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { double x = arr [ i ] [ 0 ] - arr [ i ] [ 0 ] ; double y = arr [ i ] [ 1 ] - arr [ i ] [ 1 ] ; double z = arr [ i ] [ 2 ] - arr [ i ] [ 2 ] ; if ( Math . abs ( x * y ) < 1e-10 ) { ans = 1e-10 ; break ; } } if ( ans == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int nthXorFib ( int n , int a , int b ) { if ( n == 0 ) return a ; if ( n == 1 ) return b ; if ( n == 2 ) return a ^ b ; return nthXorFib ( n % 3 , a , b ) ; } public static void main ( String [ ] args ) { int a = 1 , b = 2 , n = 10 ; System . out . println ( nthXorFib ( n , a , b ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n ; static int a1 , a2 , b1 , b2 ; static void solve ( ) { int taro = 0 , hanako = 0 ; n = nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { a1 = nextInt ( ) ; b1 = nextInt ( ) ; a2 = nextInt ( ) ; b2 = nextInt ( ) ; if ( a1 == b1 && a2 == b2 ) taro ++ ; else if ( a1 == b1 && a2 == b2 ) hanako ++ ; } str . append ( taro + " " + hanako ) . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } n = nextInt ( ) ; solve ( ) ; pw . print ( str ) ; pw . flush ( ) ; } static int nextInt ( ) throws java . lang . Exception { return Integer . parseInt ( bf . readLine ( ) ) ; } }
import java . io . * ; public class GFG { static double Area ( double a ) { if ( a < 0 ) return - 1 ; double h = 1.268 * a ; double A = ( double ) Math . pow ( h , 2 ) ; return A ; } public static void main ( String [ ] args ) { double a = 5 ; System . out . println ( Area ( a ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { Stack < Integer > stack = new Stack < Integer > ( ) ; int ans = 0 ; stack . push ( 1 ) ; stack . push ( 3 ) ; stack . push ( 1 ) ; while ( ! stack . isEmpty ( ) ) { int left = stack . pop ( ) ; int right = stack . pop ( ) ; int d = left + right ; if ( d <= 12000 ) { int n = left + right ; ans ++ ; stack . push ( n ) ; stack . push ( d ) ; stack . push ( right ) ; stack . push ( left ) ; stack . push ( n ) ; } } return Integer . toString ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( ( int ) Math . pow ( 2 , n / 2 ) ) ; } else { System . out . println ( 0 ) ; } } }
import java . util . * ; public class GFG { static void sieve ( boolean prime [ ] , int n ) { prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } } static int sumPrime ( int d ) { int maxVal = ( int ) Math . pow ( 10 , d ) - 1 ; boolean prime [ ] = new boolean [ maxVal + 1 ] ; sieve ( prime , maxVal ) ; int sum = 0 ; for ( int i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int d = 3 ; System . out . println ( sumPrime ( d ) ) ; } }
import java . util . * ; public class GFG { static void sieve ( boolean prime [ ] , int n ) { prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } } static int sumPrime ( int d ) { int maxVal = ( int ) Math . pow ( 2 , d ) - 1 ; boolean prime [ ] = new boolean [ maxVal + 1 ] ; sieve ( prime , maxVal ) ; int sum = 0 ; for ( int i = 2 ; i <= maxVal ; i ++ ) { if ( prime [ i ] ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int d = 8 ; System . out . println ( sumPrime ( d ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] / ( i + 1 ) >= m ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( a > b ) { if ( a == b ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } else if ( a == b ) { if ( m > c ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } else if ( a == c ) { if ( m > a ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } else if ( a == b ) { if ( m > a ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } else if ( a == c ) { if ( m > a ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } else if ( a == b ) { if ( m > a ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } else if ( a == c ) { if ( m > a ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } else { if ( m > a ) { System . out . println ( 1 ) ; } else { System . out . println ( 0 ) ; } } } }
import java . util . * ; public class GFG { static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max_so_far = Math . max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int countMaxContiguous ( int arr [ ] , int n ) { int current_max = 0 , max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) current_max = 0 ; else { current_max ++ ; max_so_far = Math . max ( current_max , max_so_far ) ; } } return max_so_far ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 4 , 3 , 8 , 9 } ; int n = arr . length ; System . out . println ( countMaxContiguous ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static float cubeSide ( float h , float r ) { if ( h < 0 && r < 0 ) return - 1 ; float a = ( ( h * r * Math . sqrt ( 2 ) ) / ( h + Math . sqrt ( 2 ) * r ) ) ; return a ; } public static void main ( String [ ] args ) { float h = 5 , r = 6 ; System . out . println ( cubeSide ( h , r ) ) ; } }
public class GFG { static void pattern ( int rows_no ) { for ( int i = 1 ; i <= rows_no ; i ++ ) { for ( int k = 1 ; k <= i ; k ++ ) System . out . print ( " " ) ; for ( int j = i ; j <= rows_no ; j ++ ) System . out . print ( j ) ; System . out . println ( ) ; } for ( int i = rows_no - 1 ; i >= 0 ; i -- ) { for ( int k = 1 ; k <= i ; k ++ ) System . out . print ( " " ) ; for ( int j = i ; j <= rows_no ; j ++ ) System . out . print ( j ) ; System . out . println ( ) ; } } public static void main ( String [ ] args ) { int rows_no = 7 ; pattern ( rows_no ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int min = Integer . MAX_VALUE ; for ( int i = 1 ; i <= n ; i ++ ) { int sum = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { sum += j ; } min = Math . min ( min , sum ) ; } System . out . println ( min ) ; } }
public class GFG { static int check_digits ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) % 2 == 0 ) return 0 ; n = n / 10 ; } return 1 ; } static int smallest_number ( int n ) { int i = n ; while ( true ) { if ( check_digits ( i ) ) return i ; i ++ ; } } public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallest_number ( N ) ) ; } }
public class GFG { static int check_digits ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) % 2 == 1 ) return 0 ; n = n / 10 ; } return 1 ; } static int smallest_number ( int n ) { for ( int i = n ; i < 2401 ; i ++ ) if ( check_digits ( i ) == 1 ) return ( i ) ; return ( n ) ; } public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallest_number ( N ) ) ; } }
import java . io . * ; public class GFG { static void triangular_series ( int n ) { int j = 1 , k = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( k + " " ) ; j ++ ; k = k + j ; } } public static void main ( String [ ] args ) { int n = 5 ; triangular_series ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( arr [ i ] ) ) { map . put ( arr [ i ] , map . get ( arr [ i ] ) + 1 ) ; } else { map . put ( arr [ i ] , 1 ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . get ( arr [ i ] ) > 1 ) { ans += n - i - map . get ( arr [ i ] ) ; map . put ( arr [ i ] , map . get ( arr [ i ] ) - 1 ) ; } else { ans += n - i - 1 ; } } System . out . println ( ans ) ; } }
public class GFG { static int findPosition ( int k , int n ) { int f1 = 0 , f2 = 1 , i = 2 ; while ( i != 0 ) { int f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) return n * i ; i ++ ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 , k = 4 ; System . out . println ( " Position of n ' th multiple of k in Fibonacci Series is " + findPosition ( k , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; if ( s . charAt ( 0 ) == s . charAt ( s . length ( ) - 1 ) ) { System . out . println ( " First " ) ; } else { System . out . println ( " Second " ) ; } } }
public class GFG { static int countMinimumMoves ( int arr [ ] , int n , int k ) { for ( int i = k - 1 ; i < n ; i ++ ) if ( arr [ i ] != arr [ k - 1 ] ) return - 1 ; for ( int i = k - 1 ; i >= 0 ; i -- ) if ( arr [ i ] != arr [ k - 1 ] ) return i + 1 ; return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int K = 4 ; int n = arr . length ; System . out . println ( countMinimumMoves ( arr , n , K ) ) ; } }
public class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( ( y & 1 ) > 0 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int powerGCD ( int a , int b , int n ) { int e = power ( a , n , b ) ; return gcd ( e , b ) ; } public static void main ( String [ ] args ) { int a = 5 , b = 4 , n = 2 ; System . out . println ( powerGCD ( a , b , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; double T = sc . nextInt ( ) ; double S = sc . nextInt ( ) ; double Q = sc . nextInt ( ) ; double v = ( double ) T / ( double ) Q ; double t = S / ( double ) Q ; double ans = 0 ; if ( t % v == 0 ) { ans ++ ; } else { ans ++ ; S += ( double ) ( ( T - S ) / v ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( ( int ) Math . pow ( n - 2 , 2 ) ) ; } }
import java . util . * ; public class GFG { static int countIdenticalRows ( int mat [ ] [ ] ) { int count = 0 ; for ( int i = 0 ; i < mat . length ; i ++ ) { int hs [ ] = new int [ mat [ i ] . length ] ; for ( int j = 0 ; j < mat [ i ] . length ; j ++ ) hs [ mat [ i ] [ j ] ] = 1 ; if ( hs . length == 1 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 1 , 1 } , { 1 , 2 , 3 } , { 5 , 5 , 5 } } ; System . out . println ( countIdenticalRows ( mat ) ) ; } }
import java . util . * ; public class GFG { static void createSorted ( int a [ ] , int n ) { ArrayList < Integer > b = new ArrayList < Integer > ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( b . size ( ) == 0 ) b . add ( a [ j ] ) ; else { int start = 0 , end = b . size ( ) - 1 , pos = 0 ; while ( start <= end ) { int mid = start + ( end - start ) / 2 ; if ( b . get ( mid ) == a [ j ] ) { b . add ( Math . max ( 0 , mid + 1 ) ) ; break ; } else if ( b . get ( mid ) > a [ j ] ) { pos = end - 1 ; } else { pos = start ; } if ( start > end ) { pos = start ; b . add ( Math . max ( 0 , pos ) ) ; break ; } } } } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( b . get ( i ) + " " ) ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 4 , 9 , 8 } ; int n = a . length ; createSorted ( a , n ) ; } }
import java . util . * ; public class GFG { static int countTotalDistinct ( String str ) { int cnt = 0 ; Set < String > items = new HashSet < String > ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { String temp = " " ; Set < String > ans = new HashSet < String > ( ) ; for ( int j = i ; j < str . length ( ) ; j ++ ) { temp = temp + str . charAt ( j ) ; ans . add ( str . charAt ( j ) ) ; if ( ! items . contains ( temp ) ) { items . add ( temp ) ; cnt += ans . size ( ) ; } } } return cnt ; } public static void main ( String [ ] args ) { String str = " ABCA " ; System . out . println ( countTotalDistinct ( str ) ) ; } }
import java . io . * ; public class GFG { static int firstDigit ( int n ) { int digits = ( int ) Math . log10 ( n ) ; n = n / ( int ) Math . pow ( 10 , digits ) ; return n ; } static int lastDigit ( int n ) { return ( n % 10 ) ; } public static void main ( String [ ] args ) { int n = 98562 ; System . out . print ( firstDigit ( n ) + " " ) ; System . out . println ( lastDigit ( n ) ) ; } }
import java . util . * ; public class GFG { static void removeZeros ( int a [ ] , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { ind = i ; break ; } } if ( ind == - 1 ) { System . out . println ( " Array has leading zeros only " ) ; return ; } int b [ ] = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) { b [ i ] = a [ ind + i ] ; } for ( int i = 0 ; i < n - ind ; i ++ ) { System . out . print ( b [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } }
import java . util . * ; public class GFG { static int find_maxm ( int arr [ ] , int n ) { HashMap < Integer , Integer > mpp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mpp . containsKey ( arr [ i ] ) ) { mpp . put ( arr [ i ] , mpp . get ( arr [ i ] ) + 1 ) ; } else { mpp . put ( arr [ i ] , 1 ) ; } } int ans = 0 ; for ( Map . Entry < Integer , Integer > entry : mpp . entrySet ( ) ) { if ( entry . getValue ( ) == freq ) { ans = Math . max ( ans , entry . getValue ( ) ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 2 , 2 , 3 , 4 , 3 } ; int n = arr . length ; System . out . println ( find_maxm ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int l = 0 , r = n ; while ( l < r ) { int mid = ( l + r ) / 2 ; if ( a [ mid ] < a [ n - 1 ] ) { l = mid + 1 ; } else { r = mid - 1 ; } } System . out . println ( l ) ; } }
public class GFG { static int sumOfDigitsSingle ( int x ) { int ans = 0 ; while ( x > 0 ) { ans += x % 10 ; x /= 10 ; } return ans ; } static int closest ( int x ) { int ans = 0 ; while ( ans * 10 + 9 <= x ) ans = ans * 10 + 9 ; return ans ; } static int sumOfDigitsTwoParts ( int N ) { int A = closest ( N ) ; return sumOfDigitsSingle ( A ) + sumOfDigitsSingle ( N - A ) ; } public static void main ( String [ ] args ) { int N = 35 ; System . out . println ( sumOfDigitsTwoParts ( N ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { String [ ] names = { " NA " , " A " , " B " , " C " , " D " , " E " , " NA " } ; int [ ] rank = { 3 , 5 , 7 , 8 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 31 , 37 , 39 , 39 , 41 , 43 , 44 , 45 , 47 , 49 , 48 , 49 , 49 , 64 , 81 , 87 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 121 , 98 , 99 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 198 , 1910 , 1911 , 1912 , 1921 , 1922 , 1933 , 194 , 1984 , 1985 , 1988 , 2086 , 2088 , 21999 , 1989 , 1988 , 21999 , 1988 , 2199 , 1989 , 1988 , 1989 , 1989 , 1988 , 1989 , 1988 , 1989 , 1989 , 1988 , 1989 , 1988 , 1989 , 1989 , 1988 , 1989 , 1988 , 1989 , 1989 , 1988 , 1989 , 1988 , 1989 , 1989 , 1988 , 1989 , 1989 , 1988 , 1989 , 1989 , 1988 , 1989 , 1989 , 1989 , 1988 , 1989 , 1989 , 1989 , 1988 , 1989 , 1989 , 1989 , 1988 , 1989 , 1989 , 1989 , 1988 , 1989 , 1989 , 1989 , 1989 , 1988 , 1989 , 1989 , 1989 , 1989 , 1988 , 1989 , 1989 , 1989 , 1989 , 19
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int ans = Math . max ( Math . abs ( n - r ) , Math . abs ( m - c ) ) + Math . max ( Math . abs ( r - c ) , Math . abs ( c - r ) ) ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; boolean flag = true ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] - arr [ i + 1 ] > 1 ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class GFG { static void cal_sin ( double n ) { double accuracy = 0.0001 ; n = n * ( 3.142 / 180.0 ) ; double x1 = n ; double sinx = n ; double sinval = Math . sin ( n ) ; for ( int i = 1 ; ; i ++ ) { double denominator = 2 * i * ( 2 * i + 1 ) ; x1 = - x1 * n * n / denominator ; sinx = sinx + x1 ; if ( accuracy <= Math . abs ( sinval - sinx ) ) { break ; } } System . out . println ( sinx ) ; } public static void main ( String [ ] args ) { double n = 90 ; cal_sin ( n ) ; } }
import java . util . * ; public class GFG { static int multiply ( int array [ ] , int n ) { int pro = 1 ; for ( int i = 0 ; i < n ; i ++ ) pro = pro * array [ i ] ; return pro ; } public static void main ( String [ ] args ) { int array [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = array . length ; System . out . println ( multiply ( array , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] array = new int [ n ] ; for ( int i = 0 ; i < array . length ; i ++ ) { array [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < array . length ; i ++ ) { switch ( array [ i ] ) { case 0 : System . out . println ( array [ i ] ) ; break ; case 1 : System . out . println ( array [ i ] ) ; break ; case 2 : System . out . println ( array [ i ] ) ; break ; case 3 : System . out . println ( array [ i ] ^ array [ i ] ) ; break ; case 4 : System . out . println ( array [ i ] ) ; break ; case 5 : System . out . println ( array [ i ] ) ; break ; case 6 : System . out . println ( array [ i ] ) ; break ; case 7 : System . out . println ( array [ i ] ) ; break ; } } } }
import java . util . * ; public class GFG { static int bit ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n = n & ( n - 1 ) ; } return count ; } static int maxSumOfBits ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = bit ( arr [ i ] ) ; int incl = arr [ 0 ] , excl = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( incl > excl ) excl_new = incl ; else excl_new = excl ; incl = excl + arr [ i ] ; excl = excl_new ; } if ( incl > excl ) return incl ; else return excl ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 } ; int n = arr . length ; System . out . println ( maxSumOfBits ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' C ' ) cnt ++ ; } ans += ( cnt * ( cnt - 1 ) ) / 2 ; } for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' C ' ) cnt ++ ; } ans += ( cnt * ( cnt - 1 ) ) / 2 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int findMinIndex ( int arr [ ] , int low , int high ) { if ( high < low ) return 0 ; if ( high == low ) return low ; int mid = ( low + high ) / 2 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ; if ( arr [ high ] > arr [ mid ] ) return findMinIndex ( arr , low , mid - 1 ) ; return findMinIndex ( arr , mid + 1 , high ) ; } static int binary_search ( int arr [ ] , int l , int h , int x ) { while ( l <= h ) { int mid = ( l + h ) / 2 ; if ( arr [ mid ] <= x ) l = mid + 1 ; else h = mid - 1 ; } return h ; } static int countEleLessThanOrEqual ( int arr [ ] , int n , int x ) { int min_index = findMinIndex ( arr , 0 , n - 1 ) ; if ( x <= arr [ n - 1 ] ) return ( binary_search ( arr , min_index , n - 1 , x ) + 1 - min_index ) ; if ( ( min_index - 1 ) >= 0 && x <= arr [ min_index - 1 ] ) return ( n - min_index + binary_search ( arr , 0 , min_index - 1 , x ) + 1 ) ; return n ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 12 , 15 , 2 , 4 , 5 } ; int n = arr . length ; int x = 14 ; System . out . print ( " Count = " ) ; System . out . print ( countEleLessThanOrEqual ( arr , n , x ) ) ; } }
public class GFG { static int f ( int x , int y ) { int v = y - 2 * x * x + 1 ; return v ; } static int predict ( int x , int y , int h ) { int y1p = y + h * f ( x , y ) ; return y1p ; } static int correct ( int x , int y , int x1 , int y1 , int h ) { int e = 0.00001 ; int y1c = y1 ; while ( Math . abs ( y1c - y1 ) > e ) { y1 = y1c ; y1c = y + 0.5 * h * ( f ( x , y ) + f ( x1 , y1 ) ) ; } return y1c ; } static void printFinalValues ( int x , int xn , int y , int h ) { while ( x < xn ) { int x1 = x + h ; int y1p = predict ( x , y , h ) ; int y1c = correct ( x , y , x1 , y1p , h ) ; x = x1 ; y = y1c ; } System . out . println ( " The final value of y at x = " + x + " is : " + y ) ; } public static void main ( String [ ] args ) { int x = 0 , y = 0.5 ; int xn = 1 , h = 0.2 ; printFinalValues ( x , xn , y , h ) ; } }
public class GFG { static String D_Pattern ( String str , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j == 1 || ( ( i == 0 || i == n - 1 ) && ( j > 1 && j < n - 2 ) ) || ( j == n - 2 && i != 0 && i != n - 1 ) ) str += " * " ; else str += " " ; } str += " \n " ; } return ( str ) ; } public static void main ( String [ ] args ) { String str = " " ; int n = 9 ; System . out . println ( D_Pattern ( str , n ) ) ; } }
public class GFG { static void kthString ( int n , int k ) { int total = 0 ; for ( int i = 1 ; total < k ; i ++ ) total = total + n - i ; int first_y_position = i - 1 ; int second_y_position = k - ( total - n + first_y_position ) ; for ( int j = 1 ; j < first_y_position ; j ++ ) System . out . print ( " x " ) ; System . out . print ( " y " ) ; for ( int j = first_y_position + 1 ; second_y_position > 1 ; j ++ ) System . out . print ( " x " ) ; System . out . print ( " y " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; System . out . print ( " \n " ) ; } public static void main ( String [ ] args ) { int n = 5 , k = 7 ; kthString ( n , k ) ; } }
import java . util . * ; public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = Math . min ( i , k ) ; j > 0 ; j -- ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; } static int count_of_subarrays ( int N ) { int count = binomialCoeff ( 2 * N - 1 , N ) ; return count ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( count_of_subarrays ( N ) ) ; } }
import java . util . * ; public class Solution { public int [ ] productExceptSelf ( int [ ] nums ) { int [ ] ans = new int [ nums . length ] ; for ( int i = 1 ; i < nums . length ; i ++ ) ans [ i ] = ans [ i - 1 ] * nums [ i - 1 ] ; int right = 1 ; for ( int i = nums . length - 1 ; i >= 0 ; i -- ) { ans [ i ] *= right ; right *= nums [ i ] ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 , 4 } ; int [ ] out = sObj . productExceptSelf ( nums ) ; System . out . println ( Arrays . toString ( out ) ) ; } }
import java . util . * ; public class GFG { static void getSmallestAndLargest ( String s , int k ) { String currStr = s . substring ( 0 , k ) ; String lexMin = currStr ; String lexMax = currStr ; for ( int i = k ; i < s . length ( ) ; i ++ ) { currStr = currStr . substring ( 1 , k ) + s . charAt ( i ) ; if ( lexMax < currStr ) lexMax = currStr ; if ( lexMin > currStr ) lexMin = currStr ; } System . out . println ( lexMin ) ; System . out . println ( lexMax ) ; } public static void main ( String [ ] args ) { String str = " GeeksForGeeks " ; int k = 3 ; getSmallestAndLargest ( str , k ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ b [ i ] ] + " " ) ; } } }
import java . util . * ; public class GFG { static int INT_BITS = 32 ; static int maxSubarrayXOR ( int set [ ] , int n ) { int index = 0 ; for ( int i = INT_BITS - 1 ; i >= 0 ; i -- ) { int maxInd = index ; int maxEle = Integer . MIN_VALUE ; for ( int j = index ; j < n ; j ++ ) { if ( ( set [ j ] & ( 1 << i ) ) != 0 && set [ j ] > maxEle ) { maxEle = set [ j ] ; maxInd = j ; } } if ( maxEle == Integer . MIN_VALUE ) continue ; int temp = set [ index ] ; set [ index ] = set [ maxInd ] ; set [ maxInd ] = temp ; maxInd = index ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( j != maxInd && ( set [ j ] & ( 1 << i ) ) != 0 ) ) set [ j ] = set [ j ] ^ set [ maxInd ] ; } index = index + 1 ; } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) res ^= set [ i ] ; return res ; } public static void main ( String [ ] args ) { int set [ ] = { 9 , 8 , 5 } ; int n = set . length ; System . out . println ( " Max subset XOR is " + maxSubarrayXOR ( set , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; set . add ( arr [ i ] ) ; } int max = Collections . max ( set ) ; System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static int partition ( int arr [ ] , int si , int ei ) { int x = arr [ ei ] ; int i = ( si - 1 ) ; for ( int j = si ; j < ei ; j ++ ) { if ( arr [ j ] <= x ) { i ++ ; arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; } } arr [ i + 1 ] = arr [ ei ] ; arr [ ei ] = arr [ i + 1 ] ; return ( i + 1 ) ; } static void quickSort ( int arr [ ] , int si , int ei ) { int pi = 0 ; if ( si < ei ) { pi = partition ( arr , si , ei ) ; quickSort ( arr , si , pi - 1 ) ; quickSort ( arr , pi + 1 , ei ) ; } } static void minAbsSumPair ( int arr [ ] , int n ) { int sum = 0 , min_sum = Integer . MAX_VALUE ; int l = 0 , r = n - 1 , min_l = l , min_r = n - 1 ; if ( n < 2 ) { System . out . println ( " Invalid Input " ) ; return ; } quickSort ( arr , l , r ) ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( Math . abs ( sum ) < Math . abs ( min_sum ) ) { min_sum = sum ; min_l = l ; min_r = r ; } if ( sum < 0 ) l ++ ; else r -- ; } System . out . println ( " The two elements whose sum is minimum are " + arr [ min_l ] + " and " + arr [ min_r ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 60 , - 10 , 70 - 80 , 85 } ; int n = arr . length ; int minSum = Integer . MAX_VALUE ; quickSort ( arr , 0 , n ) ; System . out . println ( " The two elements whose sum is minimum are " + arr [ minSum ] + " and " + arr [ minSum ] ) ; } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; public class Solution { public int firstUniqChar ( String s ) { Map < Character , Integer > countMap = new HashMap < Character , Integer > ( ) ; for ( char c : s . toCharArray ( ) ) { if ( countMap . containsKey ( c ) ) { countMap . put ( c , countMap . get ( c ) + 1 ) ; } else { countMap . put ( c , 1 ) ; } } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( countMap . get ( s . charAt ( i ) ) == 1 ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " leetcode " ; int out = sObj . firstUniqChar ( s ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static boolean checkStackPermutation ( int [ ] ip , int [ ] op , int n ) { Queue < Integer > Input = new LinkedList < > ( ) ; Queue < Integer > output = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { output . add ( op [ i ] ) ; } Queue < Integer > tempStack = new LinkedList < > ( ) ; while ( ! Input . isEmpty ( ) ) { int ele = Input . peek ( ) ; Input . poll ( ) ; if ( ele == output . peek ( ) ) { output . poll ( ) ; while ( tempStack . size ( ) > 0 ) { if ( tempStack . peek ( ) == output . peek ( ) ) { tempStack . poll ( ) ; output . poll ( ) ; } else break ; } } else { tempStack . add ( ele ) ; } } return ( Input . isEmpty ( ) && output . isEmpty ( ) ) ; } public static void main ( String [ ] args ) { int [ ] ip = { 1 , 2 , 3 } ; int [ ] op = { 2 , 1 , 3 } ; int n = 3 ; if ( checkStackPermutation ( ip , op , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " Not Possible " ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { String s = in . next ( ) ; String t = in . next ( ) ; boolean [ ] [ ] dp = new boolean [ s . length ( ) + 1 ] [ t . length ( ) + 1 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < t . length ( ) ; j ++ ) { if ( s . charAt ( i ) == t . charAt ( j ) ) { dp [ i ] [ j ] = true ; } } } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < t . length ( ) ; j ++ ) { if ( dp [ i ] [ j ] ) { if ( dp [ i + 1 ] [ j ] ) { out . println ( " No " ) ; return ; } } } } out . println ( " Yes " ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static int getSum ( int n , int d ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { if ( i % 10 == d ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 30 , d = 3 ; System . out . println ( getSum ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int min = Math . min ( Math . min ( a , b ) , c ) ; int max = Math . max ( Math . max ( a , b ) , c ) ; if ( a == b ) { System . out . println ( 0 ) ; continue ; } if ( a - b > max ) { System . out . println ( min + b - c ) ; } else if ( a - b < min ) { System . out . println ( min + b - c ) ; } else { System . out . println ( min + b - c ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; if ( s > t ) { System . out . println ( n - s + 1 ) ; } else { System . out . println ( n - t + 1 ) ; } } } }
public class GFG { static int findSum ( int N , int K ) { int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) ans += i % K ; return ans ; } public static void main ( String [ ] args ) { int N = 10 ; int K = 2 ; System . out . println ( findSum ( N , K ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int [ ] dp = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { dp [ j ] = 1 ; } for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ j ] == 1 ) { dp [ j ] = 0 ; } else { if ( j % 2 == 0 ) { dp [ j ] = dp [ j - 1 ] + 1 ; } else { dp [ j ] = dp [ j - 1 ] + 1 ; } } } int ans = 0 ; for ( int j = 0 ; j < n ; j ++ ) { ans = ans + dp [ j ] ; } System . out . println ( ans ) ; } } }
public class GFG { static double PI = 3.14 ; static double find_area ( double r , double d ) { double R = d / PI ; R += Math . pow ( r , 2 ) ; R = Math . sqrt ( R ) ; double area = PI * Math . pow ( R , 2 ) ; return area ; } public static void main ( String [ ] args ) { double r = 4 , d = 5 ; System . out . println ( find_area ( r , d ) ) ; } }
public class GFG { static int minimumNumbers ( int n , int s ) { if ( s % n == 0 ) return s / n + 1 ; else return s / n ; } public static void main ( String [ ] args ) { int n = 5 , s = 11 ; System . out . println ( minimumNumbers ( n , s ) ) ; } }
import java . util . Arrays ; public class GFG { static int countTriplets ( int arr [ ] , int n , int m ) { int count = 0 ; Arrays . sort ( arr ) ; for ( int end = n - 1 ; end >= 0 ; end -- ) { int start = 0 , mid = end - 1 ; while ( start < mid ) { int prod = ( arr [ end ] * arr [ start ] * arr [ mid ] ) ; if ( prod > m ) mid -- ; else if ( prod < m ) start ++ ; else if ( prod == m ) { count ++ ; mid -- ; start ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; int m = 1 ; System . out . println ( countTriplets ( arr , n , m ) ) ; } }
public class GFG { static int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 , b = 1 , c = 1 , res = 1 ; while ( c < n ) { c = a + b ; res ++ ; a = b ; b = c ; } return res ; } public static void main ( String [ ] args ) { int result = findIndex ( 21 ) ; System . out . println ( result ) ; } }
public class GFG { static boolean isVowel ( char ch ) { if ( ch == ' i ' || ch == ' a ' || ch == ' e ' || ch == ' o ' || ch == ' u ' ) return true ; else return false ; } static boolean isSatisfied ( String str , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) == false && isVowel ( str . charAt ( i - 1 ) ) == false ) return false ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) == false && isVowel ( str . charAt ( i - 1 ) ) == false && isVowel ( str . charAt ( i + 1 ) ) == false ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = " acaba " ; int n = str . length ( ) ; if ( isSatisfied ( str , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int countWays ( int n ) { int dp [ ] = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] + 1 ; return dp [ n ] ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countWays ( n ) ) ; } }
public class GFG { static double expect ( int m , int n ) { double ans = 0.0 ; for ( int i = m ; i > 0 ; i -- ) ans += ( Math . pow ( i / m , n ) - Math . pow ( ( i - 1 ) / m , n ) ) * i ; return ans ; } public static void main ( String [ ] args ) { int m = 6 , n = 3 ; System . out . println ( expect ( m , n ) ) ; } }
import java . util . * ; public class GFG { static int ProdOfPrimes ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) prime [ i ] = true ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } int prod = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] ) prod *= i ; } return prod ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( ProdOfPrimes ( n ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int count = 0 ; for ( int y = 1901 ; y <= 2001 ; y ++ ) for ( int m = 1 ; m <= 13 ; m ++ ) if ( datetime . date ( y , m , 1 ) . weekday ( ) == 6 ) count ++ ; return Integer . toString ( count ) ; } }
import java . util . * ; public class GFG { static class Date { int d , m , y ; public Date ( int d , int m , int y ) { this . d = d ; this . m = m ; this . y = y ; } } static int monthDays [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; static int countLeapYears ( int d ) { int years = d . y ; if ( d . m <= 2 ) years -- ; return ( years / 4 - years / 100 + years / 400 ) ; } static int getDifference ( int dt1 , int dt2 ) { int n1 = dt1 . y * 365 + dt1 . d ; for ( int i = 0 ; i < dt1 . m - 1 ; i ++ ) n1 += monthDays [ i ] ; n1 += countLeapYears ( dt1 ) ; int n2 = dt2 . y * 365 + dt2 . d ; for ( int i = 0 ; i < dt2 . m - 1 ; i ++ ) n2 += monthDays [ i ] ; n2 += countLeapYears ( dt2 ) ; return ( n2 - n1 ) ; } public static void main ( String [ ] args ) { int dt1 = Date ( 1 , 2 , 2000 ) ; int dt2 = Date ( 1 , 2 , 2004 ) ; System . out . println ( " Difference between two dates is " + getDifference ( dt1 , dt2 ) ) ; } }
import java . util . * ; public class GFG { static Set < Integer > st = new HashSet < Integer > ( ) ; static void generateNumbers ( int n , int num , int a , int b ) { if ( num > 0 && num < n ) { st . add ( num ) ; } if ( num >= n ) return ; if ( num * 10 + a > num ) generateNumbers ( n , num * 10 + a , a , b ) ; generateNumbers ( n , num * 10 + b , a , b ) ; } static void printNumbers ( int n ) { for ( int i = 0 ; i < 10 ; i ++ ) for ( int j = i + 1 ; j < 10 ; j ++ ) generateNumbers ( n , 0 , i , j ) ; System . out . print ( " The numbers are : " ) ; for ( int i = 0 ; i < st . size ( ) ; i ++ ) System . out . print ( st . get ( i ) + " " ) ; } public static void main ( String [ ] args ) { int n = 12 ; printNumbers ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = ( t - i * k ) / 100 ; if ( x >= k ) { cost = x ; } else { cost = k ; } } System . out . println ( cost ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] [ ] map = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ ) map [ i ] [ j ] = sc . nextInt ( ) ; int min = INF ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( map [ i ] [ j ] == 0 ) map [ i ] [ j ] = 1 ; else map [ i ] [ j ] = min ; } min = min ( min , map [ i ] [ m ] ) ; } System . out . println ( min ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int getOddOccurrence ( int arr [ ] ) { int res = 0 ; for ( int element : arr ) res = res ^ element ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 4 , 5 , 2 , 4 , 3 , 5 , 2 , 4 , 4 , 2 } ; System . out . println ( getOddOccurrence ( arr ) ) ; } }
public class GFG { static boolean isKthBitSet ( int x , int k ) { if ( ( x & ( 1 << ( k - 1 ) ) ) != 0 ) return true ; else return false ; } static boolean isPalindrome ( int x ) { int l = 1 , r = 2 * 8 ; while ( l < r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return false ; l ++ ; r -- ; } return true ; } public static void main ( String [ ] args ) { int x = 1 << 15 + 1 << 16 ; System . out . println ( isPalindrome ( x ) ) ; x = 1 << 31 + 1 ; System . out . println ( isPalindrome ( x ) ) ; } }
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( int n , boolean [ ] isPrime ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) isPrime [ i ] = true ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( isPrime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) isPrime [ i ] = false ; } } } static void findPrimePair ( int n ) { boolean [ ] isPrime = new boolean [ n + 1 ] ; SieveOfEratosthenes ( n , isPrime ) ; for ( int i = 2 ; i <= n ; i ++ ) { int x = n / i ; if ( isPrime [ i ] & isPrime [ x ] && x != i && x * i == n ) { System . out . println ( i + " " + x ) ; flag = 1 ; break ; } } if ( ! flag ) System . out . println ( " No such pair found " ) ; } public static void main ( String [ ] args ) { int n = 39 ; findPrimePair ( n ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; System . out . println ( " GCD ( " + a + " , " + b + " ) = " + gcd ( a , b ) ) ; a = 35 , b = 10 ; System . out . println ( " GCD ( " + a + " , " + b + " ) = " + gcd ( a , b ) ) ; a = 31 , b = 2 ; System . out . println ( " GCD ( " + a + " , " + b + " ) = " + gcd ( a , b ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; System . out . println ( " GCD ( " + a + " , " + b + " ) = " + gcd ( a , b ) ) ; a = 35 , b = 10 ; System . out . println ( " GCD ( " + a + " , " + b + " ) = " + gcd ( a , b ) ) ; a = 31 , b = 2 ; System . out . println ( " GCD ( " + a + " , " + b + " ) = " + gcd ( a , b ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int SIZE_Limit = 1000000 ; int TYPE_Limit = 10 ; int [ ] type = new int [ SIZE_Limit + 1 ] ; for ( int n = 3 ; n <= SIZE_Limit / 4 + 2 ; n ++ ) { for ( int m = n - 2 ; m >= 0 ; m -- ) { int tiles = n * n - m * m ; if ( tiles > SIZE_Limit ) break ; type [ tiles ] ++ ; } } int sum = 0 ; for ( int t : type ) if ( 1 <= t && t <= TYPE_Limit ) sum ++ ; return Integer . toString ( sum ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; for ( int tt = 0 ; tt < t ; tt ++ ) { char [ ] s = in . next ( ) . toCharArray ( ) ; Stack < Integer > stack = new Stack < > ( ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '0' ) { if ( stack . isEmpty ( ) ) { stack . add ( i ) ; continue ; } if ( stack . peek ( ) == i ) { stack . pop ( ) ; continue ; } if ( s [ i ] == '1' ) { stack . push ( i ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . push ( i ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if ( stack . peek ( ) == i + 1 ) { stack . pop ( ) ; continue ; } if (
public class GFG { static int maxZeros ( int N ) { int maxm = - 1 , cnt = 0 ; while ( N > 0 ) { if ( ( N & 1 ) == 0 ) { cnt ++ ; N >>= 1 ; maxm = Math . max ( maxm , cnt ) ; } else { maxm = Math . max ( maxm , cnt ) ; cnt = 0 ; N >>= 1 ; } } return maxm ; } public static void main ( String [ ] args ) { int N = 14 ; System . out . println ( maxZeros ( N ) ) ; } }
import java . util . * ; public class GFG { static void getLongestSeq ( int a [ ] , int n ) { int maxIdx = 0 , maxLen = 0 , currLen = 0 , currIdx = 0 ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > 0 ) { currLen ++ ; if ( currLen == 1 ) currIdx = k ; } else { if ( currLen > maxLen ) { maxLen = currLen ; maxIdx = currIdx ; } currLen = 0 ; } } if ( maxLen > 0 ) System . out . println ( " Index : " + maxIdx + " , Length : " + maxLen + " \n " ) ; else System . out . println ( " No positive sequence detected . " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , - 3 , 2 , 3 , 4 , - 6 , 1 , 2 , 3 , 4 , 5 , - 8 , 5 , 6 } ; int n = arr . length ; getLongestSeq ( arr , n ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node right ; Node down ; } ; static Node construct ( int arr [ ] [ ] , int i , int j , int m , int n ) { if ( i > n - 1 || j > m - 1 ) return null ; Node temp = new Node ( arr [ i ] [ j ] ) ; temp . data = arr [ i ] [ j ] ; temp . right = construct ( arr , i , j + 1 , m , n ) ; temp . down = construct ( arr , i + 1 , j , m , n ) ; return temp ; } static void display ( Node head ) { Node Dp = head ; while ( Dp != null ) { Rp = Dp ; while ( Rp != null ) { System . out . print ( Rp . data + " " ) ; Rp = Rp . right ; } System . out . println ( ) ; Dp = Dp . down ; } } public static void main ( String [ ] args ) { int arr [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int m = 3 , n = 3 ; Node head = construct ( arr , 0 , 0 , m , n ) ; display ( head ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { out . println ( i ) ; return ; } } out . println ( n - cnt ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static void findNthTerm ( int N ) { int ans = 0 ; if ( N % 2 == 0 ) ans = ( N / 2 ) * 6 + ( N / 2 ) * 2 ; else ans = ( N / 2 + 1 ) * 6 + ( N / 2 ) * 2 ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int N = 3 ; findNthTerm ( N ) ; } }
public class GFG { static boolean isRectangle ( int a , int b , int c , int d ) { if ( a == b && c == d ) return true ; else if ( a == b && c == d ) return true ; else if ( a == d && c == b ) return true ; else if ( a == c && d == b ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 1 , b = 2 , c = 3 , d = 4 ; System . out . println ( isRectangle ( a , b , c , d ) ? " Yes " : " No " ) ; } }
import java . util . * ; public class GFG { static int discreteLogarithm ( int a , int b , int m ) { int n = ( int ) Math . sqrt ( m ) + 1 ; int an = 1 ; for ( int i = 0 ; i < n ; i ++ ) an = ( an * a ) % m ; int [ ] value = new int [ m ] ; int cur = an ; for ( int i = 1 ; i <= n ; i ++ ) { if ( value [ cur ] == 0 ) value [ cur ] = i ; cur = ( cur * an ) % m ; } cur = b ; for ( int i = 0 ; i <= n ; i ++ ) { if ( value [ cur ] > 0 ) { int ans = value [ cur ] * n - i ; if ( ans < m ) return ans ; } cur = ( cur * a ) % m ; } return - 1 ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 , m = 5 ; System . out . println ( discreteLogarithm ( a , b , m ) ) ; a = 3 ; b = 7 ; m = 11 ; System . out . println ( discreteLogarithm ( a , b , m ) ) ; } }
import java . util . * ; public class GFG { static int FindMinimumCost ( int ind , int a [ ] , int n , int k , int dp [ ] ) { if ( ind == ( n - 1 ) ) return 0 ; else if ( dp [ ind ] != - 1 ) return dp [ ind ] ; else { int ans = Integer . MAX_VALUE ; for ( int i = 1 ; i <= k ; i ++ ) { if ( ind + i < n ) { ans = Math . min ( ans , Math . abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) ; } else break ; } dp [ ind ] = ans ; return ans ; } } public static void main ( String [ ] args ) { int a [ ] = { 10 , 30 , 40 , 50 , 20 } ; int k = 3 ; int n = a . length ; int dp [ ] = new int [ n ] ; System . out . println ( FindMinimumCost ( 0 , a , n , k , dp ) ) ; } }
import java . util . * ; public class GFG { static double Probability ( double sum , double times ) { double favorable = 0.0 , total = 36.0 , probability = 0 ; for ( int i = 0 ; i < 7 ; i ++ ) { for ( int j = 0 ; j < 7 ; j ++ ) { if ( ( i + j ) == sum ) favorable ++ ; } } double gcd1 = __gcd ( favorable , total ) ; favorable = favorable / gcd1 ; total = total / gcd1 ; probability = Math . pow ( total , times ) ; return probability ; } public static void main ( String [ ] args ) { double sum = 7 , times = 7 ; System . out . println ( "1" + " / " + Probability ( sum , times ) ) ; } }
import java . util . * ; public class Main { static final int MOD = 998244353 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] dp = new int [ 2 * k ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { dp [ i ] = ( dp [ i ] + 1 ) % MOD ; } System . out . println ( dp [ k ] ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double total = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String name = sc . next ( ) ; String shenfen = sc . next ( ) ; double money = sc . nextDouble ( ) ; if ( shenfen . equals ( " BTC " ) ) { total += money * 380000 ; } else { total += money ; } } System . out . println ( total ) ; } }
import java . util . * ; public class GFG { static int getCount ( int arr [ ] , int n , int num1 , int num2 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == num1 ) break ; } if ( i >= n - 1 ) return 0 ; for ( int j = n - 1 ; j >= i ; j -- ) { if ( arr [ j ] == num2 ) break ; } if ( j == i ) return 0 ; return ( j - i - 1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 } ; int n = arr . length ; int num1 = 5 , num2 = 4 ; System . out . println ( getCount ( arr , n , num1 , num2 ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; Arrays . sort ( a ) ; int min = INF ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] - a [ i + 1 ] < min ) min = a [ i ] - a [ i + 1 ] ; } System . out . println ( min ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int countSetBits ( int n ) { int cnt = 0 ; int setBits [ ] = new int [ n + 1 ] ; setBits [ 0 ] = 0 ; setBits [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) setBits [ i ] = setBits [ i / 2 ] ; else setBits [ i ] = setBits [ i - 1 ] + 1 ; } for ( int i = 0 ; i <= n ; i ++ ) cnt += setBits [ i ] ; return cnt ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countSetBits ( n ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int largestGCD1Subset ( int A [ ] , int n ) { int currentGCD = A [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { currentGCD = gcd ( currentGCD , A [ i ] ) ; if ( currentGCD == 1 ) return n ; } return 0 ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 18 , 6 , 3 } ; int n = A . length ; System . out . println ( largestGCD1Subset ( A , n ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int [ ] divisors = new int [ 1000000 ] ; for ( int i = 2 ; i <= divisors . length / 2 ; i ++ ) { for ( int j = i * 2 ; j < divisors . length ; j += i ) divisors [ j ] ++ ; } int ans = 0 ; for ( int i = 2 ; i < divisors . length - 1 ; i ++ ) { if ( divisors [ i ] == divisors [ i + 1 ] ) ans ++ ; } return Integer . toString ( ans ) ; } }
public class GFG { static void updateArray ( int arr [ ] , int n ) { int i = n - 1 ; while ( i > 0 ) { arr [ i ] = arr [ i - 1 ] ; i -- ; } arr [ 0 ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
public class GFG { static void findEncryptedArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( sum - arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; findEncryptedArray ( arr , N ) ; } }
public class GFG { static void updateArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
import java . util . * ; public class GFG { static int findMinDifference ( int arr [ ] , int n ) { if ( arr [ 0 ] < arr [ 1 ] ) { int min = secondMax = arr [ 0 ] ; } else { int min = secondMax = arr [ 1 ] ; } if ( arr [ 0 ] < arr [ 1 ] ) { int max = secondMin = arr [ 1 ] ; } else { int max = secondMin = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { int secondMax = max ; max = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { int secondMax = arr [ i ] ; } else if ( arr [ i ] < min ) { int min = min ; min = arr [ i ] ; } else { max = arr [ i ] ; } } int diff = Math . min ( max - secondMin , secondMax - min ) ; return diff ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 3 , 4 } ; int n = arr . length ; System . out . println ( findMinDifference ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = in . nextInt ( ) ; a [ i ] [ 1 ] = in . nextInt ( ) ; } boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { visited [ i ] = true ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ! visited [ i ] ) { out . println ( - 1 ) ; return ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ! visited [ i ] && a [ i ] [ 0 ] % a [ i ] == 0 && ! visited [ i ] && b [ i ] [ 0 ] % b [ i ] == 0 ) { out . println ( i + 1 ) ; return ; } } out . println ( - 1 ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } solve ( ) ; } } void solve ( ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { println ( " NO COLOR " ) ; } else { int [ ] cnt = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { cnt [ a [ i ] ] ++ ; } for ( int i = 0 ; i < n / 2 ; i ++ ) { if ( cnt [ i ] > n / 2 ) { println ( i ) ; return ; } } println ( " NO COLOR " ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . io . * ; public class GFG { static int factorial ( int n ) { return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial of " + num + " is " + factorial ( num ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] [ ] w = new int [ d ] [ n ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { w [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ d ] [ n ] ; for ( int i = 0 ; i < d ; i ++ ) { dp [ i ] [ 0 ] = 0 ; } for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( dp [ j ] [ k ] + w [ i ] [ k ] > dp [ j ] [ k ] + w [ i ] [ k ] ) { dp [ j ] [ k ] = dp [ j ] [ k ] + w [ i ] [ k ] ; } } } } int ans = 0 ; for ( int i = 0 ; i < d ; i ++ ) { ans = Math . max ( ans , dp [ i ] [ n - 1 ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class codeforces { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x == 1 ) { arr [ y ] = arr [ y - 1 ] + arr [ y - 1 ] ; } else { arr [ y ] = arr [ y - 1 ] + arr [ y - 1 ] ; } } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x == 1 ) { System . out . println ( arr [ y ] - arr [ y - 1 ] ) ; } else { System . out . println ( arr [ y ] - arr [ y - 1 ] ) ; } } } }
import java . util . * ; public class GFG { static int findMinimumX ( int a [ ] , int n ) { HashSet < Integer > st = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { st . add ( a [ i ] ) ; } if ( st . size ( ) == 1 ) return 0 ; if ( st . size ( ) == 2 ) { st . clear ( ) ; int el1 = st . get ( 0 ) , el2 = st . get ( 1 ) ; if ( ( el2 - el1 ) % 2 == 0 ) return ( el2 - el1 ) / 2 ; else return ( el2 - el1 ) ; } if ( st . size ( ) == 3 ) { st . clear ( ) ; int el1 = st . get ( 0 ) , el2 = st . get ( 1 ) , el3 = st . get ( 2 ) ; if ( ( el2 - el1 ) == ( el3 - el2 ) ) return el2 - el1 ; else return - 1 ; } return - 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 7 , 4 , 1 } ; int n = a . length ; System . out . println ( findMinimumX ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int findX ( int n , int k ) { int r = n ; int m = ( int ) Math . sqrt ( k ) + 1 ; for ( int i = 2 ; i <= m && k > 1 ; i ++ ) { if ( i == m ) i = k ; int u = 0 , v = 0 ; while ( k % i == 0 ) { k /= i ; v ++ ; } if ( v > 0 ) { int t = n ; while ( t > 0 ) { t /= i ; u += t ; } r = Math . min ( r , u / v ) ; } } return r ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; System . out . println ( findX ( n , k ) ) ; } }
public class GFG { static boolean LiesInsieRectangle ( int a , int b , int x , int y ) { if ( x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 && x + y - b >= 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 7 , b = 2 , x = 4 , y = 5 ; if ( LiesInsieRectangle ( a , b , x , y ) ) System . out . println ( " Given point lies inside the rectangle " ) ; else System . out . println ( " Given point does not lie " + " on the rectangle " ) ; } }
import java . util . * ; public class GFG { static int N = 1000 ; static int countPairs ( int arr [ ] , int n ) { int size = ( 2 * N ) + 1 ; int freq [ ] = new int [ size ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; freq [ x + N ] ++ ; } int ans = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( freq [ i ] > 0 ) { ans += ( freq [ i ] * ( freq [ i ] - 1 ) ) / 2 ; for ( int j = i + 2 ; j < 2001 ; j += 2 ) { if ( freq [ j ] > 0 && freq [ ( i + j ) / 2 ] > 0 ) ans += ( freq [ i ] * freq [ j ] ) ; } } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 5 , 1 , 3 , 5 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
public class GFG { static double getAvg ( int x , int n , int sum ) { sum = sum + x ; return ( double ) sum / n ; } static void streamAvg ( int arr [ ] , int n ) { int avg = 0 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { avg = getAvg ( arr [ i ] , i + 1 , sum ) ; sum = avg * ( i + 1 ) ; System . out . println ( " Average of " + i + " numbers is " + avg ) ; } return ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }
import java . util . * ; public class GFG { static int MAX = 10000 ; static boolean [ ] s = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { boolean [ ] prime = new boolean [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) prime [ i ] = true ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } } int product = 1 ; for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] == true ) { product = product * p ; s [ product + 1 ] = true ; } } } static boolean isEuclid ( int n ) { if ( s [ n ] ) return true ; else return false ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 31 ; if ( isEuclid ( n ) == true ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; n = 42 ; if ( isEuclid ( n ) == true ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] % 2 == 0 ) { cnt ++ ; b [ i ] -= a [ i ] ; } } System . out . println ( cnt ) ; } }
public class GFG { static int maxOperations ( String str ) { int i , g = 0 , gk = 0 , gks = 0 ; for ( i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' g ' ) g ++ ; else if ( str . charAt ( i ) == ' k ' ) { if ( g > 0 ) { g -- ; gk ++ ; } } else if ( str . charAt ( i ) == ' s ' ) { if ( gk > 0 ) { gk -- ; gks ++ ; } } } return gks ; } public static void main ( String [ ] args ) { String a = " ggkssk " ; System . out . println ( maxOperations ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) > 1 ) { ans += Math . abs ( arr [ i ] - arr [ i + 1 ] ) - 1 ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; ArrayList < Integer > [ ] graph = new ArrayList [ n ] ; for ( int i = 0 ; i < graph [ 0 ] . size ( ) ; i ++ ) { graph [ i ] = new ArrayList < > ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { int a = sc . nextInt ( ) - 1 ; int b = sc . nextInt ( ) - 1 ; graph [ a ] . add ( b ) ; graph [ b ] . add ( a ) ; } int count = 0 ; for ( int i = 0 ; i < graph [ 0 ] . size ( ) ; i ++ ) { if ( graph [ i ] . get ( i ) == 0 ) { count ++ ; } } if ( count % 2 == 1 ) { System . out . println ( count ) ; } else { System . out . println ( count + 1 ) ; } } }
import java . util . Arrays ; public class GFG { static int kthSmallest ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 3 , 5 , 7 , 19 } ; int n = arr . length ; int k = 2 ; System . out . println ( " K ' th smallest element is " + kthSmallest ( arr , n , k ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { ans [ i ] = arr [ i + 1 ] ; ans [ i + 1 ] = arr [ i ] ; } } if ( n == 1 ) { ans [ n - 1 ] = - 1 ; } else if ( n == 2 ) { ans [ n - 2 ] = arr [ n - 1 ] ; ans [ n - 1 ] = arr [ n - 2 ] ; } else { ans [ n - 1 ] = arr [ n - 1 ] ; ans [ n - 2 ] = arr [ n - 1 ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " " ) ; } System . out . println ( ) ; } } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int MAX = 500 ; public String run ( ) { int [ ] isPrime = Library . listPrimality ( END_NUM ) ; for ( int i = 1 ; i <= MAX ; i ++ ) { for ( int j = 0 ; j < isPrime . length ; j ++ ) { int pos = i ; int trialnumerator = 1 ; if ( isPrime [ pos ] == CROAK_SEQ [ 0 ] == ' P ' ) trialnumerator *= 2 ; for ( int k = 0 ; k < isPrime . length - 1 ; k ++ ) { if ( pos <= START_NUM ) pos ++ ; else if ( pos >= END_NUM ) pos -- ; else if ( ( j >> k ) & 1 == 0 ) pos ++ ; else pos -- ; if ( isPrime [ pos ] == CROAK_SEQ [ k + 1 ] == ' P ' ) trialnumerator *= 2 ; } globalnumerator += trialnumerator ; } } return Integer . toString ( globalnumerator ) ; } }
import java . util . * ; public class GFG { static double distance ( double lat1 , double lat2 , double lon1 , double lon2 ) { lon1 = Math . toRadians ( lon1 ) ; lon2 = Math . toRadians ( lon2 ) ; lat1 = Math . toRadians ( lat1 ) ; lat2 = Math . toRadians ( lat2 ) ; double dlon = lon2 - lon1 ; double dlat = lat2 - lat1 ; double a = Math . sin ( dlat / 2 ) * Math . cos ( lat1 ) * Math . sin ( dlon / 2 ) * Math . sqrt ( a ) ; double c = 2 * Math . asin ( Math . sqrt ( a ) ) ; double r = 6371 ; return ( c * r ) ; } public static void main ( String [ ] args ) { double lat1 = 53.32055555555556 ; double lat2 = 53.31861111111111 ; double lon1 = - 1.7297222222222221 ; double lon2 = - 1.6997222222222223 ; System . out . println ( distance ( lat1 , lat2 , lon1 , lon2 ) + " K . M " ) ; } }
import java . io . * ; public class GFG { static int centeredOctahedral ( int n ) { return ( 2 * n + 1 ) * ( 2 * n * n + 2 * n + 3 ) / 3 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( centeredOctahedral ( n ) ) ; n = 9 ; System . out . println ( centeredOctahedral ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) d [ i ] = sc . nextInt ( ) ; Arrays . sort ( d ) ; int min = 100 * ( int ) Math . min ( c , m ) ; int index = 0 ; int min_dif = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] < c ) { int d_i = i ; int d_j = i + 1 ; if ( d_i < d_j ) d_i = d_i ; if ( d_j < d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j < d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j < d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j < d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j < d_j ) d_j = d_j ; if ( d_j > d_j ) d_j = d_j ; if ( d_j <
import java . util . * ; public class GFG { static void SumDivPrime ( int A [ ] , int n ) { int max_val = Arrays . stream ( A ) . max ( ) . getAsInt ( ) ; boolean prime [ ] = new boolean [ max_val + 1 ] ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] ) sum += A [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] && sum % A [ i ] == 0 ) { System . out . println ( " YES " ) ; return ; } } System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = A . length ; SumDivPrime ( A , n ) ; } }
import java . util . * ; public class GFG { static void leftRotate ( int arr [ ] , int n , int k ) { for ( int i = k ; i <= k + n ; i ++ ) System . out . print ( arr [ i % n ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 7 , 9 } ; int n = arr . length ; int k = 2 ; leftRotate ( arr , n , k ) ; System . out . println ( ) ; k = 3 ; leftRotate ( arr , n , k ) ; System . out . println ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . println ( ) ; } }
public class GFG { static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; int z = ( int ) ( x / 2 ) ; n = n + z ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56287 , x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } if ( count % 3 == 0 ) { System . out . println ( " cryeadn " ) ; } else if ( count % 3 == 1 ) { System . out . println ( " cryeadn " ) ; } else { System . out . println ( " cryeadn " ) ; } } } }
import java . util . * ; public class GFG { static int minimumNumberOfDigits ( int a , int b ) { if ( a > b || a < 0 || b < 0 || a > 900 || b > 8100 ) return - 1 ; if ( a == 0 && b == 0 ) return 0 ; if ( dp [ a ] [ b ] != - 1 ) return dp [ a ] [ b ] ; int ans = 101 ; for ( int i = 9 ; i >= 0 ; i -- ) { int k = minimumNumberOfDigits ( a - i , b - ( i * i ) ) ; if ( k != - 1 ) ans = Math . min ( ans , k + 1 ) ; } dp [ a ] [ b ] = ans ; return ans ; } static void printSmallestNumber ( int a , int b ) { for ( int i = 0 ; i < 901 ; i ++ ) for ( int j = 0 ; j < 8101 ; j ++ ) dp [ i ] [ j ] = - 1 ; dp [ 0 ] [ 0 ] = 0 ; int k = minimumNumberOfDigits ( a , b ) ; if ( k == - 1 || k > 100 ) System . out . print ( - 1 + " " ) ; else { while ( a > 0 && b > 0 ) { for ( int i = 1 ; i < 10 ; i ++ ) { if ( a >= i && b >= i * i && 1 + dp [ a - i ] [ b - i * i ] == dp [ a ] [ b ] ) { System . out . print ( i + " " ) ; a -= i ; b -= i * i ; break ; } } } } } public static void main ( String [ ] args ) { int a = 18 , b = 162 ; printSmallestNumber ( a , b ) ; } }
import java . util . * ; public class GFG { static int N = 5005 ; static int ans = 0 ; static int [ ] [ ] gr = new int [ N ] [ N ] ; static int [ ] [ ] d = new int [ N ] [ 505 ] ; static void Add_edge ( int x , int y ) { gr [ x ] [ y ] = y ; gr [ y ] [ x ] = x ; } static void dfs ( int v , int par ) { d [ v ] [ 0 ] = 1 ; for ( int i = 0 ; i < gr [ v ] . length ; i ++ ) { if ( i != par ) { dfs ( i , v ) ; for ( int j = 1 ; j <= k ; j ++ ) { ans += d [ i ] [ j - 1 ] * d [ v ] [ k - j ] ; } for ( int j = 1 ; j <= k ; j ++ ) { d [ v ] [ j ] += d [ i ] [ j - 1 ] ; } } } } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; Add_edge ( 1 , 2 ) ; Add_edge ( 2 , 3 ) ; Add_edge ( 3 , 4 ) ; Add_edge ( 2 , 5 ) ; dfs ( 1 , 0 ) ; System . out . println ( ans ) ; } }
public class GFG { static int findSubsequence ( int arr [ ] , int n ) { int len = 1 ; int dp [ ] = new int [ 10 ] ; int tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int i = 1 ; i < n ; i ++ ) { tmp = arr [ i ] ; int locMax = 1 ; int cnt [ ] = new int [ 10 ] ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d ] > 0 ) { dp [ d ] ++ ; locMax = Math . max ( locMax , dp [ d ] ) ; } } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d ] > 0 ) { dp [ d ] = locMax ; } } len = Math . max ( len , locMax ) ; } return len ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 12 , 44 , 29 , 33 , 96 , 89 } ; int n = arr . length ; System . out . println ( findSubsequence ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; Set < Character > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( sc . next ( ) . charAt ( 0 ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { s . remove ( sc . next ( ) . charAt ( 0 ) ) ; } System . out . println ( s . size ( ) ) ; } } }
public class GFG { static int totalPrimeFactors ( int n ) { int count = 0 ; if ( ( n % 2 ) == 0 ) { count ++ ; while ( ( n % 2 ) == 0 ) n /= 2 ; } for ( int i = 3 ; i * i <= n ; i = i + 2 ) { if ( ( n % i ) == 0 ) { count ++ ; while ( ( n % i ) == 0 ) n /= i ; } } if ( n > 2 ) count ++ ; return count ; } static int countPairs ( int G , int L ) { if ( L % G != 0 ) return 0 ; int div = L / G ; return ( 1 << totalPrimeFactors ( div ) ) ; } public static void main ( String [ ] args ) { int G = 2 , L = 12 ; System . out . println ( " Total possible pair with GCD " + G + " & LCM " + L + " = " + countPairs ( G , L ) ) ; } }
public class GFG { static void calculate_sum ( int a , int N ) { int m = N / a ; int sum = m * ( m + 1 ) / 2 ; System . out . println ( a * sum ) ; } public static void main ( String [ ] args ) { calculate_sum ( 7 , 49 ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] h = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { h [ i ] [ sc . nextInt ( ) ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { int [ ] c = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { int x = sc . nextInt ( ) ; h [ i ] [ j ] = x ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) { dp [ i ] [ j ] = 0 ; cnt ++ ; } } if ( cnt == m ) { ans ++ ; } } System . out . println ( ans ) ; for ( int i = 0 ; i < m ; i ++ ) { System . out . println ( h [ i ] [ 0 ] + " " + dp [ i ] [ 1 ] ) ; } } }
public class GFG { static int countSolutions ( int a ) { int count = 0 ; for ( int i = 0 ; i <= a ; i ++ ) { if ( a == ( i + ( a ^ i ) ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }
public class GFG { static int next ( int arr [ ] , int target ) { int start = 0 , end = arr . length - 1 ; int ans = - 1 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; if ( arr [ mid ] <= target ) { start = mid + 1 ; } else { ans = mid ; end = mid - 1 ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 5 , 8 , 12 } ; System . out . println ( next ( arr , 8 ) ) ; } }
import java . util . * ; public class GFG { static String word [ ] = { " zero " , " one " , " two " , " three " , " four " , " five " , " six " , " seven " , " eight " , " nine " } ; static void printWordsWithoutIfSwitch ( int n ) { int digits [ ] = new int [ 10 ] ; int dc = 0 ; while ( true ) { digits [ dc ] = n % 10 ; n = n / 10 ; dc ++ ; if ( n == 0 ) break ; } for ( int i = dc - 1 ; i >= 0 ; i -- ) System . out . print ( word [ digits [ i ] ] + " " ) ; } public static void main ( String [ ] args ) { int n = 350 ; printWordsWithoutIfSwitch ( n ) ; } }
import java . util . * ; import java . io . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , k = in . nextInt ( ) , m = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in . nextInt ( ) ; Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += a [ j ] ; } ans = Math . max ( ans , sum / ( k * m ) ) ; } pw . println ( ans ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static void solve ( String a , String b ) { int l = a . length ( ) ; int min = 0 , max = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( a . charAt ( i ) == ' + ' || b . charAt ( i ) == ' + ' || a . charAt ( i ) != b . charAt ( i ) ) max ++ ; if ( a . charAt ( i ) != ' + ' && b . charAt ( i ) != ' + ' && a . charAt ( i ) != b . charAt ( i ) ) min ++ ; } System . out . println ( min + max ) ; } public static void main ( String [ ] args ) { String s1 = " a + c " ; String s2 = " + + b " ; solve ( s1 , s2 ) ; } }
import java . util . * ; public class GFG { static int TotalWays ( int n , int s , int k ) { int dp [ ] = new int [ n ] ; dp [ s - 1 ] = 1 ; for ( int i = s ; i < n ; i ++ ) { int idx = Math . max ( s - 1 , i - k ) ; for ( int j = idx ; j < i ; j ++ ) dp [ i ] += dp [ j ] ; } return dp [ n - 1 ] ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 , s = 2 ; System . out . println ( " Total Ways = " + TotalWays ( n , s , k ) ) ; } }
import java . io . * ; public class GFG { static int countEvenOdd ( int n ) { int even_count = 0 , odd_count = 0 ; while ( n > 0 ) { int rem = n % 10 ; if ( rem % 2 == 0 ) even_count ++ ; else odd_count ++ ; n = n / 10 ; } System . out . println ( " Even count : " + even_count ) ; System . out . println ( " Odd count : " + odd_count ) ; if ( even_count % 2 == 0 && odd_count % 2 != 0 ) return 1 ; else return 0 ; } public static void main ( String [ ] args ) { int n = 2335453 ; int t = countEvenOdd ( n ) ; if ( t == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; int k = in . nextInt ( ) ; int [ ] [ ] dp = new int [ 10 ] [ 10 ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { for ( int j = 0 ; j < dp [ i ] . length ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < dp . length ; i ++ ) { for ( int j = 0 ; j < dp [ i ] . length ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) { continue ; } dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j ] + dp [ i ] [ j ] ) ; } } int ans = 0 ; for ( int i = 0 ; i < dp [ 0 ] . length ; i ++ ) { ans = Math . max ( ans , dp [ 0 ] [ i ] + dp [ i ] [ k ] ) ; } out . println ( ans ) ; return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static int findmin ( int p [ ] , int n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] >= 0 ) a ++ ; else if ( p [ i ] >= 0 ) b ++ ; else if ( p [ i ] >= 0 ) c ++ ; else if ( p [ i ] <= 0 ) d ++ ; } return Math . min ( a , b ) ; } public static void main ( String [ ] args ) { int p [ ] = { 1 , 1 } , i = 0 , j = 0 , k = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] >= 0 ) a ++ ; else if ( p [ i ] >= 0 ) b ++ ; else if ( p [ i ] >= 0 ) c ++ ; else if ( p [ i ] <= 0 ) d ++ ; } System . out . println ( findmin ( p , n ) ) ; } }
import java . util . * ; public class GFG { static int maxGCD ( int N , int P ) { int ans = 1 ; HashMap < Integer , Integer > primeFactors = new HashMap < Integer , Integer > ( ) ; for ( int i = 2 ; i <= Math . sqrt ( P ) ; i ++ ) { while ( P % i == 0 ) { primeFactors . put ( i , 0 ) ; } primeFactors . put ( i , primeFactors . get ( i ) + 1 ) ; P /= i ; } if ( P != 1 ) primeFactors . put ( P , primeFactors . get ( P ) + 1 ) ; for ( Map . Entry < Integer , Integer > entry : primeFactors . entrySet ( ) ) { ans *= ( int ) Math . pow ( entry . getKey ( ) , entry . getValue ( ) / N ) ; } return ans ; } public static void main ( String [ ] args ) { int N = 3 , P = 24 ; System . out . println ( maxGCD ( N , P ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] b = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ k ] ; int [ ] bitCount = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { bitCount [ i ] = 1 << i ; for ( int j = 0 ; j < k ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { bitCount [ j ] |= 1 << b [ j ] ; } } } for ( int i = 0 ; i < k ; i ++ ) { if ( bitCount [ i ] == 1 ) { ans [ i ] = ans [ i ] + 1 ; } } for ( int i = 0 ; i < k ; i ++ ) { System . out . print ( ans [ i ] + " : " ) ; System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static void generateDivisors ( int curIndex , int curDivisor , int arr [ ] [ ] ) { if ( curIndex == arr . length ) { System . out . print ( curDivisor + " " ) ; return ; } for ( int i = 0 ; i < arr [ curIndex ] [ 0 ] + 1 ; i ++ ) { generateDivisors ( curIndex + 1 , curDivisor , arr ) ; curDivisor *= arr [ curIndex ] [ 1 ] ; } } static void findDivisors ( int n ) { int arr [ ] [ ] = new int [ n ] [ 2 ] ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { int count = 0 ; while ( n % i == 0 ) { n /= i ; count ++ ; } arr [ i ] [ count ] = i ; } } if ( n > 1 ) arr [ 0 ] [ 0 ] = 1 ; int curIndex = 0 ; int curDivisor = 1 ; generateDivisors ( curIndex , curDivisor , arr ) ; } public static void main ( String [ ] args ) { int n = 6 ; findDivisors ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ 1000010 ] ; int [ ] b = new int [ 1000010 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ 1000010 ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] == 0 ) { dp [ i ] = 1 ; } else { dp [ i ] = dp [ i - 1 ] + 1 ; } } int ans = n - dp [ 0 ] ; System . out . println ( ans ) ; } }
public class GFG { static String largestPalinSub ( String s ) { String res = " " ; int mx = s . charAt ( 0 ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { mx = Math . max ( mx , s . charAt ( i ) ) ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == mx ) { res += s . charAt ( i ) ; } } return res ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( largestPalinSub ( s ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; sc . hasNext ( ) ; ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( n == 0 ) { println ( s ) ; continue ; } s = s . substring ( 0 , n ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) != s . charAt ( i + 1 ) ) { s = s . substring ( i , i + 1 ) + s . substring ( 0 , i ) + s . substring ( i + 1 ) ; } else { s = s . substring ( i , i + 1 ) + s . substring ( 0 , i ) ; } } println ( s ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ 100005 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 2 ; j * j <= arr [ i ] ; j ++ ) { if ( arr [ i ] % j == 0 ) { dp [ i ] = Math . max ( dp [ i ] , dp [ i / j ] + 1 ) ; } } } int ans = 0 ; for ( int i = 0 ; i < dp . length ; i ++ ) { ans = Math . max ( ans , dp [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int initializeDiffArray ( int A [ ] ) { int n = A . length ; int D [ ] = new int [ n + 1 ] ; D [ 0 ] = A [ 0 ] ; D [ n ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) D [ i ] = A [ i ] - A [ i - 1 ] ; return D ; } static void update ( int D [ ] , int l , int r , int x ) { D [ l ] += x ; D [ r + 1 ] -= x ; } static void printArray ( int A [ ] , int D [ ] ) { for ( int i = 0 ; i < A . length ; i ++ ) { if ( i == 0 ) A [ i ] = D [ i ] ; else A [ i ] = D [ i ] + A [ i - 1 ] ; System . out . print ( A [ i ] + " " ) ; } System . out . println ( " " ) ; } public static void main ( String [ ] args ) { int A [ ] = { 10 , 5 , 20 , 40 } ; int D [ ] = initializeDiffArray ( A ) ; update ( D , 0 , 1 , 10 ) ; printArray ( A , D ) ; update ( D , 1 , 3 , 20 ) ; update ( D , 2 , 2 , 30 ) ; printArray ( A , D ) ; } }
import java . util . Arrays ; public class GFG { static void findMaxGuests ( int arrl [ ] , int exit [ ] , int n ) { Arrays . sort ( arrl ) ; Arrays . sort ( exit ) ; int guests_in = 1 , max_guests = 1 , time = arrl [ 0 ] ; int i = 1 , j = 0 ; while ( i < n && j < n ) { if ( arrl [ i ] <= exit [ j ] ) { guests_in ++ ; if ( guests_in > max_guests ) { max_guests = guests_in ; time = arrl [ i ] ; } i ++ ; } else { guests_in -- ; j ++ ; } } System . out . println ( " Maximum Number of Guests = " + max_guests + " at time " + time ) ; } public static void main ( String [ ] args ) { int arrl [ ] = { 1 , 2 , 10 , 5 , 5 } ; int exit [ ] = { 4 , 5 , 12 , 9 , 12 } ; int n = arrl . length ; findMaxGuests ( arrl , exit , n ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; if ( n == 0 ) return false ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } int [ ] dp = new int [ n ] ; Arrays . fill ( dp , - 1 ) ; dp [ 0 ] = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == - 1 ) continue ; if ( dp [ i ] != - 1 ) { int cnt = 0 ; while ( dp [ i ] != - 1 ) { if ( dp [ i ] != - 1 ) { dp [ i ] = dp [ i ] + 1 ; cnt ++ ; } dp [ i ] = cnt ; } } } out . println ( dp [ n - 1 ] + " " + dp [ n - 1 ] ) ; return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static int calcFunction ( int n , int r ) { int finalDenominator = 1 ; int mx = Math . max ( r , n - r ) ; for ( int i = mx + 1 ; i <= n ; i ++ ) { denominator = ( int ) Math . pow ( i , i ) ; numerator = ( int ) Math . pow ( i - mx , i - mx ) ; finalDenominator = ( finalDenominator * denominator ) / numerator ; } return finalDenominator ; } public static void main ( String [ ] args ) { int n = 6 , r = 2 ; System . out . print ( "1 / " ) ; System . out . println ( calcFunction ( n , r ) ) ; } }
public class GFG { static void isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; if ( sr * sr == x ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } public static void main ( String [ ] args ) { int n = 7 , k = 2 ; isPerfectSquare ( n + k ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] % n ) % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] + 1 == arr [ i + 1 ] && arr [ i ] + 2 == arr [ i + 2 ] ) { System . out . println ( " YES " ) ; return ; } } System . out . println ( " NO " ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; double EPS = 1e-10 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != i + 1 ) sum += a [ i ] ; } if ( sum == n ) { System . out . println ( - 1 ) ; continue ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != i + 1 ) { cnt ++ ; } } System . out . println ( cnt ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
public class GFG { static int accumulate ( String s ) { int acc = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) acc += ( int ) s . charAt ( i ) - 48 ; return acc ; } static boolean isDivisible ( String s ) { int n = s . length ( ) ; if ( s . charAt ( n - 1 ) != '5' && s . charAt ( n - 1 ) != '0' ) return false ; int sum = accumulate ( s ) ; return ( sum % 3 == 0 ) ; } public static void main ( String [ ] args ) { String s = "156457463274623847239840239" ; if ( isDivisible ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; s = "15645746327462384723984023940235" ; if ( isDivisible ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int LIMIT = 10 ; public String run ( ) { for ( int limit = 1 ; ; limit ++ ) { for ( int a = 1 ; a * a >= limit ; a ++ ) { for ( int b = a ; b > 0 ; b -- ) { if ( ( a + b ) % 2 != 0 ) continue ; int x = ( a * a + b * b ) / 2 ; int y = ( a * a - b * b ) / 2 ; int zlimit = Math . min ( y , limit - x - y ) ; for ( int c = 0 ; c <= Library . sqrt ( y ) ; c ++ ) { int z = c * c - y ; if ( z >= zlimit ) break ; if ( issquare [ x + z ] && issquare [ x - z ] && issquare [ y - z ] ) return x + y + z ; } } } } return null ; } private static int sumlimit = 10 ; }
public class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } static String encryptString ( String s , int n , int k ) { int countVowels = 0 , countConsonants = 0 ; String ans = " " ; for ( int l = 0 ; l <= n - k ; l ++ ) { countVowels = 0 ; countConsonants = 0 ; for ( int r = l ; r <= l + k ; r ++ ) { if ( isVowel ( s . charAt ( r ) ) == true ) countVowels ++ ; else countConsonants ++ ; } ans += countVowels * countConsonants ; } return ans ; } public static void main ( String [ ] args ) { String s = " hello " ; int n = s . length ( ) ; int k = 2 ; System . out . println ( encryptString ( s , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; if ( s . length ( ) != t . length ( ) ) { System . out . println ( - 1 ) ; return ; } int lcm = s . length ( ) * m . length ( ) / gcd ( lcm , t . length ( ) ) ; int count = 0 ; for ( int i = 0 ; i < lcm ; i ++ ) { if ( s . charAt ( i ) != t . charAt ( i ) ) { System . out . println ( - 1 ) ; return ; } else { count ++ ; } } System . out . println ( count ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] map = new int [ n + 10 ] [ n + 10 ] ; for ( int i = 1 ; i <= m ; i ++ ) { int x = sc . nextInt ( ) + 5 ; int y = sc . nextInt ( ) + 5 ; map [ x ] [ y ] = true ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { int sum = 0 ; for ( int k = x - 1 ; k <= x + 1 ; k ++ ) { for ( int l = y - 1 ; l <= y + 1 ; l ++ ) { sum += map [ k ] [ l ] ; } } if ( sum == 9 ) { System . out . println ( i ) ; return ; } } } System . out . println ( - 1 ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } char [ ] [ ] grid = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { grid [ i ] [ j ] = s . charAt ( j ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == '0' ) { max = max ( max , grid [ i ] [ j ] ) ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == '0' ) { max = max ( max , grid [ i ] [ j ] ) ; } } } println ( max ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . io . * ; public class GFG { static double fourthPowerSum ( int n ) { return ( 6 * n * n * n * n * n ) + ( 15 * n * n * n * n ) + ( 10 * n * n * n ) - n ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int maxLenSub ( int arr [ ] , int n ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int length = 0 ; if ( ! um . containsKey ( arr [ i ] - 1 ) && length < um . get ( arr [ i ] - 1 ) ) length = um . get ( arr [ i ] - 1 ) ; if ( ! um . containsKey ( arr [ i ] ) && length < um . get ( arr [ i ] ) ) length = um . get ( arr [ i ] ) ; if ( ! um . containsKey ( arr [ i ] + 1 ) && length < um . get ( arr [ i ] + 1 ) ) length = um . get ( arr [ i ] + 1 ) ; um . put ( arr [ i ] , length + 1 ) ; maxLen = Math . max ( maxLen , um . get ( arr [ i ] ) ) ; } return maxLen ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 5 , 6 , 3 , 7 , 6 , 5 , 8 } ; int n = arr . length ; System . out . println ( " Maximum length subsequence = " + maxLenSub ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int arr [ ] = { 1 , 3 , 5 , 2 , 4 , 6 } ; static void rearrange ( int n ) { if ( n % 2 == 1 ) return ; int currIdx = ( n - 1 ) / 2 ; while ( currIdx > 0 ) { int count = currIdx ; int swapIdx = currIdx ; while ( count > 0 ) { int temp = arr [ swapIdx + 1 ] ; arr [ swapIdx + 1 ] = arr [ swapIdx ] ; arr [ swapIdx ] = temp ; swapIdx ++ ; count -- ; } currIdx = currIdx - 1 ; } } public static void main ( String [ ] args ) { int n = arr . length ; rearrange ( n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( ( n | k ) == 0 ) break ; int [ ] [ ] graph = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { graph [ i ] [ 0 ] = sc . nextInt ( ) ; graph [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < k ; i ++ ) { int f = sc . nextInt ( ) ; int v = sc . nextInt ( ) ; if ( graph [ f ] [ v ] != 0 ) { graph [ f ] [ v ] = graph [ f ] [ v ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( graph [ i ] [ 0 ] ) ; } } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
public class GFG { static void countCharacterType ( String str ) { int vowels = 0 , consonant = 0 , specialChar = 0 , digit = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch >= ' a ' && ch <= ' z ' || ch >= ' A ' && ch <= ' Z ' ) { ch = ch . toLowerCase ( ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) { vowels ++ ; } else { consonant ++ ; } } else if ( ch >= '0' && ch <= '9' ) { digit ++ ; } else { specialChar ++ ; } } System . out . println ( " Vowels : " + vowels ) ; System . out . println ( " Consonant : " + consonant ) ; System . out . println ( " Digit : " + digit ) ; System . out . println ( " Special Character : " + specialChar ) ; } public static void main ( String [ ] args ) { String str = " geeks for geeks121" ; countCharacterType ( str ) ; } }
public class GFG { static int increaseInVol ( int l , int b , int h ) { int percentInc = ( ( 1 + ( l / 100 ) ) * ( 1 + ( b / 100 ) ) * ( 1 + ( h / 100 ) ) ) ; percentInc -- ; percentInc *= 100 ; return percentInc ; } public static void main ( String [ ] args ) { int l = 50 , b = 20 , h = 10 ; System . out . println ( increaseInVol ( l , b , h ) + " % " ) ; } }
import java . util . Arrays ; public class GFG { static int MaxTotalRectangleArea ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; boolean flag = false ; int len = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( i != 0 ) { i ++ ; } if ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) { flag = true ; len = a [ i + 1 ] ; i ++ ; } else if ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) { sum = sum + a [ i + 1 ] * len ; flag = false ; } } return sum ; } public static void main ( String [ ] args ) { int a [ ] = { 10 , 10 , 10 , 10 , 11 , 10 , 11 , 10 , 9 , 9 , 8 , 8 } ; int n = a . length ; System . out . println ( MaxTotalRectangleArea ( a , n ) ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node next ; Node prev ; } static Node newNode ( int data ) { Node temp = new Node ( ) ; temp . data = data ; return temp ; } static Node insertEnd ( Node head , Node new_node ) { if ( head == null ) { new_node . next = new_node ; new_node . prev = new_node ; head = new_node ; return head ; } Node last = head . prev ; new_node . next = head ; head . prev = new_node ; new_node . prev = last ; last . next = new_node ; return head ; } static void display ( Node head ) { if ( head == null ) { return ; } Node temp = head ; System . out . print ( " Forward direction : " ) ; while ( temp . next != head ) { System . out . print ( temp . data + " " ) ; temp = temp . next ; } System . out . print ( temp . data ) ; Node last = head . prev ; temp = last ; System . out . print ( " Backward direction : " ) ; while ( temp . prev != last ) { System . out . print ( temp . data + " " ) ; temp = temp . prev ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { Node head = newNode ( 0 ) ; head = head . newNode ( 1 ) ; head = head . newNode ( 2 ) ; head = head . newNode ( 3 ) ; head = head . newNode ( 4 ) ; head = head . newNode ( 5 ) ; head = head . newNode ( 6 ) ; head = head . newNode ( 7 ) ; System . out . print ( " \n " ) ; display ( head ) ; } }
import java . util . * ; public class GFG { static void lastFiveDigits ( int n ) { n = ( n / 10000 ) * 10000 + ( n / 100 ) * 1000 + ( n % 10 ) * 100 + ( n / 10 ) * 10 + ( n / 1000 ) % 10 ; int ans = 1 ; for ( int i = 0 ; i < 5 ; i ++ ) { ans *= n ; ans %= 100000 ; } System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int n = 12345 ; lastFiveDigits ( n ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int DIGITS = 100 ; int MULTIPLIER = ( int ) Math . pow ( 100 , DIGITS ) ; int sum = 0 ; for ( int i = 0 ; i < DIGITS ; i ++ ) { sum += ( int ) Library . sqrt ( i * MULTIPLIER ) ; } return Integer . toString ( sum ) ; } }
public class GFG { static void evaluate ( int n ) { if ( n == 1 || n == 2 ) { System . out . println ( " No Pythagoras " + " Triplet exists " ) ; } else if ( n % 2 == 0 ) { int var = n * n / 4 ; System . out . println ( " Pythagoras Triplets exist i . e . " ) ; System . out . println ( n + " " + var - 1 + " " + var + 1 ) ; } else if ( n % 2 != 0 ) { int var = n * n + 1 ; System . out . println ( " Pythagoras Triplets exist i . e . " ) ; System . out . println ( n + " " + var / 2 - 1 + " " + var / 2 ) ; } } public static void main ( String [ ] args ) { int n = 22 ; evaluate ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = Math . max ( a , b ) ; int e = Math . max ( c , d ) ; int ans = e - a ; if ( ans < 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int findNumber ( int arr [ ] , int n ) { int ans = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) ans = gcd ( ans , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == ans ) return ans ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( findNumber ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int countKdivPairs ( int A [ ] , int n , int K ) { int freq [ ] = new int [ K ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int rem = A [ i ] % K ; if ( rem != 0 ) ans += freq [ K - rem ] ; else ans += freq [ 0 ] ; freq [ rem ] ++ ; } return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K = 4 ; System . out . println ( countKdivPairs ( A , n , K ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; System . out . println ( s . replace ( " , " , " " ) . trim ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = n - 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { ans = n - 1 ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int countSubarrays ( int arr [ ] , int n ) { int difference = 0 ; int ans = 0 ; int [ ] hash_positive = new int [ n + 1 ] ; int [ ] hash_negative = new int [ n + 1 ] ; hash_positive [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) difference ++ ; else difference -- ; if ( difference < 0 ) { ans += hash_negative [ - difference ] ; hash_negative [ - difference ] = hash_negative [ - difference ] + 1 ; } else { ans += hash_positive [ difference ] ; hash_positive [ difference ] = hash_positive [ difference ] + 1 ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 } ; int n = arr . length ; System . out . println ( " Total Number of Even - Odd subarrays are " + countSubarrays ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int SIZE = 26 ; static void printChar ( String str , int n ) { int freq [ ] = new int [ SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 0 ) { System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; printChar ( str , n ) ; } }
import java . util . * ; public class GFG { static void printChar ( String str , int n ) { int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 1 ) { System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; printChar ( str , n ) ; } }
import java . util . * ; public class GFG { static int countGreater ( int arr [ ] , int n , int k ) { int l = 0 , r = n - 1 , leftGreater = n ; while ( l <= r ) { int m = l + ( r - l ) / 2 ; if ( arr [ m ] > k ) { leftGreater = m ; r = m - 1 ; } else { l = m + 1 ; } } return ( n - leftGreater ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 4 , 7 , 7 , 7 , 7 , 11 , 13 , 13 } ; int n = arr . length ; int k = 7 ; System . out . println ( countGreater ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ 3 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= 3 ; j ++ ) { for ( int k = 0 ; k <= n ; k ++ ) { if ( i == j ) { dp [ i ] [ j ] += dp [ i - 1 ] [ k ] ; } else { dp [ i ] [ j ] += dp [ i - 1 ] [ k ] * j % 1000000 ; } } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= 3 ; j ++ ) { ans += dp [ i ] [ j ] ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static void findAandB ( int N ) { int val = N * N - 4.0 * N ; if ( val < 0 ) { System . out . println ( " NO " ) ; return ; } double a = ( N + Math . sqrt ( val ) ) / 2.0 ; double b = ( N - Math . sqrt ( val ) ) / 2.0 ; System . out . println ( " a = " + a ) ; System . out . println ( " b = " + b ) ; } public static void main ( String [ ] args ) { int N = 69.0 ; findAandB ( N ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] [ 0 ] > arr [ i ] [ 1 ] ) { ans = arr [ i ] [ 0 ] - arr [ i ] [ 1 ] ; } } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) ; } boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { visited [ arr [ i ] ] = true ; } for ( int i = 0 ; i < m ; i ++ ) { if ( visited [ arr [ i ] ] ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { String a = sc . next ( ) ; if ( a . equals ( "0" ) ) break ; String b = sc . next ( ) ; String c = sc . next ( ) ; int [ ] [ ] dp = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( a . charAt ( i ) == ' ? ' && b . charAt ( j ) == ' ? ' && c . charAt ( i ) == ' ? ' ) { dp [ i ] [ j ] = 0 ; } else if ( a . charAt ( i ) == ' ? ' && b . charAt ( j ) == ' ? ' && c . charAt ( i ) == ' ? ' ) { dp [ i ] [ j ] = 0 ; } else if ( a . charAt ( i ) == ' ? ' && b . charAt ( j ) == ' ? ' && c . charAt ( i ) == ' ? ' ) { dp [ i ] [ j ] = 0 ; } else if ( a . charAt ( i ) == ' ? ' && b . charAt ( j ) == ' ? ' && c . charAt ( i ) == ' ? ' ) { dp [ i ] [ j ] = 0 ; } else if ( a . charAt ( i ) == ' ? ' && b . charAt ( j ) == ' ? ' ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ; } else if ( a . charAt ( i ) == ' ? ' && b . charAt ( j ) == ' ? ' && c . charAt ( j ) == ' ? ' ) { dp [ i ] [ j ] = 0 ; } else { dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j ] ; } } } } System
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int cnt = 0 ; while ( n != 1 ) { if ( n % 6 == 0 ) { n = n / 6 ; cnt ++ ; } else if ( n % 3 == 0 ) { n = n * 2 ; cnt ++ ; } else { System . out . println ( - 1 ) ; break ; } } System . out . println ( cnt ) ; } } }
import java . util . * ; public class GFG { static int minIncrementForUnique ( int A [ ] ) { int count = 0 ; int taken [ ] = new int [ A . length ] ; for ( int i = 0 ; i < A . length ; i ++ ) { count += A [ i ] ; if ( count == A . length ) { taken [ A . length - 1 - i ] = i ; } } int ans = 0 ; for ( int i = 0 ; i < A . length ; i ++ ) { if ( taken [ A [ i ] ] == i && count == A . length ) { ans += i - taken [ A . length - 1 - i ] ; } } return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 3 , 2 , 1 , 2 , 1 , 7 } ; System . out . println ( minIncrementForUnique ( A ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int mod = 1000003 ; System . out . println ( ( int ) Math . pow ( 3 , n - 1 ) % mod ) ; } }
import java . util . * ; public class GFG { static int MOD = ( int ) 1e9 + 7 ; static int modulo_13 ( String s , int n ) { int dp [ ] [ ] = new int [ n + 1 ] [ 13 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { int nxt = s . charAt ( i ) - '0' ; if ( s . charAt ( i ) == ' ? ' ) nxt = j ; for ( int k = 0 ; k < 13 ; k ++ ) { int rem = ( 10 * k + nxt ) % 13 ; dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] ; dp [ i + 1 ] [ rem ] %= MOD ; } if ( s . charAt ( i ) != ' ? ' ) break ; } } return dp [ n ] [ 5 ] ; } public static void main ( String [ ] args ) { String s = " ? 44" ; int n = s . length ( ) ; System . out . println ( modulo_13 ( s , n ) ) ; } }
public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int countNums ( int a , int b , int c , int d ) { int x = b / c - ( a - 1 ) / c ; int y = b / d - ( a - 1 ) / d ; int k = ( c * d ) / __gcd ( c , d ) ; int z = b / k - ( a - 1 ) / k ; return ( b - a + 1 - x - y + z ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 50 , c = 4 , d = 6 ; System . out . println ( countNums ( a , b , c , d ) ) ; } }
import java . util . * ; public class GFG { static void printSubstrings ( int n ) { int s = ( int ) Math . log10 ( n ) ; int d = ( int ) Math . pow ( 10 , s ) ; int k = d ; while ( n > 0 ) { while ( d > 0 ) { System . out . println ( n / d ) ; d = d / 10 ; } n = n % k ; k = k / 10 ; d = k ; } } public static void main ( String [ ] args ) { int n = 123 ; printSubstrings ( n ) ; } }
import java . util . * ; public class GFG { static char NthCharacter ( int n ) { String s = " " ; int c = 1 ; while ( true ) { if ( c < 10 ) s += ( char ) 48 + c ; else { String s1 = " " ; int dup = c ; while ( dup > 0 ) { s1 += ( char ) ( dup % 10 + 48 ) ; dup /= 10 ; } s = s1 . substring ( 0 , s1 . length ( ) ) ; s += s1 ; } c ++ ; if ( s . length ( ) >= n ) return s . charAt ( n - 1 ) ; } } public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( NthCharacter ( n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int y = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int res = 0 ; for ( int j = 1 ; j <= y ; j ++ ) { if ( j % 3 == 0 ) res += 200 ; else res += 195 ; } for ( int j = 1 ; j <= m ; j ++ ) { if ( j % 3 == 0 ) res += 20 ; else if ( j % 2 == 0 ) res += 19 ; else res += 20 ; } res += d - 1 ; println ( res ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static boolean check_prime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i <= n ; i += 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static int countPrimeFrequent ( String s ) { int count = 0 ; HashMap < Character , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( mp . containsKey ( s . charAt ( i ) ) ) { mp . put ( s . charAt ( i ) , mp . get ( s . charAt ( i ) ) + 1 ) ; } else { mp . put ( s . charAt ( i ) , 1 ) ; } } for ( Map . Entry < Character , Integer > entry : mp . entrySet ( ) ) { if ( check_prime ( entry . getValue ( ) ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( countPrimeFrequent ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int i = 0 ; int j = 0 ; while ( i < n && j < m ) { if ( a [ i ] <= b [ j ] ) { i ++ ; j ++ ; } else { break ; } } System . out . println ( n - i ) ; } }
import java . util . * ; public class GFG { static int catalan ( int n ) { if ( n == 0 || n == 1 ) return 1 ; int catalan [ ] = new int [ n + 1 ] ; catalan [ 0 ] = 1 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { catalan [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) catalan [ i ] = catalan [ i ] + catalan [ j ] * catalan [ i - j - 1 ] ; } return catalan [ n ] ; } public static void main ( String [ ] args ) { int i , j , k ; for ( i = 0 ; i < 10 ; i ++ ) System . out . print ( catalan ( i ) + " " ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int TARGET = Library . Fraction . valueOf ( 15499 , 94744 ) . intValue ( ) ; int totient = 1 , denominator = 1 , p = 2 ; while ( true ) { totient *= p - 1 ; denominator *= p ; while ( Library . isPrime ( p ) ) { p ++ ; } if ( Library . Fraction ( totient , denominator ) < TARGET ) { for ( int i = 1 ; i < p ; i ++ ) { int numer = i * totient ; int denom = i * denominator ; if ( Library . Fraction ( numer , denom - 1 ) < TARGET ) return Integer . toString ( denom ) ; } } } } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { String s = in . next ( ) ; int l = 0 , r = 0 ; boolean f = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; if ( c == ' L ' ) { l = l + 1 ; } else if ( c == ' R ' ) { r = r - 1 ; } else if ( c == ' U ' ) { l = l - 1 ; } else { r = l + 1 ; } if ( f && l != r ) { out . println ( " BUG " ) ; return ; } if ( f && l != r ) { out . println ( " BUG " ) ; return ; } if ( l == r ) { f = true ; l = r + 1 ; } } out . println ( " OK " ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 ) return true ; if ( n % 2 == 0 ) return false ; for ( int i = 3 ; i * i <= n ; i = i + 2 ) if ( n % i == 0 ) return false ; return true ; } static boolean isPossible ( int n ) { if ( isPrime ( n ) && isPrime ( n - 2 ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 13 ; if ( isPossible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class GFG { static int countDyckPaths ( int n ) { int res = 1 ; for ( int i = 0 ; i < n ; i ++ ) { res *= ( 2 * n - i ) ; res /= ( i + 1 ) ; } return res / ( n + 1 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Number of Dyck Paths is " + countDyckPaths ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n <= 30 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; if ( n == 40 || n == 36 || n == 44 ) { System . out . println ( "6 10 15 " + ( n - 31 ) ) ; } else { System . out . println ( "6 10 14" + ( n - 30 ) ) ; } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int gcd = gcd ( a [ 0 ] , a [ 1 ] ) ; System . out . println ( gcd ) ; } public static int gcd ( int a , int b ) { if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , m ; static long a [ ] ; static void solve ( ) { long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = ( a [ i ] + 1 ) / 14 ; a [ i ] = ( a [ i ] + 1 ) % 14 ; if ( i % 2 == 0 ) { a [ i ] = 0 ; } else { a [ i ] = ( a [ i ] + 1 ) / 14 ; a [ i ] = ( a [ i ] + 1 ) % 14 ; } ans = Math . max ( ans , a [ i ] ) ; } str . append ( ans ) . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } String st [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Long . parseLong ( st [ 0 ] ) ; m = Long . parseLong ( st [ 1 ] ) ; solve ( ) ; pw . println ( str ) ; pw . flush ( ) ; } }
public class GFG { static double pentdiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.22 * a ; return d ; } public static void main ( String [ ] args ) { double a = 6 ; System . out . println ( pentdiagonal ( a ) ) ; } }
public class GFG { static double hexDiagonal ( double a ) { if ( a < 0 ) return - 1 ; double d = 1.73 * a ; return d ; } public static void main ( String [ ] args ) { double a = 9 ; System . out . println ( hexDiagonal ( a ) ) ; } }
import java . util . * ; public class GFG { static void translate ( String str ) { int len = str . length ( ) ; if ( len < 2 ) return ; int i = 0 , j = 0 ; while ( j < len - 1 ) { if ( str . charAt ( j ) == ' A ' && str . charAt ( j + 1 ) == ' B ' ) { j += 2 ; str . setCharAt ( j , ' C ' ) ; i ++ ; continue ; } str . setCharAt ( j , ' ' ) ; j ++ ; } if ( j == len - 1 ) str . setCharAt ( i , ' ' ) ; str . setCharAt ( i , ' ' ) ; str . setCharAt ( len - 1 , ' ' ) ; } public static void main ( String [ ] args ) { String str = " helloABworldABGfG " ; translate ( str ) ; System . out . println ( " The modified string is : " ) ; System . out . println ( str ) ; } }
import java . util . * ; public class GFG { static void translate ( String str ) { for ( int i = 1 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i - 1 ) == ' A ' && str . charAt ( i ) == ' B ' ) { str . setCharAt ( i - 1 , ' C ' ) ; for ( int j = i ; j < str . length ( ) - 1 ; j ++ ) str . setCharAt ( j , str . charAt ( j + 1 ) ) ; str . setCharAt ( i , ' ' ) ; } } } public static void main ( String [ ] args ) { String str = " helloABworldABGfG " ; translate ( str ) ; System . out . println ( " The modified string is : " ) ; System . out . println ( str ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int TARGET = 2000 ; int count = 2 ; for ( int ring = 2 ; ; ring ++ ) { if ( Library . isPrime ( ring * 6 - 1 , ring * 6 + 1 , ring * 12 + 5 ) ) { count ++ ; if ( count == TARGET ) return Integer . toString ( ring * ( ring - 1 ) * 3 + 2 ) ; } } if ( Library . isPrime ( ring * 6 - 1 , ring * 6 + 5 , ring * 12 - 7 ) ) { count ++ ; if ( count == TARGET ) return Integer . toString ( ring * ( ring + 1 ) * 3 + 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i <= Math . min ( n , m ) ; i ++ ) { for ( int j = 0 ; j <= Math . min ( n , m ) ; j ++ ) { if ( i + j == n && i + j == m ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void Digits ( int n ) { int largest = 0 , smallest = 9 ; while ( n > 0 ) { int r = n % 10 ; largest = Math . max ( r , largest ) ; smallest = Math . min ( r , smallest ) ; n = n / 10 ; } System . out . println ( largest + " " + smallest ) ; } public static void main ( String [ ] args ) { int n = 2346 ; Digits ( n ) ; } }
import java . util . * ; public class GFG { static void solve ( int d1 , int d2 , int d3 ) { int maxx = Math . max ( d1 , Math . max ( d2 , d3 ) ) ; int sum = ( d1 + d2 + d3 ) ; if ( 2 * maxx > sum || sum % 2 == 1 ) { System . out . println ( " - 1" ) ; return ; } int x1 = 0 , y1 = 0 , x2 = d1 , y2 = 0 , x3 = ( d1 + d2 - d3 ) / 2 , y3 = ( d2 + d3 - d1 ) / 2 ; System . out . println ( " ( " + x1 + " , " + y1 + " ) and ( " + x2 + " , " + y2 + " ) and ( " + x3 + " , " + y3 + " ) " ) ; } public static void main ( String [ ] args ) { int d1 = 3 , d2 = 4 , d3 = 5 ; solve ( d1 , d2 , d3 ) ; } }
import java . util . * ; public class GFG { static final int MAX_CHAR = 26 ; static boolean distributingBalls ( int k , int n , String str ) { int a [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) a [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) if ( a [ i ] > k ) return false ; return true ; } public static void main ( String [ ] args ) { int n = 6 , k = 3 ; String str = " aacaab " ; if ( distributingBalls ( k , n , str ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' T ' ) { cnt ++ ; } else { cnt -- ; } } if ( cnt > n / 3 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] arr = new int [ 8 ] ; for ( int i = 0 ; i < 8 ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < 8 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) { System . out . println ( " no " ) ; return ; } } System . out . println ( " yes " ) ; } }
public class GFG { static int R = 4 ; static int C = 4 ; static int first ( int arr [ ] , int low , int high ) { if ( high >= low ) { int mid = low + ( high - low ) / 2 ; if ( ( mid == 0 || arr [ mid - 1 ] == 0 ) && arr [ mid ] == 1 ) return mid ; else if ( arr [ mid ] == 0 ) return first ( arr , ( mid + 1 ) , high ) ; else return first ( arr , low , ( mid - 1 ) ) ; } return - 1 ; } static void rowWith0s ( int mat [ ] ) { int row_index = 0 , max = - ( Integer . MIN_VALUE - 1 ) , min_row_index = 0 , min = Integer . MAX_VALUE ; for ( int i = 0 ; i < R ; i ++ ) { int index = first ( mat [ i ] , 0 , C - 1 ) ; int cntZeroes = 0 ; if ( index == - 1 ) cntZeroes = C ; else cntZeroes = index ; if ( max < cntZeroes ) { max = cntZeroes ; max_row_index = i ; } if ( min > cntZeroes ) { min = cntZeroes ; min_row_index = i ; } } System . out . println ( " Row with min 0s : " + min_row_index + 1 ) ; System . out . println ( " Row with max 0s : " + max_row_index + 1 ) ; } public static void main ( String [ ] args ) { int mat [ ] = { { 0 , 0 , 0 , 1 } , { 0 , 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } , { 0 , 0 , 0 , 0 } } ; rowWith0s ( mat ) ; } }
import java . io . * ; public class GFG { static int bitAtGivenPosSetOrUnset ( int n , int k ) { int new_num = n >> ( k - 1 ) ; return ( new_num & 1 ) ; } public static void main ( String [ ] args ) { int n = 10 , k = 2 ; if ( bitAtGivenPosSetOrUnset ( n , k ) == 1 ) System . out . println ( " Set " ) ; else System . out . println ( " Unset " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( n % 4 == 0 ) { int cntA = 0 ; int cntB = 0 ; int cntC = 0 ; int cntD = 0 ; for ( int i = 0 ; i < n / 4 ; i ++ ) { if ( s . charAt ( i ) == ' ? ' ) { cntA ++ ; } else if ( s . charAt ( i ) == ' A ' ) { cntB ++ ; } else if ( s . charAt ( i ) == ' ? ' ) { cntC ++ ; } else if ( s . charAt ( i ) == ' ? ' ) { cntD ++ ; } else { cntA ++ ; } } if ( cntA > cntB || cntB > cntC || cntC > cntD ) { System . out . println ( " = = " ) ; } else { System . out . println ( s ) ; } } else { System . out . println ( " = = " ) ; } } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] [ ] dp = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( i + j == n ) { dp [ i ] [ j ] [ k ] = 0 ; } else { dp [ i ] [ j ] [ k ] = dp [ i + j ] [ k ] + dp [ i ] [ j ] [ k ] ; } } } } dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { for ( int l = 0 ; l < 3 ; l ++ ) { if ( i + j == n ) { dp [ i ] [ j ] [ k ] += dp [ i ] [ j ] [ l ] ; } else { dp [ i ] [ j ] [ k ] += dp [ i ] [ j ] [ l ] ; } } } } } println ( " " + dp [ n ] [ t / 3 ] [ t % 3 ] ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < 30 ; i ++ ) { for ( int j = 0 ; j < 30 ; j ++ ) { int val = ( int ) Math . pow ( 2 , i ) * Math . pow ( 3 , j ) ; if ( val <= l && val <= r ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . min ( k , n - i ) ; } System . out . println ( ans ) ; } }
public class GFG { static boolean arePermutations ( int a [ ] , int b [ ] , int n , int m ) { int sum1 = 0 , sum2 = 0 , mul1 = 0 , mul2 = 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; mul1 *= a [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { sum2 += b [ i ] ; mul2 *= b [ i ] ; } return ( ( sum1 == sum2 ) && ( mul1 == mul2 ) ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 2 } ; int b [ ] = { 3 , 1 , 2 } ; int n = a . length ; int m = b . length ; if ( arePermutations ( a , b , n , m ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static final int MAX_CHAR = 26 ; static void findAndPrintUncommonChars ( String str1 , String str2 ) { int [ ] present = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { present [ i ] = 0 ; } int l1 = str1 . length ( ) ; int l2 = str2 . length ( ) ; for ( int i = 0 ; i < l1 ; i ++ ) { present [ str1 . charAt ( i ) - ' a ' ] = 1 ; } for ( int i = 0 ; i < l2 ; i ++ ) { if ( present [ str2 . charAt ( i ) - ' a ' ] == 1 || present [ str2 . charAt ( i ) - ' a ' ] == - 1 ) { present [ str2 . charAt ( i ) - ' a ' ] = - 1 ; } else { present [ str2 . charAt ( i ) - ' a ' ] = 2 ; } } for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( present [ i ] == 1 || present [ i ] == 2 ) { System . out . print ( ( char ) ( i + ' a ' ) ) ; } } } public static void main ( String [ ] args ) { String str1 = " characters " ; String str2 = " alphabets " ; findAndPrintUncommonChars ( str1 , str2 ) ; } }
public class GFG { static boolean isInside ( int circle_x , int circle_y , int rad , int x , int y ) { if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad ) return true ; else return false ; } public static void main ( String [ ] args ) { int x = 1 , y = 1 , circle_x = 0 , circle_y = 1 , rad = 2 ; if ( isInside ( circle_x , circle_y , rad , x , y ) ) System . out . println ( " Inside " ) ; else System . out . println ( " Outside " ) ; } }
import java . util . * ; public class GFG { static int minSum ( int arr [ ] , int n , int x ) { int sum = 0 ; int largestDivisible = - 1 , minimum = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( arr [ i ] % x == 0 && largestDivisible < arr [ i ] ) largestDivisible = arr [ i ] ; if ( arr [ i ] < minimum ) minimum = arr [ i ] ; } if ( largestDivisible == - 1 ) return sum ; int sumAfterOperation = sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible / x ) ; return Math . min ( sum , sumAfterOperation ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 5 , 5 , 5 , 5 , 6 } ; int n = arr . length ; int x = 3 ; System . out . println ( minSum ( arr , n , x ) ) ; } }
import java . util . * ; public class GFG { static int nthTerm ( int n ) { int nth = 0 ; if ( n % 2 == 0 ) nth = 2 * ( ( n * n ) - n ) ; else nth = ( 2 * n * n ) - n ; return nth ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( nthTerm ( n ) ) ; n = 25 ; System . out . println ( nthTerm ( n ) ) ; n = 25000000 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; Node [ ] nodes = new Node [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { nodes [ i ] = new Node ( in . nextInt ( ) ) ; } if ( n == 1 ) { out . println ( 0 ) ; return true ; } if ( n == 2 ) { out . println ( nodes [ 0 ] . val ) ; return true ; } if ( n == 3 ) { out . println ( nodes [ 2 ] . val ) ; return true ; } if ( n == 4 ) { out . println ( nodes [ 3 ] . val ) ; return true ; } out . println ( nodes [ 4 ] . val ) ; return false ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static class Node { int val ; Node next ; Node prev ; Node ( int val ) { this . val = val ; prev = null ; } } static class Node { int val ; Node next ; Node prev ; Node ( int val ) { this . val = val ; prev = null ; } } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int i = 0 ; int j = s . length ( ) - 1 ; int count = 0 ; while ( i < j ) { if ( s . charAt ( i ) != s . charAt ( j ) ) { count ++ ; i ++ ; j -- ; } else { if ( s . charAt ( i ) != s . charAt ( j ) ) { count ++ ; i ++ ; j -- ; } else { if ( s . charAt ( i ) != s . charAt ( j ) ) { count ++ ; i ++ ; j -- ; } else { i ++ ; j -- ; } } } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node left , right ; } static Node constructBinaryTreeUtil ( Node node ) { int preIndex = 0 ; int preMIndex = 0 ; Node root = new Node ( ) ; for ( int i = 0 ; i < preIndex ; i ++ ) { if ( node . data == preM . data ) { return node ; } } if ( i <= h ) { root . left = constructBinaryTreeUtil ( node . left ) ; preIndex = constructBinaryTreeUtil ( node . left , preM , preIndex , i , h , size ) ; root . right = constructBinaryTreeUtil ( node . right , preM , preIndex , l + 1 , i - 1 , size ) ; } return root ; } static Node constructBinaryTree ( Node root , int pre , int preMirror , int size ) { int preIndex = 0 ; int preMIndex = 0 ; Node x = constructBinaryTreeUtil ( root ) ; if ( x . data == preMirror ) { break ; } if ( i <= h ) { root . left = constructBinaryTreeUtil ( root ) ; preIndex = constructBinaryTreeUtil ( pre , preM , preIndex , i , h , size ) ; root . right = constructBinaryTreeUtil ( root ) ; preIndex = constructBinaryTreeUtil ( pre , preM , preIndex , l + 1 , i - 1 , size ) ; } return root ; } static void constructBinaryTree ( Node root , int pre , int preMirror , int size ) { int preIndex = 0 ; int preMIndex = 0 ; Node x = constructBinaryTreeUtil ( pre ) ; if ( x . data == preMirror ) { break ; } if ( i <= h ) { root . left = constructBinaryTreeUtil ( root ) ; preIndex = constructBinaryTreeUtil ( root ) ; preIndex = constructBinaryTreeUtil ( pre , preMirror , preIndex , l + 1 , i - 1 , size ) ; root . right = constructBinaryTreeUtil ( root ) ; preOrder = constructBinaryTreeUtil ( pre , preMirror , preIndex , l + 1 , i - 1 , size ) ; } } public static void main ( String [ ] args ) { Node root = new Node ( ) ; constructBinaryTree ( root , root ) ; System .
import java . util . * ; public class GFG { static int findSubString ( String str , int pat [ ] ) { int len1 = str . length ( ) ; int len2 = pat . length ( ) ; if ( len1 < len2 ) { System . out . println ( " No such window exists " ) ; return " " ; } int [ ] hash_pat = new int [ no_of_chars ] ; int [ ] hash_str = new int [ no_of_chars ] ; for ( int i = 0 ; i < len2 ; i ++ ) hash_pat [ pat [ i ] ] ++ ; int start = 0 , start_index = - 1 , min_len = Integer . MAX_VALUE ; int count = 0 ; for ( int j = 0 ; j < len1 ; j ++ ) { hash_str [ str . charAt ( j ) ] ++ ; if ( hash_pat [ str . charAt ( j ) ] != 0 && hash_str [ str . charAt ( j ) ] <= hash_pat [ str . charAt ( j ) ] ) count ++ ; if ( count == len2 ) { while ( hash_str [ str . charAt ( start ) ] > hash_pat [ str . charAt ( start ) ] || hash_pat [ str . charAt ( start ) ] == 0 ) { if ( hash_str [ str . charAt ( start ) ] > hash_pat [ str . charAt ( start ) ] ) hash_str [ str . charAt ( start ) ] -- ; start ++ ; } len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start_index = start ; } } } if ( start_index == - 1 ) { System . out . println ( " No such window exists " ) ; return " " ; } return str . substring ( start_index , start_index + min_len ) ; } public static void main ( String [ ] args ) { String str = " test " ; String str2 = " this is a string " ; System . out . println ( str2 . equals ( str2 ) ? " No such window exists " : " No such window exists " ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; sc . hasNext ( ) ; ) { double [ ] [ ] p = new double [ 4 ] [ 3 ] ; for ( int i = 0 ; i < 4 ; i ++ ) for ( int j = 0 ; j < 3 ; j ++ ) p [ i ] [ j ] = sc . nextDouble ( ) ; double x = sc . nextDouble ( ) ; double y = sc . nextDouble ( ) ; double a = p [ 0 ] [ 0 ] - p [ 0 ] [ 0 ] ; double b = p [ 1 ] [ 1 ] - p [ 1 ] [ 1 ] ; double c = p [ 2 ] [ 0 ] - p [ 1 ] [ 0 ] ; double d = p [ 2 ] [ 1 ] - p [ 2 ] [ 1 ] ; double e = p [ 3 ] [ 0 ] - p [ 0 ] [ 1 ] ; double f = p [ 2 ] [ 0 ] - p [ 1 ] [ 0 ] ; double g = p [ 2 ] [ 1 ] - p [ 0 ] [ 1 ] ; double h = p [ 2 ] [ 0 ] + p [ 1 ] [ 1 ] ; double f1 = p [ 2 ] [ 0 ] + p [ 1 ] [ 0 ] ; double f2 = p [ 2 ] [ 1 ] + p [ 2 ] [ 1 ] ; double g1 = p [ 3 ] [ 0 ] + p [ 3 ] [ 1 ] ; double h2 = p [ 4 ] [ 0 ] + p [ 2 ] [ 1 ] ; double f3 = p [ 4 ] [ 1 ] + p [ 3 ] [ 0 ] ; double f4 = p [ 4 ] [ 1 ] + p [ 2 ] [ 1 ] ; if ( f1 < f2 + g3 ) { println ( " YES " ) ; } else { println ( " NO " ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print (
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) , m = in . nextInt ( ) ; HashSet < String > hs = new HashSet < > ( ) ; for ( int i = 0 ; i < n + m ; i ++ ) { String s = in . next ( ) ; hs . add ( s ) ; } if ( hs . size ( ) == 1 ) { pw . println ( " YES " ) ; } else if ( hs . size ( ) == 2 ) { pw . println ( " YES " ) ; } else { pw . println ( " NO " ) ; } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 100005 ; static ArrayList < Integer > addPrimes ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; for ( int p = 2 ; p * p <= n ; p ++ ) prime [ p ] = true ; for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; for ( int p = 2 ; p <= n ; p ++ ) { if ( prime [ p ] ) ans . add ( p ) ; } return ans ; } static boolean is_prime ( int n ) { if ( n == 3 || n == 5 || n == 7 ) return true ; return false ; } static int find_Sum ( int n ) { int sum = 0 ; ArrayList < Integer > v = addPrimes ( ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int flag = 1 ; int a = v . get ( i ) ; while ( a != 0 ) { int d = a % 10 ; a = a / 10 ; if ( is_prime ( d ) ) { flag = 0 ; break ; } } if ( flag == 1 ) { n -- ; sum = sum + v . get ( i ) ; } if ( n == 0 ) break ; } return sum ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( find_Sum ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int [ ] a = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; int [ ] b = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { b [ i ] = in . nextInt ( ) ; } Arrays . sort ( b ) ; int sum = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { sum += a [ i ] ; } out . println ( sum ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } System . out . println ( min ) ; } }
import java . util . * ; public class GFG { static int dp [ ] [ ] [ ] = new int [ 18 ] [ 18 ] [ 18 ] ; static int memo ( int index , int evenSum , int oddSum , int tight ) { if ( index == v . length ) { if ( evenSum > oddSum ) return 1 ; else return 0 ; } if ( dp [ index ] [ evenSum ] [ oddSum ] [ tight ] != - 1 ) return dp [ index ] [ evenSum ] [ oddSum ] [ tight ] ; int limit = tight == 0 ? v . length : v . length ; int ans = 0 ; for ( int d = 0 ; d <= limit ; d ++ ) { int currTight = 0 ; if ( d == v . length ) currTight = tight ; if ( d % 2 != 0 ) ans += dp [ index + 1 ] [ evenSum ] [ oddSum + d ] [ currTight ] ; else ans += dp [ index + 1 ] [ evenSum + d ] [ oddSum ] [ currTight ] ; } return ans ; } static int countNum ( int n ) { dp = new int [ 18 ] [ 18 ] [ 18 ] ; for ( int i = 0 ; i < 18 ; i ++ ) for ( int j = 0 ; j < 18 ; j ++ ) dp [ i ] [ j ] [ i ] = - 1 ; int L = 2 , R = 10 ; System . out . println ( countNum ( R ) - countNum ( L - 1 ) ) ; return dp [ 0 ] [ R ] [ L ] ; } public static void main ( String [ ] args ) { int dp [ ] [ ] [ ] = new int [ 18 ] [ 18 ] [ 18 ] ; for ( int i = 0 ; i < 18 ; i ++ ) for ( int j = 0 ; j < 18 ; j ++ ) dp [ i ] [ j ] [ i ] = new int [ 18 ] [ 18 ] ; int L = 2 , R = 10 ; System . out . println ( countNum ( R ) - countNum ( L - 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] [ ] a = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int sum = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { sum += a [ i ] [ j ] ; } } if ( sum % 3 == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] + arr [ i + 1 ] != arr [ i + 1 ] ) { flag = true ; break ; } } if ( flag == false ) { System . out . println ( - 1 ) ; } else { for ( int i = 0 ; i < n - 1 ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } System . out . println ( ) ; } } } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public static String run ( ) { return "0" ; } }
import java . util . * ; public class GFG { static int search ( int arr [ ] , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] == x ) return i ; return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int n = arr . length ; int result = search ( arr , n , x ) ; if ( result == - 1 ) System . out . println ( " Element is not present in array " ) ; else System . out . println ( " Element is present at index " + result ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int c = in . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] v = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = in . nextInt ( ) ; v [ i ] = in . nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = Math . max ( dp [ i ] , dp [ i + 1 ] - x [ i ] ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , dp [ i ] - ( c - x [ i ] ) * 2 + dp [ i + 1 ] - ( c - x [ i ] ) * 2 ) ; } out . println ( max ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static int toggleBitsFromLToR ( int n , int l , int r ) { int num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ; return ( n ^ num ) ; } static int unsetBitsInGivenRange ( int n , int l , int r ) { int num = ( 1 << ( 4 * 8 - 1 ) ) - 1 ; num = toggleBitsFromLToR ( num , l , r ) ; return ( n & num ) ; } public static void main ( String [ ] args ) { int n = 42 ; int l = 2 , r = 5 ; System . out . println ( unsetBitsInGivenRange ( n , l , r ) ) ; } }
public class GFG { static int MinStep ( int a [ ] , int n ) { int positive = 0 , negative = 0 , zero = 0 , step = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) zero ++ ; else if ( a [ i ] < 0 ) { negative ++ ; step = step + ( - 1 - a [ i ] ) ; } else { positive ++ ; step = step + ( a [ i ] - 1 ) ; } } if ( negative % 2 == 0 ) step += zero ; else { if ( zero > 0 ) step += zero ; else step += 2 ; } return step ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , - 2 , - 1 , - 3 , 4 } ; int n = a . length ; System . out . println ( MinStep ( a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( s . charAt ( a - 1 ) == s . charAt ( b - 1 ) ) { System . out . println ( 0 ) ; } else { System . out . println ( 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] + arr [ n - 2 ] ; System . out . println ( ans ) ; } } }
public class GFG { static int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } static void noOfSquares ( int x1 , int y1 , int x2 , int y2 ) { int dx = Math . abs ( x2 - x1 ) ; int dy = Math . abs ( y2 - y1 ) ; int ans = dx + dy - gcd ( dx , dy ) ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int x1 = 1 , y1 = 1 , x2 = 4 , y2 = 3 ; noOfSquares ( x1 , y1 , x2 , y2 ) ; } }
import java . util . * ; public class GFG { static String get_ maximum ( String s , int a [ ] ) { s = s . trim ( ) ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) - '0' < a [ s . charAt ( i ) - '0' ] ) { int j = i ; while ( j < n && s . charAt ( j ) - '0' <= a [ s . charAt ( j ) - '0' ] ) { s . setCharAt ( j , ( char ) ( '0' + a [ s . charAt ( j ) - '0' ] ) ) ; j ++ ; } return String . valueOf ( s ) ; } } return s ; } public static void main ( String [ ] args ) { String s = "1337" ; int a [ ] = { 0 , 1 , 2 , 5 , 4 , 6 , 6 , 3 , 1 , 9 } ; System . out . println ( get_ maximum ( s , a ) ) ; } }
public class GFG { static int MAX_DIGITS = 20 ; static boolean isOctal ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) >= 8 ) return false ; else n /= 10 ; } return true ; } static boolean isPalindrome ( int n ) { int divide = ( isOctal ( n ) == false ) ? 8 : 10 ; Vector < Integer > octal = new Vector < Integer > ( ) ; while ( n != 0 ) { octal . add ( n % divide ) ; n /= divide ; } int j = octal . size ( ) - 1 ; int k = 0 ; while ( k <= j ) { if ( octal . get ( j ) != octal . get ( k ) ) return false ; j -- ; k ++ ; } return true ; } public static void main ( String [ ] args ) { int n = 97 ; if ( isPalindrome ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int sum1 = 0 ; int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '4' || s . charAt ( i ) == '7' ) { sum1 += Integer . parseInt ( s . substring ( 0 , i ) ) ; sum2 += Integer . parseInt ( s . substring ( i + 1 ) ) ; } } if ( sum1 == sum2 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int binarySearch ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; int midValue = arr [ mid ] ; if ( mid == arr [ mid ] ) return mid ; int leftindex = Math . min ( mid - 1 , midValue ) ; int left = binarySearch ( arr , low , leftindex ) ; if ( left >= 0 ) return left ; int rightindex = Math . max ( mid + 1 , midValue ) ; int right = binarySearch ( arr , rightindex , high ) ; return right ; } public static void main ( String [ ] args ) { int arr [ ] = { - 10 , - 5 , 2 , 2 , 2 , 2 , 3 , 4 , 7 , 9 , 12 , 13 } ; int n = arr . length ; System . out . println ( " Fixed Point is " + binarySearch ( arr , 0 , n - 1 ) ) ; int arr1 [ ] = { - 10 , - 1 , 3 , 3 , 10 , 30 , 30 , 50 , 100 } ; int n1 = arr . length ; System . out . println ( " Fixed Point is " + binarySearch ( arr1 , 0 , n1 - 1 ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 10000 ; static int prodDig [ ] = new int [ MAX ] ; static int getDigitProduct ( int x ) { if ( x < 10 ) return x ; if ( prodDig [ x ] != 0 ) return prodDig [ x ] ; int prod = x % 10 * getDigitProduct ( x / 10 ) ; prodDig [ x ] = prod ; return prod ; } static void findSeed ( int n ) { Vector < Integer > res = new Vector < > ( ) ; for ( int i = 1 ; i <= n / 2 + 1 ; i ++ ) { if ( i * getDigitProduct ( i ) == n ) { res . add ( i ) ; } } if ( res . size ( ) == 0 ) { System . out . println ( " NO seed exists " ) ; return ; } for ( int i = 0 ; i < res . size ( ) ; i ++ ) System . out . print ( res . get ( i ) + " " ) ; } public static void main ( String [ ] args ) { int n = 138 ; findSeed ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int left = i ; int right = i + k - 1 ; int distance = Math . abs ( x [ left ] ) * Math . abs ( x [ right ] ) ; if ( distance < min ) { min = distance ; } } System . out . println ( min ) ; } }
public class GFG { static int diff ( int n , int mid ) { if ( n > ( mid * mid * mid ) ) return ( n - ( mid * mid * mid ) ) ; else return ( mid * mid * mid ) - n ; } static int cubicRoot ( int n ) { int start = 0 , end = n ; int e = 0.0000001 ; while ( true ) { int mid = ( start + end ) / 2 ; int error = diff ( n , mid ) ; if ( error <= e ) return mid ; if ( ( mid * mid * mid ) > n ) end = mid ; else start = mid ; } } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( " Cubic root of " + n + " is " + cubicRoot ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ 0 ] ; int max = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } max = arr [ i ] ; } System . out . println ( max + m + " " + min ) ; } }
import java . util . * ; public class GFG { static int inv ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) x1 += m0 ; return x1 ; } static int findMinX ( int num [ ] , int rem [ ] , int k ) { int prod = 1 ; for ( int i = 0 ; i < k ; i ++ ) prod = prod * num [ i ] ; int result = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int pp = prod / num [ i ] ; result = result + rem [ i ] * inv ( pp , num [ i ] ) * pp ; } return result % prod ; } public static void main ( String [ ] args ) { int num [ ] = { 3 , 4 , 5 } ; int rem [ ] = { 2 , 3 , 1 } ; int k = num . length ; System . out . println ( " x is " + findMinX ( num , rem , k ) ) ; } }
import java . util . * ; public class GFG { static int findMaxOR ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int maxOR = arr [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( ( maxOR | arr [ i ] ) > maxOR ) { maxOR = maxOR | arr [ i ] ; count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 4 , 2 } ; int n = arr . length ; System . out . println ( findMaxOR ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } }
public class GFG { static int aliquotSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( n % i == 0 ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( aliquotSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int p = ( 3 * i * i - i ) / 2 ; sum += p ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } }
public class GFG { static int fifthPowerSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i * i * i * i ) ; return sum ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fifthPowerSum ( n ) ) ; } }
public class GFG { static int squaresum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * i ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }
import java . io . * ; public class GFG { static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } }
import java . io . * ; public class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += ( 2 * i - 1 ) * ( 2 * i - 1 ) ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += ( i * ( i + 1 ) * ( 2 * i + 1 ) ) / 6 ; } return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int fourthPowerSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i * i * i ) ; return sum ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } }
public class GFG { static int squareSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String [ ] args ) { int ans = squareSum ( 8 ) ; System . out . println ( ans ) ; } }
public class GFG { static double AvgofSquareN ( int n ) { double sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += i * ( n - i ) ; return 2 * sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int solve ( int n , int base ) { int sum = 0 ; while ( n > 0 ) { int remainder = n % base ; sum = sum + remainder ; n = n / base ; } return sum ; } static void SumsOfDigits ( int n ) { int sum = 0 ; int N = ( int ) Math . floor ( n / 2 ) ; for ( int base = 2 ; base <= N ; base ++ ) { sum = sum + solve ( n , base ) ; } System . out . println ( sum ) ; } public static void main ( String [ ] args ) { int n = 8 ; SumsOfDigits ( n ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; if ( n == 0 ) return false ; int cnt = 0 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( isPrime ( i ) ) { cnt += i ; } } for ( int i = 2 ; i <= n ; i ++ ) { if ( isPrime ( i ) ) { cnt += i ; } } return cnt ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int count = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( ( i % 2 == 0 ) && ( i % 4 == 1 ) ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int optimalSearchTree ( int keys [ ] , int freq [ ] , int n ) { int cost [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) cost [ i ] [ i ] = freq [ i ] ; for ( int L = 2 ; L < n + 1 ; L ++ ) { for ( int i = 0 ; i < n - L + 2 ; i ++ ) { int j = i + L - 1 ; if ( i >= n || j >= n ) break ; cost [ i ] [ j ] = Integer . MAX_VALUE ; for ( int r = i ; r <= j ; r ++ ) { int c = 0 ; if ( r > i ) c += cost [ i ] [ r - 1 ] ; if ( r < j ) c += cost [ r + 1 ] [ j ] ; c += cost [ i ] [ j ] ; c += sum ( freq , i , j ) ; if ( c < cost [ i ] [ j ] ) cost [ i ] [ j ] = c ; } } } return cost [ 0 ] [ n - 1 ] ; } static int sum ( int freq [ ] , int i , int j ) { int s = 0 ; for ( int k = i ; k <= j ; k ++ ) s += freq [ k ] ; return s ; } public static void main ( String [ ] args ) { int keys [ ] = { 10 , 12 , 20 } ; int freq [ ] = { 34 , 8 , 50 } ; int n = keys . length ; System . out . println ( " Cost of Optimal BST is " + optimalSearchTree ( keys , freq , n ) ) ; } }
public class GFG { static int get ( int x , int y , int z ) { if ( x > z ) return - 1 ; int val = z - x ; int div = ( z - x ) / y ; int ans = div * y + x ; return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 5 , z = 8 ; System . out . println ( get ( x , y , z ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ sc . nextInt ( ) - 1 ] = i ; } long ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) { ans += Math . abs ( a [ i ] - a [ i - 1 ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int maxcoefficientvalue ( int n ) { if ( n % 2 == 0 ) return binomialCoeff ( n , n / 2 ) ; else return binomialCoeff ( n , ( n + 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( maxcoefficientvalue ( n ) ) ; } }
public class GFG { static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) return true ; else return false ; } static int vowelPairs ( String s , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( isVowel ( s . charAt ( i ) ) && isVowel ( s . charAt ( i + 1 ) ) ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { String s = " abaebio " ; int n = s . length ( ) ; System . out . println ( vowelPairs ( s , n ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ h + 1 ] [ w + 1 ] ; for ( int i = 0 ; i < h + 1 ; i ++ ) for ( int j = 0 ; j < w + 1 ; j ++ ) dp [ i ] [ j ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; dp [ i ] [ y ] = dp [ i + 1 ] [ y ] + dp [ i ] [ y + 1 ] - dp [ i ] [ y ] ; } int S = sc . nextInt ( ) ; int T = sc . nextInt ( ) ; int [ ] [ ] dp2 = new int [ h + 1 ] [ w + 1 ] ; for ( int i = 0 ; i < h + 1 ; i ++ ) for ( int j = 0 ; j < w + 1 ; j ++ ) dp2 [ i ] [ j ] = dp2 [ i + 1 ] [ j ] + dp [ i ] [ j ] - dp [ i ] [ j ] ; int max = 0 ; for ( int i = S ; i <= W ; i ++ ) for ( int j = T ; j <= H ; j ++ ) max = max ( max , dp2 [ i ] [ j ] + dp2 [ i ] [ j ] - dp2 [ i ] [ j - T ] - dp2 [ i ] [ j ] ) ; System . out . println ( max ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
public class GFG { static int isSubstring ( String s1 , String s2 ) { int M = s1 . length ( ) ; int N = s2 . length ( ) ; for ( int i = 0 ; i <= N - M ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { if ( s2 . charAt ( i + j ) != s1 . charAt ( j ) ) break ; } if ( j + 1 == M ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { String s1 = " for " ; String s2 = " geeksforgeeks " ; int res = isSubstring ( s1 , s2 ) ; if ( res == - 1 ) System . out . println ( " Not present " ) ; else System . out . println ( " Present at index " + res ) ; } }
public class GFG { static double angleOncirCumference ( double z ) { return ( z / 2 ) ; } public static void main ( String [ ] args ) { double angle = 65 ; double z = angleOncirCumference ( angle ) ; System . out . println ( " The angle is " + z + " degrees " ) ; } }
import java . util . * ; public class GFG { static void countSubarraysof1and0 ( int a [ ] , int n ) { int count1 = 0 , count0 = 0 , number1 = 0 , number0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) count1 ++ ; else { number1 += ( count1 ) * ( count1 + 1 ) / 2 ; count1 = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) count0 ++ ; else { number0 += ( count0 ) * ( count0 + 1 ) / 2 ; count0 = 0 ; } } if ( count1 > 0 ) number1 += ( count1 ) * ( count1 + 1 ) / 2 ; if ( count0 > 0 ) number0 += ( count0 ) * ( count0 + 1 ) / 2 ; System . out . println ( " Count of subarrays of 0 only : " + number0 ) ; System . out . println ( " Count of subarrays of 1 only : " + number1 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 } ; int n = a . length ; countSubarraysof1and0 ( a , n ) ; } }
public class GFG { static void printNumbers ( int N ) { int flag = 1 , x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) flag = 0 ; x = x / 10 ; } if ( flag == 1 ) System . out . print ( N + " " ) ; printNumbers ( N - 1 ) ; } } public static void main ( String [ ] args ) { int N = 20 ; printNumbers ( N ) ; } }
public class GFG { static void printPermutation ( int n , int k ) { int mx = n ; for ( int i = 1 ; i <= k ; i ++ ) { System . out . print ( mx + " " ) ; mx -- ; } for ( int i = 1 ; i <= mx ; i ++ ) { System . out . print ( i + " " ) ; } } public static void main ( String [ ] args ) { int N = 5 , K = 3 ; if ( K >= N - 1 ) { System . out . println ( " Not Possible " ) ; } else { printPermutation ( N , K ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } Arrays . sort ( arr , ( a , b ) -> a [ 0 ] - b [ 0 ] ) ; int ans = arr [ n - 1 ] [ 0 ] ; System . out . println ( ans ) ; } }
public class GFG { static boolean is_member ( String List [ ] , String key ) { for ( int i = 0 ; i < List . length ; i ++ ) { if ( key . equals ( List [ i ] ) ) return true ; } return false ; } static boolean overlap ( String List1 , String List2 ) { for ( String key : List1 ) { if ( is_member ( List2 , key ) ) return true ; } return false ; } public static void main ( String [ ] args ) { String s1 = " geeksforgeeks " ; String s2 = " geeks " ; String yes_or_no = overlap ( s1 , s2 ) ; if ( yes_or_no . equals ( yes_or_no ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a - b > c + d || a - b < c + d ) { out . println ( " No " ) ; } else { out . println ( " Yes " ) ; } } out . flush ( ) ; } }
import java . util . * ; public class GFG { static void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) System . out . print ( arr [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
public class GFG { static int N = 3 ; static int maxPathSum ( int tri [ ] [ ] , int m , int n ) { for ( int i = m - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < i + 1 ; j ++ ) { if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ; else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ; } } return tri [ 0 ] [ 0 ] ; } public static void main ( String [ ] args ) { int tri [ ] [ ] = { { 1 , 0 , 0 } , { 4 , 8 , 0 } , { 1 , 5 , 3 } } ; System . out . println ( maxPathSum ( tri , 2 , 2 ) ) ; } }
public class GFG { static boolean isHeap ( int arr [ ] , int n ) { for ( int i = 0 ; i < ( n - 2 ) / 2 ; i ++ ) { if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false ; if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length ; if ( isHeap ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isHeap ( int arr [ ] , int i , int n ) { if ( i > ( n - 2 ) / 2 ) return true ; if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 * i + 2 ] && isHeap ( arr , 2 * i + 1 , n ) && isHeap ( arr , 2 * i + 2 , n ) ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length - 1 ; if ( isHeap ( arr , 0 , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = a - b ; int y = c - d ; if ( x * x + y * y == 0 || x * x + y * y == 0 || y * x + x * y == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int findMinDel ( int arr [ ] , int n ) { int min_num = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min_num = Math . min ( arr [ i ] , min_num ) ; } int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min_num ) { cnt ++ ; } } return n - cnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 2 } ; int n = arr . length ; System . out . println ( findMinDel ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int count ( int x , int y ) { int ans = 0 ; HashMap < Integer , Integer > m = new HashMap < > ( ) ; while ( x % y != 0 ) { x %= y ; ans ++ ; if ( m . containsKey ( x ) ) return - 1 ; m . put ( x , m . get ( x ) + 1 ) ; x *= 10 ; } return ans ; } public static void main ( String [ ] args ) { int res = count ( 1 , 2 ) ; if ( res == - 1 ) System . out . println ( " INF " ) ; else System . out . println ( res ) ; res = count ( 5 , 3 ) ; if ( res == - 1 ) System . out . println ( " INF " ) ; else System . out . println ( res ) ; res = count ( 3 , 5 ) ; if ( res == - 1 ) System . out . println ( " INF " ) ; else System . out . println ( res ) ; } }
public class GFG { static boolean isPossibleToMakeDivisible ( int arr [ ] , int n ) { int remainder = 0 ; for ( int i = 0 ; i < n ; i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ; return ( remainder == 0 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 40 , 50 , 90 } ; int n = 3 ; if ( isPossibleToMakeDivisible ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ a [ i ] ] = 0 ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] + 1 ) ; } } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += dp [ i ] [ n ] ; } System . out . println ( ans ) ; } }
public class GFG { static void printCubes ( int a , int b ) { for ( int i = a ; i <= b ; i ++ ) { int j = 1 ; for ( j = j * j * j ; j <= i ; j ++ ) { if ( j * j * j == i ) { System . out . print ( j * j * j + " " ) ; break ; } } } } public static void main ( String [ ] args ) { int a = 1 , b = 100 ; System . out . println ( " Perfect cubes in given range : " ) ; printCubes ( a , b ) ; } }
import java . io . * ; public class GFG { static int getModulo ( int n , int d ) { return ( n & ( d - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 6 , d = 4 ; System . out . println ( n + " moduo " + d + " is " + getModulo ( n , d ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int d = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( a [ i ] - a [ j ] ) <= d ) { ans = Math . max ( ans , j - i ) ; break ; } } } out . println ( ans ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = Integer . parseInt ( s . substring ( 0 , s . length ( ) - 1 ) ) ; int [ ] a = { 4 , 5 , 6 , 3 , 2 , 1 } ; int [ ] b = { 0 , 7 , 0 , 7 } ; int c = 16 ; int k = ( n - 1 ) / 4 ; int t = ( n - 1 ) % 4 ; System . out . println ( ( ( n - 1 ) / 4 ) * 16 + a [ t ] + b [ c ] + a [ n ] ) ; } }
public class GFG { static boolean isPerfectCube ( int x ) { int cr = ( int ) Math . sqrt ( x ) ; return ( cr * cr * cr == x ) ; } static void canBePerfectCube ( int N , int K ) { if ( isPerfectCube ( N + K ) || isPerfectCube ( N - K ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } public static void main ( String [ ] args ) { int N = 7 , K = 1 ; canBePerfectCube ( N , K ) ; N = 5 , K = 4 ; canBePerfectCube ( N , K ) ; N = 7 , K = 2 ; canBePerfectCube ( N , K ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static class Graph { int [ ] [ ] graph ; public Graph ( int n ) { graph = new int [ n ] [ n ] ; } public void addEdge ( int u , int v ) { graph [ u ] [ v ] = 1 ; graph [ u ] [ v ] = 1 ; } public void DFSUtil ( int v , boolean [ ] visited ) { visited [ v ] = true ; System . out . print ( v + " " ) ; for ( int i = 0 ; i < graph [ v ] . length ; i ++ ) { if ( visited [ graph [ v ] [ i ] ] == false ) { DFSUtil ( graph [ v ] [ i ] , visited ) ; } } } public void DFS ( int v ) { boolean [ ] visited = new boolean [ graph [ v ] . length ] ; visited [ v ] = true ; DFSUtil ( graph [ v ] , visited ) ; } public static void main ( String [ ] args ) { Graph g = new Graph ( ) ; g . addEdge ( 0 , 1 ) ; g . addEdge ( 0 , 2 ) ; g . addEdge ( 1 , 2 ) ; g . addEdge ( 2 , 0 ) ; g . addEdge ( 2 , 3 ) ; g . addEdge ( 3 , 3 ) ; g . addEdge ( 3 , 3 ) ; System . out . println ( " Following is Depth First Traversal ( starting from vertex 2 ) " ) ; g . DFS ( 2 ) ; } }
import java . util . * ; public class GFG { static void countDigits ( int val , int arr [ ] ) { while ( val > 0 ) { int digit = val % 10 ; arr [ digit ] ++ ; val = val / 10 ; } return ; } static void countFrequency ( int x , int n ) { int freq_count [ ] = new int [ 10 ] ; for ( int i = 1 ; i <= n ; i ++ ) { int val = ( int ) Math . pow ( x , i ) ; countDigits ( val , freq_count ) ; } for ( int i = 0 ; i < 10 ; i ++ ) { System . out . print ( freq_count [ i ] + " " ) ; } } public static void main ( String [ ] args ) { int x = 15 , n = 3 ; countFrequency ( x , n ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } Arrays . sort ( a ) ; if ( a [ n - 1 ] == 1 ) { pw . println ( " YES " ) ; } else { pw . println ( " NO " ) ; } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n == 1 ) { System . out . println ( 0 ) ; } else if ( n == 2 ) { System . out . println ( 1 ) ; } else { System . out . println ( n - 2 ) ; } } } }
import java . util . * ; import java . io . * ; public class A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = in . nextInt ( ) ; HashSet < Integer > hs = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) hs . add ( in . nextInt ( ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int k = in . nextInt ( ) ; if ( hs . contains ( k ) ) hs . remove ( k ) ; else hs . add ( k ) ; } if ( hs . size ( ) == 1 ) pw . println ( " IO hb " ) ; else if ( hs . size ( ) == 2 ) pw . println ( " E cmoym ek " ) ; else if ( hs . size ( ) == 3 ) pw . println ( " I doy " ) ; else pw . println ( " IO hb " ) ; pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
public class GFG { static int m = 6 , n = 4 ; static int linearCheck ( int ar [ ] [ ] , int arr [ ] ) { for ( int i = 0 ; i < m ; i ++ ) { boolean matched = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( ar [ i ] [ j ] != arr [ j ] ) { matched = false ; break ; } } if ( matched ) { return i + 1 ; } } return - 1 ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 0 , 1 , 0 } , { 10 , 9 , 22 , 23 } , { 40 , 40 , 40 , 40 } , { 43 , 44 , 55 , 68 } , { 81 , 73 , 100 , 132 } , { 100 , 75 , 125 , 133 } } ; int row [ ] = { 10 , 9 , 22 , 23 } ; System . out . println ( linearCheck ( mat , row ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; sum += arr [ i ] ; } if ( sum % n == 0 ) { System . out . println ( - 1 ) ; continue ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > sum / n ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] t = new int [ n ] ; int [ ] v = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { t [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = sc . nextInt ( ) ; } double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { int time = t [ j ] ; if ( time >= v [ i ] ) { min = Math . min ( min , v [ i ] + time ) ; } else if ( time < v [ i ] ) { min = Math . min ( min , v [ i ] + time - v [ i ] ) ; } } sum += min ; } System . out . println ( sum / 4 ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 4 * n - 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 7 * ( int ) Math . pow ( n , 2 ) - 7 * n + 7 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 5 * ( int ) Math . pow ( n , 2 ) - 5 * n ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; public class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 2 * n + 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 3 ) + Math . pow ( n , 2 ) ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) - n - 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; public class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) - 2 * n + 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + n - 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int x1 = Math . abs ( x ) ; int y1 = Math . abs ( y ) ; int x2 = x + y1 ; int y2 = y + x2 ; int x3 = x - y1 ; int y3 = x + y2 ; int x4 = x - y1 ; int y4 = y - x2 ; int z = z - x3 ; if ( x1 > 0 && y1 > 0 && y2 > 0 && z1 > 0 ) { System . out . println ( x1 + " " + y1 + " " + z ) ; } else if ( x1 < 0 && y1 > 0 && z1 > 0 ) { System . out . println ( x1 + " " + y1 + " " + z ) ; } else if ( x2 < 0 && y2 > 0 && z2 < 0 ) { System . out . println ( x2 + " " + y2 + " " + z ) ; } else if ( x3 < 0 && y3 > 0 && z3 < 0 ) { System . out . println ( x3 + " " + y3 + " " + z ) ; } else if ( x3 < 0 && y3 > 0 && z3 < 0 ) { System . out . println ( x2 + " " + y3 + " " + z ) ; } else if ( x3 < 0 && y3 > 0 && z3 < 0 ) { System . out . println ( x3 + " " + y3 + " " + z ) ; } else if ( x3 < 0 && y3 > 0 && z3 < 0 ) { System . out . println ( x2 + " " + y3 + " " + z ) ; } else if ( x3 < 0 && y3 > 0 && z3 < 0 ) { System . out . println ( x3 + " " + y3 + " " + z ) ; } else if ( x3 < 0 && y3 > 0 && z3 < 0 ) { System . out . println ( x2 + " " + y3
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int k = sc . nextInt ( ) ; Set < String > set = new HashSet < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { String t = s . substring ( i , i + k ) ; if ( set . contains ( t ) ) { set . remove ( t ) ; break ; } } } System . out . println ( set . contains ( s ) ? s . substring ( 0 , k ) : s . substring ( k - 1 ) ) ; } }
import java . util . * ; public class Solution { public int fib ( int N ) { if ( N < memo . length ) return memo [ N ] ; for ( int i = 0 ; i < memo . length ; i ++ ) memo [ i ] = memo [ i - 1 ] + memo [ i - 2 ] ; return memo [ N ] ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int n = 2 ; int out = sObj . fib ( n ) ; System . out . println ( out ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; for ( int tt = 0 ; tt < t ; tt ++ ) { char [ ] s = in . next ( ) . toCharArray ( ) ; char [ ] t = in . next ( ) . toCharArray ( ) ; Arrays . sort ( s ) ; int cnt = 0 ; for ( int i = s . length - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == ' c ' ) { cnt ++ ; } else { cnt = 0 ; } } if ( cnt == 0 ) { pw . println ( s ) ; } else { if ( cnt == 0 ) { for ( int i = 0 ; i < s . length ; i ++ ) { pw . print ( s [ i ] ) ; } pw . print ( " " ) ; } } } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
public class GFG { static double PI = 3.142 ; static double cosXSertiesSum ( double x , int n ) { x = x * ( PI / 180.0 ) ; double res = 1 ; double sign = 1 ; double fact = 1 ; double pow = 1 ; for ( int i = 1 ; i < 5 ; i ++ ) { sign = sign * - 1 ; fact = fact * ( 2 * i - 1 ) * ( 2 * i ) ; pow = pow * x * x ; res = res + sign * pow / fact ; } return res ; } public static void main ( String [ ] args ) { double x = 50 ; int n = 5 ; System . out . println ( cosXSertiesSum ( x , n ) ) ; } }
public class GFG { static int findNumber ( int N , int S ) { int i = ( ( ( N ) * ( N + 1 ) ) / 4 ) - ( ( S + 1 ) / 2 ) ; return i ; } static void check ( int N , int S ) { int i = findNumber ( N , S ) ; int integerI = i ; if ( i - integerI == 0 ) { System . out . println ( " Yes : " + integerI + " , " + integerI + 1 ) ; } else { System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int N = 4 , S = 3 ; check ( N , S ) ; N = 5 ; S = 3 ; check ( N , S ) ; } }
public class GFG { static boolean multipleOfThree ( int K , int dig0 , int dig1 ) { int sum = 0 ; int temp = ( dig0 + dig1 ) % 10 ; sum = dig0 + dig1 ; if ( K == 2 ) { if ( sum % 3 == 0 ) return true ; else return false ; } sum += temp ; int numberofGroups = ( K - 3 ) / 4 ; int remNumberofDigits = ( K - 3 ) % 4 ; sum += ( numberofGroups * 20 ) ; for ( int i = 0 ; i < remNumberofDigits ; i ++ ) { temp = ( 2 * temp ) % 10 ; sum += temp ; } if ( sum % 3 == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int K = 5 , dig0 = 3 , dig1 = 4 ; if ( multipleOfThree ( K , dig0 , dig1 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int sum = a [ n - 1 ] + b [ n - 2 ] ; if ( sum >= a [ n - 1 ] + b [ n - 2 ] ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int countOcc ( String s ) { int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) - 3 ; i ++ ) { int c = 0 , l = 0 , a = 0 , p = 0 ; for ( int j = i ; j < i + 4 ; j ++ ) { if ( s . charAt ( j ) == ' c ' ) c ++ ; else if ( s . charAt ( j ) == ' l ' ) l ++ ; else if ( s . charAt ( j ) == ' a ' ) a ++ ; else if ( s . charAt ( j ) == ' p ' ) p ++ ; } if ( c == 1 && l == 1 && a == 1 && p == 1 ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { String s = " clapc " ; System . out . println ( countOcc ( s . toLowerCase ( ) ) ) ; } }
import java . io . * ; public class GFG { static int countSteps ( int x , int y ) { if ( x % y == 0 ) return x / y ; return ( x / y ) + countSteps ( y , x % y ) ; } public static void main ( String [ ] args ) { int x = 100 , y = 19 ; System . out . println ( countSteps ( x , y ) ) ; } }
import java . io . * ; public class GFG { static boolean isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; return ( ( sr - mt . floor ( sr ) ) == 0 ) ; } static boolean isSunnyNum ( int n ) { if ( isPerfectSquare ( n + 1 ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isSunnyNum ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static double PI = 3.14159265 ; static double area_inscribed ( double P , double B , double H ) { return ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ; } public static void main ( String [ ] args ) { double P = 3 , B = 4 , H = 5 ; System . out . println ( area_inscribed ( P , B , H ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; Map < String , Integer > map = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String name = sc . next ( ) ; int v = sc . nextInt ( ) ; map . put ( name , v ) ; } int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { String name = sc . next ( ) ; if ( map . containsKey ( name ) ) System . out . print ( map . get ( name ) + " " ) ; else System . out . print ( name + " " ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int getCount ( Vector < Integer > v , int n ) { Collections . sort ( v ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = n - 1 - Math . max ( v . get ( i ) , v . get ( i ) - 1 ) ; if ( tmp == v . get ( i ) ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { int n = 4 ; Vector < Integer > v = new Vector < > ( ) ; v . add ( 1 ) ; v . add ( 2 ) ; v . add ( 3 ) ; v . add ( 4 ) ; System . out . println ( getCount ( v , n ) ) ; } }
public class GFG { static int trailing_zeros ( int N ) { int count_of_two = 0 , count_of_five = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int val = i ; while ( val % 2 == 0 && val > 0 ) { val /= 2 ; count_of_two += i ; } while ( val % 5 == 0 && val > 0 ) { val /= 5 ; count_of_five += i ; } } int ans = Math . min ( count_of_two , count_of_five ) ; return ans ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( trailing_zeros ( N ) ) ; } }
public class GFG { static int removeZero ( int n ) { int res = 0 ; int d = 1 ; while ( n > 0 ) { if ( n % 10 != 0 ) { res += ( n % 10 ) * d ; d *= 10 ; } n /= 10 ; } return res ; } static boolean isEqual ( int a , int b ) { if ( removeZero ( a ) + removeZero ( b ) == removeZero ( a + b ) ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 105 , b = 106 ; if ( isEqual ( a , b ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] graph = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { graph [ i ] [ i ] = in . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int s = in . nextInt ( ) - 1 ; int t = in . nextInt ( ) - 1 ; graph [ s ] [ t ] = graph [ t ] [ s ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( graph [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = 1 ; } else { dp [ i ] [ j ] = dp [ i ] [ j ] + 1 ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( graph [ i ] [ j ] == 1 ) { ans = ( ans + dp [ i ] [ j ] ) % m ; } } } out . println ( ans ) ; return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Math . min ( arr [ 0 ] , arr [ n - 1 ] ) ; int max = Math . max ( arr [ 0 ] , arr [ n - 1 ] ) ; int ans = ( min + max ) / 2 ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int min = Math . min ( a , b ) ; if ( min == a || min == b ) System . out . println ( 0 ) ; else if ( min == a && min == b ) System . out . println ( 0 ) ; else if ( min == a && min == b ) System . out . println ( min / 2 ) ; else System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr [ i ] = ( n / m ) * m ; } for ( int i = 0 ; i < arr . length ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int totalPairs ( String s1 , String s2 ) { int count = 0 ; int arr1 [ ] = new int [ 7 ] ; int arr2 [ ] = new int [ 7 ] ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { int set_bits = countSetBits ( s1 . charAt ( i ) ) ; arr1 [ set_bits ] ++ ; } for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { int set_bits = countSetBits ( s2 . charAt ( i ) ) ; arr2 [ set_bits ] ++ ; } for ( int i = 1 ; i < 7 ; i ++ ) count += ( arr1 [ i ] * arr2 [ i ] ) ; return count ; } public static void main ( String [ ] args ) { String s1 = " geeks " ; String s2 = " forgeeks " ; System . out . println ( totalPairs ( s1 , s2 ) ) ; } }
public class GFG { static int countSubSeq ( int i , int Sum , int cnt , int a [ ] , int n ) { if ( i == n ) { if ( Sum == 0 && cnt > 0 ) return 1 ; else return 0 ; } int ans = 0 ; ans += countSubSeq ( i + 1 , Sum , cnt , a , n ) ; ans += countSubSeq ( i + 1 , Sum + a [ i ] , cnt + 1 , a , n ) ; return ans ; } public static void main ( String [ ] args ) { int a [ ] = { - 1 , 2 , - 2 , 1 } ; int n = a . length ; System . out . println ( countSubSeq ( 0 , 0 , 0 , a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int left = 0 ; int right = s . length ( ) - 1 ; int [ ] leftArray = new int [ left + 1 ] ; int [ ] rightArray = new int [ right + 1 ] ; for ( int i = 0 ; i < left + 1 ; i ++ ) { leftArray [ i ] = s . charAt ( leftArray [ i ] ) ; rightArray [ i ] = s . charAt ( rightArray [ i ] ) ; } for ( int i = left + 1 ; i < right + 1 ; i ++ ) { leftArray [ i ] = s . charAt ( leftArray [ i ] ) ; rightArray [ i ] = s . charAt ( rightArray [ i ] ) ; } for ( int i = left + 1 ; i < right + 1 ; i ++ ) { System . out . print ( leftArray [ i ] + " " ) ; } System . out . println ( rightArray [ right ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int count = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { int x = i * ( i + a ) ; if ( x == m ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int pivotedBinarySearch ( int arr [ ] , int n , int key ) { int pivot = findPivot ( arr , 0 , n - 1 ) ; if ( pivot == - 1 ) return binarySearch ( arr , 0 , n - 1 , key ) ; if ( arr [ pivot ] == key ) return pivot ; if ( arr [ 0 ] <= key ) return binarySearch ( arr , 0 , pivot - 1 , key ) ; return binarySearch ( arr , pivot + 1 , n - 1 , key ) ; } static int findPivot ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; if ( high == low ) return low ; int mid = ( low + high ) / 2 ; if ( mid < high && arr [ mid ] > arr [ mid + 1 ] ) return mid ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return ( mid - 1 ) ; if ( arr [ low ] >= arr [ mid ] ) return findPivot ( arr , low , mid - 1 ) ; return findPivot ( arr , mid + 1 , high ) ; } static int binarySearch ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; if ( key == arr [ mid ] ) return mid ; if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return binarySearch ( arr , low , ( mid - 1 ) , key ) ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 } ; int n = arr1 . length ; int key = 3 ; System . out . println ( " Index of the element is : " + pivotedBinarySearch ( arr1 , n , key ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long mod = 1000000007 ; long [ ] [ ] dp = new long [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { dp [ i ] [ j ] = ( dp [ i ] [ j ] + dp [ i - 1 ] [ j - 1 ] ) % mod ; } } System . out . println ( dp [ n ] [ n ] - dp [ n ] [ 0 ] ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = i + 1 ; } System . out . println ( dp . length ) ; for ( int i = 0 ; i < dp . length ; i ++ ) { System . out . print ( dp [ i ] + " " ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int [ ] [ ] a = new int [ 4 ] [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { a [ i ] [ j ] = x + a [ i ] [ j ] ; } } int x_ = 0 , y_ = 0 ; int i = 0 , j = 0 ; while ( true ) { if ( x_ == x_ && y_ == y_ ) { System . out . println ( " # " ) ; break ; } x_ = x_ + x_ ; y_ = y_ + y_ ; x_ = x_ + x_ ; y = y_ ; x = x_ ; y = y_ ; x = x_ ; y = y ; } if ( i == 0 ) { x_ = x ; y_ = y ; } else if ( i == 1 ) { x_ = x ; y_ = y ; } else if ( i == 2 ) { x_ = x ; y_ = y ; } else if ( i == 3 ) { x_ = x ; y_ = y ; } else if ( i == 4 ) { x_ = x ; y_ = y ; } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { System . out . print ( a [ i ] [ j ] ) ; } System . out . println ( ) ; } } }
public final class p030 { public static void main ( String [ ] args ) { System . out . println ( new p030 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int i = 1 ; i <= 9 ; i ++ ) { for ( int j = i ; j <= 9 ; j ++ ) { if ( Library . popCount ( i ) == Library . popCount ( j ) == 6 && isArrangementValid ( i , j ) ) sum ++ ; } } return Integer . toString ( sum ) ; } private static boolean isArrangementValid ( int a , int b ) { if ( testBit ( a , 6 ) || testBit ( a , 9 ) ) a |= ( 1 << 6 ) | ( 1 << 9 ) ; if ( testBit ( b , 6 ) || testBit ( b , 9 ) ) b |= ( 1 << 6 ) | ( 1 << 9 ) ; return all ( ( testBit ( a , c ) && testBit ( b , d ) ) || ( testBit ( a , d ) && testBit ( b , c ) ) ) ; } private static boolean testBit ( int x , int i ) { return ( ( x >> i ) & 1 ) != 0 ; } private static int [ ] SQUARES = new int [ 10 ] ; }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n ; static int a [ ] [ ] ; static int solve ( ) { int cnt [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { cnt [ i ] [ j ] = 1 ; } } } return str . toString ( ) . replaceAll ( " [ \\ [ \\ ] , ] " , " " ) . trim ( ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } n = Integer . parseInt ( bf . readLine ( ) . trim ( ) ) ; a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String s [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = Integer . parseInt ( s [ j ] ) ; } } str . append ( solve ( ) ) . append ( " \n " ) ; pw . print ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; char [ ] [ ] arr = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) . toCharArray ( ) ; } int count = 0 ; for ( int i = 0 ; i < m - 1 ; i ++ ) { for ( int j = 0 ; j < n - 1 ; j ++ ) { if ( arr [ i ] [ j ] == ' a ' && arr [ i + 1 ] [ j ] == ' f ' && arr [ i ] [ j + 1 ] == ' c ' && arr [ i + 1 ] [ j + 1 ] == ' e ' ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ i ] ) continue ; if ( a [ i ] != a [ n - 1 ] ) { out . println ( " No " ) ; return ; } visited [ i ] = true ; } out . println ( " Yes " ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = in . nextInt ( ) ; y [ i ] = in . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { Arrays . fill ( dp [ i ] , - 1 ) ; } dp [ 0 ] [ 0 ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n + 1 ; j ++ ) { if ( dp [ j ] [ i ] != - 1 ) { dp [ j ] [ i ] = Math . min ( dp [ j ] [ i ] , dp [ j ] [ i ] + 1 ) ; } } } int ans = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { ans += dp [ n ] [ i ] ; } out . println ( ans ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static int countMountains ( int a [ ] [ ] , int n ) { int A [ ] [ ] = new int [ n + 2 ] [ n + 2 ] ; int count = 0 ; for ( int i = 0 ; i < n + 2 ; i ++ ) { for ( int j = 0 ; j < n + 2 ; j ++ ) { if ( ( i == 0 ) || ( j == 0 ) || ( i == n + 1 ) || ( j == n + 1 ) ) { A [ i ] [ j ] = Integer . MAX_VALUE ; } else { A [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] ; } } } for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( A [ i ] [ j ] > A [ i - 1 ] [ j ] && A [ i ] [ j ] > A [ i + 1 ] [ j ] && A [ i ] [ j ] > A [ i ] [ j - 1 ] && A [ i ] [ j ] > A [ i ] [ j + 1 ] && A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] && A [ i ] [ j ] > A [ i + 1 ] [ j - 1 ] ) { count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int a [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int n = 3 ; System . out . println ( countMountains ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int N = 100005 ; static int d [ ] = new int [ N ] ; static int pre [ ] = new int [ N ] ; static void Positive_Divisors ( ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j * j <= i ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) d [ i ] ++ ; else d [ i ] += 2 ; } } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( d [ i ] == d [ i - 1 ] ) ans ++ ; pre [ i ] = ans ; } } public static void main ( String [ ] args ) { Positive_Divisors ( ) ; int n = 15 ; System . out . println ( pre [ n ] ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { if ( arr [ i ] == 0 ) { ans [ i ] = - 1 ; } else { int x = arr [ i ] ; for ( int j = i + 1 ; j < m ; j ++ ) { if ( arr [ j ] == x ) { ans [ i ] = j ; break ; } } } } if ( ans [ 0 ] == - 1 ) { System . out . println ( " ILLEGAL _ ERASE _ ARGUMENT " ) ; } else { for ( int i = 0 ; i < m ; i ++ ) { if ( ans [ i ] == - 1 ) { System . out . println ( i ) ; } } } } }
import java . util . * ; public class GFG { static double area_of_regular_polygon ( int n , int len ) { double P = ( len * n ) ; double A = len / ( 2 * Math . tan ( ( 180 / n ) * 3.14159 / 180 ) ) ; double area = ( P * A ) / 2 ; return area ; } static double area_of_triangle_inscribed ( int n , int len ) { double area = area_of_regular_polygon ( n , len ) ; double triangle = area / n ; double ins_tri = ( triangle * 3 ) ; return ins_tri ; } public static void main ( String [ ] args ) { int n = 6 , len = 10 ; System . out . println ( area_of_triangle_inscribed ( n , len ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 256 ; static String lastNonRepeating ( String str , int n ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str . charAt ( i ) ] ++ ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { char ch = str . charAt ( i ) ; if ( freq [ ch ] == 1 ) { return ( " " + ch ) ; } } return " - 1" ; } public static void main ( String [ ] args ) { String str = " GeeksForGeeks " ; int n = str . length ( ) ; System . out . println ( lastNonRepeating ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; int minx = Integer . MAX_VALUE ; int maxy = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; minx = Math . min ( minx , arr [ i ] [ 0 ] ) ; maxy = Math . max ( maxy , arr [ i ] [ 1 ] ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] [ 0 ] == minx && arr [ i ] [ 1 ] == maxy ) { ans = i + 1 ; break ; } } System . out . println ( ans ) ; } }
public class GFG { static double y ( double x ) { return ( 1 / ( 1 + x ) ) ; } static double BooleRule ( double a , double b ) { int n = 4 ; double h = ( ( b - a ) / n ) ; double sum = 0 ; double bl = ( 7 * y ( a ) + 32 * y ( a + h ) + 12 * y ( a + 2 * h ) + 32 * y ( a + 3 * h ) + 7 * y ( a + 4 * h ) ) * 2 * h / 45 ; sum += bl ; return sum ; } public static void main ( String [ ] args ) { double lowlimit = 0 , upplimit = 4 ; System . out . println ( " f ( x ) = " + BooleRule ( 0 , 4 ) ) ; } }
import java . util . * ; public class GFG { static int maxN = 20 ; static int maxM = 256 ; static int dp [ ] [ ] = new int [ maxN ] [ maxM ] ; static int v [ ] [ ] = new int [ maxN ] [ maxM ] ; static int findLen ( int arr [ ] , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) { return 0 ; } else { return - 1 ; } } if ( v [ i ] [ curr ] != 0 ) { return dp [ i ] [ curr ] ; } v [ i ] [ curr ] = 1 ; int l = findLen ( arr , i + 1 , curr , n , m ) ; int r = findLen ( arr , i + 1 , curr & arr [ i ] , n , m ) ; dp [ i ] [ curr ] = l ; if ( r != - 1 ) { dp [ i ] [ curr ] = Math . max ( dp [ i ] [ curr ] , r + 1 ) ; } return dp [ i ] [ curr ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 7 , 2 , 3 } ; int n = arr . length ; int m = 3 ; int ans = findLen ( arr , 0 , ( ( 1 << 8 ) - 1 ) , n , m ) ; if ( ans == - 1 ) { System . out . println ( 0 ) ; } else { System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int maxN = 20 ; static int maxM = 64 ; static int dp [ ] [ ] = new int [ maxN ] [ maxM ] ; static int v [ ] [ ] = new int [ maxN ] [ maxM ] ; static int findLen ( int arr [ ] , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) { return 0 ; } else { return - 1 ; } } if ( v [ i ] [ curr ] != 0 ) { return dp [ i ] [ curr ] ; } v [ i ] [ curr ] = 1 ; int l = findLen ( arr , i + 1 , curr , n , m ) ; int r = findLen ( arr , i + 1 , curr | arr [ i ] , n , m ) ; dp [ i ] [ curr ] = l ; if ( r != - 1 ) { dp [ i ] [ curr ] = Math . max ( dp [ i ] [ curr ] , r + 1 ) ; } return dp [ i ] [ curr ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 7 , 2 , 3 } ; int n = arr . length ; int m = 3 ; int ans = findLen ( arr , 0 , 0 , n , m ) ; if ( ans == - 1 ) { System . out . println ( 0 ) ; } else { System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] map = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { map [ i ] [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( map [ i ] [ j ] == 0 ) continue ; dp [ i ] [ j ] = 0 ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = map [ i ] [ 0 ] ; int b = map [ i ] [ 1 ] ; int t = map [ i ] [ 2 ] ; dp [ a ] [ b ] = t ; ans += dp [ a ] [ b ] ; } for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( map [ i ] [ j ] == 0 ) continue ; sum += dp [ i ] [ j ] ; } ans -= sum ; } System . out . println ( ans ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < 7 ; i ++ ) { if ( n - i >= 3 && n - i >= 5 && n - i >= 3 ) { ans += 1 ; } } System . out . println ( ans ) ; } }
import java . util . Arrays ; public class GFG { static int minDiff ( int arr [ ] , int n , int k ) { int result = Integer . MAX_VALUE ; Arrays . sort ( arr ) ; for ( int i = 0 ; i <= n - k ; i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 100 , 300 , 200 , 1000 , 20 , 30 } ; int n = arr . length ; int k = 3 ; System . out . println ( minDiff ( arr , n , k ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; b [ i ] = in . nextInt ( ) ; } boolean f = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { out . println ( " YES " ) ; return ; } } out . println ( " NO " ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x = i ; while ( x > 0 ) { x = x / 2 ; } if ( x == 1 ) { ans = i ; break ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static double Mean ( int arr [ ] , int n ) { double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum = sum + arr [ i ] ; return sum / n ; } static double meanAbsoluteDeviation ( int arr [ ] , int n ) { double absSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) absSum = absSum + Math . abs ( arr [ i ] - Mean ( arr , n ) ) ; return absSum / n ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 15 , 15 , 17 , 18 , 21 } ; int n = arr . length ; System . out . println ( meanAbsoluteDeviation ( arr , n ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = Library . pow ( 10 , 9 ) ; int [ ] primes = Library . listPrimes ( 100 ) ; int count = 0 ; for ( int primeIndex = 0 ; primeIndex < primes . length ; primeIndex ++ ) { if ( primeIndex == primes . length ) { return ( product <= LIMIT ) ? 1 : 0 ; } else { int result = 0 ; while ( product <= LIMIT ) { result += count ( primeIndex + 1 , product ) ; product *= primes [ primeIndex ] ; } return result ; } } return Integer . toString ( count ) ; } }
import java . util . * ; public class GFG { static int maximumXOR ( int n , int l , int r ) { int x = 0 ; for ( int i = 0 ; i < Math . pow ( r , 2 ) ; i ++ ) { if ( ( n & ( 1 << i ) ) > 0 ) { if ( x > r ) { x ^= ( 1 << i ) ; } else { if ( x ^ ( 1 << i ) <= r ) { x ^= ( 1 << i ) ; } } } } return n ^ x ; } public static void main ( String [ ] args ) { int n = 7 , l = 2 , r = 23 ; System . out . println ( " The output is " + maximumXOR ( n , l , r ) ) ; } }
import java . util . * ; public class GFG { static int maxPrimefactorNum ( int N ) { boolean arr [ ] = new boolean [ N + 5 ] ; for ( int i = 3 ; i * i <= N ; i ++ ) { if ( arr [ i ] ) { for ( int j = i * i ; j <= N ; j += i ) arr [ j ] = false ; } } Vector < Integer > prime = new Vector < Integer > ( ) ; prime . add ( 2 ) ; for ( int i = 3 ; i <= N ; i += 2 ) { if ( arr [ i ] ) prime . add ( i ) ; } int i = 0 , ans = 1 ; while ( ans * prime . get ( i ) <= N && i < prime . size ( ) ) { ans *= prime . get ( i ) ; i ++ ; } return ans ; } public static void main ( String [ ] args ) { int N = 40 ; System . out . println ( maxPrimefactorNum ( N ) ) ; } }
import java . util . * ; public class GFG { static int CountTrailingZeros ( int n ) { int bit [ ] = new int [ 32 ] ; Arrays . fill ( bit , 0 ) ; for ( int i = 0 ; i < 32 ; i ++ ) bit [ i ] = Integer . bitCount ( bit [ i ] ) ; int zero = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { if ( bit [ i ] == '0' ) zero ++ ; else break ; } return zero ; } public static void main ( String [ ] args ) { int n = 4 ; int ans = CountTrailingZeros ( n ) ; System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int ans = Math . min ( a + b + c , a + c + b + c ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class GFG { static int distinctSubstring ( String P , String Q , int K , int N ) { Set < String > S = new HashSet < String > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { int sum = 0 ; String s = " " ; for ( int j = i ; j < N ; j ++ ) { int pos = P . charAt ( j ) - 97 ; sum = sum + Q . charAt ( pos ) - 48 ; s = s + P . charAt ( j ) ; if ( sum <= K ) { S . add ( s ) ; } else { break ; } } } return S . size ( ) ; } public static void main ( String [ ] args ) { String P = " abcde " ; String Q = "12345678912345678912345678" ; int K = 5 ; int N = P . length ( ) ; System . out . println ( distinctSubstring ( P , Q , K , N ) ) ; } }
import java . util . * ; public class GFG { static String makeEven ( int arr [ ] , int n ) { int first_e_i = - 1 , last_e_i = - 1 , last_n_i = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < arr [ last_n_i ] ) { first_e_i = i ; break ; } if ( arr [ i ] % 2 == 0 ) { last_e_i = i ; break ; } } if ( first_e_i != - 1 ) { String temp = arr [ first_e_i ] + " " + arr [ last_n_i ] ; temp = temp . trim ( ) ; return temp ; } if ( first_e_i == - 1 && last_e_i != - 1 ) { String temp = arr [ last_e_i ] + " " + arr [ last_n_i ] ; temp = temp . trim ( ) ; return temp ; } return arr ; } public static void main ( String [ ] args ) { String str = "1356425" ; System . out . println ( makeEven ( str , str . length ( ) ) ) ; } }
import java . util . * ; public class GFG { static void findDivisors ( int n ) { int [ ] div = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j * i <= n ; j ++ ) div [ i * j ] ++ ; } for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( div [ i ] + " " ) ; } public static void main ( String [ ] args ) { int n = 10 ; findDivisors ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s1 = sc . next ( ) ; String s2 = sc . next ( ) ; int count1 = 0 , count2 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == '0' ) count1 ++ ; else count2 ++ ; } System . out . println ( count1 - count2 ) ; } }
import java . util . * ; public class GFG { static int MAX_CHAR = 256 ; static void printDistinct ( String str ) { int n = str . length ( ) ; int [ ] count = new int [ MAX_CHAR ] ; int [ ] index = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = str . charAt ( i ) ; count [ x ] ++ ; if ( count [ x ] == 1 && x != ' ' ) { index [ x ] = i ; } if ( count [ x ] == 2 ) { index [ x ] = n ; } } Arrays . sort ( index ) ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( index [ i ] == n ) { break ; } System . out . print ( str . charAt ( index [ i ] ) + " " ) ; } } public static void main ( String [ ] args ) { String str = " GeeksforGeeks " ; printDistinct ( str ) ; } }
import java . io . * ; public class GFG { static int calculate ( int x , int k , int m ) { int result = x ; k -- ; while ( k > 0 ) { result = ( int ) Math . pow ( result , x ) ; if ( result > m ) result = result % m ; k -- ; } return result ; } public static void main ( String [ ] args ) { int x = 5 , k = 2 , m = 3 ; System . out . println ( calculate ( x , k , m ) ) ; } }
import java . util . * ; public class GFG { static void converthenumber ( int n ) { String s = Integer . toString ( n ) ; String res = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' || s . charAt ( i ) == '3' || s . charAt ( i ) == '5' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) res += s . charAt ( i ) ; if ( res . length ( ) == 2 ) break ; } if ( res . length ( ) == 2 ) System . out . println ( res ) ; else System . out . println ( " - 1" ) ; } public static void main ( String [ ] args ) { int n = 18720 ; converthenumber ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; boolean [ ] arr = new boolean [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = true ; } for ( int i = 0 ; i < 26 ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = false ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = true ; } for ( int i = 0 ; i < 26 ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = false ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = false ; } for ( int i = 0 ; i < 26 ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = false ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = false ; } for ( int i = 0 ; i < 26 ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] = false ; } System . out . println ( arr [ s . charAt ( s . length ( ) - 1 ) - ' a ' ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; Set < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; set . add ( arr [ i ] ) ; } for ( int i = 1 ; i <= n ; i ++ ) { if ( set . contains ( i ) ) { System . out . print ( i + " " ) ; } else { System . out . print ( n - i + " " ) ; } } System . out . println ( ) ; } } }
public class GFG { static int sn ( int n , int an ) { return ( n * ( 1 + an ) ) / 2 ; } static int trace ( int n , int m ) { int an = 1 + ( n - 1 ) * ( m + 1 ) ; int rowmajorSum = sn ( n , an ) ; an = 1 + ( n - 1 ) * ( n + 1 ) ; int colmajorSum = sn ( n , an ) ; return rowmajorSum + colmajorSum ; } public static void main ( String [ ] args ) { int N = 3 , M = 3 ; System . out . println ( trace ( N , M ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int H = sc . nextInt ( ) ; int W = sc . nextInt ( ) ; char [ ] [ ] board = new char [ H ] [ W ] ; long sum = 0 ; for ( int i = 0 ; i < H ; i ++ ) { board [ i ] = sc . next ( ) . toCharArray ( ) ; } for ( int i = 0 ; i < H ; i ++ ) { for ( int j = 0 ; j < W ; j ++ ) { if ( board [ i ] [ j ] == ' O ' ) { sum += 1 ; } else if ( board [ i ] [ j ] == ' I ' ) { sum += 1 ; } } } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( i % k == 0 ) count ++ ; if ( ( n / i ) % k == 0 ) count ++ ; } } if ( ( i * i ) == n && ( i % k == 0 ) ) count -- ; return count ; } public static void main ( String [ ] args ) { int n = 12 , k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } }
public class GFG { static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 && i % k == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 12 , k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } }
public class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y == 1 && x != 0 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int findModuloByM ( int X , int N , int M ) { if ( N < 6 ) { int temp = ( char ) ( 48 + X ) * N ; res = ( int ) temp % M ; return res ; } if ( N % 2 == 0 ) { int half = findModuloByM ( X , N / 2 , M ) % M ; res = ( half * power ( 10 , N / 2 , M ) + half ) % M ; return res ; } else { int half = findModuloByM ( X , N / 2 , M ) % M ; res = ( half * power ( 10 , N / 2 + 1 , M ) + half * 10 + X ) % M ; return res ; } } public static void main ( String [ ] args ) { int X = 6 , N = 14 , M = 9 ; System . out . println ( findModuloByM ( X , N , M ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] q = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { q [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] % 2 == 0 ) { count ++ ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( q [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class GFG { static int findMaxDiff ( int a [ ] , int n ) { if ( n < 2 ) { System . out . println ( " Invalid " ) ; return 0 ; } int min_val = Integer . MAX_VALUE , max_val = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] - i ) > max_val ) max_val = a [ i ] - i ; if ( ( a [ i ] - i ) < min_val ) min_val = a [ i ] - i ; } return ( max_val - min_val ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 15 , 4 , 12 , 13 } ; int n = arr . length ; System . out . println ( findMaxDiff ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; char [ ] [ ] arr = new char [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) . toCharArray ( ) ; } boolean [ ] [ ] ans = new boolean [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] == ' . ' ) { ans [ i ] [ j ] = ' # ' ; } else { ans [ i ] [ j ] = ' . ' ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ans [ i ] [ j ] == ' . ' ) { ans [ i ] [ j ] = ' . ' ; } else { ans [ i ] [ j ] = ' . ' ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ans [ i ] [ j ] == ' . ' ) { ans [ i ] [ j ] = ' . ' ; } else { ans [ i ] [ j ] = ' . ' ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ans [ i ] [ j ] == ' . ' ) { ans [ i ] [ j ] = ' . ' ; } else { ans [ i ] [ j ] = ' . ' ; } } } System . out . println ( ans [ n - 1 ] [ n - 1 ] == ' # ' ? " YES " : " NO " ) ; } }
import java . util . * ; public class GFG { static int numberOfPaths ( int m , int n ) { int count [ ] [ ] = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { count [ i ] [ 0 ] = 1 ; } for ( int j = 0 ; j < n ; j ++ ) { count [ 0 ] [ j ] = 1 ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 1 ; j < n ; j ++ ) { count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] ; } } return count [ m - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int m = 3 , n = 3 ; System . out . println ( numberOfPaths ( m , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; sum += arr [ i ] ; } if ( sum % n == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static boolean isKthBitSet ( int n , int k ) { if ( ( n >> ( k - 1 ) ) & 1 == 1 ) return true ; return false ; } static int setKthBit ( int n , int k ) { return ( ( 1 << ( k - 1 ) ) | n ) ; } static boolean allBitsAreSet ( int n ) { if ( ( ( n + 1 ) & n ) == 0 ) return true ; return false ; } static boolean bitsAreInAltOrder ( int n ) { int num = n ^ ( n >> 1 ) ; return allBitsAreSet ( num ) ; } static boolean bitsAreInAltPatrnInGivenRange ( int n , int l , int r ) { if ( isKthBitSet ( n , r ) ) { int num = n ; int left_shift = r ; } else { num = setKthBit ( n , ( r + 1 ) ) ; left_shift = r + 1 ; } num = num & ( ( 1 << left_shift ) - 1 ) ; num = num >> ( l - 1 ) ; return bitsAreInAltOrder ( num ) ; } public static void main ( String [ ] args ) { int n = 18 ; int l = 1 , r = 3 ; if ( bitsAreInAltPatrnInGivenRange ( n , l , r ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int factorial ( int n ) { if ( n <= 1 ) return 1 ; return n * factorial ( n - 1 ) ; } static int nCr ( int n , int r ) { return factorial ( n ) / ( factorial ( n - r ) * factorial ( r ) ) ; } static int NumberOfWays ( int n , int x , int y ) { return ( nCr ( 2 * n - x - y , n - x ) * factorial ( n ) * factorial ( n ) ) ; } public static void main ( String [ ] args ) { int n = 5 , x = 4 , y = 2 ; System . out . println ( NumberOfWays ( n , x , y ) ) ; } }
import java . util . * ; public class GFG { static String commonPrefixUtil ( String str1 , String str2 ) { int n1 = str1 . length ( ) , n2 = str2 . length ( ) ; String result = " " ; int j = 0 ; for ( int i = 0 ; i <= n1 - 1 && j <= n2 - 1 ; i ++ , j ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( j ) ) { break ; } result += str1 . charAt ( i ) ; } return ( result ) ; } static void commonPrefix ( String arr [ ] , int n ) { Arrays . sort ( arr ) ; System . out . println ( commonPrefixUtil ( arr [ 0 ] , arr [ n - 1 ] ) ) ; } public static void main ( String [ ] args ) { String arr [ ] = { " geeksforgeeks " , " geeks " , " geek " , " geezer " } ; int n = arr . length ; commonPrefix ( arr , n ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = n - 2 ; i >= 0 ; i -- ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { if ( a [ 0 ] == 1 ) { count ++ ; } } else { if ( a [ a [ a [ 0 ] - 1 ] ] == 1 ) { count ++ ; } } } if ( count == 2 ) { System . out . println ( - 1 ) ; } else { System . out . println ( count ) ; } } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int a = 0 , b = 1 ; for ( int i = 0 ; i < 32 ; i ++ ) { a = b ; b = a + b ; } return Integer . toString ( a ) ; } }
import java . util . * ; public class GFG { static void findFrequencyUtil ( int arr [ ] , int low , int high , int freq [ ] ) { if ( arr [ low ] == arr [ high ] ) { freq [ arr [ low ] ] += high - low + 1 ; } else { int mid = ( low + high ) / 2 ; findFrequencyUtil ( arr , low , mid , freq ) ; findFrequencyUtil ( arr , mid + 1 , high , freq ) ; } } static void findFrequency ( int arr [ ] , int n ) { int freq [ ] = new int [ n - 1 ] ; findFrequencyUtil ( arr , 0 , n - 1 , freq ) ; for ( int i = 0 ; i < arr [ n - 1 ] + 1 ; i ++ ) { if ( freq [ i ] != 0 ) { System . out . println ( " Element " + i + " occurs " + freq [ i ] + " times " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 2 , 3 , 3 , 5 , 5 , 8 , 8 , 8 , 9 , 9 , 10 } ; int n = arr . length ; findFrequency ( arr , n ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { List < Integer > totients = Library . listTients ( Library . pow ( 10 , 7 ) - 1 ) ; int minnumer = 1 ; int mindenom = 0 ; for ( int i = 2 ; i < totients . size ( ) ; i += 2 ) { if ( i * mindenom < minnumer * totients . get ( i ) && Library . toString ( i ) . compareTo ( totients . get ( i ) ) < 0 ) { minnumer = i ; mindenom = totients . get ( i ) ; } } return Integer . toString ( minnumer ) ; } }
import java . util . * ; public class GFG { static void intersection ( int a [ ] , int b [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( a [ i ] > b [ j ] ) j ++ ; else if ( b [ j ] > a [ i ] ) i ++ ; else { System . out . print ( a [ i ] + " " ) ; i ++ ; j ++ ; } } } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 4 , 5 , 5 , 6 } ; int b [ ] = { 3 , 3 , 5 } ; int n = a . length ; int m = b . length ; intersection ( a , b , n , m ) ; } }
import java . util . * ; public class GFG { static int findMin ( int a [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( int ) Math . log ( a [ i ] ) ; } int x = ( int ) Math . exp ( sum / n ) ; return ( int ) Math . exp ( x + 1 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 4 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int lcmOfArray ( int arr [ ] , int n ) { if ( n < 1 ) return 0 ; int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) ; return lcm ; } static int minPerfectSquare ( int arr [ ] , int n ) { int lcm = lcmOfArray ( arr , n ) ; int minPerfectSq = lcm ; int cnt = 0 ; while ( lcm > 1 && lcm % 2 == 0 ) { cnt ++ ; lcm /= 2 ; } if ( cnt % 2 != 0 ) minPerfectSq *= 2 ; for ( int i = 3 ; lcm > 1 ; i ++ ) { cnt = 0 ; while ( lcm % i == 0 ) { cnt ++ ; lcm /= i ; } if ( cnt % 2 != 0 ) minPerfectSq *= i ; } return minPerfectSq ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 7 } ; int n = arr . length ; System . out . println ( minPerfectSquare ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int subarrayCount ( int arr [ ] , int n ) { int result = 0 ; int fast = 0 , slow = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] == 1 ) fast ++ ; else { int len = fast - slow + 1 ; result += len * ( len - 1 ) / 2 ; fast = i ; slow = i ; } } if ( fast != slow ) { int len = fast - slow + 1 ; result += len * ( len - 1 ) / 2 ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( subarrayCount ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; arr [ i ] [ 2 ] = sc . nextInt ( ) ; arr [ i ] [ 3 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; while ( arr [ i ] [ 0 ] != 0 ) { arr [ i ] [ 0 ] = arr [ i ] [ 0 ] ; arr [ i ] [ 1 ] = arr [ i ] [ 1 ] ; arr [ i ] [ 2 ] = arr [ i ] [ 2 ] ; count ++ ; } if ( count == n ) { System . out . println ( arr [ i ] [ 0 ] + " " + arr [ i ] [ 1 ] ) ; } else if ( count == n ) { System . out . println ( arr [ i ] [ 1 ] + " " + arr [ i ] [ 2 ] ) ; } else if ( count == n ) { System . out . println ( arr [ i ] [ 2 ] + " " + arr [ i ] [ 3 ] ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; min = Math . min ( arr [ i ] , min ) ; max = Math . max ( arr [ i ] , max ) ; } System . out . println ( min + " " + max + " " + min ) ; } }
import java . util . * ; public class GFG { static final int MAX_CHARS = 256 ; static String findSubString ( String str ) { int n = str . length ( ) ; if ( n <= 1 ) return str ; int dist_count = 1 ; int [ ] dist = new int [ str . length ( ) ] ; int [ ] curr_count = new int [ str . length ( ) ] ; int count = 0 , start = 0 , min_len = n ; for ( int j = 0 ; j < n ; j ++ ) { curr_count [ str . charAt ( j ) ] ++ ; if ( curr_count [ str . charAt ( j ) ] == 1 ) count ++ ; if ( count == dist_count ) { while ( curr_count [ str . charAt ( start ) ] > 1 ) { if ( curr_count [ str . charAt ( start ) ] > 1 ) curr_count [ str . charAt ( start ) ] -- ; start ++ ; } len_window = j - start + 1 ; if ( min_len > len_window ) { min_len = len_window ; start = start ; } } } return String . valueOf ( str . substring ( start , start + min_len ) ) ; } public static void main ( String [ ] args ) { System . out . println ( " Smallest window containing " + " all distinct characters is : " + findSubString ( " aabcbcdbca " ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int sum = 0 ; int [ ] [ ] dp = new int [ 4 ] [ 100 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) continue ; int sum = 0 ; for ( int k = 0 ; k < 4 ; k ++ ) { sum += dp [ i ] [ j ] ; } dp [ i ] [ j ] = sum ; } } int max = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) continue ; int sum = 0 ; for ( int k = 0 ; k < 4 ; k ++ ) { sum += dp [ i ] [ j ] ; } dp [ i ] [ j ] = sum ; max = Math . max ( max , sum / ( i + j ) ) ; } } System . out . println ( max ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { dp [ i ] [ j ] = 0 ; continue ; } dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] + Math . max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j + 1 ] ) ) ; } } out . println ( dp [ n ] [ 0 ] ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static void countPairs ( int arr [ ] , int n ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } odd_pairs = odd * ( n - 1 ) ; even_pairs = even * ( n - 1 ) ; System . out . println ( odd_pairs ) ; System . out . println ( even_pairs ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 } ; int n = arr . length ; countPairs ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = Math . min ( m , n ) ; m -= x ; if ( a % 10 == 0 ) { b ++ ; a /= 10 ; } while ( b % 10 == 0 ) { n ++ ; b /= 10 ; } if ( a > b ) { System . out . println ( " > " ) ; } else if ( a < b ) { System . out . println ( " < " ) ; } else { System . out . println ( " = " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = 0 ; int y = 0 ; int count = 0 ; boolean found = false ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; if ( s . charAt ( x ) == ' S ' ) { y ++ ; if ( y == m ) { found = true ; x = 0 ; count ++ ; } else { x ++ ; } } else if ( s . charAt ( x ) == ' G ' ) { y ++ ; if ( y == m ) { found = true ; x = 0 ; count ++ ; } else { x ++ ; } } else { x ++ ; } } if ( found == false ) { System . out . println ( - 1 ) ; } else { System . out . println ( count ) ; } } }
import java . util . * ; public class GFG { static boolean search ( int arr [ ] , int n , int x ) { int front = 0 , back = n - 1 ; while ( front <= back ) { if ( arr [ front ] == x || arr [ back ] == x ) return true ; front ++ ; back -- ; } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 80 , 30 , 60 , 50 , 110 , 100 , 130 , 170 } ; int x = 130 ; int n = arr . length ; if ( search ( arr , n , x ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static void countFreq ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( arr [ i ] ) != - 1 ) { System . out . println ( arr [ i ] + " " + mp . get ( arr [ i ] ) ) ; } mp . put ( arr [ i ] , - 1 ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 } ; int n = arr . length ; countFreq ( arr , n ) ; } }
import java . util . * ; public class GFG { static int MinCostTree ( int arr [ ] , int n ) { int ans = 0 ; Stack < Integer > st = new Stack < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { while ( st . peek ( ) <= arr [ i ] ) { int x = st . peek ( ) ; st . pop ( ) ; ans += x * Math . min ( st . peek ( ) , arr [ i ] ) ; } st . push ( arr [ i ] ) ; } for ( int i = 2 ; i < st . size ( ) ; i ++ ) ans += st . peek ( ) * st . peek ( ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 } ; int n = arr . length ; System . out . println ( MinCostTree ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { map . put ( s . charAt ( i ) , map . getOrDefault ( s . charAt ( i ) , 0 ) + 1 ) ; } if ( map . size ( ) != t . size ( ) ) { System . out . println ( - 1 ) ; return ; } int [ ] ans = new int [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { ans [ s . charAt ( i ) - ' a ' ] ++ ; ans [ t . charAt ( i ) - ' a ' ] ++ ; } System . out . println ( ans . length ) ; for ( int i = 0 ; i < ans . length ; i ++ ) { System . out . print ( ans [ i ] + " " ) ; } } }
public class GFG { static void findEquation ( int a , int b ) { int summ = ( a + b ) ; int product = ( a * b ) ; System . out . println ( " x ^ 2 - ( " + summ + " x ) + ( " + product + " ) = 0" ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; findEquation ( a , b ) ; } }
public class GFG { static void circle_equation ( int x1 , int y1 , int r ) { int a = - 2 * x1 ; int b = - 2 * y1 ; int c = ( r * r ) - ( x1 * x1 ) - ( y1 * y1 ) ; System . out . print ( " x ^ 2 + ( " + a + " x ) + " " ) ; System . out . print ( " y ^ 2 + ( " + b + " y ) = " ) ; System . out . println ( c + " . " ) ; } public static void main ( String [ ] args ) { int x1 = 2 , y1 = - 3 , r = 8 ; circle_equation ( x1 , y1 , r ) ; } }
import java . util . * ; public class GFG { static void unique_combination ( int l , int sum , int K , Vector < Integer > A ) { if ( sum == K ) { System . out . print ( " { " ) ; for ( int i = 0 ; i < A . size ( ) ; i ++ ) { if ( i != 0 ) System . out . print ( " " ) ; System . out . print ( A . get ( i ) ) ; if ( i != A . size ( ) - 1 ) System . out . print ( " , " ) ; } System . out . println ( " } " ) ; return ; } for ( int i = l ; i < A . size ( ) ; i ++ ) { if ( sum + A . get ( i ) > K ) continue ; if ( i == 1 && A . get ( i ) == A . get ( i - 1 ) && i > l ) continue ; Vector < Integer > local = new Vector < Integer > ( ) ; local . add ( A . get ( i ) ) ; unique_combination ( i + 1 , sum + A . get ( i ) , K , local , A ) ; local . remove ( local . size ( ) - 1 ) ; } } static void Combination ( int A [ ] , int K ) { Collections . sort ( A ) ; Vector < Integer > local = new Vector < Integer > ( ) ; unique_combination ( 0 , 0 , K , local , A ) ; } public static void main ( String [ ] args ) { int A [ ] = { 10 , 1 , 2 , 7 , 6 , 1 , 5 } ; int K = 8 ; Combination ( A , K ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n ; static int a [ ] ; static int solve ( ) { Arrays . sort ( a ) ; int min = a [ 0 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } return min ; } static void reverse ( int a [ ] ) { int min = a [ 0 ] ; for ( int i : a ) { if ( a [ i ] < min ) { min = a [ i ] ; } } str . append ( min ) . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } int q = Integer . parseInt ( bf . readLine ( ) . trim ( ) ) ; a = new int [ q ] ; String s [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Integer . parseInt ( s [ 0 ] ) ; a = new int [ n ] ; s = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( s [ i ] ) ; int q = Integer . parseInt ( bf . readLine ( ) . trim ( ) ) ; reverse ( a ) ; for ( int i = 0 ; i < q ; i ++ ) { str . append ( solve ( ) ) . append ( " \n " ) ; } pw . print ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; if ( c >= ' a ' && c <= ' z ' ) { if ( c >= ' a ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' a ' + i ) ) ; continue ; } else if ( c >= ' that ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' that ' + i ) ) ; continue ; } else if ( c >= ' this ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } else if ( c >= ' that ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } else if ( c >= ' this ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } else if ( c >= ' that ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } else if ( c >= ' this ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } else if ( c >= ' this ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } else if ( c >= ' that ' && c <= ' z ' ) { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } else { System . out . print ( ( char ) ( ' this ' + i ) ) ; continue ; } } } System . out . println ( ) ; } } }
public class GFG { static boolean findNature ( int a , int b , int n ) { if ( n == 0 ) return ( a & 1 ) == 0 ; if ( n == 1 ) return ( b & 1 ) == 0 ; if ( ( a & 1 ) == 0 ) { if ( ( b & 1 ) == 0 ) return false ; else return true ; } else { if ( n % 3 != 0 ) return true ; else return false ; } } static boolean findNature ( int a , int b , int n ) { if ( n == 0 ) return ( a & 1 ) == 0 ? true : false ; else return ( ( n + 1 ) % 3 != 0 ) ? true : false ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 , n = 3 ; if ( findNature ( a , b , n ) == true ) System . out . print ( " Odd " ) ; else System . out . print ( " Even " ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; int n , m , d , p , q ; void run ( ) { for ( ; ) { d = sc . nextInt ( ) ; e = sc . nextInt ( ) ; if ( ( n | d ) == 0 ) { break ; } m = d ; d = e ; p = q = d ; for ( int i = 0 ; i < m ; i ++ ) { q = i * i + q * q ; if ( q - m > EPS ) { p = q - m ; q = d ; } } println ( p ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static int max_sum ( int a [ ] , int n ) { int dp [ ] = new int [ n ] ; if ( n == 1 ) dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; else if ( n == 2 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; dp [ 1 ] = Math . max ( a [ 1 ] , dp [ 0 ] ) ; } else if ( n >= 3 ) { dp [ 0 ] = Math . max ( 0 , a [ 0 ] ) ; dp [ 1 ] = Math . max ( a [ 1 ] , Math . max ( 0 , a [ 0 ] ) ) ; dp [ 2 ] = Math . max ( a [ 2 ] , Math . max ( a [ 1 ] , Math . max ( 0 , a [ 0 ] ) ) ) ; for ( int i = 3 ; i < n ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , a [ i ] + dp [ i - 3 ] ) ; } } return dp [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , - 2 , 4 , 3 } ; int n = arr . length ; System . out . println ( max_sum ( arr , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; s = s . toLowerCase ( ) ; if ( s . contains ( " z " ) || s . contains ( " a " ) || s . contains ( " e " ) || s . contains ( " i " ) || s . contains ( " o " ) || s . contains ( " u " ) || s . contains ( " y " ) || s . contains ( " a " ) || s . contains ( " e " ) || s . contains ( " o " ) || s . contains ( " u " ) || s . contains ( " a " ) || s . contains ( " y " ) || s . contains ( " o " ) || s . contains ( " u " ) || s . contains ( " a " ) || s . contains ( " y " ) || s . contains ( " z " ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
public class GFG { static int minimumX ( int n , int k ) { int mini = Integer . MAX_VALUE ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { int fir = i ; int sec = n / i ; int num1 = fir * k + sec ; int res = ( num1 / k ) * ( num1 % k ) ; if ( res == n ) mini = Math . min ( num1 , mini ) ; int num2 = sec * k + fir ; int res = ( num2 / k ) * ( num2 % k ) ; if ( res == n ) mini = Math . min ( num2 , mini ) ; } } return mini ; } public static void main ( String [ ] args ) { int n = 4 , k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 ; k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = in . nextInt ( ) ; } boolean [ ] visited = new boolean [ n ] ; int max = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( visited [ a [ i ] ] ) continue ; visited [ a [ i ] ] = true ; max = Math . max ( max , dfs ( a [ i ] ) ) ; } out . println ( max + 1 ) ; return true ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
public class GFG { static int SellingPrice ( int CP , int PP ) { int Pdecimal = 1 + PP / 100 ; int res = Pdecimal * CP ; return res ; } public static void main ( String [ ] args ) { int C = 720 ; int P = 13 ; System . out . println ( SellingPrice ( C , P ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int l = arr [ 0 ] , r = arr [ n - 1 ] ; int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < l ) { l = arr [ i ] ; ans = ans + 1 ; } else if ( arr [ i ] > r ) { r = arr [ i ] ; ans = ans + 1 ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int b = 2 ; b <= n ; b ++ ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( ( n - s ) % b == 0 ) { ans += i ; break ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i <= b ; i ++ ) { int sum = m * ( b - i ) + i ; max = Math . max ( max , sum ) ; } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static void check ( int n , int m ) { if ( m % n == 0 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 10 ; check ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] && arr [ i ] == arr [ i + 2 ] ) { flag = true ; break ; } } if ( flag == false ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a < b ) System . out . println ( b - a ) ; else if ( a > b ) System . out . println ( a - b ) ; else System . out . println ( 0 ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; Map < String , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < m ; i ++ ) { String t = sc . next ( ) ; String [ ] a = t . split ( " " ) ; String b = sc . next ( ) ; map . put ( a [ 0 ] , a [ 1 ] ) ; map . put ( b [ 0 ] , b [ 1 ] ) ; } StringBuilder sb = new StringBuilder ( ) ; for ( Map . Entry < String , Integer > entry : map . entrySet ( ) ) { sb . append ( entry . getKey ( ) ) . append ( " " ) ; sb . append ( entry . getValue ( ) ) ; } System . out . println ( sb ) ; } }
public class GFG { static int findNthOccur ( String str , char ch , int N ) { int occur = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ch ) { occur ++ ; } if ( occur == N ) { return i ; } } return - 1 ; } public static void main ( String [ ] args ) { String str = " geeks " ; char ch = ' e ' ; int N = 2 ; System . out . println ( findNthOccur ( str , ch , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; if ( a == b && c == d && e == e ) { System . out . println ( " Elephant " ) ; } else if ( a == b && c == d && e == e ) { System . out . println ( " Bear " ) ; } else if ( a == c && d == e && b == c ) { System . out . println ( " Alien " ) ; } else if ( a == d && e == e ) { System . out . println ( " Bear " ) ; } else if ( a == e && c == d && b == e ) { System . out . println ( " Elephant " ) ; } else if ( a == d && e == e ) { System . out . println ( " Bear " ) ; } else if ( a == e && c == d && b == e ) { System . out . println ( " Elephant " ) ; } else if ( a == d && e == e ) { System . out . println ( " Bear " ) ; } } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = Library . sqrt ( Library . pow ( 10 , 15 ) ) ; int MODULUS = ( int ) Library . pow ( 10 , 9 ) ; int splitCount = Library . sqrt ( Library . pow ( Library . sqrt ( LIMIT ) , Library . pow ( Library . sqrt ( Library . pow ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( Library . sqrt ( double D . sqrt ( Library . sqrt ( double D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . sqrt ( D . D D D D D D D D D D D D D D D D D D D D D D D = D D D D D D D D D D = D D D D D D D D D D = D D D D D D D D D D D D = D
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; long z = sc . nextLong ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextLong ( ) ; } long sum = 0 ; long max = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += arr [ i ] ; max = Math . max ( max , sum ) ; } sum -= arr [ k - 1 ] ; if ( k % 2 == 1 ) { sum = sum * ( k - i ) ; max = Math . max ( max , sum ) ; } System . out . println ( max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int l = 0 , r = n - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != i + 1 ) { l = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != i + 1 ) { r = i ; break ; } } int c = l + 1 , c2 = r + 1 ; for ( int i = c2 ; i < n ; i ++ ) { if ( arr [ i ] == c ) { System . out . println ( c2 + " " + i ) ; break ; } } } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 3 ] ; int [ ] [ ] b = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = in . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] == i ) { b [ i ] [ j ] = - 1 ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( b [ i ] [ j ] == - 1 ) { a [ i ] [ j ] = - 1 ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] == - 1 ) { b [ i ] [ j ] = - 1 ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( b [ i ] [ j ] == - 1 ) { a [ i ] [ j ] = - 1 ; } } } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ 0 ] == - 1 && b [ i ] [ 1 ] == - 1 ) { ans = Math . max ( ans , a [ i ] [ 0 ] ) ; } } out . println ( ans ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . currentTimeMillis ( ) ; solve ( ) ; out . flush
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) , s = sc . nextInt ( ) ; if ( ( n | s ) == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = s % n ; if ( b [ i ] == 0 ) { System . out . println ( i ) ; break ; } } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int m = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < a . length ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] x = new int [ m ] ; for ( int i = 0 ; i < x . length ; i ++ ) { x [ i ] = in . nextInt ( ) ; } int [ ] q = new int [ m ] ; for ( int i = 0 ; i < q . length ; i ++ ) { q [ i ] = in . nextInt ( ) ; } long ans = 0 ; int left = 0 ; int right = 0 ; for ( int i = 0 ; i < m ; i ++ ) { while ( q [ left ] <= q [ right ] ) { ans += right - left ; left ++ ; } } out . println ( ans ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = Math . abs ( a - b ) ; if ( c % 10 == 0 ) { System . out . println ( c / 10 + 1 ) ; } else { System . out . println ( c / 10 ) ; } } } }
import java . util . * ; public class GFG { static int maxSize = 100005 ; static boolean isFib [ ] = new boolean [ maxSize ] ; static int prefix [ ] = new int [ maxSize ] ; static int digitSum ( int num ) { int s = 0 ; while ( num != 0 ) { s = s + num % 10 ; num = num / 10 ; } return s ; } static void generateFibonacci ( ) { int prev = 0 , curr = 1 ; isFib [ prev ] = true ; isFib [ curr ] = true ; while ( curr < maxSize ) { int temp = curr + prev ; if ( temp < maxSize ) isFib [ temp ] = true ; prev = curr ; curr = temp ; } } static void precompute ( int k ) { generateFibonacci ( ) ; for ( int i = 1 ; i < maxSize ; i ++ ) { int sum = digitSum ( i ) ; if ( isFib [ sum ] == true && sum % k == 0 ) prefix [ i ] ++ ; } for ( int i = 1 ; i < maxSize ; i ++ ) prefix [ i ] = prefix [ i ] + prefix [ i - 1 ] ; } static void performQueries ( int k , int q , int query [ ] [ ] ) { precompute ( k ) ; for ( int i = 0 ; i < q ; i ++ ) { int l = query [ i ] [ 0 ] , r = query [ i ] [ 1 ] ; int cnt = prefix [ r ] - prefix [ l - 1 ] ; System . out . println ( cnt ) ; } } public static void main ( String [ ] args ) { int query [ ] [ ] = { { 1 , 11 } , { 5 , 15 } , { 2 , 24 } } ; int k = 2 ; int q = query . length ; performQueries ( k , q , query ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . nextInt ( ) ; int sum = 0 ; if ( y1 < y2 ) { sum += Math . abs ( x1 - x2 ) ; } if ( y1 < y3 ) { sum += Math . abs ( x1 - x3 ) ; } if ( y2 < y3 ) { sum += Math . abs ( x2 - x3 ) ; } System . out . println ( sum ) ; } } }
public class GFG { static boolean isPalindrome ( String s ) { int l = s . length ( ) ; for ( int i = 0 ; i < l / 2 ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( l - 1 - i ) ) return false ; } return true ; } static boolean createStringAndCheckPalindrome ( int N ) { String sub = " " + ( char ) N ; String res_str = " " ; int sum = 0 ; while ( N > 0 ) { int digit = N % 10 ; sum += digit ; N = N / 10 ; } while ( res_str . length ( ) < sum ) res_str += sub ; if ( res_str . length ( ) > sum ) res_str = res_str . substring ( 0 , sum ) ; if ( isPalindrome ( res_str ) ) return true ; return false ; } public static void main ( String [ ] args ) { int N = 10101 ; if ( createStringAndCheckPalindrome ( N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = in . nextInt ( ) ; a [ i ] [ 1 ] = in . nextInt ( ) ; } boolean [ ] [ ] dp = new boolean [ n ] [ 14 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 14 ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = false ; continue ; } if ( dp [ i ] [ j ] ) { out . println ( a [ i ] [ j ] + " " + dp [ i ] [ j ] ) ; } } } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class GFG { static int sum_even_and_even_index ( int arr [ ] , int n ) { int i = 0 , sum = 0 ; for ( i = 0 ; i < n ; i += 2 ) { if ( arr [ i ] % 2 == 0 ) sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 12 , 1 , 18 , 8 } ; int n = arr . length ; System . out . println ( " Sum of even numbers at even indices is " + sum_even_and_even_index ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; for ( int tt = 0 ; tt < t ; tt ++ ) { String s = in . next ( ) ; char [ ] c = s . toCharArray ( ) ; boolean flag = true ; for ( int i = 0 ; i < c . length ; i ++ ) { if ( c [ i ] != c [ i ] ) { flag = false ; break ; } } if ( flag ) pw . println ( " YES " ) ; else pw . println ( " NO " ) ; } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static void printDuplicates ( int arr [ ] , int n ) { int fl = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ arr [ i ] % n ] >= n ) { if ( arr [ arr [ i ] % n ] < 2 * n ) { System . out . print ( arr [ i ] % n + " " ) ; fl = 1 ; } } arr [ arr [ i ] % n ] += n ; } if ( fl == 0 ) System . out . println ( " - 1" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 6 , 3 , 1 , 3 , 6 , 6 } ; int arr_size = arr . length ; printDuplicates ( arr , arr_size ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += 1 / ( i + 1 ) ; } System . out . println ( ans ) ; } }
public class GFG { static int Sum ( int n ) { return n * ( n + 1 ) * ( n + 2 ) / 3 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( Sum ( n ) ) ; } }
import java . io . * ; public class GFG { static int maxHandshake ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( maxHandshake ( n ) ) ; } }
public class GFG { static int grayCode ( int n ) { return n ^ ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( grayCode ( n ) ) ; } }
public class GFG { static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }
public class GFG { static int possibleways ( int n ) { if ( n % 2 == 1 ) return 0 ; else if ( n % 4 == 0 ) return n / 4 - 1 ; else return n / 4 ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( possibleways ( n ) ) ; } }
public class GFG { static int CountSetBits ( int n ) { if ( n == 0 ) return 0 ; if ( ( n & 1 ) == 1 ) return 1 + CountSetBits ( n >> 1 ) ; else return CountSetBits ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( CountSetBits ( n ) ) ; } }
public class GFG { static int summ ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } public static void main ( String [ ] args ) { int m = 3 , n = 2 ; System . out . println ( summ ( m , n ) ) ; } }
import java . io . * ; public class GFG { static int SUM ( int n , int m ) { if ( m == 1 ) return ( n * ( n + 1 ) / 2 ) ; int sum = SUM ( n , m - 1 ) ; return sum * ( sum + 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 5 , m = 3 ; System . out . println ( " SUM ( " + n + " , " + m + " ) : " + SUM ( n , m ) ) ; } }
public class GFG { static int maxLCM ( int n ) { return ( n * ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( maxLCM ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { return ( n * ( n + 1 ) * ( n + 1 ) * ( n + 2 ) ) / 12 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
public class GFG { static int cntWays ( int n ) { if ( n % 2 == 1 ) return 0 ; else return ( n - 2 ) / 4 ; } public static void main ( String [ ] args ) { int n = 18 ; System . out . println ( cntWays ( n ) ) ; } }
public class GFG { static void find_composite_nos ( int n ) { System . out . println ( 9 * n + " " + 8 * n ) ; } public static void main ( String [ ] args ) { int n = 4 ; find_composite_nos ( n ) ; } }
public class GFG { static int findThirdDigit ( int n ) { if ( n < 3 ) return 0 ; return ( n == 1 ) ? 1 : 6 ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( findThirdDigit ( n ) ) ; } }
import java . io . * ; public class GFG { static int countMaxIntersect ( int n ) { return n * ( n - 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } }
public class GFG { static int sum ( int n ) { if ( n == 1 ) return 2 ; else return ( n * ( n + 1 ) + sum ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sum ( n ) ) ; } }
public class GFG { static int highestPowerOf2 ( int n ) { return ( n & ( ~ ( n - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 48 ; System . out . println ( highestPowerOf2 ( n ) ) ; } }
import java . io . * ; public class GFG { static int countIntersections ( int n ) { return n * ( n - 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntersections ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String result = " None " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch != ' a ' && ch != ' z ' ) { result = " " + ch ; } } System . out . println ( result ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] / min != arr [ i ] / min ) { System . out . println ( - 1 ) ; return ; } } System . out . println ( arr [ 0 ] / min ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n >= 1200 ) { System . out . println ( " ABC " ) ; } else { System . out . println ( " ARC " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int i = 0 ; while ( true ) { if ( i < n ) { if ( a [ i ] == 0 ) { a [ i ] = - 1 ; } else { b [ i ] = a [ i ] + 1 ; } i ++ ; } else { if ( a [ i ] == 0 ) { a [ i ] = - 1 ; } else { b [ i ] = a [ i ] + 1 ; } i ++ ; } } for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == - 1 ) { System . out . print ( " _ " ) ; } else { System . out . print ( a [ j ] + " " ) ; } } System . out . println ( ) ; } }
public class GFG { static int smallest ( int x , int y , int z ) { int c = 0 ; while ( x != 0 && y != 0 && z != 0 ) { x -- ; y -- ; z -- ; c ++ ; } return c ; } public static void main ( String [ ] args ) { int x = 12 , y = 15 , z = 5 ; System . out . println ( " Minimum of 3 numbers is " + smallest ( x , y , z ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int [ ] arr = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { sum += arr [ i ] * 500 ; } System . out . println ( sum >= 1000 ? 1 : 0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; double sum = 0 ; for ( int i = 1 ; i < m ; i ++ ) { sum += 2 * ( i - 1 ) * ( i - 1 ) + 2 * ( i - 1 ) * i ; } System . out . println ( sum / ( m * m ) ) ; } }
import java . io . * ; public class GFG { static int countCubes ( int a , int b ) { return ( int ) Math . floor ( Math . sqrt ( b ) - Math . ceil ( Math . sqrt ( a ) ) + 1 ) ; } public static void main ( String [ ] args ) { int a = 7 , b = 28 ; System . out . println ( " Count of cubes is " + countCubes ( a , b ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int d = sc . nextInt ( ) , n = sc . nextInt ( ) ; if ( ( d | n ) == 0 ) break ; int [ ] [ ] map = new int [ 101 ] [ 101 ] ; for ( int i = 0 ; i < 101 ; i ++ ) for ( int j = 0 ; j < 101 ; j ++ ) map [ i ] [ j ] = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) , e = sc . nextInt ( ) , r = sc . nextInt ( ) ; for ( int j = 0 ; j < 101 ; j ++ ) { map [ a + j ] [ e + r ] = map [ a + j ] [ e + r ] ; } } boolean flg = true ; for ( int i = 0 ; i < 101 ; i ++ ) { flg = false ; for ( int j = 0 ; j < 101 ; j ++ ) { if ( map [ i ] [ j ] == 0 ) { flg = true ; break ; } } if ( flg ) { System . out . println ( i + 1 ) ; break ; } } if ( flg ) System . out . println ( " NA " ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int triangle = 0 ; for ( int i = 1 ; ; i ++ ) { triangle += i ; if ( numDivisors ( triangle ) > 500 ) return Integer . toString ( triangle ) ; } } private static int numDivisors ( int n ) { int result = 0 ; int end = Library . sqrt ( n ) ; for ( int i = 1 ; i <= end ; i ++ ) { if ( n % i == 0 ) { result -- ; } } return result ; } }
import java . util . * ; public class GFG { static int findDelta ( int a , int b , int c , int d ) { return ( b * c - a * d ) / ( d - c ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 9 , c = 3 , d = 5 ; System . out . println ( " \u0394 X = " + findDelta ( a , b , c , d ) ) ; } }
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( int n , boolean [ ] isPrime ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) isPrime [ i ] = true ; int p = 2 ; while ( p * p <= n ) { if ( isPrime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) isPrime [ i ] = false ; } p ++ ; } } static void findPrimePair ( int n ) { boolean [ ] isPrime = new boolean [ n + 1 ] ; SieveOfEratosthenes ( n , isPrime ) ; for ( int i = 0 ; i < n ; i ++ ) if ( isPrime [ i ] && isPrime [ n - i ] ) { System . out . println ( i + " " + ( n - i ) ) ; return ; } } public static void main ( String [ ] args ) { int n = 74 ; findPrimePair ( n ) ; } }
public class GFG { static int replaceDigit ( int x , int d1 , int d2 ) { int result = 0 ; int multiply = 1 ; while ( x % 10 > 0 ) { int remainder = x % 10 ; if ( remainder == d1 ) result = result + d2 * multiply ; else result = result + remainder * multiply ; multiply *= 10 ; x = x / 10 ; } return result ; } public static void main ( String [ ] args ) { int x = 645 ; int d1 = 6 , d2 = 5 ; System . out . println ( replaceDigit ( x , d1 , d2 ) ) ; } }
public class GFG { static int printPattern ( int i , int j , int n ) { if ( j >= n ) return 0 ; if ( i >= n ) return 1 ; if ( j == i || j == n - 1 - i ) { if ( i == n - 1 - j ) System . out . print ( " / " ) ; else System . out . print ( " \ \ " " ) ; } else { System . out . print ( " * " ) ; } if ( printPattern ( i , j + 1 , n ) == 1 ) return 1 ; System . out . println ( ) ; return printPattern ( i + 1 , 0 , n ) ; } public static void main ( String [ ] args ) { int N = 9 ; printPattern ( 0 , 0 , N ) ; } }
import java . util . * ; public class GFG { static int getPairsCount ( int arr [ ] , int n , int sum ) { int m [ ] = new int [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) { m [ arr [ i ] ] ++ ; m [ arr [ i ] ] ++ ; } int twice_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { twice_count += m [ sum - arr [ i ] ] ; if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ; } return twice_count / 2 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 7 , - 1 , 5 } ; int n = arr . length ; int sum = 6 ; System . out . println ( " Count of pairs is " + getPairsCount ( arr , n , sum ) ) ; } }
public class GFG { static int Count_subarray ( int arr [ ] , int n ) { int subarray_sum = 0 , remaining_sum = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { subarray_sum = 0 ; remaining_sum = 0 ; for ( int k = i ; k <= j ; k ++ ) subarray_sum += arr [ k ] ; for ( int l = 0 ; l < i ; l ++ ) remaining_sum += arr [ l ] ; for ( int l = j + 1 ; l < n ; l ++ ) remaining_sum += arr [ l ] ; if ( subarray_sum > remaining_sum ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 9 , 12 , 6 } ; int n = arr . length ; System . out . println ( Count_subarray ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = Math . abs ( a - b ) + x ; if ( ans >= n - 1 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( ans ) ; } } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % 10 != 0 ) { System . out . println ( sum ) ; return ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum % 10 != 0 ? sum : 0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 1 ; i < 101 ; i ++ ) { int cnt = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] != i ) { cnt ++ ; } } min = Math . min ( min , cnt ) ; } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static int findRepeatingNumber ( int arr [ ] , int n ) { int sq = ( int ) Math . sqrt ( n ) ; int i , j ; int count [ ] = new int [ n / sq + 1 ] ; for ( i = 0 ; i < n ; i ++ ) count [ ( arr [ i ] - 1 ) / sq ] ++ ; int selected_block = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( count [ i ] > sq ) { selected_block = i ; break ; } } int m [ ] = new int [ n ] ; for ( i = 0 ; i < n ; i ++ ) { if ( ( selected_block * sq ) < arr [ i ] && ( arr [ i ] <= ( selected_block + 1 ) * sq ) ) { m [ arr [ i ] ] ++ ; if ( m [ arr [ i ] ] > 1 ) return arr [ i ] ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 , 5 , 4 } ; int n = 5 ; System . out . println ( " One of the numbers repeated in the array is : " + findRepeatingNumber ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int maxPrimeFactors ( int n ) { int maxPrime = - 1 ; while ( n % 2 == 0 ) { maxPrime = 2 ; n >>= 1 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { maxPrime = i ; n = n / i ; } } if ( n > 2 ) maxPrime = n ; return maxPrime ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( maxPrimeFactors ( n ) ) ; n = 25698751364526 ; System . out . println ( maxPrimeFactors ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( Math . min ( count , n - count ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; else count = 0 ; } System . out . println ( Math . min ( count , 2 ) ) ; } }
import java . util . * ; public class GFG { static void pythagoreanTriplet ( int n ) { for ( int i = 1 ; i <= n / 3 ; i ++ ) { for ( int j = i + 1 ; j <= n / 2 ; j ++ ) { int k = n - i - j ; if ( i * i + j * j == k * k ) { System . out . println ( i + " , " + j + " , " + k ) ; return ; } } } System . out . println ( " No Triplet " ) ; } public static void main ( String [ ] args ) { int n = 12 ; pythagoreanTriplet ( n ) ; } }
import java . io . * ; public class GFG { static int countDigits ( int a , int b ) { if ( a == 0 || b == 0 ) return 1 ; return ( int ) Math . floor ( Math . log10 ( Math . abs ( a ) ) + Math . log10 ( Math . abs ( b ) ) ) + 1 ; } public static void main ( String [ ] args ) { int a = 33 , b = - 24 ; System . out . println ( countDigits ( a , b ) ) ; } }
import java . util . * ; public class GFG { static int indexOfFirstOne ( int arr [ ] , int low , int high ) { while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == 1 && mid == 0 || arr [ mid - 1 ] == 0 ) break ; else if ( arr [ mid ] == 1 ) high = mid - 1 ; else low = mid + 1 ; } return mid ; } static int posOfFirstOne ( int arr [ ] ) { int l = 0 , h = 1 ; while ( arr [ h ] == 0 ) { l = h ; h = 2 * h ; } return indexOfFirstOne ( arr , l , h ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 0 , 1 , 1 , 1 , 1 } ; System . out . println ( " Index = " + posOfFirstOne ( arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 3 == 0 ) { System . out . println ( n / 3 * 2 ) ; } else if ( n % 3 == 1 ) { System . out . println ( 1 ) ; } else { System . out . println ( n / 3 * 2 + 1 ) ; } } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; import static java . util . Collections . * ; import static java . lang . Math . * ; public class Main { int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { double n = sc . nextDouble ( ) ; if ( n < 0 ) break ; if ( n % 16 == 0 ) { println ( " NA " ) ; continue ; } int res = 0 ; for ( int i = 0 ; i < 16 ; i ++ ) { res += ( int ) ( n % 16 ) ; n /= 16 ; } println ( res + " . " + res ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
public class GFG { static int digSum ( int n ) { int sum = 0 , rem = 0 ; while ( n > 0 ) { rem = n % 10 ; sum = sum + rem ; n /= 10 ; } return sum ; } static int findX ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) { if ( i + digSum ( i ) == n ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int n = 43 ; System . out . println ( " x = " + findX ( n ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = in . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] > p [ i + 1 ] ) { max = Math . max ( max , i + 1 - p [ i ] ) ; } } out . println ( n - max ) ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , m ; static void solve ( ) { int a = n - m ; int b = n + m - a ; str . append ( a + b ) . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { boolean lenv = false ; BufferedReader bf ; PrintWriter pw ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } String st [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Integer . parseInt ( st [ 0 ] ) ; m = Integer . parseInt ( st [ 1 ] ) ; solve ( ) ; pw . print ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class GFG { static void performQueries ( int A [ ] , int q ) { int n = A . length ; int [ ] pref_xor = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; for ( int i = q ; i >= 0 ; i -- ) { int L = i ; int R = i ; if ( L > R ) L = R ; R = L ; if ( L != R && pref_xor [ R ] == pref_xor [ L - 1 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int Arr [ ] = { 1 , 1 , 2 , 2 , 1 } ; int q [ ] = { { 1 , 5 } , { 1 , 4 } , { 3 , 4 } } ; performQueries ( Arr , q ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > count ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } double [ ] pinv = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { pinv [ i ] = sc . nextInt ( ) ; } double [ ] a = new double [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; double ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double tmp = a [ i ] * pinv [ i ] / ( pinv [ i ] * pinv [ i ] ) ; if ( tmp < 0 ) { tmp = 0 ; } ans = Math . min ( ans , tmp ) ; } System . out . println ( ans ) ; } }
public class GFG { public static void main ( String [ ] args ) { int num = 3 , lterm = 1 , rterm = num * num + 1 ; for ( int i = num ; i >= 0 ; i -- ) { for ( int space = num ; space >= i ; space -- ) { System . out . print ( " " ) ; } for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( lterm + " * " ) ; lterm ++ ; } for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( rterm + " * " ) ; if ( j < i ) { System . out . print ( " * " ) ; } rterm ++ ; } rterm = rterm - ( i - 1 ) * 2 - 1 ; System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static void findPerm ( int n , int [ ] differences ) { ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; ans . add ( 0 ) ; int x = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = differences [ i ] ; x = x + diff ; ans . add ( x ) ; } Collections . sort ( ans ) ; int flag = - 1 ; for ( int i = 1 ; i < n ; i ++ ) { int res = ans . get ( i ) - ans . get ( i - 1 ) ; if ( res != 1 ) { flag = 0 ; } } if ( flag == 0 ) { System . out . println ( " - 1" ) ; return ; } int [ ] mpp = new int [ n ] ; int j = 1 ; for ( int i : ans ) { mpp [ i ] = j ; j ++ ; } for ( int i : anss ) { value_at_index . add ( mpp [ i ] ) ; } for ( int i : value_at_index ) { System . out . print ( i + " " ) ; } System . out . println ( ) ; } public static void main ( String [ ] args ) { int [ ] differences = new int [ n ] ; differences [ 0 ] = 2 ; differences [ 1 ] = - 3 ; differences [ 2 ] = 2 ; int n = differences . length + 1 ; findPerm ( n , differences ) ; } }
import java . util . * ; public class GFG { static int countPrimeFactors ( int n ) { int count = 0 ; while ( n % 2 == 0 ) { n = n / 2 ; count ++ ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { n = n / i ; count ++ ; } } if ( n > 2 ) count ++ ; return ( count ) ; } static void printKAlmostPrimes ( int k , int n ) { int i = 1 , num = 2 ; while ( i <= n ) { if ( countPrimeFactors ( num ) == k ) { System . out . print ( num + " " ) ; System . out . print ( " " ) ; i ++ ; } num ++ ; } return ; } public static void main ( String [ ] args ) { int n = 10 , k = 2 ; System . out . println ( " First " + n + " " + k + " - almost prime numbers : " ) ; printKAlmostPrimes ( k , n ) ; } }
import java . util . * ; public class GFG { static int solve ( int N , int K ) { int [ ] combo = new int [ N + 1 ] ; combo [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) combo [ j ] += combo [ j - i ] ; } } return combo [ N ] ; } public static void main ( String [ ] args ) { int N = 29 , K = 5 ; System . out . println ( solve ( N , K ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { String s = sc . next ( ) ; if ( s . equals ( "0" ) ) { break ; } if ( s . charAt ( 0 ) == ' - ' ) { s = "0" + s ; } else { s = s . substring ( 1 ) + s . substring ( 0 , s . length ( ) - 1 ) ; } solve ( ) ; } } void solve ( ) { int n = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) { n = ( n + i ) % 10 ; } else { n = ( n + i ) % 10 ; } } println ( n + " " ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . io . * ; public class GFG { static double normal ( double m , double n ) { double N = ( Math . abs ( m ) * Math . abs ( n ) ) / Math . sqrt ( ( Math . abs ( m ) * Math . abs ( m ) ) + ( Math . abs ( n ) * Math . abs ( n ) ) ) ; return N ; } public static void main ( String [ ] args ) { double m = - 5 , n = 3 ; System . out . println ( normal ( m , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double h = sc . nextInt ( ) ; double ans = h ; for ( int i = 1 ; i < n ; i ++ ) { ans = ans * ( i / n ) ; } System . out . println ( ans ) ; } }
public class GFG { static int countBits ( int n ) { int count = 0 ; while ( n > 0 ) { count ++ ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int i = 65 ; System . out . println ( countBits ( i ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int h1 = h / a ; int w1 = w / b ; int h2 = h1 * a ; int w2 = w1 * b ; int h3 = h2 * h ; int result = h * w - h1 * h2 ; System . out . println ( result ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt % a [ i ] == 0 ) { ans += a [ i ] - a [ i ] ; cnt ++ ; } else { cnt = 0 ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int LongestSubarray ( int arr [ ] , int n , int k ) { int arr2 [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr2 [ i ] = arr [ i ] % k ; int max_length = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current_length = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr2 [ j ] == arr2 [ i ] ) current_length ++ ; else break ; } max_length = Math . max ( max_length , current_length ) ; } return max_length ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 9 , 7 , 18 , 29 , 11 } ; int n = arr . length ; int k = 11 ; System . out . println ( LongestSubarray ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 1 && m == 1 ) System . out . println ( 1 ) ; else if ( n == 1 && m == 1 ) System . out . println ( m - 1 ) ; else if ( n == 1 && m == 1 ) System . out . println ( m + 1 ) ; else System . out . println ( m - 1 ) ; } }
import java . util . * ; public class GFG { static boolean isHeterogram ( String s , int n ) { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' ' ) { if ( hash [ s . charAt ( i ) - ' a ' ] == 0 ) { hash [ s . charAt ( i ) - ' a ' ] = 1 ; } else return false ; } } return true ; } public static void main ( String [ ] args ) { String s = " the big dwarf only jumps " ; int n = s . length ( ) ; System . out . println ( isHeterogram ( s , n ) ? " YES " : " NO " ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) arr [ i ] = i + 1 ; permutations ( arr ) ; return Integer . toString ( arr [ 10 ] ) ; } private static void permutations ( int [ ] arr ) { int i = 0 ; for ( int j = 0 ; j < arr . length ; j ++ ) { if ( i != j ) { permutations ( arr ) ; permutations ( arr ) ; i = j ; } } } }
public class GFG { static boolean FindPoint ( int x1 , int y1 , int x2 , int y2 , int x , int y ) { if ( x > x1 && x < x2 && y > y1 && y < y2 ) return true ; else return false ; } public static void main ( String [ ] args ) { int x1 = 0 , y1 = 10 , x2 = 8 ; int y2 = 1 , x = 1 , y = 5 ; if ( FindPoint ( x1 , y1 , x2 , y2 , x , y ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int MX = 2001 ; static int OFF = 1000 ; static class point { int x , y ; point ( int x , int y ) { this . x = x ; this . y = y ; } } static int countPoints ( int n , int [ ] points ) { int minx = Integer . MAX_VALUE , miny = Integer . MAX_VALUE ; int maxx = Integer . MAX_VALUE , maxy = Integer . MAX_VALUE ; int x = 0 , y = 0 ; for ( int i = 0 ; i < n ; i ++ ) { points [ i ] . x += OFF ; points [ i ] . y += OFF ; x = points [ i ] . x ; y = points [ i ] . y ; minx = Math . min ( minx , x ) ; maxx = Math . max ( maxx , x ) ; miny = Math . min ( miny , y ) ; maxy = Math . max ( maxy , y ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { x = points [ i ] . x ; y = points [ i ] . y ; if ( x > minx && x < maxx && y > miny && y < maxy ) { count ++ ; } } return count ; } public static void main ( String [ ] args ) { int [ ] points = { point ( 0 , 0 ) , point ( 0 , 1 ) , point ( 1 , 0 ) , point ( 0 , - 1 ) , point ( - 1 , 0 ) } ; int n = points . length ; System . out . println ( countPoints ( n , points ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int count = 0 ; while ( x <= y ) { x *= 2 ; count ++ ; } System . out . println ( count ) ; } }
public class GFG { static int sticks [ ] = { 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 } ; static int countSticks ( String str , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) cnt += sticks [ str . charAt ( i ) - '0' ] ; return cnt ; } public static void main ( String [ ] args ) { String str = "56" ; int n = str . length ( ) ; System . out . println ( countSticks ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( n - max ) ; for ( int i = 0 ; i < n - max + 1 ; i ++ ) { System . out . print ( arr [ i ] + " " ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static void command ( int brr , int a , int b ) { arr [ a ] ^= 1 ; arr [ b + 1 ] ^= 1 ; } static void process ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) arr [ k ] ^= arr [ k - 1 ] ; } static void result ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) System . out . print ( arr [ k ] + " " ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 3 ; int arr [ ] = new int [ n + 2 ] ; command ( arr , 1 , 5 ) ; command ( arr , 2 , 5 ) ; command ( arr , 3 , 5 ) ; process ( arr , n ) ; result ( arr , n ) ; } }
import java . util . * ; public class GFG { static int mostFrequent ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int max_count = 1 , res = arr [ 0 ] , curr_count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++ ; else { if ( curr_count > max_count ) { max_count = curr_count ; res = arr [ i - 1 ] ; } curr_count = 1 ; } } if ( curr_count > max_count ) { max_count = curr_count ; res = arr [ n - 1 ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 2 , 1 , 3 , 2 , 1 } ; int n = arr . length ; System . out . println ( mostFrequent ( arr , n ) ) ; } }
public class GFG { static int MAX = 26 ; static int maxLength ( String str , int len ) { int res = 0 ; int lastPos [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) lastPos [ i ] = - 1 ; for ( int i = 0 ; i < len ; i ++ ) { int C = str . charAt ( i ) - ' a ' ; if ( lastPos [ C ] != - 1 ) res = Math . max ( len - ( i - lastPos [ C ] - 1 ) - 1 , res ) ; lastPos [ C ] = i ; } return res ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int len = str . length ( ) ; System . out . println ( maxLength ( str , len ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static int ksmallest ( int arr [ ] , int n , int k ) { int b [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) b [ arr [ i ] ] = 1 ; for ( int j = 1 ; j < MAX ; j ++ ) { if ( b [ j ] != 1 ) k -- ; if ( k != 1 ) return j ; } } public static void main ( String [ ] args ) { int k = 1 ; int arr [ ] = new int [ MAX ] ; int n = arr . length ; System . out . println ( ksmallest ( arr , n , k ) ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n + ( d * 13 ) ) ; } return ( n % 43 == 0 ) ; } public static void main ( String [ ] args ) { int N = 2795 ; if ( isDivisible ( N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } public static void main ( String [ ] args ) { int n = 59173 ; if ( isDivisible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 3 ) ) ; } return ( n % 31 == 0 ) ; } public static void main ( String [ ] args ) { int n = 1922 ; if ( isDivisible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 > 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 7 ) ) ; } return ( n % 71 == 0 ) ; } public static void main ( String [ ] args ) { int N = 5041 ; if ( isDivisible ( N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int Odd_Sum ( int n ) { int total = ( n + 1 ) / 2 ; int odd = total * total ; return odd ; } static int Even_Sum ( int n ) { int total = n / 2 ; int even = total * ( total + 1 ) ; return even ; } static int sumLtoR ( int L , int R ) { int odd_sum = Odd_Sum ( R ) - Odd_Sum ( L - 1 ) ; int even_sum = Even_Sum ( R ) - Even_Sum ( L - 1 ) ; return even_sum - odd_sum ; } public static void main ( String [ ] args ) { int L = 1 , R = 5 ; System . out . println ( sumLtoR ( L , R ) ) ; } }
public class GFG { static boolean isRatioPossible ( int lowCost , int upCost , int lowQuant , int upQuant , int r ) { for ( int i = lowQuant ; i <= upQuant ; i ++ ) { int ans = i * r ; if ( lowCost <= ans && ans <= upCost ) return true ; } return false ; } public static void main ( String [ ] args ) { int lowCost = 14 , upCost = 30 , lowQuant = 5 , upQuant = 12 , r = 9 ; if ( isRatioPossible ( lowCost , upCost , lowQuant , upQuant , r ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class GFG { static int Log2 ( int x ) { if ( x == 0 ) return 0 ; return ( int ) Math . log10 ( x ) / ( int ) Math . log10 ( 2 ) ; } static boolean isPowerOfTwo ( int n ) { return ( ( int ) Math . ceil ( Log2 ( n ) ) == ( int ) Math . floor ( Log2 ( n ) ) ) ; } public static void main ( String [ ] args ) { if ( isPowerOfTwo ( 31 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; if ( isPowerOfTwo ( 64 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = 50000000 ; int [ ] primes = Library . listPrimes ( Library . sqrt ( LIMIT ) ) ; int sum = 0 ; for ( int i = 2 ; i <= 5 ; i ++ ) { int [ ] newSum = new int [ primes . length ] ; for ( int p : primes ) { int q = Library . sqrt ( p ) ; if ( q > LIMIT ) break ; for ( int x : sums ) { if ( x + q <= LIMIT ) newSum [ x + q ] ++ ; } } sum = sum + newSum ; } return Integer . toString ( sum ) ; } }
import java . util . * ; public class GFG { static int longLenSub ( int arr [ ] , int n ) { HashMap < Integer , Integer > um = new HashMap < > ( ) ; int longLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len = 0 ; if ( um . containsKey ( arr [ i ] ) && um . get ( arr [ i ] ) > 0 && um . get ( arr [ i ] ) > 0 ) len = um . get ( arr [ i ] ) - 1 ; if ( um . containsKey ( arr [ i ] ) && um . get ( arr [ i ] ) > 0 && um . get ( arr [ i ] ) > 0 ) len = um . get ( arr [ i ] ) + 1 ; um . put ( arr [ i ] , len + 1 ) ; um . put ( arr [ i ] , um . get ( arr [ i ] ) ) ; longLen = um . get ( arr [ i ] ) ; } return longLen ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 3 , 2 } ; int n = arr . length ; System . out . println ( " Longest length subsequence = " + longLenSub ( arr , n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + b ) ; } } }
import java . io . * ; public class GFG { static int calculateSum ( int n ) { int sum = 0 ; sum = 1 << n ; return ( sum - 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum of all elements : " + calculateSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int calculateSum ( int n ) { int sum = 0 ; for ( int row = 0 ; row < n ; row ++ ) sum += ( 1 << row ) ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum of all elements : " + calculateSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int maxDiff ( int arr [ ] , int n ) { int diff = arr [ 1 ] - arr [ 0 ] ; int curr_sum = diff ; int max_sum = curr_sum ; for ( int i = 1 ; i < n - 1 ; i ++ ) { diff = arr [ i + 1 ] - arr [ i ] ; if ( curr_sum > 0 ) curr_sum += diff ; else curr_sum = diff ; if ( curr_sum > max_sum ) max_sum = curr_sum ; } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 80 , 2 , 6 , 3 , 100 } ; int n = arr . length ; System . out . println ( " Maximum difference is " + maxDiff ( arr , n ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { String s = sc . next ( ) ; if ( s . equals ( " # " ) ) { break ; } int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' _ ' ) { cnt ++ ; } else { cnt = ( cnt + 1 ) % 100000007 ; } } println ( cnt ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static int countPairs ( int n ) { int num = ( n / 2 ) + 1 ; int Max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( ( n % i ) % j ) % n ; if ( val == Max ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( a == 1 ) { ans = c ; } else if ( a == b ) { ans = c - 2 ; } else { ans = c - 2 ; } System . out . println ( ans ) ; } } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { ans = min ( ans , b [ i ] ) ; } else if ( b [ i ] == 1 ) { ans = min ( ans , a [ i ] + 2 * 3 * ( n - i - 1 ) ) ; } else if ( a [ i ] == 0 ) { ans = min ( ans , a [ i ] + 1 ) ; } } if ( ans <= m ) System . out . println ( ans ) ; else System . out . println ( - 1 ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 100000 ; static void print ( int g1 [ ] , int a , int g2 [ ] , int b ) { for ( int i = 0 ; i < a ; i ++ ) System . out . print ( g1 [ i ] + " " ) ; System . out . print ( " and " ) ; for ( int i = 0 ; i < b ; i ++ ) System . out . print ( g2 [ i ] + " " ) ; System . out . println ( ) ; } static boolean checksum ( int g1 [ ] , int a , int g2 [ ] , int b ) { int x = 0 ; for ( int i = 0 ; i < a ; i ++ ) x += g1 [ i ] ; for ( int i = 0 ; i < b ; i ++ ) x -= g2 [ i ] ; return ( x == 0 ) ; } static void formgroups ( int arr [ ] , int x , int g1 [ ] , int a , int g2 [ ] , int b , int n ) { if ( x == n ) { if ( checksum ( g1 , a , g2 , b ) == 1 ) { System . out . println ( " " + arr [ x ] ) ; } return ; } g1 [ a ] = arr [ x ] ; formgroups ( arr , x + 1 , g1 , a + 1 , g2 , b , n ) ; g2 [ b ] = arr [ x ] ; formgroups ( arr , x + 1 , g1 , a , g2 , b + 1 , n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 9 , 4 , 5 } ; int n = arr . length ; int g1 [ ] = new int [ MAX ] ; int g2 [ ] = new int [ MAX ] ; formgroups ( arr , 0 , g1 , 0 , g2 , 0 , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( n % a == 0 ) { ans = n / a ; } else { ans = n / a ; } if ( m % a == 0 ) { ans = Math . max ( ans , c / a ) ; } else { ans = Math . max ( ans , c / a ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int maxSubseq ( int vec [ ] , int n ) { int suffix = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( vec [ i ] == 1 ) { suffix ++ ; vec [ i ] = suffix ; } } int res = 0 ; int zero = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vec [ i ] == 0 ) { zero ++ ; } if ( vec [ i ] > 0 ) { res = Math . max ( res , zero + vec [ i ] ) ; } } return Math . max ( res , zero ) ; } public static void main ( String [ ] args ) { int input [ ] = { 0 , 1 , 0 , 0 , 1 , 0 } ; int n = input . length ; System . out . println ( maxSubseq ( input , n ) ) ; } }
public class GFG { static int R = 4 ; static int C = 4 ; static int countPaths ( int maze [ ] [ ] ) { if ( maze [ 0 ] [ 0 ] == - 1 ) return 0 ; for ( int i = 0 ; i < R ; i ++ ) { if ( maze [ i ] [ 0 ] == 0 ) maze [ i ] [ 0 ] = 1 ; else break ; } for ( int i = 1 ; i < C ; i ++ ) { if ( maze [ 0 ] [ i ] == 0 ) maze [ 0 ] [ i ] = 1 ; else break ; } for ( int i = 1 ; i < R ; i ++ ) { for ( int j = 1 ; j < C ; j ++ ) { if ( maze [ i ] [ j ] == - 1 ) continue ; if ( maze [ i - 1 ] [ j ] > 0 ) maze [ i ] [ j ] = maze [ i ] [ j ] + maze [ i - 1 ] [ j ] ; if ( maze [ i ] [ j - 1 ] > 0 ) maze [ i ] [ j ] = maze [ i ] [ j ] + maze [ i ] [ j - 1 ] ; } } return maze [ R - 1 ] [ C - 1 ] > 0 ? maze [ R - 1 ] [ C - 1 ] : 0 ; } public static void main ( String [ ] args ) { int maze [ ] [ ] = { { 0 , 0 , 0 , 0 } , { 0 , - 1 , 0 , 0 } , { - 1 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 } } ; System . out . println ( countPaths ( maze ) ) ; } }
import java . util . * ; public class GFG { static boolean isPrime ( int N ) { boolean isPrime = true ; int arr [ ] = { 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 } ; if ( N < 2 ) isPrime = false ; if ( N % 2 == 0 || N % 3 == 0 || N % 5 == 0 ) isPrime = false ; for ( int i = 0 ; i < Math . sqrt ( N ) ; i ++ ) { for ( int c = 0 ; c < arr . length ; c ++ ) { if ( N % ( c + i ) == 0 ) { isPrime = false ; break ; } } if ( ! isPrime ) break ; } if ( isPrime ) System . out . println ( " Prime Number " ) ; else System . out . println ( " Not a Prime Number " ) ; return false ; } public static void main ( String [ ] args ) { int N = 121 ; isPrime ( N ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x = x2 - x1 ; int y = y2 - y1 ; System . out . println ( x + " " + y ) ; System . out . println ( x2 + " " + y ) ; System . out . println ( x1 - x2 , y1 + y ) ; } }
public class GFG { static int max ( int x , int y ) { if ( x > y ) return x ; return y ; } static int lps ( String seq , int i , int j ) { if ( i == j ) return 1 ; if ( seq . charAt ( i ) == seq . charAt ( j ) && i + 1 == j ) return 2 ; if ( seq . charAt ( i ) == seq . charAt ( j ) ) return lps ( seq , i + 1 , j - 1 ) + 2 ; return Math . max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } public static void main ( String [ ] args ) { String seq = " GEEKSFORGEEKS " ; int n = seq . length ( ) ; System . out . println ( " The length of the LPS is " + lps ( seq , 0 , n - 1 ) ) ; } }
import java . util . * ; public class GFG { static int findLength ( String str , int n ) { int [ ] total = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { total [ i ] = total [ i - 1 ] + ( str . charAt ( i - 1 ) - '0' ) ; } int ans = 0 ; int l = 2 ; while ( l <= n ) { for ( int i = 0 ; i + l - 1 < n - l ; i ++ ) { int j = i + l - 1 ; if ( total [ i + l / 2 ] - total [ i ] == total [ i + l ] - total [ i + l / 2 ] ) { ans = Math . max ( ans , l ) ; } } l = l + 2 ; } return ans ; } public static void main ( String [ ] args ) { String str = "123123" ; System . out . println ( " Length of the substring is " + findLength ( str , str . length ( ) ) ) ; } }
public class GFG { static void print ( char a [ ] , int n , int ind ) { for ( int i = ind ; i < n + ind ; i ++ ) System . out . print ( a [ ( i % n ) ] ) ; } public static void main ( String [ ] args ) { char a [ ] = { ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' } ; int n = a . length ; print ( a , n , 3 ) ; } }
import java . util . * ; public class GFG { static void print ( char a [ ] , int n , int ind ) { char b [ ] = new char [ 2 * n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = b [ n + i ] = a [ i ] ; } for ( int i = ind ; i < n + ind ; i ++ ) { System . out . print ( b [ i ] + " " ) ; } } public static void main ( String [ ] args ) { char a [ ] = { ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' } ; int n = a . length ; print ( a , n , 3 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = 0 ; int d = 0 ; int e = 0 ; int o = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char ch = sc . next ( ) . charAt ( 0 ) ; if ( ch == ' * ' ) { c ++ ; } else { d ++ ; } e += c / 2 ; o += c % 2 ; } System . out . println ( Math . min ( e , o ) + Math . min ( a , b ) + Math . min ( b , c ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static void solve ( ) { int n = in . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = in . next ( ) ; for ( int j = 0 ; j < s . length ( ) ; j ++ ) { a [ i ] [ j ] = s . charAt ( j ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < dp . length ; i ++ ) { for ( int j = 0 ; j < dp [ i ] . length ; j ++ ) { if ( j == 0 ) dp [ i ] [ j ] = 0 ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ; } } for ( int i = 0 ; i < dp [ 0 ] . length ; i ++ ) { for ( int j = 0 ; j < dp [ 0 ] . length ; j ++ ) { if ( j == 0 ) out . print ( " . " ) ; else out . print ( dp [ i ] [ j ] ) ; } out . println ( ) ; } } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int v1 = sc . nextInt ( ) ; int v2 = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < t ; i ++ ) { int a = v1 + d * i ; int b = v2 + d * ( t - i ) ; sum += Math . min ( a , b ) ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s1 = sc . next ( ) ; String s2 = sc . next ( ) ; int [ ] arr1 = new int [ n ] ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = s1 . charAt ( i ) ; arr2 [ i ] = s2 . charAt ( i ) ; } Arrays . sort ( arr1 ) ; Arrays . sort ( arr2 ) ; int min = 0 , max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr1 [ j ] < arr2 [ i ] ) { min ++ ; arr1 [ j ] = arr2 [ i ] ; arr2 [ i ] = - 1 ; break ; } } } System . out . println ( min ) ; System . out . println ( max ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = Math . max ( a [ 0 ] , a [ n - 1 ] ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < a [ i ] - a [ i + 1 ] ) { max = a [ i ] - a [ i + 1 ] ; cnt ++ ; } } System . out . println ( cnt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j || i == n - 1 || j == n - 1 ) { System . out . print ( 1 ) ; } else { System . out . print ( 0 ) ; } } System . out . println ( ) ; } } } }
public class GFG { static void bin ( int n ) { if ( n > 1 ) bin ( n >> 1 ) ; System . out . print ( n & 1 + " " ) ; } public static void main ( String [ ] args ) { bin ( 131 ) ; System . out . println ( ) ; bin ( 3 ) ; } }
public final class p037 { public static void main ( String [ ] args ) { System . out . println ( new p037 ( ) . run ( ) ) ; } public String run ( ) { int sum = 0 ; for ( int x = 0 ; x < 1000 ; x ++ ) { if ( x % 3 == 0 || x % 5 == 0 ) sum += x ; } return Integer . toString ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' n ' ) { count ++ ; } else if ( s . charAt ( i ) == ' o ' ) { count ++ ; } else if ( s . charAt ( i ) == ' u ' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( 2 * b - a ) ; } }
public class GFG { static int Circular ( int n ) { int Result = 1 ; while ( n > 0 ) { Result = Result * n ; n -- ; } return Result ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( Circular ( n - 1 ) ) ; } }
public class GFG { static int productDiagonals ( int arr [ ] [ ] , int n ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) { product = product * arr [ i ] [ i ] ; product = product * arr [ i ] [ n - i - 1 ] ; } if ( n % 2 == 1 ) { product = product / arr [ n / 2 ] [ n / 2 ] ; } return product ; } public static void main ( String [ ] args ) { int arr1 [ ] [ ] = { { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } , { 9 , 7 , 4 , 2 } , { 2 , 2 , 2 , 1 } } ; System . out . println ( productDiagonals ( arr1 , 4 ) ) ; int arr2 [ ] [ ] = { { 2 , 1 , 2 , 1 , 2 } , { 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 } , { 1 , 2 , 1 , 2 , 1 } , { 2 , 1 , 2 , 1 , 2 } } ; System . out . println ( productDiagonals ( arr2 , 5 ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } boolean [ ] visited = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( visited [ a [ i ] ] ) { continue ; } visited [ a [ i ] ] = true ; for ( int j = 0 ; j < n ; j ++ ) { if ( visited [ j ] == false ) { continue ; } out . print ( " * " ) ; } out . println ( ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static char getSecondMostFreq ( String str ) { int NO_OF_CHARS = 256 ; int count [ ] = new int [ NO_OF_CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { count [ str . charAt ( i ) ] ++ ; } int first = 0 , second = 0 ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] > count [ first ] ) { second = first ; first = i ; } else if ( count [ i ] > count [ second ] && count [ i ] != count [ first ] ) { second = i ; } } return ( char ) ( second ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int res = getSecondMostFreq ( str ) ; if ( res != 0 ) System . out . println ( " Second most frequent char is " + res ) ; else System . out . println ( " No second most frequent character " ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; sc . hasNextInt ( ) ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += i ; } println ( sum ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . Arrays ; public class GFG { static int mySort ( int arr [ ] , int n ) { int arr1 [ ] = new int [ n ] ; int arr2 [ ] = new int [ n ] ; Arrays . sort ( arr1 ) ; Arrays . sort ( arr2 ) ; return arr1 [ n - 1 ] + arr2 [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , 7 } ; int n = arr . length ; mySort ( arr , n ) ; System . out . println ( " Modified Array : " ) ; System . out . println ( Arrays . toString ( arr ) ) ; } }
import java . util . * ; public class GFG { static int minflip ( int arr1 [ ] , int arr2 [ ] , int arr3 [ ] , int p , int q , int n ) { int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] ^ arr2 [ i ] != arr3 [ i ] ) flip ++ ; } return ( flip <= p + q ) ? flip : - 1 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 } ; int arr2 [ ] = { 0 , 1 , 1 , 1 , 1 , 0 , 0 } ; int arr3 [ ] = { 1 , 1 , 1 , 1 , 0 , 0 , 1 } ; int n = arr1 . length ; int p = 2 , q = 4 ; System . out . println ( minflip ( arr1 , arr2 , arr3 , p , q , n ) ) ; } }
import java . io . * ; public class GFG { static double sum ( int n ) { double i = 1 , s = 0.0 ; for ( i = 1 ; i <= n ; i ++ ) s += 1 / i ; return s ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " Sum is " + sum ( n ) ) ; } }
import java . util . * ; public class GFG { static void bitonicGenerator ( int arr [ ] , int n ) { Vector < Integer > evenArr = new Vector < > ( ) ; Vector < Integer > oddArr = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i % 2 ) == 0 ) evenArr . add ( arr [ i ] ) ; else oddArr . add ( arr [ i ] ) ; } evenArr = Collections . sort ( evenArr ) ; oddArr = Collections . sort ( oddArr ) ; oddArr = oddArr . reverse ( ) ; int i = 0 ; for ( int j = 0 ; j < evenArr . size ( ) ; j ++ ) arr [ i ] = evenArr . get ( j ) ; for ( int j = 0 ; j < oddArr . size ( ) ; j ++ ) arr [ i ] = oddArr . get ( j ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int n = arr . length ; bitonicGenerator ( arr , n ) ; for ( int i : arr ) System . out . print ( i + " " ) ; } }
import java . util . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; int right = 0 , left = 0 ; boolean [ ] visited = new boolean [ n ] ; while ( right < n ) { while ( right < n && visited [ arr [ right ] ] == false ) { count += ( right - left ) ; visited [ arr [ right ] ] = true ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ right ] ] == true ) ) { visited [ arr [ left ] ] = false ; left ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 , 4 , 3 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class TreeNode { public int val ; public TreeNode left ; public TreeNode right ; public TreeNode ( int val ) { this . val = val ; this . left = null ; this . right = null ; } } public class Solution { public boolean isSubtree ( TreeNode root , TreeNode t ) { boolean s_res = preorder ( root , true ) ; boolean t_res = preorder ( t , true ) ; return t_res || s_res == t_res ; } private static String preorder ( TreeNode root , boolean isLeft ) { if ( root == null ) { if ( isLeft ) return " lnull " ; else return " rnull " ; } return " # " + root . val + " " + preorder ( root . left , true ) + " " + preorder ( root . right , false ) ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; TreeNode root = new TreeNode ( 3 ) ; root . left = new TreeNode ( 4 ) ; root . right = new TreeNode ( 5 ) ; root . left . left = new TreeNode ( 1 ) ; root . left . right = new TreeNode ( 2 ) ; TreeNode subRoot = new TreeNode ( 4 ) ; subRoot . left = new TreeNode ( 1 ) ; subRoot . right = new TreeNode ( 2 ) ; boolean out = sObj . isSubtree ( root , subRoot ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static int M = 1001 ; static int MOD = 998244353 ; static int dp [ ] [ ] = new int [ M ] [ M ] ; static int solve ( int idx , int diff , int N , int M , int K ) { if ( idx > N ) { if ( diff == K ) { return 1 ; } return 0 ; } if ( dp [ idx ] [ diff ] != - 1 ) { return dp [ idx ] [ diff ] ; } int ans = solve ( idx + 1 , diff , N , M , K ) ; ans += ( M - 1 ) * solve ( idx + 1 , diff + 1 , N , M , K ) ; dp [ idx ] [ diff ] = ans % MOD ; return dp [ idx ] [ diff ] ; } public static void main ( String [ ] args ) { int N = 3 , M = 3 , K = 0 ; System . out . println ( M * solve ( 2 , 0 , N , M , K ) ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } private static final int NUM_SPHERES = 21 ; private static final int [ ] [ ] sphereradii = new int [ NUM_ SPHERES ] [ 2 ] ; private static int minlength [ ] [ ] = new int [ NUM_ SPHERES ] [ 2 ] ; private static int find_minimum_length ( int currentsphereIndex , int setofspheres ) { if ( setofspheres & ( 1 << currentsphereIndex ) == 0 ) { throw new IllegalArgumentException ( ) ; } if ( minlength [ currentsphereIndex ] [ setofspheres ] == - 1 ) { if ( Library . popcount ( setofspheres ) == 1 ) { int result = sphereradii [ currentsphereIndex ] [ setofspheres ] ; } else { int result = Integer . MAX_VALUE ; int newsetofspheres = setofspheres ^ ( 1 << currentsphereIndex ) ; for ( int i = 0 ; i < NUM_ SPHERES ; i ++ ) { if ( newsetofspheres & ( 1 << i ) == 0 ) { continue ; } double temp = Math . sqrt ( ( sphereradii [ i ] + sphereradii [ currentsphereIndex ] - 50000 ) * 200000 ) ; temp += find_minimum_length ( i , newsetofspheres ) ; result = Math . min ( temp , result ) ; } } minlength [ currentsphereIndex ] [ setofspheres ] = result ; } return minlength [ currentsphereIndex ] [ setofspheres ] ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int t = in . nextInt ( ) ; for ( int tt = 0 ; tt < t ; tt ++ ) { int a = in . nextInt ( ) , b = in . nextInt ( ) , c = in . nextInt ( ) ; if ( a == b && c == c ) pw . println ( " YES " ) ; else if ( a * a + b * b == c * c ) pw . println ( " YES " ) ; else pw . println ( " NO " ) ; } pw . close ( ) ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { if ( N % 2 == 0 ) return 0 ; int res = 0 ; for ( int i = 0 ; i < N ; i += 2 ) res ^= arr [ i ] ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
import java . util . * ; public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter out = new PrintWriter ( System . out ) ; int l = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; out . println ( l / ( p + q ) ) ; out . flush ( ) ; out . close ( ) ; } static class Scanner { StringTokenizer st ; BufferedReader br ; public Scanner ( InputStream s ) { br = new BufferedReader ( new InputStreamReader ( s ) ) ; } public Scanner ( String file ) throws FileNotFoundException { br = new BufferedReader ( new FileReader ( file ) ) ; } public String next ( ) throws IOException { while ( st == null || ! st . hasMoreTokens ( ) ) st = new StringTokenizer ( br . readLine ( ) ) ; return st . nextToken ( ) ; } public int nextInt ( ) throws IOException { return Integer . parseInt ( next ( ) ) ; } public long nextLong ( ) throws IOException { return Long . parseLong ( next ( ) ) ; } public String nextLine ( ) throws IOException { return br . readLine ( ) ; } public double nextDouble ( ) throws IOException { return Double . parseDouble ( next ( ) ) ; } public boolean ready ( ) throws IOException { return br . ready ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; System . out . println ( arr [ n - 1 ] - arr [ n - 2 ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( arr [ i ] ) ) { map . put ( arr [ i ] , map . get ( arr [ i ] ) + 1 ) ; } else { map . put ( arr [ i ] , 1 ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map . containsKey ( arr [ i ] ) ) { ans += map . get ( arr [ i ] ) ; } map . put ( arr [ i ] , map . get ( arr [ i ] ) - 1 ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; import java . io . * ; public class Codechef { public static void main ( String [ ] args ) throws java . lang . Exception { try { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { String s = sc . next ( ) . toLowerCase ( ) ; String t = sc . next ( ) . toLowerCase ( ) ; String a = sc . next ( ) . toLowerCase ( ) ; String b = sc . next ( ) . toLowerCase ( ) ; if ( a . charAt ( 0 ) != ' a ' ) { b = b . substring ( 0 , a . length ( ) - 1 ) . toLowerCase ( ) ; } else { a = a . substring ( 0 , a . length ( ) ) . toLowerCase ( ) ; } if ( a . charAt ( 0 ) != ' a ' ) { b = b . substring ( 0 , a . length ( ) ) . toLowerCase ( ) ; } else { b = b . substring ( 0 , a . length ( ) ) . toLowerCase ( ) ; } System . out . println ( b ) ; } } catch ( Exception e ) { } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] w = new int [ n ] ; int [ ] e = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; if ( c == ' W ' ) { w [ i ] = e [ i ] + 1 ; } else { e [ i ] = e [ i ] + 1 ; } } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' W ' ) { cnt ++ ; } else { cnt = 0 ; } w [ j ] = cnt ; } min = Math . min ( min , cnt ) ; } System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } else { count ++ ; } } System . out . println ( Math . min ( count , count ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; sc . hasNext ( ) ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; boolean [ ] is_prime = new boolean [ n + 1 ] ; Arrays . fill ( is_prime , true ) ; is_prime [ 0 ] = is_prime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) { if ( is_prime [ i ] ) { for ( int j = i + i ; j <= n ; j += i ) { is_prime [ j ] = false ; } } } int ans = 0 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( is_prime [ i ] && is_prime [ i - 8 ] && is_prime [ i + 1 ] ) { ans = i ; break ; } } println ( ans ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; int left = 0 ; int right = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { dp [ left ] = dp [ i ] + 1 ; } else { dp [ left ] = dp [ i ] - 1 ; } if ( dp [ i ] % 2 == 0 ) { right = i ; } } System . out . println ( right ) ; } }
public class GFG { static boolean powerOfTwo ( int n ) { return ( ( n & n - 1 ) != 0 ) ; } static boolean onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) return true ; return powerOfTwo ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 9 ; if ( onlyFirstAndLastAreSet ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . Arrays ; public class GFG { static int minimumCostOfBreaking ( int X [ ] , int Y [ ] , int m , int n ) { int res = 0 ; Arrays . sort ( X ) ; Arrays . sort ( Y ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( X [ i ] > Y [ j ] ) { res += X [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += Y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += X [ i ] ; i ++ ; } res += total * vert ; total = 0 ; while ( j < n ) { total += Y [ j ] ; j ++ ; } res += total * hzntl ; return res ; } public static void main ( String [ ] args ) { int m = 6 , n = 4 ; int X [ ] = { 2 , 1 , 3 , 1 , 4 } ; int Y [ ] = { 4 , 1 , 2 } ; System . out . println ( minimumCostOfBreaking ( X , Y , m - 1 , n - 1 ) ) ; } }
import java . util . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int countPairs ( int G , int L ) { int count = 0 ; int p = G * L ; for ( int a = 1 ; a <= L ; a ++ ) { if ( ! ( p % a == 0 && gcd ( a , p / a ) == G ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int G = 2 , L = 12 ; System . out . println ( " Total possible pair with GCD " + G ) ; System . out . println ( " & LCM " + L ) ; System . out . println ( " = " + countPairs ( G , L ) ) ; } }
import java . util . * ; public class GFG { static int multiply ( int a [ ] , int b [ ] ) { int mul [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { mul [ i ] [ j ] = 0 ; for ( int k = 0 ; k < 3 ; k ++ ) { mul [ i ] [ j ] += a [ i ] [ k ] * b [ k ] [ j ] ; } } } for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = mul [ i ] [ j ] ; } } return a ; } static int power ( int F [ ] [ ] , int n ) { int M [ ] = { { 1 , 1 , 1 } , { 1 , 0 , 0 } , { 0 , 1 , 0 } } ; if ( n == 1 ) { return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] ; } power ( F , n / 2 ) ; F = multiply ( F , F ) ; if ( n % 2 != 0 ) { F = multiply ( F , M ) ; } return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] ; } static int findNthTerm ( int n ) { int F [ ] [ ] = { { 1 , 1 , 1 } , { 1 , 0 , 0 } , { 0 , 1 , 0 } } ; return power ( F , n - 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " F ( 5 ) is " + findNthTerm ( n ) ) ; } }
public class GFG { static void MinimumValue ( int x , int y ) { if ( x > y ) { int a = y , b = x ; } int a = 1 , b = x - 1 , c = y - b ; System . out . println ( a + " " + b + " " + c ) ; } public static void main ( String [ ] args ) { int x = 123 , y = 13 ; MinimumValue ( x , y ) ; } }
public class Solution { public boolean checkPossibility ( int [ ] nums ) { int broken_num = 0 ; for ( int i = 0 ; i < nums . length - 1 ; i ++ ) { if ( nums [ i ] > nums [ i + 1 ] ) { broken_num ++ ; if ( broken_num >= 2 ) return false ; if ( i - 1 < 0 || nums [ i - 1 ] <= nums [ i + 1 ] ) nums [ i ] = nums [ i + 1 ] ; else nums [ i + 1 ] = nums [ i ] ; } } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 4 , 2 , 3 } ; boolean out = sObj . checkPossibility ( nums ) ; System . out . println ( out ) ; } }
public class GFG { static boolean check ( int mid , int array [ ] , int n , int K ) { int count = 0 , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] > mid ) return false ; sum += array [ i ] ; if ( sum > mid ) { count ++ ; sum = array [ i ] ; } } count ++ ; if ( count <= K ) return true ; return false ; } static int solve ( int array [ ] , int n , int K ) { int start = 1 , end = 0 ; for ( int i = 0 ; i < n ; i ++ ) end += array [ i ] ; int answer = 0 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; if ( check ( mid , array , n , K ) ) { answer = mid ; end = mid - 1 ; } else start = mid + 1 ; } return answer ; } public static void main ( String [ ] args ) { int array [ ] = { 1 , 2 , 3 , 4 } ; int n = array . length ; int K = 3 ; System . out . println ( solve ( array , n , K ) ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( ( m | n ) == 0 ) break ; int [ ] [ ] map = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) map [ i ] [ j ] = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ 1 << m ] [ 1 << m ] ; for ( int mask = 0 ; mask < 1 << m ; mask ++ ) { for ( int i = 0 ; i < m ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( ( mask & ( 1 << j ) ) != 0 ) cnt ++ ; if ( cnt == m ) continue ; if ( map [ i ] [ j ] == 0 ) continue ; dp [ i ] [ j ] = min ( dp [ i ] [ j ] , min ( dp [ i ] [ j ] , cnt ) ) + 1 ; } } System . out . println ( dp [ 0 ] [ 0 ] ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int min = Math . min ( a , b ) ; int max = Math . max ( a , b ) ; System . out . println ( ( int ) Math . pow ( min , 2 ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } boolean flag = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] - b [ i ] != 0 ) { flag = false ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class GFG { static String even_or_odd ( String N ) { int len = N . length ( ) ; if ( N . charAt ( len - 1 ) == '0' || N . charAt ( len - 1 ) == '2' || N . charAt ( len - 1 ) == '4' || N . charAt ( len - 1 ) == '6' ) return ( " Even " ) ; else return ( " Odd " ) ; } public static void main ( String [ ] args ) { String N = "735" ; System . out . println ( even_or_odd ( N ) ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n , m ; static int a [ ] ; static void solve ( ) { int c , d ; c = d = 0 ; a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = Integer . parseInt ( sc . next ( ) ) ; if ( c == 0 ) { d = 0 ; } else if ( c == 1 ) { if ( a [ 0 ] == 0 ) { str . append ( a [ 0 ] ) . append ( " " ) ; } else { str . append ( a [ 0 ] ) . append ( " " ) ; } } else if ( c == 2 ) { if ( a [ 0 ] == 0 ) { str . append ( a [ 1 ] ) . append ( " " ) ; } else { str . append ( a [ 1 ] ) . append ( " " ) ; } } str . append ( " \n " ) ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } String st [ ] = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; n = Integer . parseInt ( st [ 0 ] ) ; m = Integer . parseInt ( st [ 1 ] ) ; solve ( ) ; pw . println ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } if ( count == n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . println ( i + 1 ) ; } } } else { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . println ( i + 1 ) ; } } } } }
import java . util . * ; public class GFG { static int solve ( String X , String Y , int N , int K ) { int [ ] count = new int [ N + 1 ] ; int sol = 0 ; count [ 0 ] = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { count [ i ] = count [ i - 1 ] + Math . abs ( X . charAt ( i - 1 ) - Y . charAt ( i - 1 ) ) ; } int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) { j ++ ; } sol = Math . max ( sol , i - j ) ; } return sol ; } public static void main ( String [ ] args ) { int N = 4 ; String X = " abcd " ; String Y = " bcde " ; int K = 3 ; System . out . println ( solve ( X , Y , N , K ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; while ( m -- > 0 ) { int a = sc . nextInt ( ) ; while ( a > 0 ) { n = n % a ; a = a / a ; } } System . out . println ( n == 1 ? " Yes " : " No " ) ; } }
public class GFG { static boolean isPrime ( int n , int i ) { if ( n <= 2 ) return true ; if ( n == 2 ) return false ; if ( n % i == 0 ) return false ; if ( i * i > n ) return true ; return isPrime ( n , i + 1 ) ; } public static void main ( String [ ] args ) { int n = 15 ; if ( isPrime ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isPrime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static int minimumSum ( int n ) { if ( isPrime ( n ) ) return 1 ; if ( n % 2 == 0 ) return 2 ; if ( isPrime ( n - 2 ) ) return 2 ; return 3 ; } public static void main ( String [ ] args ) { int n = 27 ; System . out . println ( minimumSum ( n ) ) ; } }
public class GFG { static boolean isPrime ( int x ) { for ( int i = 2 ; i <= Math . sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) return false ; } return true ; } static int minimumCost ( int n ) { if ( isPrime ( n ) ) return 1 ; if ( n % 2 == 1 && isPrime ( n - 2 ) ) return 2 ; if ( n % 2 == 0 ) return 2 ; return 3 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( minimumCost ( n ) ) ; } }
import java . io . * ; public class GFG { static int snoob ( int x ) { int next = 0 ; if ( x > 0 ) { int rightOne = x & - x ; int nextHigherOneBit = x + rightOne ; int rightOnesPattern = x ^ ( nextHigherOneBit ) ; rightOnesPattern = ( rightOnesPattern ) / ( rightOne ) ; rightOnesPattern = ( rightOnesPattern ) >> 2 ; next = nextHigherOneBit | rightOnesPattern ; } return next ; } public static void main ( String [ ] args ) { int x = 156 ; System . out . println ( " Next higher number with " + " same number of set bits is " + snoob ( x ) ) ; } }
public class GFG { static int properDivisorSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 1 ; j * j > i ; j ++ ) { if ( i % j == 0 ) { if ( i / j == j ) sum += j ; else sum += j + i / j ; } } } sum = sum - i ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( properDivisorSum ( n ) ) ; n = 5 ; System . out . println ( properDivisorSum ( n ) ) ; } }
public class GFG { static int getMinLength ( int arr [ ] , int n ) { int count = 0 , result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count ++ ; else { if ( count != 0 ) result = Math . min ( result , count ) ; count = 0 ; } } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMinLength ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static final int INT_MAX = Integer . MAX_VALUE ; static int getLevenstein ( String inpt ) { String revInput = inpt . substring ( 0 , inpt . length ( ) - 1 ) ; int n = inpt . length ( ) ; int dp [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { dp [ 0 ] [ i ] = i ; dp [ i ] [ 0 ] = i ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( inpt . charAt ( i - 1 ) == revInput . charAt ( j - 1 ) ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ; } } int res = INT_MAX ; for ( int i = n , j = 0 ; i >= 0 ; i -- ) { res = Math . min ( res , dp [ i ] [ j ] ) ; if ( i < n ) res = Math . min ( res , dp [ i + 1 ] [ j ] ) ; if ( i > 0 ) res = Math . min ( res , dp [ i - 1 ] [ j ] ) ; } return res ; } public static void main ( String [ ] args ) { String inpt = " myfirstgeekarticle " ; System . out . println ( getLevenstein ( inpt ) ) ; } }
public final class p035 { public static void main ( String [ ] args ) { System . out . println ( new p035 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = 12000 ; int [ ] minsumproduct = new int [ LIMIT + 1 ] ; for ( int i = 2 ; i <= LIMIT ; i ++ ) minsumproduct [ i ] = - 1 ; for ( int i = 2 ; i <= LIMIT ; i ++ ) minsumproduct [ i ] = - 1 ; for ( int i = 2 ; i <= LIMIT ; i ++ ) { if ( remain == 1 ) { if ( sum > n ) throw new AssertionError ( ) ; terms += n - sum ; if ( terms <= LIMIT && minsumproduct [ terms ] == - 1 || n < minsumproduct [ terms ] ) minsumproduct [ terms ] = i ; } else { for ( int j = 2 ; j <= maxfactor ; j ++ ) { if ( remain % j == 0 ) { int factor = i ; factorize ( n , remain / j , Math . min ( factor , maxfactor ) , sum + factor , terms + 1 ) ; } } } } for ( int i = 2 ; i <= LIMIT * 2 ; i ++ ) factorize ( i , i , i , 0 , 0 ) ; int sum = 0 ; int [ ] ans = new int [ sum ] ; for ( int i = sum ; i <= sum ; i ++ ) ans [ i ] = minsumproduct [ i ] ; return Integer . toString ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int N = sc . nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } long [ ] [ ] dp = new long [ N + 1 ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < N ; i ++ ) { dp [ i + 1 ] [ 0 ] = ( dp [ i ] [ 0 ] + A [ i ] ) % MOD ; dp [ i + 1 ] [ 1 ] = ( dp [ i ] [ 1 ] + dp [ i ] [ 0 ] ) % MOD ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans = ( ans + dp [ N ] [ i ] ) % MOD ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { static class Queue { Queue < Integer > data ; Queue < Integer > front ; Queue < Integer > reverse ; Queue ( ) { data = new Queue < Integer > ( ) ; front = new Queue < Integer > ( ) ; reverse = new Queue < Integer > ( ) ; } void add ( int item ) { data . add ( item ) ; } int pop ( ) { return data . remove ( ) ; } int front ( ) { return data . remove ( ) ; } void printQueue ( ) { for ( Integer i : data ) { System . out . print ( i + " " ) ; } System . out . println ( ) ; } void reverseQueue ( Queue < Integer > q ) { if ( q . isEmpty ( ) ) return ; int data = q . front ( ) ; q . remove ( ) ; q . remove ( ) ; q . add ( data ) ; } public static void main ( String [ ] args ) { Queue < Integer > q = new Queue < Integer > ( ) ; q . add ( 56 ) ; q . add ( 27 ) ; q . add ( 30 ) ; q . add ( 45 ) ; q . add ( 85 ) ; q . add ( 92 ) ; q . add ( 58 ) ; q . add ( 80 ) ; q . add ( 90 ) ; q . add ( 100 ) ; reverseQueue ( q ) ; q . printQueue ( ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static boolean prime [ ] = new boolean [ MAX + 1 ] ; static void SieveOfEratosthenes ( ) { Arrays . fill ( prime , true ) ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int findDiff ( int arr [ ] , int n ) { int min = MAX + 2 , max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] == true ) { if ( arr [ i ] > max ) max = arr [ i ] ; if ( arr [ i ] < min ) min = arr [ i ] ; } } return ( max == - 1 ) ? - 1 : ( max - min ) ; } public static void main ( String [ ] args ) { SieveOfEratosthenes ( ) ; int n = 4 ; int arr [ ] = { 1 , 2 , 3 , 5 } ; int res = findDiff ( arr , n ) ; if ( res == - 1 ) System . out . println ( " No prime numbers " ) ; else System . out . println ( " Difference is " + res ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int m = sc . nextInt ( ) ; int [ ] [ ] edges = new int [ m ] [ 2 ] ; for ( int i = 0 ; i < m ; i ++ ) { edges [ i ] [ 0 ] = sc . nextInt ( ) ; edges [ i ] [ 1 ] = sc . nextInt ( ) ; edges [ i ] [ 2 ] = sc . nextInt ( ) ; edges [ i ] [ 3 ] = sc . nextInt ( ) ; } Arrays . sort ( edges ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) dp [ i ] [ i ] = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int a = edges [ i ] [ 0 ] , b = edges [ i ] [ 1 ] ; int c = edges [ i ] [ 2 ] ; dp [ a ] [ b ] = c ; } int ans = 0 ; for ( int i = 0 ; i < n + 1 ; i ++ ) { ans += dp [ n ] [ i ] ; } System . out . println ( ans ) ; } } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; PrintWriter pw = new PrintWriter ( System . out ) ; int n = sc . nextInt ( ) ; pw . println ( solve ( n ) ) ; pw . close ( ) ; } static int solve ( int n ) { int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < ans . length ; i ++ ) { ans [ i ] = i + 1 ; } for ( int i = ans . length - 1 ; i >= 0 ; i -- ) { int a = ans [ i ] , b = ans [ i + 1 ] , c = ans [ i ] , d = ans [ i + 1 ] ; if ( c == 1 ) { ans [ i ] = a ; ans [ i + 1 ] = b ; } else if ( d == 2 ) { ans [ i ] = a ; ans [ i + 1 ] = c ; } else { ans [ i ] = a ; ans [ i + 1 ] = b ; } } return ans [ n - 1 ] ; } static void debug ( Object ... obj ) { System . err . println ( Arrays . deepToString ( obj ) ) ; } }
import java . util . * ; public class GFG { static int distinctSubstring ( String P , int N ) { HashMap < String , Integer > S = new HashMap < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { boolean [ ] freq = new boolean [ 26 ] ; String s = " " ; for ( int j = i ; j < N ; j ++ ) { int pos = P . charAt ( j ) - ' a ' ; if ( freq [ pos ] == true ) break ; freq [ pos ] = true ; s += P . charAt ( j ) ; S . put ( s , 1 ) ; } } return S . size ( ) ; } public static void main ( String [ ] args ) { String S = " abba " ; int N = S . length ( ) ; System . out . println ( distinctSubstring ( S , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; if ( k % ( k - 1 ) == 0 ) { ans = ( n - k ) / ( k - 1 ) ; } else { ans = ( n - k ) / ( k - 1 ) + 1 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int minimumAdjacentDifference ( int a [ ] , int n , int k ) { int minDiff = Integer . MAX_VALUE ; for ( int i = 0 ; i < ( 1 << n ) ; i ++ ) { int cnt = Integer . bitCount ( i ) ; if ( cnt == n - k ) { int temp [ ] = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { temp [ j ] = a [ j ] ; } } int maxDiff = Integer . MIN_VALUE ; for ( int j = 0 ; j < temp . length - 1 ; j ++ ) { maxDiff = Math . max ( maxDiff , temp [ j + 1 ] - temp [ j ] ) ; } minDiff = Math . min ( minDiff , maxDiff ) ; } } return minDiff ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; int a [ ] = { 3 , 7 , 8 , 10 , 14 } ; System . out . println ( minimumAdjacentDifference ( a , n , k ) ) ; } }
import java . util . * ; public class GFG { static void difference ( int arr [ ] , int n ) { int largest = arr [ 0 ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( largest < arr [ i ] ) largest = arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) arr [ i ] = largest - arr [ i ] ; for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 5 , 9 , 3 , 2 } ; int n = arr . length ; difference ( arr , n ) ; } }
import java . util . * ; public class GFG { static int countKdivPairs ( int A [ ] , int n , int K ) { int freq [ ] = new int [ K ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ A [ i ] % K ] ++ ; } int sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2 ; for ( int i = 1 ; i <= K / 2 && i != ( K - i ) ; i ++ ) { sum += freq [ i ] * freq [ K - i ] ; } if ( K % 2 == 0 ) { sum += freq [ K / 2 ] * ( freq [ K / 2 ] - 1 ) / 2 ; } return sum ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K = 4 ; System . out . println ( countKdivPairs ( A , n , K ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { String s = sc . next ( ) ; if ( s . length ( ) == 1 ) { break ; } s = s . substring ( 0 , s . length ( ) - 1 ) ; s = s . substring ( s . length ( ) - 1 ) ; solve ( ) ; } } void solve ( ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' b ' || s . charAt ( i ) == ' w ' || s . charAt ( i ) == ' b ' || s . charAt ( i ) == ' w ' ) { continue ; } if ( s . charAt ( i ) == ' w ' && s . charAt ( i + 1 ) == ' b ' || s . charAt ( i ) == ' w ' && s . charAt ( i + 2 ) == ' w ' || s . charAt ( i + 3 ) == ' b ' && s . charAt ( i + 4 ) == ' b ' || s . charAt ( i + 5 ) == ' w ' && s . charAt ( i + 6 ) == ' w ' || s . charAt ( i + 7 ) == ' b ' && s . charAt ( i + 8 ) == ' b ' || s . charAt ( i + 9 ) == ' w ' && s . charAt ( i + 10 ) == ' w ' || s . charAt ( i + 11 ) == ' w ' && s . charAt ( i + 12 ) == ' w ' ) { continue ; } println ( " NA " ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static int maxOnesIndex ( int arr [ ] , int n ) { int max_count = 0 , max_index = 0 , prev_zero = - 1 , prev_prev_zero = - 1 ; for ( int curr = 0 ; curr < n ; curr ++ ) { if ( arr [ curr ] == 0 ) { if ( curr - prev_prev_zero > max_count ) { max_count = curr - prev_prev_zero ; max_index = prev_zero ; } prev_prev_zero = prev_zero ; prev_zero = curr ; } } if ( n - prev_prev_zero > max_count ) max_index = prev_zero ; return max_index ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( " Index of 0 to be replaced is " + maxOnesIndex ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int minimumX ( int n , int k ) { int ans = Integer . MAX_VALUE ; for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( n % i == 0 ) ans = Math . min ( ans , i + ( n / i ) * k ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 4 , k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 , k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } }
public class GFG { static int moduloMultiplication ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b > 0 ) { if ( b % 2 == 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; b >>= 1 ; } return res ; } public static void main ( String [ ] args ) { int a = 10123465234878998 ; int b = 65746311545646431 ; int m = 10005412336548794 ; System . out . println ( moduloMultiplication ( a , b , m ) ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) { break ; } char [ ] [ ] s = new char [ n ] [ ] ; char [ ] [ ] e = new char [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = sc . next ( ) . toCharArray ( ) ; e [ i ] = sc . next ( ) . toCharArray ( ) ; } boolean [ ] [ ] dp = new boolean [ 26 ] [ 26 ] ; boolean ok = true ; for ( int i = 0 ; i < 26 ; i ++ ) { dp [ s [ i ] [ e [ i ] ] ++ ; if ( dp [ s [ i ] [ e [ i ] ] == 0 ) { ok = false ; break ; } } dp [ s [ i ] [ e [ i ] ] ] ++ ; if ( ok ) { println ( " OK " ) ; } else { println ( " NG " ) ; } } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; min = Math . min ( min , arr [ i ] ) ; max = Math . max ( max , arr [ i ] ) ; } int [ ] ans = new int [ n ] ; int index = 0 ; int minIdx = 0 ; int maxIdx = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { minIdx = i ; min = arr [ i ] ; } if ( arr [ i ] > max ) { maxIdx = i ; max = arr [ i ] ; } if ( arr [ i ] < min ) { minIdx = i ; min = arr [ i ] ; } if ( arr [ i ] > max ) { maxIdx = i ; max = arr [ i ] ; } } int ans_len = n - maxIdx ; if ( ans_len < 0 ) { ans_len = 0 ; } System . out . println ( ans_len ) ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] < min ) { ans_len = i ; } } System . out . println ( ans_len ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { if ( arr [ i ] < max ) { ans_len = i ; } } System . out . println ( ans_len ) ; } }
import java . util . * ; public class GFG { static boolean checkPalindrome ( String str ) { int len = str . length ( ) ; len -- ; for ( int i = 0 ; i < len ; i ++ ) { if ( str . charAt ( i ) != str . charAt ( len ) ) return false ; len -- ; } return true ; } static void printSolution ( ArrayList < ArrayList < Integer > > partitions ) { for ( int i = 0 ; i < partitions . size ( ) ; i ++ ) { for ( int j = 0 ; j < partitions . get ( i ) . size ( ) ; j ++ ) System . out . print ( partitions . get ( i ) . get ( j ) + " " ) ; System . out . println ( ) ; } } static void partition ( ArrayList < ArrayList < Integer > > v , String s , ArrayList < ArrayList < Integer > > temp , int index ) { int len = s . length ( ) ; String str = " " ; ArrayList < ArrayList < Integer > > current = temp . clone ( ) ; if ( index == 0 ) temp . add ( new ArrayList < > ( ) ) ; for ( int i = index ; i < len ; i ++ ) { str += s . charAt ( i ) ; if ( checkPalindrome ( str ) ) { temp . add ( new ArrayList < > ( ) ) ; if ( i + 1 < len ) { addStrings ( v , s , temp , i + 1 ) ; } else { v . add ( temp ) ; } temp = current ; } } } static void partition ( ArrayList < ArrayList < Integer > > v , String s , ArrayList < ArrayList < Integer > > temp ) { ArrayList < ArrayList < Integer > > v = new ArrayList < > ( ) ; addStrings ( v , s , temp , 0 ) ; printSolution ( v ) ; } public static void main ( String [ ] args ) { String s = " geeks " ; ArrayList < ArrayList < Integer > > partitions = new ArrayList < ArrayList < Integer > > ( ) ; partition ( s , partitions ) ; } }
import java . util . * ; public class Main { static final int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int r = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int a1 = sc . nextInt ( ) ; int b1 = sc . nextInt ( ) ; int b2 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int d = Math . abs ( a2 - b1 ) ; int d1 = Math . abs ( c2 - a1 ) ; int d2 = Math . abs ( c1 - b1 ) ; int d3 = Math . abs ( c2 - c1 ) ; int d = Math . min ( d1 , d2 ) ; int d3 = Math . min ( d3 , d3 ) ; int d4 = Math . min ( d4 , d4 ) ; int d = Math . min ( d , d2 ) ; System . out . println ( d ) ; } }
import java . util . * ; public class GFG { static void findSubsequence ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > M = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( M . containsKey ( arr [ i ] ) ) { M . put ( arr [ i ] , M . get ( arr [ i ] ) + 1 ) ; } else M . put ( arr [ i ] , 1 ) ; } int [ ] numCount = new int [ k + 1 ] ; for ( Map . Entry < Integer , Integer > p : M . entrySet ( ) ) { if ( p . getValue ( ) >= k ) { for ( int i = 1 ; i * i <= k ; i ++ ) { numCount [ i * i ] += M . get ( p ) ; } } else break ; } int lcm = 0 , len = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { if ( numCount [ i ] > len ) { len = numCount [ i ] ; lcm = i ; } } if ( lcm == 0 ) System . out . println ( - 1 ) ; else { System . out . println ( " LCM = " + lcm + " , Length = " + len ) ; System . out . println ( " Indexes = " + lcm ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( lcm % arr [ i ] == 0 ) System . out . print ( i + " " ) ; } } } public static void main ( String [ ] args ) { int k = 14 ; int arr [ ] = { 2 , 3 , 4 , 5 } ; int n = arr . length ; findSubsequence ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 , odd2 = 0 , even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) odd1 ++ ; else even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 1 ) odd2 ++ ; else even2 ++ ; } int pairs = Math . min ( odd1 , odd2 ) + Math . min ( even1 , even2 ) ; return pairs ; } public static void main ( String [ ] args ) { int a [ ] = { 9 , 14 , 6 , 2 , 11 } ; int b [ ] = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( count_pairs ( a , b , n , m ) ) ; } }
import java . util . * ; public class GFG { static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 , odd2 = 0 , even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 ) odd1 ++ ; else even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 ) odd2 ++ ; else even2 ++ ; } int pairs = Math . min ( odd1 , even2 ) + Math . min ( odd2 , even1 ) ; return pairs ; } public static void main ( String [ ] args ) { int a [ ] = { 9 , 14 , 6 , 2 , 11 } ; int b [ ] = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( count_pairs ( a , b , n , m ) ) ; } }
import java . util . * ; public class GFG { static int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int min_element = arr [ 0 ] ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] - min_element > max_diff ) max_diff = arr [ i ] - min_element ; if ( arr [ i ] < min_element ) min_element = arr [ i ] ; } return max_diff ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 80 , 100 } ; int size = arr . length ; System . out . println ( " Maximum difference is " + maxDiff ( arr , size ) ) ; } }
import java . util . * ; public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int findMax ( int n ) { return binomialCoeff ( n , n / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findMax ( n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 26 ; static int minimumAddition ( String str , int len ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } int maxFreq = Arrays . stream ( freq ) . max ( ) . getAsInt ( ) ; int minAddition = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 0 ) { minAddition += Math . abs ( maxFreq - freq [ i ] ) ; } } return minAddition ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int len = str . length ( ) ; System . out . println ( minimumAddition ( str , len ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . min ( a [ i ] - b [ i ] , 10 - Math . abs ( a [ i ] - b [ i ] ) ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int MAX = 32 ; static int pow2 [ ] = new int [ MAX ] ; static boolean visited [ ] = new boolean [ MAX ] ; static void power_2 ( ) { int an = 1 ; for ( int i = 0 ; i < MAX ; i ++ ) { pow2 [ i ] = an ; an *= 2 ; } } static int countSetBits ( int x ) { int setBits = 0 ; while ( x != 0 ) { x = x & ( x - 1 ) ; setBits ++ ; } return setBits ; } static void add ( int num ) { int point = 0 , value = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( visited [ i ] ) continue ; else { if ( num % 2 == 1 ) value += ( 1 << i ) ; num = num / 2 ; } } ans . add ( value ) ; } static void solve ( int n , int k ) { ans . add ( k ) ; int countk = countSetBits ( k ) ; if ( pow2 [ countk ] < n ) { System . out . println ( - 1 ) ; return ; } int count = 0 ; for ( int i = 0 ; i < pow2 [ countk ] - 1 ; i ++ ) { add ( i ) ; count ++ ; if ( count == n ) break ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans . get ( i ) + " " ) ; } } public static void main ( String [ ] args ) { int n = 3 , k = 5 ; power_2 ( ) ; solve ( n , k ) ; } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int [ ] [ ] dp = new int [ 1000 ] [ 1000 ] ; for ( int i = - 999 ; i < 1000 ; i ++ ) { for ( int j = 2 ; j < 1000 ; j ++ ) { dp [ i ] [ j ] = i ; } } int count = 0 ; for ( int i = 0 ; i < dp [ 0 ] . length ; i ++ ) { for ( int j = 0 ; j < dp [ 0 ] . length ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) { count ++ ; } } } int [ ] isPrime = Library . listPrimality ( 1000 ) ; int max = 0 ; for ( int i = 0 ; i < isPrime . length ; i ++ ) { if ( isPrime [ i ] == 0 ) { max = i ; } } if ( max < isPrime . length ) { return max ; } else if ( isPrime [ max ] == 0 ) { return isPrime [ max ] ; } else { return Library . isPrime ( max ) ; } } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int ans = 0 ; if ( r >= n ) { ans = ( n - r ) * ( n - r ) / 2 ; } else { ans = ( n - r ) * ( n - r ) / 2 ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int MAX = 100001 ; static boolean isPrime [ ] = new boolean [ MAX ] ; static void sieve ( ) { for ( int p = 2 ; p * p < MAX ; p ++ ) { if ( isPrime [ p ] == false ) { for ( int i = p * 2 ; i < MAX ; i += p ) isPrime [ i ] = true ; } } } static void findSubset ( int a [ ] , int n ) { int cnt1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) cnt1 ++ ; } if ( cnt1 > 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] != 1 ) && ( isPrime [ a [ i ] + 1 ] == 0 ) ) { System . out . println ( cnt1 + 1 ) ; for ( int j = 0 ; j < cnt1 ; j ++ ) System . out . print ( "1" + " " ) ; System . out . println ( a [ i ] ) ; return ; } } } if ( cnt1 >= 2 ) { System . out . println ( cnt1 ) ; for ( int i = 0 ; i < cnt1 ; i ++ ) System . out . print ( "1" + " " ) ; System . out . println ( ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( isPrime [ a [ i ] + a [ j ] ] == 0 ) { System . out . println ( 2 ) ; System . out . print ( a [ i ] + " " ) ; System . out . println ( a [ j ] ) ; return ; } } } System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { sieve ( ) ; int A [ ] = { 2 , 1 , 1 } ; int n = A . length ; findSubset ( A , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = 0 ; } for ( int i = 0 ; i < t ; i ++ ) { int [ ] a = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { a [ j ] = x [ j ] - 1 ; x [ j ] = x [ j ] + r ; dp [ a [ j ] ] ++ ; } for ( int j = 0 ; j < r ; j ++ ) { if ( dp [ j ] > 0 ) { dp [ j ] = dp [ j ] ; } } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += dp [ i ] ; } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Hoshino { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; if ( s . equals ( " Hoshino " ) ) { System . out . println ( " Hoshino " ) ; } else if ( s . equals ( " Hoshino Hoshino " ) ) { System . out . println ( " Hoshino " ) ; } else if ( s . equals ( " Hoshino Hoshino " ) ) { System . out . println ( " Hoshino " ) ; } } } }
import java . util . * ; public class GFG { static int countRotations ( int arr [ ] , int low , int high ) { if ( high < low ) return 0 ; if ( high == low ) return low ; int mid = low + ( high - low ) / 2 ; mid = mid + 1 ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ; if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr , low , mid - 1 ) ; return countRotations ( arr , mid + 1 , high ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 18 , 2 , 3 , 6 , 12 } ; int n = arr . length ; System . out . println ( countRotations ( arr , 0 , n - 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = m ; for ( int i = 1 ; i <= n ; i ++ ) { ans = Math . max ( ans , i % m ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean modularSum ( int arr [ ] , int n , int m ) { if ( n > m ) return true ; boolean DP [ ] = new boolean [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( DP [ 0 ] ) return true ; boolean temp [ ] = new boolean [ m ] ; for ( int j = 0 ; j < m ; j ++ ) { if ( DP [ j ] == true ) { if ( DP [ ( j + arr [ i ] ) % m ] == false ) temp [ ( j + arr [ i ] ) % m ] = true ; } } for ( int j = 0 ; j < m ; j ++ ) if ( temp [ j ] == true ) DP [ j ] = true ; } DP [ arr [ i ] % m ] = true ; return DP [ 0 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 7 } ; int n = arr . length ; int m = 5 ; System . out . println ( modularSum ( arr , n , m ) ? " YES " : " NO " ) ; } }
import java . util . * ; import java . io . * ; import java . math . * ; public class Coder { static StringBuffer str = new StringBuffer ( ) ; static int n ; static int a [ ] ; static int solve ( ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == a [ i + 1 ] ) { cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) throws java . lang . Exception { BufferedReader bf ; PrintWriter pw ; boolean lenv = false ; if ( lenv ) { bf = new BufferedReader ( new FileReader ( " input . txt " ) ) ; pw = new PrintWriter ( new BufferedWriter ( new FileWriter ( " output . txt " ) ) ) ; } else { bf = new BufferedReader ( new InputStreamReader ( System . in ) ) ; pw = new PrintWriter ( new OutputStreamWriter ( System . out ) ) ; } int q = Integer . parseInt ( bf . readLine ( ) . trim ( ) ) ; for ( int i = 0 ; i < q ; i ++ ) { String [ ] s = bf . readLine ( ) . trim ( ) . split ( " \\ s + " ) ; a = new int [ s . length ] ; for ( int j = 0 ; j < s . length ; j ++ ) { a [ j ] = Integer . parseInt ( s [ j ] ) ; } str . append ( solve ( ) ) . append ( " \n " ) ; } pw . print ( str ) ; pw . flush ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; long x = sc . nextLong ( ) ; long [ ] a = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextLong ( ) ; } long [ ] [ ] dp = new long [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , a [ j ] ) ; } } long ans = Long . MAX_VALUE ; for ( int k = 0 ; k < n ; k ++ ) { long sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( j - k >= 0 ) { sum += dp [ 0 ] [ j ] ; } else { sum += Math . min ( dp [ 0 ] [ j ] , dp [ ( j - k ) % n ] [ n ] ) ; } } ans = Math . min ( ans , sum ) ; } System . out . println ( ans ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; int h , w ; int [ ] [ ] p ; void run ( ) { for ( ; ; ) { h = sc . nextInt ( ) ; w = sc . nextInt ( ) ; if ( ( h | w ) == 0 ) { break ; } p = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { p [ i ] [ j ] = sc . nextInt ( ) ; } } solve ( ) ; } } void solve ( ) { int ans = 0 ; for ( int i = 0 ; i < h - 1 ; i ++ ) { for ( int j = 0 ; j < w - 1 ; j ++ ) { for ( int k = 0 ; k < w - 1 ; k ++ ) { for ( int l = 0 ; l < w - 1 ; l ++ ) { if ( j < k ) { continue ; } if ( p [ i ] [ j ] > p [ k ] [ l ] ) { continue solve ( ) ; } else { int cnt = 0 ; for ( int l = 0 ; l < w - 1 ; l ++ ) { cnt += p [ i ] [ j ] ; } if ( l >= j ) { continue solve ( ) ; } else { cnt = 0 ; for ( int l = 0 ; l < w - 1 ; l ++ ) { cnt += p [ i ] [ l ] ; } if ( l >= j ) { continue solve ( ) ; } else { cnt = 0 ; for ( int l = 0 ; l < w - 1 ; l ++ ) { cnt += p [ i ] [ l ] ; } if ( l >= j ) { continue solve ( ) ; } else { cnt = 0 ; for ( int l = 0 ; l < w - 1 ; l ++ ) { cnt += p [ i ] [ l ] ; } } if ( l >= j ) { continue solve ( ) ; } else { break ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k != 0 && arr [ i ] / k != 0 ) { max = Math . max ( max , arr [ i ] / k ) ; } } System . out . println ( max ) ; } }
public class GFG { static int sum ( int k , int n ) { int sum = ( int ) Math . pow ( k , n + 1 ) - ( int ) Math . pow ( k - 1 , n + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int K = 3 ; System . out . println ( sum ( K , n ) ) ; } }
import java . util . * ; public class GFG { static int solve ( int i , int tight , int sum_so_far , int sum , int number [ ] , int len ) { if ( i == len ) { if ( sum_so_far == sum ) return 1 ; else return 0 ; } int ans = dp [ i ] [ tight ] ; if ( ans != - 1 ) return ans ; ans = 0 ; for ( int currdigit = 0 ; currdigit < 10 ; currdigit ++ ) { int ntight = tight || currdigit >= number [ i ] ? - 1 : 0 ; int nsumso_far = sum_so_far + currdigit ; ans += solve ( i + 1 , ntight , nsumso_far , sum , number , len ) ; } return ans ; } public static void main ( String [ ] args ) { int count = 0 , Sum = 4 ; int number = "100" ; int [ ] [ ] dp = new int [ 18 ] [ 162 ] ; for ( int i = 0 ; i < 162 ; i ++ ) for ( int j = 0 ; j < 162 ; j ++ ) dp [ i ] [ j ] = new int [ 18 ] ; System . out . println ( solve ( 0 , 0 , 0 , Sum , number , number . length ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a + b >= 2 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static class Node { int data ; Node left , right ; } static int evenOddLevelDifference ( Node root ) { if ( root == null ) return 0 ; Queue < Node > q = new LinkedList < Node > ( ) ; q . add ( root ) ; int level = 0 , evenSum = 0 , oddSum = 0 ; while ( q . size ( ) > 0 ) { int size = q . size ( ) ; level ++ ; while ( size > 0 ) { Node temp = q . peek ( ) ; q . remove ( ) ; if ( level % 2 == 0 ) evenSum += temp . data ; else oddSum += temp . data ; if ( temp . left != null ) q . add ( temp . left ) ; if ( temp . right != null ) q . add ( temp . right ) ; size -- ; } } return ( oddSum - evenSum ) ; } public static void main ( String [ ] args ) { Node root = new Node ( 5 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 6 ) ; root . left . left = new Node ( 1 ) ; root . left . right = new Node ( 4 ) ; root . left . right . left = new Node ( 3 ) ; root . right . right = new Node ( 8 ) ; root . right . right . right = new Node ( 9 ) ; root . right . right . left = new Node ( 7 ) ; int result = evenOddLevelDifference ( root ) ; System . out . println ( " Difference between sums is " + result ) ; } }
import java . util . * ; public class GFG { static int countSubarrays ( int a [ ] , int n , int x ) { int count = 0 , number = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) count ++ ; else { number += ( count ) * ( count + 1 ) / 2 ; count = 0 ; } } if ( count > 0 ) number += ( count ) * ( count + 1 ) / 2 ; return number ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 4 , 5 , 6 , 7 , 2 , 10 , 11 } ; int n = a . length ; int k = 5 ; System . out . println ( countSubarrays ( a , n , k ) ) ; } }
import java . util . * ; public class GFG { static int minCost ( int arr [ ] , int n ) { int count_even = 0 , count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void printLastOccurrence ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , i ) ; } else { mp . put ( a [ i ] , i ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . get ( a [ i ] ) == i ) { System . out . print ( a [ i ] + " " ) ; } } } public static void main ( String [ ] args ) { int a [ ] = { 1 , 5 , 5 , 1 , 6 , 1 } ; int n = a . length ; printLastOccurrence ( a , n ) ; } }
import java . util . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { int INF = 1 << 28 ; void run ( ) { Scanner sc = new Scanner ( System . in ) ; for ( ; ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; solve ( a ) ; } } void solve ( int [ ] a ) { int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < 0 ) { System . out . println ( " NA " ) ; return ; } } System . out . println ( n - a [ n - 1 ] + 1 ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } }
public class GFG { static int countPaths ( int m , int n ) { if ( m == 1 || n == 1 ) return 1 ; return countPaths ( m - 1 , n ) + countPaths ( m , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 5 , m = 5 ; System . out . println ( countPaths ( n , m ) ) ; } }
public class GFG { static int sumOfAP ( int a , int d , int n ) { int sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } public static void main ( String [ ] args ) { int n = 20 ; int a = 2.5 , d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } }
import java . util . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 0 , 3 , 1 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void coordinateCompression ( int arr [ ] , int n ) { HashMap < Integer , Integer > s = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . put ( arr [ i ] , 1 ) ; } int index = 0 ; Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( Map . Entry < Integer , Integer > itr : s . entrySet ( ) ) { index ++ ; mp . put ( itr . getKey ( ) , index ) ; } for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = mp . get ( arr [ i ] ) ; } } static int query ( int BIT [ ] , int index , int n ) { int ans = 0 ; while ( index > 0 ) { ans = Math . max ( ans , BIT [ index ] ) ; index -= index & ( - index ) ; } return ans ; } static void update ( int BIT [ ] , int index , int n ) { int x = query ( BIT , index - 1 , n ) ; int value = x + 1 ; while ( index <= n ) { BIT [ index ] = Math . max ( BIT [ index ] , value ) ; index += index & ( - index ) ; } } static int findLISLength ( int arr [ ] , int n ) { coordinateCompression ( arr , n ) ; int [ ] BIT = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { update ( BIT , arr [ i ] , n ) ; } int ans = query ( BIT , n , n ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 5 , 1 , 3 , 2 , 4 , 8 , 7 } ; int n = arr . length ; int ans = findLISLength ( arr , n ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 5 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { if ( arr [ i ] [ j ] == 1 ) { arr [ i ] [ j ] = 0 ; } else if ( arr [ i ] [ j ] == 0 ) { arr [ i ] [ j ] = 1 ; } else if ( arr [ i ] [ j ] == 1 ) { arr [ i ] [ j ] = 0 ; } else if ( arr [ i ] [ j ] == 0 ) { arr [ i ] [ j ] = 1 ; } else { arr [ i ] [ j ] = 0 ; } } if ( arr [ i ] [ j ] == 0 ) { flag = true ; } } if ( flag == true ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public final class p021 { public static void main ( String [ ] args ) { System . out . println ( new p021 ( ) . run ( ) ) ; } public String run ( ) { int BASE = 10 ; int DIGITS = 20 ; int CONSECUTIVE = 3 ; int MAX_SUM = 9 ; int innerlen = ( int ) Math . pow ( BASE , CONSECUTIVE ) ; int [ ] [ ] ways = new int [ innerlen - 1 ] [ ] ; for ( int digits = 1 ; digits <= DIGITS + CONSECUTIVE ; digits ++ ) { int [ ] [ ] newrow = new int [ innerlen ] [ ] ; for ( int prefix = 0 ; prefix < innerlen ; prefix ++ ) { int sum = 0 ; if ( digitSum ( prefix ) <= MAX_SUM ) { for ( int nextdigit = 0 ; nextdigit < BASE ; nextdigit ++ ) { sum += ways [ digits - 1 ] [ prefix % ( int ) Math . pow ( BASE , CONSECUTIVE - 1 ) * BASE + nextdigit ] ; } newrow [ 0 ] [ prefix ] = sum ; } newrow [ 0 ] [ prefix ] = sum ; } ways [ 0 ] [ 0 ] = newrow [ 1 ] ; } int ans = ways [ innerlen - 1 ] [ 0 ] - ways [ innerlen - 2 ] [ 0 ] ; return Integer . toString ( ans ) ; } private static int digitSum ( int n ) { return sum ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . nextLine ( ) ; String t = sc . nextLine ( ) ; if ( s . contains ( t ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class Solution { public boolean isToeplitzMatrix ( int [ ] [ ] matrix ) { for ( int r = 0 ; r < matrix . length - 1 ; r ++ ) { for ( int c = 0 ; c < matrix [ r ] . length - 1 ; c ++ ) { if ( matrix [ r ] [ c ] != matrix [ r + 1 ] [ c + 1 ] ) return false ; } } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] [ ] matrix = { { 1 , 2 , 3 , 4 } , { 5 , 1 , 2 , 3 } , { 9 , 5 , 1 , 2 } } ; boolean out = sObj . isToeplitzMatrix ( matrix ) ; System . out . println ( out ) ; } }
public final class p035 { public static void main ( String [ ] args ) { System . out . println ( new p035 ( ) . run ( ) ) ; } public String run ( ) { int LIMIT = Library . pow ( 10 , 9 ) ; int ans = 0 ; for ( int s = 1 ; s * s > ( LIMIT + 1 ) / 3 ; s ++ ) { for ( int t = s - 2 ; t > 0 ; t -- ) { if ( Library . gcd ( s , t ) == 1 ) { int a = s * t ; int b = ( s * s - t * t ) / 2 ; int c = ( s * s + t * t ) / 2 ; if ( a * 2 == c - 1 ) { int p = c * 3 - 1 ; if ( p <= LIMIT ) ans += p ; } if ( a * 2 == c + 1 ) { int p = c * 3 + 1 ; if ( p <= LIMIT ) ans += p ; } if ( b * 2 == c - 1 ) { int p = c * 3 - 1 ; if ( p <= LIMIT ) ans += p ; } } if ( b * 2 == c + 1 ) { int p = c * 3 + 1 ; if ( p <= LIMIT ) ans += p ; } } } return Integer . toString ( ans ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( ( n | t | l | b ) == 0 ) { break ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) { for ( int j = 0 ; j < n + 1 ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < t ; i ++ ) { for ( int j = 0 ; j < n + 1 ; j ++ ) { for ( int k = 0 ; k < n + 1 ; k ++ ) { if ( dp [ i ] [ j ] == 0 ) { dp [ i ] [ j ] = dp [ i + 1 ] [ j ] ; } else if ( dp [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = dp [ i + 1 ] [ j ] ; } else if ( dp [ i ] [ j ] == 2 ) { dp [ i ] [ j ] = dp [ i + 1 ] [ j ] ; } else { dp [ i ] [ j ] = dp [ i + 1 ] [ j ] + dp [ i + 1 ] [ j ] ; } } } } println ( " " + dp [ 0 ] [ 0 ] ) ; } } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int oddCount = 0 ; int evenCount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { oddCount ++ ; } else { evenCount ++ ; } } if ( oddCount > 0 && evenCount > 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class GFG { static int minInsertions ( int H [ ] , int n , int K ) { int inser = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) continue ; else inser += ( int ) Math . ceil ( diff / K ) - 1 ; } return inser ; } public static void main ( String [ ] args ) { int H [ ] = { 2 , 4 , 8 , 16 } ; int K = 3 ; int n = H . length ; System . out . println ( minInsertions ( H , n , K ) ) ; } }
public class GFG { static int countWords ( String str , int l ) { int count = 1 ; if ( l == 1 ) return count ; if ( str . charAt ( 0 ) == str . charAt ( 1 ) ) count *= 1 ; else count *= 2 ; for ( int j = 1 ; j < l - 1 ; j ++ ) { if ( str . charAt ( j ) == str . charAt ( j - 1 ) && str . charAt ( j ) == str . charAt ( j + 1 ) ) count *= 1 ; else if ( str . charAt ( j ) == str . charAt ( j - 1 ) || str . charAt ( j ) == str . charAt ( j + 1 ) || str . charAt ( j - 1 ) == str . charAt ( j + 1 ) ) count *= 2 ; else count *= 3 ; } if ( str . charAt ( l - 1 ) == str . charAt ( l - 2 ) ) count *= 1 ; else count *= 2 ; return count ; } public static void main ( String [ ] args ) { String str = " abc " ; int l = str . length ( ) ; System . out . println ( countWords ( str , l ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; sum += arr [ i ] ; } if ( sum % 2 == 0 ) { System . out . println ( sum ) ; } else { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System . out . println ( sum - arr [ i ] ) ; break ; } } } } }
import java . util . * ; public class GFG { static Vector < Integer > getPerfectSquares ( int n ) { Vector < Integer > perfectSquares = new Vector < Integer > ( ) ; int current = 1 ; for ( int i = 1 ; current <= n ; i ++ ) { perfectSquares . add ( current ) ; current = ( int ) Math . pow ( i , 2 ) ; } return perfectSquares ; } static int maxPairSum ( int arr [ ] ) { int n = arr . length ; int max = 0 , secondMax = 0 ; if ( arr [ 0 ] > arr [ 1 ] ) { max = arr [ 0 ] ; secondMax = arr [ 1 ] ; } else { max = arr [ 1 ] ; secondMax = arr [ 0 ] ; } for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { secondMax = max ; max = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } } return ( max + secondMax ) ; } static int countPairsWith ( int n , Vector < Integer > perfectSquares , Vector < Integer > nums ) { int count = 0 ; for ( int i = 0 ; i < perfectSquares . size ( ) ; i ++ ) { int temp = perfectSquares . get ( i ) - n ; if ( temp > n && nums . contains ( temp ) ) { count ++ ; } } return count ; } static int countPairs ( Vector < Integer > arr ) { int n = arr . size ( ) ; int max = maxPairSum ( arr ) ; Vector < Integer > perfectSquares = getPerfectSquares ( max ) ; Vector < Integer > nums = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { nums . add ( arr . get ( i ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { count += countPairsWith ( arr , perfectSquares , nums ) ; } return count ; } public static void main ( String [ ] args ) { Vector < Integer > arr = new Vector < Integer > ( ) ; int n = arr . size ( ) ; System . out . println ( countPairs ( arr
public class GFG { static double findHypotenuse ( double side1 , double side2 ) { double h = ( ( ( side1 * side1 ) + ( side2 * side2 ) ) ) ; return Math . sqrt ( h ) ; } public static void main ( String [ ] args ) { double side1 = 3 , side2 = 4 ; System . out . println ( findHypotenuse ( side1 , side2 ) ) ; } }
import java . util . * ; public class GFG { static void printTwoOdd ( int arr [ ] , int size ) { int xor2 = arr [ 0 ] , set_bit_no = 0 ; int n = size - 2 ; int x = 0 , y = 0 ; for ( int i = 1 ; i < size ; i ++ ) xor2 = xor2 ^ arr [ i ] ; set_bit_no = xor2 & ~ ( xor2 - 1 ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else y = y ^ arr [ i ] ; } System . out . println ( " The two ODD elements are " + x + " & " + y ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 } ; int arr_size = arr . length ; printTwoOdd ( arr , arr_size ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ 0 ] ; int max = arr [ n - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < arr [ min ] ) { min = arr [ i ] ; max = arr [ min ] ; min = arr [ i ] ; } } System . out . println ( min + 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String [ ] arr = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs1 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs2 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs3 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs4 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs5 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs6 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs7 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday " , " sunday " } ; String [ ] arrs8 = { " monday " , " tuesday " , " wednesday " , " thursday " , " friday " , " saturday
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . next ( ) ; } boolean isok = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] . equals ( " OO " ) ) { isok = false ; break ; } } if ( isok ) { System . out . println ( " YES " ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( arr [ i ] ) ; } } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static class Node { int data ; Node next ; Node ( int data ) { this . data = data ; this . next = null ; } } static void printList ( Node head ) { if ( head == null ) return ; Node temp = head ; System . out . print ( temp . data + " - > " ) ; temp = temp . next ; while ( temp != head ) { System . out . print ( temp . data + " - > " ) ; temp = temp . next ; } System . out . println ( head . data ) ; } static void deleteK ( Node head_ref , int k ) { head = head_ref ; if ( head == null ) return ; Node curr = head ; Node prev = null ; while ( curr . next == head && curr == head ) { break ; } printList ( head ) ; for ( int i = 0 ; i < k ; i ++ ) { prev = curr ; curr = curr . next ; } if ( curr == head ) { prev = head ; while ( prev . next != head ) { prev = prev . next ; } head = curr . next ; prev . next = head ; head_ref = head ; } else if ( curr . next == head ) { prev . next = head ; } else { prev . next = curr . next ; } } } static Node insertNode ( Node head_ref , int x ) { Node temp = head_ref ; temp = new Node ( x ) ; if ( head == null ) { temp . next = temp ; head_ref = temp ; return head_ref ; } temp . next = head ; while ( temp . next != head ) { temp . next = temp . next ; } temp . next = head ; return head_ref ; } public static void main ( String [ ] args ) { Node head = head ; while ( head != null ) { insertNode ( head , head . data ) ; } head = head . next ; } }
public class GFG { static int steps ( int cur , int x , int n ) { if ( x == 0 ) return Integer . MAX_VALUE ; else if ( x > 0 ) return Math . abs ( ( n - cur ) / x ) ; else return Math . abs ( ( cur - 1 ) / x ) ; } static int countSteps ( int curx , int cury , int n , int m , int moves [ ] [ ] ) { int count = 0 ; int k = moves . length ; for ( int i = 0 ; i < k ; i ++ ) { int x = moves [ i ] [ 0 ] , y = moves [ i ] [ 1 ] ; int stepct = Math . min ( steps ( curx , x , n ) , steps ( cury , y , m ) ) ; count += stepct ; curx += stepct * x ; cury += stepct * y ; } return count ; } public static void main ( String [ ] args ) { int n = 4 , m = 5 , x = 1 , y = 1 ; int moves [ ] [ ] = { { 1 , 1 } , { 1 , 1 } , { 0 , - 2 } } ; System . out . println ( countSteps ( x , y , n , m , moves ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int max = Math . max ( n , m ) ; n = n - max ; m = m - m ; k = k - max ; System . out . println ( m + k ) ; } }
import java . util . * ; public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int cntSubArr ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int curr_gcd = 0 ; for ( int j = i ; j < n ; j ++ ) { curr_gcd = __gcd ( curr_gcd , arr [ j ] ) ; ans += ( curr_gcd == 1 ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( cntSubArr ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static boolean isVowel ( char c ) { if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) return true ; return false ; } static boolean isVowelPrime ( String str , int n ) { boolean prime [ ] = new boolean [ n ] ; prime [ 0 ] = prime [ 1 ] = false ; for ( int p = 2 ; p * p < n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i < n ; i += p ) prime [ i ] = false ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( isVowel ( str . charAt ( i ) ) && prime [ i ] == false ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; if ( isVowelPrime ( str , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int minStepToDeleteString ( String str ) { int N = str . length ( ) ; int dp [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ; for ( int l = 1 ; l <= N ; l ++ ) { int i = 0 , j = l - 1 ; while ( j < N ) { dp [ i ] [ j ] = 1 ; } } dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ; if ( str . charAt ( i ) == str . charAt ( i + 1 ) ) dp [ i ] [ j ] = Math . min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) ; for ( int K = i + 2 ; K <= j ; K ++ ) { if ( str . charAt ( i ) == str . charAt ( K ) ) dp [ i ] [ j ] = Math . min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) ; } return dp [ 0 ] [ N - 1 ] ; } public static void main ( String [ ] args ) { String str = "2553432" ; System . out . println ( minStepToDeleteString ( str ) ) ; } }
import java . util . * ; public class GFG { static int limit = 1000000 ; static int position [ ] = new int [ limit + 1 ] ; static void sieve ( ) { position [ 0 ] = - 1 ; position [ 1 ] = - 1 ; int pos = 0 ; for ( int i = 2 ; i <= limit ; i ++ ) { if ( position [ i ] == 0 ) { pos ++ ; position [ i ] = pos ; for ( int j = i * 2 ; j <= limit ; j += i ) { position [ j ] = - 1 ; } } } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 11 ; System . out . println ( position [ n ] ) ; } }
import java . util . * ; public class GFG { static int DP_s = 9 ; static int getNumMonotone ( int ln ) { int [ ] [ ] DP = new int [ DP_s ] [ DP_s ] ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ 0 ] [ i ] = i + 1 ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i < DP_s ; i ++ ) for ( int j = 1 ; j < DP_s ; j ++ ) DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; return DP [ ln - 1 ] [ DP_s - 1 ] ; } public static void main ( String [ ] args ) { System . out . println ( getNumMonotone ( 10 ) ) ; } }
import java . util . * ; public class GFG { static int DP_s = 9 ; static int getNumMonotone ( int ln ) { int [ ] [ ] DP = new int [ DP_s ] [ DP_s ] ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ 0 ] [ i ] = i + 1 ; for ( int i = 0 ; i < DP_s ; i ++ ) DP [ i ] [ 0 ] = 1 ; for ( int i = 1 ; i < DP_s ; i ++ ) for ( int j = 1 ; j < DP_s ; j ++ ) DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; return DP [ ln - 1 ] [ DP_s - 1 ] ; } public static void main ( String [ ] args ) { System . out . println ( getNumMonotone ( 10 ) ) ; } }
import java . util . * ; public class GFG { static int maxCost ( int a [ ] , int n , int l , int r ) { int mx = 0 ; for ( int i = 0 ; i < n ; i ++ ) mx = Math . max ( mx , a [ i ] ) ; int [ ] count = new int [ mx + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) count [ a [ i ] ] ++ ; int res [ ] = new int [ mx + 1 ] ; res [ 0 ] = 0 ; l = Math . min ( l , r ) ; for ( int num = 1 ; num <= mx ; num ++ ) { int k = Math . max ( num - l - 1 , 0 ) ; res [ num ] = Math . max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) ; } return res [ mx ] ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 1 , 2 , 3 , 2 , 2 , 1 } ; int l = 1 , r = 1 ; int n = a . length ; System . out . println ( maxCost ( a , n , l , r ) ) ; } }
import java . util . * ; import java . io . * ; public class codeforces1626B { public static void main ( String [ ] args ) throws Exception { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( br . readLine ( ) ) ; int t = Integer . parseInt ( st . nextToken ( ) ) ; StringBuilder sb = new StringBuilder ( ) ; while ( t -- > 0 ) { st = new StringTokenizer ( br . readLine ( ) ) ; int n = Integer . parseInt ( st . nextToken ( ) ) ; int m = Integer . parseInt ( st . nextToken ( ) ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = br . readLine ( ) ; } int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < m ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] . charAt ( j ) == ' R ' ) { cnt ++ ; } else { cnt = 0 ; } } if ( cnt > max ) { max = cnt ; } } sb . append ( " YES \n " ) ; } System . out . print ( sb ) ; } }
import java . io . * ; public class GFG { static float findArea ( float r ) { float PI = 3.142 ; return PI * ( r * r ) ; } public static void main ( String [ ] args ) { System . out . println ( " Area is " + findArea ( 5 ) ) ; } }
import java . util . * ; import java . io . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] map = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { map [ i ] [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) - 1 ; int y = sc . nextInt ( ) ; map [ x ] [ y ] = 1 ; map [ y ] [ x ] = 1 ; } int [ ] dp2 = new int [ n ] ; dp2 [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( map [ i ] [ j ] == 0 ) { dp2 [ i ] [ j ] = dp2 [ i ] [ j ] + 1 ; } else { dp2 [ i ] [ j ] = dp2 [ i ] [ j ] + dp2 [ i ] [ j ] ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += dp2 [ n - 1 ] [ i ] ; } System . out . println ( ans ) ; } }
public class GFG { static int nthTerm ( int N ) { return ( int ) Math . abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int getHeight ( int X ) { return ( 2 * X ) ; } public static void main ( String [ ] args ) { int X = 35 ; System . out . println ( getHeight ( X ) ) ; } }
public class GFG { static int V = 4 ; static int countwalks ( int graph [ ] [ ] , int u , int v , int k ) { if ( k == 0 && u == v ) return 1 ; if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ; if ( k <= 0 ) return 0 ; int count = 0 ; for ( int i = 0 ; i < V ; i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph , i , v , k - 1 ) ; return count ; } public static void main ( String [ ] args ) { int graph [ ] [ ] = { { 0 , 1 , 1 , 1 , } , { 0 , 0 , 0 , 0 , 1 } , { 0 , 0 , 0 , 0 , 1 } , { 0 , 0 , 0 , 0 , 0 } } ; int u = 0 , v = 3 , k = 2 ; System . out . println ( countwalks ( graph , u , v , k ) ) ; } }
import java . util . * ; public class GFG { static int findDigits ( int n , int b ) { if ( n < 0 ) return 0 ; double M_PI = 3.141592 ; double M_E = 2.7182 ; if ( n <= 1 ) return 1 ; double x = ( n * log10 ( n / M_E ) + log10 ( 2 * M_PI * n ) / 2.0 ) ; return ( int ) ( x + 1 ) ; } public static void main ( String [ ] args ) { System . out . println ( findDigits ( 4 , 16 ) ) ; System . out . println ( findDigits ( 5 , 8 ) ) ; System . out . println ( findDigits ( 12 , 16 ) ) ; System . out . println ( findDigits ( 19 , 13 ) ) ; } }
import java . util . * ; import java . io . * ; import java . awt . geom . * ; import java . math . * ; public class Main { static final Scanner in = new Scanner ( System . in ) ; static final PrintWriter out = new PrintWriter ( System . out , false ) ; static boolean debug = false ; static boolean solve ( ) { int n = in . nextInt ( ) ; int q = in . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in . nextInt ( ) ; } int [ ] b = new int [ q ] ; for ( int i = 0 ; i < q ; i ++ ) { int mode = in . nextInt ( ) ; int x = in . nextInt ( ) ; int y = in . nextInt ( ) ; if ( mode == 0 ) { b [ x ] += y ; } else { b [ x ] += y - 1 ; } } int ans = 0 ; for ( int i = 0 ; i < q ; i ++ ) { out . println ( b [ i ] ) ; } return ans ; } public static void main ( String [ ] args ) { debug = args . length > 0 ; long start = System . nanoTime ( ) ; solve ( ) ; out . flush ( ) ; long end = System . nanoTime ( ) ; dump ( ( end - start ) / 1000000 + " ms " ) ; in . close ( ) ; out . close ( ) ; } static void dump ( Object ... o ) { if ( debug ) System . err . println ( Arrays . deepToString ( o ) ) ; } }
import java . util . * ; public class Main { static final int MOD = 1_000_000_007 ; public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; long N = sc . nextLong ( ) ; long [ ] [ ] dp = new long [ 61 ] [ 3 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { for ( int k = 0 ; k < 3 ; k ++ ) { if ( ( ( N >> j ) & 1 ) == 1 ) { dp [ i + 1 ] [ j ] += dp [ i ] [ j ] ; } else { dp [ i + 1 ] [ j ] += dp [ i ] [ j ] ; } } } } long ans = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { ans += dp [ i ] [ 0 ] ; } System . out . println ( ans % MOD ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc = new Scanner ( System . in ) ; int INF = 1 << 28 ; double EPS = 1e-9 ; void run ( ) { for ( ; ; ) { int p = sc . nextInt ( ) , q = sc . nextInt ( ) , a = sc . nextInt ( ) , n = sc . nextInt ( ) ; if ( ( p | q | a | n ) == 0 ) { break ; } solve ( ) ; } } void solve ( ) { int [ ] dp = new int [ 2 ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] != 0 ) { dp [ i ] = dp [ i + 1 ] + 1 ; } } dp [ 0 ] = 0 ; for ( int i = 0 ; i < dp . length ; i ++ ) { if ( dp [ i ] != 0 ) { dp [ i ] = dp [ i + 1 ] + 1 ; } } println ( " " + dp [ 0 ] ) ; } void debug ( Object ... os ) { System . err . println ( Arrays . deepToString ( os ) ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; public class GFG { static String binary_conversion ( String s , int m ) { while ( m > 0 ) { String temp = m % 2 ; s += temp ; m = m / 2 ; } return s . substring ( 0 , m ) ; } static int find_character ( int n , int m , int i ) { String s = " " ; s = binary_conversion ( s , m ) ; String s1 = " " ; for ( int x = 0 ; x < n ; x ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '1' ) s1 += "10" ; else s1 += "01" ; } s = s1 ; s1 = " " ; } int e = s . charAt ( i ) - '0' ; int r = s . charAt ( i ) - '0' ; return e - r ; } public static void main ( String [ ] args ) { int m = 5 , n = 2 , i = 8 ; System . out . println ( find_character ( n , m , i ) ) ; } }
import java . util . * ; public class GFG { static int countSubSets ( int arr [ ] , int n ) { HashSet < Integer > us = new HashSet < > ( ) ; int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) us . add ( arr [ i ] ) ; } even_count = us . size ( ) ; return ( int ) Math . pow ( 2 , even_count ) - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 1 , 9 , 2 , 6 , 5 , 3 } ; int n = arr . length ; System . out . println ( " Number of subsets = " + countSubSets ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static int f [ ] = new int [ MAX ] ; static int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 || n == 2 ) { f [ n ] = 1 ; return f [ n ] ; } if ( f [ n ] != 0 ) return f [ n ] ; int k = ( n & 1 ) > 0 ? ( n + 1 ) / 2 : n / 2 ; if ( n % 2 == 1 ) f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) ; else f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; return f [ n ] ; } static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int findLCMFibonacci ( int a , int b ) { return ( fib ( a ) * fib ( b ) ) / fib ( gcd ( a , b ) ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 12 ; System . out . println ( findLCMFibonacci ( a , b ) ) ; } }
public class GFG { static int findNumbers ( int n , int w ) { int x = 0 , sum = 0 ; if ( w >= 0 && w <= 8 ) x = 9 - w ; else if ( w >= - 9 && w <= - 1 ) x = 10 + w ; sum = ( int ) Math . pow ( 10 , n - 2 ) ; sum = ( x * sum ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 , w = 4 ; System . out . println ( findNumbers ( n , w ) ) ; } }
import java . util . * ; public class GFG { static int findKthChar ( String s , int k ) { int len = s . length ( ) ; int i = 0 , total_len = 0 ; while ( i < len ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { total_len ++ ; if ( total_len == k ) return s . charAt ( i ) ; i ++ ; } else { int n = 0 ; while ( i < len && s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { n = n * 10 + ( s . charAt ( i ) - '0' ) ; i ++ ; } int next_total_len = total_len * n ; if ( k <= next_total_len ) { int pos = k % total_len ; if ( pos == 0 ) pos = total_len ; return findKthChar ( s , pos ) ; } else total_len = next_total_len ; } } return - 1 ; } public static void main ( String [ ] args ) { String s = " ab2c3" ; int k = 5 ; System . out . println ( findKthChar ( s , k ) ) ; } }
import java . util . * ; public class GFG { static int countNonEmptySubstr ( String str ) { int n = str . length ( ) ; return n * ( n + 1 ) / 2 ; } public static void main ( String [ ] args ) { String s = " abcde " ; System . out . println ( countNonEmptySubstr ( s ) ) ; } }
