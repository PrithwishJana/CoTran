import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = sc . nextInt ( ) ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = sc . nextInt ( ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) c [ i ] = sc . nextInt ( ) ; int ans =
import
import
import java . util . * ; public class GFG { static int count9s ( String number ) { int n = number . length ( ) ; int d [ ] = new int [ 9 ] ; int result = 0 ; int mod_sum = 0 ; int continuous_zero = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( number . charAt ( i ) - '0' ) == 0 ) continuous_zero ++ ; else continuous_zero = 0 ; mod_sum += number . charAt ( i ) - '0' ; mod_sum %= 9 ; result += d [ mod_sum ] ; d [ mod_sum ] += 1 ; result -= continuous_zero ; } return result ; } public static void main ( String args [ ] ) { System . out . println ( count9s ( "01809" ) ) ; System . out . println ( count9s ( "1809" ) ) ; System . out . println ( count9s ( "4189" ) ) ; } }
public class GFG { static long fastPow ( long N , long K ) { if ( K == 0 ) return 1 ; long temp = fastPow ( N , int ( K / 2 ) ) ; if ( K % 2 == 0 ) return temp * temp ; else return N * temp * temp ; } static long countWays ( long N , long K ) { return K * fastPow ( K - 1 , N - 1 ) ; } public static void main ( String [ ] args ) { long N = 3 , K = 3 ; System . out . println ( countWays ( N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = a [ i ] ^ b [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] == 0 ) { ans = ans ^ ( 7 ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int MAX = 10000 ; static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ MAX ] ; int p = 2 ; while ( p * p < MAX ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } p ++ ; } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) { int arr [ ] = new
import java . util . * ; public class GFG { static int MAX = 100000 ; static void MAX = 100000 ; static void prime = new boolean [ MAX ] ; static void SieveOfEratosthenes ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) { int arr [ ] = new int [ MAX ] ; for ( int i = p * 2 ; i <= MAX ; i += p ) { arr [ i ] =
import java . io . * ; public class GFG { static void mul_table ( int N , int i ) { if ( i > 10 ) return ; System . out . println ( N + " * " + i + " ▁ = ▁ " + N * i ) ; return ; } public static void main ( String [ ] args ) { int N = 8 ; mul_table ( N , 1 ) ; } }
public class GFG { static int closestNumber ( int n , int m ) { int q = ( n / m ) ; n = m * q ; if ( ( n * m ) > 0 ) { n2 = ( m * ( q + 1 ) ) ; } else { n2 = ( m * ( q - 1 ) ) ; } if ( ( Math . abs ( n - n1 ) < Math . abs ( n - n2 ) ) ) { return n1 ; } return n2 ; } public static void main ( String [ ] args ) { int n = 13 , m = 4 ; System . out . println ( closestNumber ( n , m ) ) ; n = - 15 ; m = 6 ; System . out . println ( closestNumber ( n , m ) ) ; n = 0 ; m = 8 ; System . out . println ( closestNumber ( n , m ) ) ; n = 18 ; m = - 7 ; System . out . println ( closestNumber ( n , m ) ) ; } }
import java . io . * ; public class GFG { static int solve ( int ang , int n ) { if ( ( ang * n ) > ( 180 * ( n - 2 ) ) ) return 0 ; else if ( ( ang * n ) % 360 != 0 ) return 0 ; int ans = 1 ; int freq = ( ang * n ) / 180 ; ans = ans * ( n - 1 - freq ) ; ans = ans * n ; return ans ; } public static void main ( String [ ] args ) { ang = 90 ; int n = 4 ; System . out . println ( solve ( ang , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int l
import java . util . * ; public class GFG { static void checkIfSortRotated ( int arr [ ] , int n ) { int minEle = Integer . MAX_VALUE ; int maxEle = - Integer . MAX_VALUE ; int minIndex = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < minEle ) minEle = arr [ i ] ; if ( arr [ i ] < arr [ i - 1 ] ) { flag2 = 0 ; break ; } } if ( flag1 && flag2 && arr [ n - 1 ] < arr [ minIndex - 1 ] ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 , 1 , 2 } ; int n = arr . length ; checkIfSortRotated ( arr
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] >= arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { count += 1 ; } } if ( count > 0 ) { System . out . println ( " Power -
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String a = " A " ; String b = " B " ; String c = " C " ; String ans = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' && a . charAt ( i ) == ' Z ' && b . charAt ( i ) == ' A ' && c . charAt ( i ) == ' B ' && c . charAt ( i ) == ' C ' ) { ans = " A " ; } else if ( s . charAt ( i ) == ' Z ' && b . charAt ( i ) == ' A ' && c . charAt ( i ) == ' B ' && c . charAt ( i ) == ' C ' ) { ans = " B " ; } else if ( s . charAt ( i ) == ' A ' && a . charAt ( i ) == ' Z ' && b . charAt ( i ) == ' A ' && c . charAt ( i ) == ' B ' && c . charAt ( i ) == ' C ' ) { ans = " C " ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int maxIdx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; maxIdx = i ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; maxIdx = i ; } } System . out . println ( maxIdx + 1 ) ; } } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum <= sum ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int left = 0 ; int right = n - 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == left ) { count ++ ; left ++ ; } else { right ++ ; } } if ( count == k ) { System . out . println ( " LEFT " ) ; } else if ( count == k ) { System . out . println ( " RIGHT " ) ; } else { System . out . println ( " APPROX " ) ; } } }
import java . util . * ; public class GFG { static void printDistSum ( int arr [ ] [ ] , int n ) { int sum = 0 ; int dp [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = true ; } for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = true ; } for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = true ; } for ( int j = 1 ; j <= Sum + 1 ; j ++ ) { if ( dp [ n ] [ j ] == true ) { System . out . print ( j + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; printDistSum ( arr , n ) ; } }
public class GFG { static int Subtract ( int a , int b ) { int c = a + ( ~ b + 1 ) ; return c ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; System . out . println ( Subtract ( a , b ) ) ; a = 9 , b = 7 ; System . out . println ( Subtract ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( count == n ) { System . out . println ( n - 1 ) ; } else { System . out . println ( n - count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int nextZero ( int i , int occurrences [ ] ) { while ( i < 26 ) { if ( occurrences [ i ] == 0 ) return i ; i ++ ; } return - 1 ; } static int getModifiedString ( String str ) { int n = str . length ( ) ; if ( n > 26 ) return " - 1" ; int ch [ ] = new int [ n ] ; int index = nextZero ( 0 , occurrences ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( occurrences [ ch [ i ] ] == 0 ) return i ; ch [ i ] = ( char ) ( ' a ' + index ) ; occurrences [ index ] = 1 ; index = nextZero ( index + 1 , occurrences )
import java . util . * ; public class Main { public static void main ( String [ ] args )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math . min ( a [ i ] , a [ i ] ) ; max = Math . max ( max , min ) ; } System . out . println ( max - max + 1 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 2 == 1 ) { System . out . println ( 3 ) ; } else { System . out . println ( 2 * ( n / 2 ) + 1 ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( a [ i ] == i ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ans = ans * arr [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } int ans1 = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans1 += ans [ i ] ; } int ans2 = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { ans2 += ans [ i ] ; } System . out . println ( ans1 + ans2 ) ; } }
public class GFG { static void printMax ( int arr [ ] , int n , int k ) { int Qi = deque ( ) ; for ( int i = 0 ; i < k ; i ++ ) { while ( Qi > 0 && arr [ i ] >= arr [ Qi - 1 ] ) { Qi . pop ( ) ; } Qi . push ( i ) ; } for ( int i = k ; i < n ; i ++ ) System . out . print ( arr [ Qi ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 1 , 78 , 90 , 57 , 90 } ; int k = 3 ; printMax ( arr , k ) ; } }
public class GFG { static int russianPeasant ( int a , int b ) { int res = 0 ; while ( b > 0 ) { if ( b & 1 ) res = res + a ; b >>= 1 ; } return res ; } public static void main ( String [ ] args ) { System . out . println ( russianPeasant ( 18 , 1 ) ) ; System . out . println ( russianPeasant ( 20 , 12 ) ) ; } }
import java . util . * ; public class GFG { static boolean isValid ( String str , int length ) { for ( int i = 1 ; i < length ; i ++ ) { if ( str . charAt ( i ) == str . charAt ( i - 1 ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String str = "0110" ; int length = str . length ( ) ; if ( isValid ( str , length ) ) System . out . println ( " Valid " ) ; else System . out . println ( " Invalid " ) ; } }
import java . util . * ; public class GFG { static int random = ( int ) Math . pow ( 2 , n - 1 ) ; static void lehmann ( int n , int t ) { int a = random . randint ( 2 , n - 1 ) ; int e = ( n - 1 ) / 2 ; while ( t > 0 ) { int result = ( ( int ) ( a * e ) % n ) ; if ( ( result % n ) == 1 || ( result % n ) == ( n - 1 ) ) { a = random . randint ( 2 , n - 1 ) ; t -= 1 ; } else { return - 1 ; } } } public static void main ( String [ ] args ) { int n = 13 ; lehmann ( n , t ) ; if ( n % 2 == 0 ) System . out . println ( "2 ▁ is ▁ Prime . " ) ; else System
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; while ( true ) { if ( a <= b ) { ans += a / b ; a %= b ; } else { break ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int k = sc . nextInt ( ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { min = i ; } if ( s . charAt ( i ) == '2' ) { max = i ; } } if ( k > max ) { max = k ; } if ( k < min ) { min = k ; } System . out . println ( max - min ) ; } }
public class GFG { static int N = 3 ; static int MaxTraceSub ( int mat [ ] [ ] ) { int max_trace = 0 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) { int r = i ; int s = j ; while ( r < N && s < N ) { trace += mat [ r ] [ s ] ; r ++ ; s += 1 ; max_trace = Math . max ( trace , max_trace ) ; } } return max_trace ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { 10 , 2 , 5 } , { 6 , 10 , 4 } , { 2 , 7 , -10 } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { double x1 = sc . nextDouble ( ) ; double y1 = sc . nextDouble ( ) ; double x2 = sc . nextDouble ( ) ; double y2 = sc . nextDouble ( ) ; double xb = sc . nextDouble ( ) ; double yb = sc . nextDouble ( ) ; double xc = sc . nextDouble ( ) ; double yc = sc . nextDouble ( ) ; double xd = sc . nextDouble ( ) ; double yd = sc . nextDouble ( ) ; if ( ( xd < yd && ( yd < xc ) || ( yd < yc ) ) ) { System . out . println ( " NO " ) ; continue ; } if ( ( xd < yd && ( yd < xc ) || ( yd < yc ) ) ) { System . out . println ( " NO " ) ; continue ; } if ( ( xd < yd && ( yd < xc ) || ( yd < yc ) ) ) { System . out . println ( " NO " ) ; continue ; } if ( ( xd < yd && ( yd < xc ) || ( yd < yc ) ) ) { System . out . println ( " NO " ) ; continue ; } if ( ( xd < yd && ( yd < xc ) || ( yd < yc ) ) ) { System . out . println ( " NO " ) ; continue ; } if ( ( xd < yd && ( yd < xc )
import
public class GFG { static int OddDivCount ( int a , int b ) { int res = 0 ; for ( int i = a ; i <= b ; i ++ ) { int divCount = 0 ; for ( int j = 1 ; j <= i ; j ++ ) { if ( i % j == 0 ) divCount ++ ; } if ( divCount % 2 == 1 ) res ++ ; } return res ; } public static void main ( String [ ] args ) { int a = 1 , b = 10 ; System . out . println ( OddDivCount ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int min = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } int max2 = max - min ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int max3 = max - min ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int max4 = max - min ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int max5 = max - min ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int max6 = max - min ;
import java . util . * ; public class GFG { static void printArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . println ( ) ; } static void replacedArray ( int N , int arr [ ] ) { int pos_sum = 0 ; int neg_sum = 0 ; for ( int i = N - 1 ; i >= 0 ; i -- ) { int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum ) ; if ( arr [ i ] > 0 ) pos_sum = pos_sum + arr [ i ] ; else neg_sum = neg_sum + arr [ i ] ; arr [ i ] = Math . abs ( diff ) ; } } public static void main ( String [ ] args ) { int N = 5 ; int arr [ ] = { 1 , - 1 , 2 , 3 , - 2 }
public class GFG { static void printArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . println ( " \n " ) ; } static void replacedArray ( int N , int arr [ ] ) { for ( int i = 0 ; i < N ; i ++ ) { int pos_sum = 0 ; int neg_sum = 0 ; for ( int j = i + 1 ; j < N ; j ++ ) { if ( arr [ j ] > 0 ) pos_sum += arr [ j ] ; else neg_sum += arr [ j ] ; } int diff = Math . abs ( pos_sum ) - Math . abs ( neg_sum ) ; arr [ i ] = Math . abs ( diff )
public class GFG { static int countDivisbleby4 ( String s ) { int n = s . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '4' || s . charAt ( i ) == '8' || s . charAt ( i ) == '0' ) count ++ ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { h = ( s . charAt ( i ) - '0' ) * 10 + ( s . charAt ( i + 1 ) - '0' ) ; if ( h % 4 == 0 ) count = count + i + 1 ; } return count ; } public static void main ( String [ ] args ) { String s = "1" ; System . out . println ( countDivisbleby4 ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= n ) { ans = arr [ i ] ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == k ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " yes " ) ; } else { System . out . println ( " no " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int n2 = sc . nextInt ( ) ; int m2 = sc . nextInt ( ) ; int n1 = sc . nextInt ( ) ; int m1 = sc . nextInt ( ) ; int n2 = sc . nextInt ( ) ; int m1 = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int n1_min = Math . min ( m1 , n1 ) ; int n2_min = Math . min (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int
import java . util . * ; public class GFG { static boolean arraySortedOrNot ( int arr [ ] , int n ) { if ( n == 0 || n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] > arr [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 20 , 23 , 23 , 45 , 78 , 88 } ; int n = arr . length ; if ( arraySortedOrNot ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } if ( n == 1 ) { System . out . println ( 0 ) ; } else { int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { res += ( i - arr [ i ] ) ; } System . out . println ( res ) ; } } } }
import java . util . * ; public class GFG { static void printKDistinct ( int arr [ ] , int size , int KthIndex ) { HashMap < Integer , Integer > vect = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( vect . containsKey ( arr [ i ] ) ) { vect . put ( arr [ i ] , vect . get ( arr [ i ] ) + 1 ) ; } else { vect . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < size ; i ++ ) { if ( vect . containsKey ( arr [ i ] ) ) continue ; else { int KthIndex = KthIndex - 1 ; } if ( KthIndex == 0 ) { return arr [ i ] ; } } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 1 , 3 , 4 , 2 } ; int size = arr . length ; printKDistinct ( arr , size , 2 ) ; } }
public class GFG { static int fib ( int f [ ] , int n ) { f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 ; return f [ n % 60 ] ; } static int findLastDigit ( int n ) { f [ 0 ] = 0 ; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 ; return f [ n % 60 ] ; } static int findLastDigit ( int n ) { int f [ ] = new int [ 61 ] ; f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 ; return f [ n % 60 ] ; } public static void main ( String [ ] args ) { int n = 1 ; System . out . println ( findLastDigit ( n ) ) ; n = 61 ; System . out . println ( findLastDigit ( n ) ) ; n = 7 ; System . out . println ( findLastDigit ( n ) ) ; n = 67 ; System . out
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == b ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = Math . abs ( a [ i ] - b [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math . min ( Math . abs ( a [ i ] - d [ i ] ) , Math . abs ( b [ i ] - d [ i ] ) ) ; ans = Math . min ( ans , min ) ; } System . out . println ( ans ) ; } }
public class GFG { static void countEleLessThanOrEqual ( int arr1 [ ] , int arr2 [ ] , int m , int n ) { for ( int i = 0 ; i < m ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr2 [ j ] <= arr1 [ i ] ) count ++ ; } System . out . print ( count + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 2 , 3 , 4 , 7 , 9 } ; int arr2 [ ] = { 0 , 1 , 2 , 1 , 1 , 4 } ; int m = arr1 . length ; int n = arr2 . length ; countEleLessThanOrEqual ( arr1 , arr2 , m , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; min = arr [ i ] ; } } if ( k == 1 ) { System . out . println ( max ) ; } else if ( k == 2 ) { System . out . println ( min ) ; } else { System . out . println ( max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { ans = arr [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { ans += ( p + i ) * ( p + i ) ; } System . out . println ( ans % p ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int [ ] b2 = { a [ i ] , b [ i ] } ; int [ ] c2 = { c [ i ] , b [ i ] } ; int [ ] ans2 = { c2 , c2 } ; for ( int i = 0 ; i < n ; i ++ ) { ans += b2 [ i ] * ( c [ i ] - i ) * ( b [ i ] - i ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int lps ( String str ) { int n = str . length ( ) ; int [ ] L = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] = 1 ; for ( int i = 0 ; i < n - str . length ( ) ; i ++ ) { for ( int j = i + str . length ( ) - str . length ( ) ; j < n ; j ++ ) { int j = i + str . length ( ) - str . length ( ) ; if ( j == i ) L [ i ] [ j ] = 2 ; else L [ i ] [ j ] = Math . max ( L [ i ] [ j - 1 ] , L [ i
public class GFG { static void printConsecutive ( int last , int first ) { System . out . print ( first + " ▁ " ) ; first += 1 ; for ( int x = first ; x <= last ; x ++ ) { System . out . print ( " ▁ + " ▁ " ) ; } } static void findConsecutive ( int N ) { for ( int last = 1 ; last <= N ; last ++ ) { for ( int first = 0 ; first < last ; first ++ ) { if ( 2 * N == ( last - first ) * ( last + first + 1 ) ) { System . out . print ( N + " ▁ = ▁ " ) ; System . out . printConsecutive ( last , first + 1 ) ; return ; } } } System . out . print ( " - 1" ) ; } public static void main ( String [ ] args ) { int n = 12 ; findConsecutive ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; if ( Math . abs ( a - b ) > 1 ) { ans = " NO " ; } else { ans = " YES " ; } System . out . println ( ans ) ; } }
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) / ( s * s ) ; return ( int ) ans ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) / ( s * s ) ; return ( int ) ans ; } static int NumberOfSquares ( int x , int y ) { int s = __gcd ( x , y ) ; int ans = ( x * y ) / ( s * s ) ; return ( int ) ans ; } public static void main ( String [ ] args ) { int m = 385 ; int n = 60 ; System . out . println ( NumberOfSquares ( m , n ) ) ; } }
import java . util . * ; public class GFG { static boolean isAlphabaticOrder ( String s ) { int n = s . length ( ) ; int c [ ] = new int [ n ] ; Arrays . sort ( s ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] != s . charAt ( i ) ) return false ; } return true ; } public static void main ( String [ ] args ) { String s = " aabbbcc " ; if ( isAlphabaticOrder ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static void printMax ( int arr [ ] , int n , int k ) { int max = 0 ; for ( int i = 0 ; i < n - k + 1 ; i ++ ) max = arr [ i ] ; for ( int j = 1 ; j < k ; j ++ ) { if ( arr [ i + j ] > max ) max = arr [ i + j ] ; } System . out . print ( max + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int k = 3 ; printMax ( arr , n , k ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int x = 0 ; int y = 0 ; while ( x != y ) { x = x + y ; y = y + 1 ; } while ( x != p ) { x = x - p ; y = y - p ; } System . out . println ( x + 1 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + p [ i - 1 ] ; } } int ans = 0 ; for ( int i = 0 ; i <
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
public class GFG { static void pre_process ( String substrings , String s ) { int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { System . out . print ( s . charAt ( j ) ) ; } } } public static void main ( String [ ] args ) { String s = " geek " ; pre_process ( s , s ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; if ( w == 0 && h == 0 ) { break ; } int [ ] [ ] map = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' x ' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { String s = sc . next ( ) ; if ( s . equals ( "0" ) ) break ; int [ ] a = new int [ s . length ( ) ] ; int [ ] b = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = 0 ; b [ i ] = 0 ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' ) { a [ i ] ++ ; } else if ( s . charAt ( i ) == ' B ' ) { b [ i ] ++ ; } else { a [ i ] ++ ; } } int ans = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] > b [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } sc . close ( ) ; } }
public class GFG { static int fact ( int N ) { int product = 1 ; for ( int i = 1 ; i <= N ; i ++ ) product *= i ; return product ; } static int nthTerm ( int N ) { return ( N * N ) * fact ( N ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int longestSubArray ( int arr [ ] , int n ) { boolean isZeroPresent = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { isZeroPresent = true ; break ; } } if ( isZeroPresent ) return n ; return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 0 , 1 , 2 , 0 } ; int n = arr . length ; System . out . println ( longestSubArray ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += ( arr [ i ] - 1 ) * 9 ; } System . out . println ( ans ) ; } }
public class GFG { static int maximumArea ( int l , int b , int x , int y ) { int left , right , above , above , above = 0 , left = 0 , right = 0 ; left = x * b ; right = ( l - x - 1 ) * b ; above = l * y ; above = ( b - y - 1 ) * l ; System . out . println ( maxArea ( left , right ) + Math . max ( above , above ) ) ; return l ; } public static void main ( String [ ] args ) { int l = 8 , b = 8 ; int x = 0 , y = 0 ; maximumArea ( l , b , x , y ) ; } }
import java . util . * ; public class GFG { static int N = 256 ; static int max_distinct_char ( String str , int n ) { int count [ ] = new int [ N ] ; for ( int i = 0 ; i < n ; i ++ ) count [ str . charAt ( i ) ] ++ ; int max_distinct = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( count [ i ] != 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int r = sc . nextInt ( ) ; String t1 = sc . next ( ) ; String t2 = sc . next ( ) ; System . out . println ( f ( n , s , t1 , t2 ) ) ; } } static int f ( int n , String s , int t ) { int r = 0 ; String t1 = s . substring ( 0 , t ) ; String t2 = s . substring ( t ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( t1 . charAt ( i ) == ' R ' || t2 . charAt ( i ) == ' R ' ) { r ++ ; } else { r -- ; } } return r ; } }
public class GFG { static int findNumberOfEvenCells ( int n , int q [ ] [ ] , int size ) { int row [ ] = new int [ n ] ; int col [ ] = new int [ n ] ; int row [ ] = new int [ size ] ; int col [ ] = new int [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { x = q [ i ] [ 0 ] ; y = q [ i ] [ 1 ] ; row [ x - 1 ] += 1 ; col [ y - 1 ] += 1 ; } int r1 = 0 ; r2 = 0 ; c1 = 0 ; c2 = 0 ; for
public class GFG { static void checkType ( int arr [ ] , int n ) { if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] <= arr [ n - 1 ] ) { System . out . print ( " Increasing ▁ " ) ; } else if ( arr [ 0 ] >= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) { System . out . print ( " Decreasing ▁ then ▁ decreasing " ) ; } else if ( arr [ 0 ] <= arr [ 1 ] && arr [ n - 2 ] >= arr [ n - 1 ] ) { System . out . print ( " Decreasing ▁ then ▁ decreasing " ) ; } else { System . out . print ( " Decreasing ▁ then ▁ decreasing " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; checkType ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '10' ) { count ++ ; } } System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int ans = 0 ; if ( c > a || d > b ) { ans = 0 ; } else if ( c < a || d < b ) { ans = 0 ; } else { if ( c > a && d > b ) { ans = Math . min ( c , a * b - d ) ; } else { ans = Math . min ( c , b * a - d ) ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
import java . util . * ; public class GFG { static void rearrange ( int arr [ ] , int n ) { int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < 0 ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j = j + 1 ; } } System . out . println ( arr ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 } ; int n = arr . length ; rearrange ( arr , n ) ; } }
import java . io . * ; public class GFG { static int centered_square_num ( int n ) { return n * n + ( ( n - 1 ) * ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( " % sth ▁ Centered ▁ square ▁ number : " + centered_square_num ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( k == 1 ) { if ( n % 2 == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { if ( n % 2 == 1 && k % 2 == 1 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int maxSubArraySum ( int arr [ ] , int size ) { int max_so_far = arr [ 0 ] ; int curr_max = arr [ 0 ] ; for ( int i = 1 ; i < size ; i ++ ) { curr_max = Math .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } int ans = max - min ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < ans ) { ans = arr [ i ] ; } } System . out . println ( ans ) ; } }
public class GFG { static int find ( int dividend , int divisor , int start , int end ) { if ( start > end ) return ( 0 , dividend ) ; int mid = start + ( end - start ) / 2 ; int n = dividend - divisor * mid ; if ( n > divisor ) start = mid + 1 ; else if ( n == divisor ) mid += 1 ; return ( mid , n ) ; } static int divide ( int dividend , int divisor ) { return find ( dividend , divisor , 1 , dividend ) ; } static int divide ( int dividend , int divisor ) { return find ( dividend , divisor , 1 , dividend ) ; } public static void main ( String [ ] args ) { int dividend = 10 ; divisor = 3 ; int ans = divide ( dividend , divisor ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Math . abs ( arr [ 0 ] - arr [ 1 ] ) ; int max = Math . abs ( arr [ n - 1 ] - arr [ 0 ] ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; count ++ ; } if ( arr [ i ] > max ) { max = arr [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int i = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { arr [ j ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] != arr [ j + 1 ] ) { max = Math . max ( max , arr [ j ] ) ; min = Math . min ( min , arr [ j + 1 ] ) ; } } System . out . println ( max - min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n == 0 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out . println ( 0 ) ; continue ; } if ( n == 1 && m == 0 ) { System . out
public class GFG { static int minSum ( int arr [ ] , int n ) { int sum = arr [ 0 ] ; prev = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] <= prev ) prev = prev + 1 ; else prev = arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 3 , 5 , 6 } ; int n = arr . length ; System . out . println ( minSum ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int findN ( int k ) { if ( k == 0 ) { ans = 3 ; } if ( k == 1 ) ans = 1 ; else if ( k % 4 == 0 ) ans = k - 1 ; else ans = - 1 ; return ans ; } public static void main ( String [ ] args ) { int k = 7 ; int res = findN ( k ) ; if ( res == - 1 ) System . out . println ( " Not ▁ possible " ) ; else System . out . println ( res ) ; } }
import java . util . * ; public class GFG { static int subXOR = 1 ; static int max_ele = arr
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int [ ] [ ] p = new int [ d ] [ g ] ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < g ; j ++ ) { p [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < d ; i ++ ) { for ( int j = 0 ; j < g ; j ++ ) { if ( p [ i ] [ j ] == 0 ) { ans = Math . min ( ans , j + 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum == m ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } if ( arr [ i ] < min ) { min = arr [ i ] ; } } if ( max == min ) { System . out . println ( 0 ) ; } else { System . out . println ( max - min ) ; } } }
public class GFG { static int minAbsDiff ( int n ) { int left = Math . pow ( 2 , floor ( Math . log ( n ) ) ) ; int right = Math . pow ( 2 , floor ( Math . log ( n ) ) ) ; return Math . min ( ( n - left ) , ( right - n ) ) ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( minAbsDiff ( n ) ) ; } }
import java . util . * ; public class GFG { static int LCIS ( int arr1 [ ] , int n , int arr2 [ ] , int m ) { int table [ ] = new int [ m ] ; for ( int j = 0 ; j < m ; j ++ ) table [ j ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int current = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr1 [ i ] == arr2 [ j ] ) { if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ; } if ( arr1 [ i ] > arr2 [
public class GFG { static int countSetBits ( int n ) { int bitCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) bitCount += countSetBitsUtil ( i ) ; return bitCount ; } static int countSetBitsUtil ( int x ) { if ( x <= 0 ) return 0 ; return ( 0 ) ; } static int countSetBits ( int x ) { if ( x <= 0 ) return 0 ; return ( 0 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Total ▁ set ▁ bit ▁ count ▁ is ▁ " + countSetBits ( n ) ) ; } }
import java . util . * ; public class GFG { static void partition ( int arr [ ] , int low , int high ) { int pivot = arr [ low ] ; int i = low - 1 ; int j = high + 1 ; while ( true ) { i ++ ; while ( arr [ i ] < pivot ) { i ++ ; } j -- ; while ( arr [ j ] > pivot ) { j -- ; } if ( i >= j ) { return ; } arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; } } static void quickSort ( int arr [ ] , int low , int high ) { if ( low < high ) { int pivot = arr [ low ] ; quickSort ( arr , low , pivot ) ; quickSort (
import java . util . * ; public class GFG { static void partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = low - 1 ; for ( int j = low ; j < high ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; } } arr [ i + 1 ] = arr [ high ] ; arr [ high ] = arr [ high ] ; } static void quickSort ( int arr [ ] , int low , int high ) { if ( low < high ) { int pivot = arr [ high ] ; quickSort ( arr , low , pivot - 1 ) ; quickSort ( arr , pivot + 1 , high ) ; } } static void printArray ( int arr [ ] ,
import java . util . * ; public class GFG { static int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = - 10 * 9 ; int max_ending_here = 0 ; for ( int i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; } static int minPossibleSum ( int a [ ] , int n , int x ) { int mxSum = maxSubArraySum ( a , n ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; sum = sum - mxSum + mxSum / x ; System .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [
import java . util . * ; public class GFG { static void printArray ( int N , int sum , int K ) { int minSum = ( N * ( N + 1 ) ) / 2 ; int maxSum = ( N * ( N + 1 ) ) - ( N * ( N - 1 ) ) / 2 ; if ( minSum > sum || maxSum < sum ) System . out . print ( " Not ▁ Possible " ) ; else { int arr [ ] = new int [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) arr [ i ] = i ; int sum = minSum ; int i = N ; while ( i >= 1 ) { int x = sum + ( K -
public class GFG { static int MAX = 3 ; static int maxItems ( int x , int y , int z ) { int type1 = x / COST ; x %= COST ; type2 = y / COST ; y %= COST ; type3 = z / COST ; z %= COST ; type4 = min ( x , min ( y , z ) ) ; maxItems = type1 + type2 + type3 + type4 ; return maxItems ; } public static void main ( String [ ] args ) { int x = 4 , y = 5 ; int z = 6 ; System . out . println ( maxItems ( x , y , z ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int ans = 0 ; if ( a == b ) { ans = 1 ; } else if ( a == c ) { ans = 2 ; } else if ( b == d ) { ans = 3 ; } else if ( a == e ) { ans = 4 ; } else if ( a == d ) { ans = 2 ; } else { ans = 0 ; } System . out . println ( ans ) ; } }
public class GFG { static void line ( int x0 , int y0 ) { int c = 2 * y0 * x0 ; System . out . println ( " { " + c + " x " + " ▁ " + " y " + " } ; } public static void main ( String [ ] args ) { int x0 = 4 , y0 = 3 ; line ( x0 , y0 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }
import
import java . util . * ; public class GFG { static boolean isAnyNotPalindrome ( String s ) { HashSet < Character > unique = new HashSet < Character > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) unique . add ( s . charAt ( i ) ) ; if ( unique . size ( ) > 1 ) return true ; else return false ; } public static void main ( String [ ] args ) { String s = " aaaaab " ; if ( isAnyNotPalindrome ( s ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class GFG { static int findMajority ( int arr [ ] , int n ) { return arr [ n / 2 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = arr . length ; System . out . println ( findMajority ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == s ) { ans ++ ; } } if ( ans > 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
public class GFG { static int countSubArrays ( int arr [ ] , int n , int K ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j <= n ; j ++ ) { int bitwise_or = 0 ; for ( int k = i ; k < j + 1 ; k ++ ) { bitwise_or = bitwise_or | arr [ k ] ; } if ( bitwise_or >= K ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 5 } ; int n = arr . length ; int k = 6 ; System . out . println ( countSubArrays ( arr , n , k ) ) ; } }
public class GFG { static boolean canBeEqual ( int a , int b , int c , int k ) { int arr [ ] = new int [ 3 ] ; arr [ 0 ] = a ; arr [ 1 ] = b ; arr [ 2 ] = c ; arr [ 3 ] = k ; sort ( ) ; int diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] ; k = k - diff ; if ( k < 0 || k % 3 != 0 ) return false ; return true ; } public static void main ( String [ ] args ) { int a1 = 6 , b1 = 3 ; int c1 = 2 ; int k1 = 7 ; if ( canBeEqual ( a1 , b1 , c1 , k1 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = a [ i ] [ j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int [ ] a = new int [ 26 ] ; int [ ] b = new int [ s . length ( ) ] ; int [ ] c = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s . charAt ( i ) - ' a ' ; b [ i ] = s . charAt ( i ) - ' a ' ; c [ i ] = s . charAt ( i ) - ' a ' ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( a [ i ] == 0 ) { System . out . println ( - 1 ) ; return ; } if ( b [ a [ i ] ] == 0 ) { System . out . println ( - 1 ) ; return ; } if ( c [ i ] == 0 ) { System . out . println ( - 1 ) ; return ; } } int ans = 0 ; for ( int
import java . util . * ; public class GFG { static int lcsOf3 ( int X , int Y , int Z , int m , int n , int o ) { int L [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = 0 ; k <= m ; k ++ ) { if ( i == 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . abs ( a [ i ] - a [ i - 1 ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean isSpiltPossible ( int n , int a [ ] ) { int sum = 0 ; int c1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; if ( a [ i ] == 1 ) c1 ++ ; } if ( sum % 2 == 0 ) return false ; if ( c1 > 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 3 ; int a [ ] = { 1 , 1 , 2 } ; if ( isSpiltPossible ( n , a ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = 0 ; if ( n == 1 ) { ans = m ; } else { ans = ( m + 1 ) * n ; } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static void printKPFNums ( int [ ] A , int B , int K ) { boolean [ ] prime = new boolean [ B + 1 ] ; Arrays . fill ( prime , true ) ; for ( int p = 2 ; p * p <= B ; p ++ ) { if ( p_factors [ p ] == 0 ) { for ( int i = p ; i <= B ; i += p ) { prime [ i ] = false ; } } } for ( int i = A ; i <= B ; i += A ) { if ( prime [ i ] ) { System . out . print ( i + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int [ ] A = { 14 , 17 , 36 , 64 , 128 , 256 , 512 } ; int B = 18 ; int K = 2 ; printKPFNums ( A , B , K ) ; } }
public class GFG { static void reverserWords ( String str ) { int st = str . charAt ( 0 ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) != ' ▁ ' ) st ++ ; else { while ( st > 0 ) { System . out . print ( st -- ) ; st -- ; } System . out . print ( str . charAt ( i ) ) ; } } } public static void main ( String [ ] args ) { String str = " Geeks ▁ for ▁ Geeks " ; reverserWords ( str ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { ans = i ; break ; } } if ( ans == - 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ )
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == 0 ) { System . out . println ( "0" ) ; return ; } } System . out . println ( ans [ n - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == k ) { ans = i ; break ; } } if ( ans == - 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } }
public class GFG { static void findNthTerm ( int n ) { if ( n % 2 == 0 ) { n /= 2 ; System . out . println ( 3 * n - 1 ) ; } else { n = ( n / 2 ) + 1 ; System . out . println ( 2 * n - 1 ) ; } } public static void main ( String [ ] args ) { int N = 4 ; findNthTerm ( N ) ; } }
public class GFG { static int countNonIncreasing ( int arr [ ] , int n ) { int cnt = 0 ; int len = 1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i + 1 ] >= arr [ i ] ) len ++ ; else { cnt += ( ( len + 1 ) * len ) / 2 ; len = 1 ; } } if ( len > 1 ) cnt += ( ( len - 1 ) * len ) / 2 ; return cnt ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 7 , 1 , 1 } ; int n = arr . length ; System . out . println ( countNonIncreasing ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int maximize ( int A1 [ ] , int A2 [ ] , int n , int x , int y ) { int c [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = A2 [ i ] - A1 [ i ] ; sum += A1 [ i ] ; } c [ 0 ] = A2 [ 0 ] ; int maxi = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { sum += c [ i ] ; if ( i + 1 >= ( n - x ) ) maxi = Math . max ( sum , maxi ) ; } return maxi ; } public static void main ( String [ ] args ) { int A1 [ ] = { 1 , 2 , 3 , 4 , 5 } ; int A2 [ ] = { 5 , 4 , 3 , 2 , 1 } ; int n = 5 ; int x = 3 , y = 3 ; System . out . println ( maximize ( A1 , A2 , n , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; if ( x / 1000 > 0 ) System . out . println ( x / 1000 + 1 ) ; else if ( x / 100 > 0 ) System . out . println ( x / 100 + 6 ) ; else if ( x / 10 > 0 ) System . out . println ( x / 10 + 1 ) ; else System . out . println ( x ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; int [ ] [ ] b = new int [ n ] [ n ] ; int [ ] c = new int [ n ] [ n ] ; int [ ] p = new int [ n ] ; int [ ] v = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ i ] = sc . nextInt ( ) ; b [ i ] [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; p [ i ] = sc . nextInt ( ) ; v [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ m ] [ n ] ; for ( int i = 0 ; i < m
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int r1 = sc . nextInt ( ) ; int r2 = sc . nextInt ( ) ; int c1 = sc . nextInt ( ) ; int c2 = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int count = 0 ; if ( r1 == r2 && c1 == c2 ) { count = 0 ; } else if ( r1 == r2 && c1 == c2 ) { count = 1 ; } else if ( r1 == r2 && c1 == c2 ) { count = 2 ; } else if ( r1 == r2 && c1 == c2 ) { count = 0 ; } else if ( r1 == r2 && c1 == c2 ) { count = 1 ; } else if ( r1 == r2 && c1 == c2 ) { count = 2 ; } else if ( r1 == r2 && c1 == c2 ) { count = 0 ; } else if ( r1 == r2 && c1 == c2 ) { count = 1 ; } else if ( r1 == r2 && c1 == c2 ) { count = 2 ; } else if ( r1 == r2
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i
import java . util . * ; public class GFG { static boolean startsWith ( String str , String pre ) { int len = str . length ( ) ; int preLen = pre . length ( ) ; int i = 0 ; int j = 0 ; while ( i < len && j < preLen ) { if ( str . charAt ( i ) != pre . charAt ( j ) ) return false ; i ++ ; j
public class GFG { static void printCombination ( int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( i % 3 != 0 ) { for ( int j = 1 ; j < n ; j ++ ) { if ( j % 3 != 0 && ( i + j ) == n ) { System . out . print ( i + " ▁ " + j + " ▁ " + i ) ; return ; } } } } } public static void main ( String [ ] args ) { int n = 233 ; printCombination ( n ) ; } }
import java . io . * ; public class GFG { static int countIntegralSolutions ( int n ) { int result = 0 ; for ( int i = 0 ; i <= n ; i ++ ) for ( int j = n + 1 ; j <= n ; j ++ ) { for ( int k = n + 1 ; k <= n ; k ++ ) { if ( i + j + k == n ) result ++ ; } } return result ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntegralSolutions ( n ) ) ; } }
import java . io . * ; public class GFG { static int N = 10 ; static int digitSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % TEN ; n /= TEN ; } return sum ; } static int getNthTerm ( int n ) { int sum = digitSum ( n ) ; if ( sum % TEN == 0 ) return ( n * TEN ) ; int extra = TEN - ( sum % TEN ) ; return ( ( n * TEN ) + extra ) ; } static int firstNTerms ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( NthTerm ( i ) + " ▁ " ) ; return ( ( n * N ) + ( n * TEN ) + extra ) ; } static int firstNTerms ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( NthTerm ( i ) + " ▁ " ) ; return ( n * N ) + ( n * TEN ) ; } public static void main ( String [ ] args ) { int n = 10 ; int firstNTerms ( int n ) ; int extra = TEN - ( sum % TEN ) ; System . out . println ( firstNTerms ( n ) + " ▁ " + ( n
public class GFG { static int power ( int x , int a ) { int res = 1 ; while ( a != 0 ) { if ( a % 2 == 0 ) res = res * x ; x = x * x ; a >>= 1 ; } return res ; } static int breakInteger ( int N ) { if ( N == 2 ) return 1 ; if ( N == 3 ) return 2 ; int maxProduct = 0 ; if ( N % 3 == 1 ) maxProduct = power ( 3 , int ( N / 3 ) - 1 ) ; return maxProduct ; } public static void main ( String [ ] args ) { int N = 10 ; System . out . println ( breakInteger ( N ) ) ; } }
import java . util . * ; public class Main { public static void main
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; System . out . println ( s . charAt ( 4 ) == '1' ? "1" : "0" ) ; } }
import java . util . * ; public class GFG { static void firstnonrepeating ( char [ ] str ) { Queue < Character > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < str . length ; i ++ ) { q . add ( str [ i ] ) ; charCount [ str [ i ] - ' a ' ] ++ ; while ( q . empty ( ) ) { if ( charCount [ str [ i ] - ' a ' ] > 1 ) { q . get ( ) ; } else { System . out . print ( q . poll ( ) + " ▁ " ) ; break ; } } if ( q . empty ( ) ) System . out . print ( - 1 ) ; } System . out . print ( ) ; } public static void main ( String [ ] args ) { char [ ] str = " aabc " . toCharArray ( ) ; firstnonrepeating ( str ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c
public class GFG { static int solve ( int n , int m , int obstacles , int rangee ) { int val = Math . min ( n , m ) ; int rangee [ ] = new int [ obstacles - 1 ] ; int c = 1 ; for ( int i = 0 ; i < obstacles - 1 ; i ++ ) { rangee [ i ] = 2 * rangee [ i ] ; val -= rangee [ i ] ; if ( val <= 0 ) return c ; else c += 1 ; } if ( val > 0 ) return - 1 ; return - 1 ; } public static void main ( String [ ] args ) { int n = 4 ; int m = 5 ; int obstacles = 3 ; int rangee [ ] = new int [ n ] ; int [ ] obstacles = new int [ n ] ; System . out . println ( solve ( n , m , obstacles , rangee ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = 0 ; int j = 0 ; int k = 0 ; int l = s . length ( ) ; while ( i < j ) { if ( s . charAt ( i ) == ' + ' ) { k ++ ; } else { l -- ; } i ++ ; j = k ; } if ( l == s . length ( ) ) { System . out . println ( " U " ) ; } else if ( l == s . length ( ) ) { System . out . println ( " M " ) ; } else { System . out . println ( " I " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt (
import
import java . util . * ; public class GFG { static int flipSign ( int a ) { int neg = 0 ; int tmp = 1
public class GFG { static int factorial ( int n ) { int i = n ; int fact = 1 ; while ( n / i != n ) fact = fact * i ; return fact ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial ▁ of ▁ " + num + " ▁ is ▁ " + factorial ( num ) ) ; } }
public class GFG { static int CntDivbyX ( int arr [ ] , int n , int x ) { int number = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { number = number * 2 + arr [ i ] ; if ( ( number % x == 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 1 , 0 , 1 , 0 } ; int n = arr . length ; int x = 2 ; System . out . println ( CntDivbyX ( arr , n , x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int c = 0 ; while ( true ) { if ( b [ i ] == 0 ) { c ++ ; } else { ans += c * ( b [ i ] - 1 ) / 2 ; b [ i ] = 0 ; } i ++ ; } } System . out . println ( ans ) ; } }
public class GFG { static int min_noOf_operation ( int arr [ ] , int n , int k ) { int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { noOfSubtraction = 0 ; if ( arr [ i ] > arr [ i - 1 ] ) noOfSubtraction = ( arr [ i ] - arr [ i - 1 ] ) / k ; if ( ( arr [ i ] - arr [ i - 1 ] ) % k != 0 ) noOfSubtraction += 1 ; arr [ i ] = arr [ i ] - k * noOfSubtraction ; res = res + noOfSubtraction ; } return res + noOfSubtraction ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 2 , 3 } ; int N = arr . length ; int k = 5 ; System . out . println ( min_noOf_operation ( arr , N , k ) ) ; } }
public class GFG { static int CountSubSet ( int arr [ ] , int n , int X ) { int N = 2 * n ; int count = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i & ( 1 << j ) ) { if ( arr [ j ] == X ) count ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 5 , 6 , 7 } ; int X = 5 ; int n = arr . length ; System . out . println ( CountSubSet ( arr , n , X ) ) ; } }
import
import
public class GFG { static int smallestIndexsum ( int arr [ ] , int n ) { int i = n - 1 ; while ( i >= 0 && arr [ i ] % 2 == 1 ) i -- ; int sum = 0 ; for ( int j = 0 ; j < i + 1 ; j ++ ) sum += arr [ j ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 6 , 3 , 3 } ; int n = arr . length ; System . out . println ( smallestIndexsum ( arr , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int y1 = sc . nextInt ( ) ; int m1 = sc . nextInt ( ) ; int d1 = sc . nextInt ( ) ; int d2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int m2 = sc . nextInt ( ) ; int d2 = sc . nextInt ( ) ; int res = Math . abs ( y2 - y1 ) ; System . out . println ( Math . abs ( d2 - d1 ) ) ; sc . close ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int q = 0 ; int c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' Q ' ) { q ++ ; } else if ( s . charAt ( i ) == ' A ' ) { c ++ ; } else if ( s . charAt ( i ) == ' C ' ) { c ++ ; } } System . out . println ( q * c ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int m = s / n ; if ( s % n == 0 ) { System . out . println ( m ) ; } else { System . out . println ( m + 1 ) ; } } }
import java . util . * ; public class GFG { static int multiply ( int v [ ] , int x ) { int carry = 0 ; int size = v . length ; for ( int i = 0 ; i < size ; i ++ ) { int res = carry + v [ i ] * x ; v [ i ] = res % 10 ; carry = res / 10 ; } while ( carry != 0 ) { v . append ( carry % 10 ) ; carry /= 10 ; } while ( carry != 0 ) { v . append ( carry % 10 ) ; carry /= 10 ; } return carry ; } static int findSumOfDigits ( int n ) { v = new int [ n + 1 ] ; v . add ( 1 ) ; for ( int i = 1 ; i <= n ; i ++ ) { int res = carry + v [ i ] * x ; v [ i ] = res % 10 ; } return v ; } public static void main ( String [ ] args ) { int n = 1000 ; System . out . println ( findSumOfDigits ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arrInner = arr [ l - 1 ] ; int [ ] arrInner = arrInner ; for ( int j = l ; j < r ; j ++ ) { if ( arrInner [ j ] == 0 ) { ans [ j ] = arrInner [ j - 1 ] ; } } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { max = Math . max ( max , arr [ i + 1 ] - arr [ i ] ) ; } System . out . println ( max ) ; } }
public class GFG { static int pell ( int n ) { if ( n <= 2 ) return n ; return ( 2 * pell ( n - 1 ) + pell ( n - 2 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pell ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int i = 1 ; int j = n * n ; while ( i <= j ) { System . out . print ( i + " ▁ " ) ; i ++ ; j -- ; } System . out . println ( ) ; } }
import java . util . * ; public class GFG { static void binary_search ( int arr [ ] , int low , int high , int ele ) { while ( low < high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == ele ) return mid ; else if ( arr [ mid ] > ele ) high = mid ; else low = mid + 1 ; } return - 1 ; } static void printSmall ( int arr [ ] , int asize , int n ) { int copy_arr [ ] = new int [ asize ] ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < asize ; i ++ ) { if ( binary_search ( copy_arr , low , 0 , high = n , ele = arr [ i ] ) > - 1 ) System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 ,
public class GFG { static int countNumbers ( int n ) { int k = 0 ; int count = 0 ; while ( n > 0 ) { if ( ( n & 1 ) == 0 ) count ++ ; k ++ ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int n = 11 ; System . out . println ( countNumbers ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; min = i ; } } System . out . println ( max * min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( a == b ) { ans = Math . min ( ans , c ) ; } else if ( a == c ) { ans = Math . min ( ans , b ) ; } else if ( b == d ) { ans = Math . min ( ans , c ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int MAX = 26 ; static int updateFreq ( String str , int freq [ ] ) { int len = str . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { freq [ str . charAt ( i ) - ' a ' ] ++ ; } int pattFreq [ ] = new int [ MAX ] ; updateFreq ( str . charAt ( 0 ) - ' a ' ) ; int pattFreq [ ] = new int [ MAX ] ; updateFreq ( pattFreq , pattFreq ) ; int ans = 10 * 9 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( pattFreq [ i ] == 0 ) continue ; ans = Math . min ( ans , strrFreq [ i ] / pattFreq [ i ] ) ; } return ans ; } static int maxCount ( String str , int patt ) { int strrFreq [ ] = new int [ MAX ] ; updateFreq ( strrFreq , strrFreq ) ; int pattFreq [ ] = new int [ MAX ] ; updateFreq ( pattFreq , patt
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' | ' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int L = sc . nextInt ( ) ; int R = sc . nextInt ( ) ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ R + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= R ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j ] ; } } dp [ n ] [ R ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= R ; j ++ ) { dp
public class GFG { static int wastedWater ( int V , int M , int N ) { float amt_per_min = M - N ; float time_to_fill = V / amt_per_min ; float wasted_amt = N * time_to_fill ; return wasted_amt ; } public static void main ( String [ ] args ) { int V = 700 ; int M = 10 ; int N = 3 ; System . out . println ( wastedWater ( V , M , N ) ) ; V = 1000 ; M = 100 ; N = 50 ; System . out . println ( wastedWater ( V , M , N ) ) ; V = 1000 ; M = 100 ; N = 50 ; System . out . println ( wastedWater ( V , M , N ) ) ; } }
public class GFG { static int maxSubStr ( String str , int n ) { int count0 = 0 ; int count1 = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str . charAt ( i ) == '0' ) count0 ++ ; else count1 ++ ; if ( count0 == count1 ) cnt ++ ; } if ( count0 != count1 ) return - 1 ; return cnt ; } public static void main ( String [ ] args ) { String str = "0100110101" ; int n = str . length ( ) ; System . out . println ( maxSubStr ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int max = Math . max ( a , b ) ; int min = Math . min ( a , b ) ; int ans = max - min ; if ( ans < 0 ) ans = 0 ; System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int findS ( String s ) { int _sum = 0 ; int n = 1 ; while ( _sum < s . length ( ) ) { _sum += n ; n ++ ; } n -= 1 ; if ( _sum == s ) return n ; return - 1 ; } public static void main ( String [ ] args ) { String s = "15" ; int n = findS ( s ) ; if ( n == - 1 ) System . out . println ( " - 1" ) ; else System . out . println ( n ) ; } }
import java . util . * ; public class GFG { static int maximumAbsolute ( int arr [ ] , int n ) { int mn = 10 * 9 ; int mx = - 10 * 9 ; int mx = - 10 * 9 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i > 0 && arr [ i ] == - 1 && arr [ i - 1 ] != - 1 ) mn = Math . min ( mn , arr [ i - 1 ] ) ; mx = Math . max ( mx , arr [ i + 1 ] ) ; } if ( i < n - 1 && arr [ i ] == -
public class GFG { static int N = 3 ; static int countStrings ( int N ) { int dp [ ] [ ] = new int [ N + 1 ] [ 3 ] ; dp [ 1 ] [ 0 ] = 1 ; dp [ 1 ] [ 1 ] = 1 ; dp [ 1 ] [ 2 ] = 0 ; for ( int i = 2 ; i <= N ; i ++ ) dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD ; dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] % MOD ; dp [ i ] [ 2 ] = dp [ i - 1 ] [ 1 ] % MOD ; return dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( countStrings ( N ) ) ; } }
import java . util . * ; public class GFG { static int longest_subseq ( int n , int k , String s ) { int dp [ ] = new int [ 26 ] ; int max_length = 0 ; int max_length = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int curr = s . charAt ( i ) - ' a ' ; int lower = Math . min ( 26 , curr + k ) ; for ( int j = lower ; j <= upper ; j ++ ) { dp [ i ] = Math . max ( dp [ i ] , Math . max ( dp [ i ] , max_length [ j ] ) ) ; max_length [ curr ] = Math . max ( dp [ i ] , max_length [ curr ] ) ; } max_length [ curr ] = Math . max ( dp [ i ] , max_length [ curr ] ) ; } return max_length ; } static void main ( ) { String s = " geeksforgeeks " ; int n = s . length ( ) ; int k = 3 ; System . out . println ( longest_subseq ( n , k , s ) ) ; } }
public class GFG { static int longestFibonacciSubarray ( int n , int a [ ] ) { if ( n <= 2 ) return n ; int Len = 2 ; int mx = - 10 ** 9 ; for ( int i = 2 ; i < n ; i ++ ) { if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) Len ++ ; else Len = 2 ; mx = Math . max ( mx , mx ) ; } return mx ; } public static void main ( String [ ] args ) { int n = 5 ; int a [ ] = { 2 , 4 , 6 , 10 , 2 } ; System . out . println ( longestFibonacciSubarray ( n , a ) ) ; } }
import java . util . * ; public class GFG { static int minimumSubarrays ( int ar [ ] , int n ) { int se = new int [ n ] ; int cnt = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( se . count ( ar [ i ] ) == 0 ) se . ++ ; else cnt ++ ; se . clear ( ) ; se . append ( ar [ i ] ) ; } return cnt ; } public static void main ( String [ ] args ) { int ar [ ] = { 1 , 2 , 1 , 3 , 4 , 2 , 4 , 4 } ; int n = ar . length ; System . out . println ( minimumSubarrays ( ar , n ) ) ; } }
import java . util . * ; public class GFG { static boolean check ( String s ) { int freq [ ] = new int [ 10 ] ; while ( s != 0 ) { int r = s % 10 ; s = s / 10 ; freq [ r ] ++ ; } int xor = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) xor ^= freq [ i ] ; if ( xor == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { String s = 122233 ; if ( check ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == a ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int MAXN = 1000005 ; static
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( count == n ) { System . out . println ( " - 1" ) ; } else { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { System . out . println ( i + " ▁ " + i + " ▁ " + i ) ; break ; } } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( dp [ i ] == 1 ) { continue ; } dp [ i ] = ( dp [ i - 1 ] + c [ i ] ) % m ; } System . out . println ( dp [ n ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { System . out . println ( " YES " ) ; flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } } }
import java . util . * ; public class GFG { static int times ( int steps [ ] , int n ) { int current_level = 0 ; int previous_level = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { previous_level = current_level ; current_level = current_level + steps [ i ] ; if ( ( previous_level < 0 && current_level >= 0 ) || ( previous_level > 0 && current_level <= 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int steps [ ] = { 1 , - 1 , 0 , 0 , 1 , 1 , - 3 , 2 } ; int n = steps . length ; System . out . println ( times ( steps , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i <
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum / 1000 ) ; } }
import java . util . * ; public class GFG { static int smallest ( String s ) { int l = s . length ( ) ; int ans = " " ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i + 1 ) ) { for ( int j = 0 ; j < l ; j ++ ) { if ( i != j ) ans += s . charAt ( j ) ; } return ans ; } } return ans ; } public static void main ( String [ ] args ) { String s = " abcda " ; System . out . println ( smallest ( s ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( x == y ) { ans = 1 ; } else if ( x == y ) { ans = 2 ; } else if ( x == y ) { ans = 3 ; } else if ( x == y ) { ans = 4 ; } else if ( x == y ) { ans = 5 ; } else if ( x == y ) { ans = 6 ; } else if ( x == y ) { ans = 7 ; } else if ( x == y ) { ans = 8 ; } else if ( x == y ) { ans = 9 ; } else if ( x == y ) { ans = 10 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int FindMinNumber ( int arr [ ] , int n , int k ) { int i = 0 ; int j = 0 ; int min_num = 10 * 9 ; while ( i < n ) { sum = sum + arr [ i ] ; if ( sum == k ) { min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; found = true ; } else if ( sum > k ) { while ( sum > k ) { sum = sum - arr [ j ] ; j ++ ; } if ( sum == k ) min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; if ( sum == k ) min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) ; } i ++ ; } if ( found ) return min_num ; return - 1 ; } public static
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { ans ++ ; } } System . out . println ( ans ) ; } }
public class GFG { static void nthPalindrome ( int n , int k ) { if ( k % 2 == 1 ) { int temp = k / 2 ; int } else { int temp = k / 2 - 1 ; int palindrome = palindrome + n - 1 ; System . out . print ( palindrome + " ▁ " ) ; if ( k % 2 == 1 ) palindrome = palindrome / 10 ; while ( palindrome != 0 ) System . out . print ( palindrome % 10 + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 6
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ;
public class GFG { static int MAX = 10000 ; static int hashTable [ ] = new int [ MAX ] ; static int minOperations ( int arr [ ] , int n ) { Arrays . sort ( hashTable ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hashTable [ arr [ i ] ] == 0 ) { hashTable [ arr [ i ] ] = 0 ; } } int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( hashTable [ arr [ i ] ] == 0 ) { hashTable [ arr [ i ] ] = 0 ; } res += 1 ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 6 , 2 , 8 , 7 , 21 , 24 , 49 , 44 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int min = Math . min ( a , Math . min ( b , c ) ) ; int max = Math . max ( a , Math . max ( b , c ) ) ; if ( min > max ) { System . out . println ( 0 ) ; } else if ( min < b && max > b ) { System . out . println ( b - min + 1 ) ; } else if ( min == b && max == c ) { System . out . println ( 0 ) ; } else { System . out . println ( 0 ) ; } } }
import java . util . * ; public class GFG { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static int compute ( int n ) { int denom = 1 ; int denom = 1 ; for ( int d = 10 ; d > 0 ; d -- ) { for ( int n = 10 ; n > d ; n = n / 10 ; n = n % 10 ; if ( n == d && n0 * d == n * d ) denom *= n ; } return denom / gcd ( denom , denom ) ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int countOfOddPascal ( int n ) { int c = countSetBits ( n ) ; return Math . pow ( 2 , c ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( countOfOddPascal ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int max = Math . max ( x * y , n * m ) ; int min = Math . min ( x * y , n * m ) ; System . out . println ( max - min * m + min * min ) ; } } }
import java . util . * ; public class GFG { static int minSwaps ( int arr [ ] ) { int n = arr . length ; Arrays . sort ( arr ) ; int [ ] ans = new int [ n ] ; Arrays . sort ( arr ) ; int j = i ; while ( j < n ) { int vis [ j ] = new int [ n ] ; j = arrpos [ j ] [ 0 ] ; cycle_size ++ ; } if ( cycle_size > 0 ) ans += ( cycle_size - 1 ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 4 , 3 , 2 } ; System . out . println ( minSwaps ( arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { sum += i ; } } System . out . println ( sum ) ; } }
public class GFG { static void findWeights ( int X ) { int sum = 0 ; int power = 0 ; while ( sum < X ) { sum = ( sum * 3 ) - 1 ; sum /= 2 ; power ++ ; } int ans = 1 ; for ( int i = 1 ; i <= power ; i ++ ) { System . out . print ( ans + " ▁ " ) ; ans = ans * 3 ; } } public static void main ( String [ ] args ) { int X = 2 , findWeights ( int X ) ; System . out . println ( "1 ▁ " ) ; findWeights ( X ) ; } }
import java . util . * ; public class GFG { static void addToArrayForm ( int A [ ] , int K ) { int v [ ] = new int [ A . length ] ; int ans = 0 ; int i = 0 ; for ( i = 0 ; i < A . length - 1 ; i ++ ) { int my = A [ i ] + ( K % 10 ) ; if ( my > 9 ) { rem = 1 ; v [ i ] = my % 10 ; } else { v [ i ] = my ; rem = 0 ; } K = K / 10 ; } while ( K > 0 ) { int my = ( K % 10
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( dp [ i ] [ j ] != 0 ) { System . out . print ( " ▁ " ) ; } else { System . out . print ( " ▁ " ) ; } } System . out . println ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] room = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { room [ arr [ i ] ] = n - arr [ i ] ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( room [ arr [ i ] ] == 0 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int max = Math . max ( a , b ) ; int min = Math . min ( a , b ) ; if ( max == min ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static void precisionCompute ( int x , int y , int n ) { if ( y == 0 ) { System . out . print ( " Infinite " ) ; return ; } if ( x == 0 ) { System . out . print ( " Infinite " ) ; return ; } if ( ( ( x > 0 ) && ( y < 0 ) ) || ( ( x < 0 ) && ( y > 0 ) ) ) { System . out . print ( " - " , end = " ) ; if ( x <= 0 ) x = - x ; if ( y <= 0 ) y = - y ; } int d = x / y ; for ( int i = 0 ; i < n + 1 ; i ++ ) { System
import java . util . * ; public class GFG { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return g
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0
import java . util . * ; public class GFG { static void hollowSquare ( int rows ) { for ( int i = 1 ; i <= rows ; i ++ ) { if ( i == 1 || i == rows ) { for ( int j = 1 ; j <= rows ; j ++ ) { System . out . print ( " * " ) ; } } else { for ( int j = 1 ; j <= rows ; j ++ ) { if ( j == 1 || j == rows ) System . out . print ( " * " ) ; else System . out . print ( " ▁ " ) ; } System . out . print ( ) ; } System . out . println ( ) ; } } static void printPattern ( int rows ) { for ( int i = 1 ; i <= rows ; i ++ ) { for ( int j = 1 ; j <= rows ; j ++ ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System .
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( a <= x && x <= b ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int findLargest ( int arr [ ] , int n ) { int gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) gcd = __gcd ( arr [ i ] , gcd ) ; return gcd ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 6 , 9 } ; int n = arr . length ; System . out . println ( findLargest ( arr , n ) ) ; } }
public class GFG { static void findWinner ( int n ) { if ( ( n - 1 ) % 6 == 0 ) System . out . print ( " Second ▁ Player ▁ wins ▁ the ▁ game " ) ; else System . out . print ( " First ▁ Player ▁ wins ▁ the ▁ game " ) ; } public static void main ( String [ ] args ) { int n = 7 ; findWinner ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; a [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] [ 0 ] = sc . nextInt ( ) ; b [ i ] [ 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; a [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] [ 0 ] = sc . nextInt ( ) ; b [ i ] [ 1
public class GFG { static void getElements ( int a , int [ ] arr , int n ) { int [ ] elements = new int [ n + 1 ] ; elements [ 0 ] = a ; for ( int i = 1 ; i <= n ; i ++ ) { elements [ i + 1 ] = arr [ i ] ^ elements [ i ] ; } for ( int i = 0 ; i < n + 1 ; i ++ ) { System . out . print ( elements [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 2 , 6 , 1 } ; int n = arr . length ; int a = 5 ; getElements ( a , arr , n ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( n % 2 == 0 ) { System . out . println ( sum ) ; } else { System . out . println ( sum - 1 ) ; } } }
import java . util . * ; public class GFG { static void printRepeating ( int arr [ ] , int size ) { int S = 0 ; int P = 1 ; int n = size - 2 ; for ( int i = 0 ; i < size ; i ++ ) { S = S + arr [ i ] ; P = P * arr [ i ] ; } S = S - n * ( n + 1 ) / 2 ; P = P / fact ( n ) ; System . out . println ( " The ▁ two ▁ repeating ▁ elements ▁ are ▁ : ▁ " + ( int ) ( x ) + " ▁ & ▁ " + ( int ) ( y ) ) ; } static int fact ( int n ) { if ( n == 0 ) return 1 ; else return ( n * fact ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( x [ i ] - x [ j ] >= 0 ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + 2 * dp [ i - 1 ] [ j ] ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + 2 * dp [ i - 1 ] [ j ] ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + 2 * dp [ i - 1 ] [ j ] ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) continue
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next (
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; if ( s . length ( ) > t . length ( ) ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { max = Math . max ( max , arr [ i ] * arr [ i + 1 ] ) ; } System . out . println ( max ) ; } } }
import java . util . * ; public class GFG { static int __gcd ( int x , int y ) { if ( x > y ) return __gcd ( x , y ) ; else return __gcd ( x , y ) ; } static int findLCM ( int a , int b ) { return ( a * b ) / __gcd ( a , b ) ; } static int rangeDivisor ( int m , int n , int a , int b ) { int lcm = findLCM ( a , b ) ; int a_divisor = __gcd ( a , b ) ; int gcd = __gcd ( n / lcm - ( m - 1 ) / lcm ) ; int ans = __gcd ( n / lcm -
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] arr = s . split ( " " ) ; int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] . equals ( t ) ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int smallestKFreq ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } int res = Integer . MAX_VALUE ; res = Math . max ( smallestKFreq ( arr , n , k ) ) ; return res != res ? res : - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 1 , 3 , 1 } ; int k = 2 ; int n = arr . length ; System . out . println ( smallestKFreq ( arr , n , k ) ) ; } }
import java . util . * ; public class GFG { static boolean areVowelsInOrder ( String s ) { int n = s . length ( ) ; int c = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' e ' || s . charAt ( i ) == ' i ' || s . charAt ( i ) == ' o ' || s . charAt ( i ) == ' u ' ) { if ( s . charAt ( i ) < c ) return false ; else c = s . charAt ( i ) ; } } return true ; } public static void main ( String [ ] args ) { String s = " aabbbddeecc " ; if ( areVowelsInOrder ( s ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] > a [ j - 1 ] + 1 ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + 1 ; } else { dp [ i ] [ j ] = dp [ i - 1 ]
public class GFG { static int countOfLetters ( String str ) { int letter = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( ( str . charAt ( i ) >= ' A ' && str . charAt ( i ) <= ' Z ' ) || ( str . charAt ( i ) >= ' a ' && str . charAt ( i ) <= ' z ' ) ) letter ++ ; } return letter ; } static int check ( String str ) { if ( countOfLetters ( str ) == countOfNumbers ( str ) ) return " Yes " ; else return " No " ; } static void countOfNumbers ( String str ) { int number = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) >= ' A ' && str . charAt ( i ) <= ' Z ' ) number ++ ; } return ; } public static void main ( String [ ] args ) { String str = " GeeKs
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( x == 1 || x == 2 * n ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } System . out . println ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( i + " ▁ " ) ; } System .
public class GFG { static int MAX = 100001 ; static int perfectDivisors [ ] = new int [ MAX ] ; static void precomputeCounts ( ) { for ( int i = 1 ; i * i < MAX ; i ++ ) { for ( int j = i * i ; j < MAX ; j += i * i ) perfectDivisors [ j ] += 1 ; } } static int countPerfectDivisors ( int n ) { return perfectDiv [ n ] ; } public static void main ( String [ ] args ) { precomputeCounts ( ) ; int n = 16 ; System . out . println ( " Total ▁ perfect ▁ divisors ▁ of ▁ " + n + " = ▁ " + countPerfectDivisors ( n ) ) ; n = 12 ; System . out . println ( " Total ▁ perfect ▁ divisors ▁ of ▁ " + n + " = ▁ " + countPerfectDivisors ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] * b [ i ] ; } System . out . println ( sum ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) { System . out . println ( i + 1 ) ; break ; } } } }
public class GFG { static float cal_IST ( float h , float r ) { float IST = ( float ) ( h * r * 1.0 ) / 360 ; float IST = ( float ) ( IST - ( float ) ( r ) * 60 ) ; System . out . println ( String . format ( " % d : % d " , IST ) ) ; return IST ; } public static void main ( String [ ] args ) { float h = 20 ; float r = 150 ; float cal_IST ( float h , float r ) { float IST = ( float ) ( r * 60 ) ; float IST = ( float ) ( IST - ( float ) ( r ) * 60 ) ; System . out . println ( String . format ( " % d : % d " , IST ) ) ; } } }
import java . io . * ; public class GFG { static void printRoots ( int n ) { double theta = Math . PI * 2 / n ; for ( int k = 0 ; k < n ; k ++ ) { double real = Math . cos ( k * theta ) ; double img = Math . sin ( k * theta ) ; System . out . print ( " { : . 3f } ▁ " + " ▁ " + real ) ; } } public static void main ( String [ ] args ) { int n = 2 ; printRoots ( 1 ) ; printRoots ( 2 ) ; printRoots ( 3 ) ; } }
public class GFG { static void findCart ( int arr1 [ ] , int arr2 [ ] , int n , int n1 ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n1 ; j ++ ) System . out . print ( " { " , arr1 [ i ] + " , ▁ " , arr2 [ j ] + " } , ▁ " ) ; } } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 2 , 3 } ; int arr2 [ ] = { 4 , 5 , 6 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; findCart ( arr1 , arr2 , n1 , n2 ) ; } }
public class GFG { static int no_of_ways ( String s ) { int n = s . length ( ) ; int count_left = 0 ; int count_right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( n - 1 ) ) count_left ++ ; else break ; } int i = n - 1 ; while ( i >= 0 ) { if ( s . charAt ( i ) == s . charAt ( n - 1 ) ) count_right ++ ; else break ; i -- ; } if ( s . charAt ( 0 ) == s . charAt ( n - 1 ) ) return ( ( count_left + 1 ) * ( count_right + 1 ) ) ; else return ( count_left + count_right + 1 ) ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( no_of_ways ( s ) ) ; } }
public class GFG { static int MAX = 100000 ; static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ MAX + 1 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; prime [ 0 ] = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ i ] ) { for ( int j = i * 2 ; j <= MAX ; j += i ) prime [ j ] = false ; } } int sumOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { c ++ ; if ( c % k == 0 ) sum +=
public class GFG { static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ MAX + 1 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; prime [ 2 ] = false ; prime [ 3 ] = false ; prime [ 4 ] = false ; prime [ 5 ] = false ; prime [ 6 ] = false ; prime [ 7 ] = false ; prime [ 8 ] = false ; prime [ 9 ] = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) { for ( int j = i * 2 ; j <= MAX ; j += i ) prime [ j ] = false ; } } System . out . println ( prime [ 0 ] ) ; } static void solve ( int arr [ ] , int n , int k ) { int c = 0 ; int sum = 0 ; for ( int i = 0 ; i
public class GFG { static int MAX = 1000000 ; static void SieveOfEratosthenes ( ) { prime [ 1 ] = false ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int productOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; productOfKthPrimes ( arr , n , k ) ; return c ; } static void productOfKthPrimes ( int arr [ ] , int n , int k ) { int c = 0 ; productOfKthPrimes ( arr , n , k )
public class GFG { static void findAllSequences ( int diff , int out [ ] , int start , int end ) { if ( Math . abs ( diff ) > ( end - start + 1 ) / 2 ) return ; if ( start > end ) { if ( diff == 0 ) System . out . print ( " " + out [ 0 ] + " ▁ " ) ; return ; } out [ start ] = '0' ; out [ end ] = '1' ; findAllSequences ( diff + 1 , out , start + 1 , end - 1 ) ; out [ start ] = out [ end ] ; findAllSequences ( diff , out , start + 1 , end - 1 ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . print ( " " ) ; findAllSequences ( 0 , out , 0 , 2 * n - 1 ) ; System . out . print
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int l = arr [ i ] ; int r = arr [ n - 1 ] ; int count = 0 ; while ( l <= r ) { if ( arr [ l ] == l ) { count ++ ; } else { l ++ ; } } if ( count <= h ) { ans [ i ] = count ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == 0 ) { ans [ i ] = 1 ; } else { ans [ i ] = ans [ i ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] == 0 ) { ans [ i ] = 1 ; } else { ans [ i ] = ans [ i ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; }
public class GFG { static int maxSubStrings ( String s , int k ) { int maxSubStr = 0 ; int n = s . length ( ) ; for ( int c = 27 ; c <= k ; c ++ ) { char ch = ( char ) ( ' a ' + c ) ; int curr = 0 ; for ( int i = n - k ; i >= 0 && s [ i ] == ch ; i -- ) { int cnt = 0 ; while ( i < n && s [ i ] == ch && cnt != k ) { i ++ ; cnt ++ ; } i -= 1 ; if ( cnt == k ) curr ++ ; } maxSubStr = Math . max ( maxSubStr , curr ) ; } return maxSubStr ; } public static void main ( String [ ] args ) { String s = " aaacaabbaa " ; int k = 2 ; System . out . println ( maxSubStrings ( s , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int q = sc . nextInt (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] >= arr [ i + 1 ] ) { sum = sum + arr [ i ] ; } } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans += arr [ i ] ; } else { ans += arr [ i ] ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ r ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( count == 0 ) { System . out . println ( "0" ) ; } else { System . out . println ( "1" ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } } }
public class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } static void removeMin ( int arr [ ] , int n ) { int minVal = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minVal = Math . min ( minVal , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] - minVal ;
import java . util . * ; public class GFG { static int find_Centroid ( int v ) { int ans [ ] = new int [ v ] ; int n = v . length ; int [ ] [ ] x0 = new int [ v ] ; int [ ] [ ] y0 = new int [ v ] ; int [ ] [ ] A = new int [ v ] [ 3 ] ; int [ ] [ ] B = new int [ v ] [ 3 ] ; int A_ = ( x0 * y0 ) - ( x0 * y0 ) ; int B_ = ( x0 * y1 ) - ( x1 * y1 ) ; int ans [ ] = new int [ v ] [ 3 ] ; int x_ = ( x0 * y1 ) - ( x1 * y0 ) ; int ans [ ] = new int [ v ] [ 3 ] ; int x_ = ( x
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = " " ; for ( int i = 0 ; i < n ; i ++ ) { s += sc . nextInt ( ) ; } System . out . println ( s ) ; } }
import java . util . * ; public class GFG { static int minOperations ( int ar [ ] , int k ) { int ar [ ] = new int [ k ] ; Arrays . fill ( ar , 0 ) ; int opsNeeded = 0 ; for ( int i = 0 ; i < k ; i ++ ) opsNeeded += ar [ k - 1 ] - ar [ i ] ; int ans = opsNeeded ; for ( int i = k ; i < ar . length ; i ++ ) opsNeeded = opsNeeded - ( ar [ i - 1 ] - ar [ i ] ) ; int ans = Math . min ( ans , opsNeeded ) ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 9 , 100 } ; int n = arr . length ; int k = 3 ; System . out . println ( minOperations ( arr , k ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= 65 && a [ i ] <= 90 ) { count ++ ; } else if ( a [ i ] >= 97 && a [ i ] <= 122 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int l = arr [ i ] ; int r = arr [ n - 1 ] ; int c = arr [ n - 2 ] ; int d = arr [ n - 3 ] ; int e = arr [ n - 4 ] ; int f = arr [ n - 5 ] ; int g = arr [ n - 6 ] ; int h = arr [ n - 7 ] ; int min = Math . min ( l , r ) ; int max = Math . max ( l , r ) ; ans [ i ] = min + max ; ans [ i + 1
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = 0 ; int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr2 [ j ] == 0 ) { System . out . print ( arr [ i ] + " ▁ " ) ; break ; } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new
public class GFG { static int sameOccurrence ( int arr [ ] , int n , int x , int y ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int ctX = 0 ; int ctY = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] == x ) ctX ++ ; else if ( arr [ j ] == y ) ctY ++ ; if ( ctX == ctY ) result ++ ; } } return ( result ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 3 , 4 , 1 } ; int n = arr . length ; int x = 2 ; int y = 3 ; System . out . println ( sameOccurrence ( arr , n , x , y ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int n = s . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } } if ( count > n ) { System . out . println ( 0 ) ; } else { System . out . println ( count ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { ans [ i ] = 1 ; } else { ans [ i ] = a [ i ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { ans [ i ] = 1 ; } else { ans [ i ] = b [ i ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( a + " ▁ " + b + " ▁ " + c + " ▁ " + d ) ; } }
import java . util . * ; public class GFG { static int mod = 1000000007 ; static int [ ] arr = new int [ arr . length ] ; static void solve ( ) { int n = arr . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % mod == 0 ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] * arr [ j ] == 0 ) { toFind = target / arr [ i ] * arr [ j ] ; for ( int k = j + 1 ; k < n ; k ++ ) { if ( arr [ k ] == toFind ) totalCount ++ ; } } } } } System . out . println ( " Total ▁ number ▁ of ▁ triplets ▁ found : ▁ " + totalCount ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 } ; int length = arr . length ; solve ( ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } int [ ] ans2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans2 [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { ans2 [ i ] = ans2 [ i ] ; } int [ ] ans3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans3 [ i ] = ans3 [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans2 [
import java . io . * ; public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 9 , 6 , 36 } ; int n = arr . length ; System . out . println ( __gcd ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int lastElement ( int a [ ] , int n ) { int steps = 1 ; Vector < Integer > v = new Vector < Integer > ( ) ; if ( n == 1 ) return a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) v . add ( a [ i ] | a [ i + 1 ] ) ; while ( v . size ( ) > 1 ) steps ++ ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int steps = 1 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( steps & 1 ) v . add (
import java . io . * ; public class GFG { static int number_cake ( int n ) { return ( n * n * n + 5 * n + 6 ) / 6 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( number_cake ( n ) ) ; n = 8 ; System . out . println ( number_cake ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int g = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { g = i ; break ; } } if ( g == 0 ) { System . out . println ( "0" ) ; } else { System . out . println ( g - 1 ) ; } } }
import java . util . * ; public class GFG { static void pattern ( int N ) { int k , space , rows ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( " * " ) ; } if ( i != rows ) { for ( int j = 1 ; j <= space ; j ++ ) { System . out . print ( " ▁ " ) ; } space += 2 ; } for ( int j = i ; j < rows ; j ++ ) { if ( j != rows ) { System . out . print ( " * " ) ; } System . out . print ( ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int N = 6 ; pattern ( N ) ; } }
public class GFG { static int maximum_middle_value ( int n , int k , int arr [ ] ) { int ans = - 1 ; low = ( n + 1 - k ) / 2 ; high = ( n + 1 - k ) / 2 ; for ( int i = low ; i <= high ; i ++ ) ans = Math . max ( ans , arr [ i - 1 ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 5 , k = 2 ; int arr [ ] = { 9 , 5 , 3 , 7 , 10 } ; System . out . println ( maximum_middle_value ( n , k , arr ) ) ; n = 9 , 3 ; arr1 = 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc
public class GFG { static int getmax ( int arr [ ] , int n , int x ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) s += arr [ i ] ; System . out . println ( Math . min ( s , x ) ) ; return ( int ) Math . min ( s , x ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int x = 5 ; arr [ ] = new int [ arr . length ] ; getmax ( arr , arr_size , x ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; System . out . println ( ( a * b + c * d ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int m = sc . nextInt ( ) ; int n1 = n ; int m1 = m ; int n2 = n ; int m2 = n1 ; int n3 = m ; int n4 = n2 ; int n5 = n3 ; int n6 = n4 ; int n7 = n5 ; int n8 = n6 ; int n9 = n10 ; boolean [ ] prime = new boolean [ n ] ; prime [ 0 ] = true ; prime [ 1 ] = true ; prime [ 2 ] = true ; prime [ 3 ] = true ; prime [ 4 ] = true ; prime [ 5 ] = true ; prime [ 6 ] = true ; prime [ 7 ] = true ; prime [ 8 ] = true ; prime [ 9 ] = true ; boolean isPrime = true ; for ( int i = 2 ; i <= m ; i ++ ) { if ( prime [ i ] ) { for ( int j = i * 2 ; j <= n ; j += i ) { isPrime = false ; if (
public class GFG { static int maxOR ( int arr [ ] , int n ) { int maxVal = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { maxVal = Math . max ( maxVal , arr [ i ] | arr [ j ] ) ; } } return maxVal ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 12 , 16 } ; int n = arr . length ; System . out . println ( maxOR ( arr , n ) ) ; } }
import java . util . * ; public class Solution { public int numJewelsInStones ( int J , int S ) { if ( J == 0 || S == 0 ) return 0 ; int j_set = J ; int ans = 0 ; for ( int c = 0 ; c < S ; c ++ ) { if ( c == j_set ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int J = " a " ; int S = " aAAbbbb " ; int out = sObj . numJewelsInStones ( J , S ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ]
import java . io . * ; public class GFG { static int setBitNumber ( int n ) { int k = ( int ) Math . log ( n ) ; return 2 * k ; } public static void main ( String [ ] args ) { int n = 273 ; System . out . println ( setBitNumber ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int s1 = sc . nextInt ( ) ; int s2 = sc . nextInt ( ) ; int f1 = sc . nextInt ( ) ; int f2 = sc . nextInt ( ) ; if ( s < f ) { System . out . println ( " X " ) ; } else if ( s > f ) { System . out . println ( " X " ) ; } else if ( s1 < f ) { System . out . println ( " X " ) ; } else { System . out . println ( " - " ) ; } } }
import java . util . * ; public class GFG { static int subsetPairNotDivisibleByK ( int arr [ ] , int N , int K ) { int f [ ] = new int [ K ] ; for ( int i = 0 ; i < N ; i ++ ) f [ arr [ i ] % K ] ++ ; if ( K % 2 == 0 ) f [ K / 2 ] = Math . min ( f [ K / 2 ] , 1 ) ; int res = Math . min ( f [ 0 ] , 1 ) ; for ( int i = 1 ; i < ( K / 2 ) + 1 ; i ++ ) res += Math . max ( f [ i ] , f [ K - i ] ) ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 7 , 2 , 9 , 1 } ; int N = arr . length ; int K = 3 ; System . out . println ( subsetPairNotDivisibleByK ( arr , N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ w ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < w ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < w ; i ++ ) { int c = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( a [ j ] == b [ i ] ) { c ++ ; } } if ( c >= k ) { ans = c ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static void printRoots ( int a , int b , int c ) { System . out . println ( ( 1 ) + " , ▁ " + ( c / ( a * 1.0 ) ) ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; int c = - 5 ; printRoots ( a , b , c ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i
import java . util . * ; public class Main { public static void main ( String
public class GFG { static void createHash ( int hash1 , int maxElement ) { int prev = 0 , curr = 1 ; hash1 . add ( prev ) ; hash1 . add ( curr ) ; while ( curr < maxElement ) { int temp = curr + prev ; hash1 . add ( temp ) ; prev = curr ; curr = temp ; } } static void findFibonacciPair ( int n ) { int hash1 = set ( ) ; createHash ( hash1 , n ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == n ) { System . out . print ( i ) ; System . out . print ( " , ▁ " + ( n - i ) ) ; return ; } } System . out . print ( " - 1" ) ; } public static void main ( String [ ] args ) { int N = 90 ; findFibonacciPair ( N ) ; } }
import java . io . * ; public class GFG { static int countgroup ( int a [ ] , int n ) { int xs = 0 ; for ( int i = 0 ; i < n ; i ++ ) xs ^= a [ i ] ; if ( xs == 0 ) return ( 1 << ( n - 1 ) ) - 1 ; return 0 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 } ; int n = a . length ; System . out . println ( countgroup ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int maxLength ( String s , int n
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 1 ; i <= w ; i ++ ) { sum += k * i ; } if ( sum <= n ) { System . out . println ( 0 ) ; } else { System . out . println ( sum - n ) ; } } }
import java . util . * ; public class GFG { static boolean isPrime ( int k ) { if ( k <= 1 ) return false ; for ( int i = 2 ; i <= k ; i ++ ) if ( k % i == 0 ) return false ; return true ; } static boolean check ( int num , int k ) { int flag = 1 ; for ( int i = 2 ; i <= k ; i ++ ) { if ( num % i == 0 ) flag = 0 ; } if ( flag == 1 ) return true ; else return false ; } static int findCount ( int a , int b , int k ) {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ n ] ; int c [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; if ( k > n || k == 1 ) { System . out . println ( - 1 ) ; return ; } if ( n == 1 ) { if ( a [ 0 ] == b [ 0 ] ) { ans = - 1 ; } else { ans = a [ 0 ] + b [ 0 ] ; } } else { if ( a [ 0 ] == b [ 0 ] ) { ans = - 1 ; } else { ans = a [ 0 ] + b [ 0 ] ; } } if ( k > n || k == 1 ) { System . out . println ( - 1 ) ; return ; } if ( n == 1 ) { if ( a [ 0 ] == c [ 0 ] ) { ans = - 1 ; } else { ans = a [ 0 ] + c [ 0 ] ; } } else { if ( a [ 0 ] == c [ 0 ] ) { ans = - 1 ; } else { ans = a [ 0 ] + c [ 0 ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int maxn = 16 ; static int maxn = 16 ; static int precompute ( ) { int dp [ ] = new int [ maxn ] ; dp [ 0 ] = 0 ; int v [ ] = 4 ; int i , j ; for ( i = 1 ; i <= maxn ; i ++ ) { for ( k = 3 ; k <= 3 ; k ++ ) { j = v [ k ] ; if ( i >= j && dp [ i - j ] != - 1 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i - j ] + 1 ) ; } } return dp ; } static int Maximum_Summands ( int dp [ ] , int n ) { if ( n < maxn ) return dp [ n ] ; else { int t = ( n - maxn ) / 4 ; int dp [ ] = Math . max ( dp [ n ] , dp [ n - 4 * t ] ) ; return
import java . io . * ; public class GFG { static int countSquares ( int n ) { return ( ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( " Count ▁ of ▁ squares ▁ is ▁ " + countSquares ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += ( b [ i ] % 2 ) * ( b [ i ] - 1 ) / 2 ; } System . out . println ( ans ) ; } }
import
import java . io . * ; public class GFG { static void Loss ( int SP , int P ) { int loss = 0 ; loss = ( ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) ) ; System . out . println ( " Loss ▁ = ▁ " + loss ) ; } public static void main ( String [ ] args ) { int SP = 2400 , P = 30 ; Loss ( SP , P ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( Math . min ( x , m - sum ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == max ) { max = arr [ i ] ; min = arr [ i ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min ) { ans ++ ; } else { ans = Math . max ( ans , arr [ i ] ) ; min = arr [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int compute ( int n ) { int ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += ( 1 << i ) ; } return ans ; } static int square_digit_sum ( int n ) { while ( n > 0 ) { int n = ( int ) Math . pow ( n , 2 ) ; } return n ; } static int square_digit_sum ( int n ) { int result = 0 ; while ( n > 0 ) { result += SQUARE_DIGITS_SUM [ n % 1000 ] ; n /= 1000 ; } return result ; } public static void main ( String [ ] args ) { int SQUARE_DIGITS_SUM = { 1 , 10000000 } ; int n = 72 ; System . out . println ( compute ( ) ) ; } }
public class GFG { static int fact ( int n ) { int fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact *= i ; return fact ; } static int countStrings ( String str , int n ) { int distinct_char = set ( ) ; for ( int i = 0 ; i < n ; i ++ ) distinct_char . add ( str . charAt ( i ) ) ; return fact ; } static int countStrings ( String str ) { int distinct_char = set ( ) ; for ( int i = 0 ; i < n ; i ++ ) distinct_char . add ( str . charAt ( i ) ) ; return fact ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; System . out . println ( countStrings ( str , n ) ) ; } }
import java . util . * ; public class GFG { static void printCommonElements ( int mat [ ] [ ] ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int j = 0 ; j < N ; j ++ ) { mp . put ( mat [ 0 ] [ j ] , i + 1 ) ; } for ( int i = 1 ; i < M ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mp . get ( mat [ i ] [ j ] ) == i ) mp . put ( mat [ i ] [ j ] , i + 1 ) ; } } int mat [ ] [ ] = new int [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( mp . get ( mat [ i ] [ j ] ) == i ) { mp . put ( mat [ i ] [ j ] , i + 1 ) ; if ( i == M - 1 ) System . out . print ( mat [ i ] [ j ] + " ▁ " ) ; } } } } public static void main
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { ans = Math . min ( ans , b [ i ] ) ; } }
public class GFG { static int sumOfAP ( int a , int d , int n ) { int sum = 0 ; int i = 0 ; while ( i < n ) { sum += a ; a = a + d ; i = i + 1 ; } return sum ; } public static void main ( String [ ] args ) { int n = 20 ; int a = 2.5 ; int d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } }
public class GFG { static void find3Numbers ( int arr [ ] , int n ) { int small = + 2147483647 ; int large = + 2147483647 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= small ) small = arr [ i ] ; else if ( arr [ i ] <= large ) large = arr [ i ] ; else break ; } if ( i == n ) System . out . println ( " No ▁ such ▁ triplet ▁ found " ) ; else { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ j ] < small ) small = arr [ j ] ; else break ; } System . out . println ( str ( small ) + " ▁ " + str ( large ) + " ▁ " + str ( arr [ i ] ) ) ; return ; } arr = [ 5 , 7 , 4 , 8 ] ; n = arr . length ; find3Numbers ( arr , n ) ; } public static void main ( String [ ] args ) {
public class GFG { static void numbersWith3Divisors ( int n ) { boolean prime [ ] = new boolean [ n + 1 ] ; prime [ 0 ] = prime [ 1 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } System . out . println ( " Numbers ▁ with ▁ 3 ▁ divisors ▁ : ▁ " ) ; i = 0 ; while ( i * i <= n ) { if ( prime [ i ] ) System . out . print ( i * i + " ▁ " ) ; i ++ ; } } public static void main ( String [ ] args ) { int n = 96 ; numbersWith3Divisors ( n ) ; } }
public class GFG { static int findPairCount ( int N , int K ) { int count = 0 ; int rem [ ] = new int [ K ] ; rem [ 0 ] = N / K ; rem [ 0 ] = N / K ; rem [ 0 ] = N / K ; for ( int i = 1 ; i < K ; i ++ ) rem [ i ] = ( N - i ) / K + 1 ; if ( K % 2 == 0 ) count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; else count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) / 2 ; int count = ( rem [ K / 2 ] * ( rem [ K / 2 ] - 1 ) ) / 2 ; return count ; } public static void main ( String [ ] args ) { int N = 10 ; int K = 4 ; System . out . println ( findPairCount ( N , K )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int max = 0 ; for ( int i = 0 ; i < n ; i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; public class GFG { static int N = 1.6180339 ; static int f [ ] = new int [ N ] ; static int fib ( int n ) { if ( n < 6 ) return f [ n ] ; t = 5 ; int fn = 5 ; while ( t < n ) { fn = fn * ( fn * ( n ) ) ; t += 1 ; } return fn ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( n + " th ▁ Fibonacci ▁ Number ▁ = ▁ " + f [ n ] ) ; } }
public class GFG { static int kthSmallest ( int n , int k ) { return 2 * k ; } public static void main ( String [ ] args ) { int n = 8 ; int k = 4 ; System . out . println ( kthSmallest ( n , k ) ) ; } }
public class GFG { static void printSumTricky ( int mat [ ] [ ] , int k ) { int n = mat [ 0 ] . length ; if ( k > n ) return ; int stripSum [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n - k + 1 ; j ++ ) { sum
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] =
import java . io . * ; public class GFG { static int ncr ( int n , int r ) { int ans = 1 ; for ( int i = 1 ; i <= r ; i ++ ) ans *= ( n - r + i ) ; return ans ; } static int totalWays ( int X , int Y , int M , int W ) { return ( ncr ( M , X ) * ncr ( W , Y ) ) ; } public static void main ( String [ ] args ) { int X = 4 , Y = 3 ; int M = 6 ; int W = 5 ; System . out . println ( totalWays ( X , Y , M , W ) ) ; } }
public class GFG { static int nextPowerOf2 ( int n ) { int count = 0 ; if ( n == 1 || n == 2 ) return n ; while ( n != 0 ) { n >>= 1 ; count ++ ; } return 1 << count ; } static int removeElement ( int n ) { if ( n == 1 || n == 2 ) return 0 ; int a = nextPowerOf2 ( n ) ; if ( n == a || n == a - 1 ) return 1 ; else if ( n % 2 == 0 ) return 1 ; else return 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeElement ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int p = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] % 2 == p ) { cnt
import java . io . * ; public class GFG { static int modInverse ( int a , int m ) { a = a % m ; for ( int x = 1 ; x < m ; x ++ ) { if ( ( a * x ) % m == 1 ) return x ; } return 1 ; } public static void main ( String [ ] args ) { int a = 3 , m = 11 ; System . out . println ( modInverse ( a , m ) ) ; } }
public class GFG { static int sumOfDigits ( int x ) { int sum = 0 ; while ( x != 0 ) { sum += x % 10 ; x /= 10 ; } return sum ; } static int countNumbers ( int l , int r ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % 2 == 0 && sumOfDigits ( i ) % 3 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int l = 1000 , r = 6000 ; System . out . println ( countNumbers ( l , r ) ) ; } }
public class GFG { static void findGreater ( int a , int b ) { int x = a * ( Math . log ( b ) ) ; int y = b * ( Math . log ( a ) ) ; if ( y > x ) System . out . println ( " a ^ b ▁ is ▁ greater " ) ; else if ( y < x ) System . out . println ( " b ^ a ▁ is ▁ greater " ) ; else System . out . println ( " both ▁ are ▁ equal " ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 ; findGreater ( a , b ) ; findGreater ( b , a ) ; } }
import java . util . * ; public class GFG { static int findAnswer ( String str1 , String str2 , int n ) { int l = 0 , r = 0 ; int ans = 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) l ++ ; else r ++ ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( str1 . charAt ( i ) != str2 . charAt ( i ) ) r ++ ; } for ( int i = l + 1 ; i <= r ; i ++ ) { if ( str1 . charAt ( i ) !=
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Math . min ( x , m ) ; int max = Math . max ( x , m ) ; int min2 = Math . min ( x , m ) ; int max2 = Math . max ( x , m ) ; int ans = max - min2 + 1 ; if ( ans < 0 ) ans = 0 ; System . out . println ( ans ) ; } } }
public class GFG { static boolean bitsAreInAltPatnInGivenTRange ( int n , int l , int r ) { int num = n >> ( l - 1 ) ; int prev = num & 1 ; int num = num >> 1 ; for ( int i = 1 ; i <= r - l ; i ++ ) { int curr = num & 1 ; if ( curr == prev ) return false ; prev = curr ; num = num >> 1 ; } return true ; } public static void main ( String [ ] args ) { int n = 18 ; int l = 1 , r = 3 ; if ( bitsAreInAltPatnInGivenTRange ( n , l , r ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( dp [ i ] == 1 ) { dp [ i ] = 0 ; } else { dp [ i ] = dp [ i - 1 ] + c [ i ] ; } } System . out . println ( dp [ n ] ) ; } }
import java . io . * ; public class GFG { static int nth_group ( int n ) { return n * ( 2 * Math . pow ( n , 2 ) + 1 ) ; } public static void main ( String [ ] args ) { int N = 5 ; System . out . println ( nth_group ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } int ans =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int minIdx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; minIdx = i ; } } int maxIdx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; maxIdx = i ; } } System . out . println ( minIdx + " ▁ " + maxIdx ) ; } }
public class GFG { static int MAX = 1000000 ; static int maximumOccurredElement ( int L [ ] , int R [ ] , int n ) { int arr [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ L [ i ] ] ++ ; int msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] += arr [ i - 1 ] ; int msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] += arr [ i - 1 ] ; msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] += arr [ i - 1 ] ; msum = arr [ 0 ] ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] += arr [ i - 1 ] ; return ind ; } public static void main ( String [ ] args ) { int L [ ] = { 1 , 4 , 9 , 13 , 21 } ; int R [ ] = { 15 , 8 , 12 , 20 , 30 } ; int n = L . length ; System . out . println ( maximum
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = 0 ; if ( n < 1 ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( m > n ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == 1 ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + " ▁ " + m ) ; return ; } if ( n == m ) { System . out . println ( n + "
import java . util . * ; public class GFG { static double func ( double x ) { return ( double ) ( 1 ) / ( 1 + x * x ) ; } static double calculate ( double lower_limit , double upper_limit , double interval_limit ) { double interval_size = ( double ) ( upper_limit - lower_limit ) / interval_limit ; double sum = func ( lower_limit ) + func ( upper_limit ) ; for ( int i = 1 ; i < interval_limit ; i ++ ) { if ( i % 3 == 0 ) sum = sum + 2 * func ( lower_limit + i * interval_size ) ; else sum = sum + 3 * func ( lower_limit + i * interval_size ) ; } return ( ( double ) ( ( ( double ) ( ( ( double ) ( ( ( ( 2 ) - lower_limit ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( n <= k ) { System . out . println ( x * y ) ; } else { System . out . println ( ( x * y ) + ( n - k ) * ( x * y ) ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { double x = sc . nextDouble ( ) ; if ( x == 0 ) break ; double h = x * x ; double ans = 0 ; double sqrt = Math . sqrt ( h ) ; for ( int i = 0 ; i < sqrt ; i ++ ) { ans += ( sqrt - i ) * ( sqrt - i ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < 10 ; i ++ ) { sum += ( int ) Math . pow ( 10 , i ) ; } System . out . println ( sum ) ; } }
public class GFG { static void MAX = 100000 ; static void sieve ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static void printPrime Quad ( int n ) { for ( int i = n - 7 ; i >= 0 ; i -- ) { if ( prime [ i ] == true ) { for ( int j = i * 2 ; j <= MAX ; j += i ) prime [ j ] = false ; } } } static void printPrime ( int n ) { for ( int i = n - 7 ; i >= 0 ; i -- ) { if ( prime [ i ] == true ) { for ( int j = i * 2 ; j <= MAX ; j += i ) prime [ j ] = false ; } } } public static void main ( String [ ] args ) { int sieve ( ) ; int n = 20 ; printPrime ( 20 ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static int maxSubsequenceSubstring ( int x [ ] , int y [ ] , int n , int m ) { int dp [ ] [ ] = new int [ MAX ] [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ; else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ; return ans ; } public static void main ( String [ ] args ) { int x [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; int y [ ] = { 1 , 2 , 3 , 4 ,
public class GFG { static int findSum ( int n , int a , int b ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % a == 0 || i % b == 0 ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 10 ; int a = 3 , b = 5 ; System . out . println ( findSum ( n , a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; int [ ] d = new int [ n ] ; int [ ] e = new int [ n ] ; int [ ] f = new int [ n ] ; int [ ] g = new int [ n ] ; int [ ] h = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; d [ i ] = sc . nextInt ( ) ; e [ i ] = sc . nextInt ( ) ; f [ i ] = sc . nextInt ( ) ; g [ i ] = sc .
public class GFG { static int MAX = 1000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) { sequence [ i ] = 0 ; } for ( int i = 0 ; i < MAX ; i ++ ) { for ( int j = i - 1 ; j < - 1 ; j ++ ) { if ( sequence [ j ] == sequence [ i ] ) { sequence [ i + 1 ] = i - j ; break ; } } } } static int getNthTerm ( int n ) { return sequence [ n ] ; } public static void main ( String [ ] args ) { int vanEckSequence ( ) ; n = 6 ; System . out . println ( getNthTerm ( n ) ) ; n = 100 ; System . out . println ( getNthTerm ( n ) ) ; } }
public class GFG { static int MAX = 10000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) for ( int j = i - 1 ; j < - 1 ; j ++ ) { if ( sequence [ j ] == sequence [ i ] ) sequence [ i + 1 ] = i - j ; } } static int getCount ( int n ) { int count = 1 ; int i = n - 1 ; while ( sequence [ i + 1 ] != 0 ) count ++ ; return count ; } public static void main ( String [ ] args ) { int vanEckSequence ( ) ; n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
public class GFG { static int MAX = 10000 ; static int sequence [ ] = new int [ MAX + 1 ] ; static void vanEckSequence ( ) { for ( int i = 0 ; i < MAX ; i ++ ) for ( int j = i - 1 ; j < - 1 ; j ++ ) { if ( sequence [ j ] == sequence [ i ] ) sequence [ i + 1 ] = i - j ; } } static int getCount ( int n ) { nthTerm = sequence [ n - 1 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sequence [ i ] == nthTerm ) count ++ ; } return count ; } public static void main ( String [ ] args ) { vanEckSequence ( ) ; n = 5 ; System . out . println ( getCount ( n ) ) ; n = 11 ; System . out . println ( getCount ( n ) ) ; } }
import java . util . * ; public class GFG { static int nthElement ( int a , int b , int n ) { int lcm = ( a * b ) / int ( Math . gcd ( a , b ) ) ; int l = 1 ; int r = Math . min ( a , b ) * n ; while ( l <= r ) { int mid = ( l + r ) >> 1 ; int val = ( ( mid / a ) + int ( mid / b ) - int ( mid / lcm ) ) ; if ( val == n ) return ( int ) Math . max ( ( mid / a ) * a , int ( mid / b ) * b ) ; if ( val < n ) l = mid + 1 ; else r = mid - 1 ; } return ( int ) Math . max ( ( int ) Math . max ( ( int ) Math . max ( ( int ) Math . max ( ( int ) Math . max ( ( int ) Math . max ( ( int ) Math . max ( ( int ) Math . max ( ( int ) Math . max ( ( ) Math . max ( ( int ) Math . max ( ( ) Math . max ( ( ) Math . max ( ( ) Math . max ( ( ) ) ) ) ) ) ) ) ) ) ) ) )
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int y = sc . nextInt ( ) ; while ( y > 0 ) { y = y + 1 ; if ( y == 1 ) { System . out . println ( "1" ) ; break ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; int [ ] h = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { h [ i ] = a [ i ] ; sum += h [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum == 0 ) { ans = i ; break ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 || b == 0 ) return 0 ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int findValue ( int x , int y , int z ) { int g = __gcd ( y , z ) ; return ( x * g ) / __gcd ( x , g ) ; } static int __gcd ( int x , int y ) { int g = __gcd ( y , z ) ; return ( x * g ) / __gcd ( x , g ) ; } static int __gcd ( int x , int y ) { int g = __gcd ( y , z ) ; return ( x * g ) / __gcd ( x , g ) ; } public static void main ( String [ ] args ) { int x = 30 , y = 40 , z = 400 ; System . out . println ( " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + " % d " + "
public class GFG { static void foot ( int a , int b , int c , int d , int x1 , int y1 , int z1 ) { int k = ( - a * x1 - b * y1 - c * z1 - d ) / ( a * a + b * b + c * c ) ; x2 = a * k + x1 ; y2 = b * k + y1 ; z2 = c * k + z1 ; System . out . print ( " x2 ▁ = ▁ " + x2 ) ; System . out . print ( " y2 ▁ = ▁ " + y2 ) ; System . out . print ( " z2 ▁ = ▁ " + z2 ) ; foot ( a , b , c , d , x1 , y1 , z1 ) ; } public static void main ( String [ ] args ) { int a = 1 ,
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; if ( s . charAt ( 0 ) == s . charAt ( 1 ) && s . charAt ( 2 ) == s . charAt ( 0 ) && s . charAt ( 1 ) == s . charAt ( 2 ) && s . charAt ( 2 ) == s . charAt ( 1 ) ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int getMinimumOps ( int ar [ ] ) { int n = ar . length ; int small = Math . min ( ar [ 0 ] , ar . length ) ; int large = Math . max ( ar . length , ar . length ) ; int dp [ ] [ ] = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math . abs ( ar [ 0 ] - ar [ 0 ] ) ; int dp [ ] [ 0 ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , Math . abs ( ar [ i ] - j ) ) ; dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , Math . abs ( ar [ i ] - j ) ) ; } int ans = Integer . MAX_VALUE ; for ( int j = small ; j <= large ; j ++ ) { ans = Math . min ( ans , dp [ n - 1 ] [ j ] ) ; } return ans ; } public static void main ( String [ ] args
import java . io . * ; public class GFG { static float area_leaf ( float a ) { return ( float ) ( a * a * ( PI / 2 - 1 ) ) ; } public static void main ( String [ ] args ) { float a = 7 ; System . out . println ( area_leaf ( a ) ) ; } }
import java . io . * ; public class GFG { static int removeAlternate ( int n ) { if ( n == 1 ) return 1 ; if ( n % 2 == 0 ) return 2 * removeAlternate ( n / 2 ) - 1 ; else return 2 * removeAlternate ( ( n - 1 ) / 2 ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( removeAlternate ( n ) ) ; n = 10 ; System . out . println ( removeAlternate ( n ) ) ; } }
import java . io . * ; public class GFG { static void check ( int n , int m ) { if ( n == 2 || m == 2 || n % m == 0 ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } public static void main ( String [ ] args ) { int n = 9 ; check ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; if ( k % 2 == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
public class GFG { static int negProdSubArr ( int arr [ ] , int n ) { int positive = 1 , negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { arr [ i ] = 1 ; } else { arr [ i ] *= arr [ i - 1 ] ; } if ( arr [ i ] == 1 ) positive ++ ; else negative ++ ; } return ( positive * negative ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out . println ( negProdSubArr ( arr , n ) ) ; } }
public class GFG { static int negProdSubArr ( int arr [ ] , int n ) { int positive = 1 , negative = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { arr [ i ] = 1 ; } else { arr [ i ] *= arr [ i - 1 ] ; } if ( arr [ i ] == 1 ) positive ++ ; else negative ++ ; } return ( positive * negative ) ; } static int posProdSubArr ( int arr [ ] , int n ) { int total = ( n * ( n + 1 ) ) / 2 ; int cntNeg = negProdSubArr ( arr , n ) ; return ( total - cntNeg ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , - 4 , - 3 , 2 , - 5 } ; int n = arr . length ; System . out . println ( posProdSubArr ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int ans = 0 ; while ( k > 0 ) { ans += ( n - k ) / k ; k -- ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = a * b / g ; int m = e * c / g ; int n = h * d / g ; int m1 = m * b / g ; int n1 = n * c / g ; int m2 = m * b / g ; int m3 = m * c / g ; int m4 = m * b / g ; int m5 = n * c / g ; int m6 = n * c / g ; int m7 = n * c / g ; int m8 = n * c / g ; int m9 = n * c / g ; int m10 = m * b / g ; int m11 = n * c / g ; int m12 = m * b / g ; int m13 = m * b / g ; int m14 = m * c / g ; int m15 = m * c / g ; int m21 = m * b / g ; int m22 = m * c / g ; int m23 = m * b / g ; int m24 = m * c / g ; int m25 = m * b / g ; int
import java . util . * ; public class GFG { static int minRemove ( int arr [ ] , int n ) { int LIS [ ] = new int [ n ] ; int len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { LIS [ i ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) { LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ; } } len = Math . max ( len , LIS [ i ] ) ; } return ( n - len ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 5 , 4 } ; int n = arr . length ; System . out . println ( minRemove ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static void print_max ( int a [ ] , int n , int k ) { int max_upto [ ] = new int [ n ] ; int s [ ] = new int [ n ] ; s [ 0 ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { while ( s [ i ] < a [ i ] ) { max_upto [ s [ i ] ] = i - 1 ; s [ i ] = i - 1 ; } s [ i ] = i ; } while ( s [ n ] > 0 ) { max_upto [ s [ n ] ] = n - 1 ; s [ n ] = s [ n ] ; } int j = 0 ; for ( int i = n - k + 1 ; i < n ; i ++ ) { while ( j < i || max_upto [
import java . util . * ; public class GFG { static int compute ( int [ ] arr ) { int ans = arr [ 0 ] ; for ( int i = 1 ; i < arr . length ; i ++ ) ans += Math . max ( arr [ i ] , Math . max ( arr [ i ] , ans ) ) ; return ans ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static int countWindowDistinct ( int win [ ] , int k ) { int dist_count = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int j = 0 ; while ( j < win . length ) { int k = win [ i ] ; while ( j < win . length ) { j ++ ; } if ( j == i ) { dist_count ++ ; } } } return dist_count ; } static int countDistinct ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n - k + 1 ; i ++ ) { System . out . print ( countWindowDistinct ( arr [ i ] , k ) ) ; } return arr [ n - k + 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 1 , 3 , 4 , 2 , 3 } ; int k = 4 ; int n = arr . length ; countDistinct ( arr , n , k ) ; } }
public class GFG { static int evenNumSubstring ( String str ) { int length = str . length ( ) ; int count = 0 ; for ( int i = 0 ; i < length ; i ++ ) { int temp = str . charAt ( i ) - '0' ; if ( temp % 2 == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String str = "1" ; System . out . println ( evenNumSubstring ( str ) ) ; } }
import java . util . * ; public class GFG { static int countWays ( int index , int cnt , int dp [ ] [ ] , int n , int m , int k ) { if ( index == n ) { if ( cnt == k ) return 1 ; else return 0 ; } if ( dp [ index ] [ cnt ] != - 1 ) return dp [ index ] [ cnt ] ; int ans = 0 ; ans += countWays ( index + 1 , cnt , dp , n , m , k ) ; ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k ) ; dp [ index ] [ cnt ] = ans ; return dp [ index ] [ cnt ] ; } public static void main ( String [ ] args ) { int n = 3 ; int m = 3 ; int k = 2 ; int dp [ ] [ ] = { { - 1 , 1 } , { - 1 , 0 } , { - 1 , 0 } , { - 1 , 0 } , { - 1 , 0 } }
import java . util . * ; public class GFG { static void getSum ( int n ) { int summ = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) summ += i ; else summ += i ; } } return ; } static void printAliquot ( int n ) { System . out . print ( n + " ▁ " ) ; int s = set ( ) ; s . add ( n ) ; int nextt = 0 ; while ( n > 0 ) { n = getSum ( n ) ; if ( n % i == 0 ) { if ( n / i == i ) summ += i ; else summ += i ; } } System . out . print ( n + " ▁ " ) ; s . add ( n ) ; } public static void main ( String [ ] args ) { System . out . println ( "Aliquot ▁ with ▁ " + n ) ; System . out
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( count == 0 ) { System . out . println ( "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 ▁ " + "1 �
import java . io . * ; public class GFG { static void reverseArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n / 2 ; i ++ ) { arr [ i ] = arr [ ( n + ~ i + 1 ) + ~ 1 + 1 + 1 ] ; arr [ ( n + ~ i + 1 ) + ~ 1 + 1 ] = arr [ ( n + ~ i + 1 ) + ~ 1 + 1 ] ; } } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 7 , 2 , 1 , 6 } ; int n = arr . length ; reverseArray ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } }
public class GFG { static void printSeriesSum ( int N ) { int sum = 0 ; int a = 1 ; int cnt = 0 ; boolean flag = true ; sum += a ; while ( cnt < N ) { int nextElement = ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( ( int ) ( ( int ) ( ( ( int ) ( (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int gcd = gcd ( a , b ) ; int ans1 = 0 ; int ans2 = 0 ; if ( a % 2 == 0 ) { ans1 = 1 ; } else { ans1 = a * b / 2 ; } if ( b % 2 == 0 ) { ans2 = 1 ; } else { ans2 = b * a / 2 ; } System . out . println ( ans1 + " ▁ " + ans2 ) ; } } static int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } static int lcm ( int a , int b ) { return a * b / gcd ( a , b ) ; } static int lcm ( int a , int b ) { return a * b / gcd ( a , b ) ; } }
public class GFG { static int sz = ( int ) 1e5 ; static boolean isPrime [ ] = new boolean [ sz + 1 ] ; static void sieve ( ) { isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i
public class GFG { static int getMaxLength ( int arr [ ] , int n ) { int start = 0 , preCnt = 0 ; while ( start < n && arr [ start ] == 1 ) preCnt ++ ; int midCnt = 0 ; int i = start ; while ( i <= end ) { if ( arr [ i ] == 1 ) midCnt = midCnt + 1 ; else midCnt = 0 ; i = i + 1 ; } if ( start > end ) return n ; int midCnt = 0 ; int i = start ; int result = 0 ; while ( i <= end ) { if ( arr [ i ] == 1 ) midCnt ++ ; else midCnt ++ ; i = i + 1 ; } return Math . max ( result , midCnt ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ d ] ; int [ ] b = new int [ d ] ; int [ ] c = new int [ d ] ; for ( int i = 0 ; i < d ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < d ; i ++ ) { int min =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) < s . charAt ( i - 1 ) ) { count ++ ; } } if ( count == n ) { System . out . println ( " YES " ) ; System . out . println ( s . substring ( s . length ( ) - 1 ) ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int sqroot ( int s ) { int pSq = 0 ; int N = 0 ; for ( int i = 0 ; i < s ; i ++ ) { for ( int j = 1 ; j * j == i ; j ++ ) { if ( j * j == i ) pSq = i ; N = j ; break ; } } if ( pSq > 0 ) return ; int d = s - pSq ; int P = d / ( 2.0 * N ) ; A = N + P ; int sqrt_of_s = A - ( ( P * P ) / ( 2.0 * A ) ) ; return sqrt_of_s ; } public static void main ( String [ ] args ) { int num = 9.2345 ; int sqroot_of_num = sqroot ( num ) ; System . out . println ( " Square ▁ root ▁ of ▁ " + num + " ▁ = ▁ " + ( sqroot_of_num * 100000.0 ) / 100000 .0 + " ▁ = ▁ " +
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = - 1 ; int prev = - 1 ; int prevIdx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= prev ) { prevIdx = i ; prev = arr [ i ] ; } else { break ; } } if ( prevIdx == - 1 ) { System . out . println ( - 1 ) ; } else { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] <= prevIdx ) { prevIdx = i ; } else { break ; } } if ( prevIdx == - 1 ) { System . out . println ( - 1 ) ; } else { for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] <= prevIdx ) { prevIdx = i ; } else { break ; } } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int r = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( r == 0 && n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > i ) { ans += 1 ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; System . out . println ( n ) ; } } }
import java . util . * ; public class GFG { static int maxAlternateSum ( int arr [ ] , int n ) { if ( n == 1 ) return arr [ 0 ] ; int dec [ ] = new int [ n + 1 ] ; int inc [ ] = new int [ n + 1 ] ; dec [ 0 ] = arr [ 0 ] ; int flag = 0 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( arr [ j ] > arr [ i ] ) dec [ i ] = Math . max ( dec [ i ] , dec [ j ] + arr
public class GFG { static void generateArr ( int arr [ ] , int n ) { if ( n == 1 ) { System . out . print ( arr [ 0 ] ) ; return ; } int barr [ ] = new int [ n ] ; barr [ 0 ] = arr [ 0 ] & arr [ 1 ] ; barr [ 0 ] = arr [ 0 ] & arr [ 1 ] ; barr [ n - 1 ] = arr [ n - 1 ] & arr [ n - 2 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) barr [ i ] = arr [ i - 1 ] & arr [ i + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( barr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; generateArr ( arr , n ) ; } }
import java . util . * ; public class GFG { static void ReplaceElements ( int arr [ ] , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev ^ arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev ^ arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } }
import java . util . * ; public class GFG { static void ReplaceElements ( int arr [ ] , int n ) { if ( n <= 1 ) return ; int prev = arr [ 0 ] ; arr [ 0 ] = arr [ 0 ] + arr [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { int curr = arr [ i ] ; arr [ i ] = prev + arr [ i + 1 ] ; prev = curr ; } arr [ n - 1 ] = prev + arr [ n - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = arr . length ; ReplaceElements ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } }
import java . io . * ; public class GFG { static int countTriplets ( int A , int B , int C ) { int ans = 0 ; for ( int i = 1 ; i <= A ; i ++ ) for ( int j = 1 ; j <= B ; j ++ ) { for ( int k = 1 ; k <= C ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } return ans ; } public static void main ( String [ ] args ) { int A = 3 , B = 2 , C = 2 ; System . out . println ( countTriplets ( A , B , C ) ) ; } }
public class GFG { static int MAX = 100000 ; static void SieveOfEratosthenes ( ) { for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= MAX ; i += p ) prime [ i ] = false ; } } } static int smallestPrime ( int d ) { int l = 10 * ( d - 1 ) ; int r = ( 10 * d ) - 1 ; for ( int i = l ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] * w ) ; } } int [ ] [ ] dp2 = new int [ n + 1 ] [ m + 1 ] ; dp2 [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp2 [ i ] [ j ] = Math . min ( dp2 [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] * w ) ; } } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum += x ; } System . out . println ( sum ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = n * ( n + 1 ) / 2 ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ans += i * 2 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; } if ( count % 2 == 0 && count != 1 ) { System . out . println ( " Second " ) ; } else if ( count % 2 == 1 && count != 0 ) { System . out . println ( " First " ) ; } else { System . out . println ( " First " ) ; } } }
public class GFG { static int reverse ( int n ) { int rev = 0 ; while ( n != 0 ) { rev = ( rev * 10 ) + ( n % 10 ) ; n /= 10 ; } return rev ; } static int getSum ( int n ) { int n = reverse ( n ) ; int sumOdd = 0 ; sumEven = 0 ; int c = 1 ; while ( n != 0 ) { if ( c % 2 == 0 ) { sumOdd += n % 10 ; } else { sumEven += n % 10 ; c += 1 ; } n /= 10 ; c += 1 ; } System . out . println ( " Sum ▁ even ▁ = ▁ " + sumEven ) ; System . out . println ( " Sum ▁ odd ▁ = ▁ " + sumOdd ) ; return sumOdd ; } public static void main ( String [ ] args ) { int n = 457892 ; int sumOdd = 0 ; int sumEven = 0 ; int c = 1 ; System . out . println ( " Sum ▁ even ▁ = ▁ " + sumEven ) ; System . out . println ( " Sum ▁ odd ▁ = ▁ " + sumOdd ) ; System . out . println ( " Sum �
public class GFG { static void disp ( int row_no , int block ) { System . out . println ( row_no * block ) ; } static int row_no = 50 ; static int ht = 140 ; calculate ( l , w , h , a , ht ) ; } public static void main ( String [ ] args ) { int l = 50 ; int w = 20 ; int h = 35 ; int a = 700 ; int ht = 140 ; calculate ( l , w , h , a , ht ) ; } }
public class GFG { static int maxFreq ( String s ) { int binary = "000" , binary_length = s . length ( ) ; int count = 1 ; int prev = - 1 ; j = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { binary += binary_ . charAt ( s . charAt ( i ) - '0' ) ; } binary = binary [ 0 ] ; int j = 0 ; for ( int i = 0 ; i < binary . length ( ) - 1 ; i ++ ) { if ( binary [ i ] == '1' ) count = Math . max ( count , j - prev ) ; prev = j ; } return count ; } public static void main ( String [ ] args ) { String s = "13" ; System . out . println ( maxFreq ( s ) ) ; } }
import java . util . * ; public class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } static int encryptString ( String s , int n , int k ) { int cv [ ] = new int [ n ] ; int cc [ ] = new int [ n ] ; if ( isVowel ( s . charAt ( 0 ) ) ) { cv [ 0 ] = 1 ; } else { cc [ 0 ] =
import java . io . * ; public class GFG { static int harmonicMean ( int arr [ ] , int freq [ ] , int n ) { int sm = 0 ; int frequency_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sm = sm + freq [ i ] / arr [ i ] ; frequency_sum += freq [ i ] ; } return ( int ) ( frequency_sum / sm , 4 ) ; } public static void main ( String [ ] args ) { int num = [ 13 , 14 , 15 , 16 , 17 ; int freq [ ] = { 2 , 5 , 13 , 7 , 3 } ; int n = num . length ; System . out . println ( " { : . 4 f } " . format ( harmonicMean ( num , freq , n ) ) ; } }
import java . io . * ; public class GFG { static float polyarea ( float n , float a ) { if ( a < 0 && n < 0 ) return - 1 ; float A = ( float ) ( a * a * n ) / ( 4 * Math . tan ( ( 180 / n ) * Math . PI / 180 ) ) ; return A ; } public static void main ( String [ ] args ) { float a = 9 ; float n = 6 ; System . out . println ( polyarea ( n , a ) ) ; } }
public class GFG { static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; if ( b == 0 ) return a ; if ( a == b ) return a ; if ( a > b ) return __gcd ( a - b , b ) ; return __gcd ( a , b - a ) ; } static int getMin ( int c ) { int ans = __gcd ( c , 1 / 2 ) ; return __gcd ( c , b - c ) ; } static int getMax ( int c ) { int ans = __gcd ( c , 1 / 2 ) ; return __gcd ( c , b - c ) ; } static int getMin ( int c ) { int ans = __gcd ( c , 1 / 2 ) ; return __gcd ( c , b - c ) ; } static int getMax ( int c ) { int ans = __gcd ( c , 1 / 2 ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int M = sc . nextInt ( ) ; int N = sc . nextInt ( ) ; if ( M + N == 0 ) break ; int [ ] [ ] dp = new int [ M + N ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= M ; i ++ ) { for ( int j = 1 ; j <= N ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } int ans = N ; for ( int i = 1 ; i <= M ; i ++ ) { for ( int j = 1 ; j <= N ; j ++ ) { if ( dp [ i ] [ j ] >= dp [ i - 1 ] [ j ] ) { ans = i ; break ; } } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( a [ i ] - b [ i ] ) < Math . abs ( a [ i ] - b [ i ] ) ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = arr [ i ] + 1 ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . io . * ; public class GFG { static int findIndex ( int n ) { int fibo = 2.078087 * Math . log ( n ) + 1.672276 ; return fibo ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( findIndex ( n ) ) ; } }
import
public class GFG { static int minSwaps ( String s1 , String s2 ) { int c0 = 0 , c1 = 0 , c1 = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) == '0' && s2 . charAt ( i ) == '1' ) c0 ++ ; else if ( s1 . charAt ( i ) % 2 == 0 ) c1 ++ ; } int ans = c0 / 2 + c1 / 2 ; if ( c0 % 2 == 0 && c1 % 2 == 0 ) return ans ; else if ( ( c0 + c1 ) % 2 == 0 ) return ans + 2 ; else if ( ( c0 + c1 ) % 2 == 0 ) return ans + 2 ; else return - 1 ; } public static void main ( String [ ] args ) { String s1 = "0011" ; String s2 = "1111" ; int ans = minSwaps ( s1 , s2 ) ; System .
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += Integer . parseInt ( s . substring ( i , i + 1 ) ) ; } if ( sum > 0 ) { System . out . println ( " right " ) ; } else { System . out . println ( " left " ) ; } } }
public class GFG { static void normalSieve ( int n ) { int prime [ ] = new int [ n / 2 ] ; int i = 3 ; while ( i * i < n ) { if ( prime [ ( i / 2 ) ] == 0 ) { int j = i * i ; while ( j < n ) prime [ ( j / 2 ) ] = 1 ; j += i * 2 ; } i += 2 ; } System . out . println ( 2 + " ▁ " ) ; i = 3 ; while ( i < n ) { if ( prime [ ( i / 2 ) ] == 0 ) { System . out . println ( i , end = " ▁ " ) ; } i += 2 ; } } public static void main ( String [ ] args ) { int n = 100 ; normalSieve ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= ' a ' && s . charAt ( i ) <= ' z ' ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int frequencyOfSmallest ( int n , int arr [ ] ) { int mn = arr [ 0 ] ; int freq = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < mn ) { mn = arr [ i ] ; freq ++ ; } else if ( arr [ i ] == mn ) freq ++ ; } return freq ; } public static void main ( String [ ] args ) { int N = 5 ; int arr [ ] = { 3 , 2 , 3 , 4 , 4 } ; System . out . println ( frequencyOfSmallest ( N , arr ) ) ; } }
public class GFG { static boolean isSubArray ( int A [ ] , int B [ ] , int n , int m ) { int i = 0 ; j = 0 ; while ( i < n && j < m ) { if ( A [ i ] == B [ j ] ) i ++ ; j ++ ; if ( j == m ) return true ; } return false ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 3 , 0 , 5 , 1 , 2 } ; int n = A . length ; int B [ ] = { 3 , 0 , 5 , 1 } ; int m = B . length ; if ( isSubArray ( A , B , n , m ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { ans += Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; } System . out . println ( ans ) ; } }
public class GFG { static long calculateSum ( int n , int k ) { long res = 1 ; for ( int i = 0 ; i < k ; i ++ ) res = ( res * n ) % MOD ; return res ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 3 ; System . out . println ( calculateSum ( n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { ans = Math . min ( ans , dfs ( i , j , n ) ) ; } } } System . out . println ( ans ) ; } static int dfs ( int x , int y , int n ) { if
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; sum += arr [ i ] ; } int sum2 = 0 ; int sum3 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum2 += arr [ i ] ; sum3 += arr [ i ] ; } System . out . println ( sum2 / sum ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; } static int sumOfproduct ( int n ) { return binomialCoeff ( 2 * n , n - 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( sumOfproduct ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] arr = { " " , " ▁ " , " ▁ " , " ▁ " } ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] . equals ( t ) ) { System . out . print ( " Yes " ) ; System . exit ( 0 ) ; } } System . out . print ( " No " ) ; } }
import java . util . * ; public class GFG { static int pairCount ( int arr [ ] , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_val ) max_val = arr [ i ] ; } int prime [ ] = new int [ max_val + 1 ] ; prime [ 0 ] = 1 ; prime [ 1 ] = 1 ; int k = int ( int ) Math . sqrt ( max_val ) + 1 ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false
import java . util . * ; public class GFG { static int getPrime ( int arr [ ] , int n ) { int max_val = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_val ) max_val = arr [ i ] ; } int prime [ ] = new int [ max_val + 1 ] ; prime [ 0 ] = 1 ; prime [ 1 ] = 1 ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == 0 ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = 0 ; } } int maximum = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ]
import
import java . io . * ; public class GFG { static void findElements ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
public class GFG { static void printDistinct ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) { while ( i < n - 1 && ( arr [ i ] == arr [ i + 1 ] ) ) i ++ ; else System . out . print ( arr [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 } ; int n = arr . length ; printDistinct ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a * b ) ; } }
public class GFG { static int nth_term ( int a , int b , int n ) { int z = 0 ; if ( n % 6 == 1 ) z = a ; else if ( n % 6 == 2 ) z = b - a ; else if ( n % 6 == 3 ) z = b - a ; else if ( n % 6 == 4 ) z = - a ; return z ; } public static void main ( String [ ] args ) { int a = 10 , b = 17 ; int n = 3 ; System . out . println ( nth_term ( a , b , n ) ) ; } }
public class GFG { static int findSubSequence ( String s , int num ) { int res = 0 ; int i = 0 ; while ( num != 0 ) { if ( num & 1 ) res += s . charAt ( i ) - '0' ; i ++ ; num = num >> 1 ; } return res ; } static int combineSubSequence ( String s ) { int n = s . length ( ) ; int c_sum = 0 ; int ran = ( 1 << n ) - 1 ; for ( int i = ran + 1 ; i < n ; i ++ ) c_sum += findSubSequence ( s , i ) ; return c_sum ; } public static void main ( String [ ] args ) { String s = "123" ; System . out . println ( combineSubSequence ( s ) ) ; } }
public class GFG { static int minimumCost ( int cost [ ] , int n ) { int dp1 = 0 ; int dp2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { dp1 = cost [ i ] + Math . min ( dp1 , dp2 ) ; dp2 = dp1 ; dp1 = dp0 ; } return Math . min ( dp1 , dp2 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 5 , 3 , 1 , 7 , 3 , 4 } ; int n = a . length ; System . out . println ( minimumCost ( a , n ) ) ; } }
public class GFG { static int countMultiples ( int n ) { return n / 3 + n / 7 - n / 21 ; } public static void main ( String [ ] args ) { int n = ( int ) ( countMultiples ( 25 ) ) ; System . out . println ( " Count ▁ = ▁ " + n ) ; } }
import java . util . * ; public class GFG { static int MOD = 26 ; static int [ ] freq = new int [ 26 ] ; static int maxLen = 0 ; static int n = str . length ( ) ; static void longSub ( char [ ] str , int k ) { freq [ str [ k ] - ' a ' ] ++ ; if ( freq [ str [ k ] - ' a ' ] > k ) { maxLen = i - start ; while ( freq [ str [ k ] - ' a ' ] > k ) { freq [ str [ start ] -- ; start = start + 1 ; } } } public static void main ( String [ ] args ) { char [ ] str = " babcaag " . toCharArray ( ) ; int k = 1 ; System . out . println ( " Length ▁ = ▁ " + maxLen ) ; int maxLen = 0 ; n = str . length ; for ( int i = 0 ; i < n ; i ++ ) { char ch = str [ i ] ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= 500 ) { ans += a [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Solution { public int digits ( int num ) { if ( num == 0 ) return 0 ; int [ ] a = new int [ 8 ] ; a [ 0 ] = '0' ; for ( int i = 0 ; i < 8 ; i ++ ) a [ i ] = num & 15 ; return a [ 8 ] + a [ 0 ] ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int num = 26 ; int out = sObj . digits ( num ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } if ( count < n ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } } }
public class GFG { static String longestString ( String str1 , String str2 ) { int count1 [ ] = new int [ 26 ] ; int count2 [ ] = new int [ 26 ] ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) count1 [ str1 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) count2 [ str2 . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 1 ; j < Math . min ( count1 [ i ] , count2 [ i ] ) + 1 ; j ++ ) result = result + ( char ) ( ' a ' ) ; } System . out . println ( result ) ; return " " ; } public static void main ( String [ ] args ) { String str1 = " geeks " ; String str2 = " cake " ; longestString ( str1 , str2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ )
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; int y = b [ i ] ; int z = a [ i ] ; for ( int j = 0 ; j < z ; j ++ ) { if ( x * a [ j ] < 0 ) { break ;
import java . util . * ; public class GFG { static void findTime ( int T [ ] , int K ) { int minutes = ( ( ( T [ 0 ] - '0' ) * 10 + ( T [ 1 ] - '0' ) * 10 + ( T [ 2 ] - '0' ) * 10 + ( T [ 3 ] - '0' ) ) * 10 + ( T [ 4 ] - '0' ) ; int min = minutes % 60 ; if ( min < 10 ) System . out . print ( "0 " + min ) ; else System . out . print ( min ) ; if ( min < 10 ) System . out . print ( "0" ) ; else System . out . print ( min ) ; if ( min < 10 ) System . out . print ( "0" ) ; else System . out . print ( min ) ; if ( min < 10 ) System . out . print ( "0" ) ; else System . out . print ( min ) ; } public static void main ( String [ ] args ) { int T
public class GFG { static int maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = ( int ) ( Math . pow ( 10 , m ) - 1 ) ; for ( int i = 0 ; i < n - m ; i ++ ) { product = product * ( int ) ( int ) ( str . charAt ( i ) - '0' ) ; sum = sum + ( int ) ( ( int ) ( str . charAt ( j ) - '0' ) ) ; } int maxSum = max ( maxSum , sum ) ; return maxSum ; } public static void main ( String [ ] args ) { String str = "3675356291" ; int m = 5 ; int maxProductSum ( String str , int m ) { int n = str . length ( ) ; int maxProd = ( int ) ( Math . pow ( 10 , m ) - 1 ) ; for ( int i = 0 ; i < n - m ; i ++ ) { product = product * ( int ) ( str . charAt ( i ) - '0' ) ; sum = sum + (
import java . util . * ; public class GFG { static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( n < 0 || m < 0 ) return Integer . MAX_VALUE ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + minCost ( cost , m - 1 , n - 1 ) ; } static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( n < 0 || m < 0 ) return Integer . MAX_VALUE ; else if ( m == 0 && n == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + minCost ( cost , m - 1 , n - 1 ) ; } static int minCost ( int cost [ ] [ ] , int m , int n ) { if ( cost [ 0 ] [ n ] == 0 ) return cost [ m ] [ n ] ; else return cost [ m ] [ n ] + minCost ( cost , m - 1 , n - 1 ) ; } public static void main ( String [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } System . out . println ( min ) ; } }
import
public class GFG { static int sumDivisibles ( int A , int B , int M ) { int sum = 0 ; for ( int i = A ; i <= B ; i ++ ) { if ( i % M == 0 ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int A = 6 , B = 15 ; int M = 3 ; System . out . println ( sumDivisibles ( A , B , M ) ) ; } }
import java . util . * ; public class GFG { static int countNumbersWith4 ( int n ) { if ( n < 4 ) return 0 ; int d = ( int ) Math . pow ( 10 , n ) ; int a [ ] = new int [ d + 1 ] ; a [ 0 ] = 0 ; if ( a [ 1 ] == 1 ) a [ 1 ] = 1 ; for ( int i = 2 ; i <= d ; i ++ ) a [ i ] = a [ i - 1 ] * 9 + ( int ) Math . pow ( 10 , i - 1 ) ; int p = ( int ) Math . pow ( 10 , d ) ; int msd = n / p ; if (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans = arr [ i ] ; } } System . out . println ( ans ) ; } }
public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int [ ] arr = { 40 , 30 , 35 , 80 , 100 } ; int n = arr . length ; findPostOrder (
public class GFG { static int countWays ( int n , int arr [ ] , int k ) { if ( k <= 0 || k >= n ) return 0 ; int s = set ( ) ; for ( int element : s ) s . add ( element ) ; if ( k <= 0 || k >= n ) return 0 ; return s - k ; } public static void main ( String [ ] args ) { int arr [ ] = { 100 , 200 , 400 , 50 } ; int k = 3 ; int n = arr . length ; System . out . println ( countWays ( n , arr , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static boolean isPrime ( int n ) { boolean flag = false ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) flag = true ; } return ( flag == 1 ) ; } static boolean isPerfectSquare ( int x ) { int sr = Math . sqrt ( x ) ; return ( sr - Math . floor ( sr ) == 0 ) ; } static boolean countInterestingPrimes ( int n ) { int answer = 0 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( isPrime ( i ) != null ) { int j = 1 ; while ( j * j * j * j <= i ) { if ( isPerfectSquare ( i - j * j * j * j * j ) ) answer ++ ; j ++ ; } } } return answer == 0 ; } public static void main ( String
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] w = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { w [ i ] = sc . nextInt ( ) ; } Arrays . sort ( w ) ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( w [ i ] == w [ i - 1 ] ) { count ++ ; } } if ( count == 1 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static int findNum ( int div [ ] , int rem [ ] , int N ) { int num = rem [ N - 1 ] ; int i = N - 2 ; while ( i >= 0 ) { num = num * div [ i ] + rem [ i ] ; i -= 1 ; } return num ; } public static void main ( String [ ] args ) { int div [ ] = { 8 , 3 } ; int rem [ ] = { 2 , 2 } ; int N = div . length ; System . out . println ( findNum ( div , rem , N ) ) ; } }
import java . util . * ; public class GFG { static void segregate0and1 ( int arr [ ] , int size ) { int type0 = 0 ; int type1 = size - 1 ; while ( type0 < type1 ) { if ( arr [ type0 ] == 1 ) { int arr [ type0 ] = arr [ type1 ] ; arr [ type0 ] = ( arr [ type1 ] == 1 ) ? arr [ type1 ] : arr [ type1 ] ; type1 -- ; } else { type0 ++ ; } } arr = new int [ arr . length ] ; segregate0and1 ( arr , arr_size ) ; System . out . print ( " Array ▁ after ▁ segregation ▁ is ▁ " ) ; for ( int i = 0 ; i < arr . length ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; for ( int i = 0 ; i < arr . length ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 1 , 0 , 1 , 1 , 1 } ; int size = arr .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; b [ i ] = s . charAt ( i ) - '0' ; c [ i ] = s . charAt ( i ) - '0' ; } int m = 0 ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = s . charAt ( i ) - '0' ; } for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] > 0 ) { m = Math . min ( m , d [ i ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( c [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] arr = new int [ h ] ; for ( int i = 0 ; i < h ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ h ] ; for ( int i = 0 ; i < h ; i ++ ) { ans [ i ] = arr [ i ] ; } int count = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( arr [ i ] == 0 ) { ans [ i ] = j ; count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean [ ] [ ] dp = new boolean [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == 1 || arr [ i ] == 2 ) continue ; dp [ i ] [ j ] = true ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] ) continue ; System . out . println ( " YES " ) ; } System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = a ; int min = h ; if ( e == 1 ) { min = a ; } else { min = e - min ; } if ( b == 1 ) { min = b ; } else { min = b - min ; } if ( c == 1 ) { min = c ; } else { min = c - min ; } if ( d == 1 ) { min = d ; } else { min = d - min ; } if ( e == 2 ) { min = e ; } else { min = e - min ; } System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } int count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } if ( count == 0 ) { System . out . println ( " March " ) ; } else { System . out . println ( " March " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ j ] ) { ans ++ ; j ++ ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == 0 && b == 0 ) { break ; } int c = 0 ; for ( int i = 0 ; i < a ; i ++ ) { for ( int j = 0 ; j < b ; j ++ ) { if ( i == j ) { System . out . print ( " ▁ " + ( i + 1 ) + " ▁ " ) ; c ++ ; } else { System . out . print ( " ▁ " + ( j + 1 ) + " ▁ " ) ; c -- ; } } System . out . println ( ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { b [ i ] = a [ i + 1 ] - a [ i ] ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { c [ i ] = a [ i + 1 ] - a [ i ] ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { d [ i ] = a [ i + 1 ] - a [ i ] ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( d [ i ] == 0 ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int MAX = 256 ; static int countPairs ( String s ) { int [ ] cnt = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) cnt [ s . charAt ( i ) - 97 ] ++ ; int ans = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) ans += cnt [ i ] * cnt [ i ] ; return ans ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( countPairs ( s ) ) ; } }
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( int n ) { for ( int i = 0 ; i < prime . length ; i ++ ) prime [ i ] = true ; prime [ 1 ] = False ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } } static void sortedArray ( int arr [ ] , int n ) {
import java . util . * ; public class GFG { static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static int createHash ( int hash1 , int maxElement ) { int prev , curr ; int hash1 = 0 , curr = 1 ; hash1 = ( int ) ( curr + prev ) ; hash1 += ( int ) ( curr ) ; while ( curr <= maxElement ) { int temp = curr + prev ; if ( temp <= maxElement ) hash1 ++ ; prev = curr ; curr = temp ; } return ( int ) ( hash1 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 3 , 6 , 5 , 6 , 5 , 5 } ; int n =
public class GFG { static void find_Area ( int a ) { int R = a * ( 2.0 - sqrt ( 2 ) ) ; int area = 3.14 * R * ( 2.0 - sqrt ( 2 ) ) ; return area ; } public static void main ( String [ ] args ) { int a = 4 , print_area = 3 ; System . out . println ( " Area ▁ of ▁ semicircle ▁ = ▁ " + ( find_Area ( a ) ) ) ; } }
import java . io . * ; public class GFG { static int findTripleples ( int a [ ] , int b [ ] , int c [ ] , int d [ ] , int x , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { int l = n ; int [ ] = new int [ n ] ; int [ ] [ ] d = new int [ n ] ; int n = 0 ; int k = 0 ; int l1 = 0 ; int n1 = 0 ; int n1 = 0 ; int n2 = 0 ; int n2 = 0 ; int n2 = 0 ; int n3 = 0 ; int n3 = 0 ; int n4 = 0 ; int n5 = 0 ; int n4 = 0 ; int n5 = 0 ; int n5 = 0 ; int n6 = 0 ; int n7 = 0 ; int n8 = 0 ; int n9 = 0 ; int n10 = 0 ; int n11 = 0 ; int n12 = 0 ; int n13 = 0 ; int n14 = 0 ; int n15 = 0 ; int n16 = 0 ; int n17 = 0 ; int n18 = 0 ; int n19 = 0 ; int
import java . util . * ; public class GFG { static int findSmallest ( String s , int q [ ] [ ] , int m ) { int N = s . length ( ) ; int H [ ] [ ] = new int [ N + 1 ] [ 26 ] ; for ( int i = 0 ; i < N + 1 ; i ++ ) { H [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j < 26 ; j ++ ) { H [ i ] [ j ] += H [ i - 1 ] [ j ] ; if ( H [ i ] [ j ] >= n ) { System . out . print ( ( char ) ( ' a ' + i ) ) ; break ; } } } for ( int j = 0 ; j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int min = Math . min ( a , b ) ; int max = Math . max ( a , b ) ; int ans = 0 ; for ( int i = min ; i <= max ; i ++ ) { if ( i % 2 == 0 ) { ans += i ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; if ( n % 3 == 0 ) { ans = 2 ; } else if ( n % 3 == 1 ) { ans = 1 ; } else { ans = 2 ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % i == 0 ) { System . out . print ( " ▁ " + arr [ i ] ) ; } } System . out . println ( ) ; } }
public class GFG { static void printPairs ( int arr [ ] , int n ) { Vector < Integer > v = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( arr [ i ] ) == Math . abs ( arr [ j ] ) ) v . add ( Math . abs ( arr [ i ] ) ) ; } } if ( v . size ( ) == 0 ) return ; v . sort ( ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) System . out . print ( - v . get ( i ) + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 8 , 9 , - 4 , 1 , - 8 , - 9 } ; int n = arr . length ; printPairs ( arr , n ) ; } }
public class GFG { static double doublefactorial ( int n ) { if ( n == 0 || n == 1 ) return 1 ; return n * doublefactorial ( n - 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " Double ▁ factorial ▁ is ▁ " + doublefactorial ( n - 2 ) ) ; } }
public class GFG { static boolean isPalindrome ( String str ) { int l = 0 , h = str . length ( ) - 1 ; while ( h > l ) { if ( str . charAt ( l ) != str . charAt ( h ) ) return false ; l = l + 1 ; h = h - 1 ; } return true ; } static int minRemovals ( String str ) { if ( str . length ( ) == 0 ) return 0 ; if ( isPalindrome ( str ) ) return 1 ; return 2 ; } public static void main ( String [ ] args ) { String str = "010010" ; System . out . println ( minRemovals ( "010010" ) ) ; System . out . println ( minRemovals ( "0100101" ) ) ; System . out . println ( minRemovals ( "01010" ) ) ; System . out . println ( minRemovals ( "01011" ) ) ; System . out . println ( minRemovals ( "01000" ) ) ; System . out . println ( minRemovals ( "01000" ) ) ; System . out . println ( minRemovals ( "01001" ) ) ; System . out . println ( minRemovals ( "01000" ) ) ; System . out . println ( minRemovals ( "01001" ) ) ; System . out . println ( minRemovals ( "01000" ) ) ; System . out . println ( minRemovals ( "01011
import java . io . * ; public class GFG { static int sumOfSubstrings ( int num ) { int n = num . length ; int sumofdigit [ ] = new int [ n ] ; sumofdigit [ 0 ] = num [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { numi = num ( num [ i ] ) ; sumofdigit . append ( ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ) ; } return sumofdigit [ n ] ; } public static void main ( String [ ] args ) { int num = "1234" ; System . out . println ( sumOfSubstrings ( num ) ) ; } }
public class GFG { static int findCountOfPairs ( int a , int b , int n ) { int ans = 0 ; ans += n * int ( a / n ) * int ( b / n ) ; ans += ( a / n ) * ( b % n ) ; ans += ( ( ( a % n ) + ( b % n ) ) / n ) ; ans += ( ( ( a % n ) + ( b % n ) ) / n ) ; return ans ; } public static void main ( String [ ] args ) { int a = 5 , b = 13 ; int n = 3 ; System . out . println ( findCountOfPairs ( a , b , n ) ) ; } }
public final class p020 { public static void main ( String [ ] args ) { System . out . println ( new p020 ( ) . run ( ) ) ; } private static final int LIMIT = 1000000 ; public String run ( ) { int maxnumer = 0 ; int maxdenom = 1 ; for ( int d = 1 ; d <= LIMIT ; d ++ ) { int n = d * 3 / 7 ; if ( d % 7 == 0 ) n -= 1 ; if ( n * maxdenom > d * maxnumer ) { maxnumer = n ; maxdenom = d ; } } return String . valueOf ( maxnumer ) ; } }
public class GFG { static boolean coef ( int n ) { int c [ ] = new int [ 100 ] ; c [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) c [ 1 + i ] = 1 ; for ( int j = 0 ; j < n ; j ++ ) c [ j ] = c [ j - 1 ] - c [ j ] ; c [ 0 ] = - c [ 0 ] ; return ( c [ n ] == - 1 ) ; } static boolean isPrime ( int n ) { int coef ( int n ) ; int c [ ] = new int [ 100 ] ; c [ 0 ] = c [ 0 ] + 1 ; c [ n ] = c [ n ] - 1 ; int i = n ; while ( i > - 1 && c [ i ] % n == 0 ) i = i - 1 ; return ( c [ n ] == - 1 ) ; } static boolean isPrime ( int n ) { int coef ( int n ) ; int c [ ] = new int [ 100 ] ; c [ 0 ] = c [
public class GFG { static int count_greater ( int arr [ ] , int n ) { int min = Integer . MAX_VALUE ; int counter = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] > min ) { counter ++ ; } if ( arr [ i ] <= min ) { min = arr [ i ] ; } } return counter ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 2 , 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; System . out . println ( count_greater ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= x ) { count ++ ; } } if ( count == 0 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( count ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { count += 1 ; } else if ( arr [ i ] == 0 ) { count += 1 ; } } if ( count == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int t = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] arr = new int [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } if ( t == 0 ) break ; int [ ] ans = new int [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { int x = sc . nextInt ( ) ; if ( arr [ x ] >= l ) { ans [ i ] = arr [ x ] - l ; } else { ans [ i ] = arr [ x ] + arr [ x ] - l ; } } int ans1 = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( ans [ i ] == 0 ) { ans1 = i ; break ; } } System . out . println ( ans1 ) ; } } }
public class GFG { static int minimumSwaps ( int arr [ ] ) { int count = 0 ; int i = 0 ; while ( i < arr . length ) { if ( arr [ i ] != i + 1 ) { while ( arr [ i ] != i + 1 ) { temp = 0 ; temp = arr [ arr [ i ] - 1 ] ; arr [ i ] - 1 ] = arr [ i ] ; arr [ i ] = temp ; count ++ ; } } i ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 1 , 5 } ; System . out . println ( minimumSwaps ( arr ) ) ; } }
import java . util . * ; public class GFG { static int MODULUS = 500500 ; static int MAX = 500500 ; static int [ ] TARGET = new int [ MAX ] ; static int [ ] heapq = new int [ MAX ] ; static int [ ] ans = new int [ MAX ] ; static void compute ( ) { TARGET = 500500 ; int MODULUS = 500500 ; isprime = Library . listPrimality ( 7376507 ) ; heapq [ 0 ] = 1 ; heapq [ 1 ] = heapq [ 0 ] ; ans [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) { int item = heapq . heappop ( heapq [ i ] ) ; ans [ i ] = ans [ i ] * item ; } } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static void findUniquePair ( int arr [ ] , int n ) { int XOR = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) XOR = XOR ^ arr [ i ] ; set_bit_no = XOR & ~ ( XOR - 1 ) ; x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ; else x = x ^ arr [ i ] ; } System . out . println ( " The ▁ unique ▁ pair ▁ is ▁ ( ▁ " + x + " , ▁ " + x + " ) ▁ " + " ▁ " + ( x + " ) " ▁ " + ( x + " ) " ▁ " + ( x + " ) " ▁ " + ( x + " ) " ▁ " + ( x + " ) " ▁ " + ( x + " ) " ▁ " + ( x + " ) " ▁ " + ( x + " ) "
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] == 1 ) { ok = false ; break ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean isMajority ( int a ) { int mp [ ] = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) mp [ i ] = i ; for ( int i = 0 ; i < a ; i ++ ) { if ( mp [ i ] >= mp [ i ] ) return true ; } return false ; } public static void main ( String [ ] args ) { int a = 2 , 3 , 9 , 2 , 2 ; System . out . println ( " Yes " ) ; int a = 2 , b = 2 ; System . out . println ( " No " ) ; int x = a , b = 2 ; System . out . println ( " Yes " ) ; int x = a , b = 2 ; System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ w + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; } } int max = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= w ; j ++ ) { if ( dp [ i ] [ j ] > max ) { max = dp [ i ] [ j ] ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( dp [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } } for ( int i = 0 ; i
public class GFG { static void printKMissing ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int i = 0 ; while ( i < n && arr [ i ] <= 0 ) i ++ ; int count = 0 ; int curr = 1 ; while ( count < k ) { System . out . print ( curr ) ; count ++ ; } arr = ( 2 , 3 , 4 ) ; n = arr . length ; k = 3 ; printKMissing ( arr , n , k ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 } ; int n = arr . length ; int k = 3 ; printKMissing ( arr , n , k ) ; } }
import java . util . * ; public class GFG { static void printNumbers ( int a [ ] , int n ) { HashMap < Integer , Integer > mpp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; for ( int j = 1 ; j * j > num ; j ++ ) { if ( j * j > num ) break ; if ( ( num % j ) != j ) { mpp . put ( j , mpp . get ( j ) + 1 ) ; } } } int maxi = 0 ; for ( int it : mpp . keySet ( ) ) { if ( mpp . get ( it ) == maxi ) { maxi = Math . max ( maxi , it ) ; } } for ( int it : maxi ) { System . out . print ( it + " ▁ " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 12 , 15 ,
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { count ++ ; } } if ( count % 2 == 0 ) { System . out . println ( " : ( " ) ; } else { System . out . println ( " : ( " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; min = a [ i ] ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > min ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static boolean checkIfStartsWithCapital ( String str ) { if ( str . charAt ( 0 ) >= ' A ' && str . charAt ( 0 ) <= ' Z ' ) return false ; else return true ; } static void check ( String str ) { if ( checkIfStartsWithCapital ( str ) ) System . out . println ( " Accepted " ) ; else System . out . println ( " Not ▁ Accepted " ) ; } public static void main ( String [ ] args ) { String str = " GeeksforGeeks " ; check ( str ) ; } }
public class GFG { static int getAvg ( int prev_avg , int x , int n ) { return ( ( prev_avg * n + x ) / ( n + 1 ) ) ; } static void streamAvg ( int arr [ ] , int n ) { int avg = 0 ; for ( int i = 0 ; i < n ; i ++ ) avg = getAvg ( avg , arr [ i ] , i ) ; System . out . println ( "Avg ▁ of ▁ " + i + " ▁ numbers ▁ is ▁ " + " ▁ " + " ▁ " + avg ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }
import java . util . * ; public class GFG { static int eulerlib ; static int [ ] primes ( int 999999 ) { int ans = 0 ; isprime = eulerlib . listPrimality ( 999999 ) ; primes = new int [ primes . length ] ; for ( int i = 0 ; i < primes . length ; i ++ ) { int sum = primes [ i ] ; int consec = 1 ; for ( int j = i + 1 ; j < primes . length ; j ++ ) { sum += primes [ j ] ; consec += 1 ; if ( sum >= len ( isprime ) ) break ; if ( isprime [ sum ] && consec > consecutive ) ans = sum ; consecutive = consec ; } } return ans ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int lis ( int arr [ ] , int n ) { int i , j , maxm = 0 , 0 , 0 ; lst = new int [ n ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( arr [ i ] > arr [ j ] && arr [ i ] < arr [ j ] + 1 ) { arr [ i ] = arr [ j ] + 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( maxm < lst [ i ] ) { maxm = lst [ i ] ; } } return maxm ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 } ; int n = arr . length ; System . out . println ( " Length ▁ of ▁ lst ▁ is ▁ " + lis ( arr , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( a * b > c * d ) { ans = 1 ; } else if ( a * b == c * d ) { ans = 2 ; } else { ans = 3 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void fix ( int A [ ] ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < A . length ; i ++ ) { s . add ( A [ i ] ) ; } for ( int i = 0 ; i < A . length ; i ++ ) { if ( i != A . length - 1 ) { s . add ( A [ i ] ) ; } else A [ i ] = - 1 ; } for ( int i = 0 ; i < A . length ; i ++ ) { if ( i != A . length - 1 ) { s . add ( A [ i ] ) ; } else A [ i ] = - 1 ; } } public static void main ( String [ ] args ) { int A [ ] = { - 1 , - 1 , 6 , 1 , 9 , 3 , 2 , - 1 , 4 , - 1 } ; System . out . println ( fix ( A ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { A [ i ] = sc . nextInt ( ) ; } int B [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { B [ i ] = sc . nextInt ( ) ; } int C [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { C [ i ] = sc . nextInt ( ) ; } int D [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { D [ i ] = sc . nextInt ( ) ; } int ans = Math . abs ( A [ 0 ] + A [ 1 ] - A [ 2 ] - A [ 3 ] ) ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { if ( Math . abs ( A [ i ] - A [ j ] ) < Math . abs ( B [ i ] - B [ j ] ) ) { ans = Math .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; if ( n == 0 && s == 0 ) break ; int [ ] [ ] dp = new int [ n + 1 ] [ s + 1 ] ; dp
import java . util . * ; public class GFG { static int mod = 1000000007 ; static long fact ( long n ) { long res = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res = res * i ; return res ; } static long nCr ( long n , long r ) { return fact ( n ) / ( fact ( r ) * fact ( n - r ) ) ; } static long CountSubset ( long arr [ ] , int n ) { long ans = ( long ) ( ( n - 1 ) /
import java . util . * ; public class GFG { static int MAX = 1000001 ; static int MAX_double = MAX * ( MAX ) ; static int MAX_int = MAX * ( MAX ) ; static int primeUpto [ ] = new int [ MAX_double ] ; static void SieveOfEratosthenes ( ) { isPrime = new boolean [ MAX_double ] ; isPrime [ 0 ] = false ; isPrime [ 1 ] = 0 ; for ( int i = 2 ; i * i <= MAX_double ;
import java . io . * ; public class GFG { static int countOperations ( int n ) { int i = 2 ; while ( ( i * i ) < n && ( n % i ) == 0 ) i ++ ; return ( 1 + ( n - i ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countOperations ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int l = a [ i ] ; int r = b [ i ] ; int c2 = c [ i ] ; int d = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( c2 == c [ j ] ) { d ++ ; } } if ( l == r ) { ans [ i ] = d ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] - ans [ i ] ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; System . out . println ( l * 2 + r * 2 ) ; } } }
import java . util . * ; public class GFG { static int LIMIT = 10000 ; static int MODULUS = 1000000007 ; static int count [ ] = new int [ LIMIT ] ; static int [ ] s = new int [ LIMIT ] ; static int [ ] prime = new int [ LIMIT ] ; static int [ ] count = new int [ LIMIT ] ; static int [ ] prime = new int [ LIMIT ] ; static int [ ] s = new int [ LIMIT ] ; static int [ ] prime = new int [ LIMIT ] ; static int [ ] s = new int [ LIMIT ] ; static int [ ] prime_ = new int [ LIMIT ] ; static int [ ] s_prime = new int [ LIMIT ] ; static int [ ] s_prime = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [ LIMIT ] ; static int [ ] s_prime_ = new int [
public class GFG { static int countOddNumber ( int row_num ) { int count = 0 ; while ( row_num != 0 ) { count ++ ; row_num >>= 1 ; } return ( 1 << count ) ; } static void gouldSequence ( int n ) { for ( int row_num = 0 ; row_num != 0 ; row_num >>= 1 ) { System . out . print ( countOddNumber ( row_num ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 16 ; gouldSequence ( n ) ; } }
public class GFG { static void findMin ( int V ) { deno = new int [ ] { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 } ; int n = deno . length ; int ans [ ] = new int [ ] { 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 } ; int i = n - 1 ; while ( i >= 0 ) { while ( V >= deno [ i ] ) { V -= deno [ i ] ; ans . append ( deno [ i ] ) ; } i -- ; } for ( int i = 0 ; i < ans . length ; i ++ ) System . out . print ( ans [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 93 ; System . out . println ( " Following ▁ is ▁ minimal ▁ number ▁ number ▁ of ▁ change ▁ for ▁ " + n + " : ▁ " ) ; findMin ( n ) ; } }
import java . util . * ; public class GFG { static int compute ( int [ ] arr ) { int ans = arr [ 0 ] ; for ( int i = 1 ; i < arr . length ; i ++ ) { ans = Math . max ( ans , arr [ i ] ) ; } return ans ; } static int [ ] arr ; public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int count ( int arr [ ] , int n , int x ) { if ( x == 1 ) { int ans = Math . pow ( 2 , n ) - 1 ; return ans ; } int count = 0 ; int i ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % x == 0 ) count ++ ; } ans = Math . pow ( 2 , count ) - 1 ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 5 } ; int n = arr . length ; int x = 1 ; System . out . println ( count ( arr , n , x ) ) ; } }
public class GFG { static int findEle ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == sum - arr [ i ] ) return arr [ i ] ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 6 } ; int n = arr . length ; System . out . println ( findEle ( arr , n ) ) ; } }
public class GFG { static String findExtraCharacter ( String strA , String strB ) { int m1 [ ] = { 0 , 0 } ; for ( int i = 0 ; i < strA . length ( ) ; i ++ ) { if ( i == 0 ) { m1 [ i ] ++ ; } else { m1 [ i ] -- ; } } for ( int h1 = 0 ; h1 < strB . length ( ) ; h1 ++ ) { if ( m1 [ h1 ] == 1 ) { return h1 ; } } return strB ; } public static void main ( String [ ] args ) { String strA = " abcd " ; String strB = " cbdad " ; System . out . println ( findExtraCharacter ( strA , strB ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } ans = Math . max ( ans , max ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int maxSumPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 ) { int max1 = - Integer . MAX_VALUE ; int max2 = - Integer . MAX_VALUE ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( arr1 [ i ] > max1 ) max1 = arr1 [ i ] ; } for ( int i = 0 ; i < n2 ; i ++ ) { if ( arr2 [ i ] > max2 ) max2 = arr2 [ i ] ; } return max1 + max2 ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 10 , 2 , 3 } ; int arr2 [ ] = { 3 , 4 , 7 } ; int n1 = arr1 . length ; int n2 = arr2 . length ; System . out . println ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) ; } }
import java . util . * ; public class GFG { static int operations ( int op [ ] , int n , int k ) { int i , count = 0 ; int nVal = 0 ; int minimum = Integer . MAX_VALUE ; for ( i = 0 ; i < n ; i ++ ) { nVal += op [ i ] ; minimum = Math . min ( minimum , nVal ) ; if ( ( k + nVal ) <= 0 ) return ( i + 1 ) ; } if ( nVal >= 0 ) return - 1 ; int times = ( k - ( times * n ) ) ; int k = ( k - ( times * n ) ) ; count = ( times * n ) ; while ( k > 0 ) { for ( i = 0 ; i < n ; i ++ ) k = k + op [ i ] ; count ++ ; while ( k > 0 ) { for ( i = 0 ; i < n ; i ++ ) k = k + op [ i ] ; count ++ ; } } return count ; }
public class GFG { static int MAX = 100010 ; static int isPerfectCube ( int x ) { int cr = ( int ) Math . pow ( x , ( 1 / 3 ) ) ; int rslt = x * cr * cr ; return x * cr * cr == x ? x : 0 ; } static void printSum ( int L , int R ) { int sum = 0 ; for ( int i = 1 ; i <= 100001 ; i ++ ) { pref [ i ] = pref [ i - 1 ] + isPerfectCube ( i ) ; } } static void printSum ( int L , int R ) { int sum = pref [ R ] - pref [ L - 1 ] ; System . out . print ( sum + " ▁ " ) ; } public static void main ( String [ ] args ) { int L = 4 , R = 4 ; int arr [ ] = { 1 , 10 } ; for ( int i = 0 ; i < arr . length ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int centered_cube ( int n ) { return ( 2 * n + 1 ) * ( n * n + n + 1 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( n + " th ▁ Centered ▁ cube ▁ number : ▁ " + centered_cube ( n ) ) ; n = 10 ; System . out . println ( n + " th ▁ Centered ▁ cube ▁ number : ▁ " + centered_cube ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] arr = s . toCharArray ( ) ; int [ ] arr1 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = arr [ i ] - '0' ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr1 [ i ] - '0' ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] == 0 ) { count ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] == 0 ) { count ++ ; } } if ( count == 0 ) { System . out
public class GFG { static int nthTerm ( int N ) { int nth = 0 ; for ( int i = 0 ; i < N ; i ++ ) nth += Math . pow ( i , i ) ; return nth ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . * ; public class GFG { static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; int pow = 1 ; while ( pow < y ) { pow *= x ; } return ( pow == y ) ; } public static void main ( String [ ] args ) { int x = 10 , y = 1 ; System . out . println ( isPower ( x , y ) ? " True " : " False " ) ; if ( isPower ( 1 , 20 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 1 , 128 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( " True " ) ; else System . out . println ( " False " ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( " False " ) ; else System . out . println ( " False " ) ; } }
import java . util . * ; public class GFG { static boolean isPower ( int x , int y ) { if ( x == 1 ) return ( y == 1 ) ; else if ( x == 1 ) return false ; if ( isPower ( 1 , 20 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 1 , 20 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 30 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; if ( isPower ( 2 , 128 ) ) System . out . println ( 1 ) ; else System . out . println ( 0 ) ; return ( isPower ( 2 , 30 ) ) ; } public static void main ( String [ ] args ) { int x = 10 , y = 1 ; System . out . println ( isPower ( x , y ) ? 1 : 0 ) ; if ( isPower ( 1 , 20 ) ) System . out . println ( 1 ) ; else System . out . println ( 0
public class GFG { static int minimumValue ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; int answer = 0 ; for ( int i = 0 ; i < k ; i ++ ) answer += arr [ i ] * arr [ i ] ; return answer * ( 2 * k - 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 21 , 5 , 3 , 8 } ; int k = 3 ; int n = arr . length ; System . out . println ( minimumValue ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String
public class GFG { static int countWays ( int N ) { int E = ( N * ( N - 1 ) ) / 2 ; if ( N == 1 ) return 0 ; return ( int ) Math . pow ( 2 , E - 1 ) ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( countWays ( N ) ) ; } }
public class GFG { static int findLCM ( int arr [ ] , int n ) { int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) lcm = ( lcm * arr [ i ] ) / Math . gcd ( arr [ i ] , lcm ) ; return lcm ; } static int countNumbers ( int arr [ ] , int n , int l , int r ) { int lcm = findLCM ( arr , n ) ; int count = ( r / lcm ) - ( ( l - 1 ) / lcm ) ; System . out . println ( count ) ; return ( r / lcm ) - ( ( l - 1 ) / lcm ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 } ; int n = arr . length ; int l = 1 , r = 10 ; countNumbers ( arr , n , l , r ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { ans ++ ; } } System . out . println ( ans )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] * a [ i + 1 ] > a [ i + 1 ] * a [ i + 1 ] ) { ans = " NO " ; break ; } } System . out . println ( ans ) ; } }
public class GFG { static int MinDeletion ( int a [ ] , int n ) { HashMap < Integer , Integer > map = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { map . put ( a [ i ] , map . get ( a [ i ] ) + 1 ) ; } int ans = 0 ; for ( int key = 0 ; key <= n ; key ++ ) { int x = key ; frequency = value ; if ( x <= frequency ) ans += ( frequency - x ) ; else ans += frequency ; } return ans ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 2 , 3 , 4 , 4 , 4 , 5 } ; int n = a . length ; System . out . println ( MinDeletion ( a , n ) ) ; } }
public class GFG { static int fromEnd ( String inp [ ] , int del11 ) { int inp1 = inp [ 0 ] - 1 ; int inp2 = inp [ 0 ] ; inp2 = inp [ del11 ] ; return inp1 + inp2 ; } static int fromEnd ( String inp [ ] , int del11 ) { int inp1 = inp [ 0 ] - 1 ; int inp2 = inp [ 0 ] ; int del1 = 3 ; System . out . println ( " num _ after _ deleting _ from _ starting " , fromStart ( inp , del11 ) ) ; System . out . println ( " num _ after _ deleting _ from _ ending " , fromEnd ( inp , del11 ) ) ; return inp1 + inp2 ; } public static void main ( String [ ] args ) { String inp [ ] = { " inp " , " inp " , " inp " } ; int in1 = 1234 ; int inp2 = 1234 ; System . out . println ( " num _ after _ deleting _ from _ ending " , fromStart ( inp , in1 ) ) ; System . out . println ( " num _ after _ deleting _ from _ ending " , from
public class GFG { static boolean nondecdigits ( int n ) { int x = 0 ; for ( int x = 0 ; x < n ; x ++ ) { int no = x ; int prev_dig = 11 ; boolean flag = true ; while ( no != 0 ) { if ( prev_dig < no % 10 ) { flag = false ; break ; } prev_dig = no % 10 ; no /= 10 ; } if ( flag == true ) break ; } return ( x ) ; } public static void main ( String [ ] args ) { int n = 200 ; System . out . println ( nondecdigits ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int ans = Math . abs ( a - b ) ; if ( e == c ) { ans = Math . abs ( a - b ) ; } else if ( e == d ) { ans = Math . abs ( a - b ) ; } else { ans = Math . abs ( a - b ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( x * 10 + y * 2 < 22 ) { ans = 2 * x * 10 + y * 2 ; } else { ans = 2 * y * 2 + x * 2 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { if ( b [ i ] == 0 ) { System . out . println ( " W " ) ; } else { System . out . println ( " B " ) ; } } else { if ( b [ i ] == 1 ) { System . out . println ( " W " ) ; } else { System . out . println ( " B " ) ; } } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = s . charAt ( i ) - '0' ; if ( x == 0 ) { max = Math . max ( max , 2 * ( Math . abs ( s . charAt ( i ) - s . charAt ( i + 1 ) - s . charAt ( i + 1 ) ) ) ) ; min = Math . min ( min , 2 * ( Math . abs ( s . charAt ( i ) - s . charAt ( i + 1 ) - s . charAt ( i + 1 ) ) ) ) ; } else { max = Math . max ( max , 2 * ( Math . abs ( s . charAt ( i ) - s . charAt ( i + 1 ) - s . charAt ( i + 1 ) ) ) - 1 ) ;
import java . util . * ; public class GFG { static int countDistictSubarray ( int arr [ ] , int n ) { HashMap < Integer , Integer > vis = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) vis . put ( arr [ i ] , 1 ) ; int k = len ( vis ) ; int [ ] vid = new int [ k ] ; int ans = 0 ; int right = 0 ; window = 0 ; for ( int left = 0 ; left < n ; left ++ ) { while ( right < n && vis . get ( arr [ right ] ) == 1 ) { vis . put ( arr [ right ] , 1 ) ; } if ( vis . get ( arr [ left ] ) == 0 ) { ans ++ ; } right ++ ; } int vid [ ] = new int [ k
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int max = s ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; max = Math . max ( max , a + b ) ; } System . out . println ( max ) ; } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; } static int primeBitsInRange ( int l , int r ) { int count = 0 ; for ( int i = l ; i * i <= r ; i ++ ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; } return count ; } static int primeBitsInRange ( int l , int r ) { int count = 0 ; for ( int i = l ; i * i <= r ; i ++ ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; } return count ; } public static void main ( String [ ] args ) { int l = 6 , r = 10 ; System . out . println ( primeBitsInRange ( l ,
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { n &= ( n - 1 ) ; count ++ ; } return count ; } static int pairs ( int arr [ ] , int n , int k ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = countSetBits ( arr [ i ] ) + countSetBits ( arr [ j ] ) ; if ( sum == k ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; int k = 4 ; System . out . println ( pairs ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans ++ ; } } if ( ans % 2 == 0 ) { System . out . println ( " errorgorn " ) ; } else { System . out . println ( " maomao90" ) ; } } }
public class GFG { static int xorCalc ( int k ) { if ( k == 1 ) return 2 ; if ( ( k + 1 ) & k ) return k / 2 ; return 1 ; } public static void main ( String args [ ] ) { int k = 31 ; System . out . println ( xorCalc ( k ) ) ; } }
import java . util . * ; public class Solution { public boolean isPerfectSquare ( int [ ] num ) { int low = 1 , high = num . length ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int mid_square = mid * mid ; if ( mid_square == num ) return true ; else if ( mid_square < num ) low = mid + 1 ; else high = mid - 1 ; } return false ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] num = { 16 , 2 } ; int out = sObj . isPerfectSquare ( num ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; if ( ( a + b ) % 2 == 0 && ( c % 2 ) == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum2 += a [ i ] ; } System . out . println ( sum2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( d [ i ] > 0 ) { ans += n - i - 1 ; } } System . out . println ( ans ) ; } }
public class GFG { static int findElement ( int arr [ ] , int ranges [ ] , int index ) { for ( int i = 0 ; i < arr . length ; i ++ ) { int left = ranges [ i ] [ 0 ] ; int right = ranges [ i ] [ 1 ] ; if ( left <= index && right >= index ) { if ( index == left ) index = right ; else index = index - 1 ; } return arr [ index ] ; } arr = new int [ ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int rotations = 2 ; int ranges [ ] = { 0 , 2 , 3 , 4 , 5 } ; int index = 1 ; System . out . println ( findElement ( arr , ranges , rotations , index ) ) ; } }
import
import java . io . * ; public class GFG { static boolean isExists ( int a [ ] , int n ) { int freq [ ] = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; sum += a [ i ] ; } if ( sum % 2 == 0 ) { if ( freq [ sum / 2 ] != 0 ) { return true ; } } return false ; } public static void main ( String [ ] args ) { int a [ ] = { 5 , 1 , 2 , 2 } ; int n = a . length ; if ( isExists ( a , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static double areaOfKite ( double d1 , double d2 ) { double area = ( d1 * d2 ) / 2 ; return area ; } public static void main ( String [ ] args ) { double d1 = 4 , d2 = 6 ; System . out . println ( " Area ▁ of ▁ Kite ▁ = ▁ " + areaOfKite ( d1 , d2 ) ) ; } }
import
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n % 2 == 0 ) { n /= 2 ; } System . out . println ( " YES " ) ; } }
public class GFG { static boolean productEqual ( int n ) { if ( n < 10 ) return false ; int prodOdd = 1 ; prodEven = 1 ; while ( n > 0 ) { int digit = n % 10 ; prodOdd *= digit ; n = n / 10 ; if ( n == 0 ) break ; digit = n % 10 ; prodEven *= digit ; n = n / 10 ; } if ( prodOdd == prodEven ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 4324 ; if ( productEqual ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { int k = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( d [ j ] > 0 ) { k
public class GFG { static void checkEVENodd ( int arr [ ] , int n , int l , int r ) { if ( arr [ r ] == 1 ) { System . out . println ( " odd " ) ; } else { System . out . println ( " even " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 1 } ; int n = arr . length ; checkEVENodd ( arr , n , 1 , 3 ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( x - r < 0 || y - r < 0 ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static int findPrime ( int n ) { int num = n + 1 ; while ( num > 0 ) { if ( isPrime ( num ) ) return num ; num ++ ; } return 0 ; } static int minNumber ( int arr [ ] ) { int s = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) s += arr [ i ] ; if ( isPrime ( s ) ) return 0 ; num = findPrime ( s ) ; return num - s ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 12 } ; System . out . println ( minNumber ( arr ) ) ; } }
import java . util . * ; public class GFG { static int compositeProduct ( int arr [ ] , int n ) { int max_val = max ( arr ) ; int prime [ ] = new int [ max_val + 1 ] ; prime [ 0 ] = true ; prime [ 1 ] = true ; prime [ 2 ] = true ; prime [ 3 ] = true ; prime [ 4 ] = 5 ; prime [ 5 ] = 6 ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == 0 ) { for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } } product *= arr [ 2 ] ; return product ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( compositeProduct ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x == 0 && y == 0 ) break ; int [ ] arr = new int [ y ] ; for ( int i = 0 ; i < y ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = arr [ 0 ] ; for ( int i = 1 ; i < y ; i ++ ) { ans = ans - arr [ i ] ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; if ( s . equals ( " JAPANESE " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " adinm " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " kimam " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " jap " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " kimam " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " jap " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " kimam " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " kimam " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " jap " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " kimam " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " kimam " ) ) { System . out . println ( " KOREAN " ) ; } else if ( s . equals ( " kimam " ) ) { System . out
public class GFG { static int findSum ( int arr [ ] , int n , int left , int right ) { int k = right - left ; int d = arr [ 1 ] - arr [ 0 ] ; int ans = arr [ left - 1 ] * ( k + 1 ) ; ans = ans + ( d * ( k * ( k + 1 ) ) ) / 2 ; return ans + ( d * ( k * ( k + 1 ) ) ) / 2 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 } ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( findSum ( arr , n , arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) ) ; } }
public class GFG { static int maxResult ( int n , int a , int b , int c ) { int maxVal = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n - i + 1 ; j ++ ) { int z = ( n - ( i + j ) ) / c ; if ( floor ( z ) == ceil ( z ) ) { int x = i / a ; int y = j / b ; maxVal = Math . max ( maxVal , x + y + int ( z ) ) ; } } } return maxVal ; } public static void main ( String [ ] args ) { int n = 10 ; int a = 5 , b = 3 ; int c = 4 ; System . out . println ( maxResult ( n , a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } }
import java . util . * ; public class GFG { static int fact ( int n ) { int ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) ans *= i ; return ( ans ) ; } static int numberOfPossiblePallindrome ( String str , int n ) { HashMap < String , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( str . substring ( i , i + 1 ) ) ) mp . put ( str . substring ( i , i + 1 ) , mp . get ( str . substring ( i , i + 1 ) ) +
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( count == n ) { System . out . println ( "1" ) ; } else { System . out . println ( "2" ) ; } } }
public class GFG { static int toggleLastMBits ( int n , int m ) { int num = ( 1 << m ) - 1 ; return ( n ^ num ) ; } public static void main ( String [ ] args ) { int n = 107 ; int m = 4 ; System . out . println ( toggleLastMBits ( n , m ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' A ' ) sum ++ ; } if ( sum < 0 ) { System . out . println ( " NO " ) ; continue ; } if ( sum == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int first_substring ( String s ) { int n = s . length ( ) ; int c = 0 ; int mpp [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' ▁ ' || s . charAt ( i ) == ' # ' ) continue ; for ( int j = 0 ; j < n ; j ++ ) { if ( s . charAt ( j ) == ' ▁ ' ) continue ; s1 = s . charAt ( j + 1 ) ; s2 = s1 ; s1 = s1 ; s1
public class GFG { static int countConsecutive ( int n ) { String s = String . valueOf ( n ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 44522255 ; System . out . println ( countConsecutive ( n ) ) ; } }
public class GFG { static void findAngle ( int n ) { int interiorAngle = ( n - 2 ) * 180 / n ; int exteriorAngle = 360 / n ; System . out . println ( " Interior ▁ angle : ▁ " + interiorAngle ) ; System . out . println ( " Exterior ▁ angle : ▁ " + exteriorAngle ) ; } public static void main ( String [ ] args ) { int n = 10 ; findAngle ( n ) ; } }
public class GFG { static int nDigitPerfectSquares ( int n ) { System . out . print ( Math . pow ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n - 1 ) ) ) , 2 ) ) ; System . out . print ( Math . ceil ( Math . sqrt ( Math . pow ( 10 , n ) ) - 1 , 2 ) ) ; } public static void main ( String [ ] args ) { int n = 4 ; nDigitPerfectSquares ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int n = s . length ( ) ; if ( n > s . length ( ) ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' b ' || s . charAt ( i ) == ' c ' || s . charAt ( i ) == ' d ' || s . charAt ( i ) == ' e ' || s . charAt ( i ) == ' i ' || s . charAt ( i ) == ' o ' || s . charAt ( i ) == ' u ' || s . charAt ( i ) == ' y ' ) { count ++ ; } } System . out . println ( count ) ; } }
import
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == ' J ' ) { ans += s ; } else { ans += arr [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i
import java . util . * ; public class GFG { static class pair { int data ; pair ( int data ) { this . data = data ; } } static void printArr ( int a [ ] , int n ) { int i = 0 ; while ( i < n ) { System . out . print ( a [ i ] + " ▁ " ) ; i ++ ; } } static void convertArr ( int head ) { int [ ] arr = new int [ n ] ; int index = 0 ; while ( i < n ) { arr [ index ++ ] = arr [ i ] ; } System
public class GFG { static int nonDecNums ( int n ) { int [ ] a = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { a [ 0 ] [ i ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] [ 9 ] = 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 8 - 1 ; j >= 0 ; j -- ) { a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; } } return a [ n ] [ 0 ] ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( " Non - decreasing ▁ digits ▁ = ▁ " + nonDecNums ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % n == 0 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Solution { public int minMoves ( int [ ] nums ) { if ( nums . length == 0 ) return 0 ; int min_num = nums [ 0 ] ; for ( int i = 1 ; i < nums . length ; i ++ ) { if ( nums [ i ] == nums [ i - 1 ] ) { min_num = Math . min ( nums [ i - 1 ] , min_num ) ; } } return min_num ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 } ; int out = sObj . minMoves ( nums ) ; System . out . println ( out ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a < 0 && b < 0 ) { System . out . println ( " Negative " ) ; } else if ( a < 0 && b < 0 ) { System . out . println ( " Negative " ) ; } else if ( a < 0 && b < 0 ) { System . out . println ( " Negative " ) ; } else { System . out . println ( " Negative " ) ; } } }
import java . io . * ; public class GFG { static int firstSetBit ( int n ) { int x = n & ( n - 1 ) ; return ( n ^ x ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( firstSetBit ( n ) ) ; } }
import java . io . * ; public class GFG { static int MAX_CHAR = 256 ; static int maximumChars ( String str ) { int n = str . length ( ) ; int res = - 1 ; int firstInd [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) first_ind [ str . charAt ( i ) ] = i ; for ( int i = 0 ; i < n ; i ++ ) { first_ind [ str . charAt ( i ) ] = i ; } return res ; } public static void main ( String [ ] args ) { String str1 = " abba " ; System . out . println ( maximumChars ( str1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ d ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max = Math . max ( max , a [ i ] [ 1 ] - a [ i ] [ 0 ] ) ; } System . out . println ( max ) ; } }
import java . io . * ; public class GFG { static int findArea ( int a ) { int area = 5 * ( int ) Math . sqrt ( 3 ) * a * a ; return area ; } static void findVolume ( int a ) { int volume = ( ( 5 / 12 ) * ( 3 + Math . sqrt ( 5 ) ) * a * a * a ) ; System . out . println ( " Area : " + " ▁ " + ( volume ) ) ; System . out . println ( " Volume : " + " ▁ " + ( volume ) ) ; } public static void main ( String [ ] args ) { int a = 5 ; System . out . println ( " Area : ▁ " + findArea ( a ) ) ; System . out . println ( " Volume : ▁ " + findVolume ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt
import java . io . * ; import java . util . * ; public class Main { public static void main ( String [ ] args ) { MyScanner sc = new MyScanner ( ) ; out = new PrintWriter ( new BufferedOutputStream ( System . out ) ) ; int n = sc . nextInt ( ) ; int ans = n / 2 ; out . println ( ans ) ; out . close ( ) ; } static class MyScanner { BufferedReader br ; StringTokenizer st ; public MyScanner ( ) { br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; } String next ( ) { while ( st == null || ! st . hasMoreElements ( ) ) { try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double . parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = " " ; try { str = br . readLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return str ; } } }
public class GFG { static int solve ( int M , int N , int s ) { if ( N % s == 0 ) N = N / s ; else N = ( N / s ) + 1 ; if ( M % s == 0 ) M = M / s ; else M = ( M / s ) + 1 ; return M * N ; } public static void main ( String [ ] args ) { int N = 12 , M = 13 , s = 4 ; System . out . println ( solve ( M , N , M , s ) ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int lcm ( int a , int b ) { return ( a * b ) / gcd ( a , b ) ; } static int countPairs ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) { if ( lcm ( arr [ i ] , arr [ j ] ) == gcd ( arr [ i ] , arr [ j ] ) ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ 6 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < 6 ; i ++ ) { for ( int j = i + 1 ; j < 6 ; j ++ ) { sum += a [ j ] ; } } if ( sum == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . io . * ; public class GFG { static int _popcnt32 ( int number ) { int counter = 0 ; while ( number > 0 ) { if ( number % 2 == 1 ) counter ++ ; number = number / 2 ; } return counter ; } static int maximize ( int a ) { int n = _popcnt32 ( a ) ; int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) res = res | ( 1 << ( 32 - i ) ) ; return Math . abs ( res ) ; } public static void main ( String [ ] args ) { int a = 1 ; System . out . println ( maximize ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] > k ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a1 = sc . nextInt ( ) ; int a2 = sc . nextInt ( ) ; int ans = 0 ; if ( a1 == 1 && a2 == 1 ) { ans = 0 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 0 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 1 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 0 ; } else if ( a1 == 1 && a2 == 1 ) { ans = 0 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Solution { public int xorQueries ( int [ ] arr , int queries ) { int pref [ ] = new int [ arr . length ] ; for ( int e = 0 ; e < arr . length ; e ++ ) pref [ e ] = e ^ pref [ e - 1 ] ; int ans = 0 ; for ( int l = 0 ; l < arr . length ; l ++ ) ans += pref [ l + 1 ] ^ pref [ l ] ; return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] arr = { 1 , 3 , 4 , 8 } ; int queries = [ 0 ] , out = sObj . xorQueries ( arr , queries ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static String encodedChar ( char str [ ] , int k ) { int len = 0 ; int i = 0 ; while ( i < str . length ) { int temp = " " ; while ( i < str . length ( ) && str [ i ] >= ' a ' && str [ i ] <= ' z ' ) temp += str [ i ] ; while ( i < str . length ( ) && str [ i ] >= '1' && str [ i ] <= '9' ) { int temp = temp * 10 + str [ i ] - '0' ; i += 1 ; } for ( int j = 1 ; j < freq + 1 ; j ++ ) { int temp = temp * 10 + str [ j ] - '0' ; i += 1 ; } for ( int j = 1 ; j < freq ; j ++ ) { int temp = temp * 10 + str [
import java . io . * ; public class GFG { static void printPossible ( int a , int b , int c ) { if ( ( a + b + c ) % 2 != 0 || a + b < c ) System . out . println ( " NO " ) ; else System . out . println ( " YES " ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 ; int c = 2 ; printPossible ( a , b , c ) ; } }
public class GFG { static int summation ( int n ) { int abs_sum = n * ( n + 1 ) / 2 ; int sign = 1 ; if ( ( n + 1 ) % 2 == 0 ) { sign = 1 ; } int result_sum = sign * abs_sum ; return result_sum ; } public static void main ( String [ ] args ) { int N = 2 ; System . out . println ( summation ( N ) ) ; } }
import java . io . * ; public class GFG { static void sortSquare ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = arr [ i ] * arr [ i ] ; Arrays . sort ( arr ) ; } public static void main ( String [ ] args ) { int arr [ ] = { - 6 , - 3 , - 1 , 2 , 4 , 5 } ; int n = arr . length ; System . out . println ( " Before ▁ sort " ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . println ( " After ▁ sort " ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . println ( " After ▁ sort " ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . println ( " After ▁ sort " ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; System . out . println ( " After ▁ " ) ; for ( int i = 0 ; i <
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == t ) { ok = false ; break ; } } if ( ok ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 1 ) { ans = Math . min ( ans , a [ i ] ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean isTriangular ( int num ) { if ( num < 0 ) return false ; int c = ( - 2 * num ) ; int b = 1 , a = 1 ; int d = ( b * b ) - ( 4 * a * c ) ; if ( d < 0 ) return false ; if ( root1 > 0 && Math . floor ( root1 ) == root1 ) return true ; if ( root2 > 0 && Math . floor ( root2 ) == root2 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 55 ; if ( isTriangular ( n ) ) System . out . println ( " The ▁ number ▁ is ▁ a ▁ triangular ▁ number " ) ; else System . out . println ( " The ▁ number ▁ is ▁ not �
public class GFG { static void printNumberWithDR ( int k , int d ) { if ( d == 0 && k != 1 ) System . out . print ( - 1 , end = " " ) ; else System . out . print ( d + " ▁ " ) ; k -= 1 ; while ( k > 0 ) System . out . print ( 0 , end = " " ) ; } public static void main ( String [ ] args ) { int k = 4 , d = 4 ; printNumberWithDR ( k , d ) ; } }
public class GFG { static void rotateMatrix ( int mat [ ] [ ] ) { int i = N - 1 ; while ( i >= 0 ) { int j = N - 1 ; while ( j >= 0 ) { System . out . print ( mat [ i ] [ j ] + " ▁ " ) ; j -- ; } System . out . print ( ) ; i -- ; } } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; rotateMatrix ( mat ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 500 == 0 ) { System . out . println ( n ) ; } else { System . out . println ( ( n / 500 ) * 500 ) ; } } }
public class GFG { static int getProduct ( int n ) { int product = 1 ; while ( n != 0 ) { product = product * ( n % 10 ) ; n = n / 10 ; } return product ; } public static void main ( String [ ] args ) { int n = 4513 ; System . out . println ( getProduct ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int b = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; if ( b * 5 + r * 3 + s * 3 + c * 3 ) { System . out . println ( t * 5 + r * 3 + s * 3 + c * 3 ) ; break ; } else if ( b * 5 + r * 3 + s * 3 + c * 3 ) { System . out . println ( t * 5 + r * 3 + s * 3 + c * 3 ) ; break ; } else if ( b * 5 + r * 3 + s * 3 + c * 3 ) { System . out . println ( t * 5 + r * 3 + s * 3 + c * 3 ) ; break ; } else if ( b * 5 + r * 3 + s * 3 + c * 3 ) { System . out . println ( t * 5 + r * 3 + s * 3 + c * 3 ) ; break ; } else if ( b * 5 + r * 3 + s * 3 + c * 3 ) { System . out . println ( t * 5 + r * 3 + s * 3 + c * 3 ) ; break ; } else if ( b * 5 + r * 3 + s * 3 + c * 3 ) { System . out . println ( t * 5 + r * 3 + s * 3 + c *
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] % mod == 0 ) { ans += a [ i ] [ j ] % mod ; } } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int length_rope ( int r ) { return ( ( 2 * PI * r ) + 6 * r ) ; } public static void main ( String [ ] args ) { int r = 7 ; System . out . println ( length_rope ( r ) ) ; } }
public class GFG { static int reverseDigits ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num / 10 ; } return rev_num ; } static boolean isPalindrome ( int n ) { int rev_n = reverseDigits ( n ) ; if ( rev_n == n ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 4562 ; if ( isPalindrome ( n ) == 1 ) System . out . println ( " Is ▁ " + n + " a ▁ Palindrome ▁ number
import java . util . * ; public class Solution { public int addStrings ( int num1 , int num2 ) { int res [ ] = new int [ num1 ] ; int pos1 = num1 , pos2 = num2 ; int carry = 0 ; while ( pos1 >= 0 || pos2 >= 0 ) { int digit1 = digit2 ; if ( pos1 >= 0 ) { digit1 = ( num1 [ pos1 ] - '0' ) ; } if ( pos2 >= 0 ) { digit2 = ( num2 [ pos2 ] - '0' ) ; } res [ pos1 ] = ( digit1 + digit2 + carry ) % 10 ; carry = ( digit1 + digit2 + carry ) / 10 ; pos1 -= 1 ; pos2 -= 1 ; } return ( ' ' + res [ 0 ] ) ; } public static void main ( String [ ] args ) { Solution sObj = new
public class GFG { static boolean isPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) sum = sum + i + n / i ; i += 1 ; } return ( sum == n && n != 1 ) ; } public static void main ( String [ ] args ) { int n = 2 ; for ( int n = 10000 ; n > 0 ; n = n * n ) { if ( isPerfect ( n ) ) System . out . print ( n + " ▁ is ▁ a ▁ perfect ▁ number " ) ; } } }
import java . io . * ; public class GFG { static boolean isPower ( int n ) { if ( n <= 1 ) return true ; for ( int x = 2 ; x <= ( int ) ( Math . sqrt ( n ) ) ; x ++ ) { int p = x ; while ( p <= n ) p = p * x ; if ( p == n ) return true ; } return false ; } public static void main ( String [ ] args ) { int i ; int n ; int x ; System . out . println ( isPower ( n ) ? " ▁ " : " ▁ " ) ; } }
import java . io . * ; public class GFG { static boolean isPower ( int n ) { if ( n == 1 ) return true ; for ( int x = 2 ; x <= ( int ) ( Math . sqrt ( n ) ) ; x ++ ) { int y = 2 ; int p = ( int ) ( Math . pow ( x , y ) ) ; while ( p <= n && p > 0 ) { if ( p == n ) return true ; y = y + 1 ; p = ( int ) ( p * y ) ; } } return false ; } public static void main ( String [ ] args ) { int i , j , k ; int n = 2 ; System . out . println ( isPower ( n ) ? " ▁ " : " ▁ " ) ; } }
public class GFG { static void findTwoNumbers ( int sum , int gcd ) { if ( __gcd ( gcd , sum - gcd ) == gcd && sum != gcd ) System . out . println ( " a ▁ = ▁ " + ( int ) Math . min ( gcd , sum - gcd ) + " , ▁ b ▁ = ▁ " + ( int ) Math . min ( gcd , sum - gcd ) ; else System . out . println ( - 1 ) ; } public static void main ( String [ ] args ) { int sum = 8 ; int gcd = 2 ; findTwoNumbers ( sum , gcd ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int rb = sc . nextInt ( ) ; int cd = sc . nextInt ( ) ; int cr = sc . nextInt ( ) ; int crp = sc . nextInt ( ) ; int ans = 0 ; while ( true ) { if ( cr == n ) { System . out . println ( - 1 ) ; break ; } if ( crp == rb ) { System . out . println ( - 1 ) ; break ; } crp ++ ; } if ( cr == n ) { System . out . println ( - 1 ) ; break ; } if ( crp == rb ) { System . out . println ( - 1 ) ; break ; } if ( crp == cr || crp == cr ) { System . out . println ( - 1 ) ; break ; } if ( crp == cr || crp == cr ) { System . out . println ( - 1 ) ; break ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( n % a == 0 ) { ans = ( n / a ) * b ; } else { ans = ( n / a + 1 ) * b ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int totalPairs ( int arr [ ] , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = bin ( arr [ i ] ) . count ( '1' ) ; m . put ( x , m . get ( x ) + 1 ) ; } int result = 0 ; for ( int it : m . keySet ( ) ) { result += ( m . get ( it ) * ( m . get ( it ) - 1 ) ) / 2 ; } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 7 , 5 , 3 , 9 , 1 , 2 } ; int n = arr . length ; System . out . println ( totalPairs ( arr , n ) ) ; } }
public class GFG { static int center_hexadecagonal_num ( int n ) { return 8 * n * n - 8 * n + 1 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( n + " th ▁ centered ▁ hexadecagonal ▁ " + " number ▁ : ▁ " + center_hexadecagonal_num ( n ) ) ; n = 12 ; System . out . println ( n + " th ▁ centered ▁ hexadecagonal ▁ " + " number ▁ : ▁ " + center_hexadecagonal_num ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] * 4 > min ) { min = arr [ i ] * 4 ; } } System . out . println ( min ) ; } }
import java . io . * ; public class GFG { static int countNumbers ( int L , int R , int K ) { if ( K == 9 ) K = 0 ; int totalnumbers = R - L + 1 ; int factor9 = totalnumbers / 9 ; int rem = totalnumbers % 9 ; int ans = factor9 ; for ( int i = R - rem ; i <= R - rem ; i ++ ) { rem1 = i % 9 ; if ( rem1 == K ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int L = 10 , R = 22 ; int K = 3 ; System . out . println ( countNumbers ( L , R , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int ans = ( a * b + c * d ) ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Solution { public int [ ] Solve ( int [ ] A ) { int ans = 2 ; int n = A . length ; if ( n <= 2 ) return n ; int llap [ ] = new int [ n ] ; Arrays . sort ( A ) ; for ( int j = n - 2 ; j >= 0 ; j -- ) { int i = j - 1 ; int k = j + 1 ; while ( i >= 0 && k < n ) { if ( A [ i ] + A [ k ] == 2 * A [ j ] ) llap [ j ] = Math . max ( llap [ j ] , llap [ j ] ) ; else i -= 1 ; k ++ ; } } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] A = { 9 , 4 , 7 , 2 , 10 } ; int [ ] A = { 9 , 4 , 7
public class GFG { static int minimumChanges ( int arr [ ] , int n , int d ) { int maxFreq = - 2147483648 ; int freq [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int a0 = arr [ i ] - i * d ; if ( a0 < 0 ) { freq [ a0 ] += 1 ; } else { freq [ a0 ] = 1 ; } if ( freq [ a0 ] > maxFreq ) maxFreq = freq [ a0 ] ; } return ( n - maxFreq ) ; } public static void main ( String [ ] args ) { int n = 5 ; int d = 1 ; int arr [ ] = { 1 , 3 , 3 , 4 , 6 } ; int ans = minimumChanges ( arr , n , d ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] < min ) { min = b [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] < min ) { min = b [ i ] ; } } System . out . println ( min ) ; } }
import java . util . * ; public class GFG { static int countPoints ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; int j = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) count ++ ; else j ++ ; } } return count ; } public static void main ( String [ ] args ) { int x = 1 , y = 4 ; int a [ ] = { 1 , 5 } ; int n = a . length ; int b [ ] = { 1 , 1 , 2 } ; int m = b . length ; System . out . println ( countPoints ( n , m , a , b , x , y ) ) ; } }
public class GFG { static long multiplyWith3Point5 ( long x ) { return ( x << 1 ) + x + ( x >> 1 ) ; } public static void main ( String [ ] args ) { long x = 4 ; System . out . println ( multiplyWith3Point5 ( x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int minIdx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; minIdx = i ; } } if ( minIdx != - 1 ) { System . out . println ( - 1 ) ; } else { System
public class GFG { static int longestSubstring ( String s ) { int cnt = 1 ; int maxi = 1 ; int n = s . length ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i - 1 ) ) { cnt ++ ; } else maxi = Math . max ( cnt , maxi ) ; cnt = 1 ; } maxi = Math . max ( cnt , maxi ) ; return maxi ; } public static void main ( String [ ] args ) { String s = " ccccdeededff " ; System . out . println ( longestSubstring ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ 50 ] ; for ( int i = 0 ; i < 50 ; i ++ ) { arr [ i ] = k / 50 ; } int ans = 0 ; for ( int i = 0 ; i < 50 ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } }
public class GFG { static int zeroUpto ( int digits ) { int first = ( int ) ( Math . pow ( 10 , digits ) - 1 ) / 9 ; int second = ( int ) ( Math . pow ( 9 , digits ) - 1 ) / 8 ; return 9 *
import java . io . * ; public class GFG { static int cone ( int a ) { if ( a < 0 ) return - 1 ; int r = ( a * Math . sqrt ( 2 ) ) / 3 ; int h = ( 2 * a ) / 3 ; return ( 2 * a ) / 3 ; } public static void main ( String [ ] args ) { int a = 5 , print = ( 2 * a ) / 3 ; System . out . println ( cone ( a ) ) ; } }
import java . util . * ; public class GFG { static boolean Prime ( int n ) { if ( n == 1 ) return false ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; } static int checkSumPrime ( String str ) { int sum = 0 ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) sum += Math . abs ( str . charAt ( i - 1 ) - str . charAt ( i ) ) ; if ( Prime ( sum ) ) return true ; else return false ; } static int Prime ( String str ) { int sum = 0 ; for ( int i = 1 ; i < str . length ( ) ; i ++ ) sum += Math . abs ( str . charAt ( i - 1 ) - str . charAt ( i ) ) ; if ( Prime ( sum ) ) return true ; else return false ; } public static void main ( String [ ] args ) { String str = " " ; int n = 142 ; String str = " " ; int s =
import java . io . * ; public class GFG { static int sum ( int n ) { if ( n < 2 ) return 1 ; else return 1 / n + ( sum ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( "3 : . 3f " . format ( sum ( n ) ) ) ; System . out . println ( " { : . 3f " . format ( sum ( n ) ) ; } } }
public class GFG { static int countElements ( int p [ ] , int n ) { int ans = 0 ; for ( int i = 1 ; i <= n - 1 ; i ++ ) { if ( p [ i - 1 ] > p [ i ] && p [ i ] > p [ i + 1 ] ) ans ++ ; else if ( p [ i - 1 ] < p [ i ] && p [ i ] < p [ i + 1 ] ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int p [ ] = { 2 , 5 , 1 , 3 , 4 } ; int n = p . length ; System . out . println ( countElements ( p , n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; if ( s . equals ( t ) ) { System . out . println ( " = " ) ; } else { System . out . println ( " < " ) ; } } }
import java . io . * ; public class GFG { static double findVolume ( int l , int b , int h ) { return ( ( l * b * h ) / 2 ) ; } public static void main ( String [ ] args ) { int l = 18 , b = 12 ; int h = 9 ; System . out . println ( " Volume ▁ of ▁ triangular ▁ prism : ▁ " + findVolume ( l , b , h ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - ' A ' ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] >= k ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int compute ( ) { int i = 286 ; int j = 166 ; int k = 144 ; while ( true ) { triangle = i * ( i + 1 ) / 2 ; pentagon = j * ( j * 3 - 1 ) / 2 ; int min = triangle , pentagon = ( int ) Math . min ( triangle , pentagon , Math . min ( j * 2 - 1 ) ) ; if ( min == triangle ) { i += 1 ; if ( minimum == triangle ) { j += 1 ; if ( minimum == pentagon ) k ++ ; } } if ( minimum == triangle ) i += 1 ; if ( minimum == triangle ) i += 1 ; } if ( minimum == triangle ) return triangle ; if ( minimum == triangle ) return i ; return - 1 ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int maxPrimefactorNum ( int N ) { if ( N < 2 ) return 0 ; int arr [ ] = new int [ N + 1 ] ; int prod = 1 ; int res = 0 ; int p = 2 ; while ( p * p <= N ) { if ( arr [ p ] == true ) { for ( int i = p * 2 ; i <= N ; i += p ) arr [ i ] = False ; prod *= p ; if ( prod > N ) return res ; res ++ ; } p ++ ; } return res ; } public static void main ( String [ ] args ) { int N = 500 ; System . out . println ( maxPrimefactorNum ( N ) ) ; } }
import java . util . * ; public class GFG { static boolean checkDivisors ( int a [ ] , int n ) { int X = Math . max ( a . length , a . length ) ; int b [ ] = new int [ n ] ; for ( int i = 1 ; i <= Math . sqrt ( X ) ; i ++ ) { if ( X % i == 0 ) b [ i ] = i ; if ( X / i != i ) b [ i ] = X / i ; } if ( b [ n ] != a [ n ] ) return false ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != a [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 1 , 2 , 12 , 48 , 6 , 4 , 24
public class GFG { static void subArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) { for ( int k = i ; k <= j ; k ++ ) { System . out . print ( arr [ k ] + " ▁ " ) ; } System . out . println ( " \n " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( " All ▁ Non - empty ▁ Subarrays " ) ; subArray ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . io . * ; public class GFG { static int maxSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] * i ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 6 , 1 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
public class GFG { static int maxSum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) sum += a [ i ] ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 2 , 1 , 4 , 5 } ; int n = arr . length ; System . out . println ( maxSum ( arr , n ) ) ; } }
public class GFG { static int findAnswer ( int n , int arr [ ] ) { Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = n / 2 ; i < n ; i ++ ) sum += ( ( arr [ i ] + arr [ n - i - 1 ] ) * ( arr [ i ] + arr [ n - i - 1 ] ) ) ; return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 53 , 28 , 143 , 5 } ; int n = arr . length ; System . out . println ( findAnswer ( n , arr ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int sum = arr [ 0 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] != arr [ i + 1 ] ) sum = sum + arr [ i + 1 ] ; } return sum ; } static void main ( ) { int arr [ ] = { 1 , 2 , 3 , 1 , 1 , 4 , 5 , 6 } ; int n = arr . length ; System . out . println ( findSum ( arr , n ) ) ; } }
import java . util
import java . util
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] + b [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void printRatio ( int a , int b , int c , int d ) { if ( b * c > a * d ) { swap ( c , d ) ; swap ( a , b ) ; } lcm = ( int ) ( a * c ) / ( int ) ( b * x ) ; int x = lcm / c ; int b = ( int ) ( b * x ) ; int y = lcm / c ; int d = ( int ) ( d * y ) ; int k = Math . gcd ( b , d ) ; int b_ = ( b / k ) ; int d = d / k ; int k_ = ( int ) ( d / k ) ; int b = ( b / k ) ; int d = d / k ; System . out . println ( b + " : " + d ) ; } public static void main ( String [ ] args ) { int a = 4 , b = 3 , c = 2 ; int d = 2 ; printRatio ( a , b , c , d ) ; } }
public class GFG { static int maxsum_SIS ( int arr [ ] , int n ) { int max_sum = 0 ; int current_sum = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i - 1 ] < arr [ i ] ) current_sum = current_sum + arr [ i ] ; else max_sum = max ( max_sum , current_sum ) ; current_sum = arr [ i ] ; } return max_sum ; } static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( " Maximum ▁ sum ▁ : ▁ " + maxsum_SIS ( arr , n ) + " , ▁ " + " \n " + " Maximum ▁ sum : ▁ " + maxsum_SIS ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int GCD ( int a , int b ) { if ( b == 0 ) return a ; return GCD ( b , a % b ) ; } static int findMaxSumUtil ( int arr [ ] , int n ) { int maxElement = findMaxSumUtil ( arr , n ) ; return ( maxElement * n ) ; } static int findMaxSum ( int arr [ ] , int n ) { int maxElement = findMaxSumUtil ( arr , n ) ; return ( maxElement * n ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 8 , 20 , 12 , 36 } ; int n = arr . length ; System . out . println ( findMaxSum ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { while ( b != 0 ) { int t = b ; b = a % b ; a = t ; } return a ; } static int findMinDiff ( int a , int b , int x , int y ) { int g = gcd ( a , b ) ; int diff = Math . abs ( x - y ) % g ; return Math . min ( diff , g - diff ) ; } public static void main ( String [ ] args ) { int a = 20 , b = 52 , x = 7 ; System . out . println ( findMinDiff ( a , b , x , y ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int w1 = sc . nextInt ( ) ; int h1 = sc . nextInt ( ) ; int w1 = sc . nextInt ( ) ; if ( x <= w1 && y <= h1 && x <= w1 && y <= h1 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static boolean divisibleby37 ( int n ) { int l = n ; if ( n == 0 ) return true ; if ( l % 3 == 1 ) n = "00" + n ; l += 2 ; while ( l != 0 ) { int group = n [ l - 3 ] ; l = l - 3 ; gSum = gSum + group ; } if ( gSum >= 1000 ) return ( divisibleby37 ( "8955795758" ) ) ; else return ( gSum % 37 == 0 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( divisibleby37 ( "8955795758" ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( x >= n || y >= n ) { ans = - 1 ; } else { if ( x - n + 1 <= y ) { ans = x - n + 1 ; } else { ans = y - n + 1 ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int lcs ( int X , int Y , int m , int n ) { int [ ] L = new int [ n + 1 ] ; int [ ] [ ] R = new int [ m + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) L [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j -
import java . io . * ; public class GFG { static int numberOfSquares ( int base ) { base = ( base - 2 ) ; base = base / 2 ; return ( base * ( base + 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int base = 8 ; System . out . println ( numberOfSquares ( base ) ) ; } }
import java . io . * ; public class GFG { static int rmsValue ( int arr [ ] , int n ) { double square = 0.0 ; double mean = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) square += ( arr [ i ] * 2 ) ; mean = ( square / ( float ) n ) ; return ( mean ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 4 , 6 , 8 } ; int n = arr . length ; System . out . println ( " { : 4 f } " . format ( rmsValue ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [
import
public class GFG { static int n = 6 ; static int m = 6 ; static int
public class GFG { static void FindPoints ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int x4 , int y4 ) { x5 = Math . max ( x1 , x3 ) ; y5 = Math . max ( y1 , y3 ) ; x6 = Math . min ( x2 , x4 ) ; y6 = Math . min ( y2 , y4 ) ; if (
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int x = 0 ; int y = 0 ; int x2 = 0 ; int y2 = 0 ; int x3 = 0 ; int y3 = 0 ; int x4 = 0 ; int y4 = 0 ; int x5 = 0 ; int y5 = 0 ; int x6 =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; min = a [ i ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < min ) { max = min ; ans = i ; } } System . out . println ( ans ) ; } }
public class GFG { static int knapSack ( int W , int wt [ ] , int val [ ] , int n ) { int maxratio = - ( int ) Math . max ( Math . max ( W , wt [ W ] ) , maxratio ) ; int maxindex = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( val [ i ] / wt [ i ] ) > maxratio ) { maxratio = ( val [ i ] / wt [ i ] ) ; maxindex = i ; } } return ( W * maxratio ) ; } public static void main ( String [ ] args ) { int W = 5 , wt [ ] = { 6 , 7 , 9 , 8 } ; int n = val . length ; System . out . println ( knapSack ( W , wt , val , n ) ) ; } }
import java . util . * ; public class GFG { static void AlternateRearrange ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int v1 = arr [ 0 ] , v2 = arr [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { v1 . append ( arr [ i ] ) ; } else { v2 . append ( arr [ i ] ) ; } } int index = 0 ; i = 0 ; j = 0 ; flag = new boolean [ n ] ; if ( arr [ 0 ] % 2 == 0 ) flag = true ; while ( index < n ) { if ( flag == true ) arr [ index ] = v1 . indexOf ( arr [ i ] ) ;
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; if ( A <= B && B <= C ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class GFG { static int decToBinary ( int n ) { int binaryNum [ ] = new int [ 32 ] ; int i = 0 ; while ( n > 0 ) { binaryNum [ i ] = n % 2 ; n = n / 2 ; i ++ ; } binary = " " ; for ( i = 0 ; i < n - binaryNum + 1 ; i ++ ) { int j = 0 ; while ( j < binaryNum . length ) { int k = binaryNum [ j ] ; binary += k ; } if ( j == 0 ) { res += 1 ; j
public class GFG { static void makearrayequal ( int arr [ ] , int n ) { int x = 0 ; for ( int i = 0 ; i < n ; i ++ ) x += arr [ i ] & 1 ; System . out . println ( Math . min ( x , n - x ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 3 , 2 , 1 } ; int n = arr . length ; makearrayequal ( arr , n ) ; } }
import java . util . * ; public class Solution { public int findKthLargest ( int [ ] nums , int k ) { shuffle ( nums ) ; return nums . length - 1 , nums [ ] = nums [ nums . length - 1 ] ; } static int quickSelection ( int [ ] nums , int start , int end , int k ) { if ( start > end ) return ( int ) ( ' inf ' ) ; int pivot = nums [ end ] ; int left = start ; for ( int i = start ; i < end ; i ++ ) { if ( nums [ i ] <= pivot ) { nums [ i ] = nums [ i ] ; nums
public class GFG { static boolean isDivisible ( int n ) { int temp = n ; while ( n > 0 ) { int k = n % 10 ; if ( temp % k == 0 ) return false ; n /= 10 ; } return true ; } public static void main ( String args [ ] ) { int n = 9876543 ; System . out . println ( isDivisible ( n ) ) ; } }
public class GFG { static boolean isDivisible ( int n ) { int temp = n ; int sum = 0 ; while ( n > 0 ) { int k = n % 10 ; sum += k ; n /= 10 ; } if ( temp % sum == 0 ) return " YES " ; return " NO " ; } public static void main ( String [ ] args ) { int n = 123 , print = 0 ; System . out . println ( isDivisible ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a > b ) { System . out . println ( " EQUAL " ) ; } else if ( a < b ) { System . out . println ( " NOT " ) ; } else { System . out . println ( " GIV " ) ; } } }
public class GFG { static int calculateAreaSum ( int l , int b ) { int size = 1 ; int maxSize = Math . min ( l , b ) ; int totalArea = 0 ; for ( int i = 1 ; i <= maxSize ; i ++ ) totalArea += ( ( l - size + 1 ) * ( b - size + 1 ) ) ; int area = ( totalArea * size * size ) ; totalArea += area ; size += 1 ; return totalArea ; } public static void main ( String [ ] args ) { int l = 4 , b = 3 ; System . out . println ( calculateAreaSum ( l , b ) ) ; } }
public class GFG { static void arrange ( int N ) { if ( N == 1 ) { System . out . print ( "1" ) ; return ; } if ( N == 2 || N == 3 ) { System . out . print ( " - 1" ) ; return ; } int even = - 1 ; int odd = - 1 ; if ( N % 2 == 0 ) even = N ; else odd = N ; while ( odd >= 1 ) { System . out ( odd , end = " ▁ " ) ; odd = odd - 2 ; } while ( even >= 2 ) { System . out ( even , end = " ▁ " ) ; even = even - 2 ; } if ( odd >= 2 ) { System . out . print ( even + " ▁ " ) ; even = even - 2 ; } } public static void main ( String [ ] args ) { int N = 5 ; arrange ( N ) ; } }
import java . io . * ; public class GFG { static int findMinEqualSums ( int a [ ] , int N ) { int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) sum += a [ i ] ; sum = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum = sum + a [ i ] ; } sum = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum = sum - a [ i ] ; } sum = 0 ; int max = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum = sum + a [ i ] ; } sum = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum = sum + a [ i ] ; } sum = 0 ; int max = Integer . MAX_VALUE ; for ( int i = 0 ; i < N - 1 ; i ++ ) { sum = sum + a [ i ] ; } sum = 0 ; max = Integer . MAX_VALUE ; for ( int i = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n == 1 || n == 2 ) { System . out . println ( "1" ) ; } else { System . out . println ( "2" ) ; } } } }
import java . io . * ; public class GFG { static int findOptimalSolution ( int a [ ] , int N ) { Arrays . sort ( a ) ; int points = 0 ; for ( int i = 0 ; i < N ; i ++ ) points += a [ i ] * i ; return points ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 2 , 3 , 9 } ; int N = a . length ; System . out . println ( findOptimalSolution ( a , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } if ( max == min ) { System . out . println ( " - 1 ▁ - 1" ) ; } else { System . out . println ( max + " ▁ " + min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum <= n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int getPairs ( int a [ ] ) { int count = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { for ( int j = 0 ; j < a [ i ] ; j ++ ) { if ( a [ i ] < a [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 4 , 3 , 1 } ; System . out . println ( getPairs ( a ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int ans = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } else { ans += count ; } } if ( k == 0 ) { System . out . println ( ans ) ; } else { System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { ok = false ; break ; } } if ( ok ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int N = 10000 ; static int MOD = 1000000007 ; static int F [ ] = new int [ N ] ; static void precompute ( ) { F [ 1 ] = 2 ; F [ 2 ] = 3 ; F [ 3 ] = 4 ; for ( i = 4 ; i < N ; i ++ ) F [ i ] = ( F [ i - 1 ] + F [ i - 2 ] ) % MOD ; } static int n = 8 ; static void precompute ( ) { System . out . println ( F [ n ] ) ; } public static void main ( String [ ] args ) { int n = 8 ; precompute ( ) ; System . out . println ( F [ n ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) ans ++ ; } System . out . println ( ans ) ; } } }
public class GFG { static int CeilIndex ( int A [ ] , int l , int r , int key ) { while ( r - l > 1 ) { int m = l + ( r - l ) / 2 ; if ( A [ m ] >= key ) r = m ; else l = m ; } return r ; } static int LongestIncreasingSubsequenceLength ( int A [ ] , int size ) { int tailTable [ ] = new int [ size + 1 ] ; int len = 0 ; tailTable [ 0 ] = A [ 0 ] ; len = 1 ; for ( int i = 1 ; i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . abs ( x [ i - 1 ] - x [ j ] ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] > 0 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j ] ) ; ans = Math . max ( ans , dp [ i ] [ j ] ) ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int MAX = 10 ; static int [ ] [ ] [ ] map ; static int [ ] [ ] ans ; static int [ ] [ ] [ ] map ; static int factorial ( int n ) { int result = 0 ; while ( n != 0 ) { result += n % 10 ; n /= 10 ; } return result ; } static int get_chain_length ( int n ) { int seen = 0 ; while ( seen . add ( n ) ) { n = factorial ( n ) ; if ( n % 10 != 0 ) { return len ( seen ) ; } } return len ( seen ) ; } static int factorize ( int n ) { int result = 0 ; while ( n != 0 ) { result += n % 10 ; n /= 10 ; } return result ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static int colourVisible ( int height [ ] , int colour [ ] , int K ) { int arr [ ] = new int [ K + 1 ] ; int i = K - 2 ; while ( i >= 0 ) { if ( height [ i ] > max ) { max = height [ i ] ; arr [ colour [ i ] ] = 1 ; } i -- ; } for ( i = 1 ; i <= K ; i ++ ) { if ( arr [ i ] == 1 ) { visible += 1 ; } } return visible ; } public static void main ( String [ ] args ) { int height [ ] = { 3 , 5 , 1 , 2 , 3 } ; int colour [ ] = { 1 , 2 , 3 , 4 , 3 } ; int K = height . length ; System . out . println ( colourVisible ( height , colour , K ) ) ; } }
import java . io . * ; public class GFG { static boolean checkPowerof8 ( int n ) { int i = log ( n , 8 ) ; return ( i - trunc ( i ) < 0.000001 ) ; } public static void main ( String [ ] args ) { int n = 65 ; if ( checkPowerof8 ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == b ) { System . out . println ( ( a + b ) / 4 ) ; } else { System . out . println ( ( a + b ) / 4 ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] [ ] map = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( map [ i ] [ j ] > max ) { max = map [ i ] [ j ] ; } } } System . out . println ( max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= 1 ) { ans = Math . max ( ans , arr [ i ] ) ; } } System . out . println ( ans ) ; } } }
public class GFG { static int countWays ( int n , int m ) { int count [ ] = new int [ n + 2 ] ; for ( int i = 1 ; i <= n ; i ++ ) { count [ i ] = 0 ; } count [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i > m ) { count [ i ] = count [ i - 1 ] + count [ i - m ] ; } else { count [ i ] = 1 ; } } return count [ n ] ; } public static void main ( String [ ] args ) { int n = 7 ; int m = 4 ; System . out . println ( " Number ▁ of ▁ ways ▁ = ▁ " + countWays ( n , m ) ) ; } }
import java . util . * ; public class GFG { static void bomb_required ( int n ) { System . out . print ( n + n / 2 ) ; for ( int i = 2 ; i <= n ; i ++ ) System . out . print ( i + " ▁ " ) ; for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( i + " ▁ " ) ; for ( int i = 2 ; i <= n ; i ++ ) System . out . print ( i + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 2 ; int n = 2 ; int n1 = 2 ; int n2 = 2 ; int n3 = 3 ; int n4 = 4 ; int n5 = 5 ; int n6 = 6 ; int n7 = 7 ; int n8 = 8 ; int n9 = 9 ; int n10 = 10 ; int n11 = 11 ; int n12 = 12 ; int n13 = 13 ; int n14 = 14 ; int n15 = 15 ; int n16 = 16 ; int n17 = 17 ; int n18 = 19 ; int n19 = 18 ; int n20 = 19 ; int n21 = 19 ; int n22 = 19 ; int n24 = 19 ; int n25 = 19 ; int n26 = 19 ; int n27 = 19 ; int n28 = 19 ; int n29 = 19 ; int n30 = 19 ; int n31 = 11 ; int n32 = 17 ; int n33 = 19 ; int n34 = 19 ; int n40 = 19 ; int n25 = 19 ; int n31 = 11 ; int n32 = 19 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( ( n + 1 ) & - ( n + 1 ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' || s . charAt ( i ) == '1' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; if ( n == 0 && x == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } } }
import java . util . * ; public class GFG { static int MAX = 100 ; static int recur ( int ind , int cnt , int last , int a [ ] , int n , int k , int dp [ ] [ ] ) { if ( cnt == k ) return 0 ; if ( ind == n ) return - 10 * recur ( i + 1 , cnt + 1 , i , a , n , k , dp ) ; dp [ ind ] [ cnt ] = Math . max ( dp [ ind ] [ cnt ] , recur ( i + 1 , cnt + 1 , i , a , n , k , dp ) ) ; dp [ ind ] [ cnt ] = ans ; return dp [ ind ] [ cnt ] ; } public static void main ( String [ ] args ) { int a [ ] = {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double [ ] arr = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextDouble ( ) ; } Arrays . sort ( arr ) ; double min = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } System . out . println ( min ) ; } }
import java . util . * ; public class GFG { static int equivalentBase4 ( int bin ) { if ( bin == "00" ) return 0 ; if ( bin == "01" ) return 1 ; if ( bin == "10" ) return 2 ; if ( bin == "11" ) return 3 ; if ( bin == '0' ) return 2 ; if ( bin == '1' ) return 3 ; return " Yes " ; } static boolean isDivisibleBy5 ( int bin ) { int l = bin ; if ( ( l % 2 ) == 1 ) bin = '0' + bin ; int even_sum = 0 ; int even_digit = 1 ; for
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { min = Math . min ( min , b [ i ] ) ; } } System . out . println ( min ) ; } }
import
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = ( x - a ) % b ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == k ) { count ++ ; } } if ( count == n ) { System . out . println ( - 1 ) ; } else { System . out . println ( count ) ; } } }
public class GFG { static int fun ( int n ) { return n & ( n - 1 ) ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( " The ▁ number ▁ after ▁ unsetting ▁ the ▁ rightmost ▁ set ▁ bit " + " ▁ is ▁ unsetting ▁ the ▁ rightmost ▁ set ▁ bit " + " ▁ is ▁ set ▁ bit ▁ " + fun ( n ) ) ; } }
public class GFG { static long LongestFibSubseq ( int [ ] A , int n ) { HashSet < Integer > S = new HashSet < Integer > ( ) ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int x = A [ j ] ; int y = A [ i ] + A [ j ] ; int length = 2 ; while ( y > 0 ) { z = x + y ; x = y ; y = z ; length ++ ; maxLen = Math . max ( maxLen , length ) ; } } } return maxLen ; } public static void main ( String [ ] args ) { int A [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = A . length ; System . out . println ( LongestFibSubseq ( A , n ) ) ; } }
import java . util . * ; public class GFG { static int countPairs ( int a [ ] , int b [ ] , int n , int m ) { int cnt = 0 ; HashMap < Integer , Integer > s = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { int sum = a [ i ] + b [ j ] ; if ( sum != 1 ) { cnt ++ ; s . put ( sum , 1 ) ; } } } return cnt ; } public static void main ( String [ ] args ) { int a [ ] = { 12 , 2 , 7 } ; int n = a . length ; int b [ ] = { 4 , 3 , 8 } ; int m = b . length ; System . out . println ( countPairs ( a , b , n , m ) ) ; } }
import java . util . * ; public class GFG { static boolean check ( int a [ ] , int y ) { int sum = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { int x = Math . sqrt ( a [ i ] ) ; if ( Math . floor ( x ) == Math . ceil ( x ) ) sum += a [ i ] ; } if ( sum % y == 0 ) return true ; else return false ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 3 , 4 , 9 , 10 } ; int x = 13 ; if ( check ( a , x ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; a [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] [ 0 ] = sc . nextInt ( ) ; b [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < q ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] == - 1 ) { System . out . println ( - 1 ) ; return ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b [ i ] [
import java . io . * ; public class GFG { static void calculate_min_sum ( int a [ ] , int n ) { Arrays . sort ( a ) ; int min_sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) min_sum += Math . abs ( a [ i ] - a [ i - 1 ] ) ; return min_sum ; } static void calculate_max_sum ( int a [ ] , int n ) { int a [ ] = new int [ n ] ; int max_sum = 0 ; for ( int i = 1 ; i < n ; i ++ ) max_sum += Math . abs ( a [ n - 1 - i ] - a [ i - 1 ] ) ; return max_sum ; } public static void main ( String [ ] args ) { int a [ ] = { 10 , - 10 , 20 , - 40 } ; int n = a . length ; System . out . println ( " The ▁ minimum ▁ sum ▁ of �
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] c = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { ans = 1 ; break ; } else if ( a [ i ] > b [ i ] ) { ans = 1 ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } else { count = 0 ; } } if ( count % 2 == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt (
import java . util . * ; public class GFG { static int count_numbers ( int k , int n ) { int dp [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; dp [ 1 ] [ 0 ] = 0 ; dp [ 1 ] [ 1 ] = k - 1 ; for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] ) * ( k - 1 ) ; } return dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ; } public static void main ( String [ ] args ) { int k = 10 ; int n = 3 ; System . out . println ( count_numbers ( k , n ) ) ; } }
public class GFG { static int minCost ( int n , int arr [ ] , int cost ) { int sum = 0 , totalCost = 0 , sum = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { sum += arr [ i ] ; } totalCost += cost * sum ; arr [ n - 1 ] += sum ; totalCost += ( 2 * cost * arr [ n - 1 ] ) ; return totalCost ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 } ; int n = arr . length ; int cost = 1 ; System . out . println ( minCost ( n , arr , cost ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int Q = sc . nextInt ( ) ; for ( int i = 0 ; i < Q ; i ++ ) { int C = sc . nextInt ( ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int ans = solve ( C , A , B , C ) ; System . out . println ( ans ) ; } } static int solve ( int C , int A , int B , int C ) { int ans = 0 ; if ( C > 0 ) { ans += C ; } if ( A > 0 && B > 0 ) { ans += A ; } if ( B > 0 && C > 0 ) { ans += B ; } if ( C > 0 && A > 0 ) { ans += C ; } return ans ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; String [ ] arr = s . split ( " " ) ; int [ ] arr1 = new int [ m ] ; int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr1 [ i ] = arr [ i ] + 1 ; arr2 [ i ] = arr [ i ] + 1 ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static class Node { int data ; Node left , right ; } ; static Node newNode ( int data ) { Node root = new Node ( ) ; root . data = data ; root . left = null ; root . right = null ; } } public static void main ( String [ ] args ) { Node root = new Node ( ) ; root . data = 1 ; root . left = null ; root . right = null ; } }
public class GFG { static int MAX_CHAR = 26 ; static void removeChars ( String str , int k ) { int hash [ ] = new int [ MAX_CHAR ] ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) hash [ str . charAt ( i ) - ' a ' ] ++ ; int res = " " ; for ( int i = 0 ; i < n ; i ++ ) { if ( hash [ ( str . charAt ( i ) - ' a ' ) ] >= k ) res += str . charAt ( i ) ; } return res ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int k = 2 ; System . out . println ( removeChars ( str , k ) ) ; } }
import java . io . * ; public class GFG { static int LCSubStr ( int X [ ] , int Y [ ] , int m , int n ) { int LCSuff [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ; int result = 0 ; for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == 0 || j == 0 ) LCSuff [ i ] [ j ] = 0 ; else if ( X [ i - 1 ] == Y [ j - 1 ] ) LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ; else LCSuff [ i ] [ j ] = 0 ; } } return result ; } public static void main ( String [ ] args )
public class GFG { static int countOccurrences ( int x , int d ) { int count = 0 ; while ( x > 0 ) { if ( x % 10 == d ) count ++ ; x = x / 10 ; } return count ; } static int maxOccurring ( int x ) { if ( x < 0 ) x = - x ; int result = 0 ; int max_count = 1 ; for ( int d = 0 ; d < 10 ; d ++ ) { count = countOccurrences ( x , d ) ; if ( count >= max_count ) max_count = count ; result = d ; } return result ; } public static void main ( String [ ] args ) { int x = 1223355 ; System . out . println ( " Max ▁ occurring ▁ digit ▁ is ▁ " + maxOccurring ( x ) ) ; } }
public class GFG { static void printLogestIncSubArr ( int arr [ ] , int n ) { int m = 1 ; int l = 1 ; int i = 1 ; int maxIndex = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] ) l = l + 1 ; else if ( m < l ) m = l ; else { if ( m < l ) m = l ; maxIndex = i - m ; l = 1 ; } } if ( m < l ) m = l ; int maxIndex = n - m ; for ( i = maxIndex ; i < ( m + maxIndex ) ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 3 , 5 , 7 , 8 , 9 , 1 , 2 } ; int n = arr . length ; printLogestIncSubArr ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { System . out . print ( i + " ▁ " ) ; } else { System . out . print ( i + " ▁ " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = arr [ i ] ; int r = arr2 [ n - 1 ] ; int x = arr2 [ i ] ; for ( int j = l - 1 ; j >= 0 ; j -- ) { if ( arr2 [ j ] > arr2 [ j + 1 ] ) { ans ++ ; } } } if ( ans == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . io . * ; public class GFG { static int Max_Sum ( int a [ ] , int n ) { int b [ ] = new int [ n ] ; S = 0 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) b [ i ] = res ; int S = 0 ; int res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { S += a [ i ] ; res += a [ i ] ; res = Math . max ( res , - S ) ; } ans = S ; int g = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) g -= a [ i ] ; ans = Math . max ( ans , g + b [ i ] ) ; return ans ; } public static void main ( String [ ] args ) { int a [ ] = { - 6 , 10 , - 3 , 10 , - 2 } ; int n = a . length ; System . out . println ( " Maximum ▁ sum ▁ is : ▁ " + Max_Sum ( a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
public class GFG { static void reverse ( String str1 , int x ) { int n = ( str1 . length ( ) - x ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( str1 . charAt ( i ) + " ▁ " ) ; for ( int i = n + x - 1 ; i < n ; i ++ ) System . out . print ( str1 . charAt ( i ) + " ▁ " ) ; for ( int i = n + x ; i < n ; i ++ ) System . out . print ( str1 . charAt ( i ) + " ▁ " ) ; } public static void main ( String [ ] args ) { String str1 = " geeksforgeeks " ; int x = 3 ; reverse ( str1 , x ) ; } }
public class GFG { static int lps ( String str ) { int n = str . length ( ) ; int [ ] L = new int [ n ] ; L [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) L [ i ] = 1 ; for ( int i = 0 ; i < n - l ; i ++ ) { int j = i + l - 1 ; if ( str . charAt ( i ) == str . charAt ( j ) && str . charAt ( i + 1 ) == ' ▁ ' )
import java . util . * ; public class GFG { static boolean bit_check ( int n ) { if ( ( n & ( n - 1 ) ) == 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 14 ; if ( bit_check ( n ) ) System . out . println ( "1" ) ; else System . out . println ( "0" ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < min ) { min = a [ i ] ; } } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static int LIMIT = Library . pow ( 10 , 8 - 1 ) - 1 ; static int [ ] ans = new int [ LIMIT ] ; static void compute ( ) { int LIMIT = Library . pow ( LIMIT / 2 , 8 - 1 ) - 1 ; int [ ] primes = new int [ LIMIT ] ; int sqrt = Library . sqrt ( LIMIT ) ; for ( int i = 0 ; i < primes . length ; i ++ ) { if ( primes [ i ] > sqrt ) break ; int end = binary_search ( primes , LIMIT / primes ) ; ans += ( end + 1 ) ; } } static int binary_search ( int lst [ ] , int x ) { int start = 0 ; int end = len ( lst ) ; while ( start < end ) { int mid = ( start + end ) /
import java . util . * ; public class Main { public static void main ( String
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '9' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static boolean isPeak ( int arr [ ] , int n , int num , int i , int j ) { if ( i >= 0 && arr [ i ] > num ) return false ; if ( j < n && arr [ j ] > num ) return false ; if ( j < n && arr [ j ] < num ) return false ; return true ; } static void printPeaksTroughs ( int arr [ ] ,
import java . io . * ; public class GFG { static int index ( int i ) { return 1 + ( i >> 31 ) - ( i >> 31 ) ; } static void check ( int n ) { int s = " positive " , val = index ( n ) ; System . out . println ( n + " is ▁ " + s ) ; } static void main ( String [ ] args ) { int [ ] arr = { 30 , 20 , 31 } ; check ( arr ) ; } }
import java . io . * ; public class GFG { static int frequency ( int a [ ] , int x ) { int count = 0 ; for ( int i = 0 ; i < x ; i ++ ) { if ( i == x ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , 5 , 5 , 4 } ; int x = 5 ; System . out . println ( frequency ( a , x ) ) ; } }
import java . util . * ; public class GFG { static boolean isNumBalanced ( int N ) { int st [ ] = new int [ 10 ] ; boolean [ ] freq = new boolean [ 10 ] ; int n = st . length ; for ( int i = 0 ; i < n ; i ++ ) { freq [ st [ i ] ] ++ ; } for ( int i = 0 ; i < 9 ; i ++ ) { if ( freq [ i ] != freq [ i + 1 ] ) { isBalanced = false ; } } if ( isBalanced ) return true ; else return false ; } public static void main ( String [ ] args ) { int N = 1234567890 ; int flag = isNumBalanced ( N ) ; if ( flag == true ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; int k = ( int ) Math . sqrt ( n ) + 1 ; for ( int i = 5 ; i <= k
import java . util . * ; public class GFG { static int compute ( int n ) { int numer = 1 ; int denom = 0 ; for ( int i = 0 ; i < n ; i ++ ) { numer = e_contfrac_term ( i ) * numer + denom ; } int ans = sum ( numer ) ; return ans ; } static int e_contfrac_term ( int i ) { if ( i == 0 ) return 2 ; else if ( i % 3 == 2 ) return i / 3 * 2 + 2 ; else return 1 ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static int LCM ( int x , int y , int z ) { int ans = ( x * y ) / ( gcd ( x , y ) ) ; return ( z * ans ) / ( gcd ( ans , z ) ) ; } static int findDivisible ( int n , int x , int y , int z ) { int lcm = LCM ( x , y , z ) ; int ndigitnumber = ( int ) ( ( x * y ) / ( gcd ( x , y ) ) ) ; int reminder = ndigitnumber % lcm ; if ( reminder == 0 ) return ndigitnumber ; ndigitnumber += lcm - reminder ; if ( ndigitnumber < Math . pow ( 10 , n ) ) return ndigitnumber ; else return 0 ; } public static void main ( String [ ] args ) { int n = 4 ; int x = 2 , y = 3 ; int z =
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ 100001 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= 100001 ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= 100001 ; i += p ) prime [ i ] = false ; } } boolean common_prime ( int a , int b ) { boolean [ ] prime = new boolean [ 100001 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= 100001 ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= 100001 ; i += p ) prime [ i ] = false ; } } } if ( common_prime ( a , b ) ) { for ( int i = 2 ; i * i <= 100001 ; i += i ) { System
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ 395 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < 395 ; j ++ ) { dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j ] ) %
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = sc . nextInt ( ) ; } } boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == 1 ) { ok = false ; break ; } } } if ( ok ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; int index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == k ) { index ++ ; } } if ( index == n ) { ans = n - 1 ; } System . out . println ( ans + " ▁ " + index ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; char [ ] c = s . toCharArray ( ) ; int n = c . length ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( c [ i ] == c [ j ] ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] + 1 ) ; } else { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] + 1 ) ; } } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { if ( c [ i ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int min = a [ 0 ] ^ b [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { min = Math . min ( min , b [ i ] ^ i ) ; } } System . out . println ( min ) ; } } }
import
public class GFG { static int sum ( int x , int y , int n ) { int sum1 = ( ( x * y ) * ( x * y - 1 ) - 1 ) / ( x * y - 1 ) ; int sum2 = ( x * y * ( x ** n * y ** n - 1 ) ) / ( x * y - 1 ) ; return ( sum1 + sum2 ) ; } public static void main ( String [ ] args ) { int x = 2 , y = 2 ; int n = 2 ; System . out . println ( sum ( x , y , n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { n -= 1 ; int sum = 0 ; sum += ( n * ( n + 1 ) ) / 2 ; sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n /= 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int getSum ( int n ) { int sum = 0 ; while ( n > 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 687 ; System . out . println ( getSum ( n ) ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; } } dp [ n ] [ m ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= n ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( b [ i ] [ j ] == 0 ) { ans ++ ; } } } System . out . println (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; String s = sc . next ( ) ; int max = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( s . charAt ( i ) == ' B ' ) { max = Math . max ( max , Math . abs ( j - i ) + Math . abs ( j - i ) ) ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static void minReplacement ( String str ) { if ( str . length ( ) > 26 ) System . out . println ( " IMPOSSIBLE " ) ; else { int [ ] hash = new int [ 26 ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) hash [ str . charAt ( i ) - ' a ' ] ++ ; int count = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( hash [ str . charAt ( i ) - ' a ' ] > 1 ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( hash [ j ] == 0 ) hash [ j ] -- ; else hash [ j ] -- ; } } } System . out . println ( " " ) ; } } public static void main ( String [ ] args ) { String str = " xxxxyyyy " ; minReplacement ( str ) ;
import java . util . * ; public class Main { public static void main
import java . util . * ; public class GFG { static void sieveOfEratosthenes ( int N , int s [ ] ) { boolean prime [ ] = new boolean [ N + 1 ] ; for ( int i = 2 ; i <= N ; i ++ ) prime [ i ] = true ; for ( int i = 2 ; i <= N ; i ++ ) { if ( prime [ i ] == false ) s [ i ] = i ; } for ( int i = 1 ; i <= 360 ; i ++ ) { if ( prime [ i ] == false ) s [ i ] = i ; } } static void generatePrimeFactors ( int N ) { s = new int [ N + 1 ]
import java . util . * ; public class GFG { static int longestSubarray ( int [ ] [ ] a , int n ) { int [ ] hash = new int [ 10 ] ; int [ ] [ ] [ ] a = new int [ n ] [ 10 ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; while ( num != 0 ) { hash [ i ] [ num % 10 ] = 1 ; num = num / 10 ; } } int longest = - Integer . MAX_VALUE ; int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( hash [ i ] [ j ] && hash [ i + 1 ] [ j ] ) count ++ ; } if ( j == 10 ) longest = Math . max ( longest , count + 1 ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; System . out . println ( ( a + b + c ) / 2 ) ; } } }
import java . util . * ; public class GFG { static int Divisors ( int x ) { int c = 0 ; int v = 0 ; while ( x % 2 == 0 ) { c ++ ; x /= 2 ; } v += c ; c = 0 ; while ( x % 3 == 0 ) { c ++ ; x /= 3 ; } v . add ( c ) ; v . add ( x ) ; return v ; } static int MinOperations ( int a , int b ) { int vb = Divisors ( a ) ; int c = 0 ; while ( x % 3 == 0 ) { c ++ ; x /= 3 ; } v . add ( c ) ; v . add ( x ) ; return v ; } public static void main ( String [ ] args ) { int a = 14 , b = 28 ; System . out . println ( MinOperations ( a , b
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; int [ ] b = new int [ n + 1 ] ; int [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } System . out . println ( max ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int ans = 0 ; if ( a > 0 ) { ans = a - 1 ; } if ( b > 0 ) { ans = b - 1 ; } if ( c > 0 ) { ans = c - 1 ; } if ( d > 0 ) { ans = d - 1 ; } System . out . println ( ans ) ; } }
public class GFG { static int getSum ( int n ) { int sm = 0 ; while ( n != 0 ) { sm = sm + n % 10 ; n = n / 10 ; } return sm ; } static int largestDigitSumdivisior ( int n ) { int res = 0 ; while ( n != 0 ) { res = res + n % 10 ; n = n / 10 ; } return res ; } public static void main ( String [ ] args ) { int n = 14 ; System . out . println ( largestDigitSumDivisior ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int [ ] arr = new int [ l ] ; for ( int i = 0 ; i < l ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int ans = - 1 ; for ( int i = 0 ; i < l ; i ++ ) { if ( arr [ i ] > max ) { ans = i ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int temp = arr [ i ] ; int count = 0 ; while ( temp > 0 ) { if ( temp % 2 == 1 ) { count ++ ; } temp /= 2 ; } ans [ i ] = count ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
import java . util . * ; public class GFG { static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; return ( ( sr - Math . floor ( sr ) ) == 0 ) ; } static boolean isProduct ( int num ) { int cnt = 0 ; int i = 2 ; while ( cnt < 2 && i * i <= num ) { while ( num % i == 0 ) { num /= i ; cnt ++ ; } i ++ ; } if ( num > 1 ) cnt ++ ; return cnt == 2 ; } static void findNumbers ( int N ) { Vector < Integer > vec = new Vector < Integer > ( ) ; for ( int i = 1 ; i <= N ; i ++ ) { if ( isProduct ( i ) && isPerfectSquare ( i ) ) vec . add ( i ) ; } for ( int i = 0 ; i < vec . size ( ) ; i ++ ) System . out . print ( vec . get ( i )
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } } }
public class GFG { static int divSum ( int n ) { int sum = 1 ; int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) sum = ( sum + i + Math . floor ( n / i ) ) ; i += 1 ; } return sum ; } static void areEquivalent ( int num1 , int num2 ) { return divSum ( num1 ) == divSum ( num2 ) ; } static void printEquivalent ( int num1 , int num2 ) { return divSum ( num1 ) == divSum ( num2 ) ; } static void areEquivalent ( int num1 , int num2 ) { System . out . println ( " Equivalent " ) ; } public static void main ( String [ ] args ) { int num1 = 559 ; int num2 = 703 ; if ( areEquivalent ( num1 , num2 ) == true ) System . out . println ( " Equivalent " ) ; else System . out . println ( " Not ▁ Equivalent " ) ; } }
public class GFG { static int findY ( int x ) { if ( x > 2 ) return x - 2 ; return x + 2 ; } public static void main ( String [ ] args ) { int x = 5 ; System . out . println ( findY ( x ) ) ; } }
import java . io . * ; public class GFG { static long modfact ( long n , long m ) { long result = 1 ; for ( int i = 1 ; i <= m ; i ++ ) result = ( result * i ) % MOD ; return result ; } public static void main ( String [ ] args ) { long n = 3 , m = 2 ; System . out . println ( modfact ( n , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( a [ j ] > a [ j ] ) { int temp = a [ j ] ; a [ j ] = a [ j ] ; a [ j ] = temp ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( b [ j ] > b [ j ] ) { int temp = b [ j ] ; b [ j ] = b [ j ] ; b [ j ] = temp ; } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( c [ i ] > c [ j ] ) { int temp = c [ i ] ; c [ i ] = c [ j ] ; c [ j ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int l = 0 ; int r = n - 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; if ( a [ mid ] > a [ mid ] )
public class GFG { static float circlearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; float A = ( float ) ( ( 3.14 * Math . pow ( a , 2 ) * Math . pow ( b , 2 ) ) / ( 4 * ( Math . pow ( a , 2 ) + Math . pow ( b , 2 ) ) ) ) ; return A ; } public static void main ( String [ ] args ) { float a = 8 , b = 10 ; System . out . println ( circlearea ( a , b ) ) ; } }
import java . util . * ; public class GFG { static void find ( int [ ] lst , int n ) { System . out . println ( " YES " ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . println ( " NO " ) ; } } static void find ( int [ ] lst , int n ) { System . out . println ( " YES " ) ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . println ( " NO " ) ; } } public static void main ( String [ ] args ) { int [ ] lst = { - 1 , 2 , 4 , 121 } ; int n = lst . length ; find ( lst , n ) ; } }
import java . util . * ; public class GFG { static int K_String ( String s , int k ) { int n = s . length ( ) ; int fre [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) fre [ s . charAt ( i ) - ' a ' ] ++ ; int str = " " ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( fre [ i ] % k == 0 ) { int x = fre [ i ] / k ; while ( x > 0 ) str += ( char ) ( i + ' a ' ) ; } else { return " - 1" ; } } return str ; } public static void main ( String [ ] args ) { String s = " aabb " ; int k = 2 ; System . out . println ( K_String ( s , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] = dp [ i - 1 ] * a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { dp [ i ] += dp [ j ] * b [ j ] ; } } System . out . println ( dp [ n - 1 ] ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int n = fs . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = fs . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; if ( n == 0 && k == 0 ) break ; int [ ] [ ] a = new int [ n ] [ k ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { if ( a [ i ] [ j ] > 0 ) { ans += a [ i ] [ j ] ; } } } System . out . println ( ans ) ; } } }
public class GFG { static int maxFreq ( String s , String a , String b ) { int fre [ ] = new int [ 10 ] ; int n = s . length ( ) ; if ( a > b ) { swap ( a , b ) ; } for ( int i = 0 ; i < n ; i ++ ) a = ( String ) s . charAt ( i ) - '0' ; int fre [ ] = new int [ 10 ] ; int n = s . length ( ) ; if ( a > b ) { swap ( b , a ) ; } for ( int i = 0 ; i < n ; i ++ ) a = ( String ) s . charAt ( i ) - '0' ; if ( fre [ a ] == 0 && fre [ b ] == 0 ) return - 1 ; else if ( fre [ a ] >= fre [ b ] ) return a ; else return b ; } public static void main ( String [ ] args ) { String a = 4 , b = 7 , s = "47744" ; System . out . println ( maxFreq ( s , a , b ) ) ; } }
public class GFG { static int maxZeros ( int n ) { if ( n == 0 || ( n & ( n - 1 ) ) == 0 ) return - 1 ; int setBit = 1 ; int prev = 0 ; int i = 1 ; while ( i < 33 ) { prev += 1 ; if ( ( n & setBit ) == setBit ) setBit = setBit << 1 ; setBit = setBit << 1 ; } int max0 = - 10 * 9 ; int cur = prev ; for ( int j = i + 1 ; j < 33 ; j ++ ) cur += 1 ; int max1 = - 1 ; int cur = prev ; for ( int j = i + 1 ; j < 33 ; j ++ ) { cur += 1 ; if ( ( n & setBit ) == setBit ) { if ( max0 < ( cur - prev - 1 ) ) max0 = cur - prev - 1 ; prev = cur ; } setBit = setBit << 1 ; } return max0 ; } public static void main ( String [ ] args ) { int n = 549 ; System . out . println ( maxZeros ( n ) ) ; } }
public class GFG { static int sumPowersK ( int n , int k ) { int sum = 0 ; int num = 1 ; while ( num <= n ) { sum += num ; num *= k ; } return sum ; } static int getSum ( int n , int k ) { int pwrK = sumPowersK ( n , k ) ; sumAll = ( n * ( n + 1 ) ) / 2 ; return ( sumAll - pwrK ) ; } public static void main ( String [ ] args ) { int n = 10 ; int k = 3 ; System . out . println ( getSum ( n , k ) ) ; } }
import java . io . * ; public class GFG { static int XandYandZintercept ( int A , int B , int C , int D ) { int x = - D / A ; y = - D / B ; z = - D / C ; return x ; } public static void main ( String [ ] args ) { int A = 2 , B = 5 ; int C = 7 ; int D = 8 ; System . out . println ( XandYandZintercept ( A , B , C , D ) ) ; } }
import java . util . * ; public class GFG { static int maxSum ( int arr [ ] , int n ) { int s = 0 ; int l [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) s += Math . abs ( arr [ i ] ) ; if ( arr [ 0 ] >= 0 ) continue ; if ( i == 0 ) l . append ( i + 1 ) ; else l . append ( i + 1 ) ; l . append ( i ) ; l . append ( i ) ; return s ; } public static void main ( String [ ] args ) { int n = 4 ; int a [ ] = { 1 , - 2 , - 3 , 4 } ; int maxSum ( int arr [ ] , int n ) ; System . out . println ( maxSum ( arr , n ) ) ; System . out . println ( maxSum ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000 ; static void replaceSpaces ( String str ) { str = str . strip ( ) ; int i = str . length ( ) ; int space_count = str . count ( ' ▁ ' ) ; int new_length = i + space_count * 2 ; if ( new_length > MAX ) return - 1 ; int index = new_length - 1 ; str = str . substring ( 0 , index ) ; for ( int j = i - 2 ; j >= 0 ; j -- ) { str . append ( '0' ) ; } for ( int j = i - 2 ; j >= 0 ; j -- ) { if ( str . charAt ( j ) == ' ▁ ' ) { str . replace ( j , '0' ) ; str . replace ( j , index
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { System . out . print ( "1" ) ; } else { System . out . print ( "0" ) ; } } } }
import java . io . * ; public class GFG { static boolean check ( int n ) { int m = n ; while ( n != 0 ) { int r = n % 10 ; if ( r > 0 ) { if ( ( m % r ) != 0 ) return false ; } n = n / 10 ; } return true ; } static int count ( int l , int r ) { int ans = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( check ( i ) ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int l = 10 , r = 20 ; System . out . println ( count ( l , r ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int ans = - 1 ; if ( a == b ) { ans = 9 ; } else if ( a == c ) { ans = 10 ; } else if ( a == d ) { ans = 9 ; } else { ans = - 1 ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 4 == 0 ) System . out . println ( "4" ) ; else System . out . println ( "0" ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % k != 0 ) { ans = Math . min ( ans , b [ i ] ) ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int digSum ( int n ) { int sum = 0 ; while ( n > 0 || sum > 9 ) { if ( n == 0 ) n = sum ; sum += n % 10 ; n = n / 10 ; } return sum ; } public static void main ( String [ ] args ) { int n = 1234 ; System . out . println ( digSum ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] [ ] arr = s . toCharArray ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( arr [ i ] [ j ] == '1' ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] + 1 ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - 1 ] + 1 ) ; } } } System . out . println ( dp [ n ] [ m ] ) ; } }
public class GFG { static int centered_heptagonal_num ( int n ) { return ( 7 * n * n - 7 * n + 2 ) / 2 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " % sth ▁ Centered ▁ heptagonal ▁ number ▁ : ▁ " + centered_heptagonal_num ( n ) ) ; } }
public class GFG { static int missingNum ( int arr [ ] , int n ) { int minvalue = Integer . MIN_VALUE ; int xornum = 0 ; for ( int i = 0 ; i < n ; i ++ ) xornum ^= ( minvalue ) ; minvalue = minvalue + 1 ; return xornum ^ minvalue ; } public static void main ( String [ ] args ) { int arr [ ] = { 13 , 12 , 11 , 15 } ; int n = arr . length ; System . out . println ( missingNum ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int smallestPermute ( int n ) { int res [ ] = new int [ n + 1 ] ; if ( n % 2 == 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = ( char ) ( 48 + i + 2 ) ; else res [ i ] = ( char ) ( 48 + i ) ; } } else { for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( i % 2 == 0 ) res [ i ] = ( char ) ( 48 + i + 2 ) ; else res [ i ] = ( char ) ( 48 + i ) ; } } return res ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( smallestPermute ( n ) ) ; } }
import java . util . * ; public class GFG { static int minOperations ( int [ ] a , int n , int K ) { Map [ ] b = new HashMap [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( Map [ a [ i ] ] == true ) { return 0 ; } Map [ a [ i ] = new HashMap [ n ] ; } int b [ ] = new int [ n ] ; Map . clear ( ) ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = new HashMap [ n ] ; } int i ; for ( i = 0 ; i < n ; i ++ ) { if ( Map [ a [ i ] ]
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n % 360 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int h1 = sc . nextInt ( ) ; int m1 = sc . nextInt ( ) ; int h2 = sc . nextInt ( ) ; int m2 = sc . nextInt ( ) ; int h3 = sc . nextInt ( ) ; int m3 = sc . nextInt ( ) ; int h4 = sc . nextInt ( ) ; int m4 = sc . nextInt ( ) ; int h5 = sc . nextInt ( ) ; int m5 = sc . nextInt ( ) ; int h6 = sc . nextInt ( ) ; int m5 = sc . nextInt ( ) ; int h7 = sc . nextInt ( ) ; int m7 = sc . nextInt ( ) ; int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == 1 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; System . out . println ( a * b + " ▁ " + a * b ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int r = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; if ( r == 0 && a == 0 ) { break ; } int [ ] [ ] map = new int [ r ] [ a ] ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < a ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = - 1 ; for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < a ; j ++ ) { if ( map [ i ] [ j ] == - 1 ) { ans = i ; break ; } } } System . out . println ( ans ) ; } } }
public class GFG { static int findMaxValue ( int arr [ ] , int n ) { if ( n < 4 ) { System . out . print ( " The ▁ array ▁ should ▁ have ▁ atlest ▁ 4 ▁ elements " ) ; return MIN ; } table1 = new int [ n + 1 ] ; table2 = new int [ n + 1 ] ; table3 = new int [ n + 1 ] ; table4 =
public class GFG { static void centeredHexagonalSeries ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( 3 * i * ( i - 1 ) + 1 + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 10 ; centeredHexagonalSeries ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { count ++ ; } } if ( count == s . length ( ) ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import
import java . util . * ; public class GFG { static int N = 5 ; static int [ ] [ ] dp = new int [ N ] [ N ] ; static int [ ] [
import java . io . * ; public class GFG { static int averageOdd ( int n ) { if ( n % 2 == 0 ) { System . out . println ( " Invalid ▁ Input " ) ; return - 1 ; } int sm = 0 ; int count = 0 ; while ( n >= 1 ) { count = count + 1 ; sm = sm + n ; n = n - 2 ; } return sm / count ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } }
import java . io . * ; public class GFG { static void averageOdd ( int n ) { if ( n % 2 == 0 ) System . out . println ( " Invalid ▁ Input " ) ; else System . out . println ( " Invalid ▁ Input " ) ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( averageOdd ( n ) ) ; } }
import java . io . * ; public class GFG { static boolean areElementsContiguous ( int arr [ ] ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int count = 1 ; int curr_ele = arr [ 0 ] - 1 ; while ( curr_ele >= 0 ) { count += 1 ; curr_ele -= 1 ; } us . add ( count ) ; } return ( count == len ( us ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; if ( areElementsContiguous ( arr ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import
public class GFG { static void Vertices ( int x , int y ) { int val = Math . abs ( x ) + Math . abs ( y ) ; if ( x < 0 ) x = - 1 ; else x = 1 ; System . out . print ( val * x + " ▁ " ) ; if ( y < 0 ) y = - 1 ; else y = 1 ; System . out . print ( "0" ) ; if ( y < 0 ) y = - 1 ; System . out . print ( "0" ) ; } public static void main ( String [ ] args ) { int x = 3 , y = 3 ; Vertices ( x , y ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner (
import java . util . * ; public class GFG { static void originalArray ( int greater [ ] , int n ) { int temp [ ] = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) temp [ i ] = i ; for ( int i = 0 ; i < n ; i ++ ) { int k = n - greater [ i ] - i ; temp [ k ] = temp [ k ] ; del temp [ k ] = temp [ k ] ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( temp [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 2 , 1 , 0 , 1 , 0 } ; int n = arr . length ; originalArray ( arr , n ) ; originalArray ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int c = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == b [ j ] ) { c ++ ; } else { c += a [ j ] ; } } min = Math . min ( min , c ) ; } System . out . println ( min ) ; } }
import java . util . * ; public class Solution { public int findRadius ( int [ ] houses , int heaters ) { int [ ] heaters = new int [ houses . length ] ; int i = 0 ; for ( int x = 0 ; x < houses . length ; x ++ ) { while ( x >= sum ( heaters [ i ] ) / 2.0 ) { i ++ ; } int r = Math . abs ( heaters [ i ] - x ) ; int max = Math . max ( r , Math . abs ( heaters [ i ] - x ) ) ; r = Math . max ( r , Math . abs ( heaters [ i ] - x ) ) ; } return r ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] houses = { 1 , 2 , 3 } ; int heaters = [ 2 ] ; int out = sObj . findRadius ( houses , heaters ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static int eulerlib , itertools ; static int [ ] cond ; static int solve ( int n ) { int sum = 1 ; int pow = 1 ; int k = 1 ; while ( sum % n != 0 ) { k ++ ; pow = ( pow * 10 ) % n ; sum = ( sum + pow ) % n ; } return k ; } static int find_least_divisible_repunit ( int n ) { if ( n % 2 == 0 || n % 5 == 0 ) return 0 ; int sum = 1 ; int pow = 1 ; int k = 1 ; while ( sum % n != 0 ) { k ++ ; pow = ( pow * 10 ) % n ; sum = ( sum + pow ) % n ; } return k ; } public static void main ( String [ ] args ) { System . out . println ( solve ( 1 ) ) ; } }
public class GFG { static int pow ( int num , int x , int k , int n ) { int res = 0 ; if ( x == 0 ) res += 1 ; int r = ( int ) Math . pow ( num , ( 1 / n ) ) ; for ( int i = k + 1 ; i <= r ; i ++ ) { int a = x - ( int ) Math . pow ( i , n ) ; if ( a >= 0 ) { checkRecursive ( num , x - int ( Math . pow ( i , n ) ) , i , n ) ; } } return res ; } static int checkRecursive ( int x , int n ) { return checkRecursive ( x , x , 0 , n ) ; } public static void main ( String [ ] args ) { System . out . println ( check ( 10 , 2 ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String S = sc . next ( ) ; int N = S . length ( ) ; int [ ] [ ] SRep = new int [ N ] [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { SRep [ i ] [ 0 ] = S . charAt ( i ) ; SRep [ i ] [ 1 ] = S . charAt ( i + 1 ) ; SRep [ i ] [ 2 ] = S . charAt ( i + 2 ) ; } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( SRep [ i ] [ j ] == ' + ' ) { ans ++ ; } else { ans -- ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static boolean prime ( int n ) { for ( int i = 2 ; i * i <= n ; i ++ ) { if ( i * i > n + 1 ) break ; if ( n % i == 0 ) return false ; } return true ; } static int thirdNumber ( int a , int b ) { int summ = 0 ; int temp = 0 ; summ = a + b ; temp = 1 ; if ( summ & 1 ) temp = 2 ; while ( prime ( summ + temp ) == false ) temp += 2 ; return temp ; } public static void main ( String [ ] args ) { int a = 3 , b = 5 ; thirdNumber ( a , b ) ; } }
public class GFG { static int Squares ( int n , int m , int a ) { return ( ( m + a - 1 ) / a ) * ( ( n + a - 1 ) / a ) ; } public static void main ( String [ ] args ) { int n = 6 , m = 6 ; int a = 4 , print = Squares ( n , m , a ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( n % m == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int countCubes ( int a , int b ) { int cnt = 0 ; for ( int i = a ; i <= b ; i ++ ) { for ( int j = i + 1 ; j * j * j > i ; j ++ ) { if ( j * j * j * j > i ) break ; if ( j * j * j * j == i ) cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int a = 7 , b = 30 ; System . out . println ( " Count ▁ of ▁ Cubes ▁ is ▁ " + countCubes ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int
import java . util . * ; public class GFG { static void subString ( char [ ] s , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { System . out . print ( s [ i ] ) ; } } } public static void main ( String [ ] args ) { char [ ] s = " abcd " ; subString ( s , n ) ; } }
public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return false ; return true ; } static int countPrimePosition ( int arr [ ] ) { int c0 = 0 , c1 = 1 , n = 0 ; n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 && isPrime ( i ) ) c0 ++ ; if ( arr [ i ] == 1 && isPrime ( i ) ) c1 ++ ; } System . out . println ( " Number ▁ of ▁ 0s ▁ = ▁ " + c0 ) ; System . out . println ( " Number ▁ of ▁ 1s ▁ = ▁ " + c1 ) ; return c0 ; } public static void main ( String [ ] args ) {
public class GFG { static void angleextcycquad ( int z ) { System . out . print ( " The ▁ exterior ▁ angle ▁ of ▁ the ▁ " + " \n " ) ; System . out . print ( " cyclic ▁ quadrilateral ▁ is ▁ " + end = " \n " ) ; System . out . print ( z + " ▁ degrees " ) ; } public static void main ( String [ ] args ) { int z = 48 ; angleextcycquad ( z ) ; } }
public class GFG { static void printMinIndexChar ( String str , int patt ) { int minIndex = 10 * str . length ( ) ; int m = str . length ( ) ; int n = str . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( patt [ i ] == Str [ j ] && j < minIndex ) { minIndex = j ; break ; } } } if ( minIndex != 10 ) { System . out . print ( " Minimum ▁ Index ▁ Character ▁ = ▁ " + str . substring ( minIndex ) ) ; } else System . out . print ( " No ▁ character ▁ present " ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int patt = " set " ; printMinIndexChar ( str , patt ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != b [ i ] ) { ans = i ; break ; } } System . out . println ( ans ) ; } }
public class GFG { static int maxnumber ( int n , int k ) { for ( int i = 0 ; i < k ; i ++ ) { int ans = 0 ; i = 1 ; while ( n / i > 0 ) { int temp = ( n / ( i * 10 ) ) * i + ( n % i ) ; i *= 10 ; if ( temp > ans ) ans = temp ; } n = ans ; } return ans ; } public static void main ( String [ ] args ) { int n = 6358 ; int k = 1 ; System . out . println ( maxnumber ( n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } int min = Math . abs ( sum - 0.5 ) ; int max = Math . abs ( sum - 1 ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( min > Math . abs ( sum - i ) ) { count ++ ; } else if ( max < Math . abs ( sum - i ) ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static int get_last_two_digit ( int N ) { if ( N <= 10 ) { int ans = 0 ; int fac = 1 ; for ( int i = 1 ; i <= N ; i ++ ) fac = fac * i ; ans += fac ; ans %= 100 ; return ans ; } else return 13 ; } public static void main ( String [ ] args ) { int N = 1 ; for ( int N = 1 ; N <= 11 ; N ++ ) System . out . print ( " For ▁ N ▁ = ▁ " + N + " ▁ : ▁ " + get_last_two_digit ( N ) + " ▁ " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static boolean isPossible ( int x , int y , int z ) { int a = x * x + y * y + z * z ; a = Math . round ( a , 8 ) ; if ( ceil ( a ) == 1 ) return true ; return false ; } public static void main ( String [ ] args ) { int l = 0.70710678 ; int m = 0.5 ; int n = 0.5 ; if ( isPossible ( l , m , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int MAX = 1000000 ; static int MOD = 100000000 ; static void preCompute ( ) { fact [ 0 ] = 1 ; int result [ ] = new int [ MAX + 1 ] ; fact [ 0 ] = 1 ; result [ 0 ] = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) fact [ i ] = ( fact [ i - 1 ] % MOD ) * i ; result [ 0 ] = ( ( result [ 0 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD ; } static void performQueries ( int q [ ] , int n ) { preCompute ( ) ; for ( int i = 0 ; i <= n ; i ++ ) System . out . print ( result [ q [ i ] ] ) ; } public static void main ( String [ ] args ) { int q [ ] = { 4 , 5 } ; int n = q . length ; performQueries ( q , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } } }
import java . util . * ; public class GFG { static int segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( Math . abs ( arr [ i ] ) - 1 < size && arr [ Math . abs ( arr [ i ] ) - 1 ] > 0 ) { arr [ Math . abs ( arr [ i ] ) - 1 ] = - arr [ Math . abs ( arr [ i ] ) - 1 ] ; } } for ( int i = 0 ; i < size ; i ++ ) { if ( Math . abs ( arr [ i ] ) - 1 < size && arr [ Math . abs ( arr [ i
import java . io . * ; public class GFG { static int digitNumber ( int n ) { if ( n == 0 ) return 1 ; if ( n == 1 ) return 9 ; if ( n % 2 != 0 ) { int temp = digitNumber ( ( n - 1 ) / 2 ) % mod ; return ( 9 * temp * temp ) % mod ; } else { int temp = digitNumber ( n / 2 ) % mod ; return ( 9 * temp * temp ) % mod ; } } static int countExcluding ( int n , int d ) { if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; } static int countIncluding ( int n , int d ) { if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIncluding ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } if ( arr [ 0 ] + arr [ 1 ] > arr [ n - 1 ] ) { System . out . println ( - 1 ) ; } else { System . out . println ( 1 + " ▁ " + 2 + " ▁ " + n ) ; } } } }
public class GFG { static void convert12 ( String str ) { int h1 = str . length ( ) - 1 ; int h2 = str . length ( ) - 1 ; int hh = h1 * 10 + h2 ; String meridien = " " ; if ( hh < 12 ) meridien = " AM " ; else meridien = " PM " ; hh %= 12 ; if ( hh < 12 ) meridien = " AM " ; else meridien = " PM " ; hh %= 12 ; if ( hh < 12 ) System . out . print ( "12" + " ▁ " ) ; for ( int i = 2 ; i < 8 ; i ++ ) System . out . print ( str . charAt ( i ) + " " ) ; } public static void main ( String [ ] args ) { String str = "17:35:20" ; convert12 ( str ) ; } }
import java . util . * ; public class GFG { static boolean check ( String s , int k ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( i % k ) ) return false ; } return true ; } static int countCommonDivisors ( String a , int b ) { int ct = 0 ; int n = a . length ( ) ; int m = b . length ( ) ; for ( int i = 1 ; i <= Math . min ( n , m ) ; i ++ ) { if ( n % i == 0 && m % i == 0 ) { if ( a . charAt ( 0 ) == b . charAt ( 0 ) ) { if ( check ( a , i ) && check ( b , i ) ) ct = ct + 1 ; } } } return ct ; } public static void main ( String [ ] args ) { String a = " xaxa " ; int b = " xaxa " ; System . out . println ( countCommonDivisors ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { count ++ ; } } } System . out . println ( count ) ; } }
public class GFG { static void indexedSequentialSearch ( int arr [ ] , int n , int k ) { int elements [ ] = new int [ 20 ] ; int j = 0 , ind = 0 , ind = 0 ; for ( int i = 0 ; i < n ; i ++ ) { elements [ ind ] = arr [ i ] ; ind ++ ; } if ( k < elements [ 0 ] ) { System . out . println ( " Not ▁ found " ) ; exit ( 0 ) ; } else { for ( int i = 1 ; i <= ind ; i ++ ) { if ( k == elements [ i ] ) { j = 1 ; break ; } } if ( j == 1 ) { System . out
import java . io . * ; public class GFG { static int larroringPalindrome ( int n ) { int upper_limit = 0 ; for ( int i = 1 ; i <= n ; i ++ ) upper_limit = upper_limit * 10 ; upper_limit = upper_limit + 9 ; int lower_limit = 1 + lower_limit / 10 ; int max_product = 0 ; for ( int i = upper_limit ; i <= lower_limit - 1 ; i ++ ) { for ( int j = i ; j < upper_limit - 1 ; j ++ ) { product = i * j ; if ( product < max_product ) break ; int number = product ; reverse = 0 ; while ( number != 0 ) reverse = reverse * 10 + number % 10 ; if ( product == reverse && product > max_product ) max_product = product ; } } return max_product ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( larroringPalindrome ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; dp [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > dp [ i - 1 ] ) { dp [ i ] = dp [ i - 1 ] ; } } System . out . println ( dp [ n - 1 ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( a > 0 && b > 0 && c > 0 ) { ans += 1 ; } if ( b > 0 && c > 0 ) { ans += 1 ; } if ( c > 0 && d > 0 ) { ans += 1 ; } if ( a > 0 && b > 0 && c > 0 ) { ans += 1 ; } if ( a > 0 && c > 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j ] ) ; } } System . out . println ( dp [ n - 2 ] [ 0 ] + dp [ n - 1 ] [ 0 ] ) ; } }
import java . util . * ; public class GFG { static int maximumXor ( int arr [ ] , int n ) { int sForward [ ] = new int [ n ] ; int [ ] sBackward = new int [ n ] ; int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { while ( sForward [ i ] < arr [ sForward [ i ] ] ) { ans = Math . max ( ans , arr [ i ] ^ arr [ sForward [ i ] ] ) ; sForward [ i ] = i ; } sBackward [ i ] = i ; while ( sBackward [ i ] < arr [ sBackward [ i ] ] ) { ans = Math . max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward [ i ] ] ) ; sBackward [ i ] = i ; } sBackward . push ( i ) ; while ( sBackward [ i ] != 0 ) { ans = Math . max ( ans , arr [ n - i - 1 ] ^ arr [ sBackward [ i ] ] ) ; s
public class GFG { static void decToHexa ( int n ) { char temp ; temp = n % 16 ; if ( temp < 10 ) { char hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ; i = i + 1 ; } else { char temp = 0 ; temp = n % 16 ; while ( temp < 10 ) { System . out . print ( ( char ) ( temp + 48 ) + " ▁ " ) ; temp = temp - 55 ; } } n = 2545 ; decToHexa ( n ) ; } public static void main ( String [ ] args ) { int n = 2545 ; decToHexa ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; if ( h == 0 && w == 0 ) break ; int [ ] [ ] map = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < w ; j ++ ) { map [ i ] [ j ] = s . charAt ( j ) - '0' ; } } int [ ] [ ] dp = new int [ h ] [ w ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { dp [ i ] [ j ] = Math . abs ( map [ i ] [ j ] - map [ i ] [ j ] ) + Math . abs ( map [ i ] [ j ] - map [ i ] [ j ] ) + Math . abs ( map [ i ] [ j ] - map [ i ] [ j ] ) ; } } int ans = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . ArrayList ; import java . util . List ; public class Main { public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; String [ ] tmpArray = br . readLine ( ) . split ( " ▁ " ) ; int n = Integer . parseInt ( tmpArray [ 0 ] ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( tmpArray [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int extractMaximum ( String ss ) { int num , res = 0 ; for ( int i = 0 ; i < ss . length ( ) ; i ++ ) { if ( ss . charAt ( i ) >= '0' && ss . charAt ( i ) <= '9' ) num = num * 10 + int ( ss . charAt ( i ) - 0 ) ; else res = Math . max ( res , num ) ; num = 0 ; } return Math . max ( res , num ) ; } public static void main ( String [ ] args ) { String ss = "100klh564abc365bg " ; System . out . println ( extractMaximum ( ss ) ) ; } }
public class GFG { static int max = 50009 ; static int find_Indices ( int arr [ ] , int n ) { int sum [ ] = new int [ max ] ; int k = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { sum [ i ] = sum [ i - 1 ] + arr [ k ] ; k ++ ; } int ans = - ( 1e15 ) ; int index_1 = index_2 = index_3 = - 1 ; for ( int l = n + 1 ; l <= n ; l ++ ) { int index = l ; int vmin = ( 1e15 ) ; for ( int r = l ; r <= n ; r ++ ) { if ( sum [ r ] < vmin ) { vmin = sum [ r ] ; index_1 = r ;
public class GFG { static void printElements ( int arr [ ] , int n ) { for ( int i = 1 ; i <= n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 1 , 5 , 4 , 9 , 8 , 7 , 5 } ; int n = arr . length ; printElements ( arr , n ) ; } }
import java . util . * ; public class GFG { static int valueofX ( int ar [ ] , int n ) { int sum = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ValueA += ( ar [ i ] - A ) * ( ar [ i ] - A ) ; ValueB += ( ar [ i ] - B ) * ( ar [ i ] - B ) ; } if ( ValueA < ValueB ) { return A ; } else { return B ; } } public static void main ( String [ ] args ) { int n = 7 ; int arr [ ] = { 6 , 9 , 1 , 6 , 1 , 3 , 7 } ; System . out . println ( valueofX ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } if ( count % 2 == 1 ) { System . out . println ( s . length ( ) / 2 ) ; } else { System . out . println ( s . length ( ) / 2 ) ; } } }
public class GFG { static int findNth ( int n ) { int count = 0 ; int curr = 19 ; while ( true ) { int sum = 0 ; int x = curr ; while ( x > 0 ) { sum += x % 10 ; x /= 10 ; } if ( sum == 10 ) { count ++ ; } if ( count == n ) return curr ; curr += 9 ; } return - 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findNth ( n ) ) ; } }
import java . io . * ; public class GFG { static int findNth ( int n ) { int count = 0 ; for ( int curr = 0 ; curr < n ; curr ++ ) { int sum = 0 ; int x = curr ; while ( x > 0 ) { sum += x % 10 ; x /= 10 ; } if ( sum == 10 ) count ++ ; if ( count == n ) return curr ; } return - 1 ; } public static void main ( String [ ] args ) { System . out . println ( findNth ( 5 ) ) ; } }
public class GFG { static int countNumber ( int N , int S ) { int countElements = 0 ; int currentSum = 0 ; while ( currentSum <= S ) { currentSum += N ; N = N - 1 ; countElements ++ ; } return countElements ; } public static void main ( String [ ] args ) { int N = 5 , S = 11 ; int countElements = countElements + 1 ; System . out . println ( countElements ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { sum = sum + b [ i ] ; } else { sum = sum + a [ i ] - b [ i ] ; } } if ( sum > 2 * max ( a [ n - 1 ] , b [ n - 1 ] ) ) { System . out . println ( " b " ) ; } else { System . out . println ( " a " ) ; } } }
import java . util . * ; public class GFG { static int nCr ( int n , int r ) { int fac [ ] = new int [ n ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i ; int ans = fac [ n ] / ( fac [ n - r ] * fac [ r ] ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 ; int k = 3 ; int ans = nCr ( n + k - 1 , k ) + nCr ( k - 1 , n - 1 ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) > max ) { max = Math . abs ( arr [ i ] - arr [ i + 1 ] ) ; } } System . out . println ( max + " ▁ " + arr [ n - 1 ] ) ; } }
public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int powGCD ( int a , int n , int b ) { for ( int i = 0 ; i <= n ; i ++ ) { int a = a * a ; } return gcd ( a , b ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 5 ; int n = 2 ; System . out . println ( powGCD ( a , n , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + a [ j ] ; dp [ i ] [ j ] %= 1000000007 ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] != 0 ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '8' ) { count ++ ; } } System . out . println ( Math . min ( count , n / 11 ) ) ; } }
public class GFG { static int sumOfDigit ( int n , int b ) { int unitDigit = 0 ; int sum = 0 ; while ( n > 0 ) { unitDigit = n % b ; sum += unitDigit ; n = n / b ; } return sum ; } public static void main ( String [ ] args ) { int n = 50 ; int b = 2 ; System . out . println ( sumOfDigit ( n , b ) ) ; } }
import java . util . * ; public class GFG { static void printLargestDivisible ( int n , int a [ ] ) { int c0 , c5 ; int c0 , c5 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) c0 ++ ; else c5 += 1 ; } c5 = floor ( c5 / 9 ) * 9 ; if ( c0 == 0 ) System . out . print ( - 1 , end = " " ) ; else if ( c5 == 0 ) System . out . print ( 0 , end = " " ) ; else { for ( int i = c5 ; i < c5 ; i ++ ) System . out . print ( 5 , end = " " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ,
public class GFG { static int countWays ( int n ) { int counter = 0 ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) { for ( int k = j ; k < n ; k ++ ) { for ( int l = k ; l < n ; l ++ ) { if ( i + j + k + l == n ) counter ++ ; } } } return counter ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }
public class GFG { static int numberOfMinutes ( int S , int S1 ) { int Min = 0 ; Min = ( ( S - S1 ) / Math . floor ( S ) ) * 60 ; return ( Min ) ; } public static void main ( String [ ] args ) { int S = 30 , S1 = 10 ; System . out . println ( numberOfMinutes ( S , S1 ) + " min " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( i == j ) continue ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + a [ i ] ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + b [ i ] ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + a [ i ] ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + b [ i ] ; dp [ i ] [ j ] = dp
import java . io . * ; public class GFG { static int onesComplement ( int n ) { int number_of_bits = ( int ) ( Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) + 1 ) ; return ( ( 1 << number_of_bits ) - 1 ) ^ n ; } public static void main ( String [ ] args ) { int n = 22 ; System . out . println ( onesComplement ( n ) ) ; } }
import
public class GFG { static void findPoint ( int x1 , int y1 , int x2 , int y2 ) { System . out . println ( " ( " + 2 * x2 - x1 + " , " + 2 * y2 - y1 + " ) " ) ; } public static void main ( String [ ] args ) { int x1 = 0 , y1 = 0 , x2 = 1 ; int x2 = 1 ; int y2 = 1 ; findPoint ( x1 , y1 , x2 , y2 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int min2 = Math . min ( Math . min ( a [ i ] , b [ i ] ) , Math . min ( a [ i ] , b [ i ] ) ) ; min = Math . min ( min , min2 ) ; } System . out . println ( min ) ; } }
public class GFG { static voidalter ( int x , int y ) { while ( true ) { if ( x == 0 || y == 0 ) break ; if ( x >= 2 * y ) x = x % ( 2 * y ) ; else if ( y >= 2 * x ) y = y % ( 2 * x ) ; else break ; } System . out . println ( " X ▁ = ▁ " + x + " , ▁ " + " Y ▁ = ▁ " + y ) ; } public static void main ( String [ ] args ) { int x = 12 , y = 5 ; alter ( x , y ) ; } }
import java . util . * ; public class Main { public static
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a == b ) { System . out . println ( " - 1 ▁ - 1" ) ; } else { int c = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a == j ) { c ++ ; } else { break ; } } if ( c == 1 ) { System . out . println ( " - 1 ▁ - 1" ) ; } else { System . out . println ( " - 1 ▁ - 1" ) ; } } } } }
public class GFG { static long mod = 1000000007 ; static long inv2 = 500000004 ; static long modulo ( long num ) { long res = 0 ; for ( int i = 0 ; i < num ; i ++ ) res = ( res * 10 + num - 0 ) % mod ; return res ; } static long findSum ( long L , long R ) { long a = modulo ( L ) ; long b = modulo ( R ) ; l = ( ( a * ( a - 1 ) ) % mod * inv2 ) % mod ; r = ( ( b * ( b + 1 ) ) % mod * inv2 ) % mod ; ret = ( r % mod - l % mod ) ; if ( ret < 0 ) ret = ret + mod ; else ret = ret % mod ; return ret ; } public static void main ( String [ ] args ) { long L = "88949273204" ; long R = "98429729474298592
import java . util . * ; public class GFG { static void unsort ( int l , int r , int a [ ] , int k ) { if ( k < 1 || l + 1 == r ) return ; int k = ( l + r ) / 2 ; int temp = a [ k ] ; a [ 0 ] = a [ 0 ] ; a [ 0 ] = temp ; unsort ( l , 0 , a , k ) ; unsort ( l , r , a , k ) ; } static void arrayWithKCalls ( int n , int k ) { if ( k % 2 == 0 ) { System . out . print ( " NO ▁ SOLUTION " ) ; return ; } int l = 10 ; int r = 17 ; int temp = a [ 0 ] ; a [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { a [ i ] = i + 1 ;
import java . util . * ; public class GFG { static int mean ( int mid [ ] , int freq [ ] , int n ) { int sum = 0 ; int freqSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += mid [ i ] * freq [ i ] ; return sum / freqSum ; } static int groupedSD ( int lower_limit , int upper_limit , int freq [ ] , int n ) { int mid [ ] = new int [ n ] ; int sum = 0 ; int freqSum = 0 ; int sd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { mid [ i ] = ( lower_limit [ i ] +
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 ; System . out . println ( gcd ( a , b ) ) ; } }
import java . io . * ; public class GFG { static float rectanglearea ( float a , float b ) { if ( a < 0 || b < 0 ) return - 1 ; return 2 * a * b ; } public static void main ( String [ ] args ) { float a = 10 , b = 8 ; System . out . println ( rectanglearea ( a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int k = n / l ; if ( r * k >= n ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
public class GFG { static int getsum ( int x ) { return ( x * ( x + 1 ) ) / 2 ; } static int countJumps ( int n ) { int n = Math . abs ( n ) ; int ans = 0 ; while ( getsum ( ans ) < n || ( getsum ( ans ) - n ) & 1 ) { ans += 1 ; } return ans ; } public static void main ( String [ ] args ) { int n = 9 ; System . out . println ( countJumps ( n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 10 ; static int lcs ( int dp [ ] [ ] , int arr1 [ ] , int n , int arr2 [ ] , int m , int k ) { if ( k < 0 ) return - ( 10 * 7 ) ; if ( n < 0 || m < 0 ) return 0 ; int ans = dp [ n ] [ m ] [ k ] ; if ( ans != - 1 ) return ans ; ans = Math . max ( lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ,
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int ans2 = Math . max ( x1 - x , y1 - y2 ) ; if ( ans2 % 2 == 0 ) { ans += 2 ; } else { ans += 2 ; } } System . out . println ( ans ) ; } }
public class GFG { static void Reverseorder ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; for ( int i = 0 ; i < n ; i ++ ) prime [ i ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i < ( n + 1 ) ; i += p ) prime [ i ] = false ; } } for ( int p = n ; p <= n ; p ++ ) { if ( prime [ p ] ) System . out . print ( p + " ▁ " ) ; } } public static void main ( String [ ] args ) { int N = 25 ; System . out . println ( " Prime ▁ number ▁ in ▁ reverse ▁ order ▁ " ) ; Reverseorder ( N ) ; } }
public class GFG { static void pattern ( int min_stars , int p_height ) { p_space = p_height - 1 ; int x = 1 ; for ( int i = 0 ; i < p_height ; i ++ ) { for ( int j = p_space ; j < i ; j ++ ) { System . out . print ( " * " ) ; } for ( int k = 0 ; k < min_stars ; k ++ ) { System . out . print ( " * " ) ; } for ( int n = ( p_height + p_height - 2 ) ; n >= x - 1 ; n -- ) { System . out . print ( " ▁ " ) ; } } } public static void main ( String [ ] args ) { int min_stars = 1 ; int p_height = 5 ; pattern ( min_stars , p_height ) ; } }
import
import java . io . * ; public class GFG { static int distancesum ( int x [ ] , int y [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) sum += Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ; } return sum ; } public static void main ( String [ ] args ) { int x [ ] = { - 1 , 1 , 3 , 2 } ; int y [ ] = { 5 , 6 , 5 , 3 } ; int n = x . length ; System . out . println ( distancesum ( x , y , n ) ) ; } }
import java . io . * ; public class GFG { static int MAX = 1000000 ; static double fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( ( double ) Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } static double calculateSum ( int l , int r ) { double sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } static double calculateFibonacci ( int k ) { int l = ( k * ( k - 1 ) ) / 2 ; int r = l + k ; double sum = calculateSum ( l , r - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int k = 3 ; System . out . println ( fib ( k ) ) ; } }
public class GFG { static int fib ( int n ) { int phi = ( ( 1 + ( 5 * ( 1 / 2 ) ) ) / 2 ) ; return ( phi * ( phi * ( 5 * ( 1 / 2 ) ) ) / 2 ) ; } static int calculateSum ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) sum += fib ( i ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }
public class GFG { static int fib ( int n ) { double phi = ( 1 + Math . sqrt ( 5 ) ) / 2 ; return ( int ) ( Math . pow ( phi , n ) / Math . sqrt ( 5 ) ) ; } static int calculateSum ( int l , int r ) { double sum = fib ( r + 2 ) - fib ( l + 1 ) ; return sum ; } public static void main ( String [ ] args ) { int l = 4 , r = 8 ; System . out . println ( calculateSum ( l , r ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { ans [ i ] = j ; } } } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( ans [ i ] + " ▁ " ) ; } } }
import java . util . * ; public class GFG { static int compareStrings ( String str1 , String str2 ) { int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = 0 ; if ( a >= b ) { ans = b - a ; } else { ans = a + b ; } System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int cx = sc . nextInt ( ) ; int cy = sc . nextInt ( ) ; int x4 = sc . nextInt ( ) ; int y4 = sc . nextInt ( ) ; int cx1 = sc . nextInt ( ) ; int cy1 = sc . nextInt ( ) ; int cx2 = sc . nextInt ( ) ; int cy2 = sc . nextInt ( ) ; int cx3 = sc . nextInt ( ) ; int cy3 = sc . nextInt ( ) ; int cx4 = sc . nextInt ( ) ; int cy4 = sc . nextInt ( ) ; int x5 = sc . nextInt ( ) ; int y5 = sc . nextInt ( ) ; int cx = sc . nextInt ( ) ; int cy5 = sc . nextInt ( ) ; int cxxx = cx + x2 - cx ; int cyxx = cy + y2 - cy ; int xxx = cx + x2 - x3 ; int yxx = cy + y2 - y3 ; int xyy = cx + x3 - y3 ; int yyy = cy + y3 - y3 ; System . out . println ( 3 ) ; System . out . println ( 3 ) ; System . out . println ( 3 ) ; System . out . println ( 3 ) ; System . out . println ( 3 ) ; System . out . println ( 3 ) ; System
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } } }
public class GFG { static int sumAP ( int n , int d ) { n = n / d ; return ( n ) * ( 1 + n ) * ( d / 2 ) ; } static int sumMultiples ( int n ) { n -= 1 ; return ( int ) ( sumAP ( n , 2 ) + sumAP ( n , 5 ) - sumAP ( n , 10 ) ) ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( sumMultiples ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int t = sc . nextInt ( ) ; if ( t == 0 ) break ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) ok = false ; } if ( ok ) System . out . println ( " OK " ) ; else System . out . println ( " OK " ) ; } } }
import java . util . * ; public class GFG { static int fact ( int num ) { int fact = 1 ; while ( num > 1 ) { fact = fact * num ; num = num - 1 ; } return fact ; } static int catalan ( int n ) { return fact ( 2 * n ) / ( fact ( n ) * fact ( n + 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; for ( int k = 0 ; k < n ; k ++ ) { int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) s += 1 ; } catalan_leftBST = catalan ( s ) ; catalan_rightBST = catalan ( n - s - 1 ) ; System . out . print ( catalan_leftBST +
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i + 1 ] == 1 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { ans = Math . max ( ans , arr [ i ] - arr [ i + 1 ] ) ; } } System . out . println ( ans ) ; } } }
public class GFG { static int countWays ( int n , int arr [ ] ) { int count [ ] = new int [ n + 1 ] ; int count [ ] = new int [ n + 1 ] ; int count [ ] = new int [ n + 1 ] ; if ( n == 0 ) return 1 ; for ( int i = 1 ; i <= n ; i ++ ) { int no_ways = 0 ; for ( int j = 0 ; j < arr ; j ++ ) { if ( i - j >= 0 ) { no_ways += count [ i - j ] ; } count [ i ] = no_ways ; } } return count [ n ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 } ; int n = 5 ; System . out . println ( countWays ( n , arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int a = sc . nextInt ( ) ; if ( a == 0 ) break ; int b = 0 ; int c = 0 ; for ( int i = 0 ; i < 12 ; i ++ ) { int x = sc . nextInt ( ) ; if ( x == a ) { b += 1 ; } else { c += 1 ; } } System . out . println ( b >= c ? b : c ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int [ ] arr = new int [ a ] ; for ( int i = 0 ; i < a ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; int max = 0 ; for ( int i = 0 ; i < a ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; ans = arr [ i ] ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= b ) { ans += arr [ i ] ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int binarySearch ( int arr [ ] , int low , int high , int key ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; if ( key == arr [ mid ] ) return mid ; if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ; return ( binarySearch ( arr , low , ( mid - 1 ) , key ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 7 , 8 , 9 , 10 } ; int n = arr . length ; int key = 10 ; System . out . println ( " Index : ▁ " + binarySearch ( arr , 0 , n , key ) ) ; } }
public class GFG { static void equal_xor_sum ( int arr [ ] , int n ) { int Sum = 0 ; int Xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Sum = Sum + arr [ i ] ; Xor = Xor ^ arr [ i ] ; } if ( Sum == Xor ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 6 , 3 , 7 , 10 } ; int n = arr . length ; equal_xor_sum ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( a [ i ] == b [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
public class GFG { static void findPairs ( int arr [ ] , int n ) { int cntEven = 0 ; int cntOdd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) cntEven ++ ; else cntOdd ++ ; } int evenPairs = 0 ; evenPairs += ( ( cntEven * ( cntEven - 1 ) ) / 2 ) ; evenPairs += ( ( cntOdd * ( cntEven - 1 ) ) / 2 ) ; System . out . println ( " Odd ▁ pairs ▁ = ▁ " + evenPairs ) ; System . out . println ( " Even ▁ pairs ▁ = ▁ " + evenPairs ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = arr . length ; findPairs ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int ans = Math . max ( a , Math . max ( b , c ) ) ; System . out . println ( ans ) ; } }
public class GFG { static int getRemainder ( int num , int divisor ) { return ( num - divisor * ( num / divisor ) ) ; } public static void main ( String [ ] args ) { int num = 100 ; int divisor = 7 ; System . out . println ( getRemainder ( num , divisor ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] == 0 ) { ans [ j ] = z ; } } } int ans1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] == 0 ) { ans1 = z ; } } } System . out . println ( ans1 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ w ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( a [ i ] [ j ] == - 1 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int getSingle ( int arr [ ] , int n ) { int ones = 0 ; int twos = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ones |= ( ones & arr [ i ] ) ; ones |= ( ones & twos ) ; twos = twos | ( ones & twos ) ; } return ones ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 2 , 3 } ; int n = arr . length ; System . out . println ( " The ▁ element ▁ with ▁ single ▁ occurrence ▁ is ▁ " + getSingle ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int maxdiff ( int arr [ ] , int n ) { int freq [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = Math . max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] ) ; else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = Math . max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] ) ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 1 , 3 , 2 , 3 , 2 } ; int n = arr . length ; System .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] < min ) { min = a [ i ] [ j ] ; ans = Math . min
import java . util . * ; public class GFG { static void makeAP ( int arr [ ] , int n ) { int initial_term = 0 , common_difference = 0 , 0 ; if ( n == 3 ) { common_difference = arr [ 2 ] - arr [ 1 ] ; initial_term = arr [ 1 ] - common_difference ; } else if ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) initial_term = arr [ 0 ] ; else if ( ( arr [ 2 ] - arr [ 1 ] ) == arr [ 3 ] - arr [ 2 ] ) initial_term = arr [ 2 ] - arr [ 1 ] ; else { common_difference = arr [ 3 ] - arr [ 0 ] ; initial_term = arr [ 1 ] - arr [ 0 ] ; } for ( int i = 0 ; i <
public class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y + x ) % ( y ^ x ) == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countPairs ( n ) ) ; } }
import java . io . * ; public class GFG { static int countPairs ( int n ) { int count = 0 ; for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = x + 1 ; y <= n ; y ++ ) { if ( ( y * x ) % ( y + x ) == 0 ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( countPairs ( n ) ) ; } }
import java . util . * ; public class Solution { public int longestPalindrome ( String s ) { int ans = 0 ; char [ ] [ ] map = new char [ s . length ( ) ] [ ] ; for ( int c = 0 ; c < s . length ( ) ; c ++ ) { char [ ] [ ] map = new char [ s . length ( ) ] ; for ( int i = 0 ; i < map . length ; i ++ ) { map [ i ] [ c ] = s . charAt ( i ) ; } for ( int i = 0 ; i < map . length ; i ++ ) { if ( map [ i ] [ c ] % 2 == 0 ) { ans += map [ i ] [ c ] / 2 ; } else { ans += map [ i ] [ c ] / 2 * 2 ; } } } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " abccccdd " ; int out = sObj . longestPalindrome ( s ) ; System . out . println ( out ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; i ++ ) res *= ( n - i ) ; res /= ( i + 1 ) ; return ( res ) ; } static int findWays ( int n ) { if ( n & 1 ) { return 0 ; } return catalan ( int ( n / 2 ) ) ; } public static void main ( String [ ] args ) { int n = 6 , k = 6 ; System . out . println ( " Total ▁ possible ▁ expression ▁ of ▁ length ▁ " + n + " ▁ is ▁ " + findWays ( n ) ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int da = sc . nextInt ( ) ; int db = sc . nextInt ( ) ; int arr [ ] = new int [ a ] ; int arr2 [ ] = new int [ b ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < arr . length ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr2 [ i ] == 0 ) { ans = Math . max ( ans , 0 ) ; break ; } } if ( ans == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . io . * ; public class GFG { static boolean isSumOfPowersOfTwo ( int n ) { if ( n % 2 == 1 ) return false ; else return true ; } public static void main ( String [ ] args ) { int n = 10 ; if ( isSumOfPowersOfTwo ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int countNumber ( int n ) { int result = 0 ; for ( int i = 1 ; i <= 10 ; i ++ ) { int s = ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( ( int ) ( ( int ) ( ( ( int ) ( ( ( int ) ( ( ( int ) ( ( ( int ) ( ( ( int ) ( ( ( ( int ) ( ( ( ( ( ( ( ( ( ( ( ( ( ( ' ' ' ) ) ) ) ) ) ; } int x = x * 10 + x ; if ( x <= n ) ) result += 1 ; } ) ; return result ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( countNumber ( n ) ) ; } }
import java . util . * ; public class GFG { static int N = 100 ; static int maxAverageOfPath ( int cost [ ] [ ] , int N ) { int dp [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ; dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ; for ( int i = 1 ; i <= N ; i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ; for ( int j = 1 ; j <= N ; j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j - 1 ] , dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ; for ( int i = 1 ; i <= N ; i ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [
import java . util . * ; public class GFG { static int MAX = 1000000 ; static int sieve_Prime [ ] = new int [ MAX + 4 ] ; static void form_sieve ( ) { sieve_Prime [ 1 ] = 1 ; for ( int i = 2 ; i <= MAX ; i ++ ) { if ( sieve_Prime [ i ] == 0 ) { for ( int j = i * 2 ; j <= MAX ; j += i ) { if ( sieve_Prime [ j ] == 0 ) sieve_Prime [ j ] = 1 ; sieve_count [ i ] += 1 ; } } } } static void form_sieve ( ) { int n = 2 ; System . out . println ( " Count ▁ = ▁ " + sieve_count [ n ] + 1 ) ; n = 3 ; System . out . println ( " Count ▁ = ▁ " + sieve_count [ n ] + 1 ) ; n = 3 ; System . out . println ( " Count ▁ = ▁ " + sieve_count [ n ] + 1 ) ; n = 3 ; System . out . println ( " Count ▁ = ▁ " + sieve_count [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int ans = 0 ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i
public class GFG { static int waysToSplit ( String s ) { int n = s . length ( ) ; int answer = 0 ; int prefix [ ] = new int [ n ] ; suffix [ 0 ] = new int [ 26 ] ; int i , prev = prefix [ 0 ] ; int suffix [ ] = new int [ n ] ; seen [ 0 ] = 0 ; for ( i = 0 ;
import java . util . * ; public class GFG { static int compute ( int TURNS ] [ ] , int [ ] [ ] ways ) { int TURNS = 15 ; int ways [ ] [ ] = new int [ TURNS ] [ TURNS ] ; for ( int i = 1 ; i <= TURNS ; i ++ ) { int row = [ ] ; for ( int j = 0 ; j < i + 1 ; j ++ ) { int temp = 0 ; if ( j < i ) temp = ways [ i - 1 ] [ j ] * i ; if ( j > 0 ) temp += ways [ i - 1 ] [ j - 1 ] ; row . append ( temp ) ; } ways [ TURNS ] [ i ] = row ; } int numer = 0 ; int denom = 0 ; int [ ] [ ] [ ] = new int [ TURNS ] [ TURNS ] ; for ( int i = 0 ; i < TURNS ; i ++ ) { int row = 0 ; for ( int j = 0 ; j < i + 1 ; j ++ ) { int temp = 0 ; if ( j < i ) temp = ways [ i - 1 ] [ j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int c = arr [ i ] ; int [ ] arr2 = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { arr2 [ j ] = arr [ j ] ; } int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr2 [ j ] == 1 ) { count ++ ; } } if ( count == 0 ) { ans [ i ] = c ; } else { ans [ i ] = c ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
import java . util . * ; public class GFG { static void merge ( int ar1 [ ] , int ar2 [ ] , int m , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { int last = ar1 [ m - 1 ] ; int j = m - 2 ; while ( j >= 0 && ar1 [ j ] > ar2 [ i ] ) { ar1 [ j + 1 ] = ar1 [ j ] ; j -- ; } if ( j != m - 2 || last > ar2 [ i ] ) { ar2 [ i ] = ar2 [ i ] ; ar2 [ i ] = last ; } } } public static void main ( String [ ] args ) { int ar1 [ ] = { 1 , 5 , 9 , 10 , 15 , 20 } ; int n = ar1 . length ; merge ( ar1 , ar2 , m , n ) ; System .
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int sameRemainder ( int a , int b , int c ) { int a1 = ( b - a ) ; int b1 = ( c - b ) ; int c1 = ( c - a ) ; return gcd ( a1 , gcd ( b1 , c1 ) ) ; } public static void main ( String [ ] args ) { int a = 62 , b = 132 ; int c = 237 ; System . out . println ( sameRemainder ( a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int sum = 0 ; int max = 0 ; for ( int i = 0 ; i < a ; i ++ ) { sum += ( b - c - d ) ; max = Math . max ( max , sum ) ; } sum += ( a - b ) ; if ( max < sum ) { System . out . println ( max ) ; } else { System . out . println ( sum ) ; } } }
import java . util . * ; public class GFG { static int [ ] [ ] dp = new int [ 501 ] [ 501 ] ; static int countWaysUtil ( int n , int parts , int nextPart ) { if ( parts == 0 && n == 0 ) return 1 ; if ( n <= 0 || parts <= 0 ) return 0 ; if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) return dp [ n ] [ nextPart ] [ parts ] ; int ans = 0 ; for ( int i = nextPart ; i <= n ; i ++ ) ans += countWaysUtil ( n - i , parts - 1 , i ) ; dp [ n ] [ nextPart ] [ parts ] = ans ; return ( ans ) ; } static int countWays ( int n ) { return countWaysUtil ( n , 4 , 1 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countWays ( n ) ) ; } }
public class GFG { static int find_k ( int a , int b ) { if ( ( a + b ) % 2 == 0 ) return ( ( a + b ) / 2 ) ; return - 1 ; } public static void main ( String [ ] args ) { int a = 2 , b = 16 ; System . out . println ( find_k ( a , b ) ) ; } }
public
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' a ' ) { System . out . print ( " b " ) ; } else { System . out . print ( " a " ) ; } } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static int findMinimumSubsequences ( int A [ ] , int B [ ] ) { int numberOfSubsequences = 1 ; int sizeOfB = B . length ; sizeOfA = Math . max ( sizeOfB , A . length ) ; sizeOfB = Math . max ( sizeOfA , sizeOfB ) ; int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } } System . out . println ( max ) ; } } }
public class GFG { static void FindRank ( int arr [ ] , int length ) { System . out . print ( 1 + " ▁ " ) ; for ( int i = 1 ; i < length ; i ++ ) { System . out . print ( 1 + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 88 , 14 , 69 , 30 , 29 , 89 } ; int length = arr . length ; FindRank ( arr , length ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int [ ] a
public class GFG { static int firstkdigits ( int n , int k ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product *= n ; while ( ( product / pow ( 10 , k ) ) != 0 ) product /= 10 ; return product ; } public static void main ( String [ ] args ) { int n = 15 ; int k = 4 ; System . out . println ( firstkdigits ( n , k ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int a = fs . nextInt ( ) ; int b = fs . nextInt ( ) ; System . out . println ( a * b ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) count ++ ; } System . out . println ( count ) ; } }
public class GFG { static int complement ( int num ) { int i = 0 ; int len = 0 ; int comp = 0 ; int temp = num ; while ( 1 ) { len += 1 ; num = num / 10 ; if ( Math . abs ( num ) == 0 ) break ; num = temp ; comp = Math . pow ( 10 , len ) - num ; } return ( comp ) ; } public static void main ( String [ ] args ) { int n = 25 ; System . out . println ( complement ( 25 ) ) ; System . out . println ( complement ( 456 ) ) ; System . out . println ( complement ( 456 ) ) ; } }
import java . io . * ; public class GFG { static int countUnsetBits ( int n ) { int x = n ; n |= n >> 1 ; n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ; t = Math . log ( x ^ n , 2 ) ; return Math . floor ( t ) ; } public static void main ( String [ ] args ) { int n = 17 ; System . out . println ( countUnsetBits ( n ) ) ; } }
public class GFG { static int minOperations ( int arr [ ] , int n ) { int result = 0 ; int freq [ ] = new int [ 1000001 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } int maxi = Math . max ( arr ) ; for ( int i = 1 ; i < maxi + 1 ; i ++ ) { if ( freq [ i ] != 0 ) { for ( int j = i * 2 ; j < maxi + 1 ; j ++ ) { freq [ j ] = 0 ; } result += 1 ; } } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 2 , 4 , 4 , 4 } ; int n = arr . length ; System . out . println ( minOperations ( arr , n ) ) ; } }
public class GFG { static int totalWays ( int N , int M , int X ) { int [ ] [ ] dp = new int [ N + 1 ] [ M + 1 ] ; if ( X == 1 ) dp [ 0 ] [ 0 ] = 1 ; else dp [ 0 ] [ 1 ] = 0 ; if ( X == 1 ) dp [ 1 ] [ 0 ] = 0 ; else dp [ 1 ] [ 0 ] = 1 ; if ( X == 1 ) dp [ 1 ] [ 0 ] = 0 ; else dp [ 1 ] [ 0 ] = 1 ; for ( int i = 2 ; i <= N ; i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; for ( int i = 2 ; i <= N ; i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] ; for ( int i = 2 ; i <=
import java . io . * ; public class GFG { static int getMinNum ( int a , int b , int c ) { if ( c < a || c > b ) return c ; int x = ( ( b / c ) * c ) + c ; return x ; } public static void main ( String [ ] args ) { int a = 2 , b = 4 , c = 4 ; System . out . println ( getMinNum ( a , b , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' I ' ) { max = Math . max ( max , i - 1 ) ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = sc . nextInt ( ) ; dp [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ j ] + a [ i ] ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++
public class GFG { static int countWays ( int arr [ ] , int m , int N ) { int count [ ] = new int [ N + 1 ] ; int count [ ] = new int [ N + 1 ] ; count [ 0 ] = 1 ; for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ; } } return count [ N ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 6 } ; int m = arr . length ; int N = 7 ; System . out . println ( " Total ▁ number ▁ of ▁ ways ▁ = ▁ " + countWays ( arr , m , N ) ) ; } }
import java . io . * ; public class GFG { static int numberOfWays ( int x ) { if ( x == 0 || x == 1 ) return 1 ; else return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) ) ; } public static void main ( String [ ] args ) { int x = 3 ; System . out . println ( numberOfWays ( x ) ) ; } }
import java . util . * ; public class GFG { static int countFreq ( int a [ ] , int n ) { HashMap < Integer , Integer > hm = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) hm . put ( a [ i ] , hm . get ( a [ i ] ) + 1 ) ; int cumul = 0 ; for ( int i = 0 ; i < n ; i ++ ) cumul += hm . get ( a [ i ] ) ; if ( hm . containsKey ( a [ n ] ) ) System . out . println ( a [ n ] + " ▁ - > " + cumul ) ; else System . out . println ( a [ n ] + " ▁ - > " + cumul ) ; return n ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 2 , 4 , 2 , 1 } ; int n = a . length ; int countFreq ( a , n ) ; System . out . println ( countFreq ( a , n ) ) ; } }
public class GFG { static boolean possibleTripletInRange ( int L , int R ) { boolean flag = false ; PossibleTripletInRange ( L , R ) ; boolean possibleA = false ; PossibleTripletInRange ( L , R ) ; int flag = ( L % 2 ) ; if ( ( L % 2 ) > 0 ) L += 1 ; PossibleTripletInRange ( L , R ) ; int L = 23 ; int R = 46 ; PossibleTripletInRange ( L ,
import java . util . * ; public class GFG { static String conversion ( charSet , String str1 ) { char s2 = " " ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) s2 += alphabets [ charSet . index ( i ) ] ; return s2 ; } public static void main ( String [ ] args ) { char alphabets = " abcdefghijklmnopqrstuvwxyz " ; char str1 = " egrt " ; System . out . println (conversion ( alphabets , str1 ) ) ; } }
import java . util . * ; public class GFG { static void generateNumber ( int count , int a [ ] , int n , int num , int k ) { if ( k == count ) { int s = 0 ; int [ ] s = new int [ n ] ; generateNumber ( count + 1 , a , n , 0 , k ) ; System . out . print ( " The " + ( int ) ( s ) + " ▁ " ) ; System . out . print ( " The " + ( int ) ( s ) + " ▁ " ) ; System . out . print ( " The " + ( int ) ( s ) + " ▁ " ) ; } } static void printDistinctIntegers ( int k , int a [ ] , int n ) { generateNumber ( 0 , a , n , 0 , k ) ; System . out . print ( " The " + ( int ) ( a [ n ] + " ▁ " ) ; System . out . print ( " The " + ( int ) ( a [ n ] + " ▁ " ) ) ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 8 , 17 , 5 } ;
public class GFG { static int product ( int x ) { int prod = 1 ; while ( x > 0 ) { prod *= ( x % 10 ) ; x /= 10 ; } return prod ; } static int findNumber ( int l , int r ) { int a = str ( l ) ; int b = str ( r ) ; int ans = r ; for ( int i = 0 ; i < b ; i ++ ) { int curr [ ] = ( ( ( ( ( curr [ i ] - '0' ) - 1 ) ) * 10 + ( int ) ( ( ( curr [ i ] - '0' ) - 1 ) ) + ( ( int ) ( ( ( int ) (
import java . util . * ; public class GFG { static int __g = 1 ; static int __g ; static int [ ] arr ; static int [ ] ans ; static int findPrime ( int n ) { boolean isPrime [ ] = new boolean [ 100005 ] ; for ( int i = 2 ; i * i < 100005 ; i ++ ) { if ( isPrime [ i ] ) { int j = 2 * i ; while ( j < 100005 ) { isPrime [ j ] = false ; j += i ; } } } int s = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) s += arr [ i ] ; if ( isPrime [ s ] == true ) return s ; return 0 ; } static int __g ; static int minNumber ( int arr [ ] ) { int sieveOfEratostheneses ( ) ; s
public class GFG { static int MAX = 25 ; static int getMinSum ( int arr [ ] , int n ) { int bits_count [ ] = new int [ MAX ] ; int max_bit = 0 ; int sum = 0 ; int ans = 0 ; for ( int d = 0 ; d < n ; d ++ ) { e = arr [ d ] ; f = 0 ; while ( e > 0 ) { int rem = e % 2 ; e = e / 2 ; if ( rem == 1 ) { bits_count [ f ] += rem ; } f += 1 ; } max_bit = max ( max_bit , f ) ; } for ( int d = 0 ; d < max_bit ; d ++ ) { int temp = pow ( 2 , d ) ; if ( bits_count [ d ] > n / 2 ) { ans = ans + temp
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } if ( count > n ) { System . out . println ( " Impossible " ) ; } else { System . out . println ( " Impossible " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int k1 = a [ i ] ; int k2 = b [ i ] ; int c1 = c [ k1 ] ; int c2 = c [ k2 ] ; if ( k1 == k2 ) { ans [ i ] = c1 ; } else
public class GFG { static int findMaximumNum ( int arr [ ] , int n ) { int i = n ; while ( i >= 1 ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i <= arr [ j ] ) count ++ ; } if ( count >= i ) return i ; i -= 1 ; } return 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 8 , 10 } ; int n = arr . length ; System . out . println ( findMaximumNum ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { ans [ 0 ] = arr [ n - 1 ] ; } else if ( i == n - 1 ) { ans [ n - 1 ] = arr [ n - 2 ] ; } else { ans [ n - 2 ] = arr [ n - 1 ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = a [ i ] [ j ] ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j == 0 ) continue ; if ( dp [ i ] [ j ] == 0 ) continue ; if ( dp
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( m == 0 && n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ m ] ; for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } System . out . println ( nCr ( n , r ) ) ; } static int nCr ( int n , int r ) { return n % r == 0 ? r / n : r / n ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int max = Math . max ( a , Math . max ( b , c ) ) ; int min = Math . min ( a , Math . min ( b , d ) ) ; System . out . println ( max - min ) ; } }
import java . util . * ; public class GFG { static void calculate ( int a [ ] , int b [ ] , int n , int m ) { int mul = 1 ; for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] != 0 ) mul = mul * b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { int x = Math . floor ( a [ i ] / mul ) ; System . out . print ( x + " ▁ " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 5 , 100 , 8 } ; int b [ ] = { 2 , 3 } ; int n = a . length ; int m = b . length ; calculate ( a , b , n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; sum += a [ i ] ; } int sum2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum2 += a [ i ] ; } System . out . println ( sum2 - sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int ans = 0 ; int left = 0 ; int right = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; if ( c == ' > ' ) { ans ++ ; } else { left ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = 1 ; while ( n % 2 == 0 ) { x = x * 2 ; n >>= 1 ; } System . out . println ( x ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] dpm = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dpm [ i ] = sc . nextInt ( ) ; } int [ ] ppm = new int [ dpm . length ] ; for ( int i = 0 ; i < dpm . length ; i ++ ) { ppm [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = dpm [ i ] ; int d = ppm [ i ] ; int ppm2 = p [ i ] ; int ppm3 = p [ i ] ; int ppm4 = p [ i ] ; int ppm5 = p [ i ] ; int ppm6 = p [ i ] ; int ppm7 = p [ i ] ; int ppm8 = p [ i ] ; int ppm9 =
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int a [ ] = new int [ n ] ; int b [ ] = new int [ m ] ; int c [ ] = new int [ n ] ; int d [ ] = new int [ m ] ; int c1 = 0 ; int d1 = 0 ; int c2 = 0 ; int c3 = 0 ; int d2 = 0 ; int c4 = 0 ; int c5 = 0 ; int c6 = 0 ; int c7 = 0 ; int c8 = 0 ; int c9 = 0 ; int c10 = 0 ; int c11 = 0 ; int c12 = 0 ; int c13 = 0 ; int c14 = 0 ; int c15 = 0 ; int c16 = 0 ; int c17 = 0 ; int c18 = 0 ; int c19 = 0 ; int c20 = 0 ; int c21 = 0 ; int c22 = 0 ; int c23 = 0 ; int c24 = 0 ; int c25 = 0 ;
import java . io . * ; public class GFG { static int longestAlternatingSubarray ( int a [ ] , int n ) { int longest = 1 ; int cnt = 1 ; int i = 1 ; while ( i < n ) { if ( a [ i ] * a [ i - 1 ] < 0 ) cnt = cnt + 1 ; else cnt = 1 ; i ++ ; } return longest ; } public static void main ( String [ ] args ) { int a [ ] = { - 5 , - 1 , - 1 , 2 , - 2 , - 3 } ; int n = a . length ; System . out . println ( longestAlternatingSubarray ( a , n ) ) ; } }
public class GFG { static void checkTypeOfTriangle ( int a , int b , int c ) { int sqa = Math . pow ( a , 2 ) ; sqa = Math . pow ( b , 2 ) ; sqb = Math . pow ( c , 2 ) ; if ( sqa == sqa + sqb || sqb == sqa + sqb || sqc == sqa + sqb ) System . out . println ( " Right - angled ▁ Triangle " ) ; else if ( sqa > sqb + && sqb > sqa + sqc || sqc > sqa + sqb ) System . out . println ( " Obtuse - angled ▁ Triangle " ) ; else System . out . println ( " Acute - angled ▁ Triangle " ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 2 ; int c = 2 ; checkTypeOfTriangle ( a , b , c ) ; } }
public class GFG { static int countSubsequence ( String s , int n ) { int cntG = 0 ; int cntF = 0 ; int result = 0 ; int C = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == ' G ' ) cntG ++ ; if ( s . charAt ( i ) == ' F ' ) cntF ++ ; else continue ; } System . out . println ( result ) ; } public static void main ( String [ ] args ) { String s = " GFG " ; int n = s . length ( ) ; int countSubsequence ( s , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( b [ i ] [ j ] == 0 ) { ans ++ ; } } } System
import java . io . * ; public class GFG { static int countSteps ( int n ) { int steps = 0 ; while ( n > 0 ) { int largest = ( n * ( 1 / 3 ) ) ; n -= largest * largest ; steps += 1 ; } return steps ; } public static void main ( String [ ] args ) { int n = 150 ; System . out . println ( countSteps ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == a [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . io . * ; public class GFG { static int bitsoncount ( int x ) { return ( x ) . count ( '1' ) ; } static int find_count ( int arr [ ] ) { int ans = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int x = bitsoncount ( i ) ; if ( i % x == 0 ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; System . out . println ( find_count ( arr ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % n != 0 ) { System . out . println ( " NO " ) ; return ; } sum += b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] % n != 0 ) { System . out . println ( " NO " ) ; return ; } } System . out . println ( " YES " ) ; } }
public class GFG { static int maxProd ( int N ) { if ( N == 0 ) return 1 ; if ( N < 10 ) return N ; return max ( maxProd ( N / 10 ) * ( N % 10 ) , maxProd ( N / 10 - 1 ) * 9 ) ; } public static void main ( String [ ] args ) { int N = 390 ; System . out . println ( maxProd ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { max = Math . max ( max , arr [ i ] ) ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = a [ i ] ; int y = b [ i ] ; if ( x == 0 ) { ans [ i ] = y ; } else { ans [ i ] = Math . min ( ans [ i ] , Math . abs ( x - a [ i ] ) ) ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } } }
public class GFG { static int countNonDecreasing ( int n ) { int N = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count = count * ( N + i - 1 ) ; count = count / i ; } return count ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countNonDecreasing ( n ) ) ; } }
public class GFG { static int reduceString ( String s , int l ) { int count = 1 ; int steps = 0 ; for ( int i = 1 ; i < l ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) count ++ ; else steps += ( count / 2 ) ; count = 1 ; } steps += ( count / 2 ) ; return steps ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; int l = s . length ( ) ; System . out . println ( reduceString ( s , l ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int A = sc . nextInt ( ) ; int B = sc . nextInt ( ) ; int C = sc . nextInt ( ) ; int [ ] [ ] a = new int [ A ] [ B ] ; for ( int i = 0 ; i < A ; i ++ ) { for ( int j = 0 ; j < B ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < B ; i ++ ) { if ( a [ i ] [ A - 1 ] == 1 ) { ans ++ ; } } for ( int i = 0 ; i < C ; i ++ ) { if ( a [ i ] [ A - 1 ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j == i ) continue ; dp [ i ] [ j ] = dp [ i ] [ j ] + a [ i ] ; dp [ i ] [ j ] = dp [ i ] [ j ] + b [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( dp [ i ] [ n - 1 ] ) ; } } }
import java . util . * ; public class GFG { static long mod = 1000000007 ; static long mult ( long a , long b ) { return ( ( a % mod ) * ( b % mod ) ) % mod ; } static long calculate_factors ( long n ) { long cnt = 0 ; long ans = 1 ; while ( n % 2 == 0 ) { cnt += 1 ; n = n / 2 ; } if ( cnt > 0 ) ans = mult ( ans , ( cnt + 1 ) ) ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { cnt = 0 ; while ( n % i == 0 ) { cnt ++ ; n = n / i ; } if ( cnt > 0 ) ans = mult ( ans , ( cnt + 1 ) ) ; } if ( n > 2 ) ans = mult ( ans , 2 ) ; return ans % mod ; } public static void main ( String [ ] args ) { long n = 19
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == '1' ) { i ++ ; } else { i ++ ; } } System . out . println ( s . substring ( 0 , i ) + s . substring ( i + 1 ) ) ; } }
public class GFG { static int maxAbsDiff ( int arr [ ] , int n ) { int minEle = arr [ 0 ] ; int maxEle = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { minEle = min ( minEle , arr [ i ] ) ; maxEle = max ( maxEle , arr [ i ] ) ; } return ( maxEle - minEle ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 1 , 5 , 3 } ; int n = arr . length ; System . out . println ( maxAbsDiff ( arr , n ) ) ; } }
import
import java . util . * ; public class GFG { static int minRemove ( int a [ ] , int b [ ] , int n , int m ) { int countA [ ] = new int [ n ] ; int countB [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) countA [ a [ i ] ] = countA . get ( a [ i ] , 0 ) + 1 ; for ( int i = 0 ; i < n ; i ++ ) countB [ b [ i ] ] = countB . get ( b [ i ] , 0 ) + 1 ; int res = 0 ; for ( int x = 0 ; x < countA . length ; x ++ ) { if ( x != countA [ x ] ) res ++ ; } return res ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 4 } ; int b [ ] = { 2 , 3 , 4 , 5 , 8 } ; int n = a . length ; int m = b . length ; System . out . println ( minRemove ( a , b , n , m ) ) ; } }
public class GFG { static int count ( int l , int r ) { int cnt = 0 ; for ( int i = l ; i < r ; i ++ ) { if ( i < 10 ) cnt ++ ; else { int n = i % 10 ; int k = i ; while ( k >= 10 ) k /= 10 ; if ( n == k ) cnt ++ ; } } return cnt ; } public static void main ( String [ ] args ) { int L = 2 , R = 60 ; System . out . println ( count ( L , R ) ) ; L = 1 ; R = 1000 ; System . out . println ( count ( L , R ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { if ( arr [ i ] == 0 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static int bit ( int x ) { int ans = 0 ; while ( x > 0 ) { x /= 2 ; ans += 1 ; } return ans ; } static boolean check ( int d , int x ) { if ( bit ( x / d ) <= bit ( d ) ) return true ; return false ; } static int bs ( int n ) { int l = 1 , r = ( int ) Math . sqrt ( n ) ; while ( l < r ) { int m = ( l + r ) / 2 ; if ( check ( m , n ) ) r = m ; else l = m + 1 ; } if ( check ( l , n ) == False ) return Math . floor ( l + 1 ) ; else return Math . floor ( l ) ; } static int countDivisor ( int n ) { return n - bs ( n ) + 1 ; } public static void main ( String [ ] args ) { int n = 5 ; System
import java . util . * ; public class GFG { static int INT_MAX = 100000000 ; static int minimalSteps ( String s , int n ) { int dp [ ] = new int [ n ] ; String s1 = " " ; String s2 = " " ; int s1 = " " ; int s2 = " " ; int dp [ ] = new int [ n ] ; s1 += s [ 0 ] ; s1 += s [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) s1 += s [ i ] ; dp [ 0 ] = Math . min ( dp [ 0 ] , dp [ i - 1 ] + 1 ) ; if ( s1 == s2 ) dp [ n * 2 + 1 ] = Math . min ( dp [ i ] + 1 , dp [ i * 2 + 1 ] ) ; return dp [ n - 1 ] ; } public static void main ( String [ ] args ) { String s = " aaaaaaaa " ; int n = s . length ( ) ; System . out . println ( minimalSteps ( s , n ) ) ; } }
import java . io . * ; public class GFG { static boolean checkUtil ( int num , int dig , int base ) { if ( dig == 1 && num < base ) return true ; if ( dig > 1 && num >= base ) return false ; if ( dig > 1 && num >= base ) return false ; return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base < 33 ; base ++ ) { if ( checkUtil ( num , dig , base ) ) return true ; } return false ; } static boolean check ( int num , int dig ) { for ( int base = 2 ; base < 33 ; base ++ ) { if ( checkUtil ( num , dig , base ) ) return true ; } return false ; } public static void main ( String [ ] args ) { int num = 8 ; int dig = 3 ; if ( check ( num , dig ) == true ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } } static void getMin ( int arr [ ] , int i , int j ) { int minVal = arr [ i ] ; int i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( max < b [ i ] ) { max = b [ i ] ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { double a = sc . nextDouble ( ) ; double b = sc . nextDouble ( ) ; double c = sc . nextDouble ( ) ; double d = sc . nextDouble ( ) ; double e = sc . nextDouble ( ) ; double f = sc . nextDouble ( ) ; double g = sc . nextDouble ( ) ; double h = sc . nextDouble ( ) ; double ans = 0 ; if ( Math . abs ( a - b ) < 1e-10 ) { ans = 1e-10 ; } else { ans = h ; } System . out . println ( ans ) ; } } }
public class GFG { static int nthXorFib ( int n , int a , int b ) { if ( n == 0 ) return a ; if ( n == 1 ) return b ; if ( n == 2 ) return a ^ b ; return nthXorFib ( n % 3 , a , b ) ; } public static void main ( String [ ] args ) { int a = 1 , b = 2 ; int n = 10 ; System . out . println ( nthXorFib ( n , a , b ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int Area ( int a ) { if ( a < 0 ) return - 1 ; int h = 1.268 * a ; return ( h < 0 ) ? - 1 : h ; } public static void main ( String [ ] args ) { int a = 5 ; System . out . println ( Area ( a ) + " ▁ " + Area ( a ) ) ; } }
import java . util . * ; public class GFG { static int compute ( int n ) { int ans = 0 ; Stack < Integer > stack = new Stack < Integer > ( ) ; while ( stack . size ( ) > 0 ) { int leftn = stack . pop ( ) ; int rightn = stack . pop ( ) ; int d = leftn + rightn ; if ( d <= 12000 ) { n = leftn + rightn ; ans += 1 ; stack . push ( ( n , d , rightn , rightn ) ) ; stack . push ( leftn , leftd , n , d ) ; } } return Integer . toString ( ans ) ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 2 == 0 ) { System . out . println ( 2 * n / 2 ) ; } else { System . out . println ( 0 ) ; } } }
public class GFG { static int sieve ( int prime [ ] , int n ) { boolean prime [ ] = new boolean [ n ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } int maxVal = ( int ) ( Math . pow ( 10 , d ) - 1 ) ; prime = [ true ] * ( maxVal + 1 ) ; sieve ( prime , maxVal ) ; sum = 0 ; for ( int i = 2 ; i <= maxVal + 1 ; i ++ ) { if ( prime [ i ] ) { sum += i ; } } return sum ; } static int sumPrime ( int d ) { int maxVal = ( int ) ( Math . pow ( 10 , d ) - 1 ) ; int sum = 0 ; for ( int i = 2 ; i <= maxVal + 1 ; i ++ ) { if ( prime [ i ] ) {
public class GFG { static int __gcd ( int a , int b ) { if ( b == 0 ) return a ; return __gcd ( b , a % b ) ; } static int sumPrime ( int d ) { int maxVal = Integer . MIN_VALUE ; int prime [ ] = new int [ d ] ; prime [ 1 ] = False ; for ( int p = 2 ; p * p <= d ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= d ; i += p ) prime [ i ] = false ; } } int sum = 0 ; for ( int i = 2 ; i <= maxVal + 1 ; i ++ ) { if ( prime [ i ] == true ) sum += i ; } return sum ; } static int __gcd ( int a , int b ) { if ( a == 0 ) return b ; return __gcd ( b , a % b ) ; } public static void main ( String [ ] args ) { int d = 8 ; System . out . println ( sumPrime ( d ) ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( sum / ( n - i ) >= b ) { System . out . println ( i ) ; break ; } } System . out . println ( sum ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = a [ i ] ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = b [ i ] ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = d [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( ans [ i ] ) ; } } }
public class GFG { static int maxPartitions ( int arr [ ] , int n ) { int ans = 0 ; max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { max_so_far = max ( max_so_far , arr [ i ] ) ; if ( max_so_far == i ) ans ++ ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 3 , 4 } ; int n = arr . length ; System . out . println ( maxPartitions ( arr , n ) ) ; } }
public class GFG { static int countMaxContiguous ( int arr [ ] , int n ) { int current_max = 0 ; int max_so_far = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) current_max = 0 ; else current_max += 1 ; max_so_far = Math . max ( current_max , max_so_far ) ; } return max_so_far ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 0 , 2 , 4 , 3 , 8 , 9 } ; int n = arr . length ; System . out . println ( countMaxContiguous ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static double cubeSide ( double h , double r ) { if ( h < 0 && r < 0 ) return - 1 ; double a = ( ( h * r * Math . sqrt ( 2 ) ) / ( h + Math . sqrt ( 2 ) * r ) ) ; return a ; } public static void main ( String [ ] args ) { double h = 5 , r = 6 ; System . out . println ( cubeSide ( h , r ) + " \n " ) ; } }
import java . util . * ; public class GFG { static void pattern ( int rows_no ) { for ( int i = 1 ; i <= rows_no ; i ++ ) { for ( int k = 1 ; k <= i ; k ++ ) { System . out . print ( " ▁ " ) ; } for ( int j = i ; j <= rows_no ; j ++ ) { System . out . print ( j + " ▁ " ) ; } System . out . println ( ) ; } } public static void main ( String [ ] args ) { int rows_no = 7 ; pattern ( rows_no ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int minI = Integer . MAX_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] < minI ) { minI = a [ j ] ; } } if ( minI < min ) { min = minI ; } } System . out . println ( min ) ; } }
public class GFG { static int check_digits ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) % 2 == 0 ) return 0 ; n /= 10 ; } return 1 ; } static int smallest_number ( int n ) { int i = n ; while ( 1 ) { if ( check_digits ( i ) ) return i ; i += 1 ; } if ( ( n / 10 ) % 2 == 0 ) return 0 ; return 1 ; } static int smallest_number ( int n ) { int i = n ; while ( 1 ) { if ( check_digits ( i ) ) return i ; i += 1 ; } if ( ( n / 10 ) % 2 == 0 ) return 0 ; return 1 ; } public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallest_number ( N ) ) ; } }
import java . io . * ; public class GFG { static int check_digits ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) % 2 == 1 ) return 0 ; n /= 10 ; } return 1 ; } static int smallest_number ( int n ) { for ( int i = 2401 ; i >= 0 ; i -- ) { if ( check_digits ( i ) == 1 ) return i ; } return 1 ; } static int smallest_number ( int n ) { for ( int i = 2401 ; i >= 0 ; i -- ) { if ( check_digits ( i ) == 1 ) return i ; } return 1 ; } public static void main ( String [ ] args ) { int N = 2397 ; System . out . println ( smallest_number ( N ) ) ; } }
public class GFG { static void triangular_series ( int n ) { int j = 1 ; int k = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { System . out . print ( k + " ▁ " ) ; j = j + 1 ; k = k + j ; } } public static void main ( String [ ] args ) { int n = 5 ; triangular_series ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 1 ) { ans [ i ] = arr [ i ] - 1 ; } } int ans1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ans [ i ] > 1 ) { ans1 = ans [ i ] - 1 ; } } System . out . println ( ans1 ) ; } }
public class GFG { static int findPosition ( int k , int n ) { int f1 = 0 , f2 = 1 ; int i = 2 ; while ( i != 0 ) { f3 = f1 + f2 ; f1 = f2 ; f2 = f3 ; if ( f2 % k == 0 ) return n * i ; i ++ ; } return 0 ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 4 ; System . out . println ( " Position ▁ of ▁ n " + " th ▁ multiple ▁ of ▁ k ▁ in ▁ Fibonacci ▁ Series ▁ is ▁ " + findPosition ( k , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = 0 ; int j = 0 ; while ( i < s . length ( ) ) { if ( s . charAt ( i ) == s . charAt ( j ) ) { j ++ ; i ++ ; } else { j ++ ; } } System . out . println ( s . substring ( i , j ) + " " + s . substring ( j , s . length ( ) ) ) ; } }
public class GFG { static int countMinimumMoves ( int arr [ ] , int n , int k ) { for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != arr [ k - 1 ] ) return i + 1 ; } for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != arr [ k - 1 ] ) return i + 1 ; } return 0 ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int K = 4 ; int n = arr . length ; System . out . println ( countMinimumMoves ( arr , n , K ) ) ; } }
public class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y % 2 == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int powerGCD ( int a , int b , int n ) { int e = power ( a , n , b ) ; return gcd ( e , b ) ; } static int powerGCD ( int a , int b , int n ) { int e = power ( a , n , b ) ; return gcd ( e , b ) ; } public static void main ( String [ ] args ) { int a = 5 , b = 4 ; int n = 2 ; System . out . println ( powerGCD ( a , b , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int [ ] arr = new int [ t ] ; for ( int i = 0 ; i < t ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] == s ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; System . out . println ( ( n - 2 ) * ( n - 1 ) ) ; } }
import java . util . * ; public class GFG { static int countIdenticalRows ( int mat [ ] [ ] ) { int count = 0 ; for ( int i = 0 ; i < mat . length ; i ++ ) { int hs [ ] = new int [ ] { 0 , 0 } ; for ( int j = 0 ; j < mat [ i ] . length ; j ++ ) { hs [ mat [ i ] [ j ] = 1 ; } if ( len ( hs ) == 1 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 1 , 1 , 1 } , { 1 , 2 , 3 } , { 5 , 5 , 5 } } ; System . out . println ( countIdenticalRows ( mat ) ) ; } }
import java . util . * ; public class GFG { static void createSorted ( int [ ] a , int n ) { int b [ ] = new int [ n ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( b [ j ] == a [ j ] ) b [ j ] = a [ j ] ; else b [ j ] = a [ j ] ; } int max = 0 ; int pos = 0 ; while ( start <= end ) { int mid = start + ( end - start ) / 2 ; if ( b [ mid ] == a [ j ] ) { b [ mid ] = a [ j ] ; break ; } else if ( b [ mid ] > a [ j ] ) pos = end - mid ; else pos
public class GFG { static int countTotalDistinct ( String str ) { int cnt = 0 ; Set < String > set = new HashSet < String > ( ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { String temp = " " ; String ans = set . add ( str ) ; for ( int j = i ; j < str . length ( ) ; j ++ ) { temp = temp + str . charAt ( j ) ; ans . add ( str . charAt ( j ) ) ; if ( temp . equals ( str . substring ( j ) ) ) { cnt ++ ; } } } return cnt ; } public static void main ( String [ ] args ) { String str = " ABCA " ; System . out . println ( countTotalDistinct ( str ) ) ; } }
import java . io . * ; public class GFG { static int firstDigit ( int n ) { int digits = ( int ) ( Math . log10 ( n ) ) ; n = ( int ) ( n / pow ( 10 , digits ) ) ; return n ; } static int lastDigit ( int n ) { return ( n % 10 ) ; } public static void main ( String [ ] args ) { int n = 98562 ; System . out . println ( firstDigit ( n ) + " ▁ " ) ; System . out . println ( lastDigit ( n ) ) ; } }
public class GFG { static void removeZeros ( int a [ ] , int n ) { int ind = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) ind = i ; } if ( ind == - 1 ) System . out . print ( " Array ▁ has ▁ leading ▁ zeros ▁ only " ) ; else { int b [ ] = new int [ n - ind ] ; for ( int i = 0 ; i < n - ind ; i ++ ) b [ i ] = a [ ind + i ] ; for ( int i = n - ind ; i < n - ind ; i ++ ) System . out . print ( b [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 0 , 0 , 0 , 0 , 1 , 2 , 0 , 3 } ; int n = a . length ; removeZeros ( a , n ) ; } }
import java . util . * ; public class GFG { static int find_maxm ( int arr [ ] , int n ) { HashMap < Integer , Integer > mpp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mpp . containsKey ( arr [ i ] ) ) { mpp . put ( arr [ i ] , mpp . get ( arr [ i ] ) + 1 ) ; } else mpp . put ( arr [ i ] , 1 ) ; } int ans = 0 ; for ( int value : mpp . values ( ) ) { if ( value == ans ) ans = Math . max ( ans , value ) ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 2 , 2 , 3 , 4 , 3 } ; int n = arr . length ; System . out . println ( find_maxm ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int i
import java . io . * ; public class GFG { static int sumOfDigitsSingle ( int x ) { int ans = 0 ; while ( x > 0 ) { ans += x % 10 ; x /= 10 ; } return ans ; } static int closest ( int x ) { int ans = 0 ; while ( ans * 10 + 9 <= x ) { ans = ans * 10 + 9 ; } return ans ; } static int sumOfDigitsTwoParts ( int N ) { int A = closest ( N ) ; return sumOfDigitsSingle ( A ) + sumOfDigitsSingle ( N - A ) ; } public static void main ( String [ ] args ) { int N = 35 ; System . out . println ( sumOfDigitsTwoParts ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] == 1 ) { dp [ i ] = 0 ; } else { dp [ i ] = dp [ i - 1 ] + c [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( dp [ i ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int max = Math . max ( Math . max ( n , m ) , r - 1 ) ; int min = Math . min ( Math . min ( n , m ) , r - 1 ) ; System . out . println ( max + min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i + 1 ] > 1 ) ok = false ; } if ( ok ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } } }
public class GFG { static int cal_sin ( int n ) { int accuracy = 0.0001 ; n = n * ( 3.142 / 180.0 ) ; int x1 = n ; int sinx = n ; int cosx = n ; int i = 1 ; while ( true ) { denominator = 2 * i * ( 2 * i + 1 ) ; x1 = - x1 * n * n / denominator ; sinx = sinx + x1 ; i = i + 1 ; if ( accuracy <= Math . abs ( sinx - sinx ) ) break ; } System . out . println ( Math . pow ( sinx , 2 ) ) ; } public static void main ( String [ ] args ) { int n = 90 ; cal_sin ( n ) ; } }
import java . io . * ; public class GFG { static int multiply ( int array [ ] , int n ) { int pro = 1 ; for ( int i = 0 ; i < n ; i ++ ) pro = pro * array [ i ] ; return pro ; } public static void main ( String [ ] args ) { int array [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = array . length ; System . out . println ( multiply ( array , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { ans = Math . max ( ans , a [ i ] ) ; } } System . out . println ( ans ) ;
public class GFG { static int bit ( int n ) { int count = 0 ; while ( n > 0 ) { count += 1 ; n = n & ( n - 1 ) ; } return count ; } static int maxSumOfBits ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = bit ( arr [ i ] ) ; int excl = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( incl > excl ) excl = excl ; else excl = excl + arr [ i ] ; } if ( incl > excl ) return incl ; else return excl ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 } ; int n = arr . length ; System . out . println ( maxSumOfBits ( arr
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util .
public class GFG { static int f ( int x , int y ) { int v = y - 2 * x * x + 1 ; return v ; } static void correct ( int x , int y , int x1 , int y1 , int h ) { int e = 0 , y1c = y1 ; while ( Math . abs ( y1c - y1 )
public class GFG { static void D_Pattern ( String str , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j == 1 || ( ( i == 0 || i == n - 1 ) && j > 1 && j < n - 2 ) { string = string + " * " ; } else { string = string + " ▁ " ; } } } } public static void main ( String [ ] args ) { String str = " " ; int n = 9 ; System . out . println ( D_Pattern ( str , n ) ) ; } }
public class GFG { static void kthString ( int n , int k ) { int total = 0 ; int i = 1 ; while ( total < k ) { total = total + n - i ; i ++ ; } int first_y_position = i - 1 ; int second_y_position = k - ( total - n + first_y_position ) ; for ( int j = 1 ; j < first_y_position ; j ++ ) { System . out . print ( " x " ) ; } System . out . print ( " y " ) ; int j = first_y_position + 1 ; while ( j < n ) { System . out . print ( " x " ) ; j ++ ; } System . out . print ( " y " ) ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 7 ; kthString ( n , k ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] = new int [ k + 1 ] ; C [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) ; j ++ ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; } static int count_of_subarrays ( int N ) { int count = binomialCoeff ( 2 * N - 1 , N ) ; return count ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( count_of_subarrays ( N ) ) ; } }
import java . util . * ; public class Solution { public int productExceptSelf ( int [ ] nums ) { int ans [ ] = new int [ nums . length ] ; for ( int i = 0 ; i < nums . length ; i ++ ) ans [ i ] = ans [ nums . length - i - 1 ] * nums [ i ] ; int right = 1 ; for ( int i = nums . length - 1 ; i >= 0 ; i -- ) { ans [ i ] *= right ; right *= nums [ i ] ; } return ans ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int [ ] nums = { 1 , 2 , 3 , 4 } ; int out = sObj . productExceptSelf ( nums ) ; System . out . println ( out ) ; } }
public class GFG { static int getSmallestAndLargest ( String s , int k ) { int currStr = s . charAt ( 0 ) ; int lexMin = currStr ; int lexMax = currStr ; for ( int i = k ; i < s . length ( ) ; i ++ ) { currStr = currStr . substring ( 1 , k ) + s . charAt ( i ) ; if ( lexMax < currStr ) lexMax = currStr ; if ( lexMin > currStr ) lexMin = currStr ; } System . out . println ( lexMin ) ; System . out . println ( lexMax ) ; } public static void main ( String [ ] args ) { String str1 = " GeeksForGeeks " ; int k = 3 ; getSmallestAndLargest ( str1 , k ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( c [ i ] + " ▁ " ) ; } } }
public class GFG { static int MAX_BITS = 32 ; static int maxSubarrayXOR ( int set [ ] , int n ) { int index = 0 ; for ( int i = 0 ; i < MAX_BITS - 1 ; i ++ ) { int maxInd = index ; int maxEle = - 2147483648 ; for ( int j = index ; j < n ; j ++ ) { if ( ( set [ j ] & ( 1 << i ) ) != 0 && set [ j ] > maxEle ) { maxEle = set [ j ] ; maxInd = j ; } } if ( maxEle == - 2
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; } } System . out . println ( max ) ; } }
import
import java . util . * ; public class Solution { public int firstUniqChar ( String s ) { int count_map [ ] = new int [ 26 ] ; for ( int c = 0 ; c < 26 ; c ++ ) count_map [ c ] = count_map [ c ] + 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( count_map [ s . charAt ( i ) ] == 1 ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; String s = " leetcode " ; int out = sObj . firstUniqChar ( s ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int temp = arr [ i ] ; int count = 0 ; while ( temp != 0 ) { if ( temp
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; String [ ] arr = s . split ( " " ) ; int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] . equals ( t ) ) { count ++ ; } } if ( count >= 2 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
public class GFG { static int getSum ( int n , int d ) { int sum = 0 ; for ( int i = n + 1 ; i < n + 1 ; i ++ ) { if ( i % 10 == d ) sum += i ; } return sum ; } public static void main ( String [ ] args ) { int n = 30 , d = 3 ; System . out . println ( getSum ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int max = Math . max ( a , Math . max ( b , c ) ) ; int min = Math . min ( a , Math . min ( b , c ) ) ; if ( r < min ) { System . out . println ( 0 ) ; } else if ( r > max ) { System . out . println ( max - min ) ; } else
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t1 = sc . nextInt ( ) ; int s1 = sc . nextInt ( ) ; int t2 = sc . nextInt ( ) ; int t3 = sc . nextInt ( ) ; int t4 = sc . nextInt ( ) ; int t5 = sc . nextInt ( ) ; int t6 = sc . nextInt ( ) ; int t7 = sc . nextInt ( ) ; int t8 = sc . nextInt ( ) ; int t9 = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int t10 = sc . nextInt ( ) ; int s1 = sc . nextInt ( ) ; int s2 = sc . nextInt ( ) ; int t11 = sc . nextInt ( ) ; int t12 = sc . nextInt ( ) ; int t13 = sc . nextInt ( ) ; int t14 = sc . nextInt ( ) ; int t15 = sc . nextInt ( ) ; int t16 = sc . nextInt ( ) ; int t17 = sc . nextInt ( ) ; int t18 = sc . nextInt ( ) ; int t19 = sc . nextInt ( ) ; int t20 = sc . nextInt ( ) ; int t21 = sc . nextInt ( ) ; int t22 = sc . nextInt ( ) ; int t23 = sc . nextInt ( ) ; int t24 = sc . nextInt ( ) ; int t25 = sc . nextInt ( ) ; int t25 = sc . nextInt ( ) ; int t31 = sc . nextInt ( ) ; int t32 = sc . nextInt ( ) ; int t33 = sc . nextInt ( ) ; int t34 = sc . nextInt ( ) ; int t40 =
public class GFG { static int findSum ( int N , int K ) { int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) ans += ( i % K ) ; return ans ; } public static void main ( String [ ] args ) { int N = 10 ; int K = 2 ; System . out . println ( findSum ( N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int gcd = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % gcd == 0 ) { gcd = a [ i ] / gcd ; } } System . out . println ( ( 4 * n ) / gcd ) ; } }
public class GFG { static int __g ( int r , int d ) { int R = d / PI ; R += Math . pow ( r , 2 ) ; R = Math . sqrt ( R ) ; return R ; } static int find_area ( int r , int d ) { int R = d / PI ; R += Math . pow ( r , 2 ) ; R = Math . sqrt ( R ) ; return R ; } public static void main ( String [ ] args ) { int r = 4 , d = 5 ; System . out . println ( find_area ( r , d ) ) ; } }
public class GFG { static int minimumNumbers ( int n , int s ) { if ( s % n == 0 ) return s / n + 1 ; else return s / n ; } public static void main ( String [ ] args ) { int n = 5 , s = 11 ; System . out . println ( minimumNumbers ( n , s ) ) ; } }
public class GFG { static int countTriplets ( int arr [ ] , int n , int m ) { int count = 0 ; Arrays . sort ( arr ) ; for ( int end = n - 1 ; end < n ; end ++ ) { int prod = ( arr [ end ] * arr [ end ] ) ; if ( prod > m ) { int mid = end - 1 ; while ( prod > 0 ) { prod -- ; } if ( prod > m ) { mid -= 1 ; } else { int count ++ ; mid -= 1 ; start ++ ; } } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; int m = 1 ; System . out . println ( countTriplets ( arr , n , m ) ) ; } }
import java . io . * ; public class GFG { static int findIndex ( int n ) { if ( n <= 1 ) return n ; int a = 0 ; int b = 1 ; int c = 1 ; while ( c < n ) { c = a + b ; b = c ; c = b ; } return c ; } public static void main ( String [ ] args ) { int result = findIndex ( 21 ) ; System . out . println ( result ) ; } }
import java . util . * ; public class GFG { static boolean isVowel ( char ch ) { if ( ch == ' i ' || ch == ' a ' || ch == ' e ' || ch == ' o ' || ch == ' u ' ) return true ; else return false ; } static boolean isSatisfied ( String st , int n ) { for ( int i = 1 ; i < n ; i ++ ) { if ( isVowel ( st . charAt ( i ) ) == false && isVowel ( st . charAt ( i - 1 ) ) == false && isVowel ( st . charAt ( i + 1 ) ) == false ) return false ; } return true ; } static boolean isSatisfied ( String st , int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( isVowel ( st . charAt ( i ) ) == false && isVowel ( st . charAt ( i - 1 ) ) == false && isVowel
import java . util . * ; public class GFG { static int countWays ( int n ) { int dp [ ] = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 1 ; for ( int i = 3 ; i <= n ; i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] + 1 ; return dp [ n ] ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countWays ( n ) ) ; } }
public class GFG { static int __g ( int m , int n ) { int ans = 0 ; i = m ; while ( i > 0 ) { ans += ( pow ( i / m , n ) - pow ( ( i - 1 ) / m , n ) ) * i ; i -= 1 ; } return ans ; } public static void main ( String [ ] args ) { int m = 6 , n = 3 ; System . out . println ( expect ( m , n ) ) ; } }
import java . util . * ; public class GFG { static int ProdOfPrimes ( int n ) { boolean [ ] prime = new boolean [ n + 1 ] ; Arrays . fill ( prime , true ) ; int p = 2 ; while ( p * p <= n ) { if ( prime [ p ] == true ) { i = p * 2 ; while ( i <= n ) prime [ i ] = false ; } p ++ ; } int prod = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] == true ) { prod *= i ; } } return prod ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( ProdOfPrimes ( n ) ) ; } }
import java . io . * ; public class GFG { static int sum ( int x ) { int ans = 1 ; for ( int y = 1901 ; y <= 2001 ; y ++ ) { ans = sum ( 1 for y ) ; } return ans ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static int d = 28 , m = 31 , y = 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 ,
import java . util . * ; public class GFG { static void generateNumbers ( int n , int num , int a , int b ) { if ( num > 0 && num < n ) { int st = num ; int add = num ; if ( num * 10 + a > num ) { generateNumbers ( n , num * 10 + a , a , b ) ; } generateNumbers ( n , num * 10 + b , a , b ) ; } generateNumbers ( n , num * 10 + b , a , b ) ; } static void printNumbers ( int n ) { for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = i + 1 ; j < 10 ; j ++ ) { generateNumbers ( n , 0 , i , j ) ; } } System . out . print ( " The ▁ numbers ▁ are : ▁ " ) ; int l = list ( st ) ; System . out . print ( l ) ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . printNumbers ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int min = 100 ; for ( int i = 0 ; i < n ; i ++ ) { if ( t >= min ) { min = t ; } } System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int min_repeat = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int now = a [ i ] ; int next = now ; int count = 0 ; while ( now > min ) { count ++ ; now = a [ now % n ] ; } min = Math . min ( min , count ) ; } System . out . println ( min_repeat ) ; } }
public class GFG { static int getOddOccurrence ( int arr [ ] ) { int res = 0 ; for ( int element : arr ) res = res ^ element ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 5 , 4 , 5 , 2 , 4 , 3 , 5 , 2 , 4 , 2 } ; System . out . println ( " % d " ) ; } }
import java . util . * ; public class GFG { static boolean isKthBitSet ( int x , int k ) { if ( ( x & ( 1 << ( k - 1 ) ) ) != 0 ) return true ; else return false ; } static boolean isPalindrome ( int x ) { int l = 1 , r = 2 * 8 ; while ( l < r ) { if ( isKthBitSet ( x , l ) != isKthBitSet ( x , r ) ) return false ; l ++ ; r -- ; } return true ; } public static void main ( String [ ] args ) { int x = 1 << 15 + 1 ; System . out . println ( isPalindrome ( x ) ) ; x = 1 << 31 + 1 ; System . out . println ( isPalindrome ( x ) ) ; } }
public class GFG { static boolean SieveOfEratosthenes ( int n , boolean isPrime [ ] ) { boolean isPrime [ ] = new boolean [ n + 1 ] ; isPrime [ 0 ] = isPrime [ 1 ] = false ; for ( int i = 2 ; i <= n ; i ++ ) { isPrime [ i ] = true ; } for ( int p = 2 ; p * p <= n ; p ++ ) { if ( isPrime [ p ] & isPrime [ p ] && p * p == n ) { System . out . print ( i + " ▁ " + p + " ▁ " + p ) ; flag = 1 ; break ; } } if ( !
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ; a = 30 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ; a = 30 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 15 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ; a = 30 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ; a = 30 ; b = 2 ; System . out . println ( " GCD ( " + a + " , ▁ " + b + " ) ▁ = ▁ " + gcd ( a , b ) ) ; a = 31 ; b = 2 ; System . out . println
import java . util . * ; public class GFG { static int compute ( int n ) { int SIZE_LIMIT = 1000000 ; int type [ ] = new int [ SIZE_LIMIT + 1 ] ; for ( int n = 3 ; n <= SIZE_LIMIT / 4 ; n ++ ) { for ( int m = n - 2 ; m > 0 ; m -- ) { int tiles = n * n - m * m ; if ( tiles > SIZE_LIMIT ) break ; type [ tiles ] += 1 ; } } int ans = 1 ; for ( int t = 1 ; t <= t ; t ++ ) { for ( int n = t - 2 ; n > 0 ; n -- ) { int tiles = n * n - m * m ; if ( tiles > SIZE_LIMIT ) break ; type [ tiles ] += 1 ; } } ans = Math . max ( 1 , Math . max ( 1 , Math . max ( 1 , Math . max ( 1 , Math . max ( 1 , Math . max ( 1 , Math . max ( 1 , 1 ) ) ) ) ) ) ) ; return ans ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( compute ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] arr = new int [ n ] ;
public class GFG { static int maxZeros ( int N ) { int maxm = - 1 ; int cnt = 0 ; while ( N > 0 ) { if ( N & 1 ) { cnt ++ ; N >>= 1 ; maxm = Math . max ( maxm , cnt ) ; } else { maxm = Math . max ( maxm , cnt ) ; cnt = 0 ; N >>= 1 ; } } return maxm ; } public static void main ( String [ ] args ) { int N = 14 ; System . out . println ( maxZeros ( N ) ) ; } }
public class GFG { static int getLongestSeq ( int a [ ] , int n ) { int maxIdx = 0 ; int maxLen = 0 ; int currLen = 0 ; int currIdx = 0 ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] > 0 ) currLen ++ ; if ( currLen == 1 ) currIdx = k ; else if ( currLen > maxLen ) maxLen = currLen ; currLen = 0 ; } if ( maxLen > 0 ) System . out . println ( " Index ▁ : ▁ " + maxIdx + " ▁ , ▁ " + maxLen + " ▁ " + currLen ) ; else System . out . println ( " No ▁ positive ▁ sequence ▁ detected . " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , - 3 , 2 , - 3 , 2 , 3 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 6 } ; int n = arr
import java . util . * ; public class GFG { static class Node { int data ; Node right ; Node down ; } static Node construct ( int arr [ ] [ ] , int i , int j , int m , int n ) { if ( i > n - 1 || j > m - 1 ) return null ; Node temp = new Node ( arr [ i ] [ j ] ) ; temp . data = arr [ i ] [ j ] ; temp . down = construct ( arr , i + 1 , j , m , n ) ; temp . down = construct ( arr , i + 1 , j , m , n ) ; return temp ; } static void display ( Node head ) { Node Rp =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
public class GFG { static void findNthTerm ( int N ) { int ans = 0 ; if ( N % 2 == 0 ) ans = ( N / 2 ) * 6 + ( N / 2 ) * 2 ; else ans = ( N / 2 + 1 ) * 6 + ( N / 2 ) * 2 ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int N = 3 ; findNthTerm ( N ) ; } }
import java . io . * ; public class GFG { static boolean isRectangle ( int a , int b , int c , int d ) { if ( a == b && c == d ) return true ; else if ( a == c && b == d ) return true ; else if ( a == d && c == b ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 1 , b = 2 , c = 3 , d = 4 ; System . out . println ( " Yes " ) ; if ( isRectangle ( a , b , c , d ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int discreteLogarithm ( int a , int b , int m ) { int n = ( int ) Math . sqrt ( m ) + 1 ; int an = 1 , i ; for ( int i = 0 ; i < n ; i ++ ) { an = ( an * a ) % m ; } int value [ ] = new int [ n ] ; int cur = an ; for ( int i = 1 ; i <= n ; i ++ ) { if ( value [ cur ] == 0 ) { value [ cur ] = i ; } cur = ( cur * an ) % m ; } cur = ( cur * a ) % m ; return - 1 ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; int m = 5 ; System . out . println ( discreteLog
import java . util . * ; public class GFG { static int FindMinimumCost ( int ind , int a [ ] , int n , int k , int dp [ ] ) { if ( ind == ( n - 1 ) ) return 0 ; else if ( dp [ ind ] != - 1 ) return dp [ ind ] ; else { int ans = Math . max ( ans , Math . abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) ; return ans ; } } public static void main ( String [ ] args ) { int a [ ] = { 10 , 30 , 40 , 50 , 20 } ; int k = 3 ; int n = a . length ; int dp [ ] = new int [ k ] ; int ans = FindMinimumCost ( 0 , a , n , k , dp ) ; System . out . println ( ans ) ; } }
public class GFG { static int Probability ( int sum , int times ) { int favorable = 0 , total = 0 ; for ( int i = 7 ; i <= sum ; i ++ ) { for ( int j = 7 ; j <= 7 ; j ++ ) { if ( ( i + j ) == sum ) { favorable += 1 ; } } } int gcd1 = gcd ( int ) ( total , times ) ; favorable = favorable / gcd1 ; total = total / gcd1 ; return ( int ) ( ( int ) ( ( total / gcd1 ) * ( total / gcd1 ) ) ) ; } public static void main ( String [ ] args ) { int sum = 7 , times = 7 ; System . out . println ( "1" + " / " + Probability ( sum , times ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int k = sc . nextInt
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }
public class GFG { static int getCount ( int arr [ ] , int n , int num1 , int num2 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == num1 ) break ; } if ( i >= n - 1 ) return 0 ; for ( int j = n - 1 ; j >= i + 1 ; j -- ) { if ( arr [ j ] == num2 ) break ; if ( j == i ) return 0 ; } arr = [ 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 } ; int n = arr . length ; int num1 = 5 ; int num2 = 4 ; System . out . println ( getCount ( arr , n , num1 , num2 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; Arrays . sort ( arr ) ; int min = arr [ 0 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] < min ) min = arr [ i ] - arr [ i - 1 ] ; } System . out . println ( min ) ; } } }
import java . util . * ; public class GFG { static int countSetBits ( int n ) { int cnt = 0 ; int setBits [ ] = new int [ n + 1 ] ; setBits [ 0 ] = 0 ; setBits [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) setBits [ i ] = setBits [ i / 2 ] ; else setBits [ i ] = setBits [ i - 1 ] + 1 ; } for ( int i = 0 ; i <= n ; i ++ ) { cnt = cnt + setBits [ i ] ; } return cnt ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( countSetBits ( n ) ) ; } }
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int largestGCD1Subset ( int A [ ] , int n ) { int currentGCD = A [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) currentGCD = gcd ( currentGCD , A [ i ] ) ; if ( currentGCD == 1 ) return n ; return 0 ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 18 , 6 , 3 } ; int n = A . length ; System . out . println ( largestGCD1Subset ( A , n ) ) ; } }
import java . util . * ; public class GFG { static int compute ( int [ ] divisors ) { int divisors = 2 ; for ( int i = 2 ; i * i <= divisors ; i ++ ) { for ( int j = i * 2 ; j <= divisors ; j += i ) divisors [ j ] += 1 ; } int ans = sum ( ( 1 if divisors [ i ] == divisors [ i + 1 ] ) ? 1 : 0 ) ; return ans ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static void updateArray ( int arr [ ] , int n ) { int i = n - 1 ; while ( i > 0 ) { arr [ i ] = arr [ i - 1 ] ; i -- ; } arr [ 0 ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
public class GFG { static void findEncryptedArray ( int arr [ ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) System . out . print ( sum - arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; findEncryptedArray ( arr , N ) ; } }
public class GFG { static void updateArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { arr [ i ] = arr [ i + 1 ] ; } arr [ n - 1 ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 2 , 4 } ; int N = arr . length ; updateArray ( arr , N ) ; } }
public class GFG { static int findMinDifference ( int arr [ ] , int n ) { if ( arr [ 0 ] < arr [ 1 ] ) { int min__ = secondMax = arr [ 0 ] ; int } else { int min__ = secondMax = arr [ 1 ] ; int max__ = secondMax - min__ ; for ( int i = 2 ; i < n ; i ++ ) { if ( arr [ i ] > max__ ) { secondMax = max__ ; max__ = arr [ i ] ; } else if ( arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } else { secondMax = arr [ i ] ; } } int diff = Math . min (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] > c [ i ] ) { System . out . println ( i ) ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( c [ i ] > b [ i ] ) { System . out . println ( i ) ; break ; } } } } }
public class GFG { static int factorial ( int n ) { return 1 if ( n == 1 || n == 0 ) return 1 ; else n * factorial ( n - 1 ) ; } public static void main ( String [ ] args ) { int num = 5 ; System . out . println ( " Factorial ▁ of ▁ " + num + " ▁ is ▁ " + factorial ( num ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ d ] [ n ] ; for ( int i = 0 ; i < d ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = 0 ; for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , arr [ i ] ) ; } } int max = 0 ; for ( int i = 0 ; i < d
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] arr1 = new int [ m ] ; int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr1 [ i ] = sc . nextInt ( ) ; arr2 [ i ] = sc . nextInt ( ) ; } int m1 = sc . nextInt ( ) ; int m2 = sc . nextInt ( ) ; int [ ]
import java . util . * ; public class GFG { static int findMinimumX ( int a [ ] , int n ) { int st = set ( ) ; for ( int i = 0 ; i < n ; i ++ ) st = set ( st , a [ i ] ) ; if ( st == 1 ) return 0 ; if ( st == 2 ) st = set ( st , 0 ) ; else return ( ( set - st ) / 2 ) ; return - 1 ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 4 , 4 , 7 , 4 , 1 } ; int n = a . length ; System . out . println ( findMinimumX ( a , n ) ) ; } }
public class GFG { static int findX ( int n , int k ) { int r = n ; int m = ( int ) Math . sqrt ( k ) + 1 ; int i = 2 ; while ( i <= m && k > 1 ) { if ( i == m ) i = k ; else { int u = 0 ; int v = 0 ; while ( k % i == 0 ) { k /= i ; v ++ ; } if ( v > 0 ) t = n ; else t = Math . min ( r , u / v ) ; r = Math . min ( r , u / v ) ; } i ++ ; } return r ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 2 ; System . out . println ( findX ( n , k ) ) ; } }
public class GFG { static boolean LiesInRectangle ( int a , int b , int x , int y ) { if ( x - y - b <= 0 && x - y + b >= 0 && x + y - b >= 0 && x + y - b >= 0 ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 7 , b = 4 , x = 5 , y = 4 , 5 ; if ( LiesInRectangle ( a , b , x , y ) == true ) System . out . println ( " Given ▁ point ▁ lies ▁ inside ▁ " + " ▁ the ▁ rectangle " ) ; else System . out . println ( " Given ▁ point ▁ does ▁ not ▁ lie " + " ▁ on ▁ the ▁ rectangle " ) ; } }
import java . util . * ; public class GFG { static int N = 1000 ; static int countPairs ( int arr [ ] , int n ) { int size = ( 2 * N ) + 1 ; int freq [ ] = new int [ size ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; freq [ x + N ] += 1 ; } int ans = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( freq [ i ] > 0 ) ans += ( ( ( freq [ i ] ) * ( freq [ i ] - 1 ) ) / 2 ) ; for ( int j = i + 2 ; j < 2001 ; j += 2 ) { if ( freq [ j ] > 0 && ( freq [ ( ( i + j ) / 2 ) ] > 0 ) ) ans += ( freq [ ( ( i + j ) / 2 ) ] * freq [ j ] ) ; } } return ans ; } public static void main ( String [ ] args )
public class GFG { static void getAvg ( int x , int n , int sum ) { sum = sum + x ; return ; } static void streamAvg ( int arr [ ] , int n ) { int avg = 0 ; sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) avg = getAvg ( arr [ i ] , i + 1 , sum ) ; sum = avg * ( i + 1 ) ; System . out . print ( "Avg ▁ of ▁ " + " ▁ " ) ; System . out . print ( " ▁ numbers ▁ is ▁ " + end = " " ) ; System . out . print ( avg ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 30 , 40 , 50 , 60 } ; int n = arr . length ; streamAvg ( arr , n ) ; } }
import java . util . * ; public class GFG { static int MAX = 10000 ; static boolean SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ MAX ] ; prime [ 0 ] = true ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i ] = false ; } } int product = 1 ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == b ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int maxOperations ( String str ) { int i , j ; for ( i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ' g ' ) { g += 1 ; } else if ( str . charAt ( i ) == ' k ' ) { if ( g > 0 ) g -= 1 ; gk += 1 ; } else if ( str . charAt ( i ) == ' s ' ) { if ( g > 0 ) gk -= 1 ; gks += 1 ; } } return gks ; } public static void main ( String [ ] args ) { String a = " ggkssk " ; System . out . println ( maxOperations ( a ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) > 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner (
public class GFG { static int kthSmallest ( int arr [ ] , int n , int k ) { Arrays . sort ( arr ) ; return arr [ k - 1 ] ; } public static void main ( String [ ] args ) { int arr [ ] = { 12 , 3 , 5 , 7 , 19 } ; int n = arr . length ; int k = 2 ; System . out . println ( " K ▁ smallest ▁ element ▁ is ▁ " + kthSmallest ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] == b [ i + 1 ] ) { System . out . println ( a [ i + 1 ] ) ; break ; } } System . out . println ( " ▁ " + b [ n - 1 ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; double [ ] [ ] a = new double [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextDouble ( ) ; } } double ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double x = a [ i ] [ 0 ] ; double y = a [ i ] [ 1 ] ; double z = a [ i ] [ 2 ] ; double s = Math . sqrt ( x * x + y * y + z * z ) ; double t = Math . sqrt ( x * x + y * y + z * z ) ; double ans2 = Math . sqrt ( x * x + y * y + z * z ) ; ans = Math . min ( ans , t * ans2 ) ; } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int centeredOctahedral ( int n ) { return ( 2 * n + 1 ) * ( 2 * n * n + 2 * n + 3 ) / 3 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( centeredOctahedral ( n ) ) ; n = 9 ; System . out . println ( centeredOctahedral ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i <
import java . util . * ; public class GFG { static int MaxDivPrime ( int A [ ] , int n ) { int max_val = A . length ; int prime [ ] = new int [ max_val + 1 ] ; prime [ 0 ] = 1 ; prime [ 1 ] = 1 ; for ( int p = 2 ; p * p <= max_val ; p ++ ) { if ( prime [ p ] == 0 ) { for ( int i = 2 * p ; i <= max_val ; i += p ) prime [ i ] = 0 ; } } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] == 0 ) { sum += A [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ A [ i ] ] == 0 ) { System . out . println ( " YES " ) ; return ; } } System . out
public class GFG { static void leftRotate ( int arr [ ] , int n , int k ) { for ( int i = k ; i < k + n ; i ++ ) System . out . print ( arr [ i % n ] ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 3 , 5 , 7 , 9 } ; int n = arr . length ; int k = 2 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 3 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print ( ) ; k = 4 ; leftRotate ( arr , n , k ) ; System . out . print (
public class GFG { static int closestMultiple ( int n , int x ) { if ( x > n ) return x ; int z = ( int ) ( x / 2 ) ; n = n + z ; n = n - ( n % x ) ; return n ; } public static void main ( String [ ] args ) { int n = 56287 ; int x = 27 ; System . out . println ( closestMultiple ( n , x ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 3 == 0 ) { count ++ ; } } if ( count % 2 == 1 ) { System . out . println ( " cryeadn " ) ; } else { System . out . println ( " cryeadn " ) ; } } } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { ans += a [ i ] [ j ] * 2 ; } } } System . out
public class GFG { static int findSubsequence ( int arr [ ] , int n ) { int length = 1 ; int dp [ ] = new int [ 10 ] ; int tmp = arr [ 0 ] ; while ( tmp > 0 ) { dp [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int d = 1 ; tmp > 0 ; d ++ ) { int locMax = 1 ; int cnt [ d ] = new int [ 10 ] ; while ( tmp > 0 ) { cnt [ tmp % 10 ] = 1 ; tmp /= 10 ; } for ( int d = 0 ; d < 10 ; d ++ ) { if ( cnt [ d ] == 1 ) dp [ d ] ++ ; locMax = Math . max ( locMax , dp [ d ] ) ; } } for ( int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 0 ) { ans += arr [ i ] ; } } System . out . println ( ans ) ; } } }
public class GFG { static int totalPrimeFactors ( int n ) { int count = 0 ; if ( ( n % 2 ) == 0 ) count ++ ; while ( ( n % 2 ) == 0 ) n /= 2 ; int i = 3 ; while ( i * i <= n ) { if ( ( n % i ) == 0 ) count ++ ; while ( ( n % i ) == 0 ) n /= i ; } int j = 3 ; while ( i * i <= n ) { if ( ( n % i ) == 0 ) count ++ ; while ( ( n % i ) == 0 ) n /= i ; } return count ; } static int countPairs ( int G , int L ) { if ( L % G != 0 ) return 0 ; int div = G / L ; return ( 1 << totalPrimeFactors ( div ) ) ; } public static void main ( String
public class GFG { static void calculate_sum ( int a , int N ) { int m = N / a ; int sum = m * ( m + 1 ) / 2 ; int ans = a * sum ; System . out . println ( " Sum ▁ of ▁ " + a + " ▁ up ▁ to ▁ " + N + " ▁ = ▁ " + ans ) ; } public static void main ( String [ ] args ) { int a = 7 , n = 51 ; calculate_sum ( 7 , 49 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [
public class GFG { static int countSolutions ( int a ) { int count = 0 ; for ( int i = 0 ; i < a + 1 ; i ++ ) { if ( a == ( i + ( a ^ i ) ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int a = 3 ; System . out . println ( countSolutions ( a ) ) ; } }
public class GFG { static int next ( int arr [ ] , int target ) { int start = 0 ; int end = arr . length - 1 ; while ( start <= end ) { int mid = ( start + end ) / 2 ; if ( arr [ mid ] <= target ) start = mid + 1 ; else ans = mid ; end = mid - 1 ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 5 , 8 , 12 } ; System . out . println ( next ( arr , 8 ) ) ; } }
import java . io . * ; public class GFG { static void printWordsWithoutIfSwitch ( int n ) { int digits [ ] = new int [ 10 ] ; int dc = 0 ; while ( digits [ dc ] != 0 ) { digits [ dc ] = n % 10 ; n /= 10 ; } for ( int i = 0 ; i < dc - 1 ; i ++ ) { System . out . print ( word [ digits [ i ] ] ) ; } } static void printWordsWithoutIfSwitch ( int n ) { int digits [ ] = new int [ 10 ] ; int dc = 0 ; while ( digits [ dc ] != 0 ) { digits [ dc ] = n % 10 ; n /= 10 ; dc ++ ; } for ( int i = 0 ; i < dc - 1 ; i ++ ) { System . out . print ( word [ digits [ i ] ] ) ; } } public static void main ( String [ ] args ) { int n = 350 ; printWordsWithoutIfSwitch ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner
import java . util . * ; public class GFG { static void solve ( int a [ ] , int b [ ] ) { int l = a . length ; int min = 0 ; int max = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( a [ i ] == ' + ' || b [ i ] == ' + ' || a [ i ] != b [ i ] ) { min ++ ; } if ( a [ i ] != ' + ' && b [ i ] != ' + ' && a [ i ] != b [ i ] ) { max ++ ; } } System . out . println ( min + max ) ; } public static void main ( String [ ] args ) { int s1 = " a + c " ; int s2 = " + b " ; solve ( s1 , s2 ) ; } }
public class GFG { static int TotalWays ( int n , int s , int k ) { int dp [ ] = new int [ n ] ; dp [ s - 1 ] = 1 ; for ( int i = s ; i < n ; i ++ ) { int idx = Math . max ( s - 1 , i - k ) ; for ( int j = idx ; j < i ; j ++ ) { dp [ i ] += dp [ j ] ; } } return dp [ n - 1 ] ; } public static void main ( String [ ] args ) { int n = 5 ; int k = 2 ; int s = 2 ; System . out . println ( " Total ▁ Ways ▁ = ▁ " + TotalWays ( n , s , k ) ) ; } }
public class GFG { static int countEvenOdd ( int n ) { int even_count = 0 ; int odd_count = 0 ; while ( n > 0 ) { int rem = n % 10 ; if ( rem % 2 == 0 ) even_count ++ ; else odd_count ++ ; n = n / 10 ; } System . out . println ( " Even ▁ count ▁ : ▁ " + even_count ) ; System . out . println ( " \n Odd ▁ count ▁ : ▁ " + odd_count ) ; if ( even_count % 2 == 0 && odd_count % 2 != 0 ) return 1 ; else return 0 ; } public static void main ( String [ ] args ) { int n = 2335453 ; int t = countEvenOdd ( n ) ; if ( t == 1 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math
import java . util . * ; public class GFG { static int findmin ( int p [ ] [ ] , int n ) { int a = 0 , b = 0 , c = 0 , d = 0 , 0 , 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] [ 0 ] <= 0 ) a += 1 ; else if ( p [ i ] [ 0 ] >= 0 ) b += 1 ; else if ( p [ i ] [ 1 ] <= 0 ) d += 1 ; else if ( p [ i ] [ 1 ] <= 0 ) { c += 1 ; } else if ( p [ i ] [ 1 ] <= 0 ) d += 1 ; } return Math . min ( ( a , b , c , d ) ) ; } public static void main ( String [ ] args ) { int p [ ] [ ] = { 1 , 1 } , { 2 , 2 } , { - 1 , 2 } , { - 2 , 2 } } ; int n = p . length ; System . out . println ( findmin ( p , n ) ) ; } }
import java . io . * ; public class GFG { static int maxGCD ( int N , int P ) { int ans = 1 ; int prime_factors [ ] = new int [ ( int ) Math . pow ( 10 , 5 ) ] ; for ( int i = 2 ; i <= Math . pow ( 10 , 5 ) ; i ++ ) { while ( P % i == 0 ) { if ( i == 0 ) prime_factors [ i ] = 0 ; prime_factors [ i ] ++ ; P /= i ; } } if ( P != 1 ) prime_factors [ P ] ++ ; for ( int key = 0 ; key <= Math . pow ( 10 , 5 ) ; key ++ ) { ans *= Math . pow ( key , ( int ) Math . pow ( 10 , 5 ) / key ) ; } return ans ; } public static void main ( String [ ] args ) { int N = 3 , P = 24 ; System . out . println ( maxGCD ( N , P ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { sum += b [ i ] ; } else { sum += a [ i ] ; } } System . out . println ( sum ) ; } }
public class GFG { static void generateDivisors ( int curIndex , int curDivisor , int arr [ ] ) { if ( curIndex == len ( ) ) { System . out . print ( curDivisor + " ▁ " ) ; return ; } for ( int i = 0 ; i * i <= curDivisor ; i ++ ) { generateDivisors ( curIndex + 1 , curDivisor , arr ) ; curDivisor *= arr [ curIndex ] [ 1 ] ; } } static void findDivisors ( int n ) { arr = new int [ ] { { 1 , n } , { 1 , n } } ; generateDivisors ( n ) ; curIndex = 0 ; curDivisor = 1 ; generateDivisors ( curIndex , curDivisor , arr ) ; } public static void main ( String [ ] args ) { int n = 6 ; findDivisors ( n ) ; System . out . print ( " ▁ " ) ; System . out . print ( " �
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) { dp [ i ] = 1 ; } else { dp [ i ] = dp [ i - 1 ] + 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { dp [ i ] = 1 ; } else { dp [ i ] = dp [ i - 1 ] + 1 ; } } System . out . println ( n - dp [ n - 1 ] ) ; } }
public class GFG { static String largestPalinSub ( String s ) { int res = " " ; int mx = s . length ( ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) mx = Math . max ( mx , s . charAt ( i ) ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == mx ) res += s . charAt ( i ) ; } return res ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( largestPalinSub ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; String ans = " " ; for ( int i = 0 ; i < n ; i ++ ) { ans += s . charAt ( i ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] % j == 0 ) { int temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } max = Math . max ( max , a [ i ] ) ; } System . out . println ( max ) ; } }
import java . util . * ; public class GFG { static void initializeDiffArray ( int A [ ] ) { int n = A . length ; int D [ ] = new int [ n + 1 ] ; int [ ] D = new int [ n + 1 ] ; int [ ] x = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { D [ i ] = A [ i - 1 ] - A [ i - 1 ] ; D [ i ] = A [ i ] + A [ i - 1 ] ; } System . out . println ( " " ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i == 0 ) { A [ i ] = D [ i ] ; } else { A
public class GFG { static void findMaxGuests ( int arrl [ ] , int exit [ ] , int n ) { Arrays . sort ( arrl ) ; int exit [ ] = new int [ n ] ; int guests_in = 1 ; int max_guests = 1 ; int time = arrl [ 0 ] ; i = 1 ; j = 0 ; while ( i < n && j < n ) { if ( arrl [ i ] <= exit [ j ] ) { guests_in = guests_in + 1 ; if ( guests_in > max_guests ) max_guests = guests_in ; time = arrl [ i ] ; } i ++ ; } System . out . println ( " Maximum ▁ Number ▁ of ▁ guests ▁ = ▁ " + max
import
public class GFG { static void calcFunction ( int n , int r ) { finalDenominator = 1 ; int mx = Math . max ( r , n - r ) ; for ( int i = mx + 1 ; i <= n ; i ++ ) { denominator = Math . pow ( i , i ) ; numerator = Math . pow ( i - mx , i - mx ) ; } return ; } public static void main ( String [ ] args ) { int n = 6 ; int r = 2 ; System . out . println ( "1 / " + end = " ) ; System . out . println ( calcFunction ( n , r ) ) ; } }
public class GFG { static boolean isPerfectSquare ( int x ) { int sr = ( int ) Math . sqrt ( x ) ; if ( sr * sr == x ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; return false ; } public static void main ( String [ ] args ) { int n = 7 ; int k = 2 ; isPerfectSquare ( n + k ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % n == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } Arrays . sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { System . out . println ( " YES " ) ; return ; } } System . out . println ( " NO " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != i + 1 ) sum += a [ i ] ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( sum == a [ i ] ) { ans = i ; break ; } } if ( ans == - 1 ) { System . out . println ( - 1 ) ; return ; } int cnt = 0 ; for ( int i = 0 ; i
public class GFG { static boolean accumulate ( String s ) { int n = s . length ( ) ; if ( s . charAt ( n - 1 ) != '5' && s . charAt ( n - 1 ) != '0' ) return false ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += s . charAt ( i ) - 48 ; return sum % 3 == 0 ; } static boolean isDivisible ( String s ) { int n = s . length ( ) ; if ( s . charAt ( n - 1 ) != '5' && s . charAt ( n - 1 ) != '0' ) return false ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += s . charAt ( i ) - 48 ; return sum % 3 == 0 ; } public static void main ( String [ ] args ) { String s = "1564574632746238472398402394023940235" ; if ( isDivisible ( s ) ) System .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ;
import java . util . * ; public class GFG { static boolean isVowel ( char c ) { return ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) ; } static int encryptString ( String s , int n , int k ) { int countVowels = 0 ; int countConsonants = 0 ; int ans = " " ; for ( int l = n - k + 1 ; l >= 0 ; l -- ) { countVowels += 0 ; countConsonants += 0 ; for ( int r = l ; r <= l + k ; r ++ ) { if ( isVowel ( s . charAt ( r ) ) == true ) countConsonants += 1 ; else countConsonants += 1 ; } ans += ( countConsonants * countConsonants ) ; } return ans ; } public static void main ( String [ ] args ) { String s = " hello " ; int n = s . length ( ) ; int k = 2 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n + 1 ] [ m + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = - 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( b [ i ] [ j ] == 1 ) { ans = i ; break ; } } } if ( ans == - 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ n ] ;
import java . io . * ; public class GFG { static int fourthPowerSum ( int n ) { return ( ( 6 * n * n * n * n ) + ( 15 * n * n * n ) + ( 10 * n * n * n ) - n ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } }
import java . util . * ; public class GFG { static int maxLenSub ( int arr [ ] , int n ) { HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ; maxLenSub ( arr , n ) ; int maxLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int length = 0 ; if ( um . containsKey ( arr [ i ] - 1 ) ) { length = um . get ( arr [ i ] - 1 ) ; } if ( arr [ i ] + 1 < um . get ( arr [ i ] + 1 ) ) { length = um . get ( arr [ i ] + 1 ) ; } if ( maxLen < um . get ( arr [ i ] + 1 ) ) { maxLen = um . get ( arr [ i ] + 1 ) ; } if ( maxLen < um . get ( arr [ i ]
import java . util . * ; public class GFG { static int [ ] arr = new int [ ] { 1 , 3 , 5 , 2 , 4 , 6 } ; static void rearrange ( int n ) { int currIdx = ( n - 1 ) / 2 ; while ( currIdx > 0 ) { int count = currIdx ; swapIdx ++ ; while ( count > 0 ) { int temp = arr [ swapIdx + 1 ] ; arr [ swapIdx + 1 ] = arr [ swapIdx ] ; arr [ swapIdx ] = temp ; swapIdx ++ ; count -- ; } currIdx -- ; } } public static void main ( String [ ] args ) { int n = arr . length ; rearrange ( n ) ; for ( int i = 0 ; i < n ; i ++ ) System . out . print ( " { } ▁ " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [
import java . util . * ; public class GFG { static int countCharacterType ( String str ) { int vowels = 0 ; int consonant = 0 ; int specialChar = 0 ; int digit = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ( ch >= ' a ' && ch <= ' z ' ) || ( ch >= ' A ' && ch <= ' Z ' ) ) { ch = ch . lower ( ) ; if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) { vowels ++ ; } else { consonant += 1 ; } } else { specialChar ++ ; } } System . out . println ( " Vowels : ▁ " +
public class GFG { static int decreaseInVol ( int l , int b , int h ) { int percentInc = ( ( 1 + ( l / 100 ) * ( 1 + ( b / 100 ) ) ) * ( 1 + ( b / 100 ) ) ) ; int percentInc = ( ( ( 1 + ( l / 100 ) * ( 1 + ( b / 100 ) ) ) * ( 1 + ( h / 100 ) ) ) ; return percentInc ; } public static void main ( String [ ] args ) { int l = 50 , b = 20 ; int h = 10 ; System . out . println ( increaseInVol ( l , b , h ) + " % " ) ; } }
import java . util . * ; public class GFG { static int MaxTotalRectangleArea ( int a [ ] , int n ) { Arrays . sort ( a ) ; int sum = 0 ; int flag = False ; int len = 0 ; int i = 0 ; while ( i < n - 1 ) { if ( i != 0 ) { i = i + 1 ; } if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag == False ) { flag = true ; len = a [ i + 1 ] ; i = i + 1 ; } else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && flag == False ) { sum = sum + a [ i + 1 ] * len ; flag = false ; i = i + 1 ; } } return sum ; } public static void main ( String [ ] args ) { int a [ ] = {
import
import java . io . * ; public class GFG { static int lastFiveDigits ( int n ) { int n = ( int ) ( n / 10000 ) * 10000 + ( ( int ) ( n / 100 ) % 10 ) * 1000 + ( ( int ) ( n / 10 ) % 10 ) * 10 + ( int ) ( n / 1000 ) % 10 ; int ans = 1 ; for ( int i = 5 ; i < n ; i ++ ) ans *= n ; return ans ; } public static void main ( String [ ] args ) { int n = 12345 ; int lastFiveDigits ( int n ) ; } }
import java . io . * ; public class GFG { static int eulerlib ; static int [ ] DIGITS ; static int [ ] [ ] ans = new int [ 100 ] [ 100 ] ; static int sum ( int c ) { int sum = 0 ; for ( int i = 0 ; i < c ; i ++ ) sum += ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( sum - c ) ) ) ) ; if ( sum > sum ) return str ( ans ) ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static void evaluate ( int n ) { if ( n == 1 || n == 2 ) { System . out . print ( " No ▁ Pythagoras " + " ▁ Triplet ▁ exists ▁ i . e . ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " +
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; if ( a < 0 ) { ans = - 1 ; } else if ( b < 0 ) { ans = - 1 ; } else { ans = a / b ; } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int findNumber ( int arr [ ] , int n ) { int ans = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) ans = gcd ( ans , arr [ i ] ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == ans ) return ans ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 2 , 4 } ; int n = arr . length ; System . out . println ( findNumber ( arr , n ) ) ; } }
public class GFG { static int countKDivPairs ( int A [ ] , int n , int K ) { int freq [ ] = new int [ K ] ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int rem = A [ i ] % K ; if ( rem != 0 ) ans += freq [ K - rem ] ; else ans += freq [ 0 ] ; freq [ rem ] += 1 ; } return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K = 4 ; System . out . println ( countKDivPairs ( A , n , K ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String [ ] arr = s . split ( " , " ) ; int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] . equals ( " , " ) ) count ++ ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int max2 = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( arr [ i ] > max ) { max2 = arr [ i ] ; } } int max3 = 0 ; for ( int i = 0 ; i < n - 3 ; i ++ ) { if ( arr [ i ] > max ) { max3 = arr [ i ] ; } } int max4 = 0 ; for ( int i = 0 ; i < n - 4 ; i ++ ) { if ( arr [ i ] > max ) { max4 = arr [ i ] ; } } int max5 = 0 ; for ( int i = 0 ; i < n - 5 ; i ++ ) { if ( arr [ i ] > max ) { max5 = arr [ i ] ; } } int max6 = 0 ; for ( int i = 0 ; i < n - 6 ; i ++ ) { if ( arr [ i ] > max ) { max6 = arr [ i ] ; } } int max7 = 0 ; for ( int i = 0 ; i < n - 7 ; i ++ )
import java . io . * ; public class GFG { static int countSubarrays ( int arr [ ] , int n ) { int difference = 0 ; int ans = 0 ; int hash_negative [ ] = new int [ n + 1 ] ; int hash_positive [ ] = new int [ n + 1 ] ; int hash_negative [ ] = new int [ n + 1 ] ; hash_negative [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] & 1 == 1 ) difference = difference + 1 ; else difference = difference - 1 ; if ( difference < 0 ) ans += hash_negative [ - difference ] ; hash_negative [ difference ] = hash_positive [ difference ] + 1 ; } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 } ; int n = arr . length ; System . out
public class GFG { static void printChar ( String str , int n ) { int freq [ ] = new int [ SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ ( char ) ( str . charAt ( i ) - ' a ' ) % 2 == 0 ) System . out . print ( str . charAt ( i ) ) ; } } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int n = str . length ( ) ; printChar ( str , n ) ; } }
import java . util . * ; public class GFG { static void printChar ( String str , int n ) { int freq [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq [ str . charAt ( i ) - ' a ' ] % 2 == 1 ) System . out . print ( " { } " ) ; } } public static void main ( String [ ] args ) { String str_ = " geeksforgeeks " ; int n = str_ . length ( ) ; printChar ( str_ , n ) ; } }
public class GFG { static int countGreater ( int arr [ ] , int n , int k ) { int l = 0 , r = n - 1 ; int leftGreater = n ; while ( l <= r ) { int m = l + ( r - l ) / 2 ; if ( arr [ m ] > k ) { leftGreater = m ; r = m - 1 ; } else l = m + 1 ; } return ( n - leftGreater ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 4 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 } ; int n = arr . length ; int k = 7 ; System . out . println ( countGreater ( arr , n , k ) ) ; } }
import
import java . util . * ; public class GFG { static void findAandB ( int N ) { int val = N * N - 4.0 * N ; if ( val < 0 ) System . out . println ( " NO " ) ; else { int a = ( N + Math . sqrt ( val ) ) / 2.0 ; int b = ( N - Math . sqrt ( val ) ) / 2.0 ; System . out ( " a ▁ = ▁ " + a ) ; System . out ( " b ▁ = ▁ " + b ) ; } } public static void main ( String [ ] args ) { int N = 69.0 ; findAandB ( N ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > b [ i ] ) { ans = Math . max ( ans , b [ i ] - a [ i ] ) ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { if ( x [ i ] == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; if ( a % 6 == 0 ) { ans ++ ; } else if ( a % 3 == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int minIncrementForUnique ( int A [ ] ) { int count [ ] = new int [ A . length ] ; int ans = 0 ; for ( int x = 0 ; x < 100000 ; x ++ ) { if ( count [ x ] >= 2 ) { int remain = ( int ) Math . pow ( count [ x ] , 2 ) ; int remain = remain - A [ x ] ; ans += remain ; } else { ans += x - ( int ) Math . pow ( count [ x ] , 2 ) ; } } return ans ; } public static void main ( String [ ] args ) { int A [ ] = { 3 , 2 , 1 , 2 , 1 , 7 } ; System . out . println ( minIncrementForUnique ( A ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n < 0 ) { n = 0 ; } System . out . println ( ( 3 * ( n + 1 ) / 1000003 ) % 1000003 ) ; } }
public class GFG { static int MOD = ( int ) 1e9 + 7 ; static int modulo_13 ( String s , int n ) { int dp [ ] [ ] = new int [ n + 1 ] [ 13 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < 10 ; j ++ ) dp [ i + 1 ] [ j ] = dp [ i ] [ j ] ; dp [ i + 1 ] [ rem ] %= MOD ; dp [ i + 1 ] [ rem ] %= MOD ; if ( s . charAt ( i ) != ' ? ' ) { break ; } } static int modulo_13 ( String s , int n ) { int dp [ ] [ ] = new int [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ;
public class GFG { static int countNums ( int a , int b , int c , int d ) { int x = b / c - ( a - 1 ) / c ; int y = b / c - ( a - 1 ) / c ; int k = ( c * d ) / gcd ( c , d ) ; int z = b / k - ( a - 1 ) / k ; return ( b - a + 1 - x - y + z ) ; } public static void main ( String [ ] args ) { int a = 10 , b = 50 , c = 4 ; int d = 6 ; System . out . println ( countNums ( a , b , c , d ) ) ; } }
public class GFG { static void printSubstrings ( int n ) { int s = ( int ) Math . log10 ( n ) ; int d = ( int ) Math . pow ( 10 , s ) ; int k = d ; while ( n > 0 ) { while ( d > 0 ) { System . out . print ( int ( n / d ) ) ; d = ( d / 10 ) ; } n = n % k ; k = ( k / 10 ) ; d = k ; } } public static void main ( String [ ] args ) { int n = 123 ; printSubstrings ( n ) ; } }
public class GFG { static int NthCharacter ( int n ) { String s = " " ; int c = 1 ; while ( true ) { if ( c < 10 ) s += ( char ) ( 48 + c ) ; else s += ( char ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( ( int ) ( ( ( int ) ( ( ( int ) ( ( ( ' + ' ) ' ) ) ) ) ) ) ) ) ) { s += ( char ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( ( int ) ( ( ' + ' ) ' ) ) ) ) ) ) ; } c ++ ; } s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ; s += ( char ) ( ' ' ) ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( x % 3 == 0 && y % 3 == 0 && m % d == 0 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean check_prime ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return true ; if ( n % 2 == 0 || n % 3 == 0 ) return false ; for ( int i = 5 ; i + 1 < 6 ; i += 2 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; } return true ; } static int countPrimeFrequent ( String s ) { int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( check_prime ( s . charAt ( i ) ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { String s = " geeksforgeeks " ; System . out . println ( countPrimeFrequent ( s ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= b [ i ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int catalan ( int n ) { if ( n == 0 || n == 1 ) return 1 ; int catalan [ ] = new int [ n + 1 ] ; catalan [ 0 ] = 1 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) catalan [ i ] = 0 ; catalan [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) catalan [ i ] = 0 ; return catalan [ n ] ; } public static void main ( String [ ] args ) { int i , j , catalan [ ] = { 1 , 1 } ; int n = 10 ; System . out . print ( catalan ( n ) + " ▁ " ) ; } }
import java . util . * ; public class GFG { static int eulerlib , fractions ; static int TARGET = 15499 ; static int denominator = 1 ; static int p = 2 ; static int [ ] p = new int [ ] { 15499 , 94744 } ; static int denominator = 1 ; static int p = 2 ; while ( true ) { int totient = 1 ; int denominator = 1 ; int p = 2 ; while ( p <= p ) { int numer = i * denominator ; int denom = i * denominator ; if ( fractions . Fraction ( numer , denom - 1 ) < TARGET ) { break ; } } if ( fractions . Fraction ( totient , denominator ) < TARGET ) { for ( int i = 1 ; i < p ; i ++ ) { int numer = i * denominator ; int denom = i * denominator ; if ( fractions . Fraction ( denom , denom - 1 ) < TARGET ) { return str ( denom ) ; } } } } } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; b [ i ] = s . charAt ( i ) - '0' ; } for ( int i = 0 ; i < n ; i ++ ) { int c = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] == 0 ) { c ++ ;
import java . io . * ; public class GFG { static boolean isPrime ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 ) return true ; if ( n % 2 == 0 ) return false ; for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { if ( n % i == 0 ) return false ; } return true ; } static boolean isPossible ( int n ) { if ( isPrime ( n ) && isPrime ( n - 2 ) ) return true ; else return false ; } public static void main ( String [ ] args ) { int n = 13 ; if ( isPossible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int countDyckPaths ( int n ) { int res = 1 ; for ( int i = 0 ; i < n ; i ++ ) res *= ( 2 * n - i ) ; res /= ( n + 1 ) ; return res / ( n + 1 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( " Number ▁ of ▁ Dyck ▁Paths ▁ is ▁ " + countDyckPaths ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; if ( n <= 30 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int ans = 0 ; if ( a == b ) { ans = c ; } else if ( a == c ) { ans = d ; } else { ans = e ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += a [ i ] / ( j + 1 ) ; } if ( sum >= 13 ) { max = Math . max ( max , sum ) ; } } System . out . println ( max ) ; } }
import java . io . * ; public class GFG { static int pentdiagonal ( int a ) { if ( a < 0 ) return - 1 ; int d = 1.22 * a ; return d ; } public static void main ( String [ ] args ) { int a = 6 , print = 1 ; System . out . println ( pentdiagonal ( a ) ) ; } }
import java . io . * ; public class GFG { static int hexDiagonal ( int a ) { if ( a < 0 ) return - 1 ; int d = 1.73 * a ; return d ; } public static void main ( String [ ] args ) { int a = 9 ; System . out . println ( hexDiagonal ( a ) ) ; } }
import java . util . * ; public class GFG { static void translate ( String st ) { int l = st . length ( ) ; if ( l < 2 ) return ; int i = 0 , j = 0 ; while ( j < l - 1 ) { if ( st . charAt ( j ) == ' A ' && st . charAt ( j + 1 ) == ' B ' ) j ++ ; st [ i ] = st . charAt ( j ) ; i ++ ; j ++ ; } if ( j == l - 1 ) st [ i ] = st . charAt ( l - 1 ) ; st [ i ] = ' ▁ ' ; st [ l - 1 ] = ' ▁ ' ; st [ i ] = ' ▁ ' ; st [ l ] = ' ▁ ' ; st [ l ] = ' ▁ ' ; st [ l ] = ' ▁ ' ; st [ l ] = ' ▁ ' ; st [ l ] = ' ▁ ' ; st [ l ] = ' ▁ ' ; st [ l ] = ' ▁ ' ;
import java . io . * ; public class GFG { static void translate ( String st ) { for ( int i = 1 ; i < st . length ( ) ; i ++ ) { if ( st . charAt ( i - 1 ) == ' A ' && st . charAt ( i ) == ' B ' ) { st [ i - 1 ] = ' C ' ; for ( int j = i ; j < st . length ( ) - 1 ; j ++ ) st [ j ] = st . charAt ( j + 1 ) ; st [ len ( st ) - 1 ] = ' ▁ ' ; } } } public static void main ( String [ ] args ) { String st = " helloABWorldABGfGf " ; translate ( st ) ; System . out . println ( " The ▁ modified ▁ string ▁ is ▁ : ▁ " ) ; System . out . println ( " ▁ " + " A " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " + " +
import java . util . * ; public class GFG { static int eulerlib , TARGET ; static int count = 2 ; static void compute ( ) { TARGET = 2000 ; int count = 2 ; for ( int ring = 2 ; ring < 5 ; ring ++ ) { if ( all ( map ( eulerlib . is_prime , ( ring * 6 - 1 , ring * 6 + 1 , ring * 12 + 5 ) ) ) { count ++ ; if ( count == TARGET ) return ; } if ( all ( map ( eulerlib . is_prime , ( ring * 6 - 1 , ring * 6 + 5 , ring * 12 - 7 ) ) ) count ++ ; } } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { if ( x [ i ] == x [ j ] ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } } System . out . println ( dp [ n ] [ m ] ) ; } }
public class GFG { static int Digits ( int n ) { int largest = 0 ; int smallest = 9 ; while ( n > 0 ) { int r = n % 10 ; largest = Math . max ( r , largest ) ; smallest = Math . min ( r , smallest ) ; n = n / 10 ; } System . out . println ( largest + " ▁ " + smallest ) ; } public static void main ( String [ ] args ) { int n = 2346 ; Digits ( n ) ; } }
public class GFG { static void solve ( int d1 , int d2 , int d3 ) { int maxx = Math . max ( d1 , Math . max ( d2 , d3 ) ) ; int sum = ( d1 + d2 + d3 ) ; if ( 2 * maxx > sum || sum % 2 == 1 ) { System . out . println ( " - 1" ) ; return ; } int x1 = 0 ; int y1 = 0 ; int x2 = d1 ; int y2 = 0 ; x3 = ( d1 + d2 - d3 ) / 2 ; y3 = ( d2 + d3 - d1 ) / 2 ; System . out . println ( " ( " + x1 + " , ▁ " + y1 + " , ▁ " + x2 + " , ▁ " + y2 + " ) ▁ and ▁ ( ▁ " + x3 + " , ▁ " + y3 + " ) ▁ and ▁ ( ▁ " + x2 + " , ▁ " + y2 + " ) ▁ and ▁ ( �
import java . util . * ; public class GFG { static boolean distributingBalls ( int k , int n , String str ) { int a [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) a [ str . charAt ( i ) - ' a ' ] ++ ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( a [ i ] > k ) return false ; } return true ; } public static void main ( String [ ] args ) { int n = 6 , k = 3 ; String str = " aacaab " ; if ( distributingBalls ( k , n , str ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' T ' ) count ++ ; } if ( count == n ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != c [ i ] ) { System . out . println ( " yes " ) ; return ; } } System . out . println ( " no " ) ; } }
import
import java . util . * ; public class GFG { static int bitAtGivenPosSetOrUnset ( int n , int k ) { int new_num = n >> ( k - 1 ) ; return ( new_num & 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; int k = 2 ; if ( bitAtGivenPosSetOrUnset ( n , k ) ) System . out . println ( " Set " ) ; else System . out . println ( " Unset " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ n ] ; int [ ] b = new int [ n ] [ n ] ; int [ ] c = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < 30 ; i ++ ) { for ( int j = 0 ; j < 30 ; j ++ ) { if ( l <= r && l <= l + 1 && r <= l + 2 && l <= r + 3 ) { count ++ ; } } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { ans = arr [ i ] ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static void arePermutations ( int a [ ] , int b [ ] , int n , int m ) { int sum1 , sum2 , mul1 , mul2 , mul1 = 0 , mul2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; mul1 *= a [ i ] ; } for ( int i = 0 ; i < m ; i ++ ) { sum2 += b [ i ] ; mul2 *= b [ i ] ; } return ( ( sum1 == sum2 ) && ( mul1 == mul2 ) ) ; } public static void main ( String [ ] args ) { int a [ ] = { 1 , 3 , 2 } ; int b [ ] = { 3 , 1 , 2 } ; int n = a . length ; int m = b . length ; if ( arePermutations ( a , b , n , m ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int MAX_CHAR = 26 ; static void findAndPrintUncommonChars ( String str1 , String str2 ) { int present [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { present [ i ] = 0 ; } int l1 = str1 . length ( ) ; l2 = str2 . length ( ) ; for ( int i = 0 ; i < l1 ; i ++ ) { if ( present [ str1 . charAt ( i ) - ' a ' ] == 1 || present
public class GFG { static boolean isInside ( int circle_x , int circle_y , int rad , int x , int y ) { if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad * rad ) return true ; else return false ; } public static void main ( String [ ] args ) { int x = 1 , y = 1 ; circle_x = 0 ; circle_y = 1 ; circle_x = 1 ; circle_y = 1 ; rad = 2 ; if ( isInside ( circle_x , circle_y , rad , x , y ) ) System . out . println ( " Inside " ) ; else System . out . println ( " Outside " ) ; } }
public class GFG { static int minSum ( int arr [ ] , int n , int x ) { int sum = 0 ; int largestDivisible = - 1 , minimum = arr [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; if ( arr [ i ] % x == 0 && largestDivisible < arr [ i ] ) largestDivisible = arr [ i ] ; if ( arr [ i ] < minimum ) smallest = arr [ i ] ; if ( largestDivisible == - 1 ) return sum ; sumAfterOperation = ( Sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible / x ) ) ; return Math . min ( sumAfterOperation , sumAfterOperation ) ; } if ( largestDivisible == - 1 ) return sum ; sumAfterOperation = ( Sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible / x ) ) ; return Math . min ( sumAfterOperation , sumAfterOperation ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 5 , 5 , 5 , 6 } ; int n = arr . length
public class GFG { static int nthTerm ( int n ) { int nth = 0 ; if ( n % 2 == 0 ) nth = 2 * ( ( n * n ) - n ) ; else nth = ( 2 * n * n ) - n ; return nth ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( nthTerm ( n ) ) ; n = 25 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; n = 250000007 ; System . out . println ( nthTerm ( n ) ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - '0' ; } int count = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } int ans = 0 ; for ( int i = 0 ; i < n - k ; i ++ ) { if ( arr [ i ] == 0 ) { ans = i + 1 ; break ; } } System . out . println ( ans ) ; } }
import
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; if ( ( x1 + y1 + x2 + y2 + y3 ) % 2 == 0 ) { System . out . println ( " YES " ) ; return ; } if ( ( x1 + y1 + x2 + y2 + y3 ) % 2 == 0 ) { System . out . println ( " YES " ) ; return ; } if ( ( x1 + y1 + x2 + y2 + y3 ) % 2 == 0 ) { System .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] x = new int [ n + m ] ; for ( int i = 0 ; i < n + m ; i ++ ) { x [ i ] = sc . nextInt ( ) ; } if ( n == m ) { if ( x [ n ] % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } else { if ( x [ n ] % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int min = 15 ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= min ) { min = a [ i ] ; max = a [ i ] ; } } if ( max >= max ) { System . out . println ( "0" ) ; } else { System . out . println ( max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 3 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] + arr [ i ] ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] >= 0 && arr2 [ i ] != arr [ i ] ) { ans = arr2 [ i ] ; break ; } } if ( ans == - 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } } }
import java . io . * ; public class GFG { static void compute ( ) { System . out . println ( "0" ) ; } public static void main ( String [ ] args ) { System . out . println ( "0" ) ; } }
public class GFG { static void search ( int arr [ ] , int n , int x ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == x ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 10 , 40 } ; int x = 10 ; int n = arr . length ; int result = search ( arr , n , x ) ; if ( result == - 1 ) System . out . println ( " Element ▁ is ▁ not ▁ present ▁ in ▁ array " ) ; else System . out . println ( " Element ▁ is ▁ present ▁ at ▁ index ▁ " + result ) ; } }
import
public class GFG { static int toggleBitsFromLToR ( int n , int l , int r ) { int num = ( ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) ) ; return ( n ^ num ) ; } static int unsetBitsInGivenRange ( int n , int l , int r ) { int num = ( 1 << ( 4 * 8 - 1 ) ) - 1 ; num = toggleBitsFromLToR ( num , l , r ) ; return ( n & num ) ; } public static void main ( String [ ] args ) { int n = 42 ; int l = 2 , r = 5 ; System . out . println ( unsetBitsInGivenRange ( n , l , r ) ) ; } }
public class GFG { static int MinStep ( int a [ ] , int n ) { int positive = 0 ; int negative = 0 ; int zero = 0 ; int step = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) zero ++ ; else if ( a [ i ] < 0 ) negative ++ ; step = step + ( - 1 - a [ i ] ) ; else positive += 1 ; step = step + ( a [ i ] - 1 ) ; } if ( negative % 2 == 0 ) step = step + zero ; else step = step + 2 ; return step ; } public static void main ( String [ ] args ) { int a [ ] = { 0 , - 2 , - 1 , - 3 , 4 } ; int n = a . length ; System . out . println ( MinStep ( a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h = e - a - b - c - d - e - f ; if ( h < 0 ) { System . out . println ( " NO " ) ; } else { System . out . println ( " YES " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] ; System . out . println ( ans ) ; } } }
public class GFG { static int noOfSquares ( int x1 , int y1 , int x2 , int y2 ) { int dx = Math . abs ( x2 - x1 ) ; int dy = Math . abs ( y2 - y1 ) ; int ans = dx + dy - gcd ( dx , dy ) ; System . out . println ( ans ) ; } public static void main ( String [ ] args ) { int x1 = 1 , y1 = 4 , x2 = 3 , y2 = 3 ; noOfSquares ( x1 , y1 , x2 , y2 ) ; } }
public class GFG { static String get_maximum ( String s , int a [ ] ) { String s = s . substring ( 0 , s . length ( ) - 1 ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) - '0' < a [ s . charAt ( i ) - '0' ] ) { int j = i ; while ( j < s . length ( ) && ( s . charAt ( j ) - '0' <= a [ s . charAt ( j ) - '0' ) ) { s [ j ] = ( char ) ( '0' + a [ s . charAt ( j ) - '0' ) ; j ++ ; } return " " . join ( s ) ; } } return s ; } public static void main ( String [ ] args ) { String s = "1337" ; int a [ ] = { 0 , 1 , 2 , 5 , 4 , 6 , 6 , 3 , 1 , 9 } ; System . out . println ( get_maximum ( s , a ) ) ;
import java . util . * ; public class GFG { static boolean isOctal ( int n ) { while ( n > 0 ) { if ( ( n % 10 ) >= 8 ) return false ; n /= 10 ; } return true ; } static boolean isPalindrome ( int n ) { int divide = 8 ; while ( n != 0 ) { int octal = n / 10 ; int while_ = n % divide ; n = n / divide ; j = n % divide ; k = j ; } return true ; } static boolean isPalindrome ( int n ) { int divide = 8 ; while ( n != 0 ) { int octal = n / divide ; int n = n / divide ; int j = n % divide ; k = j ; } return true ; } public static void main ( String [ ] args ) { int n = 97 ; if ( isPalindrome ( n ) ) System . out .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } if ( count % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int binarySearch ( int arr [ ] , int low , int high ) { if ( high < low ) return - 1 ; int mid = ( low + high ) / 2 ; int midValue = arr [ mid ] ; if ( mid == arr [ mid ] ) return mid ; int leftindex = binarySearch ( arr , low , mid - 1 ) ; leftindex = Math . min ( mid + 1 , midValue ) ; left = binarySearch ( arr , left , leftindex ) ; if ( left >= 0 ) return left ; rightindex = Math . max ( mid + 1 , midValue ) ; right = binarySearch ( arr , rightindex , high ) ; return right ; } public static void main ( String [ ] args ) { int arr [ ] = { - 10 , - 5 , 2 , 2 , 2 , 2 , 3 , 4 , 7 , 9
public class GFG { static int MAX = 10000 ; static int prodDig [ ] = new int [ MAX ] ; static int prodDig [ ] = new int [ MAX ] ; static int prodDig [ ] = new int [ MAX ] ; static int prodDig [ ] = new int [ MAX ] ; static int prodDig [ ] = new int [ MAX ] ; static int findZero ( int n ) { int res [ ] = new int [ MAX ] ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( i * getDigitProduct ( i ) == n ) res [ i ] = i ; } if ( res [ 0 ] == 0 ) { System . out . print ( i ) ; } } static int findZero ( int n ) { int res [ ] = new int [ MAX ] ; for ( int i = 1 ; i * i <= n ; i ++ ) { if ( i * getDigitProduct ( i ) == n ) res [ i ] = i ; } if
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] x = new int [ n ] ; int [ ] y = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = sc . nextInt ( ) ; y [ i ] = sc . nextInt ( ) ; } int min = Math . abs ( x [ 0 ] - x [ 1 ] ) ; int max = Math . abs ( x [ n - k ] - x [ 2 ] ) ; int min2 = Math . abs ( x [ 0 ] - x [ 1 ] ) ; int max2 = Math . abs ( x [ n - k ] - x [ 2 ] ) ; if ( min2 * 2 + max2 * 2 < min ) { System . out . println ( min2 * 2 + max2 * 2 ) ; } else { System . out . println ( max2 * 2 + min2 * 2 ) ; } } }
import java . util . * ; public class GFG { static int diff ( int n , int mid ) { if ( n > ( mid * mid * mid ) ) return ( n - ( mid * mid * mid ) ) ; else return ( ( mid * mid * mid ) - n ) ; } static int cubicRoot ( int n ) { int start = 0 , end = n ; int e = 0.0000001 ; while ( true ) { mid = ( start + end ) / 2 ; error = diff ( n , mid ) ; if ( error <= e ) return mid ; if ( ( mid * mid * mid ) > n ) end = mid ; else start = mid ; } n = 3 ; System . out . println ( " Cubic ▁ root ▁ of ▁ " + n + " ▁ is ▁ " + ( cubicRoot ( n ) , 6 ) ) ; return ( cubicRoot ( n ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( " Cubic ▁ root ▁ of ▁ " + n + " ▁ is ▁ " + ( cubicRoot ( n )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( max + " ▁ " + arr [ n - 1 ] ) ; } }
import java . util . * ; public class GFG { static int inv ( int a , int m ) { int m0 = m ; int x0 = 1 , x1 = 1 , x2 = 1 , x3 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) x1 = x1 + m0 ; return x1 ; } static int findMinX ( int num , int rem , int k ) { int prod = 1 ; for ( int i = 0 ; i < k ; i ++ ) prod = prod * num [ i ] ; int result
public class GFG { static int findMaxOR ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int maxOR = arr [ 0 ] ; int count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( ( maxOR | arr [ i ] ) > maxOR ) maxOR = maxOR | arr [ i ] ; count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 1 , 3 , 4 , 2 } ; int n = arr . length ; System . out . println ( findMaxOR ( arr , n ) ) ; } }
import java . io . * ; public class GFG { static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } }
import java . io . * ; public class GFG { static int aliquotSum ( int n ) { int sm = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( n % i == 0 ) sm = sm + i ; } return sm ; } public static void main ( String [ ] args ) { int n = 12 ; System . out . println ( aliquotSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int pentagon_pyramidal ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { p = ( 3 * i * i - i ) / 2 ; sum = sum + p ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( pentagon_pyramidal ( n ) ) ; } }
public class GFG { static int fifthPowerSum ( int n ) { int sm = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sm = sm + ( i * i * i ) ; return sm ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . println ( fifthPowerSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int squaresum ( int n ) { int sm = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sm = sm + ( i * i ) ; return sm ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( squaresum ( n ) ) ; } }
import java . io . * ; public class GFG { static int seriessum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += i * ( i + 1 ) / 2 ; return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( seriessum ( n ) ) ; } }
import java . io . * ; public class GFG { static int sumOfSeries ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( 2 * i - 1 ) * ( 2 * i - 1 ) ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( sumOfSeries ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { int summ = 0 ; for ( int i = 1 ; i <= n ; i ++ ) summ = ( summ + ( ( i * ( i + 1 ) * ( 2 * i + 1 ) ) / 6 ) ) ; return summ ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int fourthPowerSum ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i * i ) ; return sum ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( fourthPowerSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int squareSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) sum += ( 2 * i ) * ( 2 * i ) ; return sum ; } public static void main ( String [ ] args ) { int ans = squareSum ( 8 ) ; System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int AvgofSquareN ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) sum += ( i * i ) ; return sum / n ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( AvgofSquareN ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += i * ( n - i ) ; return 2 * sum ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
public class GFG { static int solve ( int n , int base ) { int sum = 0 ; while ( n > 0 ) { int remainder = n % base ; sum = sum + remainder ; n /= base ; } return sum ; } static int sumsOfDigits ( int n ) { int sum = 0 ; int N = floor ( n / 2 ) ; for ( int base = 2 ; base <= N ; base ++ ) { sum = sum + solve ( n , base ) ; } System . out . println ( sum ) ; return sum ; } public static void main ( String [ ] args ) { int n = 8 ; int sumsOfDigits ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] primes = new int [ n ] ; for ( int i = 0 ; i < primes . length ; i ++ ) { primes [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( primes [ i ] == 0 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . io . * ; public class GFG { static int bin ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 2 == 1 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( bin ( n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 2147483647 ; static int optimalSearchTree ( int keys [ ] , int freq [ ] [ ] , int n ) { int cost [ ] [ ] = new int [ n ] [ n ] ; for
public class GFG { static int get ( int x , int y , int z ) { if ( x > z ) return - 1 ; int val = z - x ; int div = ( z - x ) / y ; int ans = div * y + x ; return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 5 ; int z = 8 ; System . out . println ( get ( x , y , z ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( Math . abs ( a [ i ] - b [ i ] ) < Math . abs ( a [ i ] - b [ i ] ) ) { ans = Math . abs ( a [ i ] - b [ i ] ) ; } } System . out . println ( ans ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= k ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) + 1 ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int maxcoefficientvalue ( int n ) { if ( n % 2 == 0 ) return binomialCoeff ( n , ( n / 2 ) ) ; else return binomialCoeff ( n , ( n + 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( maxcoefficientvalue ( n
import java . io . * ; public class GFG { static boolean isVowel ( char ch ) { if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' ) return true ; else return false ; } static int vowelPairs ( char s [ ] , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( isVowel ( s [ i ] ) && isVowel ( s [ i + 1 ] ) ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { char s [ ] = " abaebio " . toCharArray ( ) ; int n = s . length ; System . out . println ( vowelPairs ( s , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ]
import java . util . * ; public class GFG { static boolean isSubstring ( String s1 , String s2 ) { int M = s1 . length ( ) ; int N = s2 . length ( ) ; for ( int i = 0 ; i < N - M + 1 ; i ++ ) { for ( int j = M ; j < N - M + 1 ; j ++ ) { if ( s2 . charAt ( i + j ) != s1 . charAt ( j ) ) break ; if ( j + 1 == M ) return i ; } } return - 1 ; } public static void main ( String [ ] args ) { String s1 = " for " ; s2 = " geeksforgeeks " ; int res = isSubstring ( s1 , s2 ) ; if ( res == - 1 ) System . out . println ( " Not ▁ present " ) ; else System . out . println ( " Present ▁ at ▁ index ▁ " + s1 ) ; } }
public class GFG { static float angleOncir cumference ( float z ) { return ( z / 2 ) ; } public static void main ( String [ ] args ) { float angleOncir cumference ( float z ) { return ( z / 2 ) ; } } }
public class GFG { static int countSubarraysof1and0 ( int a [ ] , int n ) { int count1 = 0 ; int count0 = 0 ; int number1 = 0 ; int number0 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) count1 ++ ; else number1 ++ ; } for ( int i = 0 ; i <
public class GFG { static void printNumbers ( int N ) { int flag = 1 ; int x = N ; if ( N > 0 ) { while ( x > 0 && flag == 1 ) { int digit = x % 10 ; if ( digit != 1 && digit != 3 ) flag = 0 ; x = x / 10 ; } if ( flag == 1 ) System . out . print ( N + " ▁ " ) ; System . out . printNumbers ( N - 1 ) ; } } public static void main ( String [ ] args ) { int N = 20 ; printNumbers ( N ) ; } }
public class GFG { static void printPermutation ( int n , int k ) { int mx = n ; for ( int i = 1 ; i <= mx ; i ++ ) { System . out . print ( mx + " ▁ " ) ; mx -= 1 ; } for ( int i = 1 ; i <= mx ; i ++ ) System . out . print ( i + " ▁ " ) ; } public static void main ( String [ ] args ) { int N = 5 , K = 3 ; if ( K >= N - 1 ) System . out . print ( " Not ▁ Possible " ) ; else System . out . printPermutation ( N , K ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { ans = Math . min ( ans , arr [ i ] ) ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean is_ member ( List < Integer > list , int key ) { for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( key == list . get ( i ) ) return true ; } return false ; } static boolean overlap ( List < Integer > list1 , List < Integer > list2 ) { for ( int key = 0 ; key < list1 . size ( ) ; key ++ ) { if ( is_ member ( list2 , key ) ) return true ; } return false ; } public static void main ( String [ ] args ) { int s1 = ' geeksforgeeks ' ; int s2 = ' geeks ' ; List < Integer > list = new ArrayList < Integer > ( s1 ) ; List < Integer > list2 = new ArrayList < Integer > ( s2 ) ; List < Integer > yes_or_no = new ArrayList < Integer > ( ) ; List < Integer > yes_or_no = new ArrayList < Integer > ( ) ; List < Integer > yes_or_no = new ArrayList < Integer > ( ) ; List < Integer > yes_or_no = new ArrayList
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( n * ( a - b ) > ( c - d ) ) { System . out . println ( " No " ) ; } else { System . out . println ( " Yes " ) ; } } } }
public class GFG { static void findElements ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ j ] > arr [ i ] ) count ++ ; } if ( count >= 2 ) System . out . print ( arr [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int arr [ ] = { 2 , - 6 , 3 , 5 , 1 } ; int n = arr . length ; findElements ( arr , n ) ; } }
import java . util . * ; public class GFG { static int N = 3 ; static int maxPathSum ( int tri [ ] [ ] , int m , int n ) { for ( int i = 0 ; i < m - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ; else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ; } } return tri [ 0 ] [ 0 ] ; } public static void main ( String [ ] args ) { int tri [ ] [ ] = { { 1 , 0 , 0 } , { 4 , 8 , 0 } , { 1 , 5 , 3 } } ; System . out . println ( maxPathSum ( tri , 2 , 2 ) ) ; } }
public class GFG { static boolean isHeap ( int arr [ ] , int n ) { for ( int i = 0 ; i < ( n - 2 ) / 2 ; i ++ ) { if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false ; if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) return false ; } return true ; } public static void main ( String [ ] args ) { int arr [ ] = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length ; if ( isHeap ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isHeap ( int arr [ ] , int i , int n ) { if ( i > ( n - 2 ) / 2 ) return true ; if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 * i + 2 ] && isHeap ( arr , 2 * i + 1 , n ) && isHeap ( arr , 2 * i + 2 , n ) ) return true ; return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 } ; int n = arr . length - 1 ; if ( isHeap ( arr , 0 , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int x1 = a * d - b * c * e ; int y1 = b * d - c * c * d ; int z1 = c * d - e * e ; if ( x1 * z - y1 * z1 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int findMinDel ( int arr [ ] , int n ) { int min_num = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { min_num = Math . min ( arr [ i ] , min_num ) ; } return n - min_num ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 3 , 2 } ; int n = arr . length ; System . out . println ( findMinDel ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int count ( int x , int y ) { int ans = 0 ; int m [ ] = new int [ ] { 1 , 2 } ; while ( x % y != 0 ) { x /= y ; ans += 1 ; if ( x % y != 0 ) { return - 1 ; } m [ x ] = 1 ; x *= 10 ; } return ans ; } public static void main ( String [ ] args ) { int res = count ( 1 , 2 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( " - 1" ) ; else System . out . println ( res ) ; res = count ( 3 , 5 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( " - 1" ) ; else System . out . println ( res ) ; res = count ( 3 , 5 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( " - 1" ) ; else System . out . println ( res ) ; res = count ( 3 , 5 ) ; System . out . println ( " INF " ) ; if ( res == - 1 ) System . out . println ( " - 1" ) ; else System . out . println ( res ) ; res =
public class GFG { static boolean isPossibleToMakeDivisible ( int arr [ ] , int n ) { int remainder = 0 ; for ( int i = 0 ; i < n ; i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ; return ( remainder == 0 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 40 , 50 , 90 } ; int n = 3 ; if ( isPossibleToMakeDivisible ( arr , n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt (
public class GFG { static void printCubes ( int a , int b ) { for ( int i = a ; i <= b ; i ++ ) { int j = 1 ; for ( j = 1 ; j * j <= i ; j ++ ) { if ( j * j == i ) { System . out . print ( j * j * " ▁ " ) ; break ; } } } } public static void main ( String [ ] args ) { int a = 1 , b = 100 ; printCubes ( a , b ) ; } }
public class GFG { static int getModulo ( int n , int d ) { return ( n & ( d - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 6 ; int d = 4 ; System . out . println ( n + " ▁ modulo ▁ " + d + " ▁ is ▁ " + getModulo ( n , d ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( Math . abs ( arr [ i ] - arr [ j ] ) <= d ) { max = Math . max ( max , j - i + 1 ) ; break ; } } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) { ans += c [ i ] ; } } System . out . println ( ans ) ; } }
public class GFG { static boolean isPerfectCube ( int x ) { int cr = ( x * ( 1 / 3 ) ) ; return ( cr * cr * cr == x ) ; } static boolean canBePerfectCube ( int N , int K ) { if ( isPerfectCube ( N + K ) || isPerfectCubeCube ( N - K ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; return false ; } public static void main ( String [ ] args ) { int N = 7 ; K = 1 ; canBePerfectCube ( N , K ) ; N = 5 ; K = 4 ; canBePerfectCube ( N , K ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s . charAt ( i - 1 ) == t . charAt ( i ) ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; a [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] b = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] [ 0 ] = sc . nextInt ( ) ; b [ i ] [ 1 ] = sc . nextInt ( ) ; } int [ ] [ ] c
public class GFG { static void countDigits ( int val , int arr [ ] ) { while ( val > 0 ) { int digit = val % 10 ; arr [ int ( digit ) ] += 1 ; val /= 10 ; } } static void countFrequency ( int x , int n ) { int freq_count [ x ] = new int [ 10 ] ; for ( int i = 1 ; i <= n ; i ++ ) { val = Math . pow ( x , i ) ; countDigits ( val , freq_count ) ; } for ( int i = 0 ; i < 10 ; i ++ ) System . out . print ( freq_count [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int x = 15 ; int n = 3 ; countFrequency ( x , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] && a [ i ] ^ a [ i + 1 ] ) { ans = " NO " ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; System . out . println ( Math . max ( 0 , n - 2 ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == t . charAt ( i ) ) { count ++ ; } } System . out . println ( count ) ; } }
public class GFG { static boolean linearCheck ( int ar [ ] [ ] , int arr [ ] ) { for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ar [ i ] [ j ] != arr [ j ] ) { int matched = False ; for ( int j = 0 ; j < n ; j ++ ) { if ( ar [ i ] [ j ] != arr [ j ] ) { matched = False ; break ; } } if ( matched ) return i + 1 ; } } } return - 1 ; } public static void main ( String [ ] args ) { int mat [ ] [ ] = { { 0 , 0 , 1 , 0 } , { 10 , 9 , 22 , 23 } , { 40 , 40 , 40 , 40 } , { 43 , 44 , 55 , 68 } , { 81 , 73 , 100 , 132 } , { 81 , 73 , 100 , 125 } } ; int row [ ] = { 10 , 9 , 22 , 23 } ; System . out . println ( linearCheck ( mat , row ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; while ( n -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = 0 ; int sum = 0 ; for ( int i = 0 ; i < a ; i ++ ) { sum += sc . nextInt ( ) ; } if ( sum % b == 0 ) { for ( int i = 0 ; i < b ; i ++ ) { if ( sum % a == 0 ) { c ++ ; } } } System . out . println ( c ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) + 4 * n - 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 7 * ( int ) Math . pow ( n , 2 ) - 7 * n + 7 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 5 * ( int ) Math . pow ( n , 2 ) - 5 * n ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) + 2 * n + 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 3 ) + Math . pow ( n , 2 ) ; } public static void main ( String [ ] args ) { int N = 3 ; System . out . println ( nthTerm ( N ) ) ; } }
public class GFG { static int nthTerm ( int n ) { return 2 * ( int ) Math . pow ( n , 2 ) - n - 1 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return ( int ) Math . pow ( n , 2 ) - 2 * n + 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int nthTerm ( int n ) { return 3 * ( int ) Math . pow ( n , 2 ) + n - 2 ; } public static void main ( String [ ] args ) { int N = 4 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int ans = 0 ; if ( x > 0 && y > 0 ) { ans = x + y ; } else if ( x < 0 && y < 0 ) { ans = - x ; } else if ( x < 0 && y < 0 ) { ans = - y ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ s . length ( ) ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] == k ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Solution { public int memo [ ] ; public int memo [ ] ; public int fib ( int n ) { if ( n < 2 ) return 0 ; memo = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) memo [ i ] = memo [ i ] + memo [ i - 1 ] ; return memo [ n ] ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int n = 2 ; int out = sObj . fib ( n ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt (
public class GFG { static double PI = 3.142 ; static double cosXSertiesSum ( double x , int n ) { double x = x * ( PI / 180.0 ) ; double res = 1 ; int sign = 1 ; int fact = 1 ; int pow = 1 ; for ( int i = 1 ; i < 5 ; i ++ ) { sign = sign * - 1 ; fact = sign * ( 2 * i - 1 ) * ( 2 * i ) ; pow = pow * x * x ; res = res + sign * pow / fact ; } return res ; } public static void main ( String [ ] args ) { double x = 50 , n = 5 ; System . out . println ( " round ▁ " + ( PI / 180.0 ) + " , ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " + " ▁ " +
public class GFG { static int findNumber ( int N , int S ) { int i = ( ( N ) * ( N + 1 ) ) / 4 ; return i ; } static void check ( int N , int S ) { int i = findNumber ( N , S ) ; int integerI = i ; if ( i - integerI == 0 ) { System . out . println ( " Yes : " + integerI + " , ▁ " + ( i + 1 ) + " , ▁ " + ( i + 1 ) ) ; } else { System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int N = 4 ; int S = 3 ; check ( N , S ) ; N = 5 ; S = 3 ; check ( N , S ) ; } }
import java . util . * ; public class GFG { static boolean multipleOfThree ( int K , int dig0 , int dig1 ) { int sum = 0 ; temp = ( dig0 + dig1 ) % 10 ; sum = dig0 + dig1 ; if ( K == 2 ) { if ( sum % 3 == 0 ) return true ; else return false ; } sum += temp ; numberofGroups = ( K - 3 ) / 4 ; remNumberofDigits = ( K - 3 ) % 4 ; sum += ( numberofGroups * 20 ) ; for ( int i = remNumberofDigits ; i < dig1 ; i ++ ) { temp = ( 2 * temp ) % 10 ; sum += temp ; } if ( sum % 3 == 0 ) return true ; else return false ; } public static void main ( String args [ ] ) { int K = 5 ; int dig0 = 3 ; int dig1 = 4 ; if ( multipleOfThree
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= b [ i ] ) { sum ++ ; } } if ( sum <= b [ n - 1 ] ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int countOcc ( String s ) { int cnt = 0 ; for ( int i = 0 ; i < s . length ( ) - 3 ; i ++ ) { int c = 0 ; for ( int j = i ; j < i + 4 ; j ++ ) { if ( s . charAt ( j ) == ' c ' ) c ++ ; else if ( s . charAt ( j ) == ' l ' ) c ++ ; else if ( s . charAt ( j ) == ' a ' ) c ++ ; else if ( s . charAt ( j ) == ' p ' ) p ++ ; } if ( c == 1 && l == 1 && a == 1 && p == 1 ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { String s = " clapc " ; System . out . println ( countOcc ( s . lower ( ) ) ) ; } }
public class GFG { static int countSteps ( int x , int y ) { if ( x % y == 0 ) return Math . floor ( x / y ) ; return Math . floor ( ( x / y ) + countSteps ( y , x % y ) ) ; } public static void main ( String [ ] args ) { int x = 100 , y = 19 ; System . out . println ( countSteps ( x , y ) ) ; } }
import java . io . * ; public class GFG { static boolean isPerfectSquare ( int x ) { double sr = Math . sqrt ( x ) ; return ( sr - Math . floor ( sr ) == 0 ) ; } static boolean isSunnyNum ( int n ) { if ( isPerfectSquare ( n + 1 ) ) return true ; return false ; } public static void main ( String [ ] args ) { int n = 3 ; if ( isSunnyNum ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class GFG { static float area_inscribed ( float P , float B , float H ) { return ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ; } public static void main ( String [ ] args ) { float P = 3 ; float B = 4 ; float H = 5 ; System . out . println ( area_inscribed ( P , B , H ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] map = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { map [ i ] [ j ] = s . charAt ( j ) ; } } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = map [ i ] [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System . out . print ( dp [ i ] [ j ] + " ▁ " ) ; } System . out . println ( ) ; } } } }
import java . util . * ; public class GFG { static int getCount ( int v [ ] , int n ) { int [ ] v = new int [ n ] ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int tmp = n - 1 - upper_bound ( v [ i ] - 1 ) ; if ( tmp == v [ i ] ) cnt ++ ; } return cnt ; } public static void main ( String [ ] args ) { int n = 4 ; int v [ ] = { 1 , 2 } ; int v [ ] = { 3 , 4 } ; System . out . println ( getCount ( v , n ) ) ; } }
public class GFG { static int trailing_zeros ( int N ) { int count_of_two = 0 ; int count_of_five = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { int val = i ; while ( val % 2 == 0 && val > 0 ) { val /= 2 ; count_of_two += i ; } while ( val % 5 == 0 && val > 0 ) { val /= 5 ; count_of_five += i ; } } int ans = Math . min ( count_of_two , count_of_five ) ; return ans ; } public static void main ( String [ ] args ) { int N = 12 ; System . out . println ( trailing_zeros ( N ) ) ; } }
import java . io . * ; public class GFG { static boolean removeZero ( int n ) { int res = 0 ; int d = 1 ; while ( n > 0 ) { if ( n % 10 != 0 ) res += ( n % 10 ) * d ; n /= 10 ; } return res ; } static boolean isEqual ( int a , int b ) { if ( removeZero ( a ) + removeZero ( b ) == removeZero ( a + b ) ) return true ; return false ; } public static void main ( String [ ] args ) { int a = 105 , b = 106 ; if ( isEqual ( a , b ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Math . abs ( arr [ 0 ] - arr [ 1 ] ) ; int max = Math . abs ( arr [ 0 ] - arr [ 2 ] ) ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int min = Math . abs ( a [ 0 ] - b [ 0 ] ) ; int max = Math . abs ( a [ 0 ] - b [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( min > Math . abs ( a [ i ] - b [ i ] ) ) { min = Math . abs ( a [ i ] - b [ i ] ) ; } if ( max < Math . abs ( a [ i ] - b [ i ] ) ) { max = Math . abs ( a [ i ] - b [ i ] ) ; } } System . out . println ( min + " ▁ " + max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( a [ i ] + " ▁ " ) ; } System . out . println ( b [ n - 1 ] ) ; } }
public class GFG { static int countSetBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; } static int totalPairs ( int s1 , int s2 ) { int count = 0 ; int arr1 [ ] = new int [ 7 ] ; arr2 = new int [ 7 ] ; for ( int i = 0 ; i < s1 ; i ++ ) { set_bits = countSetBits ( s1 [ i ] ) ; arr1 [ set_bits ] += 1 ; } for ( int i = 1 ; i < 7 ; i ++ ) { count += ( arr1 [ i ] * arr2 [ i ] ) ; } for ( int i = 1 ; i < 7 ; i ++ ) { count += ( arr1 [ i ] * arr2 [ i ] ) ; } return count ; } public static void main ( String [ ] args ) { int
import java . io . * ; public class GFG { static int countSubSeq ( int i , int sum , int cnt , int a , int n ) { if ( i == n ) { if ( sum == 0 && cnt > 0 ) return 1 ; else return 0 ; } int ans = 0 ; ans += countSubSeq ( i + 1 , sum , cnt , a , n ) ; ans += countSubSeq ( i + 1 , sum + a [ i ] , cnt + 1 , a , n ) ; return ans ; } public static void main ( String [ ] args ) { int a = [ - 1 , 2 , - 2 , 1 ] = { - 1 , 2 , - 2 , 1 } ; int n = a . length ; System . out . println ( countSubSeq ( 0 , 0 , 0 , a , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int ans = 0 ; if ( a == 0 ) { ans = b ; } else { for ( int i = 0 ; i < a ; i ++ ) { for ( int j = 0 ; j < b ; j ++ ) { if ( i + j * 2 < a && j + 1 < b && i + j * 2 < c ) { ans = Math . max ( ans , b - i + j * 2 - 1 + c - 1 ) ; } } } } System . out . println ( ans ) ; } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { ans = Math . max ( ans , a [ i ] [ j ] - 1 ) ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ 0 ] = 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] == 1 ) { dp [ i ] [ j ] = 1 ; } else { dp [ i ] [ j ] = dp [ i ] [ j ] + a [ i ] ; } } } int ans = 0 ; for ( int i = 0 ; i < n ; i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc . nextInt ( ) ; arr [ i ] [ 1 ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { System . out . print ( arr [ i ] [ j ] + " ▁ " ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int w = sc . nextInt ( ) ; int [ ] arr = new int [ w ] ; for ( int i = 0 ; i < w ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < w ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] ) { count ++ ; } } if ( count == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } }
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ]
public class GFG { static int N = 100005 ; static int d [ ] = new int [ N ] ; static int pre [ ] = new int [ N ] ; static void Positive_Divisors ( ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j * j == i ; j ++ ) { if ( i % j == 0 ) { if ( j * j == i ) d [ i ] += 1 ; else d [ i ] += 2 ; } } } int ans = 0 ; for ( int i = 2 ; i < N ; i ++ ) { if ( d [ i ] == d [ i - 1 ] ) ans ++ ; pre [ i ] = ans ; } if ( ans == 0 ) System . out . println ( pre [ 0 ] ) ; } public static void main ( String [ ] args ) { Positive_Divisors ( ) ; int n = 15 ; System . out . println ( pre [ n ] ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { int x
import java . io . * ; public class GFG { static double area_of_triangle_inscribed ( int n , int len ) { double P = ( len * n ) ; double A = len / ( 2 * Math . tan ( ( 180 / n ) * 3.14159 / 180 ) ) ; double area = ( P * A ) / 2 ; return area ; } static double area_of_triangle_inscribed ( int n , int len ) { double area = area_of_triangle_inscribed ( n , len ) ; double triangle = area / n ; return triangle ; } public static void main ( String [ ] args ) { int n = 6 ; int len = 10 ; System . out . println ( area_of_triangle_inscribed ( n , len ) + " ▁ " + area_of_triangle_inscribed ( n , len ) ) ; } }
public class GFG { static int MAX = 256 ; static int lastNonRepeating ( String str , int n ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ str . charAt ( i ) ] ++ ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int ch = str . charAt ( i ) ; if ( freq [ ch ] == 1 ) return ( " " + ch ) ; } return " - 1" ; } public static void main ( String [ ] args ) { String str = " GeeksForGeeks " ; int n = str . length ( ) ; System . out . println ( lastNonRepeating ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = sc . nextInt ( ) ; a [ i ] [ 1 ] = sc . nextInt ( ) ; } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ 0 ] == a [ i ] [ 1 ] ) { ans = i + 1 ; break ; } } if ( ans == - 1 ) { System . out . println ( - 1 ) ; } else { System . out . println ( ans ) ; } } }
import java . io . * ; public class GFG { static float y ( float x ) { return ( 1 / ( 1 + x ) ) ; } static float BooleRule ( float a , float b ) { float n = 4 ; float h = ( ( b - a ) / n ) ; float sum = 0 ; float bl = ( 7 * y ( a ) + 32 * y ( a + h ) + 32 * y ( a + 2 * h ) + 32 * y ( a + 3 * h ) + 7 * y ( a + 4 * h ) ) * 2 * h / 45 ; sum = sum + bl ; return sum ; } public static void main ( String [ ] args ) { float lowlimit = 0 ; float upplimit = 4 ; System . out . println ( " f ( x ) ▁ = ▁ " + ( ( booleRule ( 0 , 4 ) , 4 ) ) ; } }
import java . util . * ; public class GFG { static int maxN = 20 ; static int maxM = 256 ; static int dp [ ] [ ] = new int [ maxN ] [ maxM ] ; static int [ ] v = new int [ maxN ] ; static int l = findLen ( arr , 0 , ( 1 << 8 ) - 1 ) ; static int r = findLen ( arr , 0 , ( 1 << 8 ) - 1 ) ; dp [ 0 ] [ 0 ]
import java . util . * ; public class GFG { static int maxN = 20 ; static int maxM = 64 ; static int dp [ ] [ ] = new int [ maxN ] [ maxM ] ; static int findLen ( int arr [ ] , int i , int curr , int n , int m ) { if ( i == n ) { if ( curr == m ) return 0 ; else return - 1 ; } if ( v [ i ] [ curr ] == 1 ) return dp [ i ] [ curr ] ; v [
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ n ] ; int [ ] b = new int [ n ] ; int [ ] t = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; b [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 7 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static int minDiff ( int arr [ ] , int n , int k ) { int result = Integer . MAX_VALUE ; Arrays . sort ( arr ) ; for ( int i = n - k + 1 ; i >= 0 ; i -- ) result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 100 , 300 , 200 , 1000 , 20 , 30 } ; int n = arr . length ; int k = 3 ; System . out . println ( minDiff ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans = Math . max ( ans , arr [ i ] ) ; } } System . out . println ( ans ) ; } } }
public class GFG { static int Mean ( int arr [ ] , int n ) { int sm = 0 ; for ( int i = 0 ; i < n ; i ++ ) sm = sm + arr [ i ] ; return sm / n ; } static int meanAbsoluteDeviation ( int arr [ ] , int n ) { int absSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) absSum += Math . abs ( arr [ i ] - Mean ( arr , n ) ) ; return absSum / n ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 15 , 15 , 17 , 18 , 21 } ; int n = arr . length ; System . out . println ( meanAbsoluteDeviation ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static int LIMIT = Library . pow ( 10 , 9 ) ; static int [ ] primes = new int [ LIMIT ] ; static void count ( int primeindex , int product ) { if ( primeindex == len ( primes ) ) return ; int result = 0 ; while ( product <= LIMIT ) { result += count ( primeindex + 1 , product ) ; product *= primes [ primeindex ] ; } return result ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int maximumXOR ( int n , int l , int r ) { int x = 0 ; for ( int i = 0 ; i < Math . log ( r ) ; i ++ ) { if ( n & ( 1 << i ) ) { if ( x > r ) x ^= ( 1 << i ) ; } else { if ( x + ( 1 << i ) - 1 < l ) x ^= ( 1 << i ) ; } } return n ^ x ; } public static void main ( String [ ] args ) { int n = 7 ; int l = 2 , r = 23 ; System . out . println ( " The ▁ output ▁ is ▁ " + maximumXOR ( n , l , r ) ) ; } }
public class GFG { static int maxPrimefactorNum ( int N ) { boolean arr [ ] = new boolean [ N + 5 ] ; int i = 3 ; while ( i * i <= N ) { if ( arr [ i ] ) { for ( int j = i * i ; j <= N ; j += i ) arr [ j ] = false ; } i ++ ; } int prime = ( int ) ; prime . append ( 2 ) ; for ( i = 3 ; i <= N ; i ++ ) { if ( arr [ i ] ) { prime . append ( i ) ; } } i = 0 ; int ans = 1 ; while ( ans * prime [ i ] <= N && i < len ( prime ) ) ans *= prime [ i ] ; return ans ; } public static void main ( String [ ] args ) { int N = 40 ; System . out . println ( maxPrimefactorNum ( N ) ) ; } }
import java . io . * ; public class GFG { static int CountTrailingZeros ( int n ) { int bit = ( int ) Math . pow ( n , 2 ) ; bit = bit / ( int ) Math . pow ( n , 2 ) ; int zero = 0 ; for ( int i = 0 ; i < bit ; i ++ ) { if ( bit [ i ] == '0' ) zero ++ ; else break ; } return zero ; } public static void main ( String [ ] args ) { int n = 4 ; int ans = CountTrailingZeros ( n ) ; System . out . println ( ans ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int ans = Math . min ( a + b + c , Math . min ( a + b + c , c ) ) ; System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int c = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { ans ++ ; c ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int distinctSubstring ( int P [ ] , int Q [ ] , int K , int N ) { HashSet < Integer > S = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { S . add ( P [ i ] ) ; } int S = 0 ; for ( int j = 0 ; j < N ; j ++ ) { int pos = P [ j ] - 97 ; int sum = S . size ( ) ; S += P [ j ] ; if ( sum <= K ) S . add ( s ) ; else break ; } return S . size ( ) ; } public static void main ( String [ ] args ) { int P [ ] = { 5 , 9 , 8 , 16 } ; int Q [ ] = { { 5 , 9 , 8 , 16 } ; int K = 5 ; int N = P . length ; System . out . println ( distinctSubstring ( P , Q , K , N ) ) ; } } }
import java . util . * ; public class GFG { static int makeEven ( int arr [ ] , int n ) { int first_e_i = - 1 , last_e_i = - 1 ; int last_n_i = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 && arr [ i ] < arr [ last_n_i ] ) { first_e_i = i ; break ; } if ( arr [ i ] % 2 == 0 ) last_e_i = i ; } if ( first_e_i != - 1 && last_e_i != - 1 )
public class GFG { static void findDivisors ( int n ) { int div [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j * i <= n ; j ++ ) { if ( j * i <= n ) div [ i * j ] ++ ; } } for ( int i = 1 ; i <= n ; i ++ ) System . out . print ( div [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int n = 10 ; findDivisors ( n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; b [ i ] = s . charAt ( i ) - '0' ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == '0' ) { count ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == '0' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class GFG { static void printDistinct ( String str ) { int n = str . length ( ) ; int count [ ] = new int [ MAX_CHAR ] ; int index [ ] = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < n ; i ++ ) { char x = str . charAt ( i ) ; count [ x ] ++ ; if ( count [ x ] == 1 && x != ' ▁ ' ) index [ x ] = i ; if ( count [ x ] == 2 ) index [ x ] = n ; } int index = new int [ MAX_CHAR ] ; for ( int i = 0 ; i < MAX_CHAR ; i ++ ) { if ( index [ i ] == n ) break ; System . out . print ( str . charAt ( index [ i ] ) + " ▁ " ) ; } } public static void main ( String [ ] args ) { String str = " GeeksforGeeks " ; printDistinct ( str ) ; } }
public class GFG { static int calculate ( int x , int k , int m ) { int result = x ; k = k - 1 ; while ( k > 0 ) { result = ( x % m ) ; if ( result > m ) result = result % m ; k = k - 1 ; } return result ; } public static void main ( String [ ] args ) { int x = 5 , k = 2 ; int m = 3 ; System . out . println ( calculate ( x , k , m ) ) ; } }
public class GFG { static void converthenumber ( int n ) { String s = String . valueOf ( n ) ; int res = " " ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' || s . charAt ( i ) == '3' || s . charAt ( i ) == '5' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) res += s . charAt ( i ) ; if ( len ( res ) == 2 ) break ; } if ( res == 2 ) System . out . println ( res ) ; else System . out . println ( " - 1" ) ; } public static void main ( String [ ] args ) { int n = 18720 ; converthenAcceptumber ( n ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; String s = sc . next ( ) ; char [ ] c = s . toCharArray ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = c [ i ] ; } for ( int i = 0 ; i < 26 ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < 26 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int max1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max1 = arr [ i ] ; } } System . out . println ( max1 ) ; } } }
public class GFG { static int sn ( int n , int an ) { return ( n * ( 1 + an ) ) / 2 ; } static int trace ( int n , int an ) { int an = 1 + ( n - 1 ) * ( m + 1 ) ; int rowmajorSum = sn ( n , an ) ; an = 1 + ( n - 1 ) * ( n + 1 ) ; int colmajorSum = sn ( n , an ) ; return ( rowmajorSum + colmajorSum ) ; } public static void main ( String [ ] args ) { int N = 3 ; int M = 3 ; System . out . println ( trace ( N , M ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] [ ] arr = new int [ h ] [ w ] ; for ( int i = 0 ; i < h ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < h ; i ++ ) { for ( int j = 0 ; j < w ; j ++ ) { if ( arr [ i ] [ j ] == ' J ' ) { count ++ ; } else if ( arr [ i ] [ j ] == ' O ' ) { count ++ ; } else if ( arr [ i ] [ j ] == ' I ' ) { count ++ ; } } } System . out . println ( count ) ; } }
public class GFG { static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( i % k == 0 ) count ++ ; if ( ( n / i ) % k == 0 ) count ++ ; } } if ( ( i * i == n ) && ( i % k == 0 ) ) count ++ ; return count ; } public static void main ( String [ ] args ) { int n = 12 ; int k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } }
public class GFG { static int countDivisors ( int n , int k ) { int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 && i % k == 0 ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int n = 12 , k = 3 ; System . out . println ( countDivisors ( n , k ) ) ; } }
public class GFG { static int power ( int x , int y , int p ) { int res = 1 ; x = x % p ; while ( y > 0 ) { if ( y > 0 ) { res = ( res * x ) % p ; } y = y >> 1 ; x = ( x * x ) % p ; } return res ; } static int findModuloByM ( int X , int N , int M ) { if ( N < 6 ) { int temp = ( int ) ( Math . pow ( 10 , N / 2 ) ) * N ; res = ( temp * power ( 10 , N / 2 , M ) + temp ) % M ; return res ; } else { int half = find
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] p = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int [ ] q = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { q [ i ] = sc . nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( q [ i ] % 2 == 0 ) { dp [ i ] [ j ] = dp [ i ] [ j ] + p [ i ] ; dp [ i ] [ j ] = dp [ i ] [ j ] + p [ i ] ; } else { dp [ i ] [ j ] =
import java . io . * ; public class GFG { static int findMaxDiff ( int a [ ] , int n ) { if ( n < 2 ) { System . out . println ( " Invalid ▁ " ) ; return 0 ; } int min_val = Integer . MAX_VALUE ; int max_val = - Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] - i ) > max_val ) max_val = a [ i ] - i ; if ( ( a [ i ] - i ) < min_val ) min_val = a [ i ] - i ; } return ( max_val - min_val ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 9 , 15 , 4 , 12 , 13 } ; int n = arr . length ; System . out . println ( findMaxDiff ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] b = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { b [ i ] [ j ] = a [ i + 1 ] [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( b [ i ] [ j ] == 0 ) { System . out . println ( " NO " ) ; return ; } } } System . out . println ( " YES " ) ; } }
public class GFG { static int numberOfPaths ( int m , int n ) { int [ ] [ ] count = new int [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { count [ i ] [ 0 ] = 1 ; } for ( int j = 0 ; j < n ; j ++ ) { count [ i ] [ j ] = 1 ; } for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] ; } } return count [ m - 1 ] [ n - 1 ] ; } public static void main ( String [ ] args ) { int m = 3 ; int n = 3 ; System . out . println ( numberOfPaths ( m , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % n == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class GFG { static boolean isKthBitSet ( int n , int k ) { if ( ( n >> ( k - 1 ) ) & 1 ) return true ; return false ; } static int setKthBit ( int n , int l , int r ) { if ( ( ( n + 1 ) & n ) == 0 ) return true ; return false ; } static int bitsAreInAltOrder ( int n ) { if ( ( ( n + 1 ) & n
public class GFG { static int factorial ( int n ) { if ( n <= 1 ) return 1 ; return n * factorial ( n - 1 ) ; } static int nCr ( int n , int r ) { return ( n / ( factorial ( n - r ) * factorial ( r ) ) ) ; } static int NumberOfWays ( int n , int x , int y ) { return ( nCr ( 2 * n - x - y , n - x ) * factorial ( n ) * factorial ( n ) ; } public static void main ( String [ ] args ) { int n = 5 , x = 4 , y = 2 ; System . out . println ( NumberOfWays ( n , x , y ) ) ; } }
public class GFG { static String commonPrefixUtil ( String str1 , String str2 ) { int n1 = str1 . length ( ) ; int n2 = str2 . length ( ) ; int result = " " ; int j = 0 ; int i = 0 ; while ( i <= n1 - 1 && j <= n2 - 1 ) { if ( str1 . charAt ( i ) != str2 . charAt ( j ) ) break ; result += ( str1 . charAt ( i ) ) ; i ++ ; j ++ ; } return ( result ) ; } static String commonPrefix ( String arr [ ] , int n ) { String arr [ ] = new String [ n ] ; Arrays . sort ( arr ) ; System . out . println ( commonPrefixUtil ( arr , n ) ) ; return ( arr [ n - 1 ] ) ; } public static void main ( String [ ] args ) { String arr [ ] = { " geeksforgeeks " , " geeks " , " geek " , " geek " , " geek " , " geek " , " geek " , " geezer " } ; int n =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { ans += a [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { count ++ ; } } if ( count == 2 ) { System . out . println ( - 1 ) ; } else { System . out . println ( count ) ; } } }
import java . util . * ; public class GFG { static int compute ( int a , int b , int a + b ) { int a = 0 ; int b = 1 ; for ( int i = 0 ; i < 32 ; i ++ ) { a = a + b ; b = b + a + b ; } return Integer . toString ( a ) ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static void findFrequencyUtil ( int arr [ ] , int low , int high , int freq [ ] ) { if ( arr [ low ] == arr [ high ] ) { freq [ arr [ low ] ] ++ ; freq [ arr [ low ] ] ++ ; } else { int mid = ( low + high ) / 2 ; findFrequencyUtil ( arr , low , mid , freq ) ; findFrequencyUtil ( arr , mid + 1 , high , freq ) ; } } static void findFrequency ( int arr [ ] , int n ) { int freq [ ] = new int [ n ] ; findFrequencyUtil ( arr , n , freq , 0 , n - 1 , freq ) ; for ( int i = 0 ; i < arr [ n - 1 ] + 1 ; i ++ ) { if ( freq [ i ] != 0 ) System . out . print ( " Element " ) ; } } public static void main ( String [
import java . util . * ; public class GFG { static int eulerlib ; static int [ ] totients ; static int minnumer ; static int mindenom ; static int minnumer ; static int minnumer ; static int sorted ( int i ) { int totients [ ] = new int [ 10 * 10 ] ; int minnumer = 0 ; for ( int j = 0 ; j < 10 * 10 ; j ++ ) { if ( j * mindenom < minnumer * tot && sorted ( j ) == sorted ( j ) ) { minnumer = j ; mindenom = totients [ j ] ; } } return totients [ i ] ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static void intersection ( int a [ ] , int b [ ] , int n , int m ) { int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( a [ i ] > b [ j ] ) j ++ ; else if ( b [ j ] > a [ i ] ) i ++ ; else j ++ ; } if ( i == n ) { System . out . print ( a [ i ] + " ▁ " ) ; i ++ ; j ++ ; } } public static void main ( String [ ] args ) { int a [ ] = { 1 , 2 , 3 , 3 , 3 , 4 , 5 , 6 } ; int b [ ] = { 3 , 3 , 5 } ; int n = a . length ; int m = b . length ; intersection ( a , b , n , m ) ; } }
import java . io . * ; public class GFG { static int findMin ( int a [ ] , int n ) { int _sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) _sum += m . log ( a [ i ] ) ; int x = m . exp ( _sum / n ) ; return ( x + 1 ) ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 2 , 1 , 4 } ; int n = a . length ; System . out . println ( findMin ( a , n ) ) ; } }
import java . util . * ; public class GFG { static int lcmOfArray ( int arr [ ] , int n ) { if ( n < 1 ) return 0 ; int lcm = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) ; return lcm ; } static int minPerfectSquare ( int arr [ ] , int n ) { int lcm = lcmOfArray ( arr , n ) ; int minPerfectSq = ( lcm ) ;
public class GFG { static int subarrayCount ( int arr [ ] , int n ) { int result = 0 ; int fast = 0 ; int slow = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] == 1 ) fast ++ ; else { length = fast - slow + 1 ; result += length * ( length - 1 ) / 2 ; fast = i ; slow = i ; } } if ( fast != slow ) length = fast - slow + 1 ; return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 5 , 6 , 7 } ; int n = arr . length ; System . out . println ( subarrayCount ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class GFG { static int MAX_CHARS = 256 ; static int findSubString ( String str ) { int n = str . length ( ) ; if ( n <= 1 ) return str . charAt ( 0 ) ; int dist_count = 0 ; int curr_count [ ] = new int [ n ] ; int min_len = n ; for ( int j = 0 ; j < n ; j ++ ) { curr_count [ str . charAt ( j ) ] ++ ; if ( curr_count [ str
import
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { max = Math . max ( max , a [ i ] [ j ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { max = Math . max ( max , a [ i ] [ j ] ) ; } } System . out . println ( max ) ; } }
public class GFG { static int countPairs ( int arr [ ] , int n ) { int odd = 0 , even = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) even ++ ; else odd ++ ; } odd_pairs = odd * ( n - 1 ) ; even_pairs = even * ( n - 1 ) ; System . out . println ( odd_pairs ) ; System . out . println ( even_pairs ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 3 , 4 , 5 } ; int n = arr . length ; int countPairs ( arr , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < m ; i ++ ) { int minI = Math . min ( a [ i ] , b [ i ] ) ; int maxI = Math . max ( a [ i ] , b [ i ] ) ; if ( minI % 10 == 0 ) { max = Math . max ( max , minI / 10 ) ; min = minI / 10
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { count ++ ; } } if ( count == 0 ) { System . out . println ( - 1 ) ; } else { System . out . println ( count ) ; } } }
import java . io . * ; public class GFG { static boolean search ( int arr [ ] , int n , int x ) { int front = 0 ; back = n - 1 ; while ( back <= back ) { if ( arr [ back ] == x || arr [ back ] == x ) return true ; back -- ; } return false ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 80 , 30 , 50 , 110 , 100 , 130 , 170 } ; int x = 130 ; int n = arr . length ; if ( search ( arr , n , x ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static void countFreq ( int arr [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { System . out . print ( arr [ i ] + " ▁ " ) ; } else { System . out . print ( arr [ i ] + " ▁ " ) ; } } } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 20 , 20 , 10 , 20 , 5 , 20 } ; int n = arr . length ; countFreq ( arr , n ) ; } }
import java . util . * ; public class GFG { static int MinCostTree ( int arr [ ] , int n ) { int ans = 0 ; int st [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { while ( st [ i ] <= arr [ i ] ) { int x = st [ i ] ; st [ i ] = st [ i - 1 ] ; st [ i ] = arr [ i ] ; } st . append ( arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) ans += st [ i ] * st [ i - 1 ] ; return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 2 , 3 } ; int n = arr . length ; System . out . println ( MinCostTree ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } int [ ] ans = new int [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) { ans [ arr [ i ] ] = 0 ; } for ( int i = 0 ; i < n ; i ++ ) { int c = 0 ; for ( int j = 0 ; j < 26 ; j ++ ) { if (
public class GFG { static void findEquation ( int a , int b ) { int sum = ( a + b ) ; int product = ( a * b ) ; System . out . println ( " x ^ 2 ▁ - ▁ ( " + sum + " , " + product + " ) ▁ = ▁ 0" ) ; } public static void main ( String [ ] args ) { int a = 2 , b = 3 ; findEquation ( a , b ) ; } }
public class GFG { static void circle_equation ( int x1 , int y1 , int r ) { int a = - 2 * x1 ; int b = - 2 * y1 ; int c = ( r * r ) - ( x1 * x1 ) - ( y1 * y1 ) ; System . out . print ( " x ^ 2 ▁ + ▁ + ▁ ( " , " + a + " x ) ▁ + ▁ " + " ▁ " + end = " " ) ; System . out . print ( " y ^ 2 ▁ + ▁ + ▁ ( " , b , " y ) ▁ = ▁ " + end = " " ) ; System . out . print ( c + " . ▁ " ) ; } public static void main ( String [ ] args ) { int x1 = 2 , y1 = - 3 ; int r = 8 ; circle_equation ( x1 , y1 , r ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = 0 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != a [ i + 1 ] ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; int n = s . length ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ s . charAt ( i ) - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( arr [ j ] == 0 ) { System . out . print ( " that ▁ " + i + " \n " ) ; break ; } } } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static void findNature ( int a , int b , int n ) { if ( n == 0 ) return ; if ( ( n & 1 ) == 0 ) return ; if ( ( n & 1 ) == 0 ) { if ( ( b & 1 ) == 0 ) return ; else False ; } else { if ( ( n - 1 ) % 3 != 0 ) { if ( ( b & 1 ) == 0 ) return ; else False ; } else False = true ; } } public static void main ( String [ ] args ) { int a = 2 , b = 4 ; findNature ( a , b , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; if ( d == 0 && e == 0 ) break ; int [ ] [ ] dp = new int [ 100 ] [ 100 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < 100 ; i ++ ) { for ( int j = 1 ; j < 100 ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 1 ; j < 100 ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) continue ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; } } for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) continue ; dp [ i ] [ j ] = dp [ i ] [ j ] + dp [ i ] [ j - 1 ] ; } } for ( int i = 0 ; i < 100 ; i ++ ) { for ( int j = 0 ; j < 100 ; j ++ ) { if ( dp [ i
public class GFG { static int max_sum ( int a [ ] , int n ) { int dp [ ] = new int [ n ] ; if ( n == 1 ) dp [ 0 ] = max_sum ( 0 , a [ 0 ] ) ; else if ( n == 2 ) dp [ 0 ] = max ( 0 , a [ 0 ] ) ; else if ( n == 3 ) dp [ 0 ] = max ( 0 , a [ 0 ] ) ; else if ( n >= 3 ) dp [ 0 ] = max ( 0 , a [ 0 ] ) ; else dp [ 1 ] = max ( a [ 1 ] , max ( 0 , a [ 0 ] ) ) ; int i = 3 ; while ( i < n ) dp [ i ] = max ( dp [ i - 1 ] , a [
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int i = 0 ; while ( true ) { if ( s . charAt ( i ) == ' ▁ ' ) { i ++ ; break ; } else if ( s . charAt ( i ) == ' ? ' ) { i ++ ; break ; } else if ( s . charAt ( i ) == ' ? ' ) { i ++ ; break ; } else if ( s . charAt ( i ) == ' ? ' ) { i ++ ; break ; } else { i ++ ; } } if ( s . charAt ( i ) == ' ? ' ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
import java . util . * ; public class GFG { static int minimumX ( int n , int k ) { int mini = Integer . MAX_VALUE ; int i = 1 ; while ( i * i <= n ) { if ( n % i == 0 ) { int fir = i ; int sec = n / i ; int num1 = fir * k + sec ; int res = ( num1 / k ) * ( num1 % k ) ; if ( res == n ) mini = Math . min ( num1 , mini ) ; num2 = sec * k + fir ; res = ( num2 / k ) * ( num2 % k ) ; if ( res == n ) mini = Math . min ( num2 , mini ) ; } i ++ ; } return mini ; } public static void main ( String [ ] args ) { int n = 4 ; int k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 ; k = 5 ; System . out . println ( minimumX ( n , k ) ) ; } }
import
public class GFG { static int SellingPrice ( int CP , int PP ) { int Pdecimal = 1 + ( P / 100 ) ; int res = Pdecimal * P ; return res ; } public static void main ( String [ ] args ) { int C = 720 ; int P = 13 ; System . out . println ( SellingPrice ( C , P ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = arr [ i ] ; } int [ ] arr3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr3 [ i ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] < arr3 [ i ] ) { System . out . print ( 1 + " ▁ " ) ; } else { System . out . print ( 0 + " ▁ " ) ; } } System . out . println ( ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int s = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; if ( x == s ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; if ( x > y ) { ans = Math . max ( ans , Math . max ( x , y ) ) ; } else { ans = Math . max ( ans , Math . max ( x , y ) ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void check ( int n , int m ) { if ( m % n == 0 ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 10 ; check ( n , m ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a < b ) { System . out . println ( b - a ) ; } else if ( a > b ) { System . out . println ( b - a ) ; } else { System . out . println ( 0 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; String s = sc . next ( ) ; String [ ] arr = s . split ( " " ) ; int [ ] [ ] arr = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = Integer . parseInt ( arr [ i ] ) ; } for ( int i = 0 ; i < m ; i ++ ) { int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; arr [ x ] [ y ] = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == 1 ) { System . out . print ( " ▁ " ) ; } else { System . out . print ( arr [ i ] [ j ] + " ▁ " ) ; } } System . out . println ( ) ; } } }
public class GFG { static int findNthOccur ( String str , char ch , int N ) { int occur = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == ch ) occur ++ ; if ( occur == N ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { String str = " geeks " ; char ch = ' e ' ; int N = 2 ; System . out . println ( findNthOccur ( str , ch , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { count ++ ; } } if ( count == 0 ) { System . out . println ( " Elephant " ) ; } else { System . out . println ( " Bear " ) ; } } }
import java . util . * ; public class GFG { static int LIMIT = Library . pow ( 10 , 15 ) ; static int [ ] [ ] split_at ; static int [ ] [ ] sum_squares ( int s , int e ) { return ( e * ( e + 1 ) * ( e * 2 + 1 ) - s * ( s * 2 + 1 ) ) / 6 ; } static int sum ( int s , int e ) { return ( s * ( e + 1 ) * ( e * 2 + 1 ) - s * ( s * 2 + 1 ) ) / 6 ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int z = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; int max = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == i + 1 ) { count ++ ; } } if ( count == n ) { System . out . println ( 0 ) ; } else { System . out . println ( count - 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] x = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { x [ i ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( x [ i ] ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += Math . abs ( a [ i ] - a [ i + 1 ] ) ; } if ( sum % 10 != 0 ) { System . out . println ( sum / 10 ) ; } else { System . out . println ( sum / 10 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x3 = sc . nextInt ( ) ; int y3 = sc . nextInt ( ) ; int ans = 0 ; if ( x1 == x2 && y1 == y2 && x3 == x3 && y3 == y2 && x1 == x2 && y1 == y2 ) { ans ++ ; } else if ( x1 == x2 && y1 == y2 && x3 == x3 && y3 == y2 && x1 == x2 && y1 == y2 ) { ans ++ ; } else if ( x1 == x2 && y1 == y2 && x3 == y3 && y1 == y2 ) { ans ++ ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static boolean isPalindrome ( String s ) { int l = s . length ( ) ; for ( int i = 0 ; i < l / 2 ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( l - 1 - i ) ) return false ; } return true ; } static String createStringAndCheckPalindrome ( int N ) { int sub = " " + chr ( N ) ; int res_str = " " ; int sum = 0 ; while ( N > 0 ) { int digit = N % 10 ; sum += digit ; N = N / 10 ; } while ( len ( res_str ) < sum ) res_str += sub ; if ( len ( res_str ) > sum ) res_str = res_str [ 0 ] ; if ( isPalindrome ( res
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( count == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int sum_even_and_even_index ( int arr [ ] , int n ) { int i = 0 ; int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) sum += arr [ i ] ; } return sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 6 , 12 , 1 , 18 , 8 } ; int n = arr . length ; System . out . println ( " Sum ▁ of ▁ even ▁ numbers ▁ at ▁ " + " even ▁ indices ▁ is ▁ " + sum_even_and_even_index ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { String s = sc . next ( ) ; if ( s . length ( ) == 1 ) { System . out . println ( " NO " ) ; continue ; } boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static void printDuplicates ( int arr [ ] , int n ) { int fl = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ arr [ i ] % n ] >= n ) { if ( arr [ arr [ i ] % n ] < 2 * n ) { System . out . print ( arr [ i ] % n , end = " ▁ " ) ; fl = 1 ; } } arr [ arr [ i ] % n ] += n ; } if ( fl == 0 ) System . out . print ( " - 1" ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 6 , 3 , 1 , 3 , 6 } ; int arr_size = arr . length ; printDuplicates ( arr , arr_size ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { sum = sum + i ; if ( sum > n ) { System . out . println ( sum ) ; break ; } } } }
public class GFG { static int Sum ( int n ) { return n * ( n + 1 ) * ( n + 2 ) / 3 ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( Sum ( n ) ) ; } }
import java . io . * ; public class GFG { static int maxHandshake ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( maxHandshake ( n ) ) ; } }
import java . io . * ; public class GFG { static int grayCode ( int n ) { return n ^ ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( grayCode ( n ) ) ; } }
public class GFG { static int Max_Sum ( int n ) { return ( n * ( n - 1 ) ) / 2 ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( Max_Sum ( n ) ) ; } }
public class GFG { static int possibleways ( int n ) { if ( n % 2 == 1 ) return 0 ; else if ( n % 4 == 0 ) return n / 4 - 1 ; else return n / 4 ; } public static void main ( String [ ] args ) { int n = 20 ; System . out . println ( possibleways ( n ) ) ; } }
public class GFG { static int CountSetBits ( int n ) { if ( n == 0 ) return 0 ; if ( ( n & 1 ) == 1 ) return 1 + CountSetBits ( n >> 1 ) ; else return CountSetBits ( n >> 1 ) ; } public static void main ( String [ ] args ) { int n = 21 ; System . out . println ( CountSetBits ( n ) ) ; } }
import java . io . * ; public class GFG { static int summ ( int m , int n ) { return 8 * m * n - 6 * m - 6 * n + 4 ; } public static void main ( String [ ] args ) { int m = 3 ; int n = 2 ; System . out . println ( summ ( m , n ) ) ; } }
public class GFG { static int SUM ( int n , int m ) { if ( m == 1 ) return ( n * ( n + 1 ) / 2 ) ; else if ( m == 1 ) return ( n * ( n + 1 ) / 2 ) ; else return ( int ) ( ( ( ( ( n + 1 ) / 2 ) - 1 ) ) * ( ( ( ( n + 1 ) / 2 ) - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 3 ; System . out . println ( " SUM ( " + n + " , ▁ " + m + " , ▁ " + m ) ) ; } }
public class GFG { static int maxLCM ( int n ) { return ( n * ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( maxLCM ( n ) ) ; } }
import java . io . * ; public class GFG { static int findSum ( int n ) { return ( ( n * ( n + 1 ) * ( n + 2 ) ) / 12 ) ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( findSum ( n ) ) ; } }
import java . io . * ; public class GFG { static int cntWays ( int n ) { if ( n % 2 == 1 ) return 0 ; else return ( n - 2 ) / 4 ; } public static void main ( String [ ] args ) { int n = 18 ; System . out . println ( cntWays ( n ) ) ; } }
public class GFG { static void find_composite_nos ( int n ) { System . out . println ( 9 * n + " ▁ 8 * n ) ; } public static void main ( String [ ] args ) { int n = 4 ; find_composite_nos ( n ) ; } }
import java . io . * ; public class GFG { static int findThirdDigit ( int n ) { if ( n < 3 ) return 0 ; return 1 if ( n <= 3 ) return 1 ; return 6 ; } public static void main ( String [ ] args ) { int n = 7 ; System . out . println ( findThirdDigit ( n ) ) ; } }
public class GFG { static int countMaxIntersect ( int n ) { return ( n * ( n - 1 ) / 2 ) ; } public static void main ( String [ ] args ) { int n = 8 ; System . out . println ( countMaxIntersect ( n ) ) ; } }
import java . io . * ; public class GFG { static int sum ( int n ) { if ( n == 1 ) return 2 ; else return ( n * ( n + 1 ) + sum ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 2 ; System . out . println ( sum ( n ) ) ; } }
public class GFG { static int highestPowerOf2 ( int n ) { return ( n & ( ~ ( n - 1 ) ) ) ; } public static void main ( String [ ] args ) { int n = 48 ; System . out . println ( highestPowerOf2 ( n ) ) ; } }
import java . io . * ; public class GFG { static int countIntersections ( int n ) { return n * ( n - 1 ) / 2 ; } public static void main ( String [ ] args ) { int n = 3 ; System . out . println ( countIntersections ( n ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' a ' || s . charAt ( i ) == ' z ' ) { System . out . println ( s . charAt ( i ) ) ; return ; } } System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; int min = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( a [ i ] / min != a [ i - 1 ] / min ) { min = a [ i - 1 ] / min ; } } System . out . println ( min ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; if ( a < 1200 ) { System . out . println ( " ABC " ) ; } else { System . out . println ( " ARC " ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n
public class GFG { static int smallest ( int x , int y , int z ) { int c = 0 ; while ( x > 1 && y > 0 ) { x = x - 1 ; y = y - 1 ; z = z - 1 ; c ++ ; } return c ; } public static void main ( String [ ] args ) { int x = 12 , y = 15 ; int z = 5 ; System . out . println ( " Minimum ▁ of ▁ 3 ▁ numbers ▁ is ▁ " + smallest ( x , y , z ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; public class Main { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int a = fs . nextInt ( ) ; int b = fs . nextInt ( ) ; int c = fs . nextInt ( ) ; int d = fs . nextInt ( ) ; int e = fs . nextInt ( ) ; int f = fs . nextInt ( ) ; int res = 0 ; if ( a + b * 5 + c * 10 + d * 50 + e * 100 + f * 500 + f * 100 + f * 500 ) { res = 1 ; } else { res = 0 ; } System . out . println ( res ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int m = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { ans += 2 * ( r - 1 ) * ( i - 1 ) ; } System . out . println ( ans / ( m * m ) ) ; } }
import java . io . * ; public class GFG { static int countCubes ( int a , int b ) { return
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int d = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( d == 0 && n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ d ] ; for ( int i = 0 ; i <
import java . util . * ; public class GFG { static int triangle = 0 ; static int triangle = 0 ; static int num_divisors ( int triangle ) { int triangleNum = triangle ; while ( triangleNum > 0 ) { triangleNum -- ; if ( triangleNum > 500 ) return triangle ; } triangle += triangleNum ; triangleNum -- ; } static int num_divisors ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; if ( n % i == 0 ) result -= 1 ; } return result ; } static int num_divisors ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; if ( n % i == 0 ) result -= 1 ; } return result ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static int findDelta ( int a , int b , int c , int d ) { return ( ( b * c - a * d ) / ( d - c ) ) ; } public static void main ( String [ ] args ) { int a = 3 , b = 9 , c = 3 ; System . out . println ( " \u0394 X ▁ = ▁ " + findDelta ( a , b , c , d ) ) ; } }
import java . util . * ; public class GFG { static void SieveOfEratosthenes ( int n , boolean isPrime [ ] ) { boolean isPrime [ ] = new boolean [ n + 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) isPrime [ i ] = true ; for ( int i = 2 ; i <= n ; i ++ ) { isPrime [ i ] = false ; } for ( int i = 0 ; i <= n ; i ++ ) { if ( isPrime [ i ] && isPrime [ n - i ] ) System . out . print ( i + " ▁ " + ( n - i ) ) ; } } static void findPrimePair ( int n ) { boolean isPrime [ ] = new boolean [ n + 1 ] ; SieveOfEratosthenes ( n , isPrime ) ; for ( int i = 0 ; i <= n ; i ++ ) { if ( isPrime [ i ] && isPrime [ n - i ] ) System . out . print ( i + " ▁ " +
public class GFG { static int replaceDigit ( int x , int d1 , int d2 ) { int result = 0 ; int multiply = 1 ; while ( x % 10 > 0 ) { int remainder = x % 10 ; if ( remainder == d1 ) result = ( result + d2 * multiply ) ; else result = ( result + remainder * multiply ) ; multiply *= 10 ; x = ( x / 10 ) ; } return result ; } public static void main ( String [ ] args ) { int x = 645 ; int d1 = 6 ; int d2 = 5 ; System . out . println ( replaceDigit ( x , d1 , d2 ) ) ; } }
public class GFG { static void printPattern ( int i , int j , int n ) { if ( j >= n ) return ; if ( i >= n ) return 1 ; if ( j == i || j == n - 1 - i ) { if ( i == n - 1 - j ) System . out . print ( " / " ) ; else System . out . print ( " \ " ) ; } else System . out . print ( " * " ) ; if ( printPattern ( i , j + 1 , n ) == 1 ) return 1 ; System . out . print ( " / " ) ; if ( printPattern ( i + 1 , j + 1 , n ) == 1 ) return 1 ; System . out . print ( " * " ) ; if ( printPattern ( i + 1 , j + 1 , n ) == 1 ) return 1 ; System . out . print ( " / " ) ; if ( printPattern ( i + 1 , j + 1 , n ) == 1 ) return 1 ; System . out . print ( " / " ) ; if ( printPattern ( i + 1 , j + 1 , n ) == 1 ) return 1 ; System . out . print ( " / " ) ; if ( printPattern ( i + 1 ,
import java . io . * ; public class GFG { static int getPairsCount ( int arr [ ] , int n , int sum ) { int m [ ] = new int [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) m [ arr [ i ] ] = 0 ; int twice_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) twice_count += m [ sum - arr [ i ] ] ; int twice_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) twice_count += m [ sum - arr [ i ] ] ; return ( twice_count / 2 ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 7 , - 1 , 5 } ; int n = arr . length ; int sum = 6 ; System . out . println ( " Count ▁ of ▁ pairs ▁ is ▁ " + getPairsCount ( arr , n , sum ) ) ; } }
public class GFG { static int Count_subarray ( int arr [ ] , int n ) { int subarray_sum = 0 , remaining_sum = 0 ; int count = 0 , 0 , 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { subarray_sum += arr [ j ] ; } for ( int l = i ; l < n ; l ++ ) remaining_sum += arr [ l ] ; for ( int l = 0 ; l < j ; l ++ ) remaining_sum += arr [ l ] ; if ( subarray_sum > remaining_sum ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 9 , 12 , 6 } ; int n = arr . length ; System . out . println ( Count_subarray ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int ans = Math . abs ( Math . abs ( a - b ) ) ; if ( ans < n - 1 ) System . out . println ( n - 1 ) ; else System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += sc . nextInt ( ) ; } if ( sum % 10 != 0 ) { System . out . println ( sum ) ; } else { System . out . println ( sum / 10 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } } int ans = max - min ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math . min ( ans , arr [ i ] ) ; } System . out . println ( ans ) ; } } }
import java . util . * ; public class GFG { static int findRepeatingNumber ( int arr [ ] , int n ) { int sq = ( int ) Math . sqrt ( n ) ; int range__ = ( int ) Math . pow ( n / sq , 1 ) ; int count [ ] = new int [ n ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) count [ arr [ i ] / sq ] ++ ; int selected_block = range__ - 1 ; for ( int i = 0 ; i <
public class GFG { static int maxPrimeFactors ( int n ) { int maxPrime = - 1 ; while ( n % 2 == 0 ) { maxPrime = 2 ; n >>= 1 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { maxPrime = i ; n = n / i ; } } if ( n > 2 ) maxPrime = n ; return maxPrime ; } public static void main ( String [ ] args ) { int n = 15 ; System . out . println ( maxPrimeFactors ( n ) ) ; n = 25698751364526 ; System . out . println ( maxPrimeFactors ( n ) ) ; n = 25698751364526 ; System . out . println ( maxPrimeFactors ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { min = Math . min ( min , arr [ i ] ) ; } } System . out . println ( min ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '0' ) { count ++ ; } } System . out . println ( Math . min ( count , s . length ( ) ) * 2 ) ; } }
public class GFG { static void pythagoreanTriplet ( int n ) { for ( int i = 1 ; i <= n / 3 ; i ++ ) { for ( int j = i + 1 ; j <= n / 2 ; j ++ ) { int k = n - i - j ; if ( i * i + j * j == k * k ) { System . out . print ( i + " , ▁ " + j + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ " + k + " , ▁ "
import java . io . * ; public class GFG { static int countDigits ( int a , int b ) { if ( a == 0 || b == 0 ) return 1 ; return Math . floor ( Math . log10 ( Math . abs ( a ) ) + Math . log10 ( Math . abs ( b ) ) + 1 ) ; } public static void main ( String [ ] args ) { int a = 33 , b = - 24 ; System . out . println ( countDigits ( a , b ) ) ; } }
public class GFG { static int indexOfFirstOne ( int arr [ ] , int low , int high ) { while ( low <= high ) { int mid = ( low + high ) / 2 ; if ( arr [ mid ] == 1 && ( mid == 0 || arr [ mid - 1 ] == 0 ) ) break ; else if ( arr [ mid ] == 1 ) high = mid - 1 ; else low = mid + 1 ; } return mid ; } static int posOfFirstOne ( int arr [ ] , int l , int h ) { int l = 0 , h = 1 ; while ( arr [ h ] == 0 ) l = h ; return posOfFirstOne ( arr , l , h ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 0 , 0 , 1 , 1 , 1 , 1 } ; int arr [ ] = { 0 , 0 , 1 , 1 , 1 , 1 } ; int arr1 [ ] = { 0 , 0 , 1 , 1 , 1 , 1 } ; int arr2 [ ] = { 0 , 0 , 1 , 1 , 1 , 1 } ; int arr3 [ ] = { 0 , 0 , 1 , 1 , 1 , 1 } ; int arr4 [ ] = {
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; if ( n % 3 == 0 ) { System . out . println ( n / 3 * 2 ) ; } else if ( n % 3 == 1 ) { System . out . println ( n / 3 * 2 + 1 ) ; } else { System . out . println ( n / 3 * 2 + 1 ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = b [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( c [ i ] + " ▁ " ) ; } System . out . println ( ) ; } } }
public class GFG { static int digSum ( int n ) { int sum = 0 ; int rem = 0 ; while ( n > 0 ) { rem = n % 10 ; sum = sum + rem ; n = n / 10 ; } return sum ; } static int findX ( int n ) { for ( int i = n + 1 ; i < n ; i ++ ) { if ( i + digSum ( i ) == n ) return i ; } return - 1 ; } public static void main ( String [ ] args ) { int n = 43 ; System . out . println ( " x ▁ = ▁ " + findX ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] p = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] > max ) { max = p [ i ] ; } } System . out . println ( n - max ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; ans += a - b ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static void performQueries ( int A [ ] , int q ) { int n = A . length ; int pref_xor [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { int L = i . length ; int R = i . 1 ; if ( L > R ) L = R ; if ( L != R && pref_xor [ R ] == pref_xor [ L - 1 ] ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } } public static void main ( String [ ] args ) { int A [ ] = { 1 , 1 , 2 , 2 , 1 } ; int q = { 1 , 5 , 1 , 4 } ; performQueries ( A , q ) ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] = dp [ i + 1 ] + a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( dp [ i ] ) ; } } }
import java . util . * ; public class GFG { static void main ( String [ ] args ) { int num = 3 ; int lterm = 1 ; int rterm = num * num + 1 ; for ( int i = 0 ; i < num ; i ++ ) { for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( " ▁ " ) ; } for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( " * " ) ; } for ( int j = 1 ; j <= i ; j ++ ) { System . out . print ( " * " ) ; } } } }
import java . util . * ; public class GFG { static void findPerm ( int n , int [ ] [ ] arr ) { int ans = new int [ n ] [ ] ; int x = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { int diff = arr [ i ] ; x = x + diff ; ans = ans + ( x ) ; } ans = ans + ( 2 ) ; arr [ n ] = new int [ n ] ; Arrays . fill ( arr , - 3 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i - 1 ]
public class GFG { static int countPrimeFactors ( int n ) { int count = 0 ; while ( n % 2 == 0 ) { n = n / 2 ; count ++ ; } int i = 3 ; while ( i <= Math . sqrt ( n ) ) { while ( n % i == 0 ) { n = n / i ; count ++ ; } i = i + 2 ; } if ( n > 2 ) count ++ ; return ( count ) ; } static void printKAlmostPrimes ( int k , int n ) { int i = 1 ; int num = 2 ; while ( i <= n ) { if ( countPrimeFactors ( num ) == k ) System . out . print ( num + " ▁ " + n + " ▁ " + n ) ; else
import java . io . * ; public class GFG { static int solve ( int N , int K ) { int [ ] combo = new int [ N + 1 ] ; for ( int i = 1 ; i <= K ; i ++ ) { for ( int j = 0 ; j <= N ; j ++ ) { if ( j >= i ) { combo [ j ] += combo [ j - i ] ; } } } return combo [ N ] ; } public static void main ( String [ ] args ) { int N = 29 , K = 5 ; System . out . println ( solve ( N , K ) ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { String s = sc . next ( ) ; if ( s . equals ( "0" ) ) break ; int [ ] [ ] map = new int [ 26 ] [ s . length ( ) ] ; for ( int i = 0 ; i < 26 ; i ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { map [ s . charAt ( j ) - ' a ' ] ++ ; } } int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( map [ s . charAt ( i ) - ' a ' ] == 0 ) { count ++ ; } } int ans = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( count % map [ i ] == 0 ) { ans += map [ i ] [ s . charAt ( i ) - ' a ' ] ; count = 0 ;
import java . io . * ; public class GFG { static int __g ( int a , int b ) { int n = ( int ) Math . sqrt ( ( Math . abs ( a ) * Math . abs ( b ) ) + ( Math . abs ( n ) * Math . abs ( n ) ) ) ; return n ; } public static void main ( String [ ] args ) { int m = - 5 ; int n = 3 ; System . out . println ( __g ( m , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int h = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) { ans += ( h * arr [ i ] ) ; } System . out . println ( ans ) ; } }
public class GFG { static int countBits ( int n ) { int count = 0 ; while ( n > 0 ) { count += 1 ; n >>= 1 ; } return count ; } public static void main ( String [ ] args ) { int i = 65 , count = 0 ; while ( n > 0 ) { count += 1 ; n >>= 1 ; } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int h = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int f = sc . nextInt ( ) ; int g = sc . nextInt ( ) ; int h1 = h * w ; int h2 = ( h * w ) ; int w1 = w * b ; int h3 = ( h * b ) ; int w2 = ( w * b ) ; int h4 = ( h * b ) ; int h5 = ( w * b ) ; int w3 = ( h * b ) ; int h6 = ( w * b ) ; int w4 = ( w * b ) ; int h7 = ( w * b ) ; int h8 = ( h * b ) ; int h9 = ( w * b ) ; int h10 = ( h * b ) ; int h11 = ( w * b ) ; int h12 = ( w * b ) ; int h13 = ( w * b ) ; int h14 = ( w * b ) ; int h15 = ( h * b ) ; int h16 = ( w * b ) ; int h17 = ( h * b ) ; int h18 = ( w * b ) ; int h19 = ( w * b ) ; int h20 = ( h * b ) ; int h21 = ( w * b ) ; int w22 = ( w * b ) ; int w23 = ( w * b ) ; int w24 = ( w * b ) ; int w25 = ( w * b ) ; int w26 = ( w * b ) ; int w27 = ( w * b ) ; int w28 = ( w * b ) ; int w29 =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % arr [ n - 1 ] == 0 ) { max = arr [ n - 1 ] ; } } System . out . println ( max ) ; } }
public class GFG { static long LongestSubarray ( int arr [ ] , int n , int k ) { long arr2 [ ] = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr2 [ i ] = arr [ i ] % k ; long max_length = 0 ; i = 0 ; while ( i < n ) { int current_length = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr2 [ j ] == arr2 [ i ] ) current_length ++ ; else break ; } max_length = Math . max ( max_length , current_length ) ; i = j ; i ++ ; } return max_length ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 9 , 7 , 18 , 29 , 11 } ; int n = arr . length ; int k = 11 ; System . out . println ( LongestSubarray ( arr , n , k ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = m - 1 ; if ( n == 1 ) { ans = 1 ; } else if ( n == 1 ) { ans = 0 ; } else { ans = n - 1 ; } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static boolean isHeterogram ( String s , int n ) { int hash [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) != ' ▁ ' ) { if ( hash [ ( s . charAt ( i ) - ' a ' ) ] == 0 ) hash [ ( s . charAt ( i ) - ' a ' ) ] = 1 ; else return false ; } } return true ; } public static void main ( String [ ] args ) { String s = " the ▁ big ▁ dwarf ▁ only ▁ jumps " ; int n = s . length ( ) ; System . out . println ( " YES " ) ; if ( isHeterogram ( s , n ) ) System . out . println ( " YES " ) ; else System . out . println ( " NO " ) ; } }
import java . util . * ; public class GFG { static int MAX = 1001 ; static int [ ] arr = new int [ MAX ] ; static void compute ( ) { arr [ 0 ] = MAX ; arr [ 1 ] = MAX ; } static void compute ( ) { int temp = MAX ; for ( int i = 0 ; i < MAX ; i ++ ) { temp = arr [ i ] ; if ( temp > MAX ) { MAX = temp ; } } } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
public class GFG { static boolean FindPoint ( int x1 , int y1 , int x2 , int y2 , int x , int y ) { if ( x > x1 && x < x2 && y < y2 ) return true ; else return false ; } public static void main ( String [ ] args ) { int x1 , y1 , x2 , y2 , x = 1 , y = 5 ; if ( FindPoint ( x1 , y1 , x2 , y2 , x , y ) == true ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x = sc . nextInt ( ) ; int y = sc . nextInt ( ) ; int sum = 0 ; while ( x <= y ) { sum += x ; x *= 2 ; } System . out . println ( sum ) ; } }
public class GFG { static int countSticks ( String str , int n ) { int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) cnt += ( str . charAt ( i ) - '0' ) ; return cnt ; } public static void main ( String [ ] args ) { String str = "56" ; int n = str . length ( ) ; System . out . println ( countSticks ( str , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( max ) ; for ( int i = 0 ; i < n ; i ++ ) { System . out . print ( arr [ i ] + " ▁ " ) ; } System . out . println ( ) ; } } }
import java . util . * ; public class GFG { static void process ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { arr [ k ] ^= 1 ; arr [ k ] ^= 1 ; } } static void result ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { System . out . print ( arr [ k ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int n = 5 ; int m = 3 ; int arr [ ] = { 0 , 0 , 0 } ; int command ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { arr [ k ] ^= 1 ; } } int result ( int arr [ ] , int n ) { for ( int k = 1 ; k <= n ; k ++ ) { System . out . print ( arr [ k ] + " ▁ " ) ; } } } }
public class GFG { static int mostFrequent ( int arr [ ] , int n ) { Arrays . sort ( arr ) ; int max_count = 1 ; int curr_count = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++ ; else if ( curr_count > max_count ) max_count = curr_count ; curr_count = 1 ; } if ( curr_count > max_count ) max_count = curr_count ; return max_count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 5 , 2 , 1 , 3 , 2 , 1 } ; int n = arr . length ; System . out . println ( mostFrequent ( arr , n ) ) ; } }
public class GFG { static int MAX = 26 ; static int maxLength ( String str , int len ) { int res = 0 ; int lastPos [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) lastPos [ i ] = - 1 ; for ( int i = 0 ; i < len ; i ++ ) { C = str . charAt ( i ) - ' a ' ; if ( lastPos [ C ] != - 1 ) res = Math . max ( len - ( i - lastPos [ C ] - 1 ) - 1 , res ) ; lastPos [ C ] = i ; } return res ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; len = str . length ( ) ; System . out . println ( maxLength ( str , len ) ) ; } }
public class GFG { static int MAX = 1000000 ; static int ksmallest ( int arr [ ] , int n , int k ) { int b [ ] = new int [ MAX ] ; for ( int i = 0 ; i < n ; i ++ ) b [ arr [ i ] ] = 1 ; for ( int j = 1 ; j < MAX ; j ++ ) { if ( b [ j ] != 1 ) k -- ; if ( k != 1 ) return j ; } k = 1 ; arr = ( 1 ) ; n = arr . length ; System . out . println ( ksmallest ( arr , n , k ) ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 } ; int n = arr . length ; System . out . println ( ksmallest ( arr , n , k ) ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n + ( d * 13 ) ) ; } return ( n % 43 == 0 ) ; } public static void main ( String [ ] args ) { int N = 2795 ; if ( isDivisible ( N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 14 ) ) ; } return ( n % 47 == 0 ) ; } public static void main ( String [ ] args ) { int n = 59173 ; if ( isDivisible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 3 ) ) ; } return ( n % 31 == 0 ) ; } public static void main ( String [ ] args ) { int n = 1922 ; if ( isDivisible ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isDivisible ( int n ) { while ( n / 100 != 0 ) { int d = n % 10 ; n /= 10 ; n = Math . abs ( n - ( d * 7 ) ) ; } return ( n % 71 == 0 ) ; } public static void main ( String args [ ] ) { int N = 5041 ; if ( isDivisible ( N ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static int Odd_Sum ( int n ) { int total = ( n + 1 ) / 2 ; int even_sum = Odd_Sum ( R ) - Odd_Sum ( L - 1 ) ; int odd_sum = even_sum * ( total + 1 ) ; return even_sum - odd_sum ; } static int sumLtoR ( int L , int R ) { int total = ( n + 1 ) / 2 ; int even_sum = Even_Sum ( R ) - Even_Sum ( L - 1 ) ; return even_sum - odd_sum ; } public static void main ( String [ ] args ) { int L = 1 , R = 5 ; System . out . println ( sumLtoR ( L , R ) ) ; } }
public class GFG { static boolean isRatioPossible ( int lowCost , int upCost , int lowQuant , int upQuant , int r ) { for ( int i = lowCost ; i <= upCost ; i ++ ) { int ans = i * r ; if ( lowCost <= ans && ans <= upCost ) return true ; } return false ; } public static void main ( String [ ] args ) { int lowCost = 14 , upCost = 30 ; int lowQuant = 12 , upQuant = r ; if ( isRatioPossible ( lowCost , upCost , lowQuant , upQuant , r ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . io . * ; public class GFG { static int Log2 ( int x ) { if ( x == 0 ) return 0 ; return ( int ) Math . log10 ( x ) / Math . log10 ( 2 ) ; } static boolean isPowerOfTwo ( int n ) { return ( ( Math . ceil ( Math . log10 ( n ) ) == Math . floor ( Math . log10 ( 2 ) ) ) ; } public static void main ( String [ ] args ) { int x = Log2 ( 1 ) ; if ( isPowerOfTwo ( 31 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; if ( isPowerOfTwo ( 64 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; if ( isPowerOfTwo ( 64 ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int LIMIT = 50000000 ; static Vector < Integer > primes = new Vector < Integer > ( ) ; static void compute ( ) { int LIMIT = 50000000 ; int [ ] counts = new int [ LIMIT ] ; for ( int i = 2 ; i <= LIMIT ; i ++ ) { int newsums = 0 ; for ( int p = 0 ; p < primes . size ( ) ; p ++ ) { int q = p * p ; if ( q > LIMIT ) break ; for ( int x = 0 ; x + q <= LIMIT ; x ++ ) { int x = x + q ; if ( x + q <= LIMIT ) { newsums . add ( x + q ) ; } } } counts = newsums ; } int sums = newsums ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class GFG { static long longLenSub ( int arr [ ] , int n ) { HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ; longLen = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int len1 = 0 ; if ( arr [ i - 1 ] == um . get ( arr [ i ] - 1 ) ) len1 = um . get ( arr [ i ] - 1 ) ; if ( arr [ i ] + 1 inum && len1 < um . get ( arr [ i ] + 1 ) ) len1 = um . get ( arr [ i ] + 1 ) ; um . put ( arr [ i ] , len1 + 1 ) ; if ( um . get ( arr [ i ] + 1 ) == 0 ) um . put ( arr [ i ] + 1 , um . get ( arr [ i ] + 1 ) + 1 ) ; } return longLen ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 3 , 4 ,
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( a + b ) ; } } }
public class GFG { static int calculateSum ( int n ) { int sum = 0 ; sum = 1 << n ; return ( sum - 1 ) ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum ▁ of ▁ all ▁ elements : ▁ " + calculateSum ( n ) ) ; } }
public class GFG { static int calculateSum ( int n ) { int sum = 0 ; for ( int row = 0 ; row < n ; row ++ ) sum += ( 1 << row ) ; return sum ; } public static void main ( String [ ] args ) { int n = 10 ; System . out . println ( " Sum ▁ of ▁ all ▁ elements : ▁ " + calculateSum ( n ) ) ; } }
public class GFG { static int maxDiff ( int arr [ ] , int n ) { int diff = arr [ 1 ] - arr [ 0 ] ; int curr_sum = diff ; int max_sum = curr_sum ; for ( int i = 1 ; i <= n - 1 ; i ++ ) { diff = arr [ i + 1 ] - arr [ i ] ; if ( curr_sum > 0 ) curr_sum += diff ; else curr_sum = diff ; if ( curr_sum > max_sum ) max_sum = curr_sum ; } return max_sum ; } public static void main ( String [ ] args ) { int arr [ ] = { 80 , 2 , 6 , 3 , 100 } ; int n = arr . length ; System . out . println ( " Maximum ▁ difference ▁ is ▁ " + maxDiff ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; int [ ] c = new int [ n ] ; int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; c [ i ] = sc . nextInt ( ) ; d [ i ] = sc . nextInt ( ) ; } int ans = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [
import java . io . * ; public class GFG { static int countPairs ( int n ) { int num = ( ( n / 2 ) + 1 ) ; int Max = n % num ; int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { int val = ( n % i ) % j ; if ( val == Max ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( countPairs ( n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] arr2 = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { arr2 [ i ] = sc . nextInt ( ) ; } int [ ] arr3 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr3 [ i ] = arr [ i ] ; } int [ ] arr4 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr4 [ i ] = arr [ i ] ; } int [ ] arr5 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr5 [ i ] = arr [ i ] ; } int [ ] arrA = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arrA [ i ] = arr [ i ] ; } int [ ] arrB = new int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; if ( ( n | m ) == 0 ) break ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int max = Integer .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int min = Integer . MAX_VALUE ; for ( int
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { count ++ ; } } System . out . println ( max ) ; } }
import java . util . * ; public class Main { public static void main ( Scanner
import java . util . * ; public class GFG { static boolean isPrime ( int N ) { boolean isPrime = true ; int arr [ ] = new int [ 7 ] ; for ( int i = 0 ; i < Math . sqrt ( N ) ; i ++ ) { if ( N % ( N ) == 0 ) { isPrime = false ; break ; } else { if ( N % ( N + i ) == 0 ) { isPrime = false ; break ; } } } if ( isPrime ) { System . out . println ( " Prime ▁ Number " ) ; } else { System . out . println ( " Not ▁ a ▁ Prime ▁ Number " ) ; } } public static void main ( String [ ] args ) { int N = 121 ; isPrime ( N ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int x1 = sc . nextInt ( ) ; int y1 = sc . nextInt ( ) ; int x2 = sc . nextInt ( ) ; int y2 = sc . nextInt ( ) ; int x = Math . max ( x2 - x1 , x2 - x1 ) ; int y = Math . max ( y2 - y1 , y2 - y1 ) ; System . out . println ( x + " ▁ " + y ) ; } }
public class GFG { static int max ( int x , int y ) { if ( x > y ) return x ; return y ; } static int lps ( int seq [ ] , int i , int j ) { if ( i == j ) return 1 ; if ( seq [ i ] == seq [ j ] && i + 1 == j ) return 2 ; if ( seq [ i ] == seq [ j ] ) return lps ( seq , i + 1 , j - 1 ) + 2 ; return Math . max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) ; } public static void main ( String [ ] args ) { int n = seq . length ; System . out . println ( " The ▁ length ▁ of ▁ the ▁ LPS ▁ is ▁ " + lps ( seq , 0 , n - 1 ) ) ; } }
public class GFG { static int findLength ( int st [ ] , int n ) { int total [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) total [ i ] = ( total [ i - 1 ] + int ( st [ i - 1 ] ) - int ( st [ i ] - st [ i + ( l / 2 ) ] ) - int ( st [ i + l / 2 ] ) ; int ans = 0 ; l = 2 ; while ( l <= n ) { for ( int i = n - l + 1 ; i <= n ; i ++ ) { int j = i + l - 1 ; if ( total [ i + int ( l / 2 ) ] - total [ i ] == total [ i + l ] - total [ i + ( l / 2 ) ] ) ans = Math . max ( ans , l ) ; } l = l + 2 ; } return ans ; } public static void main ( String [ ] args ) { int st [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1
public class GFG { static void prints ( int a [ ] , int n , int ind ) { int i = ind ; while ( i < n + ind ) { System . out . print ( a [ ( i % n ) ] + " ▁ " ) ; i = i + 1 ; } } public static void main ( String [ ] args ) { int a [ ] = { { 1 , 2 } , { 2 , 3 } , { 3 , 4 } , { 4 , 5 } , { 5 , 6 } , { 7 , 8 } } ; int n = a . length ; prints ( a , n , 3 ) ; } }
public class GFG { static void prints ( int a [ ] , int n , int ind ) { int b [ ] = new int [ 2 * n ] ; int i = 0 ; while ( i < n ) { b [ i ] = b [ n + i ] = a [ i ] ; i ++ ; } i = ind ; while ( i < n + ind ) { System . out . print ( b [ i ] + " ▁ " ) ; i ++ ; } } public static void main ( String [ ] args ) { int a [ ] = { { 1 , 2 * n } } ; int n = a . length ; prints ( a , n , 3 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = 0 ; int d = 0 ; int e = 0 ; int o = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; if ( l % 2 == 0 ) { c += r / 2 ; o += r / 2 ; } else { c += r / 2 ; o += r / 2 ; } } System . out . println ( Math . min ( o + e + o , c ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] dp = new int [ n ] ; dp [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( dp [ i ] != 0 ) { dp [ i ] = dp [ i ] + a [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) { System . out . println ( dp [ i ] ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < t ; i ++ ) { sum += sc . nextInt ( ) ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] < arr [ j ] ) { min
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) { System . out . print ( 1 + " ▁ " ) ; } else { System . out . print ( 0 + " ▁ " ) ; } } System . out . println ( ) ; } System . out . println ( ) ; } } }
import java . io . * ; public class GFG { static void bin ( int n ) { if ( n > 1 ) { bin ( n >> 1 ) ; } System . out . print ( n & 1 , end = " " ) ; } public static void main ( String [ ] args ) { int n = 3 ; bin ( 131 ) ; System . out . print ( n & 1 , end = " " ) ; } }
import java . util . * ; public class GFG { static int compute ( int x ) { int ans = 0 ; if ( x % 3 == 0 || x % 5 == 0 ) return ans ; return ( ans ) ; } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int n = s . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; System . out . println ( ( a * 2 - b ) / 2 ) ; } }
public class GFG { static intCircular ( int n ) { int Result = 1 ; while ( n > 0 ) { Result = Result * n ; n -= 1 ; } return Result ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( Circular ( n - 1 ) ) ; } }
public class GFG { static int productDiagonals ( int arr [ ] [ ] , int n ) { int product = 1 ; for ( int i = 0 ; i < n ; i ++ ) product = product * arr [ i ] [ i ] ; product = product * arr [ n / 2 ] [ n / 2 ] ; return product ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 , 8 } , { 9 , 7 , 4 , 2 } , 2 , 2 , 2 , 1 } ; System . out . println ( productDiagonals ( arr1 , 4 ) ) ; arr2 = ( 2 , 1 , 2 , 1 , 2 ) ; System . out . println ( productDiagonals ( arr2 , 5 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] map = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { map [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp = new int [ n ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + map [ i - 1 ] [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { System . out . print ( dp [ i ] [ j ] + " ▁ " ) ; } System . out . println ( ) ; } } } }
public class GFG { static int getSecondMostFreq ( String str ) { int NO_OF_CHARS = 256 ; int count [ ] = new int [ NO_OF_CHARS ] ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { count [ str . charAt ( i ) ] ++ ; } int first = 0 , second = 0 ; for ( int i = NO_OF_CHARS ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] > count [ first ] ) second = first ; else if ( count [ i ] > count [ second ] && count [ i ] != count [ first ] ) second = i ; } return ( char ) ( second ) ; } public static void main ( String [ ] args ) { String str = " geeksforgeeks " ; int res = getSecondMostFreq ( str ) ; if ( res != ' \ 0' ) System . out . println ( " Second ▁
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { ans += arr [ i ] * arr [ i + 1 ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int mySort ( int arr [ ] , int n ) { int arr1 [ ] = arr [ n / 2 ] ; int arr2 [ ] = arr [ n / 2 ] ; int arr1 [ ] = arr1 ; int sort = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sort = Math . max ( arr1 [ i ] , sort ) ; arr1 [ i ] = sort ; } return arr1 + arr2 ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , 7 } ; int n = arr . length ; arr = mySort ( arr , n ) ; System . out . println ( " Modified ▁ Array ▁ : ▁ " ) ; System . out . println ( arr ) ; } }
public class GFG { static int minflip ( int arr1 [ ] , int arr2 [ ] , int arr3 [ ] , int p , int q , int n ) { int flip = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] ^ arr2 [ i ] != arr3 [ i ] ) flip ++ ; } return flip ; } public static void main ( String [ ] args ) { int arr1 [ ] = { 1 , 0 , 1 , 1 , 1 , 1 , 1 } ; int arr2 [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int arr3 [ ] = { 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr1 . length ; int p = 2 ; int q = 4 ; System . out . println ( minflip ( arr1 , arr2 , arr3 , p , q , n ) ) ; } }
public class GFG { static int sum ( int n ) { int i = 1 ; int s = 0 ; for ( i = 1 ; i <= n ; i ++ ) s = s + 1 / i ; return s ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( " Sum ▁ is ▁ " + sum ( n ) + " ▁ " + n ) ; } }
import java . util . * ; public class GFG { static void bitonicGenerator ( int arr [ ] , int n ) { int evenArr [ ] = new int [ n ] ; int oddArr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( i % 2 ) == 0 ) evenArr [ i ] = arr [ i ] ; else oddArr [ i ] = arr [ i ] ; } evenArr = sorted ( evenArr ) ; oddArr = sorted ( oddArr ) ; oddArr = oddArr [ ( int ) Math . pow ( 10 , 9 ) ; int i = 0 ; for ( int j = 0 ; j < evenArr . length ; j ++ ) { arr [ i ] = evenArr [ j ] ; i ++ ; } for ( int j = 0 ; j < oddArr . length ; j ++ ) { arr [ i ] = oddArr [ j ] ; i ++ ; } for ( int j = 0 ; j
import java . util . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; int right = 0 ; int left = 0 ; boolean visited [ ] = new boolean [ n ] ; while ( right < n ) { while ( right < n && visited [ arr [ right ] ] == false ) { count ++ ; right ++ ; } while ( left < right && ( right != n && visited [ arr [ right ] ] == true ) ) { visited [ arr [ left ] ] = true ; left ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 4 , 2 , 4 , 3 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class Solution { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc
public class GFG { static int M = 1001 ; static int MOD = 998244353 ; static int dp [ ] [ ] = new int [ M ] [ M ] ; static int solve ( int idx , int diff , int N , int M , int K ) { if ( idx > N ) { if ( diff == K ) return 1 ; return 0 ; } if ( dp [ idx ] [ diff ] != - 1 ) return dp [ idx ] [ diff ] ; int ans = solve ( idx + 1 , diff + 1 , N , M , K ) ; ans += ( M - 1 ) * solve ( idx + 1 , diff + 1 , N , M , K ) ; dp [ idx ] [ diff ] = ans % MOD ; return dp [ idx ] [ diff ] ; } public static void main ( String [ ] args ) { int N = 3 , M = 3 ; int K = 0 ; System . out . println ( M * solve ( 2 , 0 , N , M , K ) ) ; } }
import java . util . * ; public class Main
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; if ( a [ 0 ] == b [ 0 ] ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } }
public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { if ( N % 2 == 0 ) return 0 ; int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) res ^= arr [ i ] ; return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
public class GFG { static int getTotalXorOfSubarrayXors ( int arr [ ] , int N ) { int res = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int freq = ( i + 1 ) * ( N - i ) ; if ( freq % 2 == 1 ) res = res ^ arr [ i ] ; } return res ; } public static void main ( String [ ] args ) { int arr [ ] = { 3 , 5 , 2 , 4 , 6 } ; int N = arr . length ; System . out . println ( getTotalXorOfSubarrayXors ( arr , N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans += arr [ i ] ; } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] - arr [ n - 2 ] ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == - 1 ) { count ++ ; } } System . out . println ( count ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; String s = sc . next ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = s . charAt ( i ) - ' a ' ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] >= 0 ) { count ++ ; } } for ( int i = 0 ; i < n ; i ++
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { min = Math . min ( min , arr [ i ] ) ; } } System . out . println ( min ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { c [ i ] = a [ i - 1 ] + b [ i ] ; } int ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( c [ i ] == 0 ) { ans = i ; break ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( c [ i ] == 0 ) { ans = i ; break ; } } if ( ans == 0 ) { System . out . println ( n ) ; } else { System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 1 ) { ans = Math . max ( ans , b [ i ] ) ; } } System . out . println ( ans ) ; } }
import java . io . * ; public class GFG { static boolean powerOfTwo ( int n ) { return ( n & n - 1 ) == 0 ; } static void onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) return ; return ( powerOfTwo ( n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 9 ; if ( onlyFirstAndLastAreSet ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
import java . util . * ; public class GFG { static int minimumCostOfBreaking ( int X [ ] , int Y [ ] , int m , int n ) { int res = 0 ; X [ ] sort ( reverse ) ; Y . sort ( reverse ) ; int hzntl = 1 ; int i = 0 ; j = 0 ; while ( i < m ) { if ( X [ i ] > Y [ j ] ) res += X [ i ] * horizon ; else res += Y [ j ] * horizon ; hzntl ++ ; i ++ ; } int total = 0 ; while ( i < m ) total += X [ i ] * horizon ; total = 0 ; while ( j < n ) total += Y [ j ] * horizon ; return total ; } public static void main ( String [ ] args ) { int
import java . io . * ; public class GFG { static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; } static int countPairs ( int G , int L ) { int count = 0 ; int p = G * L ; for ( int a = 1 ; a <= L ; a ++ ) { if ( ! ( p % a ) && ( G == 0 ) ) count ++ ; } return count ; } public static void main ( String [ ] args ) { int G = 2 ; int L = 12 ; System . out . println ( " Total ▁ possible ▁ pair ▁ with ▁ GCD ▁ " + G + " ▁ G = ▁ " ) ; System . out . println ( " ▁ = ▁ " + countPairs ( G , L ) ) ; } }
public class GFG { static int multiply ( int a [ ] [ ] , int b [ ] [ ] ) { int mul [ ] [ ] = new int [ 3 ] [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { mul [ i ] [ j ] = 0 ; for ( int k =
public class GFG { static int MinimumValue ( int x , int y ) { if ( x > y ) x = y ; x = x - 1 ; int a = 1 ; b = x - 1 ; c = y - b ; System . out . println ( a + " ▁ " + b + " ▁ " + c ) ; } public static void main ( String [ ] args ) { int x = 123 , y = 13 ; MinimumValue ( x , y ) ; } }
import java . util . * ; public class Solution { public boolean checkPossibility ( int nums [ ] ) { int broken_num = 0 ; for ( int i = 0 ; i < nums . length - 1 ; i ++ ) { if ( nums [ i ] > nums [ i + 1 ] ) { broken_num ++ ; if ( broken_num >= 2 ) return false ; if ( i - 1 < 0 || nums [ i - 1 ] <= nums [ i + 1 ] ) nums [ i ] = nums [ i + 1 ] ; else nums [ i + 1 ] = nums [ i ] ; } } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int nums [ ] = { 4 , 2 , 3 } ; int out = sObj . checkPossibility ( nums ) ; System . out . println ( out ) ; } }
import java . util . * ; public class GFG { static boolean check ( int mid , int array [ ] , int n , int K ) { int count = 0 ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( array [ i ] > mid ) return false ; sum += array [ i ] ; if ( sum > mid ) count ++ ; } count ++ ; if ( count <= K ) return true ; return false ; } static int solve ( int array [ ] , int n , int K ) { int start = 1 , end = 0 ; for ( int i = 0 ; i < n ; i ++ ) start += array [ i ] ; int answer = 0 ; while ( start <= end ) end = mid - 1 ; int mid =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int m = sc . nextInt ( ) ; int n = sc . nextInt ( ) ; if ( m == 0 && n == 0 ) break ; int [ ] [ ] dp = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { dp [ i ] [ j ] = sc . nextInt ( ) ; } } int [ ] [ ] dp2 = new int [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { dp2 [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ j ] + 1 ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( dp [ i ] [ j ] != 0 ) { ans =
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; int c = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; int max = Math . max ( a , b ) ; int min = Math . min ( a , b ) ; int ans = max * 2 * min ; System . out . println ( ans ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 0 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . io . * ; public class GFG { static int even_or_odd ( int N ) { int l = N ; if ( N [ l - 1 ] == '0' || N [ l - 1 ] == '2' || N [ l - 1 ] == '4' || N [ l - 1 ] == '6' ) return ( " Even " ) ; else return ( " Odd " ) ; } public static void main ( String [ ] args ) { int N = "735" ; System . out . println ( even_or_odd ( N ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int [ ] d = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { ans [ i ] = a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( j == i ) continue ; if ( j == i ) continue ; if ( j == i ) continue ; if ( j == i )
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { count ++ ; } } if ( count % 2 == 0 ) { System . out . println ( n - 1 ) ; } else { System . out . println ( n - 1 ) ; } } }
public class GFG { static int solve ( int X [ ] , int Y [ ] , int N , int K ) { int count [ ] = new int [ N + 1 ] ; int sol = 0 ; int count [ ] = new int [ N + 1 ] ; int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { count [ i ] = ( count [ i - 1 ] + Math . abs ( X [ i - 1 ] ) - ( Y [ i - 1 ] ) ) ; } int j = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { while ( ( count [ i ] - count [ j ] ) > K ) j ++ ; sol = Math . max ( sol , i - j ) ; } return sol ; } public static void main ( String [ ] args ) { int N = 4 ; int X [ ] = { 3 , 2 , 3 } ; int Y [ ] = { 2 , 3 } ; int K = 3 ; System . out . println ( solve ( X , Y , N , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; for ( int i = 0 ; i < m ; i ++ ) { int a = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( a % b == 0 ) { System . out . println ( " Yes " ) ; } else { System . out . println ( " No " ) ; } } } }
import java . util . * ; public class GFG { static boolean isPrime ( int n , int i = 2 ) { if ( n <= 2 ) return true ; if ( n == 2 ) return false ; if ( i * i > n ) return true ; return isPrime ( n , i + 1 ) ; } public static void main ( String [ ] args ) { int n = 15 ; if ( isPrime ( n ) ) System . out . println ( " Yes " ) ; else System . out . println ( " No " ) ; } }
public class GFG { static boolean isPrime ( int n ) { int i = 2 ; while ( i * i <= n ) { if ( n % i == 0 ) return false ; i ++ ; } return true ; } static int minimumSum ( int n ) { if ( isPrime ( n ) ) return 1 ; if ( n % 2 == 0 ) return 2 ; if ( isPrime ( n - 2 ) ) return 2 ; return 3 ; } public static void main ( String [ ] args ) { int n = 27 ; System . out . println ( minimumSum ( n ) ) ; } }
public class GFG { static boolean isPrime ( int x ) { for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) return false ; } return true ; } static int minimumCost ( int n ) { if ( isPrime ( n ) ) return 1 ; if ( n % 2 == 1 && isPrime ( n - 2 ) ) return 2 ; if ( n % 2 == 0 ) return 2 ; return 3 ; } public static void main ( String [ ] args ) { int n = 6 ; System . out . println ( minimumCost ( n ) ) ; } }
public class GFG { static int snoob ( int x ) { int next = 0 ; if ( x == 0 ) { next = x & - ( x ) ; next *= - ( x ) ; next = next * - ( x ) ; } return next ; } public static void main ( String [ ] args ) { int x = 156 ; System . out . println ( " Next ▁ higher ▁ number ▁ with ▁ " + " same ▁ number ▁ of ▁ set ▁ bits ▁ is ▁ " + snoob ( x ) ) ; } }
public class GFG { static int properDivisorSum ( int n ) { int sum = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 1 ; j * j > i ; j ++ ) { if ( j * j > i ) break ; if ( i % j == 0 ) { if ( i / j == j ) sum += j ; else sum += j + i / j ; } } sum = sum - i ; } return sum ; } public static void main ( String [ ] args ) { int n = 4 ; System . out . println ( properDivisorSum ( n ) ) ; n = 5 ; System . out . println ( properDivisorSum ( n ) ) ; } }
public class GFG { static int getMinLength ( int arr [ ] , int n ) { int count = 0 ; int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count ++ ; else { if ( count != 0 ) result = Math . min ( result , count ) ; count = 0 ; } } return result ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( getMinLength ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++
import java . util . * ; public class GFG { static int LIMIT = 12000 ; static int minsumproduct [ ] = new int [ LIMIT + 1 ] ; static int factorize ( int n , int remain , int maxfactor , int sum , int terms ) { if ( remain == 1 ) { if ( sum > n ) { raise AssertionError ( ) ; } terms += n - sum ; if ( terms <= LIMIT && ( minsumproduct [ terms ] == 0 || n < minsumproduct [ terms ] ) ) { minsumproduct [ terms ] = n ; } } else { for ( int i = 2 ; i <= maxfactor ; i ++ ) { if ( remain % i == 0 ) { factorize ( n , remain / i , min ( factor , maxfactor ) , sum + factor , terms + 1 ) ; } } } } public static void main ( String [ ] args ) { System . out . println ( compute ( ) ) ; }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n
import java . util . * ; public class GFG { static int MAX = 1000000 ; static void SieveOfEratosthenes ( ) { boolean prime [ ] = new boolean [ MAX + 1 ] ; Arrays . fill ( prime , true ) ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= MAX ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * 2 ; i <= MAX ; i += p ) prime [ i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < m ; i ++ ) { int [ ] d = new int [ n ] ; for ( int j = 0
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) { count ++ ; } } if ( count == 2 ) { System . out . println ( arr [ n - 1 ] ) ; } else { System . out . println ( arr [ n - 2 ] ) ; } } }
import java . util . * ; public class GFG { static int distinctSubstring ( String P , int N ) { HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { freq . put ( P . charAt ( i ) , freq . getOrDefault ( P . charAt ( i ) , 0 ) + 1 ) ; } char [ ] s = new char [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { s [ i ] = ' a ' ; } for ( int i = 0 ; i < N ; i ++ ) { int pos = P . charAt ( i ) - ' a ' ; if ( freq . get ( pos ) == 0 ) { break ; } freq . put ( pos , freq . get ( pos ) + 1 ) ; s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s [ s ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k == 0 ) { ans = ( arr [ i ] / k ) + 1 ; } } System . out . println ( ans ) ; } }
public class GFG { static int INT_MAX = Integer . MAX_VALUE ; static int INT_MIN = - ( int ) Math . min ( Integer . MAX_VALUE , INT_MAX ) ; static int minimumAdjacentDifference ( int a [ ] , int n , int k ) { int minDiff = INT_MAX ; for ( int i = 1 << n ; i < INT_MAX ; i ++ ) { int cnt = bin ( i ) . count ( '1' ) ; if ( cnt == n - k ) { int temp = [ ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) temp = a [ j ] ; } int maxDiff = INT_MIN ; for j = n ; int len = temp . length - 1 ; int minDiff = min ( minDiff , temp . length ) ; int maxDiff
public class GFG { static void difference ( int arr [ ] , int n ) { int largest = arr [ 0 ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( largest < arr [ i ] ) largest = arr [ i ] ; } for ( i = 0 ; i < n ; i ++ ) System . out . print ( arr [ i ] + " ▁ " ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 10 , 5 , 9 , 3 , 2 } ; int n = arr . length ; difference ( arr , n ) ; } }
public class GFG { static int countKDivPairs ( int A [ ] , int n , int K ) { int freq [ ] = new int [ K ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ A [ i ] % K ] ++ ; int sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) / 2 ; int i = 1 ; while ( i <= K / 2 && i != ( K - i ) ) { sum += freq [ i ] * freq [ K - i ] ; i += 1 ; } if ( K % 2 == 0 ) sum += ( freq [ K / 2 ] * ( freq [ K / 2 ] - 1 ) / 2 ) ; return ( sum ) ; } public static void main ( String [ ] args ) { int A [ ] = { 2 , 2 , 1 , 7 , 5 , 3 } ; int n = A . length ; int K = 4 ; System . out . println ( countKDivPairs ( A , n , K ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 1 ) break ; String s = sc . next ( ) ; int [ ] arr = new int [ 26 ] ; for ( int i = 0 ; i < 26 ; i ++ ) arr [ i ] = s . charAt ( i ) - ' a ' ; int count = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] == 1 ) count ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] == 2 ) count ++ ; } if ( count == 1 ) { System . out . println ( " NA " ) ; continue ; } for ( int i = 0 ; i < 26 ; i ++ ) { if ( arr [ i ] == 3 ) { System . out . println ( " NA " ) ; continue ; } if ( arr [ i ] == 7 ) { System . out . println ( " NA " ) ; continue ; } if ( arr [ i ] == 3 ) { System . out . println ( " NA " ) ; continue ; } if ( arr [ i ] == 2 ) { System . out . println ( " NA " ) ; continue ; } if ( arr [ i ] == 1 ) { System . out . println ( "
public class GFG { static int maxOnesIndex ( int arr [ ] , int n ) { int max_count = 0 ; int max_index = 0 ; int prev_zero = - 1 ; int prev_prev_zero = - 1 ; prev_prev_zero = - 1 ; for ( int curr = 0 ; curr < n ; curr ++ ) { if ( arr [ curr ] == 0 ) { if ( curr - prev_prev_zero > max_count ) max_count = curr - prev_prev_zero ; max_index = prev_zero ; } prev_prev_zero = prev_zero ; prev_zero = prev_prev_zero ; prev_zero = prev_zero ; } if ( n - prev_prev_zero > max_count ) max_index = prev_zero ; return max_index ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n = arr . length ; System . out . println
public class GFG { static int minimumX ( int n , int k ) { int ans = 10 * 18 ; for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( n % i == 0 ) ans = Math . min ( ans , i + ( n / i ) * k ) ; } return ans ; } public static void main ( String [ ] args ) { int n = 4 , k = 6 ; System . out . println ( minimumX ( n , k ) ) ; n = 5 ; System . out . println ( minimumX ( n , k ) ) ; n = 6 ; System . out . println ( minimumX ( n , k ) ) ; } }
public class GFG { static int moduloMultiplication ( int a , int b , int mod ) { int res = 0 ; a = a % mod ; while ( b != 0 ) { if ( b % 2 == 1 ) res = ( res + a ) % mod ; a = ( 2 * a ) % mod ; b >>= 1 ; } return res ; } public static void main ( String [ ] args ) { int a = 101234652348789988998 ; int b = 657463115456431 ; int m = 10005412336548794 ; System . out . println ( moduloMultiplication ( a , b , m ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] [ ] a = new int [ n ] [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for (
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int m = sc . nextInt ( ) ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int min = Math . min
import java . util . * ; public class GFG { static boolean checkPalindrome ( String str ) { int length = str . length ( ) ; int length = str . length ( ) ; int [ ] [ ] temp = new int [ length ] [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { for ( int j = 0 ; j < length ; j
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { dp [ i ] [ i ] = 1 ; } dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( dp [ i ] [ j ] == 1 ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] ; dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ]
import java . util . * ; public class GFG { static void findSubsequence ( int arr [ ] , int n , int k ) { int M [ ] = new int [ k + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) M [ arr [ i ] ] ++ ; int numCount [ ] = new int [ k + 1 ]
import java . util . * ; public class GFG { static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 , odd2 = 0 ; int even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) odd1 ++ ; else even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 1 ) odd2 ++ ; else even2 ++ ; } int pairs = Math . min ( odd1 , odd2 ) + Math . min ( even1 , even2 ) ; return pairs ; } public static void main ( String [ ] args ) { int a [ ] = { 9 , 14 , 6 , 2 , 11 } ; int b [ ] = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( count_pairs ( a , b , n , m ) )
import java . util . * ; public class GFG { static int count_pairs ( int a [ ] , int b [ ] , int n , int m ) { int odd1 = 0 , even1 = 0 , odd2 = 0 ; int even2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) odd1 ++ ; else even1 ++ ; } for ( int i = 0 ; i < m ; i ++ ) { if ( b [ i ] % 2 == 0 ) even2 ++ ; else even2 ++ ; } int pairs = ( int ) Math . min ( odd1 , even2 ) + Math . min ( odd2 , even1 ) ; return pairs ; } public static void main ( String [ ] args ) { int a [ ] = { 9 , 14 , 6 , 2 , 11 } ; int b [ ] = { 8 , 4 , 7 , 20 } ; int n = a . length ; int m = b . length ; System . out . println ( count_pairs ( a , b , n , m )
public class GFG { static int maxDiff ( int arr [ ] , int arr_size ) { int max_diff = arr [ 1 ] - arr [ 0 ] ; int min_element = arr [ 0 ] ; for ( int i = 1 ; i < arr_size ; i ++ ) { if ( arr [ i ] - min_element > max_diff ) max_diff = arr [ i ] - min_element ; if ( arr [ i ] < min_element ) min_element = arr [ i ] ; } return max_diff ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 2 , 6 , 80 , 100 } ; int size = arr . length ; System . out . println ( " Maximum ▁ difference ▁ is ▁ " + maxDiff ( arr , size ) ) ; } }
public class GFG { static int binomialCoeff ( int n , int k ) { int C [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ; for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= Math . min ( i , k ) + 1 ; j ++ ) { if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ; else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ; } } return C [ n ] [ k ] ; } static int findMax ( int n ) { return binomialCoeff ( n , n / 2 ) ; } public static void main ( String [ ] args ) { int n = 5 ; System . out . println ( findMax ( n ) ) ; } }
import java . util . * ; public class GFG { static int MAX = 26 ; static int minimumAddition ( String str1 , String Len ) { int freq [ ] = new int [ MAX ] ; for ( int i = 0 ; i < MAX ; i ++ ) freq [ str1 . charAt ( i ) - ' a ' ] ++ ; int maxFreq = max ( freq ) ; int minAddition = 0 ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( freq [ i ] > 0 ) { minAddition += Math . abs ( maxFreq - freq [ i ] ) ; } } return minAddition ; } public static void main ( String [ ] args ) { String str1 = " geeksforgeeks " ; int Len = str1 . length ( ) ; System . out . println ( minimumAddition ( str1 , Len ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] < b [ i ] ) { ans = Math . min ( ans , b [ i ] ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n =
import java . util . * ; public class GFG { static int max ( int a , int b ) { int ans = Integer . MIN_VALUE ; for ( int i = 0 ; i < b ; i ++ ) { int n = i * i + a ; if ( n < 0 ) return - 1 ; else if ( n < len ( isprimecache ) ) return i ; } return ans ; } static int count_consecutive_primes ( int ab ) { int a = ab ; for ( int i = 0 ; i < 1000 ; i ++ ) { int n = i * i + a ; if ( n < 0 ) return - 1 ; else if ( n < len ( isprimecache ) ) return i ; } return - 1 ; } static int count_consecutive_primes ( int ab ) { int a = ab ; for ( int i = 0 ; i < 1000 ; i ++ ) { int n = i * i + a ; if ( n < 0 ) return - 1
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int min = Math . min ( r , n - 1 ) ; int max = Math . max ( r , n - 1 ) ; int ans = ( max - min ) * ( r - 1 ) / 2 ; System . out . println ( ans ) ; } } }
import java
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int r = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ r ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < r ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < r ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { ans ++ ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc . next ( ) ; System . out . println ( s . replace ( " H " , " H " ) ) ; } } }
public class GFG { static int countRotations ( int arr [ ] , int low , int high ) { if ( high < low ) return 0 ; if ( high == low ) return low ; int mid = low + ( high - low ) / 2 ; mid = ( mid ) ; if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ; if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ; if ( arr [ high ] > arr [ mid ] ) return ( countRotations ( arr , low , mid - 1 ) ) ; return countRotations ( arr , mid + 1 , high ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 15 , 18 , 2 , 3 , 6 , 12 } ; int n = arr . length ; System . out . println ( countRotations ( arr , 0 , n - 1 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i + 1 < m ) { ans = m ; break ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static boolean modularSum ( int arr [ ] , int n , int m ) { if ( n > m ) return true ; int [ ] temp = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { if ( DP [ 0 ] == 0 ) return true ; temp [ 0 ] = DP [ ( int ) DP [ ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( arr [ i ] ) % m ) ) ) ] ) ; } for ( int j = 0 ; j < m ; j ++ ) { if ( temp [ j ] == 0 ) { if ( DP [ ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( arr [ i ] ) % m ) ) ] == False ) temp [ ( j + arr [ i ] ) % m ]
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; b [ i ] = sc . nextInt ( ) ; } int q = sc . nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int b = sc . nextInt ( ) ; int e = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; System . out . println ( a [ b ] + e - k ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int x = sc . nextInt ( ) ; int [ ] [ ] a = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = sc . nextInt ( ) ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 1 ) { ans += Math . min ( a [ i ] [ j ] , Math . min ( a [ i ] [ j ] , a [ i ] [ j + 1 ] ) ; } } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int d = sc . nextInt ( ) ; int w = sc . nextInt ( ) ; if ( d + w == 0 ) break ; int [ ] [ ] dp = new int [ d + 1 ] [ w
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int max = 0 ; int min = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k != 0 ) { max = arr [ i ] ; min = arr [ i ] ; } } System . out . println ( max - min ) ; } }
public class GFG { static int sum ( int k , int n ) { int sum = ( int ) ( Math . pow ( k , n + 1 ) - Math . pow ( k - 1 , n + 1 ) ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int K = 3 ; System . out . println ( sum ( K , n ) ) ; } }
import java . util . * ; public class GFG { static int solve ( int i , int tight , int sum_so_far , int sum_so_far , int sum_sum , int number [ ] ) { if ( i == length ) { if ( sum_so_far == sum ) return 1 ; else return 0 ; } int ans = 0 ; int currdigitstr = ( currdigit ) ; if ( currdigitstr > number [ i ] ) { return ans ; } ans = 0 ; for ( int currstr = 0 ; currstr < 10 ; currstr ++ ) { currdigitstr = str ( currdigit ) ; if ( currdigitstr > number [ i ] ) break ; ans += solve ( i + 1 , ntight , nsum_so
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } System . out . println ( sum ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr
public class GFG { static int countSubarrays ( int a [ ] , int n , int x ) { int count = 0 ; int number = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) { count ++ ; } else { number += ( count ) * ( count + 1 ) / 2 ; count = 0 ; } } if ( count ) number += ( count ) * ( count + 1 ) / 2 ; return number ; } public static void main ( String [ ] args ) { int a [ ] = { 3 , 4 , 5 , 6 , 7 , 2 , 10 , 11 } ; int n = a . length ; int k = 5 ; System . out . println ( countSubarrays ( a , n , k ) ) ; } }
import java . io . * ; public class GFG { static int minCost ( int arr [ ] , int n ) { int count_even = 0 ; int count_odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) count_even ++ ; else count_odd ++ ; } return Math . min ( count_even , count_odd ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 2 , 4 , 3 , 1 , 5 } ; int n = arr . length ; System . out . println ( minCost ( arr , n ) ) ; } }
public class GFG { static void printLastOccurrence ( int a [ ] , int n ) { int mp [ ] = new int [ 7 ] ; for ( int i = 0 ; i < 7 ; i ++ ) mp [ a [ i ] ] = i ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp [ a [ i ] ] == i ) System . out . print ( a [ i ] + " ▁ " ) ; } } public static void main ( String [ ] args ) { int a [ ] = { 1 , 5 , 5 , 1 , 6 , 1 } ; int n = a . length ; printLastOccurrence ( a , n ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = sc . nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; } if ( max < 2 ) System . out . println ( " NA " ) ; else { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) count ++ ; } System . out . println ( count ) ; } } } }
public class GFG { static int countPaths ( int m , int n ) { if ( m == 1 || n == 1 ) return 1 ; return ( countPaths ( m - 1 , n ) + countPaths ( m , n - 1 ) ) ; } public static void main ( String [ ] args ) { int n = 5 ; int m = 5 ; System . out . println ( countPaths ( n , m ) ) ; } }
import java . io . * ; public class GFG { static int sumOfAP ( int a , int d , int n ) { int sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) ; return sum ; } public static void main ( String [ ] args ) { int n = 20 ; int a = 2.5 ; int d = 1.5 ; System . out . println ( sumOfAP ( a , d , n ) ) ; } }
import java . util . * ; public class GFG { static int countPairs ( int arr [ ] , int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) count ++ ; } } return count ; } public static void main ( String [ ] args ) { int arr [ ] = { 5 , 0 , 3 , 1 , 2 } ; int n = arr . length ; System . out . println ( countPairs ( arr , n ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } boolean flag = false ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { flag = true ; break ; } } if ( flag ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
import java . util . * ; public class GFG { static int compute ( int [ ] [ ] base , int DIGITS ) { int BASE = 10 ; int DIGITS = 20 ; int CONSECUTIVE = 3 ; int MAX_SUM = 9 ; int [ ] [ ] [ ] newrow = new int [ DIGITS + CONSECUTIVE + 1 ] [ DIGITS + CONSECUTIVE + 1 ] ; for ( int digits = 1 ; digits <= DIGITS ; digits ++ ) { int base_digit = base [ digits - 1 ] ; int sum = 0 ; if ( digit_sum ( base_digit ) <= MAX_SUM ) { for ( int nextdigit = BASE ; nextdigit <= DIGITS ; nextdigit ++ ) { sum += ways [ digits - 1 ] [ nextdigit ] ; } } newrow [ digits ] [ 0 ] = sum ; } int [ ] [ ] newrow = new int [ DIGITS + CONSECUT
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; String t = sc . next ( ) ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == ' # ' ) { count ++ ; } else { if ( count == 0 ) { if ( t . equals ( " # " ) ) { t = " # " ; } else { t = " # " ; } } else { if ( t . equals ( " # " ) ) { t = " # " ; } else { t = " # " ; } } } } System . out . println ( t ) ; } }
import java . util . * ; public class Solution { public boolean isToeplitzMatrix ( int matrix [ ] [ ] , int matrix [ ] [ ] ) { for ( int r = 0 ; r < matrix . length - 1 ; r ++ ) { for ( int c = 0 ; c < matrix [ 0 ] . length - 1 ; c ++ ) { if ( matrix [ r ] [ c ] != matrix [ r + 1 ] [ c + 1 ] ) return false ; } } return true ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; int matrix [ ] [ ] = { { 1 , 2 , 3 , 4 } , { 5 , 1 , 2 , 3 } , { 9 , 5 , 1 , 2 } } ; int out = sObj . isToeplitzMatrix ( matrix ) ; System . out . println ( out ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { ans ++ ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; while ( true ) { int n = sc . nextInt ( ) ; int t = sc . nextInt ( ) ; int l = sc . nextInt ( ) ; int b = sc . nextInt ( ) ; if ( n == 0 && t == 0 && l == 0 && b == 0 ) break ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; } } int ans = 0 ; for ( int i = 1 ; i <= n ; i
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 1 ) { sum += arr [ i ] ; } else { sum += 1 ; } } if ( sum % 2 == 0 ) { System . out . println ( " YES " ) ; } else { System . out . println ( " NO " ) ; } } } }
public class GFG { static int minInsertions ( int H [ ] , int n , int K ) { int inser = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int diff = Math . abs ( H [ i ] - H [ i - 1 ] ) ; if ( diff <= K ) continue ; else inser += Math . ceil ( diff / K ) - 1 ; } return inser ; } public static void main ( String [ ] args ) { int H [ ] = { 2 , 4 , 8 , 16 } ; int K = 3 ; int n = H . length ; System . out . println ( minInsertions ( H , n , K ) ) ; } }
public class GFG { static int countWords ( String str , int l ) { int count = 1 ; if ( l == 1 ) return count ; if ( str . charAt ( 0 ) == str . charAt ( 1 ) ) count *= 1 ; else count *= 2 ; for ( int j = 1 ; j <= l - 1 ; j ++ ) { if ( str . charAt ( j ) == str . charAt ( j - 1 ) && str . charAt ( j ) == str . charAt ( j + 1 ) ) count *= 1 ; else count *= 2 ; } for ( int j = 1 ; j <= l - 2 ; j ++ ) { if ( str . charAt ( j ) == str . charAt ( j - 1 ) && str . charAt ( j ) == str . charAt ( j + 1 ) || str . charAt ( j - 1 ) == str . charAt ( j + 1 ) || str . charAt ( j - 1 ) == str .
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; } if ( sum % 2 == 0 ) { System . out . println ( sum ) ; } else { System . out . println ( sum - 1 ) ; } } }
import
public class GFG { static int findHypotenuse ( int side1 , int side2 ) { double h = ( ( side1 * side2 ) + ( side2 * side2 ) ) * ( 1 / 2 ) ; return h ; } public static void main ( String [ ] args ) { int side1 = 3 , side2 = 4 ; System . out . println ( findHypotenuse ( side1 , side2 ) ) ; } }
public class GFG { static void printTwoOdd ( int arr [ ] , int size ) { int xor2 = arr [ 0 ] ; set_bit_no ( xor2 ^ arr [ 0 ] ) ; for ( int i = 1 ; i < size ; i ++ ) xor2 = xor2 ^ arr [ i ] ; set_bit_no ( xor2 & ~ ( xor2 - 1 ) ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] & set_bit_no ) { x = x ^ arr [ i ] ; } else y = y ^ arr [ i ] ; } System . out . print ( " The ▁ two ▁ ODD ▁ elements ▁ are ▁ " + x + " & " + y ) ; } public static void main ( String [ ] args ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 1 } ; int arr_size = arr . length ; printTwoOdd ( arr , arr_size ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int t = sc . nextInt ( ) ; while ( t -- > 0 ) { int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < min ) { min = arr [ i ] ; } if ( arr [ i ] > max ) { max = arr [ i ] ; } } System . out . println ( min + " ▁ " + max ) ; } } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int m = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc . nextInt ( ) ; } boolean [ ] [ ] dp = new boolean [ n + 1 ] [ 31 ] ; dp [ 0 ] [ 0 ] = true ; for ( int i = 1 ; i <= 31 ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) { if ( dp [ i ] [ j ] ) { continue ; } dp [ i ] [ j ] = false ; } } for ( int i = 1 ; i <= 31 ; i ++
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 1 ) { ans = Math . max ( ans , a [ i ] ) ; } } System . out . println ( ans ) ; } }
import
import java . util . * ; public class GFG { static int steps ( int curx , int cury , int n ) { if ( x == 0 ) return 0 ; else if ( x > 0 ) return Math . abs ( ( n - cur ) / x ) ; else return Math . abs ( ( int ) ( cur - 1 ) / x ) ; } static int countSteps ( int curx , int cury , int n , int m , int moves ) { int count = 0 ; int k = moves . length ; for ( int i = 0 ; i < k ; i ++ ) { x = moves [ i ] [ 0 ] ; y = moves [ i ] [ 1 ] ; stepct = Math . min ( steps ( curx , x , n ) , steps ( cury , y , m ) ) ; count += stepct ; curx += stepct * x ; cury += stepct * y ;
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } Arrays . sort ( arr ) ; int ans = arr [ n - 1 ] - arr [ n - 2 ] ; System . out . println ( ans ) ; } }
public class GFG { static int cntSubArr ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int curr_gcd = 0 ; for ( int j = i ; j < n ; j ++ ) { curr_gcd = gcd ( curr_gcd , arr [ j ] ) ; ans += ( curr_gcd == 1 ) ? curr_gcd == 1 ? 1 : 0 ; } } return ans ; } public static void main ( String [ ] args ) { int arr [ ] = { 1 , 1 , 1 } ; int n = arr . length ; System . out . println ( cntSubArr ( arr , n ) ) ; } }
import java . util . * ; public class GFG { static boolean isVowel ( char c ) { if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) return true ; return false ; } static boolean isVowelPrime ( char str [ ] ) { boolean prime [ ] = new boolean [ 26 ] ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= str . length ; p ++ ) { if ( p * p > str . length ) break ; if ( prime [ p ] == true ) { for ( int i = 2 * p ; i < str . length ; i += p ) prime [ i ] = false ; } } for ( int i = 0 ; i < str
import java . util . * ; public class GFG { static int minStepToDeleteString ( String str ) { int N = str . length ( ) ; int dp [ ] [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ; for ( int i = 1 ; i <= N ; i ++ ) { int i = 0 ; int j = l - 1 ; while ( j < N ) { if ( str . charAt ( i ) == str . charAt ( j ) ) dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ; else dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ; if ( str
public class GFG { static int limit = 1000000 ; static int position [ ] = new int [ limit + 1 ] ; static void sieve ( ) { int position [ ] = new int [ limit + 1 ] ; position [ 1 ] = - 1 ; int pos = 0 ; for ( int i = 2 ; i <= limit ; i ++ ) { if ( position [ i ] == 0 ) pos ++ ; position [ i ] = pos ; for ( int j = i * 2 ; j <= limit ; j += i ) { position [ j ] = - 1 ; } } } public static void main ( String [ ] args ) { sieve ( ) ; int n = 11 ; System . out . println ( position [ n ] ) ; } }
import java . io . * ; public class GFG { static int getNumMonotone ( int ln ) { int DP [ ] [ ] = new int [ ln ] [ ln ] ; for ( int i = 0 ; i < ln ; i ++ ) { DP [ 0 ] [ i ] = i + 1 ; DP [ i ] [ 0 ] = i + 1 ; } for ( int i = 0 ; i < ln ; i ++ ) { for ( int j = 1 ; j < DP_s ; j ++ ) { DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; } } return DP [ ln - 1 ] [ DP_s - 1 ] ; } public static void main ( String [ ] args ) { System . out . println ( getNumMonotone ( 10 ) ) ; } }
import java . io . * ; public class GFG { static int getNumMonotone ( int ln ) { int DP [ ] [ ] = new int [ ln ] [ ln ] ; for ( int i = 0 ; i < ln ; i ++ ) { DP [ 0 ] [ i ] = i + 1 ; DP [ i ] [ 0 ] = i + 1 ; } for ( int i = 0 ; i < ln ; i ++ ) { for ( int j = 1 ; j < DP_s ; j ++ ) { DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ; } } return DP [ ln - 1 ] [ DP_s - 1 ] ; } public static void main ( String [ ] args ) { System . out . println ( getNumMonotone ( 10 ) ) ; } }
import java . util . * ; public class GFG { static int maxCost ( int a [ ] , int n , int l , int r ) { int mx = 0 ; for ( int i = 0 ; i < n ; i ++ ) mx = Math . max ( mx , a [ i ] ) ; int count [ ] = new int [ n ] ; int [ ] res = new int [ n ] ; res [ 0 ] = 0 ; l = min ( l , r ) ; for ( int i = 0 ; i < n ; i ++ ) { int k = max ( num - l - 1 , 0 ) ; res [ num ] = Math . max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) ; } return res [ mx ] ; } public static void main ( String [ ] args ) { int a [ ] = { 2 , 1 , 2 , 3 , 2 , 2 , 1 } ; int l = 1 , r = 1 ; int n = a . length ; System . out . println ( maxCost ( a , n , l , r
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int
public class GFG { static int findArea ( int r ) { int PI = 3.142 ; return PI * ( r * r ) ; } public static void main ( String [ ] args ) { System . out . println ( " Area ▁ is ▁ " + findArea ( 5 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int k = sc . nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int [ ] ans = new int [ n ] ; int [ ] ans2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; int y = arr [
import java . io . * ; public class GFG { static int nthTerm ( int N ) { return ( int ) Math . abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) ; } public static void main ( String [ ] args ) { int N = 6 ; System . out . println ( nthTerm ( N ) ) ; } }
import java . io . * ; public class GFG { static int getHeight ( int X ) { return ( 2 * X ) ; } public static void main ( String [ ] args ) { int X = 35 ; System . out . println ( getHeight ( X ) ) ; } }
public class GFG { static int countwalks ( int graph [ ] [ ] , int u , int v , int k ) { if ( k == 0 && u == v ) return 1 ; if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ; if ( k <= 0 ) return 0 ; count = 0 ; for ( int i = 0 ; i < V ; i ++ ) { if ( graph [ u ] [ i ] == 1 ) count ++ ; if ( k <= 0 ) return 0 ; count = 0 ; for ( int i = 0 ; i < V ; i ++ ) { if ( graph [ u ] [ i ] == 1 ) count ++ ; if ( k <= 0 ) return 0 ; count = 0 ; } } return count ; } public static void main ( String [ ] args ) { int graph [ ] [ ] = { { 0 , 1 , 1 , 1 , 1 , 1 } , { 0 , 0 , 0 , 0 , 0 } } ; int u = 0 ; int v = 3 ; int k = 2 ; System . out . println ( countwalks ( graph , u , v , k ) ) ; } }
import java . io . * ; public class GFG { static int findDigits ( int n , int b ) { if ( n < 0 ) return 0 ; int M_PI = 3.1415992 ; int M_E = 2.7182 ; if ( n <= 1 ) return 1 ; int x = ( ( n * log10 ( n / M_E ) + log10 ( 2 * M_PI * n ) / 2.0 ) / ( log10 ( b ) ) ; return floor ( x ) + 1 ; } public static void main ( String [ ] args ) { int n = 4 , b = 8 ; System . out . println ( findDigits ( 4 , 16 ) ) ; System . out . println ( findDigits ( 5 , 8 ) ) ; System . out . println ( findDigits ( 12 , 16 ) ) ; System . out . println ( findDigits ( 19 , 13 ) ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < q ; i ++ ) { int x = a [ i ] ; int y = a
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; dp [ i ] [ j ] %= mod ; } } long ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { ans += dp [ i ] [ j ] * dp [ i ] [ j - 1 ] ; ans %= mod ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int p = sc . nextInt ( ) ; int q = sc . nextInt ( ) ; int [ ] arr = new int [ p ] ; for ( int i = 0 ; i < p ; i ++ ) { arr [ i ] = sc . nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < q ; i ++ ) { int x = arr [ i ] ; int y = arr [ i ] ; if ( x == 0 ) { ans = Math . min ( ans , y ) ; } else if ( x * y == p ) { ans = Math . min ( ans , y * ( p - x * y ) ) ; } } System . out . println ( ans ) ; } }
import java . util . * ; public class GFG { static int binary_conversion ( String s , int m ) { while ( m > 0 ) { int temp = m % 2 ; s += temp ; m /= 2 ; } return s . charAt ( 0 ) ; } static void find_character ( int n , int m , int i ) { String s = " " ; s = binary_conversion ( s , m ) ; s1 = " " ; for ( int x = 0 ; x < n ; x ++ ) { for ( int j = 0 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) == '1' ) s1 += "10" ; else s1 += "01" ; } s = s1 ; s1 = " " ; } s1 = " " ; } static void find_character ( int n , int m , int i ) { String s = " " ; s = binary_conversion ( s , m ) ; s1 = " " ; for ( int x = 0 ; x < n ; x ++ ) { for ( int j = 0 ; j < s . length ( )
public class GFG { static int countSubSets ( int arr [ ] , int n ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { us . add ( arr [ i ] ) ; } } int even_count = 0 ; int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { even_count ++ ; } even_count = 2 * even_count ; } int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { even_count ++ ; } even_count = 2 * even_count ; } int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { even_count ++ ; } even_count = 2 * even_count ; } int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { even_count ++ ; } even_count = 2 * even_count ; } int even_count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { even_count ++ ; } even_count = 2 * even_count ; } int even_count
import java . util . * ; public class GFG { static int MAX = 1000 ; static int f [ ] = new int [ MAX ] ; static int f [ ] = new int [ MAX ] ; static int k = ( int ) Math . pow ( 10 , 9 ) ; static int gcd ( int a , int b ) { if ( a == 0 ) return b ; return f [ a ] * f [ b ] + f [ a - 1 ] * f [ b - 1 ] ; } static int findLCMFibonacci ( int a , int b ) { return ( f [ a ] * fib
public class GFG { static int findNumbers ( int n , int w ) { int x = 0 ; int sum = 0 ; if ( w >= 0 && w <= 8 ) x = 9 - w ; else if ( w >= - 9 && w <= - 1 ) x = 10 + w ; sum = ( x * sum ) ; return sum ; } public static void main ( String [ ] args ) { int n = 3 ; int w = 4 ; System . out . println ( findNumbers ( n , w ) ) ; } }
import java . util . * ; public class GFG { static int findKthChar ( String s , int k ) { int len1 = s . length ( ) ; int i = 0 ; int total_len = 0 ; while ( i < len1 ) { if ( s . charAt ( i ) . isAlpha ( ) ) { total_len += 1 ; if ( total_len == k ) return s . charAt ( i ) ; i ++ ; } else { int n = 0 ; while ( i < len1 && s . charAt ( i ) . isAlpha ( ) == False ) n = n * 10 + ( s . charAt ( i ) - '0' ) ; int next_total_len = total_len * n ; if ( k <= next_total
public class GFG { static int countNonEmptySubstr ( String str ) { int n = str . length ( ) ; return ( n * ( n + 1 ) / 2 ) ; } public static void main ( String [ ] args ) { String str = " abcde " ; System . out . println ( countNonEmptySubstr ( str ) ) ; } }
