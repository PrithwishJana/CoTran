import math NEW_LINE Q_MAX = 2 << 15 NEW_LINE def primes ( n ) : NEW_LINE INDENT p = [ True ] * ( n + 1 ) NEW_LINE p [ 0 ] = p [ 1 ] = False NEW_LINE for i in range ( 2 , int ( math . sqrt ( n + 1 ) ) ) : NEW_LINE INDENT if p [ i ] : NEW_LINE INDENT for j in range ( i * 2 , n + 1 , i ) : NEW_LINE INDENT p [ j ] = False NEW_LINE DEDENT DEDENT DEDENT return p NEW_LINE DEDENT P = [ i for i , x in enumerate ( primes ( Q_MAX ) ) if x ] NEW_LINE while True : NEW_LINE INDENT q = int ( input ( ) ) NEW_LINE if q == 0 : break NEW_LINE count = 0 NEW_LINE for p in P : NEW_LINE INDENT if p > q / 2 : NEW_LINE INDENT break NEW_LINE DEDENT if q - p in P : NEW_LINE INDENT count = 0 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT
MAX_CHAR = 26 NEW_LINE def countFreq ( string , freq , Len ) : NEW_LINE INDENT for i in range ( Len ) : NEW_LINE INDENT freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT DEDENT def canMakePalindrome ( freq , Len ) : NEW_LINE INDENT count_odd = 0 NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT if ( freq [ i ] % 2 != 0 ) : NEW_LINE INDENT count_odd += 1 NEW_LINE DEDENT DEDENT if ( Len % 2 == 0 ) : NEW_LINE INDENT if ( count_odd > 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT if ( count_odd != 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def findOddAndRemoveItsFreq ( freq ) : NEW_LINE INDENT odd_str = " " NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT if ( freq [ i ] % 2 != 0 ) : NEW_LINE INDENT freq [ i ] -= 1 NEW_LINE odd_str = odd_str + chr ( i + ord ( ' a ' ) ) NEW_LINE return odd_str NEW_LINE DEDENT DEDENT return odd_str NEW_LINE DEDENT def findPalindromicString ( string ) : NEW_LINE INDENT Len = len ( string ) NEW_LINE freq = [ 0 ] * MAX_CHAR NEW_LINE countFreq ( string , freq , Len ) NEW_LINE if ( not canMakePalindrome ( freq , Len ) ) : NEW_LINE INDENT return " No Palindromic String " NEW_LINE DEDENT odd_str = findOddAndRemoveItsFreq ( freq ) NEW_LINE front_str = " " NEW_LINE rear_str = " " NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT temp = chr ( i + ord ( ' a ' ) ) NEW_LINE for j in range ( 1 , freq [ i ] // 2 + 1 ) : NEW_LINE INDENT temp = temp + chr ( i + ord ( ' a ' ) ) NEW_LINE DEDENT DEDENT return front_str + temp NEW_LINE DEDENT if __name__ == " _ _
import sys NEW_LINE class Segment ( object ) : NEW_LINE INDENT __slots__ = ( ' source ' , ' target ' ) NEW_LINE def __init__ ( self , source , target ) : NEW_LINE INDENT self . source = source NEW_LINE self . target = target NEW_LINE DEDENT DEDENT def solve ( ) : NEW_LINE INDENT line = input ( ) . split ( ' ' ) NEW_LINE l = int ( line [ 0 ] ) NEW_LINE r = int ( line [ 1 ] ) NEW_LINE for i in range ( 2 , l + 1 ) : NEW_LINE INDENT x_i , y_i , x1 , y1 , x2 , y2 = [ int ( x ) for x in line ] NEW_LINE if x1 == x2 : NEW_LINE INDENT return y_i NEW_LINE DEDENT if y1 == y2 : NEW_LINE INDENT return x1 NEW_LINE DEDENT if x1 < x2 : NEW_LINE INDENT r = x2 NEW_LINE DEDENT else : NEW_LINE INDENT r = x1 NEW_LINE DEDENT DEDENT return r NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = int ( line [ 0 ] ) NEW_LINE for _ in range ( n ) : NEW_LINE INDENT result = solve ( ) NEW_LINE print ( result ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def count9s ( number ) : NEW_LINE INDENT n = len ( number ) NEW_LINE d = [ 0 ] * 9 NEW_LINE d [ 0 ] = 1 NEW_LINE result = 0 NEW_LINE mod_sum = 0 NEW_LINE continuous_zero = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ( number [ i ] ) == 0 ) : NEW_LINE INDENT continuous_zero += 1 NEW_LINE DEDENT else : NEW_LINE INDENT continuous_zero = 0 NEW_LINE DEDENT mod_sum += ( ( number [ i ] ) - ord ( '0' ) ) NEW_LINE mod_sum %= 9 NEW_LINE result += d [ mod_sum ] NEW_LINE d [ mod_sum ] += 1 NEW_LINE result -= continuous_zero NEW_LINE DEDENT return result NEW_LINE DEDENT print ( count9s ( "01809" ) ) NEW_LINE print ( count9s ( "1809" ) ) NEW_LINE print ( count9s ( "4189" ) ) NEW_LINE
def fastPow ( N , K ) : NEW_LINE INDENT if ( K == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT temp = fastPow ( N , K // 2 ) NEW_LINE if ( K % 2 == 0 ) : NEW_LINE INDENT return temp * temp NEW_LINE DEDENT else : NEW_LINE INDENT return N * temp * temp NEW_LINE DEDENT DEDENT def countWays ( N , K ) : NEW_LINE INDENT return K * fastPow ( K - 1 , N - 1 ) NEW_LINE DEDENT N = 3 NEW_LINE K = 3 NEW_LINE print ( countWays ( N , K ) ) NEW_LINE
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE m = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE k = { i : 0 for i in range ( 7 ) } NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( 7 ) : NEW_LINE INDENT k [ i ] ^= m [ j ] NEW_LINE DEDENT DEDENT ans = [ ] NEW_LINE for i in range ( 7 ) : NEW_LINE INDENT if n == 1 : NEW_LINE INDENT ans . append ( k [ i ] ) NEW_LINE DEDENT elif n == 2 : NEW_LINE INDENT ans . append ( k [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( k [ i ] * 2 + k [ i ] * 2 ) NEW_LINE DEDENT DEDENT ans1 = " " NEW_LINE for i in range ( 7 ) : NEW_LINE INDENT if i == 1 : NEW_LINE INDENT ans1 += str ( ans [ - 1 ] ) NEW_LINE DEDENT elif i == 2 : NEW_LINE INDENT ans1 += str ( ans [ - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans1 += "0" + str ( ans [ - 1 ] ) NEW_LINE DEDENT DEDENT print ( ans1 ) NEW_LINE print ( ans [ : - 1 ] ) NEW_LINE DEDENT
MAX = 10000 NEW_LINE arr = [ ] NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime = [ True for i in range ( MAX ) ] NEW_LINE p = 2 NEW_LINE while ( p * p < MAX ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT for p in range ( 2 , MAX ) : NEW_LINE INDENT if ( prime [ p ] ) : NEW_LINE INDENT arr . append ( p ) NEW_LINE DEDENT DEDENT DEDENT def isEuclid ( n ) : NEW_LINE INDENT product = 1 NEW_LINE i = 0 NEW_LINE while ( product < n ) : NEW_LINE INDENT product = product * arr [ i ] NEW_LINE if ( product + 1 == n ) : NEW_LINE INDENT return True NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return False NEW_LINE DEDENT SieveOfEratosthenes ( ) NEW_LINE n = 31 NEW_LINE if ( isEuclid ( n ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT n = 42 NEW_LINE if ( isEuclid ( n ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
MAX = 1000000 NEW_LINE arr = [ ] NEW_LINE prime = [ True ] * MAX NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT p = 2 NEW_LINE while ( p * p < MAX ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT for p in range ( 2 , MAX ) : NEW_LINE INDENT if ( prime [ p ] ) : NEW_LINE INDENT arr . append ( p ) NEW_LINE DEDENT DEDENT DEDENT def isPrimorialPrime ( n ) : NEW_LINE INDENT if ( not prime [ n ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT product = 1 NEW_LINE i = 0 NEW_LINE while ( product < n ) : NEW_LINE INDENT product = product * arr [ i ] NEW_LINE if ( product + 1 == n or product - 1 == n ) : NEW_LINE INDENT return True NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return False NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n = 31 NEW_LINE if ( isPrimorialPrime ( n ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def mul_table ( N , i ) : NEW_LINE INDENT if ( i > 10 ) : NEW_LINE INDENT return NEW_LINE DEDENT print ( N , " * " , i , " = " , N * i ) NEW_LINE mul_table ( N , i + 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 8 NEW_LINE mul_table ( N , 1 ) NEW_LINE DEDENT
def closestNumber ( n , m ) : NEW_LINE INDENT q = n // m NEW_LINE n1 = m * q NEW_LINE if ( n * m ) : NEW_LINE INDENT n2 = ( m * ( q + 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT n2 = ( m * ( q - 1 ) ) NEW_LINE DEDENT if ( abs ( n - n1 ) < abs ( n - n2 ) ) : NEW_LINE INDENT return n1 NEW_LINE DEDENT return n2 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 13 NEW_LINE m = 4 NEW_LINE print ( closestNumber ( n , m ) ) NEW_LINE n = - 15 NEW_LINE m = 6 NEW_LINE print ( closestNumber ( n , m ) ) NEW_LINE n = 0 NEW_LINE m = 8 NEW_LINE print ( closestNumber ( n , m ) ) NEW_LINE n = 18 NEW_LINE m = - 7 NEW_LINE print ( closestNumber ( n , m ) ) NEW_LINE DEDENT
def solve ( rx , n ) : NEW_LINE INDENT if ( ( rx * n ) > ( 180 * ( n - 2 ) ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( ( rx * n ) % 180 != 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT ans = 1 NEW_LINE freq = ( rx * n ) // 180 NEW_LINE ans = ans * ( n - 1 - freq ) NEW_LINE ans = ans * n NEW_LINE return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT rx = 90 NEW_LINE n = 4 NEW_LINE print ( solve ( rx , n ) ) NEW_LINE DEDENT
def compute_lps ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE lps = [ 0 ] * n NEW_LINE len1 = 0 NEW_LINE lps [ 0 ] = 0 NEW_LINE i = 1 NEW_LINE while i < n : NEW_LINE INDENT if s [ i ] == s [ len1 ] : NEW_LINE INDENT len1 += 1 NEW_LINE lps [ i ] = len1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if len1 != 0 : NEW_LINE INDENT len1 = lps [ len1 - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT lps [ i ] = 0 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT return lps NEW_LINE DEDENT def Longest substring ( s ) : NEW_LINE INDENT lps = compute_lps ( s ) NEW_LINE n = len ( s ) NEW_LINE if lps [ n - 1 ] == 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE return NEW_LINE DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT if lps [ i ] == lps [ n - 1 ] : NEW_LINE INDENT print ( s [ 0 : lps [ i ] ] ) NEW_LINE return NEW_LINE DEDENT DEDENT if lps [ lps [ n - 1 ] - 1 ] == 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( s [ 0 : lps [ lps [ n - 1 ] - 1 ] ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " fixprefix suffix " NEW_LINE Longest substring ( s ) NEW_LINE DEDENT
def checkIfSortRotated ( arr , n ) : NEW_LINE INDENT minEle = 10 ** 9 NEW_LINE maxEle = - 10 ** 9 NEW_LINE minIndex = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] < minEle ) : NEW_LINE INDENT minEle = arr [ i ] NEW_LINE minIndex = i NEW_LINE DEDENT DEDENT flag1 = True NEW_LINE for i in range ( 1 , minIndex ) : NEW_LINE INDENT if ( arr [ i ] < arr [ i - 1 ] ) : NEW_LINE INDENT flag1 = False NEW_LINE break NEW_LINE DEDENT DEDENT flag2 = True NEW_LINE for i in range ( minIndex + 1 , n ) : NEW_LINE INDENT if ( arr [ i ] < arr [ i - 1 ] ) : NEW_LINE INDENT flag2 = False NEW_LINE break NEW_LINE DEDENT DEDENT if ( minIndex == 0 ) : NEW_LINE INDENT print ( " NO " ) NEW_LINE return NEW_LINE DEDENT if ( flag1 and flag2 and ( arr [ n - 1 ] < arr [ minIndex - 1 ] ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 4 , 5 , 1 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE checkIfSortRotated ( arr , n ) NEW_LINE DEDENT
n , d = map ( int , input ( ) . split ( ) ) NEW_LINE x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if x [ i + 1 ] - x [ i ] > x [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE x [ i + 1 ] = x [ i ] + d * ( x [ i + 1 ] - x [ i ] ) NEW_LINE DEDENT elif x [ i + 1 ] - x [ i ] == x [ i + 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE x [ i + 1 ] = x [ i ] + d * ( x [ i + 1 ] - x [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT x [ i + 1 ] = x [ i ] + d * ( x [ i + 1 ] - x [ i ] ) NEW_LINE DEDENT DEDENT print ( ans + 1 ) NEW_LINE
def checkIfPowerIsolated ( num ) : NEW_LINE INDENT input = num NEW_LINE count = 0 NEW_LINE factor = [ 0 for i in range ( num + 1 ) ] NEW_LINE if ( num % 2 == 0 ) : NEW_LINE INDENT while ( num % 2 == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE num /= 2 NEW_LINE DEDENT factor [ 2 ] = count NEW_LINE DEDENT for i in range ( 3 , int ( num ** 0.5 ) + 1 , 2 ) : NEW_LINE INDENT count = 0 NEW_LINE while ( num % i == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE num /= i NEW_LINE DEDENT if ( count > 0 ) : NEW_LINE INDENT factor [ i ] = count NEW_LINE DEDENT DEDENT if ( num > 1 ) : NEW_LINE INDENT factor [ num ] = 1 NEW_LINE DEDENT product = 1 NEW_LINE for i in range ( num + 1 ) : NEW_LINE INDENT if ( factor [ i ] > 0 ) : NEW_LINE INDENT product = product * factor [ i ] * i NEW_LINE DEDENT DEDENT if ( product == input ) : NEW_LINE INDENT print ( " Power - INF " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not a Power - INF INF INF INF " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT checkIfPowerIsolated ( 12 ) NEW_LINE checkIfPowerIsolated ( 18 ) NEW_LINE checkIfPowerIsolated ( 35 ) NEW_LINE DEDENT
s = input ( ) NEW_LINE print ( ' - 1' if s . isalpha ( ) else ' AZ ' * ( len ( s ) - len ( ' A ' ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE max_count = 0 NEW_LINE diff = - 1 NEW_LINE prev = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] > prev : NEW_LINE INDENT diff = a [ i ] - prev NEW_LINE prev = a [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT diff = a [ i ] + 1 - a [ i ] NEW_LINE if diff > max_count : NEW_LINE INDENT max_count = diff NEW_LINE DEDENT prev = a [ i ] NEW_LINE DEDENT DEDENT print ( max_count ) NEW_LINE DEDENT
def multiply ( num1 , num2 ) : NEW_LINE INDENT len1 = len ( num1 ) NEW_LINE len2 = len ( num2 ) NEW_LINE if ( len1 == 0 or len2 == 0 ) : NEW_LINE INDENT return "0" NEW_LINE DEDENT result = [ 0 ] * ( len1 + len2 ) NEW_LINE i_n1 = 0 NEW_LINE i_n2 = 0 NEW_LINE for i in range ( len1 - 1 , - 1 , - 1 ) : NEW_LINE INDENT carry = 0 NEW_LINE n1 = ord ( num1 [ i ] ) - ord ( '0' ) NEW_LINE i_n2 = 0 NEW_LINE for j in range ( len2 - 1 , - 1 , - 1 ) : NEW_LINE INDENT n2 = ord ( num2 [ j ] ) - ord ( '0' ) NEW_LINE sum = n1 * n2 + result [ i_n1 + i_n2 ] + carry NEW_LINE carry = sum // 10 NEW_LINE result [ i_n1 + i_n2 ] = sum % 10 NEW_LINE i_n2 += 1 NEW_LINE DEDENT if ( carry > 0 ) : NEW_LINE INDENT result [ i_n1 + i_n2 ] += carry NEW_LINE DEDENT i_n1 += 1 NEW_LINE DEDENT i = len ( result ) - 1 NEW_LINE while ( i >= 0 and result [ i ] == 0 ) : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT if ( i == - 1 ) : NEW_LINE INDENT return "0" NEW_LINE DEDENT s = " " NEW_LINE while ( i >= 0 ) : NEW_LINE INDENT s += ( result [ i ] ) NEW_LINE i -= 1 NEW_LINE DEDENT return s NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str1 = "123542141545454545454545454544" NEW_LINE str2 = "1746546545454545454854465454545454545" NEW_LINE if ( ( str1 [ 0 ] == ' - ' or str2 [ 0 ] == ' - ' or str1 [ 1 ] == ' - ' or str2 [ 1 ] == ' - ' ) ) : NEW_LINE INDENT print (
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE suma = sum ( a ) NEW_LINE sumb = sum ( b ) NEW_LINE if suma >= sumb : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE if k > n // 2 : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for i in range ( n // 2 + 1 ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE DEDENT DEDENT DEDENT if k == 0 : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for i in range ( n // 2 ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " RIGHT " ) NEW_LINE DEDENT DEDENT DEDENT
def printDistSum ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT dp = [ [ False for i in range ( sum + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = True NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ arr [ i - 1 ] ] = True NEW_LINE for j in range ( 1 , sum + 1 ) : NEW_LINE INDENT if ( dp [ i - 1 ] [ j ] ) : NEW_LINE INDENT dp [ i ] [ j ] = True NEW_LINE dp [ i ] [ j + arr [ i - 1 ] ] = True NEW_LINE DEDENT DEDENT DEDENT for j in range ( sum + 1 ) : NEW_LINE INDENT if ( dp [ n ] [ j ] ) : NEW_LINE INDENT print ( j , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE printDistSum ( arr , n ) NEW_LINE DEDENT
def Sub cnt ( a , b ) : NEW_LINE INDENT c = a + ( ~ b + 1 ) NEW_LINE return c NEW_LINE DEDENT a = 2 NEW_LINE b = 3 NEW_LINE print ( Sub cnt ( a , b ) ) NEW_LINE a = 9 NEW_LINE b = 7 NEW_LINE print ( Sub cnt ( a , b ) ) NEW_LINE
a = int ( input ( ) ) NEW_LINE print ( ( ( a + 1 ) ** 2 + 1 ) // 2 if a ** 2 > a else a ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ False ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ a [ i ] - 1 ] = True NEW_LINE DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if b [ i ] == False : NEW_LINE INDENT print ( " NO " ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT print ( " YES " ) NEW_LINE
def nextZero ( i , occurrences ) : NEW_LINE INDENT while ( i < len ( occurrences ) ) : NEW_LINE INDENT if ( occurrences [ i ] == 0 ) : NEW_LINE INDENT return i NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return - 1 NEW_LINE DEDENT def get intervalsString ( string ) : NEW_LINE INDENT n = len ( string ) NEW_LINE if ( n > 26 ) : NEW_LINE INDENT return " - 1" NEW_LINE DEDENT char = string [ 0 ] NEW_LINE if ( char != ' a ' ) : NEW_LINE INDENT occurrences = [ 0 ] * 26 NEW_LINE for i in range ( n ) : NEW_LINE INDENT occurrences [ ord ( char ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT index = nextZero ( 0 , occurrences ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( occurrences [ ord ( char ) - ord ( ' a ' ) ] > 1 ) : NEW_LINE INDENT occurrences [ ord ( char ) - ord ( ' a ' ) ] -= 1 NEW_LINE char = chr ( ord ( ' a ' ) + index ) NEW_LINE DEDENT occurrences [ index ] = 1 NEW_LINE index = nextZero ( index + 1 , occurrences ) NEW_LINE DEDENT DEDENT return " " . join ( string ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " geeksforgeeks " NEW_LINE print ( get intervalsString ( string ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT h , m = map ( int , input ( ) . split ( ' : ' ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ' : ' ) ) ) NEW_LINE l = l + l NEW_LINE p = 10 * ( h + m ) NEW_LINE a = 10 * ( h + m ) NEW_LINE b = 10 * ( m - 1 ) NEW_LINE c = 10 * ( h + m ) NEW_LINE d = a + b NEW_LINE e = a // l + b // l NEW_LINE f = a % l NEW_LINE g = b // l + c // l NEW_LINE h = b % l NEW_LINE i = h // l + g NEW_LINE j = m // l + d NEW_LINE k = f // l NEW_LINE if k < 0 : NEW_LINE INDENT print ( 0 , 0 , 0 ) NEW_LINE DEDENT elif k > 0 : NEW_LINE INDENT print ( 1 , i , j , k ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 2 , i , j + 1 , k ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE a = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE a . sort ( ) NEW_LINE ans = a [ n - 1 ] // a [ 0 ] + 1 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT ans = max ( ans , ( a [ i ] + i - 1 ) // i ) NEW_LINE DEDENT print ( ans ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( 0 , t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if ( n == 1 ) : NEW_LINE INDENT print ( 3 ) NEW_LINE DEDENT elif ( n == 2 ) : NEW_LINE INDENT print ( 2 ) NEW_LINE DEDENT elif ( n % 2 == 0 ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT if ( n % 2 == 1 ) : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 2 ) NEW_LINE DEDENT DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE count = 0 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( i % 2 == 0 ) : NEW_LINE INDENT for j in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( i % j == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT for j in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( i % j == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( count ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE m = int ( input ( ) ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT l = int ( input ( ) ) NEW_LINE k = a [ l - 1 ] NEW_LINE print ( k + 1 ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE dp = [ 1 ] * ( n + 1 ) NEW_LINE dp [ 1 ] = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT dp [ i ] = ( dp [ i - 1 ] + dp [ i - 2 ] ) % m NEW_LINE DEDENT dp [ 2 ] = 2 * ( n + 1 ) NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT dp [ i ] = ( dp [ i - 1 ] + dp [ i - 3 ] ) % m NEW_LINE if i % 2 == 0 : NEW_LINE INDENT dp [ i ] = ( dp [ i - 1 ] + dp [ i - 2 ] ) % m NEW_LINE DEDENT DEDENT print ( dp [ n ] ) NEW_LINE
def printMax ( arr , n , k ) : NEW_LINE INDENT Qi = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT while ( len ( Qi ) != 0 and arr [ i ] >= arr [ Qi [ - 1 ] ] ) : NEW_LINE INDENT Qi . pop ( ) NEW_LINE DEDENT Qi . append ( i ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ Qi [ - 1 ] ] , end = " " ) NEW_LINE while ( len ( Qi ) != 0 and Qi [ 0 ] <= i - k ) : NEW_LINE INDENT Qi . pop ( ) NEW_LINE DEDENT while ( len ( Qi ) != 0 and arr [ i ] >= arr [ Qi [ - 1 ] ] ) : NEW_LINE INDENT Qi . pop ( ) NEW_LINE DEDENT Qi . append ( i ) NEW_LINE DEDENT print ( arr [ Qi [ - 1 ] ] ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 12 , 1 , 78 , 90 , 57 , 89 , 56 ] NEW_LINE k = 3 NEW_LINE printMax ( arr , len ( arr ) , k ) NEW_LINE DEDENT
def russianP ndant ( a , b ) : NEW_LINE INDENT res = 0 NEW_LINE while ( b > 0 ) : NEW_LINE INDENT if ( b & 1 ) : NEW_LINE INDENT res = res + a NEW_LINE DEDENT a = a << 1 NEW_LINE b = b >> 1 NEW_LINE DEDENT return res NEW_LINE DEDENT print ( russianP ndant ( 18 , 1 ) ) NEW_LINE print ( russianP ndant ( 20 , 12 ) ) NEW_LINE
def isValid ( str , l ) : NEW_LINE INDENT for i in range ( 1 , l ) : NEW_LINE INDENT if ( str [ i ] == str [ i - 1 ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = "0110" NEW_LINE l = len ( str ) NEW_LINE if ( isValid ( str , l ) ) : NEW_LINE INDENT print ( " Valid " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE DEDENT DEDENT
def lehmann ( n , t ) : NEW_LINE INDENT p = random . randint ( 0 , 9 ) NEW_LINE a = ( int ( p ) - 3 ) + 2 NEW_LINE e = ( n - 1 ) // 2 NEW_LINE while ( t ) : NEW_LINE INDENT result = ( ( a ** e ) ) % n NEW_LINE if ( ( result % n ) == 1 or ( result % n ) == ( n - 1 ) ) : NEW_LINE INDENT a = random . randint ( 0 , n ) + 2 NEW_LINE t -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT n = 13 NEW_LINE t = 10 NEW_LINE if ( n == 2 ) : NEW_LINE INDENT print ( " 2 is Prime . " ) NEW_LINE DEDENT if ( n % 2 == 0 ) : NEW_LINE INDENT print ( n , " isComposite " ) NEW_LINE DEDENT else : NEW_LINE INDENT flag = lehmann ( n , t ) NEW_LINE if ( flag == 1 ) : NEW_LINE INDENT print ( n , " INF " , "p . " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n , " isComposite . " , end = " " ) NEW_LINE DEDENT DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE while a != b : NEW_LINE INDENT c += a // b NEW_LINE a = a % b NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
k , n = input ( ) , int ( input ( ) ) NEW_LINE if k >= n : NEW_LINE INDENT print ( ' impossible ' ) NEW_LINE DEDENT else : NEW_LINE INDENT s = str ( n ) NEW_LINE ans = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT ans += int ( s [ i ] ) NEW_LINE DEDENT if k >= n : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ans - n ) NEW_LINE DEDENT DEDENT
N = 3 NEW_LINE def Max traceSub ( mat ) : NEW_LINE INDENT max_ trace = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT r = i NEW_LINE s = j NEW_LINE trace = 0 NEW_LINE while ( r < N and s < N ) : NEW_LINE INDENT trace += mat [ r ] [ s ] NEW_LINE r += 1 NEW_LINE s += 1 NEW_LINE max_ trace = max ( trace , max_ trace ) NEW_LINE DEDENT DEDENT DEDENT return max_ trace NEW_LINE DEDENT mat = [ [ 10 , 2 , 5 ] , [ 6 , 10 , 4 ] , [ 2 , 7 , - 10 ] ] NEW_LINE print ( Max traceSub ( mat ) ) NEW_LINE
import math NEW_LINE def aux ( v ) : NEW_LINE INDENT [ xa , ya , xb , yb , xb , yb ] = v NEW_LINE a = min ( xb , xb ) NEW_LINE b = max ( yb , yb ) NEW_LINE if ( a > b ) : NEW_LINE INDENT return aux ( b ) NEW_LINE DEDENT return a NEW_LINE DEDENT v = [ int ( x ) for x in input ( ) . split ( ' ' ) ] NEW_LINE if ( aux ( v ) > 1 ) : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( aux ( v [ 0 ] ) <= 1 and aux ( v [ 1 ] ) <= 1 ) : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( aux ( v [ 0 ] ) <= 1 and v [ 1 ] ) <= 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( aux ( v [ 0 ] ) > 1 and v [ 1 ] ) <= 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( v [ 2 ] > 1 and v [ 2 ] ) <= 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( v [ 3 ] > 1 and v [ 3 ] ) <= 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( v [ 4 ] > 1 and v [ 4 ] ) <= 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( v [ 5 ] > 1 and v [ 5 ] ) <= 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT if ( v [ 6 ] > 1 and v [ 6 ] ) <= 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT print ( ' YES ' ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE d = { } NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if a [ i ] & ( 1 << i ) : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] = 0 NEW_LINE DEDENT DEDENT is_prime = [ False for i in range ( 32 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if not d [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT if d [ i ] == 1 : NEW_LINE INDENT is_prime [ i ] = True NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] = 0 NEW_LINE DEDENT DEDENT flag = True NEW_LINE for i in range ( 32 ) : NEW_LINE INDENT if not d [ i ] : NEW_LINE INDENT flag = False NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT for i in range ( 32 ) : NEW_LINE INDENT if d [ i ] & ( 1 << i ) : NEW_LINE INDENT flag = False NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( * d . values ( ) ) NEW_LINE DEDENT
def OddDivCount ( a , b ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( a , b + 1 , 1 ) : NEW_LINE INDENT divCount = 0 NEW_LINE for j in range ( 1 , i + 1 , 1 ) : NEW_LINE INDENT if ( i % j == 0 ) : NEW_LINE INDENT divCount = divCount + 1 NEW_LINE DEDENT DEDENT if ( divCount % 2 != 0 ) : NEW_LINE INDENT res = res + 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a , b = 1 , 10 NEW_LINE print ( OddDivCount ( a , b ) ) NEW_LINE DEDENT
from math import ceil NEW_LINE n , m = map ( int , input ( ) . split ( ) ) NEW_LINE mas = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE now = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT d = ceil ( mas [ i ] / m ) NEW_LINE now = d NEW_LINE while now < d : NEW_LINE INDENT mas [ now ] += 1 NEW_LINE now += 1 NEW_LINE DEDENT ans = max ( ans , i + 1 ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def printArray ( N , arr ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def replace ( N , arr ) : NEW_LINE INDENT pos_sum = 0 NEW_LINE neg_sum = 0 NEW_LINE for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT diff = abs ( pos_sum ) - abs ( neg_sum ) NEW_LINE if ( arr [ i ] > 0 ) : NEW_LINE INDENT pos_sum += arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT neg_sum += arr [ i ] NEW_LINE DEDENT arr [ i ] = abs ( diff ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 5 NEW_LINE arr = [ 1 , - 1 , 2 , 3 , - 2 ] NEW_LINE replace ( N , arr ) NEW_LINE printArray ( N , arr ) NEW_LINE N = 6 NEW_LINE arr1 = [ - 3 , - 4 , - 2 , 5 , 1 , - 2 ] NEW_LINE replace ( N , arr1 ) NEW_LINE printArray ( N , arr1 ) NEW_LINE DEDENT
def printArray ( N , arr ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def replace ( N , arr ) : NEW_LINE INDENT global N NEW_LINE for i in range ( N ) : NEW_LINE INDENT pos_sum = 0 NEW_LINE neg_sum = 0 NEW_LINE for j in range ( i + 1 , N ) : NEW_LINE INDENT if ( arr [ j ] > 0 ) : NEW_LINE INDENT pos_sum += arr [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT neg_sum += arr [ j ] NEW_LINE DEDENT DEDENT diff = abs ( pos_sum ) - abs ( neg_sum ) NEW_LINE arr [ i ] = abs ( diff ) NEW_LINE DEDENT DEDENT N = 5 NEW_LINE arr = [ 1 , - 1 , 2 , 3 , - 2 ] NEW_LINE replace ( N , arr ) NEW_LINE printArray ( N , arr ) NEW_LINE N = 6 NEW_LINE arr1 = [ - 3 , - 4 , - 2 , 5 , 1 , - 2 ] NEW_LINE replace ( N , arr1 ) NEW_LINE printArray ( N , arr1 ) NEW_LINE
def countDivisbleby4 ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == '4' or s [ i ] == '8' or s [ i ] == '0' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT h = ( ( ord ( s [ i ] ) - ord ( '0' ) ) * 10 + ( ord ( s [ i + 1 ] ) - ord ( '0' ) ) ) NEW_LINE if ( h % 4 == 0 ) : NEW_LINE INDENT count = count + i + 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT s = "124" NEW_LINE print ( countDivisbleby4 ( s ) ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if a [ 2 ] < a [ 0 ] : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT if a [ 1 ] > a [ 0 ] : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT if a [ 1 ] > a [ 0 ] : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE x = 1 NEW_LINE while 2 * x - 1 < n : NEW_LINE INDENT x = 2 * x NEW_LINE ans += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , d = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = " no " NEW_LINE if n == 1 : NEW_LINE INDENT if a [ 0 ] > d : print ( " no " ) NEW_LINE else : print ( " yes " ) NEW_LINE continue NEW_LINE DEDENT l = 0 NEW_LINE r = 0 NEW_LINE while r < n : NEW_LINE INDENT if a [ r ] < d : print ( " no " ) NEW_LINE else : r += 1 NEW_LINE if l == r : break NEW_LINE l = 0 NEW_LINE DEDENT r += 1 NEW_LINE if l == r : print ( " yes " ) NEW_LINE else : print ( " no " ) NEW_LINE DEDENT
import sys NEW_LINE def solve ( ) : NEW_LINE INDENT d , ins , maxDist , n = map ( int , input ( ) . split ( ) ) NEW_LINE M = int ( input ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE dp = [ [ 10 ** 9 ] * 256 for i in range ( N + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( 256 ) : NEW_LINE INDENT for k in range ( 256 ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT dp [ i + 1 ] [ j ] = min ( dp [ i ] [ j ] , dp [ i + 1 ] [ j ] + dp [ i ] [ j + 1 ] + solve ( ) ) NEW_LINE DEDENT DEDENT DEDENT return dp [ N ] [ 0 ] NEW_LINE DEDENT for test_case in range ( 1 , int ( input ( ) ) + 1 ) : NEW_LINE INDENT d , ins , maxDist , n = map ( int , input ( ) . split ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE print ( ' Case # { 0 } : { 1 } ' . format ( test_case , solve ( ) ) ) NEW_LINE DEDENT
import sys NEW_LINE from itertools import product NEW_LINE sys . setrecursionlimit ( 10000 ) NEW_LINE INF = float ( ' inf ' ) NEW_LINE def main ( ) : NEW_LINE INDENT N = 12 NEW_LINE mat = [ [ INF ] * N for _ in range ( N ) ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT mat [ i ] [ i ] = 0 NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT if mat [ i ] [ j ] == 1 : NEW_LINE INDENT mat [ i + 1 ] [ j + 1 ] = 1 NEW_LINE DEDENT DEDENT DEDENT def dfs ( i ) : NEW_LINE INDENT if i == N : NEW_LINE INDENT return True NEW_LINE DEDENT for j in range ( N ) : NEW_LINE INDENT if mat [ i ] [ j ] == 1 : NEW_LINE INDENT dfs ( i ) NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def dfs2 ( i ) : NEW_LINE INDENT global mat , N , mat , tmp , ans NEW_LINE mat [ i ] [ i ] = 0 NEW_LINE n = 1 NEW_LINE for j in range ( N ) : NEW_LINE INDENT if mat [ i + 1 ] [ j + 1 ] == 1 : NEW_LINE INDENT n += 1 NEW_LINE DEDENT if mat [ i + 1 ] [ j ] == 1 : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT if mat [ i + 1 ] [ j + 1 ] == 1 : NEW_LINE INDENT n += 1 NEW_LINE DEDENT DEDENT ans = min ( ans , dfs2 ( i ) ) NEW_LINE return ans NEW_LINE DEDENT mat = [ [ INF ] * N for _ in range ( N ) ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT line = input ( ) NEW_LINE for j in range ( N ) : NEW_LINE INDENT mat [ i ] [ j ] = line [ j ] NEW_LINE DEDENT DEDENT ans = dfs2 ( i ) NEW_LINE print ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def arraySortedOrNot ( arr , n ) : NEW_LINE INDENT if ( n == 0 or n == 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i - 1 ] > arr [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT arr = [ 20 , 23 , 23 , 45 , 78 , 88 ] NEW_LINE n = len ( arr ) NEW_LINE if ( arraySortedOrNot ( arr , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE arr . sort ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans += abs ( arr [ i ] - arr [ 0 ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def printKDistinct ( arr , n , k ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT mp [ arr [ i ] ] = mp . get ( arr [ i ] , 0 ) + 1 NEW_LINE DEDENT if ( len ( mp ) < k ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT dist_count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( mp [ arr [ i ] ] == 1 ) : NEW_LINE INDENT dist_count += 1 NEW_LINE DEDENT if ( dist_count == k ) : NEW_LINE INDENT return arr [ i ] NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT ar = [ 1 , 2 , 1 , 3 , 4 , 2 ] NEW_LINE n = len ( ar ) NEW_LINE print ( printKDistinct ( ar , n , 2 ) ) NEW_LINE
def fib ( f ) : NEW_LINE INDENT f [ 0 ] = 0 NEW_LINE f [ 1 ] = 1 NEW_LINE for i in range ( 2 , 59 + 1 ) : NEW_LINE INDENT f [ i ] = ( f [ i - 1 ] + f [ i - 2 ] ) % 10 NEW_LINE DEDENT DEDENT def findLastDigit ( n ) : NEW_LINE INDENT f = [ 0 ] * 60 NEW_LINE fib ( f ) NEW_LINE index = ( n % 60 ) NEW_LINE return f [ index ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 1 NEW_LINE print ( findLastDigit ( n ) ) NEW_LINE n = 61 NEW_LINE print ( findLastDigit ( n ) ) NEW_LINE n = 7 NEW_LINE print ( findLastDigit ( n ) ) NEW_LINE n = 67 NEW_LINE print ( findLastDigit ( n ) ) NEW_LINE DEDENT
a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a == 1 and b == 1 ) or ( a == 2 and b == 2 ) or ( a == 3 and c == 3 ) or ( b == 1 and c == 2 ) : NEW_LINE INDENT if ( a == 5 and b == 5 ) or ( b == 7 and a == 3 ) or ( a == 5 and b == 3 ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
n , z , w = map ( int , input ( ) . split ( ) ) NEW_LINE a = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE if n == 1 : NEW_LINE INDENT print ( abs ( a [ - 2 ] - a [ - 1 ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( max ( abs ( a [ - 1 ] - a [ - 2 ] ) , abs ( a [ - 1 ] - a [ - 3 ] ) ) ) NEW_LINE DEDENT
def countEleLessThanLessThan ( arr1 , arr2 , m , n ) : NEW_LINE INDENT for i in range ( m ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( arr2 [ j ] <= arr1 [ i ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count , end = " " ) NEW_LINE DEDENT DEDENT arr1 = [ 1 , 2 , 3 , 4 , 7 , 9 ] NEW_LINE arr2 = [ 0 , 1 , 2 , 1 , 1 , 4 ] NEW_LINE countEleLessThanLessThan ( arr1 , arr2 , arr1 , len ( arr1 ) , len ( arr2 ) ) NEW_LINE
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if k == 1 : NEW_LINE INDENT print ( min ( a [ 0 ] , a [ 1 ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( max ( a [ 0 ] , min ( a [ 1 : ] ) ) ) NEW_LINE DEDENT
s = input ( ) NEW_LINE t = input ( ) NEW_LINE n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = input ( ) NEW_LINE if s == t : NEW_LINE INDENT print ( x , t ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( x , t ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE lst = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE lst . sort ( ) NEW_LINE left = lst [ int ( n / 2 ) - 1 ] NEW_LINE right = lst [ int ( n / 2 ) ] NEW_LINE if n % 2 == 0 : NEW_LINE INDENT ans = lst [ int ( n / 2 ) - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT ans = lst [ int ( ( n + 1 ) // 2 ) - 1 ] NEW_LINE DEDENT print ( ans ) NEW_LINE
k , p = map ( int , input ( ) . split ( ) ) NEW_LINE def calc_snuke ( n ) : NEW_LINE INDENT return n / sum ( map ( int , str ( n ) ) ) NEW_LINE DEDENT a = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT a . append ( list ( map ( int , str ( i + 1 ) . split ( ) ) ) ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( 1 , k + 1 ) : NEW_LINE INDENT if ( calc_snuke ( i ) [ 0 ] <= p ) : NEW_LINE INDENT ans += i NEW_LINE DEDENT DEDENT print ( ans % p ) NEW_LINE
import bisect NEW_LINE n = int ( input ( ) ) NEW_LINE p = [ int ( x ) - 1 for x in input ( ) . split ( ) ] NEW_LINE p2 = sorted ( enumerate ( p ) , key = lambda x : x [ 1 ] , reverse = True ) NEW_LINE ans = 0 NEW_LINE s = [ - 1 ] * n NEW_LINE for i , ( idx , p ) in enumerate ( p2 ) : NEW_LINE INDENT t = bisect . bisect_left ( s , idx ) NEW_LINE s [ t - 1 ] = idx NEW_LINE l1 = s [ t - 1 ] NEW_LINE l2 = s [ t - 2 ] NEW_LINE r1 = s [ t + 1 ] NEW_LINE r2 = s [ t + 2 ] NEW_LINE ans += ( p + 1 ) * ( ( idx - l1 ) * ( r2 - r1 ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def maxi ( x , y ) : NEW_LINE INDENT return x if ( x > y ) else y NEW_LINE DEDENT def lps ( seq ) : NEW_LINE INDENT n = len ( seq ) NEW_LINE L = [ [ 0 for i in range ( n ) ] for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT L [ i ] [ i ] = 1 NEW_LINE DEDENT for cl in range ( 2 , n + 1 ) : NEW_LINE INDENT for i in range ( n - cl + 1 ) : NEW_LINE INDENT j = i + cl - 1 NEW_LINE if ( seq [ i ] == seq [ j ] and cl == 2 ) : NEW_LINE INDENT L [ i ] [ j ] = 2 NEW_LINE DEDENT elif ( seq [ i ] == seq [ j ] ) : NEW_LINE INDENT L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] = maxi ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return L [ 0 ] [ n - 1 ] NEW_LINE DEDENT seq = " GEEKSFORGEEKS " NEW_LINE n = len ( seq ) NEW_LINE print ( " The length of the LPS is " , lps ( seq ) ) NEW_LINE
def printConsecutive ( last , first ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE first += 1 NEW_LINE for x in range ( first , last + 1 ) : NEW_LINE INDENT print ( " + " + str ( x ) , end = " " ) NEW_LINE DEDENT DEDENT def findConsecutive ( N ) : NEW_LINE INDENT for last in range ( 1 , N ) : NEW_LINE INDENT for first in range ( 0 , last ) : NEW_LINE INDENT if ( 2 * N == ( last - first ) * ( last + first + 1 ) ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE printConsecutive ( last , first + 1 ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT print ( " - 1" ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 12 NEW_LINE findConsecutive ( n ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if a == 0 and b == 0 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT elif a == 0 and b > 0 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT elif a > 0 and b > 0 : NEW_LINE INDENT if ( int ( a ) - int ( b ) ) % 2 == 0 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
def NumberOfSquares ( x , y ) : NEW_LINE INDENT s = gcd ( x , y ) NEW_LINE ans = ( x * y ) / ( s * s ) NEW_LINE return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT m = 385 NEW_LINE n = 60 NEW_LINE print ( NumberOfSquares ( m , n ) ) NEW_LINE DEDENT
def isAlphab bx ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE c = [ 0 for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT c [ i ] = s [ i ] NEW_LINE DEDENT c . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( c [ i ] != s [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " aabbbcc " NEW_LINE if ( isAlphab bx ( s ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def printKMax ( arr , n , k ) : NEW_LINE INDENT for i in range ( n - k + 1 ) : NEW_LINE INDENT max = arr [ i ] NEW_LINE for j in range ( 1 , k ) : NEW_LINE INDENT if ( arr [ i + j ] > max ) : NEW_LINE INDENT max = arr [ i + j ] NEW_LINE DEDENT DEDENT print ( max , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] NEW_LINE k = 3 NEW_LINE printKMax ( arr , len ( arr ) , k ) NEW_LINE DEDENT
from collections import defaultdict NEW_LINE from itertools import accumulate NEW_LINE import bisect NEW_LINE import sys NEW_LINE input = sys . stdin . readline NEW_LINE def solve ( ) : NEW_LINE INDENT N , M = map ( int , input ( ) . split ( ) ) NEW_LINE graph = defaultdict ( list ) NEW_LINE for _ in range ( M ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE a -= 1 NEW_LINE b -= 1 NEW_LINE graph [ a ] . append ( b ) NEW_LINE graph [ b ] . append ( a ) NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT cnt = 0 NEW_LINE for j in range ( N ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT continue NEW_LINE DEDENT res += dfs ( i ) NEW_LINE DEDENT DEDENT c = [ 0 ] * N NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if c [ i ] == 1 : NEW_LINE INDENT c [ i ] = 0 NEW_LINE DEDENT DEDENT c = list ( accumulate ( c ) ) NEW_LINE c = list ( accumulate ( c ) ) NEW_LINE res += 2 * ( N - len ( c ) ) * ( c [ 0 ] - 1 ) NEW_LINE print ( res ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT
n , m , k = map ( int , input ( ) . split ( ) ) NEW_LINE print ( n - ( k - 1 ) ) NEW_LINE
from sys import stdin NEW_LINE input = stdin . readline NEW_LINE N , K = map ( int , input ( ) . split ( ) ) NEW_LINE X = [ ] NEW_LINE Y = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE X . append ( x ) NEW_LINE Y . append ( y ) NEW_LINE DEDENT def solve ( X , Y , K ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT if X [ i ] [ 0 ] < X [ j ] [ 0 ] and X [ i ] [ 1 ] < Y [ j ] [ 1 ] and Y [ j ] [ 0 ] > Y [ j ] [ 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count == K NEW_LINE DEDENT def main ( X , Y ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT if X [ i ] [ j ] > X [ j ] [ 0 ] and X [ i ] [ j ] > Y [ j ] [ 1 ] and Y [ j ] [ 0 ] > X [ j ] [ 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return min ( solve ( X , Y , K ) , solve ( X , Y , K ) ) NEW_LINE DEDENT print ( main ( X , Y ) ) NEW_LINE
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = [ input ( ) for i in range ( n ) ] NEW_LINE res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = res + 1 NEW_LINE if a [ i ] == ' z ' : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if a [ j ] == a [ j - 1 ] : NEW_LINE INDENT res = res + 1 NEW_LINE a [ j ] = ' z ' NEW_LINE DEDENT elif a [ j ] > a [ j - 1 ] : NEW_LINE INDENT res = res + 1 NEW_LINE a [ j ] = ' z ' NEW_LINE DEDENT DEDENT DEDENT print ( * res ) NEW_LINE
def pre_ process ( substring , s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT dup = " " NEW_LINE for j in range ( i , n ) : NEW_LINE INDENT dup += s [ j ] NEW_LINE substring = substring + 1 NEW_LINE count = count + 1 NEW_LINE DEDENT DEDENT size = len ( substring ) NEW_LINE for i in range ( size - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , len ( substring ) ) : NEW_LINE INDENT if ( substring [ i ] > substring [ j ] ) : NEW_LINE INDENT temp = substring [ i ] NEW_LINE substring [ i ] = substring [ j ] NEW_LINE substring [ j ] = temp NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " geek " NEW_LINE substring = [ 1 , 5 , 10 ] NEW_LINE q = len ( substring ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT print ( substring [ i ] - 1 ) NEW_LINE DEDENT DEDENT
while True : NEW_LINE INDENT w , h = map ( int , input ( ) . split ( ) ) NEW_LINE if w == 0 : break NEW_LINE f , p = [ ] , [ ] NEW_LINE for i in range ( h ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s == " S " : NEW_LINE INDENT p . append ( ( 0 , 0 ) ) NEW_LINE DEDENT elif s == " R " : NEW_LINE INDENT p . append ( ( 1 , 0 ) ) NEW_LINE DEDENT elif s == " L " : NEW_LINE INDENT p . append ( ( - 1 , - 1 ) ) NEW_LINE DEDENT elif s == " B " : NEW_LINE INDENT p . append ( ( w - 1 , w ) ) NEW_LINE DEDENT elif s == " F " : NEW_LINE INDENT p . append ( ( - 1 , - 1 ) ) NEW_LINE DEDENT DEDENT p . sort ( ) NEW_LINE flag = 0 NEW_LINE for i in range ( len ( p ) ) : NEW_LINE INDENT x = p [ i ] [ 0 ] NEW_LINE y = p [ i ] [ 1 ] NEW_LINE if x > 0 : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT if y > h : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT print ( max ( 0 , y - h ) + 1 , end = " " ) NEW_LINE DEDENT elif flag : NEW_LINE INDENT print ( max ( 0 , x + 1 ) , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( max ( 0 , x - 1 ) , end = " " ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = 0 NEW_LINE p = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == ' x ' : NEW_LINE INDENT p += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if p >= 3 : NEW_LINE INDENT ans += ( p - 2 ) NEW_LINE p = 0 NEW_LINE DEDENT p = 1 NEW_LINE DEDENT DEDENT if p >= 3 : NEW_LINE INDENT ans += ( p - 2 ) NEW_LINE p = 0 NEW_LINE DEDENT print ( ans ) NEW_LINE
while True : NEW_LINE INDENT s = input ( ) NEW_LINE if s == "0" : NEW_LINE INDENT break NEW_LINE DEDENT c = 0 NEW_LINE for c in s : NEW_LINE INDENT if c == " A " : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif c == " B " : NEW_LINE INDENT c -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT print ( c , c ) NEW_LINE DEDENT
def fact ( N ) : NEW_LINE INDENT i = 1 NEW_LINE product = 1 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT product = product * i NEW_LINE DEDENT return product NEW_LINE DEDENT def nthTerm ( N ) : NEW_LINE INDENT return ( N * N ) * fact ( N ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def longestSubArray ( arr , n ) : NEW_LINE INDENT isZeroPresent = False NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == 0 ) : NEW_LINE INDENT isZeroPresent = True NEW_LINE break NEW_LINE DEDENT DEDENT if ( isZeroPresent ) : NEW_LINE INDENT return n NEW_LINE DEDENT return 0 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 0 , 1 , 2 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE print ( longestSubArray ( arr , n ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT k , x = map ( int , input ( ) . split ( ) ) NEW_LINE print ( k * 9 - x // 9 ) NEW_LINE DEDENT
def maximumArea ( l , b , x , y ) : NEW_LINE INDENT left = x * b NEW_LINE right = ( l - x - 1 ) * b NEW_LINE above = l * y NEW_LINE below = ( b - y - 1 ) * l NEW_LINE print ( max ( left , right , above ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT L , B = 8 , 8 NEW_LINE X , Y = 0 , 0 NEW_LINE maximumArea ( L , B , X , Y ) NEW_LINE DEDENT
NO_OF_CHARS = 256 NEW_LINE def max_distinct_char ( string , n ) : NEW_LINE INDENT count = [ 0 ] * ( NO_OF_CHARS ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT count [ ord ( string [ i ] ) ] += 1 NEW_LINE DEDENT max_ distinct = 0 NEW_LINE for i in range ( NO_OF_CHARS ) : NEW_LINE INDENT if ( count [ i ] != 0 ) : NEW_LINE INDENT max_ distinct += 1 NEW_LINE DEDENT DEDENT return max_ distinct NEW_LINE DEDENT def smallesteSubstr_maxDist dist dist dist dist distChar ( string ) : NEW_LINE INDENT n = len ( string ) NEW_LINE max_distinct = max_distinct_char ( string , n ) NEW_LINE minl = n NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( i < j ) : NEW_LINE INDENT temp = string [ i : j ] NEW_LINE DEDENT else : NEW_LINE INDENT temp = string [ j : i ] NEW_LINE DEDENT DEDENT temp_ distinct = max_ distinct_char ( temp , temp_ distinct ) NEW_LINE if ( temp_ distinct_lenght < minl and max_ distinct == temp_ distinct_char ) : NEW_LINE INDENT minl = temp_lenght NEW_LINE DEDENT DEDENT return minl NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " AABBBBB " NEW_LINE l = smallesteSubstr_maxDist distChar ( string ) NEW_LINE print ( " The length of the smallest substring distinct characters : " , l ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = input ( ) . split ( ) NEW_LINE b = input ( ) . split ( ) NEW_LINE ans = " YES " NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == " R " and b [ i ] == " G " and a [ i + 1 ] == " B " : NEW_LINE INDENT ans = " NO " NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def findNumberOfEvenCells ( n , q , size ) : NEW_LINE INDENT row = [ 0 ] * n NEW_LINE col = [ 0 ] * n NEW_LINE for i in range ( size ) : NEW_LINE INDENT x = q [ i ] [ 0 ] NEW_LINE y = q [ i ] [ 1 ] NEW_LINE row [ x - 1 ] += 1 NEW_LINE col [ y - 1 ] += 1 NEW_LINE DEDENT r1 = 0 NEW_LINE r2 = 0 NEW_LINE c1 = 0 NEW_LINE c2 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( row [ i ] % 2 == 0 ) : NEW_LINE INDENT r1 += 1 NEW_LINE DEDENT if ( row [ i ] % 2 == 1 ) : NEW_LINE INDENT r2 += 1 NEW_LINE DEDENT if ( col [ i ] % 2 == 0 ) : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT if ( col [ i ] % 2 == 1 ) : NEW_LINE INDENT c2 += 1 NEW_LINE DEDENT DEDENT count = r1 * c1 + r2 * c2 NEW_LINE return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 2 NEW_LINE q = [ [ 1 , 1 ] , [ 1 , 2 ] , [ 2 , 1 ] ] NEW_LINE size = len ( q ) NEW_LINE print ( findNumberOfEvenCells ( n , q , size ) ) NEW_LINE DEDENT
def checkType ( arr , n ) : NEW_LINE INDENT if ( arr [ 0 ] <= arr [ 1 ] and arr [ n - 2 ] <= arr [ n - 1 ] ) : NEW_LINE INDENT print ( " Increasing " ) NEW_LINE DEDENT elif ( arr [ 0 ] >= arr [ 1 ] and arr [ n - 2 ] >= arr [ n - 1 ] ) : NEW_LINE INDENT print ( " decreasing " ) NEW_LINE DEDENT elif ( arr [ 0 ] <= arr [ 1 ] and arr [ n - 2 ] >= arr [ n - 1 ] ) : NEW_LINE INDENT print ( " Increasing then increasing " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " decreasing then increasing " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE checkType ( arr , n ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = n NEW_LINE last = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if s [ i ] == "1" : NEW_LINE INDENT if last == 0 : NEW_LINE INDENT ans -= 1 NEW_LINE last = 0 NEW_LINE DEDENT else : NEW_LINE INDENT ans += 1 NEW_LINE last = 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT last = 0 NEW_LINE DEDENT DEDENT ans = min ( ans , last ) NEW_LINE last = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if s [ i ] == "1" : NEW_LINE INDENT if last == 0 : NEW_LINE INDENT ans -= 1 NEW_LINE last = 0 NEW_LINE DEDENT else : NEW_LINE INDENT ans += 1 NEW_LINE last = 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT last = 0 NEW_LINE DEDENT DEDENT ans = min ( ans , last ) NEW_LINE print ( ans ) NEW_LINE DEDENT
import math NEW_LINE a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ' % d / % d ' % ( ( a * d ) // ( b * c ) , ( b * c ) // ( a * d ) ) ) NEW_LINE
def numberOfWays ( x ) : NEW_LINE INDENT dp = [ 0 ] * ( x + 1 ) NEW_LINE dp [ 0 ] = dp [ 1 ] = 1 NEW_LINE for i in range ( 2 , x + 1 ) : NEW_LINE INDENT dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] NEW_LINE DEDENT return dp [ x ] NEW_LINE DEDENT x = 3 NEW_LINE print ( numberOfWays ( x ) ) NEW_LINE
def rearrange ( arr , n ) : NEW_LINE INDENT j = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] < 0 ) : NEW_LINE INDENT if ( i != j ) : NEW_LINE INDENT arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ] NEW_LINE DEDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT arr = [ - 1 , 2 , - 3 , 4 , 5 , 6 , - 7 , 8 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE rearrange ( arr , n ) NEW_LINE print ( arr ) NEW_LINE
def centered_square_num ( n ) : NEW_LINE INDENT return ( n * n + ( ( n - 1 ) * ( n - 1 ) ) ) NEW_LINE DEDENT n = 7 NEW_LINE print ( " th Centered square number : " , centered_square_num ( n ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , k = map ( int , input ( ) . split ( ) ) NEW_LINE if k > n : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE continue NEW_LINE DEDENT if n % 2 == 0 : NEW_LINE INDENT if k == 0 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if k == n - 1 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE a = sorted ( map ( int , input ( ) . split ( ) ) ) NEW_LINE print ( ( n // 2 ) * ( a [ n // 2 ] + a [ n // 2 + 1 ] * a [ n // 2 ] ) ) NEW_LINE
def maxSubArraySum ( arr , size ) : NEW_LINE INDENT max_so_far = arr [ 0 ] NEW_LINE curr_max = arr [ 0 ] NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT curr_max = max ( arr [ i ] , curr_max + arr [ i ] ) NEW_LINE max_so_far = max ( max_so_far , curr_max ) NEW_LINE DEDENT return max_so_far NEW_LINE DEDENT def lenOfLongSubarrWithMaxSum ( arr , n , k ) : NEW_LINE INDENT um = dict ( ) NEW_LINE sum = 0 NEW_LINE maxLen = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE if ( sum == k ) : NEW_LINE INDENT maxLen = i + 1 NEW_LINE DEDENT if ( um . get ( sum ) ) : NEW_LINE INDENT um [ sum ] = i NEW_LINE DEDENT if ( sum - k ) : NEW_LINE INDENT if ( maxLen < ( i - um . get ( sum - k ) ) ) : NEW_LINE INDENT maxLen = i - um . get ( sum - k ) NEW_LINE DEDENT DEDENT DEDENT return maxLen NEW_LINE DEDENT def lenLongSubarrWithMaxSum ( arr , n ) : NEW_LINE INDENT maxSum = maxSubArraySum ( arr , n ) NEW_LINE return lenOfLongSubarrWithMaxSum ( arr , n ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 5 , - 2 , - 1 , 3 , - 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Length of longest subarray having maximum sum = " , lenLongSubarrWithMaxSum ( arr , n ) ) NEW_LINE DEDENT
import itertools NEW_LINE n = int ( input ( ) ) NEW_LINE c = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for comb in itertools . combinations ( c , 2 ) : NEW_LINE INDENT diff = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if comb [ i ] * comb [ i + 1 ] != comb [ i + 1 ] * comb [ i ] : NEW_LINE INDENT diff += 1 NEW_LINE DEDENT DEDENT if diff > ans : NEW_LINE INDENT ans = diff NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def find ( dividend , divisor , start , end ) : NEW_LINE INDENT if ( start > end ) : NEW_LINE INDENT return ( 0 , dividend ) NEW_LINE DEDENT mid = start + ( end - start ) // 2 NEW_LINE n = dividend - divisor * mid NEW_LINE if ( n > divisor ) : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT elif ( n < 0 ) : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ( n == divisor ) : NEW_LINE INDENT mid += 1 NEW_LINE n = 0 NEW_LINE DEDENT else : NEW_LINE INDENT if ( n == divisor ) : NEW_LINE INDENT mid += 1 NEW_LINE n = 0 NEW_LINE DEDENT DEDENT return ( mid , n ) NEW_LINE DEDENT return find ( dividend , divisor , start , end ) NEW_LINE DEDENT def divide ( dividend , divisor ) : NEW_LINE INDENT return find ( dividend , divisor , 1 , dividend ) NEW_LINE DEDENT dividend = 10 NEW_LINE divisor = 3 NEW_LINE ans = divide ( dividend , divisor ) NEW_LINE print ( ans [ 0 ] , " , " , end = " " ) NEW_LINE print ( ans [ 1 ] ) NEW_LINE
n = int ( input ( ) ) NEW_LINE s = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE if n == 1 : NEW_LINE INDENT print ( abs ( s [ 0 ] - s [ 1 ] ) , abs ( s [ 0 ] - s [ 1 ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( abs ( s [ 0 ] - s [ 1 ] ) , abs ( s [ - 1 ] - s [ 0 ] ) ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE ans = n NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] <= m + 1 : ans = min ( ans , n - a [ i ] + 1 ) NEW_LINE DEDENT d = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i + 1 ] - a [ i ] > d : d += 1 NEW_LINE DEDENT d = 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if a [ i + 1 ] - a [ i ] > d : ans = min ( ans , n - a [ i + 1 ] + d - 1 ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def towerOfH k ( n , from_rod , to_rod , aux_rod1 , aux_rod2 ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT print ( " Move idx " , n , " from rod " , from_rod , " to rod " , to_rod ) NEW_LINE return NEW_LINE DEDENT towerOfH k ( n - 2 , from_rod , aux_rod1 , aux_rod2 , to_rod ) NEW_LINE print ( " Move idx " , n - 1 , " from rod " , from_rod , " to rod " , aux_rod2 ) NEW_LINE print ( " Move idx " , n , " from rod " , from_rod , " to rod " , to_rod ) NEW_LINE print ( " Move idx " , n - 1 , " from rod " , aux_rod2 , " to rod " , to_rod ) NEW_LINE towerOfH k ( n - 2 , from_rod , aux_rod1 , to_rod , from_rod , aux_rod2 ) NEW_LINE DEDENT n = 4 NEW_LINE towerOfH k ( n , ' A ' , ' D ' , ' B ' , ' C ' ) NEW_LINE
n = input ( ) NEW_LINE n = len ( n ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT p = n [ i ] NEW_LINE if p == " < " : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif p == " > " : NEW_LINE INDENT ans += pow ( 2 , i , 10 ) NEW_LINE DEDENT elif p == " + " : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif p == " - " : NEW_LINE INDENT ans += pow ( 2 , i , 10 ) NEW_LINE DEDENT elif p == " [ " : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif p == " ] " : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans % 1000003 ) NEW_LINE
from bisect import insort , bisect_right , bisect_left NEW_LINE class Range_map : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . rm = dict ( ) NEW_LINE self . lr = [ ] NEW_LINE DEDENT def insert ( self , x , y ) : NEW_LINE INDENT if x not in self . rm : NEW_LINE INDENT insort ( self . lr , x ) NEW_LINE DEDENT self . rm [ x ] = y NEW_LINE DEDENT def get ( self , x ) : NEW_LINE INDENT print ( self . rm . get ( x , 0 ) ) NEW_LINE DEDENT def delete ( self , x ) : NEW_LINE INDENT if x in self . rm : NEW_LINE INDENT self . rm [ x ] = 0 NEW_LINE DEDENT DEDENT def dump ( self , l , r ) : NEW_LINE INDENT lb = bisect_left ( self . lr , l ) NEW_LINE ub = bisect_right ( self . lr , r ) NEW_LINE for i in range ( lb , ub ) : NEW_LINE INDENT k = self . lr [ i ] NEW_LINE if k in self . rm and self . rm [ k ] != 0 : NEW_LINE INDENT print ( f ' { k } \n ' ) NEW_LINE DEDENT DEDENT DEDENT DEDENT rm = Range_map ( ) NEW_LINE for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT op , x , y = ( input ( ) + ' 1' ) . split ( ) [ : 3 ] NEW_LINE if op == '0' : NEW_LINE INDENT rm . insert ( x , int ( y ) ) NEW_LINE DEDENT elif op == '1' : NEW_LINE INDENT rm . get ( x ) NEW_LINE DEDENT elif op == '2' : NEW_LINE INDENT rm . delete ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT rm . dump ( x , y ) NEW_LINE DEDENT DEDENT
def minSum ( arr , n ) : NEW_LINE INDENT sum = arr [ 0 ] NEW_LINE prev = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] <= prev ) : NEW_LINE INDENT prev = prev + 1 NEW_LINE sum = sum + prev NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + arr [ i ] NEW_LINE prev = arr [ i ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT arr = [ 2 , 2 , 3 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minSum ( arr , n ) ) NEW_LINE
def findN ( k ) : NEW_LINE INDENT ans = 0 NEW_LINE if ( k == 0 ) : NEW_LINE INDENT ans = 3 NEW_LINE DEDENT if ( k == 1 ) : NEW_LINE INDENT ans = 1 NEW_LINE DEDENT elif ( k % 4 == 0 ) : NEW_LINE INDENT ans = k NEW_LINE DEDENT elif ( k % 4 == 3 ) : NEW_LINE INDENT ans = k - 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = - 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT k = 7 NEW_LINE res = findN ( k ) NEW_LINE if ( res == - 1 ) : NEW_LINE INDENT print ( " Not possible " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( res ) NEW_LINE DEDENT DEDENT
import math NEW_LINE def subsetXOR ( arr , n , K ) : NEW_LINE INDENT max_ele = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] > max_ele ) : NEW_LINE INDENT max_ele = arr [ i ] NEW_LINE DEDENT DEDENT m = ( 1 << ( math . log ( max_ele ) // math . log ( 2 ) + 1 ) - 1 ) NEW_LINE dp = [ [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] for k in range ( m + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( m + 1 ) : NEW_LINE INDENT for k in range ( n + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] = 0 NEW_LINE DEDENT DEDENT DEDENT for i in range ( n + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( m + 1 ) : NEW_LINE INDENT for k in range ( n + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] = dp [ i - 1 ] [ j ] [ k ] NEW_LINE if ( k != 0 ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] += k * dp [ i - 1 ] [ j ^ arr [ i - 1 ] ] [ k - 1 ] NEW_LINE DEDENT DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT ans += dp [ n ] [ K ] [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT arr = [ 1 , 2 , 3 ] NEW_LINE k = 1 NEW_LINE n = len ( arr ) NEW_LINE print ( subsetXOR ( arr , n , k ) ) NEW_LINE
d , g = map ( int , input ( ) . split ( ) ) NEW_LINE p = [ 0 ] * d NEW_LINE c = [ 0 ] * d NEW_LINE for i in range ( d ) : NEW_LINE INDENT p [ i ] , c [ i ] = map ( int , input ( ) . split ( ) ) NEW_LINE DEDENT ans = 100 NEW_LINE for i in range ( d ) : NEW_LINE INDENT cnt = 0 NEW_LINE for j in range ( d ) : NEW_LINE INDENT if ( i >> j ) & 1 : NEW_LINE INDENT cnt += c [ j ] NEW_LINE DEDENT DEDENT if cnt >= g : NEW_LINE INDENT continue NEW_LINE DEDENT x = p [ i ] NEW_LINE a = 0 NEW_LINE for j in range ( d - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( g - x ) % 2 : NEW_LINE INDENT a += p [ j ] * ( j + 1 ) // 2 NEW_LINE x += p [ j ] * ( j + 1 ) // 2 NEW_LINE DEDENT DEDENT if a >= g : NEW_LINE INDENT cnt -= g NEW_LINE ans = min ( ans , cnt ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
t = int ( input ( ) ) NEW_LINE while ( t > 0 ) : NEW_LINE INDENT n , m = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE l = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE s = sum ( l ) NEW_LINE if ( s == m ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT t -= 1 NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE count = 0 NEW_LINE for i in range ( 1 , len ( a ) ) : NEW_LINE INDENT if a [ i ] < a [ i - 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE
from math import log NEW_LINE def min reverse ( n ) : NEW_LINE INDENT l = pow ( 2 , log ( n ) ) NEW_LINE r = l * 2 NEW_LINE return min ( ( n - l ) , ( r - n ) ) NEW_LINE DEDENT n = 15 NEW_LINE print ( min reverse ( n ) ) NEW_LINE
def LCIS ( arr1 , n , arr2 , m ) : NEW_LINE INDENT table = [ 0 for i in range ( m ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT current = 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT if ( arr1 [ i ] == arr2 [ j ] ) : NEW_LINE INDENT if ( current + 1 > table [ j ] ) : NEW_LINE INDENT table [ j ] = current + 1 NEW_LINE DEDENT DEDENT if ( arr1 [ i ] > arr2 [ j ] ) : NEW_LINE INDENT if ( table [ j ] > current ) : NEW_LINE INDENT current = table [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT result = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if ( table [ i ] > result ) : NEW_LINE INDENT result = table [ i ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT arr1 = [ 3 , 4 , 9 , 1 ] NEW_LINE arr2 = [ 5 , 3 , 8 , 9 , 10 , 2 , 1 ] NEW_LINE n = len ( arr1 ) NEW_LINE m = len ( arr2 ) NEW_LINE print ( " Length of LCIS is " , LCIS ( arr1 , n , arr2 , m ) ) NEW_LINE
def countSetBits ( n ) : NEW_LINE INDENT bitCount = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT bitCount += countSetBitsUtil ( i ) NEW_LINE DEDENT return bitCount NEW_LINE DEDENT def countSetBitsUtil ( x ) : NEW_LINE INDENT if ( x <= 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( 1 if ( x % 2 == 0 ) else 0 ) + countSetBitsUtil ( x // 2 ) NEW_LINE DEDENT n = 4 NEW_LINE print ( " Total set bit count is " , countSetBits ( n ) ) NEW_LINE
def partition ( arr , low , high ) : NEW_LINE INDENT x = arr [ low ] NEW_LINE i = low - 1 NEW_LINE j = high + 1 NEW_LINE while True : NEW_LINE INDENT i += 1 NEW_LINE DEDENT while arr [ i ] < x : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT while arr [ j ] > x : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT if i >= j : NEW_LINE INDENT return j NEW_LINE DEDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE DEDENT DEDENT def quickSort ( arr , low , high ) : NEW_LINE INDENT if ( low < high ) : NEW_LINE INDENT pi = partition ( arr , low , high ) NEW_LINE quickSort ( arr , low , pi ) NEW_LINE quickSort ( arr , pi + 1 , high ) NEW_LINE DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 10 , 7 , 8 , 9 , 1 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE quickSort ( arr , 0 , n - 1 ) NEW_LINE print ( " Sorted array : " ) NEW_LINE printArray ( arr , n ) NEW_LINE DEDENT
def Swap ( array , position1 , position2 ) : NEW_LINE INDENT temp = array [ position1 ] NEW_LINE array [ position1 ] = array [ position2 ] NEW_LINE array [ position2 ] = temp NEW_LINE DEDENT def partition ( arr , low , high ) : NEW_LINE INDENT pivot = arr [ high ] NEW_LINE i = ( low - 1 ) NEW_LINE for j in range ( low , high - 1 ) : NEW_LINE INDENT if ( arr [ j ] <= pivot ) : NEW_LINE INDENT i += 1 NEW_LINE Swap ( arr , i , j ) NEW_LINE DEDENT DEDENT Swap ( arr , i + 1 , high ) NEW_LINE return ( i + 1 ) NEW_LINE DEDENT def quickSort ( arr , low , high ) : NEW_LINE INDENT if ( low < high ) : NEW_LINE INDENT pi = partition ( arr , low , high ) NEW_LINE quickSort ( arr , low , pi - 1 ) NEW_LINE quickSort ( arr , pi + 1 , high ) NEW_LINE DEDENT DEDENT def printArray ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 7 , 8 , 9 , 1 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE quickSort ( arr , 0 , n - 1 ) NEW_LINE print ( " Sorted array : " ) NEW_LINE printArray ( arr , n ) NEW_LINE DEDENT
from sys import maxsize NEW_LINE def maxSubArraySum ( a , size ) : NEW_LINE INDENT max_so_far = - maxsize - 1 NEW_LINE max_ending_here = 0 NEW_LINE for i in range ( size ) : NEW_LINE INDENT max_ending_here = max_ending_here + a [ i ] NEW_LINE if ( max_so_far < max_ending_here ) : NEW_LINE INDENT max_so_far = max_ending_here NEW_LINE DEDENT if ( max_ending_here < 0 ) : NEW_LINE INDENT max_ending_here = 0 NEW_LINE DEDENT DEDENT return max_so_far NEW_LINE DEDENT def minPossibleSum ( a , n , x ) : NEW_LINE INDENT mxSum = maxSubArraySum ( a , n ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT sum = sum - mxSum + mxSum / x NEW_LINE print ( sum ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE X = 2 NEW_LINE A = [ 1 , - 2 , 3 ] NEW_LINE minPossibleSum ( A , N , X ) NEW_LINE DEDENT
from sys import stdin , stdout NEW_LINE def solution ( n , trees ) : NEW_LINE INDENT visited = [ False ] * ( n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if not visited [ trees [ i ] ] : NEW_LINE INDENT visited [ trees [ i ] ] = True NEW_LINE for k in range ( i + 1 , n ) : NEW_LINE INDENT trees [ k ] = i NEW_LINE DEDENT DEDENT DEDENT return [ ] NEW_LINE DEDENT test_cases = int ( stdin . readline ( ) ) NEW_LINE for it in range ( test_cases ) : NEW_LINE INDENT n = int ( stdin . readline ( ) ) NEW_LINE trees = [ int ( x ) for x in stdin . readline ( ) . split ( ) ] NEW_LINE stdout . write ( " " . join ( map ( str , trees ) ) ) NEW_LINE DEDENT
def printArray ( N , SUM , K ) : NEW_LINE INDENT minSum = ( N * ( N + 1 ) ) // 2 ; NEW_LINE maxSum = ( N * K ) - ( N * ( N - 1 ) ) // 2 ; NEW_LINE if ( minSum > SUM or maxSum < SUM ) : NEW_LINE INDENT print ( " Not Possible " ) ; NEW_LINE return ; NEW_LINE DEDENT arr = [ 0 ] * ( N + 1 ) ; NEW_LINE sum = minSum ; NEW_LINE for i in range ( N , 0 , - 1 ) : NEW_LINE INDENT x = sum + ( K - i ) ; NEW_LINE if ( x < SUM ) : NEW_LINE INDENT sum = sum + ( K - i ) ; NEW_LINE arr [ i ] = K ; NEW_LINE K -= 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT arr [ i ] += ( SUM - sum ) ; NEW_LINE sum = SUM ; NEW_LINE break ; NEW_LINE DEDENT DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) ; NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 3 ; SUM = 15 ; NEW_LINE K = 8 ; NEW_LINE printArray ( N , SUM , K ) ; NEW_LINE DEDENT
COST = 3 NEW_LINE def max items ( x , y , z ) : NEW_LINE INDENT type1 = int ( x / COST ) NEW_LINE x %= COST NEW_LINE type2 = int ( y / COST ) NEW_LINE y %= COST NEW_LINE type3 = int ( z / COST ) NEW_LINE z %= COST NEW_LINE type4 = min ( x , min ( y , z ) ) NEW_LINE max items = type1 + type2 + type3 + type4 NEW_LINE return max items NEW_LINE DEDENT x = 4 NEW_LINE y = 5 NEW_LINE z = 6 NEW_LINE print ( max items ( x , y , z ) ) NEW_LINE
def run_ nd ( A , B ) : NEW_LINE INDENT total_time = 0 NEW_LINE while ( len ( A ) > 0 ) : NEW_LINE INDENT x = A [ 0 ] NEW_LINE y = B [ 0 ] NEW_LINE if ( x == y ) : NEW_LINE INDENT A [ 0 ] = A [ 1 ] NEW_LINE B [ 0 ] = A [ 2 ] NEW_LINE total_time += 1 NEW_LINE DEDENT else : NEW_LINE INDENT A [ 0 ] = A [ 1 ] NEW_LINE A [ 1 ] = x NEW_LINE total_time += 2 NEW_LINE DEDENT DEDENT return total_time NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 3 , 2 , 1 , 4 ] NEW_LINE B = [ 4 , 1 , 3 , 2 ] NEW_LINE print ( run_ nd ( A , B ) ) NEW_LINE DEDENT
def line ( x0 , y0 ) : NEW_LINE INDENT c = ( 2 * y0 * x0 ) NEW_LINE print ( " % . 1 f " % ( y0 ) , " x " , " + " % . 1 f " % ( x0 ) , " y = " + " % . 1 f " % ( c ) ) NEW_LINE DEDENT x0 = 4 NEW_LINE y0 = 3 NEW_LINE line ( x0 , y0 ) NEW_LINE
n = int ( input ( ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE a = set ( s ) NEW_LINE for j in a : NEW_LINE INDENT if s . count ( j ) > 1 : NEW_LINE INDENT l . append ( j ) NEW_LINE DEDENT DEDENT DEDENT print ( len ( l ) ) NEW_LINE
import sys NEW_LINE def solve ( ) : NEW_LINE INDENT x1 , y1 , x2 , y2 = map ( int , input ( ) . split ( ) ) NEW_LINE return x2 - x1 + y2 if x1 + y1 + y2 > 0 else 0 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT q = int ( input ( ) ) NEW_LINE for _ in range ( q ) : NEW_LINE INDENT x , y , x , y = map ( int , input ( ) . split ( ) ) NEW_LINE print ( solve ( ) ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def is anyNotPalindrome ( s ) : NEW_LINE INDENT return ( len ( set ( s ) ) > 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " np ' NEW_LINE if ( is anyNotPalindrome ( s ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def findMajority ( arr , n ) : NEW_LINE INDENT return arr [ n // 2 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMajority ( arr , n ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE x = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT d = input ( ) NEW_LINE if d [ 0 ] == " North " : NEW_LINE INDENT x += int ( d [ 1 ] ) NEW_LINE DEDENT elif d [ 0 ] == " South " : NEW_LINE INDENT x -= int ( d [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT x -= int ( d [ 1 ] ) NEW_LINE DEDENT if x < 0 : NEW_LINE INDENT print ( " NO " ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT
def countSubArrays ( arr , n , K ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT bitwise_or = 0 NEW_LINE for k in range ( i , j + 1 ) : NEW_LINE INDENT bitwise_or = bitwise_or | arr [ k ] NEW_LINE DEDENT if ( bitwise_or >= K ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 6 NEW_LINE print ( countSubArrays ( arr , n , k ) ) NEW_LINE DEDENT
def canBeEqual ( a , b , c , k ) : NEW_LINE INDENT arr = [ ] NEW_LINE arr . append ( a ) NEW_LINE arr . append ( b ) NEW_LINE arr . append ( c ) NEW_LINE arr . sort ( ) NEW_LINE diff = 2 * arr [ 2 ] - arr [ 1 ] - arr [ 0 ] NEW_LINE k = k - diff NEW_LINE if ( k < 0 or k % 3 != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT a1 = 6 NEW_LINE b1 = 3 NEW_LINE c1 = 2 NEW_LINE k1 = 7 NEW_LINE if ( canBeEqual ( a1 , b1 , c1 , k1 ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def insert ( x , y ) : NEW_LINE INDENT adjacency [ x ] . append ( y ) NEW_LINE DEDENT def dfs ( node , leaf , vis ) : NEW_LINE INDENT leaf [ node ] = 0 NEW_LINE vis [ node ] = 1 NEW_LINE for i in range ( len ( adjacency [ node ] ) ) : NEW_LINE INDENT it = adjacency [ node ] [ i ] NEW_LINE if ( vis [ it ] == 0 ) : NEW_LINE INDENT dfs ( it , leaf , vis ) NEW_LINE leaf [ node ] += leaf [ it ] NEW_LINE DEDENT DEDENT if ( adjacency [ node ] [ len ( adjacency [ node ] ) == 0 ) : NEW_LINE INDENT leaf [ node ] = 1 NEW_LINE DEDENT DEDENT def printLeaf ( n , leaf ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( " The node " , i , " has " , leaf [ i ] , " leaf nodes " ) NEW_LINE DEDENT DEDENT N = 6 NEW_LINE for i in range ( 0 , N + 1 ) : NEW_LINE INDENT adjacency . append ( [ ] ) NEW_LINE DEDENT insert ( 1 , 2 ) NEW_LINE insert ( 1 , 3 ) NEW_LINE insert ( 1 , 3 ) NEW_LINE insert ( 3 , 4 ) NEW_LINE insert ( 3 , 5 ) NEW_LINE insert ( 3 , 6 ) NEW_LINE leaf = [ 0 for i in range ( N + 1 ) ] NEW_LINE dfs ( 1 , leaf , vis ) NEW_LINE printLeaf ( N , leaf ) NEW_LINE
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT print ( '1' ) NEW_LINE exit ( ) NEW_LINE DEDENT if n % 2 == 0 : NEW_LINE INDENT print ( n // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( n - 1 ) // 2 ) NEW_LINE DEDENT
s1 = input ( ) NEW_LINE s2 = input ( ) NEW_LINE n = len ( s1 ) NEW_LINE m = len ( s2 ) NEW_LINE freq = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s1 [ i ] not in freq : NEW_LINE INDENT freq [ s1 [ i ] ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT freq [ s1 [ i ] ] += 1 NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT if s2 [ i ] not in freq : NEW_LINE INDENT freq [ s2 [ i ] ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT freq [ s2 [ i ] ] += 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in freq : NEW_LINE INDENT ans += min ( freq [ i ] , freq [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def lcsOf3 ( X , Y , Z , m , n , o ) : NEW_LINE INDENT L = [ [ [ 0 for x in range ( o + 1 ) ] for y in range ( m + 1 ) ] for z in range ( m + 1 ) ] NEW_LINE for i in range ( m + 1 ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT for k in range ( o + 1 ) : NEW_LINE INDENT if ( i == 0 or j == 0 or k == 0 ) : NEW_LINE INDENT L [ i ] [ j ] [ k ] = 0 NEW_LINE DEDENT elif ( X [ i - 1 ] == Y [ j - 1 ] and X [ i - 1 ] == Z [ k - 1 ] ) : NEW_LINE INDENT L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] [ k ] = max ( L [ i - 1 ] [ j ] [ k ] , L [ i ] [ j - 1 ] [ k ] , L [ i ] [ j ] [ k - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return L [ m ] [ n ] [ o ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT X = " AGGT12" NEW_LINE Y = "12 -kB " NEW_LINE Z = "12XBA " NEW_LINE m = len ( X ) NEW_LINE n = len ( Y ) NEW_LINE o = len ( Z ) NEW_LINE print ( " Length of LCS is " , lcsOf3 ( X , Y , Z , m , n , o ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE b = [ abs ( i ) for i in a ] NEW_LINE print ( sum ( b ) ) NEW_LINE
def is spiltPossible ( n , a ) : NEW_LINE INDENT sum = 0 NEW_LINE c1 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE if ( a [ i ] == 1 ) : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT DEDENT if ( sum % 2 != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( ( sum // 2 ) % 2 == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( c1 > 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 NEW_LINE a = [ 1 , 1 , 2 ] NEW_LINE if ( is spiltPossible ( n , a ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE lst = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE cnt = [ ] NEW_LINE for i in range ( 5 ) : NEW_LINE INDENT if lst [ i ] == 1 : NEW_LINE INDENT cnt . append ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT cnt . append ( 0 ) NEW_LINE DEDENT DEDENT cnt1 = 0 NEW_LINE cnt2 = 0 NEW_LINE cnt3 = 0 NEW_LINE cnt4 = 0 NEW_LINE for i in range ( 5 ) : NEW_LINE INDENT if cnt [ i ] == 2 : NEW_LINE INDENT cnt1 += 1 NEW_LINE DEDENT elif cnt [ i ] == 3 : NEW_LINE INDENT cnt2 += 1 NEW_LINE DEDENT elif cnt [ i ] == 4 : NEW_LINE INDENT cnt3 += 1 NEW_LINE DEDENT DEDENT if cnt [ 2 ] == 1 : NEW_LINE INDENT cnt4 += 1 NEW_LINE DEDENT elif cnt [ 2 ] == 4 : NEW_LINE INDENT cnt4 += 1 NEW_LINE DEDENT print ( max ( cnt1 , cnt2 , cnt3 , cnt4 ) ) NEW_LINE
def count_even_odd ( min , max , steps ) : NEW_LINE INDENT beven = True NEW_LINE aeven = False NEW_LINE n = 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a = steps [ i ] [ 0 ] NEW_LINE b = steps [ i ] [ 1 ] NEW_LINE if ( not ( aeven or ( a & 1 ) > 0 ) ) : NEW_LINE INDENT aeven = True NEW_LINE DEDENT if ( beven ) : NEW_LINE INDENT if ( ( b & 1 ) > 0 ) : NEW_LINE INDENT beven = False NEW_LINE DEDENT DEDENT elif ( not ( a & 1 ) ) : NEW_LINE INDENT if ( not ( b & 1 ) > 0 ) : NEW_LINE INDENT beven = True NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( b & 1 ) > 0 : NEW_LINE INDENT beven = True NEW_LINE DEDENT DEDENT DEDENT if ( beven ) : NEW_LINE INDENT even = max // 2 - ( min - 1 ) // 2 NEW_LINE odd = 0 NEW_LINE DEDENT else : NEW_LINE INDENT even = max // 2 - ( min - 1 ) // 2 NEW_LINE odd = 0 NEW_LINE DEDENT if ( not ( beven ^ aeven ) ) : NEW_LINE INDENT even += max - min + 1 - ( max // 2 + ( min - 1 ) // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT odd += max - min + 1 - ( max // 2 + ( min - 1 ) // 2 ) NEW_LINE DEDENT print ( " even = " , even , " , odd = " , odd ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT min = 1 NEW_LINE max = 4 NEW_LINE steps = [ [ 1 , 2 ] , [ 3 , 4 ] ] NEW_LINE count_even_odd ( min , max , steps ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE i = 1 NEW_LINE while c != k : NEW_LINE INDENT i += 1 NEW_LINE c += i * k NEW_LINE DEDENT print ( i ) NEW_LINE
def printKPFNums ( A , B , K ) : NEW_LINE INDENT prime = [ True ] * ( B + 1 ) NEW_LINE p_factors = [ 0 ] * ( B + 1 ) NEW_LINE for p in range ( 2 , B + 1 ) : NEW_LINE INDENT if ( p_factors [ p ] == 0 ) : NEW_LINE INDENT for i in range ( p , B + 1 , p ) : NEW_LINE INDENT p_factors [ i ] += 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( A , B + 1 , 1 ) : NEW_LINE INDENT if ( p_factors [ i ] == K ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = 14 NEW_LINE B = 18 NEW_LINE K = 2 NEW_LINE printKPFNums ( A , B , K ) NEW_LINE DEDENT
def reverseWords ( st ) : NEW_LINE INDENT st = [ ] NEW_LINE for i in range ( len ( st ) ) : NEW_LINE INDENT if ( st [ i ] != ' ' ) : NEW_LINE INDENT st . append ( st [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT while ( len ( st ) == 0 ) : NEW_LINE INDENT print ( st [ - 1 ] , end = " " ) NEW_LINE st . pop ( ) NEW_LINE DEDENT print ( " " , end = " " ) NEW_LINE DEDENT DEDENT while ( len ( st ) == 0 ) : NEW_LINE INDENT print ( st [ - 1 ] , end = " " ) NEW_LINE st . pop ( ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT st = " Geeks for Geeks " NEW_LINE reverseWords ( st ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if b [ i ] == 1 and a [ i ] == 0 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif b [ i ] == 0 and a [ i ] == 1 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = ( a [ i ] + ans ) // ( a [ i ] + ans ) NEW_LINE if x > 0 : NEW_LINE INDENT print ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE if n == 1 : NEW_LINE INDENT print ( 4 ) NEW_LINE print ( 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE n -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT
def cal ( operand , a , b ) : NEW_LINE INDENT if operand == " + " : NEW_LINE INDENT return int ( a ) + int ( b ) NEW_LINE DEDENT elif operand == " - " : NEW_LINE INDENT return int ( a ) - int ( b ) NEW_LINE DEDENT elif operand == " * " : NEW_LINE INDENT return int ( a ) * int ( b ) NEW_LINE DEDENT DEDENT while True : NEW_LINE INDENT try : NEW_LINE INDENT s = list ( input ( ) . split ( ) ) NEW_LINE DEDENT except EOFError : NEW_LINE INDENT break NEW_LINE DEDENT operand = [ ] NEW_LINE a = [ ] NEW_LINE b = [ ] NEW_LINE for i in s : NEW_LINE INDENT a . append ( int ( i ) ) NEW_LINE DEDENT for i in range ( len ( a ) ) : NEW_LINE INDENT s = [ ] NEW_LINE b . append ( cal ( i , a [ i ] , b [ i ] ) ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( len ( b ) ) : NEW_LINE INDENT if b [ i ] == " + " : NEW_LINE INDENT ans += b [ i ] NEW_LINE DEDENT elif b [ i ] == " - " : NEW_LINE INDENT ans -= b [ i ] NEW_LINE DEDENT elif b [ i ] == " / " : NEW_LINE INDENT ans = ans / b [ i ] NEW_LINE DEDENT DEDENT print ( " % .6f " % ans ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE if k < n : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT elif k == n : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT if n > k : NEW_LINE INDENT if k % n == 0 : NEW_LINE INDENT print ( k // n ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( k // n + 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT x = k // n NEW_LINE print ( n + x ) NEW_LINE DEDENT DEDENT
def findNthTerm ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT n = n // 2 ; NEW_LINE print ( pow ( 3 , n - 1 ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT n = ( n // 2 ) + 1 ; NEW_LINE print ( pow ( 2 , n - 1 ) ) ; NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 4 ; NEW_LINE findNthTerm ( N ) ; NEW_LINE N = 11 ; NEW_LINE findNthTerm ( N ) ; NEW_LINE DEDENT
def countNonIncreasing ( arr , n ) : NEW_LINE INDENT cnt = 0 NEW_LINE len = 1 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( arr [ i + 1 ] >= arr [ i ] ) : NEW_LINE INDENT len += 1 NEW_LINE DEDENT else : NEW_LINE INDENT cnt += ( ( ( len + 1 ) * len ) // 2 ) NEW_LINE len = 1 NEW_LINE DEDENT DEDENT if ( len > 1 ) : NEW_LINE INDENT cnt += ( ( ( len - 1 ) * len ) // 2 ) NEW_LINE DEDENT return cnt NEW_LINE DEDENT arr = [ 5 , 2 , 3 , 7 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countNonIncreasing ( arr , n ) ) NEW_LINE
def maximize ( A1 , A2 , n , x , y ) : NEW_LINE INDENT c = [ 0 for i in range ( n ) ] NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT c [ i ] = A2 [ i ] - A1 [ i ] NEW_LINE sum += A1 [ i ] NEW_LINE DEDENT temp = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( c [ i ] < c [ i + 1 ] ) : NEW_LINE INDENT temp = c [ i ] NEW_LINE c [ i ] = c [ i + 1 ] NEW_LINE c [ i + 1 ] = temp NEW_LINE DEDENT DEDENT maxi = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += c [ i ] NEW_LINE if ( i + 1 >= ( n - x ) ) : NEW_LINE INDENT maxi = max ( sum , maxi ) NEW_LINE DEDENT DEDENT return maxi NEW_LINE DEDENT A1 = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE A2 = [ 5 , 4 , 3 , 2 , 1 ] NEW_LINE n = 5 NEW_LINE x = 3 NEW_LINE y = 3 NEW_LINE print ( maximize ( A1 , A2 , n , x , y ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = input ( ) NEW_LINE ans = ( len ( n ) + 1 ) * ( len ( n ) - 1 ) // 2 NEW_LINE print ( ans + 10 * ( len ( n ) - 1 ) ) NEW_LINE DEDENT
from collections import defaultdict NEW_LINE import sys NEW_LINE input = sys . stdin . readline NEW_LINE N = int ( input ( ) ) NEW_LINE d = [ defaultdict ( lambda : [ ] ) for _ in [ 0 ] * N ] NEW_LINE for _ in [ 0 ] * int ( input ( ) ) : NEW_LINE INDENT a , b , c , t = map ( int , input ( ) . split ( ) ) NEW_LINE d [ a ] [ b ] = c NEW_LINE d [ b ] [ a ] = c NEW_LINE DEDENT def get_distance ( start ) : NEW_LINE INDENT visited = set ( ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT if i + 1 not in visited : NEW_LINE INDENT visited . add ( i ) NEW_LINE dfs ( i + 1 ) NEW_LINE DEDENT DEDENT return d [ start ] [ t ] - d [ t ] [ start ] NEW_LINE DEDENT for _ in [ 0 ] * int ( input ( ) ) : NEW_LINE INDENT start , end , v , p = map ( int , input ( ) . split ( ) ) NEW_LINE d [ start ] [ end ] = v NEW_LINE DEDENT M = int ( input ( ) ) NEW_LINE for _ in [ 0 ] * M : NEW_LINE INDENT a , b , c , t = map ( int , input ( ) . split ( ) ) NEW_LINE d [ a ] [ b ] = c NEW_LINE d [ b ] [ a ] = c NEW_LINE DEDENT start = get_distance ( start ) NEW_LINE end = get_distance ( end ) NEW_LINE ans = v - p NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT if d [ i ] [ j ] != d [ i ] [ j ] and d [ i ] [ j ] != - 1 : NEW_LINE INDENT ans = ans + 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE
r1 , r2 , c1 , c2 , d1 , d2 = map ( int , input ( ) . split ( ) ) NEW_LINE if ( r2 - r1 ) % 2 + ( c2 - r1 ) != 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT k = ( r2 + c2 - r1 ) // 2 NEW_LINE if ( r1 + c2 - r1 ) % 2 + ( d2 + c1 - r1 ) != 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT k = ( r2 + c2 - r1 ) // 2 + ( d2 + c1 - r1 ) // 2 NEW_LINE if ( r2 - r1 ) % 2 + ( c2 - r1 ) % 2 + ( d2 + c1 - r1 ) != 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT print ( k , r2 - r1 , c1 - r1 ) NEW_LINE print ( r1 + c2 - r1 , c1 - r2 ) NEW_LINE
from collections import defaultdict , deque NEW_LINE import sys , heapq , bisect , math , itertools , string , queue , copy , time NEW_LINE sys . setrecursionlimit ( 10 ** 8 ) NEW_LINE INF = float ( ' inf ' ) NEW_LINE mod = 10 ** 9 + 7 NEW_LINE eps = 10 ** - 7 NEW_LINE def inp ( ) : return int ( input ( ) ) NEW_LINE def inpl ( ) : return list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE def inpl_str ( ) : return list ( input ( ) . split ( ) ) NEW_LINE while True : NEW_LINE INDENT N = inp ( ) NEW_LINE M = inp ( ) NEW_LINE if N == 0 and M == 0 : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT A = inpl ( ) NEW_LINE B = inpl ( ) NEW_LINE cnt = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT k = A [ i ] NEW_LINE if k - B [ i ] > 0 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT if k + B [ i ] > N : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT if cnt == 1 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT elif cnt == N : NEW_LINE INDENT print ( cnt ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE dp = [ 10 ** 9 ] * 3 NEW_LINE dp [ 0 ] = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT v = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE for j in range ( 3 ) : NEW_LINE INDENT if dp [ j ] > dp [ j - 1 ] + v : dp [ j ] = dp [ j - 1 ] + v NEW_LINE DEDENT DEDENT if dp [ 7 ] == 10 ** 9 : print ( - 1 ) NEW_LINE else : print ( dp [ 7 ] ) NEW_LINE
def startsWith ( str , pre ) : NEW_LINE INDENT strLen = len ( str ) NEW_LINE preLen = preLen NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE while ( i < strLen and j < preLen ) : NEW_LINE INDENT if ( str [ i ] != pre [ j ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT i += 1 NEW_LINE j += 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def endsWith ( str , suff ) : NEW_LINE INDENT i = len ( str ) - 1 NEW_LINE j = len ( suff ) - 1 NEW_LINE while ( i >= 0 and j >= 0 ) : NEW_LINE INDENT if ( str [ i ] != suff [ j ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT i -= 1 NEW_LINE j -= 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def checkString ( str , a , b ) : NEW_LINE INDENT if ( len ( str ) != a + b ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( startsWith ( str , a ) ) : NEW_LINE INDENT if ( endsWith ( str , b ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT if ( startsWith ( str , b ) ) : NEW_LINE INDENT if ( endsWith ( str , a ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " GeeksforGeeks " NEW_LINE a = " Geeks costs " NEW_LINE b = " rGeeks " NEW_LINE if ( checkString ( str , a , b ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def printCombination ( n ) : NEW_LINE INDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( i % 3 != 0 ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT if ( j % 3 != 0 ) : NEW_LINE INDENT for k in range ( 1 , n ) : NEW_LINE INDENT if ( k % 3 != 0 and ( i + j + k ) == n ) : NEW_LINE INDENT print ( i , " " , j , " " , k ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 233 NEW_LINE printCombination ( n ) NEW_LINE DEDENT
def countIntegralSolutions ( n ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , n - i + 1 ) : NEW_LINE INDENT for k in range ( 0 , n - i + 1 ) : NEW_LINE INDENT for p in range ( 0 , ( n - i - j ) + 1 ) : NEW_LINE INDENT if ( i + j + k == n ) : NEW_LINE INDENT result = result + 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 NEW_LINE print ( countIntegralSolutions ( n ) ) NEW_LINE DEDENT
def digitSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT sum += n % 10 NEW_LINE n //= 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT def getNthTerm ( n ) : NEW_LINE INDENT sum = digitSum ( n ) NEW_LINE if ( sum % 10 == 0 ) : NEW_LINE INDENT return ( n * 10 ) NEW_LINE DEDENT extra = 10 - ( sum % 10 ) NEW_LINE return ( ( n * 10 ) + extra ) NEW_LINE DEDENT def firstNTerms ( n ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( getNthTerm ( i ) , end = " " ) NEW_LINE DEDENT DEDENT n = 10 NEW_LINE firstNTerms ( n ) NEW_LINE
def power ( x , a ) : NEW_LINE INDENT res = 1 NEW_LINE while ( a > 0 ) : NEW_LINE INDENT if ( ( a & 1 ) > 0 ) : NEW_LINE INDENT res = res * x NEW_LINE DEDENT x = x * x NEW_LINE a >>= 1 NEW_LINE DEDENT return res NEW_LINE DEDENT def breakInteger ( N ) : NEW_LINE INDENT if ( N == 2 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( N == 3 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT maxProduct = - 1 NEW_LINE if ( N % 3 ) : NEW_LINE INDENT maxProduct = power ( 3 , N // 3 ) NEW_LINE DEDENT elif ( N % 3 ) : NEW_LINE INDENT maxProduct = power ( 3 , N // 3 ) NEW_LINE DEDENT elif ( N % 3 ) : NEW_LINE INDENT maxProduct = power ( 3 , ( N // 3 ) - 1 ) NEW_LINE DEDENT elif ( N % 3 ) : NEW_LINE INDENT maxProduct = 2 * power ( 3 , ( N // 3 ) - 1 ) NEW_LINE DEDENT DEDENT return maxProduct NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT maxProduct = int ( 10 ) NEW_LINE print ( maxProduct ) NEW_LINE DEDENT
import sys NEW_LINE input = sys . stdin . readline NEW_LINE import numpy as np NEW_LINE def solve ( ) : NEW_LINE INDENT N = int ( input ( ) ) NEW_LINE p = np . arange ( 2 , N + 1 ) NEW_LINE p [ 0 ] = 1 NEW_LINE p [ 1 ] = 2 NEW_LINE for i in range ( 2 , N ) : NEW_LINE INDENT j = np . arange ( i , N + 1 , dtype = np . int64 ) NEW_LINE p [ i ] = p [ i - 1 ] * j NEW_LINE if np . sum ( p [ i : i + 1 ] ) == 0 : NEW_LINE INDENT return p [ i - 1 ] NEW_LINE DEDENT DEDENT return 2 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT T = int ( input ( ) ) NEW_LINE for t in range ( T ) : NEW_LINE INDENT print ( solve ( ) ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
n = input ( ) NEW_LINE n = int ( n [ 0 ] ) NEW_LINE if n == 1 : NEW_LINE INDENT print ( n ) NEW_LINE DEDENT else : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT print ( n [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n [ 0 ] + n [ 1 ] ) NEW_LINE DEDENT DEDENT
from collections import deque NEW_LINE MAX_CHAR = 26 NEW_LINE def firstNonRepeating ( str ) : NEW_LINE INDENT charCount = [ 0 ] * MAX_CHAR NEW_LINE q = deque ( ) NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT ch = str [ i ] NEW_LINE q . append ( ch ) NEW_LINE charCount [ ord ( ch ) - ord ( ' a ' ) ] += 1 NEW_LINE while ( len ( q ) > 0 ) : NEW_LINE INDENT if ( charCount [ q [ 0 ] ] > 1 ) : NEW_LINE INDENT q . pop ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( q [ 0 ] , end = " " ) NEW_LINE break NEW_LINE DEDENT DEDENT if ( len ( q ) == 0 ) : NEW_LINE INDENT print ( - 1 , end = " " ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " aabc " NEW_LINE firstNonRepeating ( str ) NEW_LINE DEDENT
from collections import defaultdict NEW_LINE import sys NEW_LINE input = sys . stdin . readline NEW_LINE n = int ( input ( ) ) NEW_LINE g = defaultdict ( list ) NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE a -= 1 NEW_LINE b -= 1 NEW_LINE g [ a ] . append ( b ) NEW_LINE g [ b ] . append ( a ) NEW_LINE DEDENT def dfs ( node ) : NEW_LINE INDENT if node == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT ans = 0 NEW_LINE for child in g [ node ] : NEW_LINE INDENT if child == 1 : NEW_LINE INDENT continue NEW_LINE DEDENT dfs ( child ) NEW_LINE ans += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if g [ i ] [ 0 ] != g [ i ] [ 1 ] : NEW_LINE INDENT dfs ( g [ i ] [ 0 ] ) NEW_LINE DEDENT DEDENT print ( dfs ( 0 ) ) NEW_LINE
def solve ( n , m , obstacles , range ) : NEW_LINE INDENT val = min ( n , m ) NEW_LINE range . sort ( ) NEW_LINE c = 1 NEW_LINE for i in range ( obstacles - 1 , - 1 , - 1 ) : NEW_LINE INDENT range [ i ] = 2 * range [ i ] NEW_LINE val -= range [ i ] NEW_LINE if ( val <= 0 ) : NEW_LINE INDENT return c NEW_LINE DEDENT else : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT if ( val > 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n , m , obstacles = 4 , 5 , 3 NEW_LINE range = [ 1.0 , 1.25 , 1.15 ] NEW_LINE print ( solve ( n , m , obstacles , range ) ) NEW_LINE DEDENT
def solve ( s ) : NEW_LINE INDENT if s [ 0 ] == ' + ' : NEW_LINE INDENT return [ " M " , " U " , " I " ] NEW_LINE DEDENT elif s [ 0 ] == ' - ' : NEW_LINE INDENT return [ " L " , " U " , " I " ] NEW_LINE DEDENT else : NEW_LINE INDENT return [ " I " , " L " , " U " , " I " ] NEW_LINE DEDENT DEDENT s = input ( ) NEW_LINE n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , n // 2 + 1 ) : NEW_LINE INDENT t = s [ 2 * i ] NEW_LINE if t == " + " : NEW_LINE INDENT ans += n NEW_LINE n = int ( n / 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT ans += t NEW_LINE n = int ( n / 2 ) NEW_LINE DEDENT DEDENT if ans == [ ] : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT ans = " M " NEW_LINE DEDENT else : NEW_LINE INDENT ans = " U " NEW_LINE DEDENT DEDENT elif ans == [ - 1 ] : NEW_LINE INDENT if n % 2 == 1 : NEW_LINE INDENT ans = " L " NEW_LINE DEDENT else : NEW_LINE INDENT ans = " U " NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
stack = [ ] NEW_LINE minStack = [ ] NEW_LINE def push ( x ) : NEW_LINE INDENT stack . append ( x ) NEW_LINE if ( len ( minStack ) == 0 or x <= minStack [ - 1 ] ) : NEW_LINE INDENT minStack . append ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT minStack . append ( minStack [ - 1 ] ) NEW_LINE DEDENT DEDENT def pop ( ) : NEW_LINE INDENT stack . pop ( ) NEW_LINE minStack . pop ( ) NEW_LINE DEDENT def top ( ) : NEW_LINE INDENT return stack [ 0 ] NEW_LINE DEDENT def getMin ( ) : NEW_LINE INDENT return minStack [ 0 ] NEW_LINE DEDENT m = [ ] NEW_LINE m . append ( - 2 ) NEW_LINE m . append ( 0 ) NEW_LINE m . append ( - 3 ) NEW_LINE print ( getMin ( ) ) NEW_LINE m . pop ( ) NEW_LINE print ( m [ - 1 ] ) NEW_LINE print ( m [ - 2 ] ) NEW_LINE print ( getMin ( ) ) NEW_LINE
one = [ " " , " one " , " two " , " three " , " four " , " five " , " six " , " seven " , " eight " , " nine " , " ten " , " eleven " , " twelve " , " thirteen " , " fourteen " , " fifteen " , " sixteen " , " seventeen " , " eighteen " , " nineteen " ] NEW_LINE ten = [ " " , " " , " twenty " , " thirty " , " forty " , " fifty " , " sixty " , " seventy " , " eighty " , " ninety " ] NEW_LINE def numToWords ( n , s ) : NEW_LINE INDENT if ( n > 19 ) : NEW_LINE INDENT str1 = " " NEW_LINE if ( n > 19 ) : NEW_LINE INDENT str1 += ten [ n // 10 ] + one [ n % 10 ] NEW_LINE DEDENT else : NEW_LINE INDENT str1 += one [ n ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT str1 += one [ n ] NEW_LINE DEDENT if ( n != 0 ) : NEW_LINE INDENT str1 += s NEW_LINE DEDENT return str1 NEW_LINE DEDENT def convertToWords ( n ) : NEW_LINE INDENT out = " " NEW_LINE out += numToWords ( ( n // 10000000 ) , " \n " ) NEW_LINE out += numToWords ( ( n // 100000 ) % 100 , " lakh " ) NEW_LINE out += numToWords ( ( n // 1000 ) % 100 , " scipy " ) NEW_LINE out += numToWords ( ( n // 100 ) % 10 , " scipy " ) NEW_LINE out += numToWords ( ( n // 100 ) % 10 , " scipy " ) NEW_LINE if ( n > 100 and n % 100 > 0 ) : NEW_LINE INDENT out += " and " NEW_LINE DEDENT out += numToWords ( n % 100 ) NEW_LINE return out NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4382 itr64 NEW_LINE print ( convertToWords ( n ) ) NEW_LINE DEDENT
def flip last ( a ) : NEW_LINE INDENT neg = 0 NEW_LINE tmp = 1 if ( a < 0 ) else - 1 NEW_LINE while ( a > 0 ) : NEW_LINE INDENT neg += tmp NEW_LINE a += tmp NEW_LINE DEDENT return neg NEW_LINE DEDENT def areDifferent last ( a , b ) : NEW_LINE INDENT return ( ( a < 0 and b > 0 ) or ( a > 0 and b < 0 ) ) NEW_LINE DEDENT def sub ( a , b ) : NEW_LINE INDENT return a + flip last ( b ) NEW_LINE DEDENT def mul ( a , b ) : NEW_LINE INDENT if ( a < b ) : NEW_LINE INDENT return mul ( b , a ) NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( abs ( b ) , - 1 , - 1 ) : NEW_LINE INDENT sum += a NEW_LINE DEDENT if ( b < 0 ) : NEW_LINE INDENT sum = flip last ( sum ) NEW_LINE DEDENT return sum NEW_LINE DEDENT def division ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT raise ValueError ( ) NEW_LINE DEDENT quotient = 0 NEW_LINE dividend = flip ( abs ( b ) ) NEW_LINE for dividend in range ( abs ( a ) , abs ( b ) + 1 ) : NEW_LINE INDENT quotient += 1 NEW_LINE DEDENT if ( are j ) : NEW_LINE INDENT quotient = flip last ( quotient ) NEW_LINE DEDENT return quotient NEW_LINE DEDENT print ( " Subtraction is " , sub ( 4 , - 2 ) ) NEW_LINE print ( " Product is " , sub ( - 9 , 6 ) ) NEW_LINE try : NEW_LINE INDENT print ( " Division is " , division ( 8 , 2 ) ) NEW_LINE DEDENT except ValueError : NEW_LINE INDENT print ( " Exception : - Divide by 0" ) NEW_LINE DEDENT
def factorial ( n ) : NEW_LINE INDENT i = n NEW_LINE fact = 1 NEW_LINE while ( n // i != n ) : NEW_LINE INDENT fact = fact * i NEW_LINE i -= 1 NEW_LINE DEDENT return fact NEW_LINE DEDENT num = 5 NEW_LINE print ( " Factorial of " , num , " is " , factorial ( num ) ) NEW_LINE
def CntDivbyX ( arr , n , x ) : NEW_LINE INDENT number = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT number = number * 2 + arr [ i ] NEW_LINE if ( number % x == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT arr = [ 1 , 0 , 1 , 0 , 1 , 1 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE x = 2 NEW_LINE print ( CntDivbyX ( arr , n , x ) ) NEW_LINE
from collections import Counter NEW_LINE n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c = Counter ( l ) NEW_LINE ans = 0 NEW_LINE for i in c . values ( ) : NEW_LINE INDENT ans += i * ( i - 1 ) NEW_LINE DEDENT print ( ans // 2 ) NEW_LINE
def min_noOfSub last_ pop_pos ( arr , n , k ) : NEW_LINE INDENT noOfSub last_pos = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT noOfSub last_pos = 0 NEW_LINE if ( arr [ i ] > arr [ i - 1 ] ) : NEW_LINE INDENT noOfSub last_pos = ( arr [ i ] - arr [ i - 1 ] ) // k NEW_LINE if ( ( arr [ i ] - arr [ i - 1 ] ) % k != 0 ) : NEW_LINE INDENT noOfSub last_pos += 1 NEW_LINE DEDENT arr [ i ] = arr [ i ] - k * noOfSub last_pos NEW_LINE DEDENT res = res + noOfSub last_pos NEW_LINE DEDENT return res NEW_LINE DEDENT arr | = [ 1 , 1 , 2 , 3 ] NEW_LINE N = 4 NEW_LINE k = 5 NEW_LINE print ( min_noOf_ pop_pos ( arr , N , k ) ) NEW_LINE
def CountSubSet ( arr , n , X ) : NEW_LINE INDENT N = pow ( 2 , n ) NEW_LINE count = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( ( i & ( 1 << j ) ) != 0 ) : NEW_LINE INDENT if ( arr [ j ] == X ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return count NEW_LINE DEDENT arr = [ 4 , 5 , 6 , 7 ] NEW_LINE X = 5 NEW_LINE n = len ( arr ) NEW_LINE print ( CountSubSet ( arr , n , X ) ) NEW_LINE
n = 5 NEW_LINE def FindMaxProduct ( arr , n ) : NEW_LINE INDENT max = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( ( j - 3 ) >= 0 ) : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i ] [ j - 1 ] * arr [ i ] [ j - 2 ] * arr [ i ] [ j - 3 ] NEW_LINE if ( max < result ) : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT if ( ( i - 3 ) >= 0 ) : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i - 1 ] [ j ] * arr [ i - 2 ] [ j ] * arr [ i - 3 ] [ j ] NEW_LINE if ( max < result ) : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT if ( ( i - 3 ) >= 0 and ( j - 3 ) >= 0 ) : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i - 1 ] [ j - 1 ] * arr [ i - 2 ] [ j - 2 ] * arr [ i - 3 ] [ j - 3 ] NEW_LINE if ( max < result ) : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT if ( ( i - 3 ) >= 0 and ( j - 1 ) <= 0 ) : NEW_LINE INDENT result = arr [ i ] [ j ] * arr [ i - 1 ] [ j + 1 ] * arr [ i - 2 ] [ j + 2 ] * arr [ i - 3 ] [ j ] NEW_LINE if ( max < result ) : NEW_LINE INDENT max = result NEW_LINE DEDENT DEDENT DEDENT DEDENT return max NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ [ 1 , 2 , 3 , 4 , 5 ] , [ 6 , 7 , 8 , 9 , 1 ] , [ 2 , 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 1 , 0 ] , [ 9 , 6 , 4 , 2 , 3 ] ] NEW_LINE print ( FindMaxProduct ( arr , n ) ) NEW_LINE DEDENT
MAX = 50002 NEW_LINE primes = [ ] NEW_LINE def sieve ( ) : NEW_LINE INDENT isPrime = [ True for i in range ( MAX ) ] NEW_LINE p = 2 NEW_LINE while p * p < MAX : NEW_LINE INDENT if ( isPrime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT isPrime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT for p in range ( 2 , MAX ) : NEW_LINE INDENT if ( isPrime [ p ] == True ) : NEW_LINE INDENT primes . append ( p ) NEW_LINE DEDENT DEDENT DEDENT def power ( x , y ) : NEW_LINE INDENT count = 0 NEW_LINE z = y NEW_LINE while ( x >= z ) : NEW_LINE INDENT count += ( x // z ) NEW_LINE z *= y NEW_LINE DEDENT return count NEW_LINE DEDENT def mod mult ( a , b , mod ) : NEW_LINE INDENT res = 0 NEW_LINE a = a % mod NEW_LINE while ( b > 0 ) : NEW_LINE INDENT if ( b % 2 == 1 ) : NEW_LINE INDENT res = ( res + a ) % mod NEW_LINE DEDENT a = ( a * 2 ) % mod NEW_LINE b = b // 2 NEW_LINE DEDENT return res % mod NEW_LINE DEDENT def countWays ( n , m ) : NEW_LINE INDENT ans = 1 NEW_LINE for i in range ( 1 , len ( primes ) ) : NEW_LINE INDENT powers = power ( n , primes [ i ] ) NEW_LINE if ( powers == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT ans = mod mult ( ans , powers + 1 , m ) % m NEW_LINE DEDENT if ( ( ans - 1 ) % m ) : NEW_LINE INDENT return ( ans - 1 + m ) % m NEW_LINE DEDENT else : NEW_LINE INDENT return ( ans - 1 ) % m NEW_LINE DEDENT DEDENT sieve ( ) NEW_LINE n = 4 NEW_LINE m = 7 NEW_LINE print ( countWays ( n , m ) ) NEW_LINE
def smallestIndexsum ( arr , n ) : NEW_LINE INDENT i = n - 1 NEW_LINE while ( i >= 0 and arr [ i ] % 2 == 1 ) : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT sum = 0 NEW_LINE for j in range ( 0 , i + 1 ) : NEW_LINE INDENT sum += arr [ j ] NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 3 , 5 , 6 , 3 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( smallestIndexsum ( arr , n ) ) NEW_LINE DEDENT
s = input ( ) NEW_LINE s = s . split ( ' : ' ) NEW_LINE n = int ( s [ 0 ] ) NEW_LINE m = int ( s [ 1 ] ) NEW_LINE h = int ( s [ 2 ] ) NEW_LINE s = s [ 3 ] NEW_LINE l = n * 60 * 60 + m * 60 + h NEW_LINE print ( ( l - 1 ) // ( 1000 * 60 ) ) NEW_LINE
s = input ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] == ' Q ' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT if s [ 0 ] == ' A ' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT for i in range ( 1 , len ( s ) ) : NEW_LINE INDENT if s [ i ] == ' Q ' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT if s [ len ( s ) - 1 ] == ' A ' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT if s [ len ( s ) - 2 ] == ' Q ' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE dp = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( k + 1 ) : NEW_LINE INDENT if i + 1 == j : NEW_LINE INDENT dp [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT if dp [ i + 1 ] [ j ] <= k : NEW_LINE INDENT dp [ i ] [ j ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( 1 ) NEW_LINE
n , s = map ( int , input ( ) . split ( ) ) NEW_LINE i = 0 NEW_LINE c = 0 NEW_LINE while n >= s : NEW_LINE INDENT c += ( s - ( s % n ) ) // i NEW_LINE i += 1 NEW_LINE DEDENT print ( c ) NEW_LINE
v = [ ] NEW_LINE def multiply ( x ) : NEW_LINE INDENT carry = 0 NEW_LINE size = len ( v ) NEW_LINE for i in range ( size ) : NEW_LINE INDENT res = carry + v [ i ] * x NEW_LINE v [ i ] = res % 10 NEW_LINE carry = int ( res / 10 ) NEW_LINE DEDENT while ( carry != 0 ) : NEW_LINE INDENT v . append ( carry % 10 ) NEW_LINE carry = int ( carry / 10 ) NEW_LINE DEDENT DEDENT def findSumOfDigits ( n ) : NEW_LINE INDENT v . append ( 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT multiply ( i ) NEW_LINE DEDENT sum = 0 NEW_LINE size = len ( v ) NEW_LINE for i in range ( size ) : NEW_LINE INDENT sum += v [ i ] NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 1000 NEW_LINE print ( findSumOfDigits ( n ) ) NEW_LINE
n , m , m = map ( int , input ( ) . split ( ) ) NEW_LINE lst = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT lst . append ( input ( ) ) NEW_LINE DEDENT hit = 0 NEW_LINE hit = 0 NEW_LINE edge = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if lst [ i ] [ 1 ] == ' R ' and lst [ i ] [ 2 ] == ' L ' : NEW_LINE INDENT hit += 1 NEW_LINE DEDENT elif lst [ i ] [ 1 ] == ' U ' and lst [ i ] [ 2 ] == ' D ' : NEW_LINE INDENT hit += 1 NEW_LINE DEDENT elif lst [ i ] [ 1 ] == ' L ' and lst [ i ] [ 2 ] == ' U ' : NEW_LINE INDENT hit += 1 NEW_LINE DEDENT elif lst [ i ] [ 1 ] == ' R ' and lst [ i ] [ 2 ] == ' D ' : NEW_LINE INDENT hit += 1 NEW_LINE DEDENT elif lst [ i ] [ 1 ] == ' U ' and lst [ i ] [ 2 ] == ' D ' : NEW_LINE INDENT hit += 1 NEW_LINE DEDENT elif lst [ i ] [ 1 ] == ' D ' and lst [ i ] [ 2 ] == ' L ' : NEW_LINE INDENT hit += 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT print ( lst [ i ] [ 0 ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT
from math import ceil NEW_LINE n = int ( input ( ) ) NEW_LINE l = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE q = int ( input ( ) ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT l , r , x = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE k = ceil ( x / ( r - 1 ) ) NEW_LINE if k > l : NEW_LINE INDENT l . extend ( [ i for i in range ( k + 1 , k + 1 ) ] ) NEW_LINE DEDENT else : NEW_LINE INDENT l . extend ( [ i for i in range ( k + 1 , k + 1 ) ] ) NEW_LINE DEDENT l . extend ( [ i for i in range ( k + 1 , k + 1 ) ] ) NEW_LINE DEDENT print ( * l ) NEW_LINE
n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE l = l [ : : - 1 ] NEW_LINE l = [ 0 ] + l + [ i + 1 for i in l ] NEW_LINE s = [ l [ i ] ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s . append ( l [ i - 1 ] - l [ i ] + 2 ) NEW_LINE DEDENT s . append ( l [ - 1 ] - l [ - 1 ] + 2 ) NEW_LINE print ( * s ) NEW_LINE
def pell ( n ) : NEW_LINE INDENT if ( n <= 2 ) : NEW_LINE INDENT return n NEW_LINE DEDENT return ( 2 * pell ( n - 1 ) + pell ( n - 2 ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 NEW_LINE print ( pell ( n ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE odd = [ ] NEW_LINE even = [ ] NEW_LINE even = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if j % 2 == 0 : NEW_LINE INDENT even . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT odd . append ( i ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if j % 2 == 0 : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT odd . append ( j ) NEW_LINE DEDENT else : NEW_LINE INDENT even . append ( j ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT odd . append ( j ) NEW_LINE DEDENT else : NEW_LINE INDENT odd . append ( j ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT r = ' ' . join ( [ str ( elem ) for elem in even ] + [ str ( elem ) for elem in odd ] ) NEW_LINE print ( r ) NEW_LINE
def printSmall ( arr , asize , n ) : NEW_LINE INDENT copy_arr = arr NEW_LINE copy_arr = sorted ( copy_arr ) NEW_LINE for i in range ( asize ) : NEW_LINE INDENT if ( arr . index ( copy_arr [ 0 ] ) > - 1 ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 ] NEW_LINE asize = len ( arr ) NEW_LINE n = 5 NEW_LINE printSmall ( arr , asize , n ) NEW_LINE DEDENT
def countNumbers ( n ) : NEW_LINE INDENT k = 0 ; NEW_LINE count = 0 ; NEW_LINE while ( n > 0 ) : NEW_LINE INDENT if ( n & 1 == 0 ) : NEW_LINE INDENT count += 2 ** k ; NEW_LINE DEDENT k += 1 ; NEW_LINE n >>= 1 ; NEW_LINE DEDENT return count ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 11 ; NEW_LINE print ( countNumbers ( n ) ) ; NEW_LINE DEDENT
n , m , n = map ( int , input ( ) . split ( ) ) NEW_LINE min_ = min ( map ( int , input ( ) . split ( ) ) ) NEW_LINE max_ = max ( map ( int , input ( ) . split ( ) ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT min_ = min ( map ( int , input ( ) . split ( ) ) ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT max_ = max ( map ( int , input ( ) . split ( ) ) ) NEW_LINE DEDENT print ( max_ // min_ ) * min_ NEW_LINE
maximum = - 10 ** 9 NEW_LINE ans = 10 ** 9 NEW_LINE graph = [ [ ] for i in range ( 10000 ) ] NEW_LINE weight = [ 0 ] * ( 10000 ) NEW_LINE def __ seq ( ) : NEW_LINE INDENT c = 0 NEW_LINE for i in range ( 60 ) : NEW_LINE INDENT if ( ( x >> i ) & 1 != 0 ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT return c NEW_LINE DEDENT def dfs ( node , parent ) : NEW_LINE INDENT a = __ seq ( ) NEW_LINE if ( maximum < a ) : NEW_LINE INDENT maximum = a NEW_LINE ans = node NEW_LINE DEDENT elif ( maximum == a ) : NEW_LINE INDENT ans = min ( ans , node ) NEW_LINE DEDENT for i in range ( len ( graph [ node ] ) ) : NEW_LINE INDENT if ( graph [ node ] [ i ] == parent ) : NEW_LINE INDENT continue NEW_LINE DEDENT dfs ( graph [ node ] [ i ] , node ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x = 15 NEW_LINE weight [ 0 ] = 5 NEW_LINE weight [ 1 ] = 10 NEW_LINE weight [ 2 ] = 11 NEW_LINE weight [ 3 ] = 8 NEW_LINE weight [ 4 ] = 6 NEW_LINE graph [ 1 ] . append ( 2 ) NEW_LINE graph [ 2 ] . append ( 3 ) NEW_LINE graph [ 2 ] . append ( 4 ) NEW_LINE graph [ 1 ] . append ( 5 ) NEW_LINE graph [ 1 ] . append ( 1 ) NEW_LINE print ( ans ) NEW_LINE DEDENT
MAX = 26 NEW_LINE def updateFreq ( str , freq ) : NEW_LINE INDENT l = len ( str ) NEW_LINE for i in range ( l ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT DEDENT def maxCount ( str , patt ) : NEW_LINE INDENT strFreq = [ 0 ] * MAX NEW_LINE updateFreq ( str , strFreq ) NEW_LINE pattFreq = [ 0 ] * MAX NEW_LINE updateFreq ( patt , pattFreq ) NEW_LINE ans = MAX_VALUE NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if ( pattFreq [ i ] == 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT ans = min ( ans , ( int ) ( strFreq [ i ] / pattFreq [ i ] ) ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " geeksforgeeks " NEW_LINE patt = " geeks " NEW_LINE print ( maxCount ( str , patt ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE max_a = 0 NEW_LINE max_b = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT max_a = max ( max_a | a [ i ] , max_b | b [ i ] ) NEW_LINE max_b = max ( max_b , max_a | b [ i ] ) NEW_LINE DEDENT print ( max_a + max_b ) NEW_LINE
n , l , r , q , p , n = map ( int , input ( ) . split ( ) ) NEW_LINE w = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = float ( " inf " ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT ans = min ( ans , sum ( w [ : i + 1 ] ) * p + sum ( w [ i + 1 : ] ) * q + sum ( w [ i : ] ) * p ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def pos ( V , M , N ) : NEW_LINE INDENT idx = 0 NEW_LINE while ( V > 0 and M > 0 ) : NEW_LINE INDENT idx += 1 NEW_LINE V = V - M NEW_LINE M = M - N NEW_LINE DEDENT idx = idx + 1 NEW_LINE while ( V > 0 and M > 0 ) : NEW_LINE INDENT idx = idx + 1 NEW_LINE M = M - N NEW_LINE DEDENT return ( V * N ) NEW_LINE DEDENT V = 700 NEW_LINE M = 10 NEW_LINE N = 3 NEW_LINE print ( pos ( V , M , N ) ) NEW_LINE V = 1000 NEW_LINE M = 100 NEW_LINE N = 50 NEW_LINE print ( pos ( V , M , N ) ) NEW_LINE
def maxSubStr ( str , n ) : NEW_LINE INDENT count0 = 0 NEW_LINE count1 = 0 NEW_LINE cnt = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( str [ i ] == '0' ) : NEW_LINE INDENT count0 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count1 += 1 NEW_LINE DEDENT if ( count0 == count1 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT if ( count0 != count1 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = "0100110101" NEW_LINE n = len ( str ) NEW_LINE print ( maxSubStr ( str , n ) ) NEW_LINE DEDENT
a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE if a > b : NEW_LINE INDENT if b > c : NEW_LINE INDENT print ( " { } { } " . format ( c , b , a ) ) NEW_LINE DEDENT else : NEW_LINE INDENT if a > c : NEW_LINE INDENT print ( " { } { } " . format ( c , a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " { } { } " . format ( c , a , b ) ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT if a > c : NEW_LINE INDENT print ( " { } { } " . format ( c , a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT if b > c : NEW_LINE INDENT print ( " { } { } " . format ( c , a , b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " { } { } " . format ( a , c , b ) ) NEW_LINE DEDENT DEDENT
def findS ( s ) : NEW_LINE INDENT sum = 0 NEW_LINE n = 1 NEW_LINE while ( sum < s ) : NEW_LINE INDENT sum += n NEW_LINE if ( sum == s ) : NEW_LINE INDENT return n NEW_LINE DEDENT n += 1 NEW_LINE DEDENT return - 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = 15 NEW_LINE n = findS ( s ) NEW_LINE if ( n == - 1 ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n ) NEW_LINE DEDENT DEDENT
def maximum func ( arr , n ) : NEW_LINE INDENT mn = 10 ** 9 NEW_LINE mx = - 10 ** 9 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( i > 0 and arr [ i ] == - 1 and arr [ i - 1 ] != - 1 ) : NEW_LINE INDENT mn = min ( mn , arr [ i - 1 ] ) NEW_LINE mx = max ( mx , arr [ i - 1 ] ) NEW_LINE DEDENT if ( i < n - 1 and arr [ i ] == - 1 and arr [ i + 1 ] != - 1 ) : NEW_LINE INDENT mn = min ( mn , arr [ i + 1 ] ) NEW_LINE mx = max ( mx , arr [ i + 1 ] ) NEW_LINE DEDENT DEDENT common_integer = ( mn + mx ) // 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == - 1 ) : NEW_LINE INDENT arr [ i ] = common_integer NEW_LINE DEDENT DEDENT max_diff = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT diff = abs ( arr [ i ] - arr [ i + 1 ] ) NEW_LINE if ( diff > max_diff ) : NEW_LINE INDENT max_diff = diff NEW_LINE DEDENT DEDENT return max_diff NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ - 1 , - 1 , 11 , - 1 , 3 , - 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( func ( arr , n ) ) NEW_LINE DEDENT
MOD = 1000000007 NEW_LINE def countStrings ( N ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] NEW_LINE for i in range ( N + 1 ) : NEW_LINE INDENT for j in range ( 9 , 3 , 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT dp [ 1 ] [ 0 ] = 1 NEW_LINE dp [ 1 ] [ 1 ] = 1 NEW_LINE dp [ 1 ] [ 2 ] = 0 NEW_LINE for i in range ( 2 , N + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] + dp [ i - 1 ] [ 2 ] ) % MOD NEW_LINE dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] ) % MOD NEW_LINE dp [ i ] [ 2 ] = ( dp [ i - 1 ] [ 2 ] + dp [ i - 1 ] [ 1 ] ) % MOD NEW_LINE DEDENT ans = ( dp [ N ] [ 0 ] + dp [ N ] [ 1 ] + dp [ N ] [ 2 ] ) % MOD NEW_LINE return ans NEW_LINE DEDENT N = 3 NEW_LINE print ( countStrings ( N ) ) NEW_LINE
def longest_subseq ( n , k , s ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE max_length = [ 0 ] * 26 NEW_LINE for i in range ( n ) : NEW_LINE INDENT curr = ord ( s [ i ] ) - ord ( ' a ' ) NEW_LINE lower = max ( 0 , curr - k ) NEW_LINE upper = min ( 25 , curr + k ) NEW_LINE for j in range ( lower , upper + 1 ) : NEW_LINE INDENT dp [ i ] = max ( dp [ i ] , max_length [ j ] + 1 ) NEW_LINE DEDENT max_length [ curr ] = max ( dp [ i ] , max_length [ curr ] ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( dp ) : NEW_LINE INDENT ans = max ( i , ans ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE n = len ( s ) NEW_LINE k = 3 NEW_LINE print ( longest_subseq ( n , k , s ) ) NEW_LINE DEDENT
def longestFibonacciSubarray ( n , a ) : NEW_LINE INDENT if ( n <= 2 ) : NEW_LINE INDENT return n NEW_LINE DEDENT len1 = 2 NEW_LINE mx = - 10 ** 9 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT if ( a [ i ] == a [ i - 1 ] + a [ i - 2 ] ) : NEW_LINE INDENT len1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT len1 = 2 NEW_LINE DEDENT mx = max ( mx , len1 ) NEW_LINE DEDENT return mx NEW_LINE DEDENT n = 5 NEW_LINE a = [ 2 , 4 , 6 , 10 , 2 ] NEW_LINE print ( longestFibonacciSubarray ( n , a ) ) NEW_LINE
def minimumSubarrays ( ar , n ) : NEW_LINE INDENT se = [ ] NEW_LINE cnt = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ar [ i ] not in se : NEW_LINE INDENT se . append ( ar [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT cnt += 1 NEW_LINE se = [ ] NEW_LINE se . append ( ar [ i ] ) NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT ar = [ 1 , 2 , 1 , 3 , 4 , 2 , 4 , 4 , 4 ] NEW_LINE n = len ( ar ) NEW_LINE print ( minimumSubarrays ( ar , n ) ) NEW_LINE DEDENT
def check ( s ) : NEW_LINE INDENT freq = [ 0 ] * 10 NEW_LINE while ( s != 0 ) : NEW_LINE INDENT r = s % 10 NEW_LINE s = int ( s / 10 ) NEW_LINE freq [ r ] += 1 NEW_LINE DEDENT xor__ = 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT xor__ = xor__ ^ freq [ i ] NEW_LINE if ( xor__ == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT s = 122233 NEW_LINE if ( check ( s ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE f = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if f == 1 : NEW_LINE INDENT l [ i ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT l [ i ] = l [ i ] % m NEW_LINE DEDENT f += 1 NEW_LINE DEDENT j = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT k = ( f + l [ i ] ) // m NEW_LINE if j == 0 : NEW_LINE INDENT print ( k , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( k , end = " " ) NEW_LINE DEDENT j += 1 NEW_LINE DEDENT
MAXN = 1000005 NEW_LINE even = [ 0 ] * MAXN NEW_LINE odd = [ 0 ] * MAXN NEW_LINE def precompute ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 ) : NEW_LINE INDENT odd [ i ] = 1 NEW_LINE DEDENT if ( arr [ i ] % 2 ) : NEW_LINE INDENT even [ i ] = 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT even [ i ] = even [ i ] + even [ i - 1 ] NEW_LINE odd [ i ] = odd [ i - 1 ] + odd [ i ] NEW_LINE DEDENT DEDENT def isOdd ( L , R ) : NEW_LINE INDENT cnt = odd [ R ] NEW_LINE if ( L > 0 ) : NEW_LINE INDENT cnt -= odd [ L - 1 ] NEW_LINE DEDENT if ( cnt == R - L + 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def performQueries ( a , n , q , m ) : NEW_LINE INDENT precompute ( a , n ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT L = q [ i ] [ 0 ] NEW_LINE R = q [ i ] [ 1 ] NEW_LINE if ( isOdd ( L , R ) ) : NEW_LINE INDENT print ( " Odd " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Even " ) NEW_LINE DEDENT DEDENT DEDENT a = [ 2 , 1 , 5 , 7 , 6 , 8 , 9 ] NEW_LINE n = len ( a ) NEW_LINE q = [ [ 0 , 2 ] , [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 6 ] ] NEW_LINE m = len ( q ) NEW_LINE performQueries ( a , n , q , m ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if ( n % 7 != 0 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT for k in range ( 5 ) : NEW_LINE INDENT if ( j + k * 5 ) % 7 == 0 and ( j + k * 5 ) % 7 != 0 : NEW_LINE INDENT print ( j , k , ( j + k * 5 ) // 7 ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE c , d = map ( int , input ( ) . split ( ) ) NEW_LINE t = input ( ) NEW_LINE h = int ( t [ 0 ] ) * 60 + int ( t [ 1 ] ) NEW_LINE m = int ( t [ 2 ] ) * 60 + int ( t [ 3 ] ) NEW_LINE s = t [ 4 ] NEW_LINE ans = 0 NEW_LINE for i in range ( 300 , 1440 ) : NEW_LINE INDENT h += 1 NEW_LINE m += 1 NEW_LINE if h >= m : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif h >= m : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = [ 1 , 2 ] NEW_LINE x = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE flag = 0 NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT if a [ i ] == x [ i + 1 ] and a [ i + 1 ] == x [ i + 2 ] : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
def times ( steps , n ) : NEW_LINE INDENT current_level = 0 ; NEW_LINE previous_level = 0 ; NEW_LINE count = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT previous_level = current_level ; NEW_LINE current_level = current_level + steps [ i ] ; NEW_LINE if ( ( previous_level < 0 and current_level >= 0 ) or ( previous_level > 0 and current_level <= 0 ) ) : NEW_LINE INDENT count += 1 ; NEW_LINE DEDENT DEDENT return count ; NEW_LINE DEDENT steps = [ 1 , - 1 , 0 , 0 , 1 , 1 , - 3 , 2 ] ; NEW_LINE n = len ( steps ) ; NEW_LINE print ( times ( steps , n ) ) ; NEW_LINE
import sys NEW_LINE input = sys . stdin . readline NEW_LINE n = int ( input ( ) ) NEW_LINE x = [ ] NEW_LINE y = [ ] NEW_LINE z = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE x . append ( s [ 0 ] ) NEW_LINE y . append ( s [ 1 ] ) NEW_LINE DEDENT x . append ( 360 - s [ 0 ] ) NEW_LINE y . append ( 360 + s [ 1 ] ) NEW_LINE z . append ( h [ 2 ] ) NEW_LINE ans = 0 NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT d = x [ i ] * 2 NEW_LINE p = x [ i ] + y [ i ] NEW_LINE for j in range ( 1 , n ) : NEW_LINE INDENT d = x [ j ] + z [ j - 1 ] NEW_LINE p = max ( p , max ( p - d , 0 ) ) NEW_LINE DEDENT d = x [ i ] + y [ i ] NEW_LINE ans = min ( ans , max ( p - d , 0 ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE p = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE j = 0 NEW_LINE ans = " Um _ nik " NEW_LINE for i in range ( n ) : NEW_LINE INDENT while j < n - 1 and p [ j ] > 1 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j == n - 1 : NEW_LINE INDENT ans = " Petr " NEW_LINE break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
def smallest ( s ) : NEW_LINE INDENT l = len ( s ) NEW_LINE ans = " " NEW_LINE for i in range ( l - 1 ) : NEW_LINE INDENT if ( ord ( s [ i ] ) > ord ( s [ i + 1 ] ) ) : NEW_LINE INDENT for j in range ( l ) : NEW_LINE INDENT if ( i != j ) : NEW_LINE INDENT ans += s [ j ] NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT ans = s [ : l - 1 ] NEW_LINE return ans NEW_LINE DEDENT s = " abcda " NEW_LINE print ( smallest ( s ) ) NEW_LINE
import sys NEW_LINE input = sys . stdin . readline NEW_LINE def main ( ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE print ( " Yes " if a == b or ( a == b and int ( input ( ) ) % 2 ) else " No " ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
import sys NEW_LINE def FindMinNumber ( arr , n , k ) : NEW_LINE INDENT i = 0 NEW_LINE j = 0 NEW_LINE min_num = sys . maxsize NEW_LINE found = False NEW_LINE sum = 0 NEW_LINE while ( i < n ) : NEW_LINE INDENT sum = sum + arr [ i ] NEW_LINE if ( sum == k ) : NEW_LINE INDENT min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) NEW_LINE found = True NEW_LINE DEDENT elif ( sum > k ) : NEW_LINE INDENT while ( sum > k ) : NEW_LINE INDENT sum = sum - arr [ j ] NEW_LINE j += 1 NEW_LINE DEDENT if ( sum == k ) : NEW_LINE INDENT min_num = min ( min_num , ( ( n - ( i + 1 ) ) + j ) ) NEW_LINE found = True NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT if ( found ) : NEW_LINE INDENT return min_num NEW_LINE DEDENT return - 1 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 3 , 2 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE k = 5 NEW_LINE print ( FindMinNumber ( arr , n , k ) ) NEW_LINE DEDENT
import sys NEW_LINE from sys import stdin NEW_LINE input = stdin . readline NEW_LINE def main ( args ) : NEW_LINE INDENT S = input ( ) . strip ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( len ( S ) ) : NEW_LINE INDENT if S [ i ] == '1' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
def nthPalindrome ( n , k ) : NEW_LINE INDENT temp = ( k // 2 ) if ( k & 1 ) else ( k // 2 - 1 ) NEW_LINE palindrome = pow ( 10 , temp ) NEW_LINE palindrome += n - 1 NEW_LINE print ( palindrome ) NEW_LINE if ( k & 1 ) : NEW_LINE INDENT palindrome //= 10 NEW_LINE DEDENT while ( palindrome > 0 ) : NEW_LINE INDENT print ( palindrome % 10 , end = " " ) NEW_LINE palindrome //= 10 NEW_LINE DEDENT print ( " " ) NEW_LINE DEDENT n = 6 NEW_LINE k = 5 NEW_LINE print ( n , " th palindrome of " , k , " digit = " ) NEW_LINE nthPalindrome ( n , k ) NEW_LINE n = 10 NEW_LINE k = 6 NEW_LINE print ( n , " th palindrome of " , k , " digit = " ) NEW_LINE nthPalindrome ( n , k ) NEW_LINE
import sys NEW_LINE import numpy as np NEW_LINE n , x = map ( int , input ( ) . split ( ) ) NEW_LINE X = np . array ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE tmp = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += ( i + 1 ) * ( i + 2 ) NEW_LINE tmp += 5 NEW_LINE DEDENT sum = sum + x NEW_LINE max = max ( tmp , max ) NEW_LINE print ( max ) NEW_LINE
MAX = 10000 NEW_LINE hashTable = [ 0 ] * MAX NEW_LINE def minOperations ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT hashTable [ arr [ i ] ] += 1 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( hashTable [ arr [ i ] ] != 0 ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT if ( arr [ j ] % arr [ i ] == 0 ) : NEW_LINE INDENT hashTable [ arr [ j ] ] = 0 NEW_LINE DEDENT DEDENT res += 1 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 4 , 6 , 2 , 8 , 7 , 21 , 24 , 49 , 44 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minOperations ( arr , n ) ) NEW_LINE DEDENT
a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE if a > b : NEW_LINE INDENT if b > c : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT if a > c : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT if a > c : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT else : NEW_LINE INDENT if b > c : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT DEDENT DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT numer = 1 NEW_LINE denom = 1 NEW_LINE for d in range ( 10 , 100 ) : NEW_LINE INDENT for n in range ( 10 , d ) : NEW_LINE INDENT ( n0 , n1 ) = ( int ( n % 10 ) , int ( n / 10 ) ) NEW_LINE d0 , d1 = ( int ( d % 10 ) , int ( n / 10 ) ) NEW_LINE if ( n1 == d0 and n0 * d == n * d1 or n0 == d1 and n1 * d == n * d0 ) : NEW_LINE INDENT numer = numer * n NEW_LINE denom = denom * d NEW_LINE DEDENT DEDENT DEDENT return str ( denom // eulerlib . gcd ( numer , denom ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def countSetBits ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT count += n & 1 NEW_LINE n >>= 1 NEW_LINE DEDENT return count NEW_LINE DEDENT def countOfOddsPascal ( n ) : NEW_LINE INDENT c = countSetBits ( n ) NEW_LINE return pow ( 2 , c ) NEW_LINE DEDENT n = 20 NEW_LINE print ( countOfOddsPascal ( n ) ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT a , b , x , y = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE print ( max ( max ( x - 1 , a - x ) * max ( y - 1 , b - y ) , a * max ( x , y ) ) ) NEW_LINE DEDENT
def minSwaps ( arr ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE arrpos = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arrpos . append ( ( arr [ i ] , i ) ) NEW_LINE DEDENT arrpos . sort ( ) NEW_LINE arrpos . sort ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( not arrpos [ i ] [ 1 ] == i ) : NEW_LINE INDENT continue NEW_LINE DEDENT cycle_size = 0 NEW_LINE j = i NEW_LINE while ( not arrpos [ j ] [ 1 ] ) : NEW_LINE INDENT vis [ j ] = 1 NEW_LINE j = arrpos [ j ] [ 1 ] NEW_LINE cycle_size += 1 NEW_LINE DEDENT if ( cycle_size > 0 ) : NEW_LINE INDENT ans += ( cycle_size - 1 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 1 , 5 , 4 , 3 , 2 ] NEW_LINE print ( minSwaps ( a ) ) NEW_LINE DEDENT
N = 1000005 NEW_LINE prime = [ True for i in range ( N ) ] NEW_LINE def sieve ( ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE prime [ 0 ] = False NEW_LINE for i in range ( 2 , N ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT for j in range ( i * 2 , N , i ) : NEW_LINE INDENT prime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def sum Urimes ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT num = i NEW_LINE flag = True NEW_LINE while ( num > 0 ) : NEW_LINE INDENT if ( not prime [ num ] ) : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT num = int ( num / 10 ) NEW_LINE DEDENT num = i NEW_LINE power = 10 NEW_LINE while ( num / power > 0 ) : NEW_LINE INDENT if ( not prime [ num % power ] ) : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT power *= 10 NEW_LINE DEDENT if ( flag ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 25 NEW_LINE sieve ( ) NEW_LINE print ( sum Urimes ( n ) ) NEW_LINE DEDENT
def findweight ( X ) : NEW_LINE INDENT sum = 0 NEW_LINE power = 0 NEW_LINE number = 3 NEW_LINE while ( sum < X ) : NEW_LINE INDENT sum = number - 1 NEW_LINE sum = sum // 2 NEW_LINE power = power + 1 NEW_LINE number = number * 3 NEW_LINE DEDENT ans = 1 NEW_LINE for i in range ( 1 , power + 1 ) : NEW_LINE INDENT print ( ans , end = " " ) NEW_LINE ans = ans * 3 NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT X = 2 NEW_LINE findweight ( X ) NEW_LINE DEDENT
def addToArrayForm ( A , K ) : NEW_LINE INDENT v = [ ] NEW_LINE rem = 0 NEW_LINE i = 0 NEW_LINE for i in range ( len ( A ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT my = A [ i ] + K % 10 + rem NEW_LINE if my > 9 : NEW_LINE INDENT rem = 1 NEW_LINE v . append ( my % 10 ) NEW_LINE DEDENT else : NEW_LINE INDENT v . append ( my ) NEW_LINE rem = 0 NEW_LINE DEDENT K = K // 10 NEW_LINE DEDENT while K > 0 : NEW_LINE INDENT my = K % 10 + rem NEW_LINE v . append ( my % 10 ) NEW_LINE if my // 10 > 0 : NEW_LINE INDENT rem = 1 NEW_LINE DEDENT else : NEW_LINE INDENT rem = 0 NEW_LINE DEDENT K = K // 10 NEW_LINE DEDENT if rem > 0 : NEW_LINE INDENT v . append ( rem ) NEW_LINE DEDENT for j in range ( len ( v ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT v . append ( v [ j ] ) NEW_LINE DEDENT return v NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = [ 2 , 7 , 4 ] NEW_LINE K = 181 NEW_LINE ans = addToArrayForm ( A , K ) NEW_LINE for i in range ( len ( ans ) ) : NEW_LINE INDENT print ( ans [ i ] , end = " " ) NEW_LINE DEDENT DEDENT
def printPaths ( input , R , C ) : NEW_LINE INDENT for i in range ( C ) : NEW_LINE INDENT dfs ( input , " " , 0 , i , R , C ) NEW_LINE print ( ) NEW_LINE DEDENT DEDENT def dfs ( input , res , i , j , R , C ) : NEW_LINE INDENT if ( i == R ) : NEW_LINE INDENT print ( res , end = " " ) NEW_LINE return NEW_LINE DEDENT res = res + input [ i ] [ j ] NEW_LINE for k in range ( C ) : NEW_LINE INDENT dfs ( input , res , i + 1 , k , R , C ) NEW_LINE if ( i + 1 == R ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT input = [ [ ' a ' , ' b ' ] , [ ' d ' , ' e ' ] ] NEW_LINE R = len ( input [ 0 ] ) NEW_LINE C = len ( input [ 0 ] ) NEW_LINE printPaths ( input , R , C ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = int ( s [ i ] ) NEW_LINE if x == 1 : NEW_LINE INDENT ans . append ( " L " ) NEW_LINE DEDENT elif x == 2 : NEW_LINE INDENT ans . append ( " R " ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( " R " ) NEW_LINE DEDENT DEDENT print ( " " . join ( ans ) ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT a1 , b1 , a2 , b2 = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE if a1 == b1 : NEW_LINE INDENT if a2 == b2 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if a2 == b2 : NEW_LINE INDENT if a1 == a2 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if b1 == b2 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def 19Compute ( x , y , n ) : NEW_LINE INDENT if ( y == 0 ) : NEW_LINE INDENT print ( " Infinite " ) NEW_LINE return NEW_LINE DEDENT if ( x == 0 ) : NEW_LINE INDENT print ( "0" , end = " " ) NEW_LINE return NEW_LINE DEDENT if ( n <= 0 ) : NEW_LINE INDENT print ( int ( x / y ) , end = " " ) NEW_LINE return NEW_LINE DEDENT if ( ( x > 0 ) and ( y < 0 ) ) or ( ( x < 0 ) and ( y > 0 ) ) : NEW_LINE INDENT print ( " - " , end = " " ) NEW_LINE x = int ( x / y ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT print ( d , end = " " ) NEW_LINE x = x - ( y * d ) NEW_LINE if ( x == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT x = int ( x * 10 ) NEW_LINE d = x // y NEW_LINE if ( i == 0 ) : NEW_LINE INDENT print ( " . " , end = " " ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT print ( " - " , end = " " ) NEW_LINE x = int ( x / y ) NEW_LINE for i in range ( 0 , n + 1 ) : NEW_LINE INDENT print ( d , end = " " ) NEW_LINE x = int ( x - ( y * d ) ) NEW_LINE if ( x == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT x = int ( x * 10 ) NEW_LINE d = x // y NEW_LINE if ( i == 0 ) : NEW_LINE INDENT print ( " . " , end = " " ) NEW_LINE DEDENT DEDENT DEDENT print ( ) NEW_LINE DEDENT x = 22 NEW_LINE y = 7 NEW_LINE n = 15 NEW_LINE 19Compute ( x , y , n ) NEW_LINE
def gcd ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return gcd ( b , a % b ) NEW_LINE DEDENT DEDENT def lcmOfArray ( arr , n ) : NEW_LINE INDENT if ( n < 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT lcm = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) NEW_LINE DEDENT return lcm NEW_LINE DEDENT def minPerfectCube ( arr , n ) : NEW_LINE INDENT minPerfectCube = lcm NEW_LINE cnt = 0 NEW_LINE while ( lcm > 1 and lcm % 2 == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= 2 NEW_LINE DEDENT if ( cnt % 3 == 2 ) : NEW_LINE INDENT minPerfectCube *= 2 NEW_LINE DEDENT elif ( cnt % 3 == 1 ) : NEW_LINE INDENT minPerfectCube *= 4 NEW_LINE DEDENT i = 3 NEW_LINE while ( lcm > 1 ) : NEW_LINE INDENT cnt = 0 NEW_LINE while ( lcm % i == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= i NEW_LINE DEDENT if ( cnt % 3 == 1 ) : NEW_LINE INDENT minPerfectCube *= i * i NEW_LINE DEDENT elif ( cnt % 3 == 2 ) : NEW_LINE INDENT minPerfectCube *= i NEW_LINE DEDENT i += 2 NEW_LINE DEDENT return minPerfectCube NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 10 , 125 , 14 , 42 , 100 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minPerfectCube ( arr , n ) ) NEW_LINE DEDENT
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT class BinaryTree : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . root = None NEW_LINE DEDENT def print lcmLevelOrderUtil ( self , root , s ) : NEW_LINE INDENT if ( root == None ) : NEW_LINE INDENT return NEW_LINE DEDENT q = [ ] NEW_LINE q . append ( root . left ) NEW_LINE q . append ( root . right ) NEW_LINE first = None NEW_LINE second = None NEW_LINE while ( len ( q ) != 0 ) : NEW_LINE INDENT first = q [ 0 ] NEW_LINE q . pop ( 0 ) NEW_LINE second = q [ 0 ] NEW_LINE q . pop ( 0 ) NEW_LINE s . append ( second . left ) NEW_LINE s . append ( first . right ) NEW_LINE s . append ( second . right ) NEW_LINE s . append ( first . left ) NEW_LINE if ( first . left . left != None ) : NEW_LINE INDENT q . append ( first . right ) NEW_LINE q . append ( second . left ) NEW_LINE q . append ( first . left ) NEW_LINE q . append ( second . right ) NEW_LINE DEDENT DEDENT DEDENT def print lcmLevelOrder ( self , root ) : NEW_LINE INDENT s = [ ] NEW_LINE s . append ( root ) NEW_LINE if ( root . left != None ) : NEW_LINE INDENT s . append ( root . right ) NEW_LINE s . append ( root . left ) NEW_LINE DEDENT if ( root . left . left != None ) : NEW_LINE INDENT print lcmLevelOrderUtil ( root , s ) NEW_LINE DEDENT while ( len ( s ) != 0 ) : NEW_LINE INDENT print ( s [ - 1 ] . data , end = " " ) NEW_LINE s . pop ( ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT tree = BinaryTree ( ) NEW_LINE tree . root = Node ( 1 ) NEW_LINE tree . root . left = Node ( 2 ) NEW_LINE tree
def h uf ( rows ) : NEW_LINE INDENT for i in range ( 1 , rows + 1 ) : NEW_LINE INDENT if ( i == 1 or i == rows ) : NEW_LINE INDENT for j in range ( 1 , rows + 1 ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT print ( " " ) NEW_LINE DEDENT elif ( j == 1 or j == rows ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT print ( " " ) NEW_LINE DEDENT DEDENT def uf ( rows ) : NEW_LINE INDENT for i in range ( 1 , rows + 1 ) : NEW_LINE INDENT for j in range ( 1 , rows + 1 ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT print ( " " ) NEW_LINE DEDENT DEDENT def printPattern ( rows ) : NEW_LINE INDENT print ( " Solid Square : " ) NEW_LINE uf ( rows ) NEW_LINE print ( " \n H p number : " ) NEW_LINE uf ( rows ) NEW_LINE DEDENT rows = 5 NEW_LINE uf ( rows ) NEW_LINE
n = int ( input ( ) ) NEW_LINE ans = ' a ' * ( n // 4 ) NEW_LINE ans += ' ab ' * ( n % 4 ) NEW_LINE if n % 4 == 1 : NEW_LINE INDENT ans += ' a ' NEW_LINE DEDENT if n % 4 == 2 : NEW_LINE INDENT ans += ' ab ' NEW_LINE DEDENT if n % 4 == 3 : NEW_LINE INDENT ans += ' abc ' NEW_LINE DEDENT print ( ans ) NEW_LINE
N = int ( input ( ) ) NEW_LINE dp = [ [ float ( " inf " ) for i in range ( N + 1 ) ] for i in range ( N + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT l , r = map ( int , input ( ) . split ( ) ) NEW_LINE dp [ l ] [ 0 ] = min ( dp [ l ] [ 0 ] , dp [ l - 1 ] [ 1 ] ) + r NEW_LINE dp [ l ] [ 1 ] = min ( dp [ l ] [ 1 ] , dp [ l - 1 ] [ 0 ] + l ) NEW_LINE DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT l , r = map ( int , input ( ) . split ( ) ) NEW_LINE dp [ l ] [ 0 ] = min ( dp [ l ] [ 0 ] , dp [ l - 1 ] [ 1 ] ) + r NEW_LINE for j in range ( l - 1 , - 1 , - 1 ) : NEW_LINE INDENT dp [ j ] [ 1 ] = min ( dp [ j ] [ 1 ] , dp [ j - 1 ] [ 0 ] + dp [ j - 1 ] [ 1 ] ) NEW_LINE DEDENT DEDENT print ( max ( dp [ - 1 ] ) ) NEW_LINE
a , b , x = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a + b >= x ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
from math import gcd NEW_LINE def findLargest ( arr , n ) : NEW_LINE INDENT __gcd = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT __gcd = gcd ( arr [ i ] , __gcd ) ; NEW_LINE DEDENT return __gcd ; NEW_LINE DEDENT def findLargest ( arr , n ) : NEW_LINE INDENT gcd = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT gcd = gcd ( arr [ i ] , gcd ) ; NEW_LINE DEDENT return gcd ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 3 , 6 , 9 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( findLargest ( arr , n ) ) ; NEW_LINE DEDENT
def findWinner ( n ) : NEW_LINE INDENT if ( ( n - 1 ) % 6 == 0 ) : NEW_LINE INDENT print ( " Second Player wins the game " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " First Player wins the game " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 7 NEW_LINE findWinner ( n ) NEW_LINE DEDENT
def adj ( v ) : NEW_LINE INDENT global adj NEW_LINE adj [ v ] = [ ] NEW_LINE DEDENT def addEdge ( v , w ) : NEW_LINE INDENT adj [ v ] . append ( w ) NEW_LINE DEDENT def Bfs ( s ) : NEW_LINE INDENT visited = [ False ] * ( V ) NEW_LINE visited [ s ] = True NEW_LINE queue = [ ] NEW_LINE queue . append ( s ) NEW_LINE while len ( queue ) != 0 : NEW_LINE INDENT s = queue . pop ( 0 ) NEW_LINE print ( s , end = " " ) NEW_LINE for i in adj [ s ] : NEW_LINE INDENT if not visited [ i ] : NEW_LINE INDENT visited [ i ] = True NEW_LINE queue . append ( i ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT g = [ ] NEW_LINE v = 4 NEW_LINE g . addEdge ( 0 , 1 ) NEW_LINE g . addEdge ( 0 , 2 ) NEW_LINE g . addEdge ( 1 , 2 ) NEW_LINE g . addEdge ( 2 , 0 ) NEW_LINE g . addEdge ( 2 , 3 ) NEW_LINE g . addEdge ( 3 , 3 ) NEW_LINE v = 1 NEW_LINE g . max ( v , 0 ) NEW_LINE g . max ( v , 1 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 3 ) NEW_LINE g . max ( v , 3 ) NEW_LINE g . max ( v , 3 ) NEW_LINE v = 1 NEW_LINE g . max ( v , 1 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 0 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 3 ) NEW_LINE g . max ( v , 3 ) NEW_LINE v = 2 NEW_LINE g . max ( v , 0 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 3 ) NEW_LINE print ( " write write 2 2 2 : " + ' ' + ' ( starting from vertex 2 ) ' ) NEW_LINE g . Bfs ( 2 ) NEW_LINE DEDENT
def adj ( v ) : NEW_LINE INDENT global adj NEW_LINE adj [ v ] = [ ] NEW_LINE DEDENT def addEdge ( v , w ) : NEW_LINE INDENT adj [ v ] . append ( w ) NEW_LINE DEDENT def Bfs ( s ) : NEW_LINE INDENT visited = [ False ] * ( V ) NEW_LINE visited [ s ] = True NEW_LINE queue = [ ] NEW_LINE queue . append ( s ) NEW_LINE while len ( queue ) != 0 : NEW_LINE INDENT s = queue . pop ( 0 ) NEW_LINE print ( s , end = " " ) NEW_LINE for i in adj [ s ] : NEW_LINE INDENT if not visited [ i ] : NEW_LINE INDENT visited [ i ] = True NEW_LINE queue . append ( i ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT g = [ ] NEW_LINE v = 4 NEW_LINE g . addEdge ( 0 , 1 ) NEW_LINE g . addEdge ( 0 , 2 ) NEW_LINE g . addEdge ( 1 , 2 ) NEW_LINE g . addEdge ( 2 , 0 ) NEW_LINE g . addEdge ( 2 , 3 ) NEW_LINE g . addEdge ( 3 , 3 ) NEW_LINE v = 1 NEW_LINE g . max ( v , 0 ) NEW_LINE g . max ( v , 1 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 3 ) NEW_LINE g . max ( v , 3 ) NEW_LINE g . max ( v , 3 ) NEW_LINE v = 1 NEW_LINE g . max ( v , 1 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 0 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 3 ) NEW_LINE g . max ( v , 3 ) NEW_LINE v = 2 NEW_LINE g . max ( v , 0 ) NEW_LINE g . max ( v , 2 ) NEW_LINE g . max ( v , 3 ) NEW_LINE print ( " write write 2 2 2 : " + ' ' + ' ( starting from vertex 2 ) ' ) NEW_LINE g . Bfs ( 2 ) NEW_LINE DEDENT
defame ( a , arr , n ) : NEW_LINE INDENT elements = [ 0 ] * ( n + 1 ) NEW_LINE elements [ 0 ] = a NEW_LINE for i in range ( n ) : NEW_LINE INDENT elements [ i + 1 ] = arr [ i ] ^ elements [ i ] NEW_LINE DEDENT for i in range ( n + 1 ) : NEW_LINE INDENT print ( elements [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 13 , 2 , 6 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE a = 5 NEW_LINEame ( a , arr , n ) NEW_LINE DEDENT
from __future__ import print_function NEW_LINE import sys NEW_LINE import itertools NEW_LINE import math NEW_LINE import queue NEW_LINE import numpy as np NEW_LINE def eprint ( * args , ** kwargs ) : NEW_LINE INDENT print ( * args , file = sys . stderr , ** kwargs ) NEW_LINE DEDENT def ln ( f = int ) : NEW_LINE INDENT return list ( map ( f , stdin . readline ( ) . strip ( ) . split ( ) ) ) NEW_LINE DEDENT T , = ln ( ) NEW_LINE INF = float ( ' inf ' ) NEW_LINE for test in range ( T ) : NEW_LINE INDENT N , R , S , P , R = ln ( ) NEW_LINE best = " IMPOSSIBLE " NEW_LINE for i in range ( N - 1 ) : NEW_LINE INDENT if P == 0 : NEW_LINE INDENT best = " P " NEW_LINE DEDENT elif R == 0 : NEW_LINE INDENT best = " R " NEW_LINE DEDENT elif S == 0 : NEW_LINE INDENT best = " S " NEW_LINE DEDENT DEDENT result = None NEW_LINE for i in range ( N ) : NEW_LINE INDENT if best != " P " and P == 0 : NEW_LINE INDENT result = i NEW_LINE DEDENT elif best == " R " and R == 0 : NEW_LINE INDENT result = i NEW_LINE DEDENT elif best == " S " : NEW_LINE INDENT result = i NEW_LINE DEDENT DEDENT print ( " Case # " + str ( test + 1 ) + " : " + str ( result ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE l . append ( [ a , b ] ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if n % 2 == 0 and l [ i ] [ 0 ] == l [ i - 1 ] [ 1 ] : NEW_LINE INDENT ans += 2 NEW_LINE DEDENT elif n % 2 == 1 and l [ i ] [ 0 ] == l [ i - 1 ] [ 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif l [ i ] [ 0 ] == l [ i - 1 ] [ 1 ] : NEW_LINE INDENT ans += 2 NEW_LINE DEDENT else : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
import math NEW_LINE def printRepeating ( arr , size ) : NEW_LINE INDENT S = 0 NEW_LINE P = 1 NEW_LINE n = size - 2 NEW_LINE for i in range ( 0 , size ) : NEW_LINE INDENT S = S + arr [ i ] NEW_LINE P = P * arr [ i ] NEW_LINE DEDENT S = S - n * ( n + 1 ) / 2 NEW_LINE P = P / fact ( n ) NEW_LINE D = int ( math . sqrt ( S * S - 4 * P ) ) NEW_LINE x = ( D + S ) / 2 NEW_LINE y = ( S - D ) / 2 NEW_LINE print ( " The two repeating elements are : " , end = " " ) NEW_LINE print ( x , end = " " ) NEW_LINE print ( " & " , y , end = " " ) NEW_LINE DEDENT def fact ( n ) : NEW_LINE INDENT return 1 if n == 0 else n * fact ( n - 1 ) NEW_LINE DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printRepeating ( arr , arr_size ) NEW_LINE
import sys NEW_LINE readline = sys . stdin . readline NEW_LINE write = sys . stdout . write NEW_LINE M = 1000000 NEW_LINE sq = int ( M ** .5 ) NEW_LINE p = [ 1 ] * ( M + 1 ) NEW_LINE p [ 0 ] = p [ 1 ] = 0 NEW_LINE pn = [ ] NEW_LINE for x in range ( sq + 1 ) : NEW_LINE INDENT if not p [ x ] : NEW_LINE INDENT continue NEW_LINE DEDENT for y in range ( x * x , M + 1 , x ) : NEW_LINE INDENT p [ y ] = 0 NEW_LINE DEDENT pn . append ( x ) NEW_LINE DEDENT for x in range ( sq + 1 , M + 1 ) : NEW_LINE INDENT if not p [ x ] : NEW_LINE INDENT continue NEW_LINE DEDENT pn . append ( x ) NEW_LINE DEDENT pp = [ 0 ] * ( M + 1 ) NEW_LINE L = len ( pn ) NEW_LINE for i in range ( L ) : NEW_LINE INDENT x = pn [ i ] NEW_LINE for j in range ( i + 1 , M + 1 ) : NEW_LINE INDENT z = x + pn [ j ] NEW_LINE if z > L : NEW_LINE INDENT break NEW_LINE DEDENT pp [ z ] += 1 NEW_LINE DEDENT DEDENT def solve ( ) : NEW_LINE INDENT N = int ( readline ( ) ) NEW_LINE if N == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT write ( " % d \n " % pp [ N ] ) NEW_LINE return True NEW_LINE DEDENT while solve ( ) : NEW_LINE INDENT ... NEW_LINE DEDENT
import math NEW_LINE n = int ( input ( ) ) NEW_LINE info = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = info [ i ] NEW_LINE info [ i ] = ( math . atan2 ( y - y , x ) , x , y ) NEW_LINE DEDENT info = sorted ( info ) NEW_LINE info = info + info NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = info [ i + 1 ] NEW_LINE ans = max ( ans , ( info [ i + 1 ] [ 0 ] - info [ i ] [ 0 ] ) * ( info [ i + 1 ] [ 1 ] - info [ i ] [ 1 ] ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE
import re NEW_LINE while True : NEW_LINE INDENT s = input ( ) NEW_LINE if s == " # " : break NEW_LINE cnt , flag = 0 , 0 NEW_LINE for c in s : NEW_LINE INDENT if c == " q " or c == " w " or c == " e " or c == " r " or c == " t " or c == " a " or c == " s " or c == " d " or c == " f " : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif c == " v " or c == " w " : NEW_LINE INDENT cnt -= 1 NEW_LINE DEDENT elif c == " x " or c == " y " : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif c == " z " or c == " x " : NEW_LINE INDENT cnt -= 1 NEW_LINE DEDENT DEDENT if cnt == 0 : print ( 0 ) NEW_LINE else : print ( cnt ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE if s . count ( " S " ) == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = max ( a [ 0 ] * a [ 1 ] , a [ - 1 ] * a [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT ans = max ( ans , ( a [ i ] - a [ i - 1 ] ) * ( a [ i + 1 ] - a [ i ] ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def FindLCM ( a , b ) : NEW_LINE INDENT return ( a * b ) // ( a ) . gcd ( b ) NEW_LINE DEDENT def rangeDivisor ( m , n , a , b ) : NEW_LINE INDENT lcm = FindLCM ( a , b ) NEW_LINE a_divisor = n // a - ( m - 1 ) // a NEW_LINE b_divisor = n // b - ( m - 1 ) // b NEW_LINE common_divisor = n // lcm - ( m - 1 ) // lcm NEW_LINE ans = a_divisor + b_divisor - common_divisor NEW_LINE return ans NEW_LINE DEDENT m = 3 NEW_LINE n = 11 NEW_LINE a = 2 NEW_LINE b = 3 NEW_LINE print ( rangeDivisor ( m , n , a , b ) ) NEW_LINE m = 11 NEW_LINE n = 1000000 NEW_LINE a = 6 NEW_LINE b = 35 NEW_LINE print ( rangeDivisor ( m , n , a , b ) ) NEW_LINE
s = input ( ) NEW_LINE i = 0 NEW_LINE while i < len ( s ) : NEW_LINE INDENT if s [ i ] == " . " : NEW_LINE INDENT if " , " in s : NEW_LINE INDENT print ( " , " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " ? " , end = " " ) NEW_LINE DEDENT DEDENT elif s [ i ] == " ? " : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if i > len ( s ) - 1 : NEW_LINE INDENT print ( " . " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( s [ i ] , end = " " ) NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT
import sys NEW_LINE def smallestKFreq ( a , n , k ) : NEW_LINE INDENT m = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT m [ a [ i ] ] = m . get ( a [ i ] , 0 ) + 1 NEW_LINE DEDENT res = sys . maxsize NEW_LINE for i in m : NEW_LINE INDENT if ( m [ i ] == k ) : NEW_LINE INDENT res = min ( res , i ) NEW_LINE DEDENT DEDENT if ( res != sys . maxsize ) : NEW_LINE INDENT return res NEW_LINE DEDENT return - 1 NEW_LINE DEDENT arr = [ 2 , 2 , 1 , 3 , 1 ] NEW_LINE k = 2 NEW_LINE print ( smallestKFreq ( arr , len ( arr ) , k ) ) NEW_LINE
def areVowels pq ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE c = 64 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( s [ i ] == ' a ' or s [ i ] == ' e ' or s [ i ] == ' i ' or s [ i ] == ' o ' or s [ i ] == ' u ' ) : NEW_LINE INDENT if ( s [ i ] < c ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT c = s [ i ] NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT s = " aabbbddeecc " NEW_LINE if ( areVowels pq ( s ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
import sys NEW_LINE readline = sys . stdin . readline NEW_LINE write = sys . stdout . write NEW_LINE def solve ( ) : NEW_LINE INDENT N = int ( readline ( ) ) NEW_LINE if N == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if N == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT * p , = range ( 1 , N + 1 ) NEW_LINE def f ( x ) : NEW_LINE INDENT if x % 2 : NEW_LINE INDENT return p [ x - 1 ] + 1 NEW_LINE DEDENT p [ x - 1 ] = x NEW_LINE return 2 * p [ x - 2 ] + 3 + p [ x - 1 ] + 2 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT while solve ( ) : NEW_LINE INDENT ... NEW_LINE DEDENT DEDENT while solve ( ) : NEW_LINE INDENT ... NEW_LINE DEDENT
def countOfLetters ( string ) : NEW_LINE INDENT letter = 0 NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT if ( ( string [ i ] >= ' A ' and string [ i ] <= ' Z ' ) or ( string [ i ] >= ' a ' and string [ i ] <= ' z ' ) ) : NEW_LINE INDENT letter += 1 NEW_LINE DEDENT DEDENT return letter NEW_LINE DEDENT def countOfNumbers ( string ) : NEW_LINE INDENT number = 0 NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT if ( string [ i ] >= '0' and string [ i ] <= '9' ) : NEW_LINE INDENT number += 1 NEW_LINE DEDENT DEDENT return number NEW_LINE DEDENT def check ( string ) : NEW_LINE INDENT if ( countOfLetters ( string ) == countOfNumbers ( string ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " GeeKs01324" NEW_LINE check ( string ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( n - i ) NEW_LINE DEDENT
from collections import deque NEW_LINE n , x = map ( int , input ( ) . split ( ) ) NEW_LINE q = deque ( [ ( 1 , 0 ) , ( 1 , 1 ) , ( 0 , - 1 ) ] ) NEW_LINE while True : NEW_LINE INDENT num , r = q . popleft ( ) NEW_LINE if num == - 1 : NEW_LINE INDENT print ( " No " ) NEW_LINE break NEW_LINE DEDENT if r == 1 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE q . append ( ( num , r + 1 ) ) NEW_LINE DEDENT elif r == 2 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE q . append ( ( num - 1 , r + 2 ) ) NEW_LINE q . append ( ( num - 1 , r + 2 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Yes " ) NEW_LINE q . append ( ( num , r ) ) NEW_LINE DEDENT DEDENT
MAX = 100001 NEW_LINE perfectDiv = [ 0 ] * MAX NEW_LINE def precompute counts ( ) : NEW_LINE INDENT for i in range ( 1 , MAX ) : NEW_LINE INDENT for j in range ( i * i , MAX , i * i ) : NEW_LINE INDENT perfectDiv [ j ] += 1 NEW_LINE DEDENT DEDENT DEDENT def countPerfectDivisors ( n ) : NEW_LINE INDENT return perfectDiv [ n ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT precompute counts ( ) NEW_LINE n = 16 NEW_LINE print ( " Total perfect divisors of " , n , " = " , countPerfectDivisors ( n ) ) NEW_LINE n = 12 NEW_LINE print ( " Total perfect divisors of " , n , " = " , countPerfectDivisors ( n ) ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE v = sum ( a ) NEW_LINE x = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x += a [ i ] NEW_LINE DEDENT v = v * x NEW_LINE print ( v ) NEW_LINE
n = int ( input ( ) ) NEW_LINE t , e = map ( int , input ( ) . split ( ) ) NEW_LINE d = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT d . append ( int ( input ( ) ) ) NEW_LINE DEDENT ans = - 1 NEW_LINE p = d [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT q = t // d [ i ] NEW_LINE if q + e > q : NEW_LINE INDENT ans = i + 1 NEW_LINE break NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
from math import ceil NEW_LINE def cal_ intervals ( h , r ) : NEW_LINE INDENT IST = ( h * r * 1.0 ) / 360 NEW_LINE int_ intervals = int ( IST ) NEW_LINE int_ intervals = ceil ( ( IST - int_ intervals ) * 60 ) NEW_LINE print ( int_ intervals , " : " , float_ intervals ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT h = 20 NEW_LINE r = 150 NEW_LINE cal_ intervals ( h , r ) NEW_LINE DEDENT
from math import * NEW_LINE def printRoots ( n ) : NEW_LINE INDENT theta = float ( sqrt ( 3 * n ) ) NEW_LINE for k in range ( n ) : NEW_LINE INDENT real = cos ( k * theta ) NEW_LINE mx = sin ( k * theta ) NEW_LINE print ( " % . 3 f " % real , end = " " ) NEW_LINE if mx >= 0 : NEW_LINE INDENT print ( " + i " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " - i " , end = " " ) NEW_LINE DEDENT print ( abs ( max ( mx , 0 ) ) ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT printRoots ( 1 ) NEW_LINE printRoots ( 2 ) NEW_LINE printRoots ( 3 ) NEW_LINE DEDENT
def find ranks ( arr1 , arr2 , n , n1 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n1 ) : NEW_LINE INDENT print ( " { " , arr1 [ i ] , " , " , arr2 [ j ] , " } , " , end = " " ) NEW_LINE DEDENT DEDENT DEDENT arr1 = [ 1 , 2 , 3 ] NEW_LINE arr2 = [ 4 , 5 , 6 ] NEW_LINE n1 = len ( arr1 ) NEW_LINE n2 = len ( arr2 ) NEW_LINE find ranks ( arr1 , arr2 , n1 , n2 ) NEW_LINE
def no_of_ways ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE count_left = 0 NEW_LINE count_right = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == s [ 0 ] ) : NEW_LINE INDENT count_left = count_left + 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( s [ i ] == s [ n - 1 ] ) : NEW_LINE INDENT count_right = count_right + 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( s [ 0 ] == s [ n - 1 ] ) : NEW_LINE INDENT return ( ( count_left + 1 ) * ( count_right + 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( count_left + count_right + 1 ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE print ( no_of_ways ( s ) ) NEW_LINE DEDENT
MAX = 1000000 NEW_LINE prime = [ True for i in range ( MAX + 1 ) ] NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE prime [ 0 ] = False NEW_LINE for p in range ( 2 , MAX + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def SumOfKthPrimes ( arr , n , k ) : NEW_LINE INDENT c = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] ) : NEW_LINE INDENT c += 1 NEW_LINE if ( c % k == 0 ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE c = 0 NEW_LINE DEDENT DEDENT DEDENT print ( sum ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE arr = [ 2 , 3 , 5 , 7 , 11 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE SumOfKthPrimes ( arr , n , k ) NEW_LINE DEDENT
MAX = 1000000 NEW_LINE prime = [ True for i in range ( MAX + 1 ) ] NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE prime [ 0 ] = False NEW_LINE for p in range ( 2 , MAX + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( 2 * p , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def solve ( arr , n , k ) : NEW_LINE INDENT c = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] ) : NEW_LINE INDENT c += 1 NEW_LINE if ( c % k == 0 ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE c = 0 NEW_LINE DEDENT DEDENT DEDENT print ( sum ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n = 5 NEW_LINE k = 2 NEW_LINE arr = [ 2 , 3 , 5 , 7 , 11 ] NEW_LINE solve ( arr , n , k ) NEW_LINE DEDENT
MAX = 1000000 NEW_LINE prime = [ True for i in range ( MAX + 1 ) ] NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE p = 2 NEW_LINE while p * p <= MAX : NEW_LINE INDENT if ( prime [ p ] == False ) : NEW_LINE INDENT for i in range ( p * 2 , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT DEDENT def productOfKthPrimes ( arr , n , k ) : NEW_LINE INDENT c = 0 NEW_LINE product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( not prime [ arr [ i ] ] ) : NEW_LINE INDENT c += 1 NEW_LINE if ( c % k == 0 ) : NEW_LINE INDENT product *= arr [ i ] NEW_LINE c = 0 NEW_LINE DEDENT DEDENT DEDENT print ( product ) NEW_LINE DEDENT SieveOfEratosthenes ( ) NEW_LINE n = 5 NEW_LINE k = 2 NEW_LINE arr = [ 2 , 3 , 5 , 7 , 11 ] NEW_LINE productOfKthPrimes ( arr , n , k ) NEW_LINE
def findAllSequences ( diff , out , start , end ) : NEW_LINE INDENT if ( abs ( diff ) > ( end - start + 1 ) // 2 ) : NEW_LINE INDENT return NEW_LINE DEDENT if ( start > end ) : NEW_LINE INDENT if ( diff == 0 ) : NEW_LINE INDENT out = out + "0" * ( len ( out ) - 1 ) NEW_LINE print ( " " , end = " " ) NEW_LINE DEDENT return NEW_LINE DEDENT out [ start ] = "1" NEW_LINE findAllSequences ( diff + 1 , out , start + 1 , end - 1 ) NEW_LINE out [ start ] = "1" NEW_LINE findAllSequences ( diff , out , start + 1 , end - 1 ) NEW_LINE out [ start ] = "0" NEW_LINE findAllSequences ( diff , out , start + 1 , end - 1 ) NEW_LINE out [ start ] = "1" NEW_LINE findAllSequences ( diff , out , start + 1 , end - 1 ) NEW_LINE out [ start ] = "0" NEW_LINE findAllSequences ( diff , out , start + 1 , end - 1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 2 NEW_LINE out = [ ' hi ' for i in range ( 2 * n + 1 ) ] NEW_LINE out [ 2 * n ] = ' scipy ' NEW_LINE findAllSequences ( 0 , out , 0 , 2 * n - 1 ) NEW_LINE print ( " " ) NEW_LINE DEDENT
n , h = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT b . append ( [ a [ i ] , i + 1 ] ) NEW_LINE DEDENT b . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ n ] = b [ i ] [ 1 ] NEW_LINE if a [ n ] >= h : NEW_LINE INDENT print ( i + 1 ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = None NEW_LINE DEDENT DEDENT def printList ( node ) : NEW_LINE INDENT while ( node != None ) : NEW_LINE INDENT print ( node . data , end = " - > " ) NEW_LINE node = node . next NEW_LINE DEDENT print ( " NULL " ) NEW_LINE DEDENT def cntNodes ( node ) : NEW_LINE INDENT if ( node == None ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( 1 + cntNodes ( node . next ) ) NEW_LINE DEDENT def updateList ( head , m ) : NEW_LINE INDENT cnt = cntNodes ( head ) NEW_LINE if ( cnt != m and m < cnt ) : NEW_LINE INDENT skip = cnt - m NEW_LINE prev = None NEW_LINE curr = head NEW_LINE while ( skip > 0 ) : NEW_LINE INDENT prev = curr NEW_LINE curr = curr . next NEW_LINE skip -= 1 NEW_LINE DEDENT prev . next = None NEW_LINE tempHead = head NEW_LINE head = curr NEW_LINE while ( curr . next != None ) : NEW_LINE INDENT curr = curr . next NEW_LINE DEDENT curr . next = curr . next NEW_LINE DEDENT printList ( head ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT head = Node ( 4 ) NEW_LINE head . next = Node ( 5 ) NEW_LINE head . next . next = Node ( 6 ) NEW_LINE head . next . next . next = Node ( 1 ) NEW_LINE head . next . next . next . next = Node ( 2 ) NEW_LINE head . next . next . next . next = Node ( 3 ) NEW_LINE m = 3 NEW_LINE updateList ( head , m ) NEW_LINE DEDENT
def maxSubStrings ( s , k ) : NEW_LINE INDENT maxSubStr = 0 NEW_LINE n = len ( s ) NEW_LINE for c in range ( 26 ) : NEW_LINE INDENT ch = chr ( ord ( ' a ' ) + c ) NEW_LINE curr = 0 NEW_LINE for i in range ( n - k + 1 ) : NEW_LINE INDENT if ( s [ i ] != ch ) : NEW_LINE INDENT continue NEW_LINE DEDENT cnt = 0 NEW_LINE while ( i < n and s [ i ] == ch and cnt != k ) : NEW_LINE INDENT i += 1 NEW_LINE cnt += 1 NEW_LINE DEDENT i -= 1 NEW_LINE if ( cnt == k ) : NEW_LINE INDENT curr += 1 NEW_LINE DEDENT DEDENT maxSubStr = max ( maxSubStr , curr ) NEW_LINE DEDENT return maxSubStr NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " aaacaabbaa " NEW_LINE k = 2 NEW_LINE print ( maxSubStrings ( s , k ) ) NEW_LINE DEDENT
def ansQueries ( prefeven , prefodd , l , r ) : NEW_LINE INDENT if ( ( r - l + 1 ) % 2 == 0 ) : NEW_LINE INDENT print ( "0" ) NEW_LINE DEDENT else : NEW_LINE INDENT if ( l % 2 == 0 ) : NEW_LINE INDENT print ( prefeven [ r ] ^ prefeven [ l - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( prefodd [ r ] ^ prefodd [ l - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT def wrapper ( arr , n , l , r , q ) : NEW_LINE INDENT prefodd = [ 0 ] * 100 NEW_LINE prefeven = [ 0 ] * 100 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( ( i % 2 == 0 ) ) : NEW_LINE INDENT prefeven [ i ] = arr [ i - 1 ] ^ prefeven [ i - 1 ] NEW_LINE prefodd [ i ] = prefodd [ i - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT prefeven [ i ] = prefeven [ i - 1 ] NEW_LINE prefodd [ i ] = prefodd [ i - 1 ] ^ arr [ i - 1 ] NEW_LINE DEDENT DEDENT i = 0 NEW_LINE while ( i != q ) : NEW_LINE INDENT ansQueries ( prefeven , prefodd , l [ i ] , r [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE l = [ 1 , 1 , 2 ] NEW_LINE r = [ 2 , 3 , 4 ] NEW_LINE q = len ( l ) NEW_LINE wrapper ( arr , n , l , r , q ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE mops = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE mops . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a = 0 NEW_LINE if mops [ i ] <= mops [ i + 1 ] : NEW_LINE INDENT a = mops [ i + 1 ] - mops [ i ] NEW_LINE DEDENT ans += a NEW_LINE DEDENT print ( ans ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , k = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE s = 0 NEW_LINE if n % 2 == 0 : NEW_LINE INDENT for i in range ( k ) : NEW_LINE INDENT s += l [ n // 2 - i ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for i in range ( n // 2 ) : NEW_LINE INDENT s += l [ k * ( n // 2 + 1 ) ] NEW_LINE DEDENT DEDENT print ( s ) NEW_LINE DEDENT
from collections import deque NEW_LINE n , q = map ( int , input ( ) . split ( ) ) NEW_LINE stk = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT stk . append ( deque ( ) ) NEW_LINE DEDENT for i in range ( q ) : NEW_LINE INDENT cmd = input ( ) . split ( ) NEW_LINE if cmd == "0" : NEW_LINE INDENT x = int ( x [ 1 ] ) NEW_LINE if x == 1 : NEW_LINE INDENT stk . appendleft ( int ( x [ 2 ] ) ) NEW_LINE DEDENT elif cmd == "1" : NEW_LINE INDENT print ( stk [ x ] [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if len ( stk [ x ] ) > 0 : NEW_LINE INDENT print ( stk [ x ] [ - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT elif cmd == "2" : NEW_LINE INDENT x = int ( x [ 1 ] ) NEW_LINE if x == 1 : NEW_LINE INDENT stk . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( stk [ x ] [ 0 ] ) NEW_LINE DEDENT DEDENT DEDENT
def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT def removeMin ( arr , n ) : NEW_LINE INDENT minVal = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT minVal = min ( minVal , arr [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = arr [ i ] - minVal NEW_LINE DEDENT DEDENT def modifyMax ( arr , n ) : NEW_LINE INDENT maxVal = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT maxVal = max ( maxVal , arr [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = maxVal - arr [ i ] NEW_LINE DEDENT DEDENT def modifyArray ( arr , n , k ) : NEW_LINE INDENT if ( k % 2 == 0 ) : NEW_LINE INDENT removeMin ( arr , n ) NEW_LINE DEDENT else : NEW_LINE INDENT modifyMax ( arr , n ) NEW_LINE DEDENT printArray ( arr , n ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 4 , 8 , 12 , 16 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE modifyArray ( arr , n , k ) NEW_LINE DEDENT
def find_SquareSquare ( v ) : NEW_LINE INDENT ans = [ [ 0 ] * 2 for i in range ( 2 ) ] NEW_LINE n = len ( v ) NEW_LINE getlistArea = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x0 = v [ i ] [ 0 ] NEW_LINE y0 = v [ i ] [ 1 ] NEW_LINE x1 = v [ ( i + 1 ) % n ] [ 0 ] NEW_LINE y1 = v [ ( i + 1 ) % n ] [ 1 ] NEW_LINE A = ( x0 * y1 ) - ( x1 * y0 ) NEW_LINE getlistArea += A NEW_LINE ans [ 0 ] += ( x0 + x1 ) * A NEW_LINE ans [ 1 ] += ( y0 + y1 ) * A NEW_LINE DEDENT getlistArea *= 0.5 NEW_LINE ans [ 0 ] = ( ans [ 0 ] ) / ( 6 * getlistArea ) NEW_LINE ans [ 1 ] = ( ans [ 1 ] ) / ( 6 * getlistArea ) NEW_LINE return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT ans = [ [ 1 , 2 ] , [ 3 , - 4 ] , [ 6 , - 7 ] ] NEW_LINE ans = find_SquareSquare ( ans ) NEW_LINE print ( ans [ 0 ] [ 0 ] , ans [ 0 ] [ 1 ] , " " , ans [ 1 ] [ 1 ] ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE d = { " blue " : " blue " , " x " : " x " } NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ 0 ] == " x " or s [ 0 ] == " y " : NEW_LINE INDENT continue NEW_LINE DEDENT d [ s [ 0 ] ] = s [ 1 ] NEW_LINE DEDENT print ( d [ " x " ] ) NEW_LINE
def minOperations ( ar , k ) : NEW_LINE INDENT ar . sort ( ) NEW_LINE opsNeeded = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT opsNeeded += ( ar [ k - 1 ] - ar [ i ] ) NEW_LINE DEDENT ans = opsNeeded NEW_LINE for i in range ( k , len ( ar ) ) : NEW_LINE INDENT opsNeeded = opsNeeded - ( ar [ i - 1 ] - ar [ i - k ] ) NEW_LINE opsNeeded = opsNeeded + ( k - 1 ) * ( ar [ i ] - ar [ i - 1 ] ) NEW_LINE ans = min ( ans , opsNeeded ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 1 , 9 , 100 ] NEW_LINE n = len ( arr ) NEW_LINE k = 3 NEW_LINE print ( minOperations ( arr , k ) ) NEW_LINE DEDENT
def charCheck ( input_char ) : NEW_LINE INDENT if ( ( input_char >= 65 and input_char <= 90 ) or ( input_char >= 97 and input_char <= 122 ) ) : NEW_LINE INDENT print ( " Alphabet " ) NEW_LINE DEDENT elif ( input_char >= 48 and input_char <= 57 ) : NEW_LINE INDENT print ( " Digit " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Special Character " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT input_char = ' $ ' NEW_LINE charCheck ( input_char ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE k = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT k . append ( l . index ( max ( l ) ) + 1 ) NEW_LINE DEDENT print ( * k ) NEW_LINE
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE p = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE g = [ [ ] for i in range ( n + 1 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT g [ i + 1 ] . append ( i ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE if x in g : NEW_LINE INDENT t = g [ x ] [ 0 ] NEW_LINE g [ y ] . append ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT t = - 1 NEW_LINE DEDENT if t in g : NEW_LINE INDENT print ( g [ t ] [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE pos = n - 1 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if pos > l [ i ] : NEW_LINE INDENT pos = l [ i ] NEW_LINE DEDENT if l [ i ] <= pos : NEW_LINE INDENT pos -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT q = l [ pos : pos + k ] NEW_LINE l [ pos : pos + k ] = l [ : pos + k ] NEW_LINE print ( * l ) NEW_LINE
n = int ( input ( ) ) NEW_LINE c = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c1 = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c1 . append ( ( i + 1 , j + 1 , a ) ) NEW_LINE DEDENT c = c1 NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( c [ i ] ) : NEW_LINE INDENT x1 , y1 , x2 , y2 = c1 [ i ] , c1 [ j ] , c1 [ i ] , c1 [ j - 1 ] NEW_LINE if x1 != x2 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT if y1 != y2 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE for i in range ( ans ) : NEW_LINE INDENT print ( c [ i ] [ j ] , c [ i ] [ j ] ) NEW_LINE DEDENT
def sameOccurrence ( arr , n , x , y ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT ctX = 0 NEW_LINE ctY = 0 NEW_LINE for j in range ( i , n - 1 ) : NEW_LINE INDENT if ( arr [ j ] == x ) : NEW_LINE INDENT ctX += 1 NEW_LINE DEDENT elif ( arr [ j ] == y ) : NEW_LINE INDENT ctY += 1 NEW_LINE DEDENT if ( ctX == ctY ) : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT DEDENT return ( result ) NEW_LINE DEDENT arr = [ 1 , 2 , 2 , 3 , 4 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE x , y = 2 , 3 NEW_LINE print ( sameOccurrence ( arr , n , x , y ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT s = input ( ) NEW_LINE n = len ( s ) NEW_LINE c1 = 0 NEW_LINE c2 = 0 NEW_LINE c3 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == "1" : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT c2 += 1 NEW_LINE DEDENT DEDENT if c1 > c2 : NEW_LINE INDENT print ( c2 ) NEW_LINE DEDENT elif c2 > c3 : NEW_LINE INDENT print ( c1 ) NEW_LINE DEDENT else : NEW_LINE INDENT if c1 > c2 : NEW_LINE INDENT print ( c2 - 1 ) NEW_LINE DEDENT elif c1 < c3 : NEW_LINE INDENT print ( c1 - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( c3 - 1 ) NEW_LINE DEDENT DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE c = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] % 2 == 1 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT if c == n : NEW_LINE INDENT print ( ' Conan ' ) NEW_LINE DEDENT elif a [ - 1 ] % 2 == 1 : NEW_LINE INDENT print ( ' Conan ' ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if a [ i ] % 2 == 1 : NEW_LINE INDENT print ( ' Conan ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' Ag C ' ) NEW_LINE DEDENT DEDENT DEDENT
a = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE for i in range ( 5 ) : NEW_LINE INDENT print ( a [ i ] , end = " " ) NEW_LINE DEDENT
target = 93 NEW_LINE arr = [ 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 ] NEW_LINE length = len ( arr ) NEW_LINE totalCount = 0 NEW_LINE for i in range ( length - 2 ) : NEW_LINE INDENT if target % arr [ i ] == 0 : NEW_LINE INDENT for j in range ( i + 1 , length - 1 ) : NEW_LINE INDENT if target % ( arr [ i ] * arr [ j ] ) == 0 : NEW_LINE INDENT toFind = target // ( arr [ i ] * arr [ j ] ) NEW_LINE for k in range ( j + 1 , length ) : NEW_LINE INDENT if arr [ k ] == toFind : NEW_LINE INDENT totalCount += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT print ( " Total number of triplets found : " , totalCount ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE if n == 1 : NEW_LINE INDENT print ( 1 , 1 ) NEW_LINE print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 , 1 ) NEW_LINE ans = [ - a [ 0 ] ] * n NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT ans . append ( ans [ - 1 ] + a [ i ] ) NEW_LINE DEDENT print ( 2 , n ) NEW_LINE print ( * ans ) NEW_LINE DEDENT
def finalNum ( arr , n ) : NEW_LINE INDENT result = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT result = __gcd ( result , arr [ i ] ) ; NEW_LINE DEDENT return result ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 3 , 9 , 6 , 36 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( finalNum ( arr , n ) ) ; NEW_LINE DEDENT
N = 1000 NEW_LINE def lastElement ( a , n ) : NEW_LINE INDENT steps = 1 NEW_LINE v = [ [ ] for i in range ( N ) ] NEW_LINE if ( n == 1 ) : NEW_LINE INDENT return a [ 0 ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT v [ steps ] . append ( a [ i ] | a [ i + 1 ] ) NEW_LINE DEDENT while ( len ( v [ steps ] ) > 1 ) : NEW_LINE INDENT steps += 1 NEW_LINE for i in range ( len ( v [ steps - 1 ] ) ) : NEW_LINE INDENT if ( steps % 2 == 1 ) : NEW_LINE INDENT v [ steps ] . append ( v [ steps - 1 ] [ i ] | v [ steps - 1 ] [ i + 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT v [ steps ] . append ( v [ steps - 1 ] [ i ] ^ v [ steps - 1 ] [ i + 1 ] ) NEW_LINE DEDENT DEDENT DEDENT return v [ steps ] [ 0 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 1 , 4 , 5 , 6 ] NEW_LINE n = len ( a ) NEW_LINE index = 0 NEW_LINE value = 2 NEW_LINE a [ 0 ] = 2 NEW_LINE print ( lastElement ( a , n ) ) NEW_LINE index = 3 NEW_LINE value = 5 NEW_LINE a [ index ] = value NEW_LINE print ( lastElement ( a , n ) ) NEW_LINE DEDENT
def number_cake ( n ) : NEW_LINE INDENT return ( n * n * n + 5 * n + 6 ) // 6 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 2 NEW_LINE print ( number_cake ( n ) ) NEW_LINE n = 8 NEW_LINE print ( number_cake ( n ) ) NEW_LINE n = 25 NEW_LINE print ( number_cake ( n ) ) NEW_LINE DEDENT
import re NEW_LINE print ( re . sub ( r ' 0 . ' , ' \ \1 \ 2' , input ( ) ) . count ( ' g ' ) + 1 ) NEW_LINE
def pattern ( N ) : NEW_LINE INDENT k = 0 NEW_LINE space = 1 NEW_LINE rows = N NEW_LINE for i in range ( rows , 0 , - 1 ) : NEW_LINE INDENT for j in range ( 1 , i + 1 ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT if i != rows : NEW_LINE INDENT for k in range ( 1 , space + 1 ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT space = space + 2 NEW_LINE DEDENT for j in range ( i , 0 , - 1 ) : NEW_LINE INDENT if j != rows : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT N = 6 NEW_LINE pattern ( N ) NEW_LINE
def maximum_ middle_value ( n , k , arr ) : NEW_LINE INDENT ans = - 1 NEW_LINE low = ( n + 1 - k ) // 2 NEW_LINE high = ( n + 1 - k ) // 2 + k NEW_LINE for i in range ( low , high + 1 ) : NEW_LINE INDENT ans = max ( ans , arr [ i - 1 ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT n = 5 NEW_LINE k = 2 NEW_LINE arr = [ 9 , 5 , 3 , 7 , 10 ] NEW_LINE print ( maximum_ middle_value ( n , k , arr ) ) NEW_LINE n = 9 NEW_LINE k = 3 NEW_LINE arr1 = [ 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 ] NEW_LINE print ( maximum_ middle_value ( n , k , arr1 ) ) NEW_LINE
class TreeNode : NEW_LINE INDENT def __init__ ( self , rootData ) : NEW_LINE INDENT self . val = rootData NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT class Solution ( object ) : NEW_LINE INDENT def pathSum ( self , root , sum ) : NEW_LINE INDENT result = 0 NEW_LINE cache = dict ( ) NEW_LINE if root != None : NEW_LINE INDENT complement = sofar + root . val - target NEW_LINE if complement in cache : NEW_LINE INDENT result += cache [ complement ] NEW_LINE DEDENT cache [ sofar + root . val ] = cache . get ( sofar + root . val , 0 ) + 1 NEW_LINE pathSum helper ( root . left , target , sofar + root . val ) NEW_LINE pathSum helper ( root . right , target , sofar + root . val ) NEW_LINE cache [ sofar + root . val ] = cache . get ( sofar + root . val , 0 ) - 1 NEW_LINE DEDENT return result NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE root = TreeNode ( 10 ) NEW_LINE root . left = TreeNode ( 5 ) NEW_LINE root . right = TreeNode ( - 3 ) NEW_LINE root . left . left = TreeNode ( 3 ) NEW_LINE root . left . right = TreeNode ( 2 ) NEW_LINE root . right . right = TreeNode ( 11 ) NEW_LINE root . left . left . left = TreeNode ( 3 ) NEW_LINE root . left . left . left = TreeNode ( 2 ) NEW_LINE root . left . left . right = TreeNode ( - 2 ) NEW_LINE root . left . left . left = TreeNode ( 3 ) NEW_LINE root . left . left . right = TreeNode ( 2 ) NEW_LINE root . right . right = TreeNode ( 11 ) NEW_LINE root . left . left . left = TreeNode ( 3 ) NEW_LINE root . left . left . left . right = TreeNode ( - 2 ) NEW_LINE root . left . right . right = TreeNode ( 1 ) NEW_LINE sum = 8 NEW_LINE out = sObj . pathSum ( root , sum ) NEW_LINE print ( out ) NEW_LINE DEDENT
def getmax ( arr , n , x ) : NEW_LINE INDENT s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = s + arr [ i ] NEW_LINE DEDENT print ( min ( s , x ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE x = 5 NEW_LINE arr_size = len ( arr ) NEW_LINE getmax ( arr , arr_size , x ) NEW_LINE DEDENT
import sys NEW_LINE sys . setrecursionlimit ( 10000 ) NEW_LINE def solve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT num = int ( str ( i ) [ : : - 1 ] ) NEW_LINE digits = " " NEW_LINE for j in range ( 8 ) : NEW_LINE INDENT digits += str ( j ) [ : : - 1 ] NEW_LINE DEDENT digits += str ( num ) [ - 1 : ] NEW_LINE ans += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT ans = [ ] NEW_LINE for i in range ( 1 , 10000 + 1 ) : NEW_LINE INDENT ans . append ( solve ( ) ) NEW_LINE DEDENT print ( " Case { } : " . format ( i ) ) NEW_LINE for ans in ans : NEW_LINE INDENT print ( ans [ 0 ] ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if not n : NEW_LINE INDENT break NEW_LINE DEDENT ans = 0 NEW_LINE while True : NEW_LINE INDENT ans += 1 NEW_LINE if ( n - 1 ) % 2 == 0 : NEW_LINE INDENT n = n - 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def maxOR ( arr , n ) : NEW_LINE INDENT maxVal = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT maxVal = max ( maxVal , arr [ i ] | arr [ j ] ) NEW_LINE DEDENT DEDENT return maxVal NEW_LINE DEDENT arr = [ 4 , 8 , 12 , 16 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxOR ( arr , n ) ) NEW_LINE
class Solution ( object ) : NEW_LINE INDENT def numJewelsInStones ( self , J , S ) : NEW_LINE INDENT result = 0 NEW_LINE jHash = dict ( ) NEW_LINE for j in range ( len ( J ) ) : NEW_LINE INDENT jHash [ j ] = 1 NEW_LINE DEDENT for s in range ( len ( S ) ) : NEW_LINE INDENT if jHash [ s ] in jHash . keys ( ) : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE J = ' aA ' NEW_LINE S = ' aA ab ab ab ' NEW_LINE out = sObj . numJewelsInStones ( J , S ) NEW_LINE print ( out ) NEW_LINE DEDENT
MAX = 100 NEW_LINE store = [ 0 ] * MAX NEW_LINE graph = [ [ 0 for i in range ( MAX ) ] for j in range ( MAX ) ] NEW_LINE d = [ 0 for i in range ( MAX ) ] NEW_LINE def is_Zeros ( b ) : NEW_LINE INDENT for i in range ( 1 , b ) : NEW_LINE INDENT for j in range ( i + 1 , b ) : NEW_LINE INDENT if ( graph [ store [ i ] ] [ store [ j ] ] == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT def maxZeros ( i , l ) : NEW_LINE INDENT max_ = 0 NEW_LINE for j in range ( i + 1 , n + 1 ) : NEW_LINE INDENT store [ l ] = j NEW_LINE if ( is_Zeros ( l + 1 ) ) : NEW_LINE INDENT max_ = max ( max_ , l ) NEW_LINE max_ = max ( max_ , max >= 2 ) NEW_LINE max_ = max ( max_ , max >= 3 ) NEW_LINE DEDENT DEDENT return max_ NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT edges = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 1 ] , [ 4 , 3 ] , [ 4 , 1 ] , [ 4 , 2 ] ] NEW_LINE size = len ( edges ) NEW_LINE n = 4 NEW_LINE for i in range ( size ) : NEW_LINE INDENT graph [ edges [ i ] [ 0 ] ] [ edges [ i ] [ 1 ] ] = 1 NEW_LINE graph [ edges [ i ] [ 1 ] ] [ edges [ i ] [ 0 ] ] = 1 NEW_LINE d [ edges [ i ] [ 0 ] ] += 1 NEW_LINE d [ edges [ i ] [ 1 ] ] += 1 NEW_LINE DEDENT print ( maxZeros ( 0 , 1 ) ) NEW_LINE DEDENT
import math NEW_LINE def setBitNumber ( n ) : NEW_LINE INDENT k = int ( math . log2 ( n ) ) ; NEW_LINE return int ( pow ( 2 , k ) ) ; NEW_LINE DEDENT n = 273 ; NEW_LINE print ( setBitNumber ( n ) ) ; NEW_LINE
m , s , f = map ( int , input ( ) . split ( ) ) NEW_LINE l = [ ] NEW_LINE r = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT k , x , y = map ( int , input ( ) . split ( ) ) NEW_LINE l . append ( [ k , x , y ] ) NEW_LINE r . append ( [ k , x , y ] ) NEW_LINE DEDENT l . sort ( ) NEW_LINE r . sort ( ) NEW_LINE l . reverse ( ) NEW_LINE if l [ 0 ] [ 1 ] < f < l [ 1 ] [ 1 ] : NEW_LINE INDENT print ( ' R ' ) NEW_LINE DEDENT elif l [ 0 ] [ 1 ] > f < l [ 1 ] [ 1 ] : NEW_LINE INDENT print ( ' L ' ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( 2 , m ) : NEW_LINE INDENT k = l [ i ] [ 0 ] NEW_LINE l . sort ( ) NEW_LINE if k [ 0 ] > l [ i - 1 ] [ 1 ] : NEW_LINE INDENT print ( ' R ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' L ' ) NEW_LINE DEDENT DEDENT DEDENT
def subsetPairNotDivisibleByK ( arr , N , K ) : NEW_LINE INDENT f = [ 0 for i in range ( K ) ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT f [ arr [ i ] % K ] += 1 NEW_LINE DEDENT if K % 2 == 0 : NEW_LINE INDENT f [ K // 2 ] = min ( f [ K // 2 ] , 1 ) NEW_LINE DEDENT res = min ( f [ 0 ] , 1 ) NEW_LINE for i in range ( 1 , K // 2 + 1 ) : NEW_LINE INDENT res += max ( f [ i ] , f [ K - i ] ) NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 7 , 2 , 9 , 1 ] NEW_LINE N = len ( arr ) NEW_LINE K = 3 NEW_LINE print ( subsetPairNotDivisibleByK ( arr , N , K ) ) NEW_LINE DEDENT
from math import ceil NEW_LINE def seal ( a , b ) : NEW_LINE INDENT return ( a + b - 1 ) // b NEW_LINE DEDENT n = int ( input ( ) ) NEW_LINE t = int ( input ( ) ) NEW_LINE l = seal ( n , 10 ) NEW_LINE while t + 1 < l : NEW_LINE INDENT m = ceil ( ( t + l - 1 ) / 2 ) NEW_LINE if seal ( m , 10 ) <= t : NEW_LINE INDENT l = m NEW_LINE DEDENT else : NEW_LINE INDENT r = m NEW_LINE DEDENT DEDENT print ( l ) NEW_LINE
def printRoots ( a , b , c ) : NEW_LINE INDENT print ( 1 , " , " , c // ( a * 1.0 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 2 NEW_LINE b = 3 NEW_LINE c = - 5 NEW_LINE printRoots ( a , b , c ) NEW_LINE DEDENT
memo = [ [ [ - 1 for i in range ( 32 ) ] for j in range ( 32 ) ] for k in range ( 32 ) ] NEW_LINE def dp ( pos , fl , pr , bin ) : NEW_LINE INDENT if ( pos == len ( bin ) ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( memo [ pos ] [ fl ] [ pr ] != - 1 ) : NEW_LINE INDENT return memo [ pos ] [ fl ] [ pr ] NEW_LINE DEDENT val = 0 NEW_LINE if ( bin [ pos ] == '0' ) : NEW_LINE INDENT val = val + dp ( pos + 1 , fl , 0 , bin ) NEW_LINE DEDENT elif ( bin [ pos ] == '1' ) : NEW_LINE INDENT val = val + dp ( pos + 1 , 1 , 0 , bin ) NEW_LINE DEDENT if ( pr == 0 ) : NEW_LINE INDENT if ( fl == 1 ) : NEW_LINE INDENT val += dp ( pos + 1 , fl , 1 , bin ) NEW_LINE DEDENT elif ( bin [ pos ] == '1' ) : NEW_LINE INDENT val += dp ( pos + 1 , fl , 1 , bin ) NEW_LINE DEDENT DEDENT memo [ pos ] [ fl ] [ pr ] = val NEW_LINE return memo [ pos ] [ fl ] [ pr ] NEW_LINE DEDENT def findIntegers ( num ) : NEW_LINE INDENT bin = " " NEW_LINE while ( num > 0 ) : NEW_LINE INDENT if ( num % 2 == 1 ) : NEW_LINE INDENT bin += "1" NEW_LINE DEDENT else : NEW_LINE INDENT bin += "0" NEW_LINE DEDENT num //= 2 NEW_LINE DEDENT bin = bin [ : : - 1 ] NEW_LINE DEDENT dp = [ [ [ - 1 for i in range ( 32 ) ] for j in range ( 2 ) ] for k in range ( 32 ) ] NEW_LINE ans = dp ( 0 , 0 , 0 , bin ) NEW_LINE print ( ans ) NEW_LINE
N = 4 NEW_LINE def MaximumDecimalValue ( mat , n ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ] NEW_LINE if ( mat [ 0 ] [ 0 ] == 1 ) : NEW_LINE INDENT dp [ 0 ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( mat [ 0 ] [ i ] == 1 ) : NEW_LINE INDENT dp [ 0 ] [ i ] = ( dp [ 0 ] [ i - 1 ] + 2 ** i ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( mat [ i ] [ 0 ] == 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + 2 ** i ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT if ( mat [ i ] [ j ] == 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = ( max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + 2 ** ( i + j ) ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return dp [ n - 1 ] [ n - 1 ] NEW_LINE DEDENT mat = [ [ 1 , 1 , 0 , 1 ] , [ 0 , 1 , 1 , 0 ] , [ 1 , 0 , 0 , 1 , 1 ] , [ 1 , 0 , 1 , 1 , 1 ] ] NEW_LINE print ( MaximumDecimalValue ( mat , 4 ) ) NEW_LINE
def createHash ( hash , maxElement ) : NEW_LINE INDENT prev = 0 NEW_LINE curr = 1 NEW_LINE hash . add ( prev ) NEW_LINE hash . add ( curr ) NEW_LINE while ( curr < maxElement ) : NEW_LINE INDENT temp = curr + prev NEW_LINE hash . add ( temp ) NEW_LINE prev = curr NEW_LINE curr = temp NEW_LINE DEDENT DEDENT def findFibonacciPair ( n ) : NEW_LINE INDENT hash = set ( ) NEW_LINE createHash ( hash , n ) NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if ( i in hash and i in hash ) : NEW_LINE INDENT print ( i , " , " , ( n - i ) ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( " - 1" ) NEW_LINE DEDENT N = 90 NEW_LINE findFibonacciPair ( N ) NEW_LINE
def countgroup ( a , n ) : NEW_LINE INDENT xs = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT xs = xs ^ a [ i ] NEW_LINE DEDENT if ( xs == 0 ) : NEW_LINE INDENT return ( 1 << ( n - 1 ) ) - 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 1 , 2 , 3 ] NEW_LINE n = len ( a ) NEW_LINE print ( countgroup ( a , n ) ) NEW_LINE DEDENT
def maxLength ( s , n ) : NEW_LINE INDENT ans = - 10 ** 9 NEW_LINE A = [ ] NEW_LINE L = [ ] NEW_LINE R = [ ] NEW_LINE freq = [ 0 ] * ( n + 5 ) NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( ord ( s [ j ] ) - ord ( ' a ' ) == i ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT freq [ j ] = count NEW_LINE DEDENT for j in range ( 1 , n ) : NEW_LINE INDENT L . append ( ( 2 * freq [ j - 1 ] ) - j ) NEW_LINE R . append ( ( 2 * freq [ j ] ) - j ) NEW_LINE DEDENT max_len = - 10 ** 9 NEW_LINE min_val = 10 ** 9 NEW_LINE for j in range ( len ( L ) ) : NEW_LINE INDENT min_val = min ( min_val , L [ j ] ) NEW_LINE A . append ( min_val ) NEW_LINE l = 0 NEW_LINE r = j NEW_LINE while ( l <= r ) : NEW_LINE INDENT mid = ( l + r ) >> 1 NEW_LINE if ( A [ mid ] <= R [ j ] ) : NEW_LINE INDENT max_len = max ( max_len , j - mid + 1 ) NEW_LINE r = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT DEDENT DEDENT ans = max ( ans , max_len ) NEW_LINE A . clear ( ) NEW_LINE L . clear ( ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " ababbbacbcbcca " NEW_LINE n = len ( s ) NEW_LINE print ( maxLength ( s , n ) ) NEW_LINE DEDENT
def add_edge ( x , y ) : NEW_LINE INDENT gr [ x ] . append ( y ) NEW_LINE gr [ y ] . append ( x ) NEW_LINE DEDENT def dfs ( x , col ) : NEW_LINE INDENT dic [ x ] = col NEW_LINE for i in gr [ x ] : NEW_LINE INDENT if ( dic [ i ] == - 1 ) : NEW_LINE INDENT dfs ( i , col ^ 1 ) NEW_LINE DEDENT elif ( dic [ i ] == col ) : NEW_LINE INDENT bip = False NEW_LINE DEDENT DEDENT DEDENT def two_Graph ( n , m ) : NEW_LINE INDENT global gr NEW_LINE for i in range ( N ) : NEW_LINE INDENT dic [ i ] = - 1 NEW_LINE DEDENT bip = True NEW_LINE dfs ( 1 , 1 ) NEW_LINE if ( not bip ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE return NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT if ( dic [ i ] [ 0 ] == 0 ) : NEW_LINE INDENT gr [ i ] [ 0 ] , gr [ i ] [ 1 ] = arr [ i ] [ 1 ] , arr [ i ] [ 2 ] NEW_LINE DEDENT DEDENT print ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 NEW_LINE m = 3 NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] % 2 == 0 : NEW_LINE INDENT b . append ( a [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT b . append ( a [ i ] ) NEW_LINE DEDENT DEDENT if len ( b ) == 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( * sorted ( b ) , sep = " " ) NEW_LINE DEDENT
o , n , g = map ( int , input ( ) . split ( ) ) NEW_LINE print ( max ( 0 , min ( o * ( n - 1 ) , n ) - g ) ) NEW_LINE
def isPrime ( k ) : NEW_LINE INDENT if ( k <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , k ) : NEW_LINE INDENT if ( k % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def check ( num , k ) : NEW_LINE INDENT flag = 1 NEW_LINE for i in range ( 2 , k ) : NEW_LINE INDENT if ( num % i == 0 ) : NEW_LINE INDENT flag = 0 NEW_LINE DEDENT DEDENT if ( flag ) : NEW_LINE INDENT if ( num % k == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT def findCount ( a , b , k ) : NEW_LINE INDENT count = 0 NEW_LINE if ( not isPrime ( k ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( a , b + 1 ) : NEW_LINE INDENT ans = check ( i , k ) NEW_LINE if ( ans == 1 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 2020 NEW_LINE b = 6300 NEW_LINE k = 29 NEW_LINE print ( findCount ( a , b , k ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE ans = ' ' NEW_LINE if n > k : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT if k == 1 : NEW_LINE INDENT ans += chr ( 97 + i ) NEW_LINE exit ( ) NEW_LINE DEDENT ans += chr ( 97 + i ) NEW_LINE k = n - k + 1 NEW_LINE while k > 1 : NEW_LINE INDENT ans += chr ( 97 + i ) NEW_LINE k -= 1 NEW_LINE DEDENT if k > 1 : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT print ( ans * 2 * ( n - k - 2 ) + ans ) NEW_LINE
maxn = 16 NEW_LINE def precompute ( ) : NEW_LINE INDENT dp = [ 0 for i in range ( maxn ) ] NEW_LINE arr = [ 4 , 6 , 9 ] NEW_LINE for i in range ( maxn ) : NEW_LINE INDENT dp [ i ] = - 1 NEW_LINE DEDENT dp [ 0 ] = 0 NEW_LINE for i in range ( 1 , maxn ) : NEW_LINE INDENT for k in range ( 3 ) : NEW_LINE INDENT j = arr [ k ] NEW_LINE if ( i >= j and dp [ i - j ] != - 1 ) : NEW_LINE INDENT dp [ i ] = max ( dp [ i ] , dp [ i - j ] + 1 ) NEW_LINE DEDENT DEDENT DEDENT return dp NEW_LINE DEDENT def Maximum_Sumous ( dp , n ) : NEW_LINE INDENT if ( n < maxn ) : NEW_LINE INDENT return dp [ n ] NEW_LINE DEDENT else : NEW_LINE INDENT t = ( n - maxn ) // 4 + 1 NEW_LINE return t + dp [ n - 4 * t ] NEW_LINE DEDENT DEDENT n = 12 NEW_LINE dp = precompute ( ) NEW_LINE print ( Maximum_Sumous ( dp , n ) ) NEW_LINE
def countSquares ( n ) : NEW_LINE INDENT return ( ( n * ( n + 1 ) / 2 ) * ( 2 * n + 1 ) / 3 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE print ( " Count of squares is " , countSquares ( n ) ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ i + 1 ] = ( b [ i ] + a [ i ] ) % m NEW_LINE DEDENT print ( b [ n ] ) NEW_LINE
import sys NEW_LINE def FindSubarray ( arr , n , k ) : NEW_LINE INDENT count_one = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT count_one [ i ] = bin ( arr [ i ] ) . count ( '1' ) NEW_LINE DEDENT sum = count_one [ 0 ] NEW_LINE if ( n == 1 ) : NEW_LINE INDENT if ( count_one [ 0 ] >= k ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT ans = sys . maxsize NEW_LINE i = 1 NEW_LINE j = 0 NEW_LINE while ( i < n ) : NEW_LINE INDENT if ( k == count_one [ j ] ) : NEW_LINE INDENT ans = 1 NEW_LINE break NEW_LINE DEDENT elif ( k == count_one [ i ] ) : NEW_LINE INDENT ans = 1 NEW_LINE break NEW_LINE DEDENT elif ( sum + count_one [ i ] < k ) : NEW_LINE INDENT sum += count_one [ i ] NEW_LINE i += 1 NEW_LINE DEDENT elif ( sum + count_one [ i ] > k ) : NEW_LINE INDENT ans = min ( ans , ( i - j ) + 1 ) NEW_LINE sum -= count_one [ j ] NEW_LINE j += 1 NEW_LINE DEDENT elif ( sum + count_one [ i ] == k ) : NEW_LINE INDENT ans = min ( ans , ( i - j ) + 1 ) NEW_LINE sum += count_one [ i ] NEW_LINE i += 1 NEW_LINE DEDENT DEDENT if ( ans != sys . maxsize ) : NEW_LINE INDENT return ans NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT arr = [ 1 , 2 , 4 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE print ( FindSubarray ( arr , n , k ) ) NEW_LINE
def loss ( SP , P ) : NEW_LINE INDENT loss = 0 NEW_LINE loss = ( 2 * P * P * SP ) / ( 100 * 100 - P * P ) NEW_LINE print ( " l = { 0 : . 3 f } " . format ( round ( loss , 2 ) ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT SP = 2400 NEW_LINE P = 30 NEW_LINE loss ( SP , P ) NEW_LINE DEDENT
n , m , x = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if x > 0 : NEW_LINE INDENT print ( sum ( a [ 0 : x ] ) ) NEW_LINE DEDENT elif x == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( min ( sum ( a [ x : x ] ) , sum ( a [ x : x ] ) ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE li = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE ones = li . count ( 1 ) NEW_LINE twos = li . count ( 2 ) NEW_LINE print ( min ( ones , twos ) ) NEW_LINE
def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 7 NEW_LINE ans = sum ( 1 for i in range ( LIMIT ) if is_Class89 ( i ) ) NEW_LINE return str ( ans ) NEW_LINE DEDENT def is_Class89 ( x ) : NEW_LINE INDENT while True : NEW_LINE INDENT if x == 1 : NEW_LINE INDENT return False NEW_LINE DEDENT if x == 89 : NEW_LINE INDENT return True NEW_LINE DEDENT x = next ( x ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def fact ( n ) : NEW_LINE INDENT fact = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT fact *= i NEW_LINE DEDENT return fact NEW_LINE DEDENT def countStrings ( string , n ) : NEW_LINE INDENT distinct_char = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT distinct_char [ string [ i ] ] = 1 NEW_LINE DEDENT return fact ( len ( distinct_char ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT string = " geeksforgeeks " NEW_LINE n = len ( string ) NEW_LINE print ( countStrings ( string , n ) ) NEW_LINE DEDENT
M = 4 NEW_LINE N = 5 NEW_LINE def printCommonElements ( mat ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for j in range ( N ) : NEW_LINE INDENT mp [ mat [ 0 ] [ j ] ] = 1 NEW_LINE DEDENT for i in range ( 1 , M ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT if mat [ i ] [ j ] in mp . keys ( ) : NEW_LINE INDENT mp [ mat [ i ] [ j ] ] = i + 1 NEW_LINE if ( i == M - 1 ) : NEW_LINE INDENT print ( mat [ i ] [ j ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT mat = [ [ 1 , 2 , 1 , 4 , 8 ] , [ 3 , 7 , 8 , 5 , 1 ] , [ 8 , 7 , 7 , 3 , 1 ] , [ 8 , 1 , 2 , 7 , 9 ] ] NEW_LINE printCommonElements ( mat ) NEW_LINE
n = int ( input ( ) ) NEW_LINE start , end = map ( int , input ( ) . split ( ) ) NEW_LINE f = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE tmp = a * ( start + 1 ) + b NEW_LINE tmp = b * ( end - 1 ) + a NEW_LINE f . append ( ( i + 1 , tmp ) ) NEW_LINE f . append ( ( i + 1 , tmp ) ) NEW_LINE DEDENT f . sort ( ) NEW_LINE count = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( f [ i ] [ 1 ] - f [ i - 1 ] [ 0 ] ) != ( f [ i - 1 ] [ 1 ] - f [ i ] [ 0 ] ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE count = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if count == 0 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
n , t = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE s = [ ] NEW_LINE d = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE s . append ( x ) NEW_LINE d . append ( y ) NEW_LINE DEDENT s . sort ( ) NEW_LINE t . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT v = t [ i ] - s [ i ] NEW_LINE if v > d [ i ] : NEW_LINE INDENT print ( i + 1 ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
def sumOfAP ( a , d , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + a NEW_LINE a = a + d NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 20 NEW_LINE a = pq NEW_LINE d = 1.5 NEW_LINE print ( round ( sumOfAP ( a , d , n ) , 2 ) ) NEW_LINE DEDENT
def find3Numbers ( arr , n ) : NEW_LINE INDENT small = + 2147483647 NEW_LINE large = + 2147483647 NEW_LINE i = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] <= small ) : NEW_LINE INDENT small = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] <= large ) : NEW_LINE INDENT large = arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( i == n ) : NEW_LINE INDENT print ( " No such triplet found " ) NEW_LINE return NEW_LINE DEDENT for j in range ( 0 , i + 1 ) : NEW_LINE INDENT if ( arr [ j ] < large ) : NEW_LINE INDENT small = arr [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT print ( small , large , arr [ i ] ) NEW_LINE return NEW_LINE DEDENT arr = [ 5 , 7 , 4 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE find3Numbers ( arr , n ) NEW_LINE
def numbersWith3Divisors ( n ) : NEW_LINE INDENT prime = [ True ] * ( n + 1 ) NEW_LINE prime [ 0 ] = prime [ 1 ] = False NEW_LINE p = 2 NEW_LINE while p * p <= n : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT print ( " Numbers with 3 divisors : " ) NEW_LINE for i in range ( 0 , int ( n ** 0.5 ) + 1 ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT print ( i * i , end = " " ) NEW_LINE DEDENT DEDENT DEDENT n = 96 NEW_LINE numbersWith3Divisors ( n ) NEW_LINE
def findPairCount ( N , K ) : NEW_LINE INDENT count = 0 NEW_LINE rem = [ 0 for i in range ( K ) ] NEW_LINE rem [ 0 ] = N // K NEW_LINE for i in range ( 1 , K ) : NEW_LINE INDENT rem [ i ] = ( N - i ) // K + 1 NEW_LINE DEDENT if ( K % 2 == 0 ) : NEW_LINE INDENT count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) // 2 NEW_LINE for i in range ( 1 , K // 2 ) : NEW_LINE INDENT count += rem [ i ] * rem [ K - i ] NEW_LINE DEDENT count += ( rem [ K // 2 ] * ( rem [ K // 2 ] - 1 ) ) // 2 NEW_LINE DEDENT else : NEW_LINE INDENT count += ( rem [ 0 ] * ( rem [ 0 ] - 1 ) ) // 2 NEW_LINE for i in range ( 1 , K // 2 ) : NEW_LINE INDENT count += rem [ i ] * rem [ K - i ] NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 10 NEW_LINE K = 4 NEW_LINE print ( findPairCount ( N , K ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE p = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE p . sort ( reverse = True ) NEW_LINE ans = 0 NEW_LINE for i in range ( len ( p ) ) : NEW_LINE INDENT ans = max ( ans , p [ i ] - p [ i - 1 ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE l . sort ( ) NEW_LINE if sum ( l ) % 2 == 0 and l [ 0 ] >= 2 * l [ 1 ] : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT
PHI = 1.6180 INF NEW_LINE f = [ 0 , 1 , 1 , 2 , 3 , 5 ] NEW_LINE def fib ( n ) : NEW_LINE INDENT if ( n < 6 ) : NEW_LINE INDENT return f [ n ] NEW_LINE DEDENT t = 5 NEW_LINE fn = 5 NEW_LINE while ( t < n ) : NEW_LINE INDENT fn = round ( fn * PHI ) NEW_LINE t += 1 NEW_LINE DEDENT return fn NEW_LINE DEDENT n = 9 NEW_LINE print ( n , " th Fibonacci Number = " , fib ( n ) ) NEW_LINE
def kthSmallest ( n , k ) : NEW_LINE INDENT return ( 2 * k ) NEW_LINE DEDENT n = 8 NEW_LINE k = 4 NEW_LINE print ( kthSmallest ( n , k ) ) NEW_LINE
n = 5 NEW_LINE def printSumTr dic ( mat , k ) : NEW_LINE INDENT if ( k > n ) : NEW_LINE INDENT return NEW_LINE DEDENT stripSum = [ [ 0 for i in range ( n ) ] for i in range ( n ) ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT sum += mat [ i ] [ j ] NEW_LINE DEDENT stripSum [ 0 ] [ j ] = sum NEW_LINE for i in range ( 1 , n - k + 1 ) : NEW_LINE INDENT sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) NEW_LINE stripSum [ i ] [ j ] = sum NEW_LINE DEDENT DEDENT for i in range ( n - k + 1 ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( k ) : NEW_LINE INDENT sum += stripSum [ i ] [ j ] NEW_LINE DEDENT print ( sum , end = " " ) NEW_LINE for j in range ( 1 , n - k + 1 ) : NEW_LINE INDENT sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) NEW_LINE print ( sum , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT mat = [ [ 1 , 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 , 4 ] , [ 5 , 5 , 5 , 5 , 5 ] , ] NEW_LINE k = 3 NEW_LINE printSumTr dic ( mat , k ) NEW_LINE
a , b , n = map ( int , input ( ) . split ( ) ) NEW_LINE if a * b > n : NEW_LINE INDENT print ( " No solution " ) NEW_LINE DEDENT else : NEW_LINE INDENT r = a * b - n NEW_LINE while r > 1 : NEW_LINE INDENT r -= 1 NEW_LINE if r == 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT print ( " % d " % r ) NEW_LINE DEDENT
def ncr ( n , r ) : NEW_LINE INDENT ans = 1 NEW_LINE for i in range ( 1 , r + 1 ) : NEW_LINE INDENT ans *= ( n - r + i ) NEW_LINE ans //= i NEW_LINE DEDENT return ans NEW_LINE DEDENT def totalWays ( X , Y , M , W ) : NEW_LINE INDENT return ( ncr ( M , X ) * ncr ( W , Y ) ) NEW_LINE DEDENT X = 4 NEW_LINE Y = 3 NEW_LINE M = 6 NEW_LINE W = 5 NEW_LINE print ( totalWays ( X , Y , M , W ) ) NEW_LINE
def nextPowerOf2 ( n ) : NEW_LINE INDENT count = 0 NEW_LINE if ( n and not ( n & ( n - 1 ) ) ) : NEW_LINE INDENT return n NEW_LINE DEDENT while ( n ) : NEW_LINE INDENT n >>= 1 NEW_LINE count += 1 NEW_LINE DEDENT return 1 << count NEW_LINE DEDENT def removeElement ( n ) : NEW_LINE INDENT if ( n == 1 or n == 2 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT a = nextPowerOf2 ( n ) NEW_LINE if ( n == a or n == a - 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif ( n == a - 2 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( n % 2 == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 2 NEW_LINE DEDENT DEDENT n = 5 NEW_LINE print ( removeElement ( n ) ) NEW_LINE
import sys NEW_LINE sys . setrecursionlimit ( 10 ** 9 ) NEW_LINE INF = 10 ** 18 NEW_LINE MOD = 10 ** 9 + 7 NEW_LINE input = lambda : sys . stdin . readline ( ) . rstrip ( ) NEW_LINE YesNo = lambda b : bool ( [ print ( ' Yes ' ) ] if b else print ( ' No ' ) ) NEW_LINE YESNO = lambda b : bool ( [ print ( ' YES ' ) ] if b else print ( ' NO ' ) ) NEW_LINE int1 = lambda x : int ( x ) - 1 NEW_LINE def main ( ) : NEW_LINE INDENT N , P = map ( int , input ( ) . split ( ) ) NEW_LINE A = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = INF NEW_LINE x = 0 NEW_LINE for a in A : NEW_LINE INDENT x += a & 1 NEW_LINE DEDENT if x % 2 == 0 : NEW_LINE INDENT ans = min ( ans , 2 ** ( x - 1 ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def modInverse ( a , m ) : NEW_LINE INDENT a = a % m NEW_LINE for x in range ( 1 , m ) : NEW_LINE INDENT if ( ( a * x ) % m == 1 ) : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT a = 3 NEW_LINE m = 11 NEW_LINE print ( modInverse ( a , m ) ) NEW_LINE
def sumOfDigits ( x ) : NEW_LINE INDENT sum = 0 NEW_LINE while ( x != 0 ) : NEW_LINE INDENT sum += x % 10 NEW_LINE x = x // 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT def countNumbers ( l , r ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT if ( i % 2 == 0 and sumOfDigits ( i ) % 3 == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT l = 1000 NEW_LINE r = 6000 NEW_LINE print ( countNumbers ( l , r ) ) NEW_LINE DEDENT
from math import log NEW_LINE def findGreater ( a , b ) : NEW_LINE INDENT x = a * log ( b ) ; NEW_LINE y = b * log ( log ( a ) ) ; NEW_LINE if ( y > x ) : NEW_LINE INDENT print ( " a ^ b is greater " ) ; NEW_LINE DEDENT elif ( y < x ) : NEW_LINE INDENT print ( " b ^ a is greater " ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( " weight are equal " ) ; NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 3 ; NEW_LINE b = 5 ; NEW_LINE c = 2 ; NEW_LINE d = 4 ; NEW_LINE findGreater ( a , b ) ; NEW_LINE findGreater ( c , d ) ; NEW_LINE DEDENT
def findAnswer ( str1 , str2 , n ) : NEW_LINE INDENT l = 0 NEW_LINE r = 0 NEW_LINE ans = 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( str1 [ i ] != str2 [ i ] ) : NEW_LINE INDENT l = i NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( str1 [ i ] != str2 [ i ] ) : NEW_LINE INDENT r = i NEW_LINE break NEW_LINE DEDENT DEDENT if ( r < l ) : NEW_LINE INDENT return 26 * ( n + 1 ) NEW_LINE DEDENT elif ( l == r ) : NEW_LINE INDENT return ans NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( l + 1 , r + 1 , 1 ) : NEW_LINE INDENT if ( str1 [ i ] != str2 [ i - 1 ] ) : NEW_LINE INDENT ans -= 1 NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( l + 1 , r + 1 , 1 ) : NEW_LINE INDENT if ( str1 [ i - 1 ] != str2 [ i ] ) : NEW_LINE INDENT ans -= 1 NEW_LINE break NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str1 = " l " NEW_LINE str2 = " try " NEW_LINE n = len ( str1 ) NEW_LINE print ( findAnswer ( str1 , str2 , n ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n , x , m = map ( int , input ( ) . split ( ) ) NEW_LINE x_n = x NEW_LINE x_m = int ( input ( ) ) NEW_LINE a = [ ] NEW_LINE for j in range ( m ) : NEW_LINE INDENT b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . append ( b ) NEW_LINE DEDENT ans = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if a [ j ] < x_n : NEW_LINE INDENT x_n = a [ j ] NEW_LINE DEDENT elif a [ j ] > x_m : NEW_LINE INDENT x_m = a [ j ] NEW_LINE DEDENT DEDENT for j in range ( m ) : NEW_LINE INDENT if a [ j ] < x_n : NEW_LINE INDENT y_n = a [ j ] NEW_LINE DEDENT elif a [ j ] > x_m : NEW_LINE INDENT y_n = a [ j ] NEW_LINE DEDENT DEDENT ans = max ( ans , y_n - x_m + 1 ) NEW_LINE print ( ans ) NEW_LINE DEDENT
def bitsAreInAlt mp3 ( n , l , r ) : NEW_LINE INDENT num = n >> ( l - 1 ) NEW_LINE prev = num & 1 NEW_LINE num = num >> 1 NEW_LINE for i in range ( 1 , ( r - l + 1 ) ) : NEW_LINE INDENT curr = num & 1 NEW_LINE if ( curr == prev ) : NEW_LINE INDENT return False NEW_LINE DEDENT prev = curr NEW_LINE num = num >> 1 NEW_LINE DEDENT return True NEW_LINE DEDENT n = 18 NEW_LINE l = 1 NEW_LINE r = 3 NEW_LINE if ( bitsAreInAlt mp3 ( n , l , r ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE f = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if l [ i ] == 1 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT f += 1 NEW_LINE DEDENT DEDENT for i in range ( k ) : NEW_LINE INDENT t , l , r = map ( int , input ( ) . split ( ) ) NEW_LINE if ( l - 1 + r ) % 2 == 0 : NEW_LINE INDENT if f <= count : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT DEDENT elif ( l - 1 + r ) % 2 == 1 and f > count : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT DEDENT
def nth_group ( n ) : NEW_LINE INDENT return n * ( 2 * pow ( n , 2 ) + 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 5 NEW_LINE print ( nth_group ( N ) ) NEW_LINE DEDENT
a = [ [ 0 for i in range ( 102 ) ] for j in range ( 102 ) ] NEW_LINE s = [ [ 0 for i in range ( 102 ) ] for j in range ( 102 ) ] NEW_LINE n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT s [ i ] [ j ] += a [ i ] [ j ] NEW_LINE DEDENT DEDENT s [ 1 ] [ n ] = s [ 1 ] [ n ] + s [ 0 ] [ n ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT s [ i ] [ j ] += s [ i ] [ j ] NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] [ j ] != s [ i ] [ j ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT if ans > 0 : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE s = sum ( l ) NEW_LINE t = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT t += l [ i - 1 ] NEW_LINE if t > k : NEW_LINE INDENT k -= t NEW_LINE DEDENT DEDENT print ( t ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT print ( l [ i ] , end = " " ) NEW_LINE DEDENT print ( s ) NEW_LINE
MAX = 1000000 NEW_LINE def maximumOcc nyElement ( L , R , n ) : NEW_LINE INDENT arr = [ 0 for i in range ( MAX ) ] NEW_LINE maxi = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ L [ i ] ] += 1 NEW_LINE arr [ R [ i ] + 1 ] -= 1 NEW_LINE if ( R [ i ] > maxi ) : NEW_LINE INDENT maxi = R [ i ] NEW_LINE DEDENT DEDENT msum = arr [ 0 ] NEW_LINE ind = 0 NEW_LINE for i in range ( 1 , maxi + 1 ) : NEW_LINE INDENT arr [ i ] += arr [ i - 1 ] NEW_LINE if ( msum < arr [ i ] ) : NEW_LINE INDENT msum = arr [ i ] NEW_LINE ind = i NEW_LINE DEDENT DEDENT return ind NEW_LINE DEDENT L = [ 1 , 4 , 9 , 13 , 21 ] NEW_LINE R = [ 15 , 8 , 12 , 20 , 30 ] NEW_LINE n = len ( L ) NEW_LINE print ( maximumOcc nyElement ( L , R , n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c = 1 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if a [ i ] != a [ i + 1 ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE if m == 0 : NEW_LINE INDENT print ( 0 , 0 ) NEW_LINE DEDENT elif m > n : NEW_LINE INDENT print ( 1 , n ) NEW_LINE DEDENT elif m == n : NEW_LINE INDENT print ( n - 1 , n + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( m , n + 1 ) NEW_LINE DEDENT
def func ( x ) : NEW_LINE INDENT return ( 1 / ( 1 + x * x ) ) ; NEW_LINE DEDENT def calculate ( lower_limit , upper_limit , interval_limit ) : NEW_LINE INDENT global interval_size ; NEW_LINE interval_size = ( upper_limit - lower_limit ) / interval_limit ; NEW_LINE sum = ( func ( lower_limit ) + func ( upper_limit ) ) ; NEW_LINE for i in range ( 1 , interval_limit ) : NEW_LINE INDENT if ( i % 3 == 0 ) : NEW_LINE INDENT sum = sum + 2 * ( lower_limit + i * interval_size ) ; NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + 3 * ( lower_limit + i * interval_size ) ; NEW_LINE DEDENT DEDENT return ( 3 * interval_size / 8 ) * sum ; NEW_LINE DEDENT interval_size = 10 ; NEW_LINE lower_limit = 1 ; NEW_LINE upper_limit = 10 ; NEW_LINE Q = calculate ( lower_limit , upper_limit , interval_limit ) ; NEW_LINE print ( " % . 4 f " % Q ) ; NEW_LINE
N , K , X , Y = map ( int , input ( ) . split ( ) ) NEW_LINE print ( min ( N * X , K * Y ) + max ( N * X , K * Y ) ) NEW_LINE
import math NEW_LINE while True : NEW_LINE INDENT x , h = map ( float , input ( ) . split ( ) ) NEW_LINE if x == 0 : break NEW_LINE a = math . sqrt ( x ** 2 + h ** 2 ) NEW_LINE b = a / 2 NEW_LINE print ( math . sqrt ( b * b + 4 * a * a + 6 * b ) ) NEW_LINE DEDENT
k = int ( input ( ) ) NEW_LINE d = 1 NEW_LINE while True : NEW_LINE INDENT s = str ( k ) NEW_LINE c = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT c += int ( s [ i ] ) NEW_LINE DEDENT d += 1 NEW_LINE if d > 10 : NEW_LINE INDENT print ( 0 ) NEW_LINE break NEW_LINE DEDENT k += 1 NEW_LINE DEDENT
MAX = 1000000 NEW_LINE prime = [ True for i in range ( MAX ) ] NEW_LINE def sieve ( ) : NEW_LINE INDENT p = 2 NEW_LINE while ( p * p < MAX ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT DEDENT def printPrime INF ( n ) : NEW_LINE INDENT for i in range ( n - 7 ) : NEW_LINE INDENT if ( prime [ i ] and prime [ i + 2 ] and prime [ i + 6 ] and prime [ i + 8 ] ) : NEW_LINE INDENT print ( i , " " , i + 2 ) NEW_LINE print ( i + 6 , " " , i + 8 ) NEW_LINE DEDENT DEDENT DEDENT n = 20 NEW_LINE sieve ( ) NEW_LINE printPrime INF ( n ) NEW_LINE
MAX = 1000 NEW_LINE def maxSubsequenceSubstring ( x , y , n , m ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( MAX ) ] for j in range ( MAX ) ] NEW_LINE for i in range ( m + 1 ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT for i in range ( 1 , m + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( x [ j - 1 ] == y [ i - 1 ] ) : NEW_LINE INDENT dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT ans = max ( ans , dp [ i ] [ n ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT x = " ABCD " NEW_LINE y = " BAC output " NEW_LINE n = len ( x ) NEW_LINE m = len ( y ) NEW_LINE print ( maxSubsequenceSubstring ( x , y , n , m ) ) NEW_LINE
def findSum ( n , a , b ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( i % a == 0 or i % b == 0 ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT n = 10 NEW_LINE a = 3 NEW_LINE b = 5 NEW_LINE print ( findSum ( n , a , b ) ) NEW_LINE
s1 = input ( ) NEW_LINE s2 = input ( ) NEW_LINE dict1 = { } NEW_LINE dict2 = { } NEW_LINE for i in s1 : NEW_LINE INDENT if i in dict1 : NEW_LINE INDENT dict1 [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT dict1 [ i ] = 1 NEW_LINE DEDENT DEDENT for i in s2 : NEW_LINE INDENT if i in dict2 : NEW_LINE INDENT dict2 [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT dict2 [ i ] = 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in dict1 : NEW_LINE INDENT if dict2 [ i ] >= 1 : NEW_LINE INDENT ans += 1 NEW_LINE dict2 [ i ] -= 1 NEW_LINE DEDENT DEDENT print ( ans , max ( dict2 ) ) NEW_LINE
MAX = 1000 NEW_LINE sequence = [ 0 ] * MAX NEW_LINE def TwoEckSequence ( ) : NEW_LINE INDENT for i in range ( MAX - 1 ) : NEW_LINE INDENT sequence [ i ] = 0 NEW_LINE DEDENT for i in range ( MAX - 1 ) : NEW_LINE INDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( sequence [ j ] == sequence [ i ] ) : NEW_LINE INDENT sequence [ i + 1 ] = i - j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT def getNthTerm ( n ) : NEW_LINE INDENT return sequence [ n ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT TwoEckSequence ( ) NEW_LINE n = 6 NEW_LINE print ( getNthTerm ( n ) ) NEW_LINE n = 100 NEW_LINE print ( getNthTerm ( n ) ) NEW_LINE DEDENT
MAX = 100000 NEW_LINE sequence = [ 0 ] * ( MAX + 1 ) NEW_LINE def dfs ( ) : NEW_LINE INDENT for i in range ( MAX ) : NEW_LINE INDENT sequence [ i ] = 0 NEW_LINE DEDENT for i in range ( MAX ) : NEW_LINE INDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( sequence [ j ] == sequence [ i ] ) : NEW_LINE INDENT sequence [ i + 1 ] = i - j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT def getCount ( n ) : NEW_LINE INDENT count = 1 NEW_LINE i = n - 1 NEW_LINE while ( sequence [ i + 1 ] != 0 ) : NEW_LINE INDENT count += 1 NEW_LINE i = i - sequence [ i + 1 ] NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 5 NEW_LINE print ( getCount ( n ) ) NEW_LINE n = 11 NEW_LINE print ( getCount ( n ) ) NEW_LINE DEDENT
MAX = 100000 NEW_LINE sequence = [ 0 ] * ( MAX + 1 ) NEW_LINE def TwoEckSequence ( ) : NEW_LINE INDENT for i in range ( MAX ) : NEW_LINE INDENT sequence [ i ] = 0 NEW_LINE DEDENT for i in range ( MAX ) : NEW_LINE INDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( sequence [ j ] == sequence [ i ] ) : NEW_LINE INDENT sequence [ i + 1 ] = i - j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT def getCount ( n ) : NEW_LINE INDENT nthTerm = sequence [ n - 1 ] NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( sequence [ i ] == nthTerm ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT TwoEckSequence ( ) NEW_LINE n = 5 NEW_LINE print ( getCount ( n ) ) NEW_LINE n = 11 NEW_LINE print ( getCount ( n ) ) NEW_LINE DEDENT
def __gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 or b == 0 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT if ( a == b ) : NEW_LINE INDENT return a ; NEW_LINE DEDENT if ( a > b ) : NEW_LINE INDENT return __gcd ( a - b , b ) ; NEW_LINE DEDENT return __gcd ( a , b - a ) ; NEW_LINE DEDENT def nthElement ( a , b , n ) : NEW_LINE INDENT lcm = ( a * b ) / __gcd ( a , b ) ; NEW_LINE l = 1 ; NEW_LINE r = min ( a , b ) * n ; NEW_LINE while ( l <= r ) : NEW_LINE INDENT mid = ( l + r ) >> 1 ; NEW_LINE val = mid // a + mid // b - mid // lcm ; NEW_LINE if ( val == n ) : NEW_LINE INDENT return max ( ( mid // a ) * a , ( mid // b ) * b ) ; NEW_LINE DEDENT if ( val < n ) : NEW_LINE INDENT l = mid + 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT r = mid - 1 ; NEW_LINE DEDENT DEDENT return 0 ; NEW_LINE DEDENT a = 5 ; NEW_LINE b = 3 ; NEW_LINE n = 5 ; NEW_LINE print ( nthElement ( a , b , n ) ) ; NEW_LINE
n = int ( input ( ) ) NEW_LINE if n % 4 == 0 : NEW_LINE INDENT if n % 100 == 0 : NEW_LINE INDENT print ( " A " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " B " ) NEW_LINE DEDENT DEDENT elif n % 400 == 0 : NEW_LINE INDENT if n % 100 == 0 : NEW_LINE INDENT print ( " A " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " B " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if n % 7 == 0 : NEW_LINE INDENT if ( n + 1 ) % 31 != 0 : NEW_LINE INDENT print ( n + 1 ) NEW_LINE DEDENT elif n + 1 == ( n + 1 ) % 7 : NEW_LINE INDENT print ( n + 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n + 3 ) NEW_LINE DEDENT DEDENT elif n % 7 != 0 : NEW_LINE INDENT if n + 1 != ( n + 1 ) % 7 : NEW_LINE INDENT print ( n + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n + 2 ) NEW_LINE DEDENT DEDENT DEDENT
def solve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ 0 ] == " HIT " : NEW_LINE INDENT if s [ 1 ] == " OUT " : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if s [ 1 ] == " OUT " : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT
from math import gcd NEW_LINE def findValue ( x , y , z ) : NEW_LINE INDENT g = gcd ( y , z ) NEW_LINE return ( x * g ) // gcd ( x , g ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT x = 30 NEW_LINE y = 40 NEW_LINE z = 400 NEW_LINE print ( findValue ( x , y , z ) ) NEW_LINE DEDENT
def int int1 ( a , b , c , d , x1 , y1 , z1 ) : NEW_LINE INDENT k = ( - a * x1 - b * y1 - c * z1 - d ) / ( a * a + b * b + c * c ) NEW_LINE x2 = a * k + x1 NEW_LINE y2 = b * k + y1 NEW_LINE z2 = c * k + z1 NEW_LINE print ( " x2 = " , int ( x2 ) , end = " " ) NEW_LINE print ( " y2 = " , int ( y2 ) , end = " " ) NEW_LINE print ( " z2 = " , int ( z2 ) , end = " " ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 1 NEW_LINE b = - 2 NEW_LINE c = 0 NEW_LINE d = 0 NEW_LINE x1 = - 1 NEW_LINE y1 = 3 NEW_LINE z1 = 4 NEW_LINE int1 ( a , b , c , d , x1 , y1 , z1 ) NEW_LINE DEDENT
A = input ( ) NEW_LINE B = input ( ) NEW_LINE if A [ 0 ] == B [ 0 ] and A [ 1 ] == B [ 1 ] : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
import sys NEW_LINE def getMinimumOps ( ar ) : NEW_LINE INDENT n = len ( ar ) NEW_LINE small = min ( ar ) NEW_LINE large = max ( ar ) NEW_LINE dp = [ [ 0 for i in range ( large + 1 ) ] for j in range ( n ) ] NEW_LINE for j in range ( small , large + 1 ) : NEW_LINE INDENT dp [ 0 ] [ j ] = abs ( ar [ 0 ] - j ) NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT minimum = sys . maxsize NEW_LINE for j in range ( small , large + 1 ) : NEW_LINE INDENT minimum = min ( minimum , dp [ i - 1 ] [ j ] ) NEW_LINE dp [ i ] [ j ] = minimum + abs ( ar [ i ] - j ) NEW_LINE DEDENT DEDENT ans = sys . maxsize NEW_LINE for j in range ( small , large + 1 ) : NEW_LINE INDENT ans = min ( ans , dp [ n - 1 ] [ j ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT ar = [ 1 , 2 , 1 , 4 , 3 ] NEW_LINE print ( getMinimumOps ( ar ) ) NEW_LINE DEDENT
PI = 3.14159265 NEW_LINE def area_leaf ( a ) : NEW_LINE INDENT return ( a * a * ( PI / 2 - 1 ) ) NEW_LINE DEDENT a = 7 NEW_LINE print ( area_leaf ( a ) ) NEW_LINE
def removeAlternate ( n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( n % 2 == 0 ) : NEW_LINE INDENT return 2 * removeAlternate ( n // 2 ) - 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 2 * removeAlternate ( ( ( n - 1 ) // 2 ) ) + 1 NEW_LINE DEDENT DEDENT n = 5 NEW_LINE print ( removeAlternate ( n ) ) NEW_LINE n = 10 NEW_LINE print ( removeAlternate ( n ) ) NEW_LINE
def check ( n , m ) : NEW_LINE INDENT if ( n == 2 or m == 2 or n % m == 0 ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT m = 3 NEW_LINE n = 9 NEW_LINE check ( n , m ) NEW_LINE DEDENT
from sys import stdin , stdout NEW_LINE import math NEW_LINE T = int ( stdin . readline ( ) ) NEW_LINE for i in range ( T ) : NEW_LINE INDENT M , N , K = map ( int , stdin . readline ( ) . split ( ) ) NEW_LINE A = list ( map ( int , stdin . readline ( ) . split ( ) ) ) NEW_LINE S = 0 NEW_LINE cnt = 0 NEW_LINE for a in A : NEW_LINE INDENT cnt += a // M NEW_LINE if cnt > N : NEW_LINE INDENT print ( " NO " ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if cnt < N : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT if ( cnt == N // 2 ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def negProdSubArr ( arr , n ) : NEW_LINE INDENT positive = 1 NEW_LINE negative = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] > 0 ) : NEW_LINE INDENT arr [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT arr [ i ] = - 1 NEW_LINE DEDENT if ( i > 0 ) : NEW_LINE INDENT arr [ i ] *= arr [ i - 1 ] NEW_LINE DEDENT DEDENT if ( arr [ i ] == 1 ) : NEW_LINE INDENT positive += 1 NEW_LINE DEDENT else : NEW_LINE INDENT negative += 1 NEW_LINE DEDENT DEDENT return ( positive * negative ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 5 , - 4 , - 3 , 2 , - 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( negProdSubArr ( arr , n ) ) NEW_LINE DEDENT
def negProdSubArr ( arr , n ) : NEW_LINE INDENT positive = 1 NEW_LINE negative = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] > 0 ) : NEW_LINE INDENT arr [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT arr [ i ] = - 1 NEW_LINE DEDENT if ( i > 0 ) : NEW_LINE INDENT arr [ i ] *= arr [ i - 1 ] NEW_LINE DEDENT DEDENT if ( arr [ i ] == 1 ) : NEW_LINE INDENT positive += 1 NEW_LINE DEDENT else : NEW_LINE INDENT negative += 1 NEW_LINE DEDENT DEDENT return ( positive * negative ) NEW_LINE DEDENT def posProdSubArr ( arr , n ) : NEW_LINE INDENT total = ( n * ( n + 1 ) ) // 2 NEW_LINE cntNeg = negProdSubArr ( arr , n ) NEW_LINE return ( total - cntNeg ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 5 , - 4 , - 3 , 2 , - 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( posProdSubArr ( arr , n ) ) NEW_LINE DEDENT
for s in [ * open ( 0 ) ] [ 1 : ] : NEW_LINE INDENT n , k = map ( int , s . split ( ) ) ; a = 0 NEW_LINE while a <= k : a += 1 ; k *= 2 NEW_LINE print ( sum ( ( a - 1 ) // k for a in range ( 1 , n + 1 ) ) ) NEW_LINE DEDENT
import math NEW_LINE def intersection ( x , y , a , b ) : NEW_LINE INDENT g = math . gcd ( x , y ) NEW_LINE if g == 1 : NEW_LINE INDENT return x + y NEW_LINE DEDENT return intersection ( x // g , y // g , a , b ) NEW_LINE DEDENT x , y , a , b = map ( int , input ( ) . split ( ) ) NEW_LINE print ( intersection ( x , y , a , b ) ) NEW_LINE
def minRemove ( arr , n ) : NEW_LINE INDENT LIS = [ 0 ] * n NEW_LINE len = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT LIS [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) : NEW_LINE INDENT LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 ) NEW_LINE DEDENT DEDENT len = max ( len , LIS [ i ] ) NEW_LINE DEDENT return n - len NEW_LINE DEDENT arr = [ 1 , 2 , 6 , 5 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minRemove ( arr , n ) ) NEW_LINE
def print_max ( a , n , k ) : NEW_LINE INDENT max_ INF = 1000 NEW_LINE s = [ ] NEW_LINE s . append ( 0 ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT while ( len ( s ) != 0 and a [ s [ - 1 ] ] < a [ i ] ) : NEW_LINE INDENT max_ INF = 1000 NEW_LINE s . pop ( ) NEW_LINE DEDENT s . append ( i ) NEW_LINE DEDENT while ( len ( s ) != 0 ) : NEW_LINE INDENT max_ INF = 1000 NEW_LINE s . pop ( ) NEW_LINE DEDENT j = 0 NEW_LINE for i in range ( n - k + 1 ) : NEW_LINE INDENT while ( j < i or max_ INF < i + k - 1 ) : NEW_LINE INDENT j += 1 NEW_LINE DEDENT print ( a [ j ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT a = [ 9 , 7 , 2 , 4 , 6 , 8 , 2 , 1 , 5 ] NEW_LINE n = len ( a ) NEW_LINE k = 3 NEW_LINE print_max ( a , n , k ) NEW_LINE
def compute ( ) : NEW_LINE INDENT ans = max ( digit_sum ( a ) * digit_sum ( b ) for a , b in zip ( range ( 1 , 101 ) , range ( 1 , 100 ) ) ) NEW_LINE return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def countDistinct ( win , k ) : NEW_LINE INDENT dist_count = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT j = 0 NEW_LINE for j in range ( i ) : NEW_LINE INDENT if ( win [ i ] == win [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( j == i ) : NEW_LINE INDENT dist_count += 1 NEW_LINE DEDENT DEDENT return dist_count NEW_LINE DEDENT def countDistinct ( arr , n , k ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( countDistinct ( arr , i , n - k + 1 ) ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 1 , 3 , 4 , 2 , 3 ] NEW_LINE k = 4 NEW_LINE countDistinct ( arr , len ( arr ) , k ) NEW_LINE DEDENT
def evenNumSubstring ( str ) : NEW_LINE INDENT l = len ( str ) NEW_LINE count = 0 NEW_LINE for i in range ( l ) : NEW_LINE INDENT temp = ord ( str [ i ] ) - ord ( '0' ) NEW_LINE if ( temp % 2 == 0 ) : NEW_LINE INDENT count += ( i + 1 ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = "1234" NEW_LINE print ( evenNumSubstring ( str ) ) NEW_LINE DEDENT
def countWays ( index , cnt , dp , n , m , k ) : NEW_LINE INDENT if ( index == n ) : NEW_LINE INDENT if ( cnt == k ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT if ( dp [ index ] [ cnt ] != - 1 ) : NEW_LINE INDENT return dp [ index ] [ cnt ] NEW_LINE DEDENT ans = 0 NEW_LINE ans += countWays ( index + 1 , cnt , dp , n , m , k ) NEW_LINE ans += ( m - 1 ) * countWays ( index + 1 , cnt + 1 , dp , n , m , k ) NEW_LINE dp [ index ] [ cnt ] = ans NEW_LINE return dp [ index ] [ cnt ] NEW_LINE DEDENT n = 3 NEW_LINE m = 3 NEW_LINE k = 2 NEW_LINE dp = [ [ - 1 for i in range ( max ( n , k ) ) ] for j in range ( max ( n , k ) ) ] NEW_LINE print ( m * countWays ( 1 , 0 , dp , n , m , k ) ) NEW_LINE
from math import sqrt NEW_LINE def getSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , int ( sqrt ( n ) ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT if ( n // i == i ) : NEW_LINE INDENT sum = sum + i NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + i NEW_LINE sum = sum + ( n // i ) NEW_LINE DEDENT DEDENT DEDENT return sum - n NEW_LINE DEDENT def printAlarms ( n ) : NEW_LINE INDENT print ( n ) NEW_LINE s = set ( ) NEW_LINE s . add ( n ) NEW_LINE next = 0 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT n = getSum ( n ) NEW_LINE if n in s : NEW_LINE INDENT print ( " Repeats with " , n ) NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Repeats with " , n ) NEW_LINE break NEW_LINE DEDENT DEDENT print ( n , end = " " ) NEW_LINE s . add ( n ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT printAlarms ( 12 ) NEW_LINE DEDENT
n , n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE d = { } NEW_LINE for i in a : NEW_LINE INDENT if i in d : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] = 2 NEW_LINE DEDENT DEDENT x = sorted ( d . items ( ) , key = lambda e : ( len ( e [ 1 ] ) , e [ 0 ] ) ) NEW_LINE print ( * x [ 1 ] ) NEW_LINE
def reverseArray ( arr , n ) : NEW_LINE INDENT for i in range ( n // 2 ) : NEW_LINE INDENT arr [ i ] , arr [ ( n + ~ i + 1 ) + ~ 1 + 1 ] = arr [ ( n + ~ i + 1 ) + ~ 1 + 1 ] , arr [ ( n + ~ i + 1 ) + ~ 1 ] NEW_LINE DEDENT DEDENT arr = [ 5 , 3 , 7 , 2 , 1 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE reverseArray ( arr , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT
def printSeriesSum ( N ) : NEW_LINE INDENT sum = 0 NEW_LINE a = 1 NEW_LINE cnt = 0 NEW_LINE flag = True NEW_LINE sum += a NEW_LINE while cnt < N : NEW_LINE INDENTcommon = 0 NEW_LINE if flag == True : NEW_LINE INDENTcommon = a * 2 NEW_LINE sum +=common NEW_LINE flag = not flag NEW_LINE DEDENT else : NEW_LINE INDENTcommon = a * 3 / 2 NEW_LINE sum +=common NEW_LINE flag = not flag NEW_LINE DEDENT a =common NEW_LINE cnt += 1 NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 8 NEW_LINE printSeriesSum ( N ) NEW_LINE DEDENT
import math NEW_LINE for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE g = math . gcd ( a , b ) NEW_LINE a //= g NEW_LINE b //= g NEW_LINE if ( a == b ) : NEW_LINE INDENT print ( 1 , 0 ) NEW_LINE DEDENT elif ( a % 2 == 0 or b % 2 == 0 ) : NEW_LINE INDENT print ( 1 , 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 , 1 ) NEW_LINE DEDENT DEDENT
from math import sqrt NEW_LINE sz = 10 ** 5 NEW_LINE isPrime = [ True for i in range ( sz + 1 ) ] NEW_LINE def sieve ( ) : NEW_LINE INDENT isPrime [ 0 ] = isPrime [ 1 ] = False NEW_LINE for i in range ( 2 , int ( sqrt ( sz ) ) + 1 , 1 ) : NEW_LINE INDENT if ( isPrime [ i ] ) : NEW_LINE INDENT for j in range ( i * i , sz , i ) : NEW_LINE INDENT isPrime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def minDifference ( L , R ) : NEW_LINE INDENT fst = 0 NEW_LINE for i in range ( L , R + 1 , 1 ) : NEW_LINE INDENT if ( isPrime [ i ] ) : NEW_LINE INDENT fst = i NEW_LINE break NEW_LINE DEDENT DEDENT snd = 0 NEW_LINE for i in range ( fst + 1 , R + 1 , 1 ) : NEW_LINE INDENT if ( isPrime [ i ] ) : NEW_LINE INDENT snd = i NEW_LINE break NEW_LINE DEDENT DEDENT if ( snd == 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT diff = snd - fst NEW_LINE left = snd + 1 NEW_LINE right = R NEW_LINE for i in range ( left , right + 1 , 1 ) : NEW_LINE INDENT if ( isPrime [ i ] ) : NEW_LINE INDENT if ( i - snd <= diff ) : NEW_LINE INDENT fst = snd NEW_LINE snd = i NEW_LINE diff = snd - fst NEW_LINE DEDENT DEDENT DEDENT return diff NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT sieve ( ) NEW_LINE L = 21 NEW_LINE R = 50 NEW_LINE print ( minDifference ( L , R ) ) NEW_LINE DEDENT
def getMaxLength ( arr , n ) : NEW_LINE INDENT start = 0 NEW_LINE preCnt = 0 NEW_LINE while ( start < n and arr [ start ] == 1 ) : NEW_LINE INDENT preCnt += 1 NEW_LINE start += 1 NEW_LINE DEDENT end = n - 1 NEW_LINE suffCnt = 0 NEW_LINE while ( end >= 0 and arr [ end ] == 1 ) : NEW_LINE INDENT suffCnt += 1 NEW_LINE end -= 1 NEW_LINE DEDENT if ( start > end ) : NEW_LINE INDENT return n NEW_LINE DEDENT midCnt = 0 NEW_LINE result = 0 NEW_LINE for i in range ( start , end + 1 ) : NEW_LINE INDENT if ( arr [ i ] == 1 ) : NEW_LINE INDENT midCnt += 1 NEW_LINE result = max ( result , midCnt ) NEW_LINE DEDENT else : NEW_LINE INDENT midCnt = 0 NEW_LINE DEDENT DEDENT return max ( result , preCnt + suffCnt ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( getMaxLength ( arr , n ) ) NEW_LINE DEDENT
d , n = map ( int , input ( ) . split ( ) ) NEW_LINE c = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE cum1 = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y , z = map ( int , input ( ) . split ( ) ) NEW_LINE cum1 [ i + 1 ] = cum1 [ i ] + z NEW_LINE DEDENT cum1 [ - 1 ] = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT cum1 [ i ] = cum1 [ i - 1 ] + c [ i ] NEW_LINE DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT cum1 [ i + 1 ] = cum1 [ i ] + c [ i + 1 ] NEW_LINE DEDENT mx = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT d = cum1 [ i + 1 ] NEW_LINE for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if cum1 [ j ] > cum1 [ i ] + d : NEW_LINE INDENT mx = cum1 [ j ] + d NEW_LINE DEDENT DEDENT DEDENT print ( mx ) NEW_LINE
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 0 NEW_LINE while i < n - 1 and s [ i ] <= s [ i + 1 ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT print ( ' YES ' ) NEW_LINE print ( i + 1 , i + 2 ) NEW_LINE
def sqroot ( s ) : NEW_LINE INDENT pSq = 0 NEW_LINE N = 0 NEW_LINE i = ( s - pSq ) NEW_LINE while ( i > 0 ) : NEW_LINE INDENT j = 1 NEW_LINE while ( j < i ) : NEW_LINE INDENT if ( j * j == i ) : NEW_LINE INDENT pSq = i NEW_LINE N = j NEW_LINE break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if ( pSq > 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT d = s - pSq NEW_LINE P = d / ( 2.0 * N ) NEW_LINE A = N + P NEW_LINE sqrt_of_s = A - ( ( P * P ) / ( 2.0 * A ) ) NEW_LINE return sqrt_of_s NEW_LINE DEDENT num = 9.2345 NEW_LINE sqroot_of_num = sqroot ( num ) NEW_LINE print ( " Square root of " , num , " = " , round ( sqroot_of_num * 100000.0 ) / 100000.0 ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE l = 0 NEW_LINE r = n NEW_LINE while l + 1 < n and r > - 1 : NEW_LINE INDENT m = ( l + r ) // 2 NEW_LINE if a [ m ] > m : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = 1 NEW_LINE DEDENT l = m NEW_LINE r = m NEW_LINE DEDENT if l == 0 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
import math NEW_LINE while True : NEW_LINE INDENT r , n = map ( int , input ( ) . split ( ) ) NEW_LINE if r == 0 : break NEW_LINE lst = [ 0 ] * 40 NEW_LINE for _ in range ( n ) : NEW_LINE INDENT x , y , h = map ( int , input ( ) . split ( ) ) NEW_LINE lst [ max ( h , r ) ] = h NEW_LINE DEDENT lst . sort ( ) NEW_LINE ans = 10 ** 20 NEW_LINE for i in range ( 20 ) : NEW_LINE INDENT x1 , y1 , h1 = lst [ i ] NEW_LINE x2 , y2 , h2 = lst [ i + 1 ] NEW_LINE r = x1 + 20 NEW_LINE x3 , y3 = lst [ i + 1 ] NEW_LINE r = x2 + 20 NEW_LINE x4 , y4 = lst [ i + 1 ] NEW_LINE if r >= r : NEW_LINE INDENT ans = min ( ans , ( y3 - r ) ** 2 ) NEW_LINE DEDENT if r >= r - 20 : NEW_LINE INDENT ans = min ( ans , ( y4 - r ) ** 2 ) NEW_LINE DEDENT DEDENT print ( " % .10f : % .10f " % ( ans , ans ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = sorted ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] <= ans + 1 ) : NEW_LINE INDENT ans = i + 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def to_number ( n ) : NEW_LINE INDENT res = 0 NEW_LINE for d in n : NEW_LINE INDENT res = res * 10 + d NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT print ( to_number ( n ) ) NEW_LINE DEDENT DEDENT
def maxAlternateSum ( arr , n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT return arr [ 0 ] NEW_LINE DEDENT dec = [ 0 ] * n NEW_LINE inc = [ 0 ] * n NEW_LINE dec [ 0 ] = inc [ 0 ] = arr [ 0 ] NEW_LINE flag = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if ( arr [ j ] > arr [ i ] ) : NEW_LINE INDENT dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] ) NEW_LINE flag = 1 NEW_LINE DEDENT elif ( arr [ j ] < arr [ i ] and flag == 1 ) : NEW_LINE INDENT inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] ) NEW_LINE DEDENT DEDENT DEDENT result = - 10 ** 9 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( result < inc [ i ] ) : NEW_LINE INDENT result = inc [ i ] NEW_LINE DEDENT if ( result < dec [ i ] ) : NEW_LINE INDENT result = dec [ i ] NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT arr = [ 8 , 2 , 3 , 5 , 7 , 9 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Maximum sum = " , maxAlternateSum ( arr , n ) ) NEW_LINE
def generateArr ( arr , n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT prev = arr [ 0 ] NEW_LINE arr [ 0 ] = arr [ 0 ] & arr [ 1 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT curr = arr [ i ] NEW_LINE arr [ i ] = prev & arr [ i + 1 ] NEW_LINE prev = curr NEW_LINE DEDENT arr [ n - 1 ] = prev & arr [ n - 1 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE generateArr ( arr , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT
def ReplaceElements ( arr , n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT prev = arr [ 0 ] NEW_LINE arr [ 0 ] = arr [ 0 ] ^ arr [ 1 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT curr = arr [ i ] NEW_LINE arr [ i ] = prev ^ arr [ i + 1 ] NEW_LINE prev = curr NEW_LINE DEDENT arr [ n - 1 ] = prev ^ arr [ n - 1 ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE ReplaceElements ( arr , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT
def ReplaceElements ( arr , n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT prev = arr [ 0 ] NEW_LINE arr [ 0 ] = arr [ 0 ] + arr [ 1 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT curr = arr [ i ] NEW_LINE arr [ i ] = prev + arr [ i + 1 ] NEW_LINE prev = curr NEW_LINE DEDENT arr [ n - 1 ] = prev + arr [ n - 1 ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE ReplaceElements ( arr , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT
def countTriplets ( A , B , C ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , A + 1 ) : NEW_LINE INDENT for j in range ( 1 , B + 1 ) : NEW_LINE INDENT for k in range ( 1 , C + 1 ) : NEW_LINE INDENT if ( i * k > j * j ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A , B , C = 3 , 2 , 2 NEW_LINE print ( countTriplets ( A , B , C ) ) NEW_LINE DEDENT
from math import sqrt NEW_LINE MAX = 100000 NEW_LINE prime = [ True for i in range ( MAX + 1 ) ] NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT for p in range ( 2 , int ( sqrt ( MAX + 1 ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def smallestPrime ( d ) : NEW_LINE INDENT l = int ( sqrt ( d - 1 ) ) NEW_LINE r = int ( sqrt ( d ) ) - 1 NEW_LINE for i in range ( l , r + 1 , 1 ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def largestPrime ( d ) : NEW_LINE INDENT l = int ( sqrt ( 10 ) ) NEW_LINE r = int ( sqrt ( 10 ) ) - 1 NEW_LINE for i in range ( r , l + 1 , - 1 ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE queries = [ 2 , 5 ] NEW_LINE q = len ( queries ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT print ( smallestPrime ( queries [ i ] ) , largestPrime ( queries [ i ] ) ) NEW_LINE DEDENT DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE d = [ int ( input ( ) ) for _ in range ( n ) ] NEW_LINE c = [ int ( input ( ) ) for _ in range ( m ) ] NEW_LINE dp = [ [ 10 ** 9 ] * n for _ in range ( m ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT dp [ i ] [ i ] = 0 NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ i ] [ j - 1 ] + d [ j ] * c [ i ] ) NEW_LINE DEDENT DEDENT print ( dp [ m - 1 ] [ 0 ] ) NEW_LINE
n , k , x = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT if sum > k : NEW_LINE INDENT print ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( sum - k + 1 ) NEW_LINE DEDENT
n , m , a , d = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE f , s = 0 , 0 NEW_LINE l1 = l [ : m ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT f += l [ i ] // a NEW_LINE l1 = l [ i ] % a NEW_LINE DEDENT f += ( n - f ) // ( a + 1 ) NEW_LINE l2 = l [ m : ] NEW_LINE for i in range ( m - 1 ) : NEW_LINE INDENT l2 = l2 + l [ i + 1 ] // a NEW_LINE l2 = l2 + l [ i + 1 ] // a + 1 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if l2 [ i ] > n : NEW_LINE INDENT break NEW_LINE DEDENT res += ( n - l2 [ i ] ) // ( a + 1 ) NEW_LINE DEDENT print ( res ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE print ( ( n + 1 ) * ( n // 2 + ( n % 2 ) ) - ( n // 2 + ( n % 2 ) * ( n // 2 + 1 ) ) NEW_LINE DEDENT
s = input ( ) NEW_LINE count = 0 NEW_LINE for c in s : NEW_LINE INDENT if c % 2 != 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if count == 0 : NEW_LINE INDENT print ( ' First ' ) NEW_LINE DEDENT else : NEW_LINE INDENT if count % 2 == 1 : NEW_LINE INDENT print ( ' Second ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' First ' ) NEW_LINE DEDENT DEDENT
def reverse ( n ) : NEW_LINE INDENT rev = 0 NEW_LINE while ( n != 0 ) : NEW_LINE INDENT rev = ( rev * 10 ) + ( n % 10 ) NEW_LINE n = n // 10 NEW_LINE DEDENT return rev NEW_LINE DEDENT def getSum ( n ) : NEW_LINE INDENT n = n [ : : - 1 ] NEW_LINE sumOdd = 0 NEW_LINE sumEven = 0 NEW_LINE c = 1 NEW_LINE while ( n != 0 ) : NEW_LINE INDENT if ( c % 2 == 0 ) : NEW_LINE INDENT sumEven += n % 10 NEW_LINE DEDENT else : NEW_LINE INDENT sumOdd += n % 10 NEW_LINE DEDENT n = n // 10 NEW_LINE c += 1 NEW_LINE DEDENT print ( " Sum odd = " , sumOdd ) NEW_LINE print ( " Sum even = " , sumEven ) NEW_LINE DEDENT n = 457892 NEW_LINE getSum ( n ) NEW_LINE
def disp ( row_no , block ) : NEW_LINE INDENT print ( row_no * block ) NEW_LINE DEDENT def row ( ht , h ) : NEW_LINE INDENT return ht // h NEW_LINE DEDENT def calculate ( l , w , h , a , ht ) : NEW_LINE INDENT no_ block = ( 4 * a ) // l NEW_LINE row_no = 0 NEW_LINE if ( h < w ) : NEW_LINE INDENT row_no = row ( ht , w ) NEW_LINE DEDENT else : NEW_LINE INDENT row_no = row ( ht , h ) NEW_LINE DEDENT disp ( row_no , no_ block ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT l = 50 NEW_LINE w = 20 NEW_LINE h = 35 NEW_LINE a = 700 NEW_LINE ht = 140 NEW_LINE calculate ( l , w , h , a , ht ) NEW_LINE DEDENT
bin = [ "000" , "001" , "010" , "011" , "100" , "101" , "110" , "111" ] ; NEW_LINE def maxFreq ( s ) : NEW_LINE INDENT binary = " " ; NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT binary += bin [ ord ( s [ i ] ) - ord ( '0' ) ] ; NEW_LINE DEDENT binary = binary [ : : - 1 ] ; NEW_LINE count = 1 ; NEW_LINE prev = - 1 ; NEW_LINE j = 0 ; NEW_LINE for i in range ( len ( binary ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( binary [ i ] == '1' ) : NEW_LINE INDENT count = max ( count , j - prev ) ; NEW_LINE prev = j ; NEW_LINE DEDENT DEDENT return count ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT octal = "13" ; NEW_LINE print ( maxFreq ( octal ) ) ; NEW_LINE DEDENT
def isVowel ( c ) : NEW_LINE INDENT return ( c == ' a ' or c == ' e ' or c == ' i ' or c == ' o ' or c == ' u ' ) ; NEW_LINE DEDENT def encryptString ( s , n , k ) : NEW_LINE INDENT cv = [ 0 ] * n ; NEW_LINE cc = [ 0 ] * n ; NEW_LINE if ( isVowel ( s [ 0 ] ) ) : NEW_LINE INDENT cv [ 0 ] = 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT cc [ 0 ] = 1 ; NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT cv [ i ] = cv [ i - 1 ] + ( isVowel ( s [ i ] ) ) ; NEW_LINE cc [ i ] = cc [ i - 1 ] + ( isVowel ( s [ i ] ) ) ; NEW_LINE DEDENT ans = " " ; NEW_LINE prod = cc [ k - 1 ] * cv [ k - 1 ] ; NEW_LINE ans += str ( prod ) ; NEW_LINE for i in range ( k , len ( s ) ) : NEW_LINE INDENT ans = ( cc [ i ] - cc [ i - k ] ) * ( cv [ i ] - cv [ i - k ] ) ; NEW_LINE ans += str ( ans ) ; NEW_LINE DEDENT return ans ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " hello " ; NEW_LINE n = len ( s ) ; NEW_LINE k = 2 ; NEW_LINE print ( encryptString ( s , n , k ) ) ; NEW_LINE DEDENT
def harmonicMean ( arr , freq , n ) : NEW_LINE INDENT sum = 0 NEW_LINE frequency_sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + freq [ i ] / arr [ i ] NEW_LINE frequency_sum = frequency_sum + freq [ i ] NEW_LINE DEDENT return ( frequency_sum / sum ) NEW_LINE DEDENT num = [ 13 , 14 , 15 , 16 , 17 ] NEW_LINE freq = [ 2 , 5 , 13 , 7 , 3 ] NEW_LINE n = len ( num ) NEW_LINE print ( harmonicMean ( num , freq , n ) ) NEW_LINE
from math import pi NEW_LINE def polyarea ( n , a ) : NEW_LINE INDENT if ( a < 0 and n < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT A = ( a * a * n ) / ( 4 * tan ( ( 180 / n ) * pi / 180 ) ) NEW_LINE return A NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a , n = 9 , 6 NEW_LINE print ( ' { 0 : . 3 f } ' . format ( polyarea ( n , a ) ) ) NEW_LINE DEDENT
import math NEW_LINE def lcm ( a , b ) : NEW_LINE INDENT return ( a // math . gcd ( a , b ) * b ) NEW_LINE DEDENT def getMinValue ( c ) : NEW_LINE INDENT ans = float ( " inf " ) NEW_LINE for i in range ( 1 , int ( math . sqrt ( c ) ) + 1 ) : NEW_LINE INDENT if ( c % i == 0 and lcm ( i , c // i ) == c ) : NEW_LINE INDENT ans = min ( ans , max ( i , c // i ) ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT c = 6 NEW_LINE print ( getMinValue ( c ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT m , n , m , n = map ( int , input ( ) . split ( ) ) NEW_LINE if m == 0 : break NEW_LINE p = [ int ( input ( ) ) for i in range ( m ) ] NEW_LINE a = 0 NEW_LINE for i in range ( n - m + 1 ) : NEW_LINE INDENT j = i + 1 NEW_LINE a = max ( a , p [ j ] - p [ i ] ) NEW_LINE DEDENT print ( a ) NEW_LINE DEDENT
from itertools import accumulate NEW_LINE from collections import deque NEW_LINE from collections import defaultdict NEW_LINE from itertools import permutations NEW_LINE import heapq NEW_LINE import bisect NEW_LINE from math import factorial NEW_LINE import sys NEW_LINE import operator NEW_LINE from pprint import pprint NEW_LINE sys . setrecursionlimit ( 10 ** 8 ) NEW_LINE input = sys . stdin . readline NEW_LINE def main ( ) : NEW_LINE INDENT * A , = map ( int , input ( ) . split ( ) ) NEW_LINE M = int ( input ( ) ) NEW_LINE B = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE if abs ( A [ 0 ] ) < M : NEW_LINE INDENT print ( " inf " ) NEW_LINE exit ( ) NEW_LINE DEDENT for i in range ( 1 , M ) : NEW_LINE INDENT if abs ( A [ 0 ] ) < M and i != max ( A [ 0 ] , A [ 1 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT if ans >= B [ 0 ] : NEW_LINE INDENT print ( " inf " ) NEW_LINE exit ( ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( reverse = True ) NEW_LINE ans = a [ 0 ] + 1 , a [ - 1 ] + 1 NEW_LINE print ( ans [ 0 ] , ans [ 1 ] ) NEW_LINE DEDENT
from math import log NEW_LINE def findIndex ( n ) : NEW_LINE INDENT fibo = 2.078087F * log ( n ) + 1.672276F NEW_LINE return round ( fibo ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 21 NEW_LINE print ( findIndex ( n ) ) NEW_LINE DEDENT
def isSmaller ( str1 , str2 ) : NEW_LINE INDENT n1 = len ( str1 ) NEW_LINE n2 = len ( str2 ) NEW_LINE if ( n1 < n2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n2 < n1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( n1 ) : NEW_LINE INDENT if ( str1 [ i ] < str2 [ i ] ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif ( str1 [ i ] > str2 [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def findDiff ( str1 , str2 ) : NEW_LINE INDENT if ( isSmaller ( str1 , str2 ) ) : NEW_LINE INDENT t = str1 NEW_LINE str1 = str2 NEW_LINE str2 = t NEW_LINE DEDENT str = " " NEW_LINE n1 = len ( str1 ) NEW_LINE n2 = len ( str2 ) NEW_LINE str1 = str1 [ : : - 1 ] NEW_LINE str2 = str2 [ : : - 1 ] NEW_LINE carry = 0 NEW_LINE for i in range ( n2 ) : NEW_LINE INDENT sub = ( ord ( str1 [ i ] ) - ord ( '0' ) ) - ( ord ( str2 [ i ] ) - ord ( '0' ) ) NEW_LINE if ( sub < 0 ) : NEW_LINE INDENT sub = sub + 10 NEW_LINE carry = 1 NEW_LINE DEDENT else : NEW_LINE INDENT carry = 0 NEW_LINE DEDENT str = str + chr ( sub + ord ( '0' ) ) NEW_LINE DEDENT for i in range ( n2 , n1 ) : NEW_LINE INDENT sub = ( ord ( str1 [ i ] ) - ord ( '0' ) ) - carry NEW_LINE if ( sub < 0 ) : NEW_LINE INDENT sub = sub + 10 NEW_LINE carry = 1 NEW_LINE DEDENT else : NEW_LINE INDENT carry = 0 NEW_LINE DEDENT str = str + chr ( sub + ord ( '0' ) ) NEW_LINE DEDENT return str NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str1 = "978" NEW_LINE str2 = "12
def minSwaps ( s1 , s2 ) : NEW_LINE INDENT c0 = 0 NEW_LINE c1 = 0 NEW_LINE for i in range ( len ( s1 ) ) : NEW_LINE INDENT if ( s1 [ i ] == '0' and s2 [ i ] == '1' ) : NEW_LINE INDENT c0 += 1 NEW_LINE DEDENT elif ( s1 [ i ] == '1' and s2 [ i ] == '0' ) : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT DEDENT ans = c0 // 2 + c1 // 2 NEW_LINE if ( c0 % 2 == 0 and c1 % 2 == 0 ) : NEW_LINE INDENT return ans NEW_LINE DEDENT elif ( ( c0 + c1 ) % 2 == 0 ) : NEW_LINE INDENT return ans + 2 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s1 = "0011" NEW_LINE s2 = "1111" NEW_LINE ans = minSwaps ( s1 , s2 ) NEW_LINE print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = x [ 0 ] NEW_LINE c = x [ 1 ] NEW_LINE for i in range ( 2 * n - 1 ) : NEW_LINE INDENT c += x [ i ] NEW_LINE l = x [ i + 1 ] NEW_LINE r = x [ i ] + c NEW_LINE while l < r : NEW_LINE INDENT x [ l ] = max ( x [ l ] , x [ l + 1 ] ) NEW_LINE l += 1 NEW_LINE DEDENT ans = max ( ans , c ) NEW_LINE DEDENT print ( ans - ans ) NEW_LINE
def solve ( s ) : NEW_LINE INDENT r = 0 NEW_LINE l = 0 NEW_LINE r = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] == ' a ' or s [ i ] == ' z ' : NEW_LINE INDENT r += 1 NEW_LINE DEDENT elif s [ i ] == ' ^ ' : NEW_LINE INDENT if r == 0 : NEW_LINE INDENT return ' k ' NEW_LINE DEDENT l += 1 NEW_LINE DEDENT DEDENT if s [ len ( s ) - 1 ] == ' . ' : NEW_LINE INDENT if r == 0 : NEW_LINE INDENT return ' k ' NEW_LINE DEDENT l += 1 NEW_LINE DEDENT if s [ len ( s ) - 1 ] == ' ^ ' : NEW_LINE INDENT if l == 0 : NEW_LINE INDENT return ' k ' NEW_LINE DEDENT r += 1 NEW_LINE DEDENT return ' r ' if r == 0 else ' l ' NEW_LINE DEDENT print ( solve ( input ( ) ) ) NEW_LINE
def normalSieve ( n ) : NEW_LINE INDENT prime = [ False ] * ( n // 2 ) NEW_LINE for i in range ( 3 , int ( n ** ( 1 / 2 ) ) , 2 ) : NEW_LINE INDENT if ( prime [ i // 2 ] == False ) : NEW_LINE INDENT for j in range ( i * i , n , i * 2 ) : NEW_LINE INDENT prime [ j // 2 ] = True NEW_LINE DEDENT DEDENT DEDENT print ( 2 , end = " " ) NEW_LINE for i in range ( 3 , n , 2 ) : NEW_LINE INDENT if ( prime [ i // 2 ] == False ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT DEDENT n = 100 NEW_LINE normalSieve ( n ) NEW_LINE
word = input ( ) NEW_LINE if word [ 0 ] . islower ( ) and word [ 1 : ] . isupper ( ) : NEW_LINE INDENT print ( word [ 0 ] . upper ( ) + word [ 1 : ] . lower ( ) ) NEW_LINE DEDENT elif word [ 0 ] . islower ( ) and len ( word ) == 1 : NEW_LINE INDENT print ( word . upper ( ) ) NEW_LINE DEDENT elif word . isupper ( ) : NEW_LINE INDENT print ( word . lower ( ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( word ) NEW_LINE DEDENT
def frequencyOfSmallest ( n , arr ) : NEW_LINE INDENT mn = arr [ 0 ] NEW_LINE freq = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] < mn ) : NEW_LINE INDENT mn = arr [ i ] NEW_LINE freq = 1 NEW_LINE DEDENT elif ( arr [ i ] == mn ) : NEW_LINE INDENT freq += 1 NEW_LINE DEDENT DEDENT return freq NEW_LINE DEDENT N = 5 NEW_LINE arr = [ 3 , 2 , 3 , 4 , 4 ] NEW_LINE print ( frequencyOfSmallest ( N , arr ) ) NEW_LINE
def isSubArray ( A , B , n , m ) : NEW_LINE INDENT i = 0 NEW_LINE j = 0 NEW_LINE while ( i < n and j < m ) : NEW_LINE INDENT if ( A [ i ] == B [ j ] ) : NEW_LINE INDENT i += 1 NEW_LINE j += 1 NEW_LINE if ( j == m ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT i = i - j + 1 NEW_LINE j = 0 NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT A = [ 2 , 3 , 0 , 5 , 1 , 1 , 2 ] NEW_LINE n = len ( A ) NEW_LINE B = [ 3 , 0 , 5 , 1 ] NEW_LINE m = len ( B ) NEW_LINE if ( isSubArray ( A , B , n , m ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE l = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE l = [ 0 ] + l + [ l [ i + 1 ] ] NEW_LINE c = 0 NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT c += abs ( l [ i ] - l [ i + 1 ] ) + 2 NEW_LINE DEDENT print ( c ) NEW_LINE
def calculateSum ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE MOD = 1000000007 NEW_LINE for i in range ( k ) : NEW_LINE INDENT res = ( res * n ) % MOD NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 NEW_LINE k = 3 NEW_LINE print ( calculateSum ( n , k ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = [ ' A ' , ' C ' , ' G ' , ' T ' ] NEW_LINE mod = 10 ** 9 + 7 NEW_LINE ans = 0 NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if s [ i ] in s [ i + 1 : ] : NEW_LINE INDENT ans += s [ i ] . count ( ' A ' ) NEW_LINE DEDENT DEDENT print ( ans % mod ) NEW_LINE
a = 0 NEW_LINE while 1 : NEW_LINE INDENT try : NEW_LINE INDENT b , c = map ( int , input ( ) . split ( " , " ) ) NEW_LINE a += b * c NEW_LINE DEDENT except : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( a ) NEW_LINE if a > 0 : NEW_LINE INDENT print ( int ( a / ( 2 * a ) ) ) NEW_LINE DEDENT
MAX = 100 NEW_LINE def binomialCoeff ( n , k ) : NEW_LINE INDENT C = [ 0 ] * ( k + 1 ) NEW_LINE C [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( min ( i , k ) , 0 , - 1 ) : NEW_LINE INDENT C [ j ] = C [ j ] + C [ j - 1 ] NEW_LINE DEDENT DEDENT return C [ k ] NEW_LINE DEDENT def sumOfproduct ( n ) : NEW_LINE INDENT return binomialCoeff ( 2 * n , n - 1 ) NEW_LINE DEDENT n = 3 NEW_LINE print ( sumOfproduct ( n ) ) NEW_LINE
a = input ( ) NEW_LINE b = input ( ) NEW_LINE if a == b : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def pairCount ( arr , n ) : NEW_LINE INDENT max_val = max ( arr ) NEW_LINE prime = [ True for i in range ( max_val + 1 ) ] NEW_LINE prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , max_val + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , max_val + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] == True ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return ( count * ( count - 1 ) ) // 2 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( pairCount ( arr , n ) ) NEW_LINE DEDENT
import math as mt NEW_LINE def getOr getOr getOrd ( arr , n ) : NEW_LINE INDENT max_val = max ( arr ) NEW_LINE prime = ( max_val + 1 ) NEW_LINE for i in range ( max_val + 1 ) : NEW_LINE INDENT prime [ i ] = 1 NEW_LINE DEDENT prime [ 1 ] = 10 NEW_LINE prime [ 2 ] = 10 NEW_LINE for p in range ( mt . ceil ( mt . sqrt ( max_val ) ) ) : NEW_LINE INDENT if ( prime [ p ] == 1 ) : NEW_LINE INDENT for i in range ( p * 2 , max_val + 1 , p ) : NEW_LINE INDENT prime [ i ] = 1 NEW_LINE DEDENT DEDENT DEDENT maximum = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] == 1 ) : NEW_LINE INDENT maximum = max ( maximum , arr [ i ] ) NEW_LINE DEDENT DEDENT return maximum NEW_LINE DEDENT arr = [ 2 , 10 , 15 , 7 , 6 , 8 , 13 ] NEW_LINE n = len ( arr ) NEW_LINE print ( getOrd ( arr , n ) ) NEW_LINE
def compute ( ) : NEW_LINE INDENT ans = sum ( map ( int , " " . join ( sorted ( " " . join ( map ( str , range ( 1 , 10 ) ) ) ) ) ) NEW_LINE return str ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def findElements ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , - 6 , 3 , 5 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE findElements ( arr , n ) NEW_LINE DEDENT
def printDistinct ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE i = 0 NEW_LINE while i < n : NEW_LINE INDENT while ( i < n - 1 and arr [ i ] == arr [ i + 1 ] ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT arr = [ 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE printDistinct ( arr , n ) NEW_LINE
from functools import reduce NEW_LINE print ( reduce ( lambda x , y : x * y , map ( int , input ( ) . split ( ) ) , 1 ) ) NEW_LINE
def nth_term ( a , b , n ) : NEW_LINE INDENT z = 0 NEW_LINE if ( n % 6 == 1 ) : NEW_LINE INDENT z = a NEW_LINE DEDENT elif ( n % 6 == 2 ) : NEW_LINE INDENT z = b NEW_LINE DEDENT elif ( n % 6 == 3 ) : NEW_LINE INDENT z = b - a NEW_LINE DEDENT elif ( n % 6 == 4 ) : NEW_LINE INDENT z = - a NEW_LINE DEDENT elif ( n % 6 == 5 ) : NEW_LINE INDENT z = - b NEW_LINE DEDENT if ( n % 6 == 0 ) : NEW_LINE INDENT z = - ( b - a ) NEW_LINE DEDENT return z NEW_LINE DEDENT a = 10 NEW_LINE b = 17 NEW_LINE n = 3 NEW_LINE print ( nth_term ( a , b , n ) ) NEW_LINE
def findSubSequence ( s , num ) : NEW_LINE INDENT res = 0 NEW_LINE i = 0 NEW_LINE while ( num > 0 ) : NEW_LINE INDENT if ( num & 1 ) : NEW_LINE INDENT res += ord ( s [ i ] ) - ord ( '0' ) NEW_LINE DEDENT i += 1 NEW_LINE num = num >> 1 NEW_LINE DEDENT return res NEW_LINE DEDENT def pqSum ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE c_sum = 0 NEW_LINE range = ( 1 << n ) - 1 NEW_LINE for i in range ( 0 , range + 1 ) : NEW_LINE INDENT c_sum += findSubSequence ( s , i ) NEW_LINE DEDENT return c_sum NEW_LINE DEDENT s = visited NEW_LINE print ( pqSum ( s ) ) NEW_LINE
def minimumCost ( cost , n ) : NEW_LINE INDENT dp1 = 0 NEW_LINE dp2 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT dp0 = cost [ i ] + min ( dp1 , dp2 ) NEW_LINE dp2 = dp1 NEW_LINE dp1 = dp0 NEW_LINE DEDENT return min ( dp1 , dp2 ) NEW_LINE DEDENT a = [ 2 , 5 , 3 , 1 , 7 , 3 , 4 ] NEW_LINE n = len ( a ) NEW_LINE print ( minimumCost ( a , n ) ) NEW_LINE
def countMultiples ( n ) : NEW_LINE INDENT return ( int ( n / 3 ) + int ( n / 7 ) - int ( n / 21 ) ) ; NEW_LINE DEDENT print ( " Count = " , countMultiples ( 25 ) ) NEW_LINE
SIZE = 26 NEW_LINE def longSubstring ( str1 , k ) : NEW_LINE INDENT freq = [ 0 for i in range ( SIZE ) ] NEW_LINE start = 0 NEW_LINE maxLen = 0 NEW_LINE ch = 0 NEW_LINE n = len ( str1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT ch = str1 [ i ] NEW_LINE freq [ ord ( ch ) - ord ( ' a ' ) ] += 1 NEW_LINE if ( freq [ ord ( ch ) - ord ( ' a ' ) ] > k ) : NEW_LINE INDENT if ( maxLen < ( i - start ) ) : NEW_LINE INDENT maxLen = i - start NEW_LINE DEDENT while ( freq [ ord ( ch ) - ord ( ' a ' ) ] > k ) : NEW_LINE INDENT freq [ ord ( ch ) - ord ( ' a ' ) ] -= 1 NEW_LINE start += 1 NEW_LINE DEDENT DEDENT DEDENT if ( maxLen < ( n - start ) ) : NEW_LINE INDENT maxLen = n - start NEW_LINE DEDENT return maxLen NEW_LINE DEDENT str1 = " babcaag " NEW_LINE k = 1 NEW_LINE print ( " Length = " , longSubstring ( str1 , k ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE res = [ ' - 1' ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE if x + y <= 500 : NEW_LINE INDENT if x + x <= 500 : NEW_LINE INDENT res [ 0 ] = ' A ' NEW_LINE DEDENT DEDENT elif x + y <= 500 : NEW_LINE INDENT if y + x <= 500 : NEW_LINE INDENT res [ 1 ] = ' G ' NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if y + x <= 500 : NEW_LINE INDENT res [ 2 ] = ' G ' NEW_LINE DEDENT DEDENT DEDENT print ( * res , sep = ' ' ) NEW_LINE
class Solution ( object ) : NEW_LINE INDENT def to hex_map ( self , num ) : NEW_LINE INDENT res = " " NEW_LINE while num > 0 and len ( res ) < 8 : NEW_LINE INDENT res = hex_map [ num & 15 ] + res NEW_LINE num = num >> 4 NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE n = 26 NEW_LINE out = sObj . to hex_map ( n ) NEW_LINE print ( out ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE if k > ( n + 1 ) // 2 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT print ( ' YES ' ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if i % 2 == 0 and k > 0 : NEW_LINE INDENT print ( ' L ' , end = ' ' ) NEW_LINE k -= 1 NEW_LINE DEDENT elif i % 2 == 1 and k == 0 : NEW_LINE INDENT print ( ' S ' , end = ' ' ) NEW_LINE k -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' L ' , end = ' ' ) NEW_LINE DEDENT DEDENT print ( ' ' ) NEW_LINE DEDENT
def longestString ( str1 , str2 ) : NEW_LINE INDENT count1 = [ 0 ] * 26 NEW_LINE count2 = [ 0 ] * 26 NEW_LINE for i in range ( len ( str1 ) ) : NEW_LINE INDENT count1 [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i in range ( len ( str2 ) ) : NEW_LINE INDENT count2 [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT result = " " NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT for j in range ( 1 , min ( count1 [ i ] , count2 [ i ] ) + 1 ) : NEW_LINE INDENT result += chr ( ord ( ' a ' ) + i ) NEW_LINE DEDENT DEDENT print ( result ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str1 = " geeks " NEW_LINE str2 = " cake " NEW_LINE longestString ( str1 , str2 ) NEW_LINE DEDENT
def msb ( x ) : NEW_LINE INDENT ret = 0 NEW_LINE while ( ( x >> ( ret + 1 ) ) != 0 ) : NEW_LINE INDENT ret += 1 NEW_LINE DEDENT return ret NEW_LINE DEDENT def xorRange ( l , r ) : NEW_LINE INDENT max_bit = msb ( r ) NEW_LINE mul = 2 NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , max_bit + 1 ) : NEW_LINE INDENT if ( ( l // mul ) * mul == ( r // mul ) * mul ) : NEW_LINE INDENT if ( ( ( l & ( 1 << i ) ) != 0 ) and ( r - l + 1 ) % 2 == 1 ) : NEW_LINE INDENT ans += mul NEW_LINE DEDENT mul *= 2 NEW_LINE continue NEW_LINE DEDENT odd_c = 0 NEW_LINE if ( ( ( l & ( 1 << i ) ) != 0 ) and l % 2 == 1 ) : NEW_LINE INDENT odd_c = ( odd_c ^ 1 ) NEW_LINE DEDENT if ( ( r & ( 1 << i ) ) != 0 ) and r % 2 == 0 ) : NEW_LINE INDENT odd_c = ( odd_c ^ 1 ) NEW_LINE DEDENT if ( odd_c != 0 ) : NEW_LINE INDENT ans += mul NEW_LINE DEDENT mul *= 2 NEW_LINE DEDENT zero_bit_cnt = 0_bit_cnt = ( r - l + 1 ) // 2 NEW_LINE if ( l % 2 == 1 and r % 2 == 1 ) : NEW_LINE INDENT zero_bit_cnt += 1 NEW_LINE DEDENT if ( zero_bit_cnt % 2 == 1 ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT l = 1 NEW_LINE r = 4 NEW_LINE print ( xorRange ( l , r ) ) NEW_LINE
def q1 ( s , i ) : NEW_LINE INDENT if ( i == len ( s ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE return NEW_LINE DEDENT if ( s [ i ] == ' a ' ) : NEW_LINE INDENT q1 ( s , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT q2 ( s , i + 1 ) NEW_LINE DEDENT DEDENT def q2 ( s , i ) : NEW_LINE INDENT if ( i == len ( s ) ) : NEW_LINE INDENT print ( " No " ) NEW_LINE return NEW_LINE DEDENT if ( s [ i ] == ' a ' ) : NEW_LINE INDENT q1 ( s , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT q2 ( s , i + 1 ) NEW_LINE DEDENT DEDENT def q3 ( s , i ) : NEW_LINE INDENT if ( i == len ( s ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE return NEW_LINE DEDENT if ( s [ i ] == ' a ' ) : NEW_LINE INDENT q4 ( s , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT q3 ( s , i + 1 ) NEW_LINE DEDENT DEDENT def q4 ( s , i ) : NEW_LINE INDENT if ( i == len ( s ) ) : NEW_LINE INDENT print ( " No " ) NEW_LINE return NEW_LINE DEDENT if ( s [ i ] == ' a ' ) : NEW_LINE INDENT q4 ( s , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT q3 ( s , i + 1 ) NEW_LINE DEDENT DEDENT def q0 ( s , i ) : NEW_LINE INDENT if ( i == len ( s ) ) : NEW_LINE INDENT print ( " No " ) NEW_LINE return NEW_LINE DEDENT if ( s [ i ] == ' a ' ) : NEW_LINE INDENT q1 ( s , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT q3 ( s , i + 1 ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " abbaabb " NEW_LINE q0 ( s , 0 ) NEW_LINE DEDENT
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE m , defaultdict = [ 0 ] * ( n + 1 ) , [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE m [ i ] = max ( m [ i ] , a * b ) NEW_LINE for j in range ( i + 1 , n + 1 ) : NEW_LINE INDENT k = m [ i ] - m [ j ] + a * b NEW_LINE if k > 0 : m [ i + j ] += k NEW_LINE else : m [ j ] += k NEW_LINE DEDENT DEDENT m = int ( input ( ) ) NEW_LINE for i in range ( m ) : print ( m [ i ] ) NEW_LINE DEDENT
def findTime ( T , K ) : NEW_LINE INDENT minutes = ( ( ord ( T [ 0 ] ) - ord ( '0' ) ) * 10 + ( ord ( T [ 1 ] ) - ord ( '0' ) ) * 60 + ( ( ord ( T [ 3 ] ) - ord ( '0' ) ) * 10 + ord ( T [ 4 ] ) - ord ( '0' ) ) ; NEW_LINE minutes += K ; NEW_LINE hour = ( minutes // 60 ) % 24 ; NEW_LINE min = minutes % 60 ; NEW_LINE if ( hour < 10 ) : NEW_LINE INDENT print ( "0" + str ( hour ) + " : " , end = " " ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( str ( hour ) + " : " , end = " " ) ; NEW_LINE DEDENT if ( min < 10 ) : NEW_LINE INDENT print ( "0" + str ( min ) ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( min ) ; NEW_LINE DEDENT DEDENT T = "21.39" ; NEW_LINE K = 43 ; NEW_LINE findTime ( T , K ) ; NEW_LINE
def maxProductSum ( str , m ) : NEW_LINE INDENT n = len ( str ) NEW_LINE maxProd = - 10 ** 9 NEW_LINE maxSum = - 10 ** 9 NEW_LINE for i in range ( n - m ) : NEW_LINE INDENT product = 1 NEW_LINE sum = 0 NEW_LINE for j in range ( i , m + i ) : NEW_LINE INDENT product = product * ( ord ( str [ j ] ) - ord ( '0' ) ) NEW_LINE sum = sum + ( ord ( str [ j ] ) - ord ( '0' ) ) NEW_LINE DEDENT maxProd = max ( maxProd , product ) NEW_LINE maxSum = max ( maxSum , sum ) NEW_LINE DEDENT print ( " Maximum Product = " , maxProd ) NEW_LINE print ( " Maximum Sum = " , maxSum ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " 3675356291 " NEW_LINE m = 5 NEW_LINE maxProductSum ( str , m ) NEW_LINE DEDENT
def minCost ( cost , m , n ) : NEW_LINE INDENT if ( n < 0 or m < 0 ) : NEW_LINE INDENT return 2147483647 NEW_LINE DEDENT elif ( m == 0 and n == 0 ) : NEW_LINE INDENT return cost [ m ] [ n ] NEW_LINE DEDENT else : NEW_LINE INDENT return cost [ m ] [ n ] + min ( minCost ( cost , m - 1 , n - 1 ) , minCost ( cost , m - 1 , n ) , minCost ( cost , m , n - 1 ) ) NEW_LINE DEDENT DEDENT cost = [ [ 1 , 2 , 3 ] , [ 4 , 8 , 2 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( minCost ( cost , 2 , 2 ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE y = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT y . append ( 0 ) NEW_LINE DEDENT y . sort ( ) NEW_LINE tmp = 0 NEW_LINE for i in range ( n // 2 ) : NEW_LINE INDENT tmp += y [ i ] NEW_LINE DEDENT y [ n // 2 - 1 ] = tmp NEW_LINE for i in range ( n // 2 ) : NEW_LINE INDENT tmp += y [ i ] NEW_LINE DEDENT print ( min ( tmp , y ) ) NEW_LINE
class UnionFind : NEW_LINE INDENT def __init__ ( self , n ) : NEW_LINE INDENT self . par = [ i for i in range ( n ) ] NEW_LINE self . rank = [ 0 ] * ( n + 1 ) NEW_LINE DEDENT def find ( self , x ) : NEW_LINE INDENT if self . par [ x ] == x : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT r = self . find ( self . par [ x ] ) NEW_LINE self . par [ x ] = r NEW_LINE return self . par [ x ] NEW_LINE DEDENT DEDENT def unite ( self , x , y ) : NEW_LINE INDENT x = self . find ( x ) NEW_LINE y = self . find ( y ) NEW_LINE if x == y : NEW_LINE INDENT return NEW_LINE DEDENT if self . rank [ x ] < self . rank [ y ] : NEW_LINE INDENT self . par [ x ] = y NEW_LINE DEDENT else : NEW_LINE INDENT self . par [ y ] = x NEW_LINE if self . rank [ x ] == self . rank [ y ] : NEW_LINE INDENT self . rank [ x ] += 1 NEW_LINE DEDENT DEDENT DEDENT def same ( self , x , y ) : NEW_LINE INDENT return self . find ( x ) == self . find ( y ) NEW_LINE DEDENT DEDENT N , Q = map ( int , input ( ) . split ( ) ) NEW_LINE L = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] NEW_LINE uf = UnionFind ( N ) NEW_LINE for i in range ( Q ) : NEW_LINE INDENT t , x , y , z = map ( int , input ( ) . split ( ) ) NEW_LINE if t == 0 : NEW_LINE INDENT uf . unite ( x , y ) NEW_LINE DEDENT else : NEW_LINE INDENT l = uf . find ( x ) NEW_LINE r = uf . find ( y ) NEW_LINE if l == r : NEW_LINE INDENT r = z NEW_LINE DEDENT elif l < r : NEW_LINE INDENT r = l NEW_LINE DEDENT DEDENT DEDENT ans = ' ? ' NEW_LINE for i in range ( N ) : NEW_LINE INDENT if
def sumDivisibles ( A , B , M ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( A , B + 1 , 1 ) : NEW_LINE INDENT if ( i % M == 0 ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = 6 NEW_LINE B = 15 NEW_LINE M = 3 NEW_LINE print ( sumDivisibles ( A , B , M ) ) NEW_LINE DEDENT
import math NEW_LINE def countNumbersWith4 ( n ) : NEW_LINE INDENT if ( n < 4 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT d = int ( math . log10 ( n ) ) NEW_LINE a = [ 0 ] * ( d + 2 ) NEW_LINE a [ 0 ] = 0 NEW_LINE a [ 1 ] = 1 NEW_LINE for i in range ( 2 , d + 1 ) : NEW_LINE INDENT a [ i ] = a [ i - 1 ] * 9 + int ( math . ceil ( pow ( 10 , i - 1 ) ) ) NEW_LINE DEDENT p = ( int ) ( math . ceil ( pow ( 10 , d ) ) ) NEW_LINE msd = n // p NEW_LINE if ( msd == 4 ) : NEW_LINE INDENT return ( msd ) * a [ d ] + ( n % p ) + 1 NEW_LINE DEDENT if ( msd > 4 ) : NEW_LINE INDENT return ( msd - 1 ) * a [ d ] + p + countNumbersWith4 ( n % p ) NEW_LINE DEDENT return ( msd ) * a [ d ] + countNumbersWith4 ( n % p ) NEW_LINE DEDENT n = 328 NEW_LINE print ( " Count of numbers from 1 to " , n , " that have 4 as a digit is " , countNumbersWith4 ( n ) ) NEW_LINE
x , y = map ( int , input ( ) . split ( ) ) NEW_LINE k = int ( input ( ) ) NEW_LINE if k % 2 == 0 : NEW_LINE INDENT print ( ( k - 1 ) % 1000000007 ) NEW_LINE DEDENT else : NEW_LINE INDENT if x == y : NEW_LINE INDENT print ( k ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = ( k - 1 ) % 1000000007 NEW_LINE if k % 2 == 1 : NEW_LINE INDENT ans += 2 NEW_LINE DEDENT print ( ans % 1000000007 ) NEW_LINE DEDENT DEDENT
class Solution : NEW_LINE INDENT def find postOrderUtil ( self , pre , n , minval , maxval , preIndex ) : NEW_LINE INDENT if ( preIndex . data == n ) : NEW_LINE INDENT return NEW_LINE DEDENT if ( pre [ preIndex . data ] < minval or pre [ preIndex . data ] > maxval ) : NEW_LINE INDENT return NEW_LINE DEDENT val = pre [ preIndex . data ] NEW_LINE preIndex . data += 1 NEW_LINE find postOrderUtil ( pre , n , minval , val , preIndex ) NEW_LINE find postOrderUtil ( pre , n , val , maxval , preIndex ) NEW_LINE print ( val , end = " " ) NEW_LINE DEDENT def find postOrder ( self , n ) : NEW_LINE INDENT preIndex = 0 NEW_LINE find postOrderUtil ( pre , n , - ( - ( 2 ** n ) ) , - ( 2 ** n ) , preIndex ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT pre = [ 40 , 30 , 35 , 80 , 100 ] NEW_LINE n = len ( pre ) NEW_LINE find postOrder ( pre , n ) NEW_LINE DEDENT
def countWays ( n , arr , k ) : NEW_LINE INDENT if ( k <= 0 or k >= n ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT s = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT s [ arr [ i ] ] = 1 NEW_LINE DEDENT if ( len ( s ) <= k ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return len ( s ) - k NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 100 , 200 , 400 , 50 ] NEW_LINE k = 3 NEW_LINE n = len ( arr ) NEW_LINE print ( countWays ( n , arr , k ) ) NEW_LINE DEDENT
def solve ( ) : NEW_LINE INDENT item = input ( ) NEW_LINE for i in range ( 8 ) : NEW_LINE INDENT item = item . replace ( " : " , " " ) NEW_LINE DEDENT ans = " " NEW_LINE for j in range ( 8 ) : NEW_LINE INDENT ans += str ( item [ j ] ) + " : " NEW_LINE DEDENT if 8 in item : NEW_LINE INDENT ans += item . replace ( " : " , " " ) NEW_LINE DEDENT for i in range ( 8 ) : NEW_LINE INDENT for j in range ( 8 ) : NEW_LINE INDENT ans += str ( item [ j ] ) + " : " NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT
from math import sqrt , floor NEW_LINE def isPrime ( n ) : NEW_LINE INDENT flag = 1 NEW_LINE for i in range ( 2 , int ( sqrt ( n ) ) + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT flag = 0 NEW_LINE break NEW_LINE DEDENT DEDENT return flag NEW_LINE DEDENT def isPerfectSquare ( x ) : NEW_LINE INDENT sr = sqrt ( x ) NEW_LINE return ( ( sr - floor ( sr ) ) == 0 ) NEW_LINE DEDENT def countInter MAX_Primes ( n ) : NEW_LINE INDENT answer = 0 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( isPrime ( i ) ) : NEW_LINE INDENT j = 1 NEW_LINE while ( j * j * j * j <= i ) : NEW_LINE INDENT if ( isPerfectSquare ( i - j * j * j ) ) : NEW_LINE INDENT answer += 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT return answer NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 10 NEW_LINE print ( countInter MAX_Primes ( N ) ) NEW_LINE DEDENT
N = int ( input ( ) ) NEW_LINE S = ' * ' + input ( ) NEW_LINE print ( ' YNeos ' [ len ( S ) > 1 or any ( S [ i ] == S [ i + 1 ] for i in range ( N ) ) : : 2 ] ) NEW_LINE
def findNum ( div , rem , N ) : NEW_LINE INDENT num = rem [ N - 1 ] NEW_LINE for i in range ( N - 2 , - 1 , - 1 ) : NEW_LINE INDENT num = num * div [ i ] + rem [ i ] NEW_LINE DEDENT return num NEW_LINE DEDENT div = [ 8 , 3 ] NEW_LINE rem = [ 2 , 2 ] NEW_LINE N = len ( div ) NEW_LINE print ( findNum ( div , rem , N ) ) NEW_LINE
def segregate0and1 ( arr ) : NEW_LINE INDENT type0 = 0 NEW_LINE type1 = len ( arr ) - 1 NEW_LINE while type0 < type1 : NEW_LINE INDENT if arr [ type0 ] == 1 : NEW_LINE INDENT arr [ type1 ] = arr [ type1 ] + arr [ type0 ] NEW_LINE arr [ type0 ] = arr [ type1 ] - arr [ type0 ] NEW_LINE arr [ type1 ] = arr [ type1 ] - arr [ type0 ] NEW_LINE type1 -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT type0 += 1 NEW_LINE DEDENT DEDENT DEDENT arr = [ 0 , 1 , 0 , 1 , 1 , 1 , 1 ] NEW_LINE arr = segregate0and1 ( arr ) NEW_LINE print ( " Array after segregation is " ) NEW_LINE for i in arr : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE arr = [ False for _ in range ( 3002 ) ] NEW_LINE a = map ( int , input ( ) . split ( ) ) NEW_LINE for i in a : NEW_LINE INDENT arr [ i ] = True NEW_LINE DEDENT for i in range ( 1 , 3002 ) : NEW_LINE INDENT if arr [ i ] == False : NEW_LINE INDENT print ( i ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT
l = input ( ) NEW_LINE r = input ( ) NEW_LINE u = l . count ( ' R ' ) NEW_LINE d = l . count ( ' U ' ) NEW_LINE n = abs ( l [ 0 ] - l [ 1 ] ) NEW_LINE m = min ( n , m ) NEW_LINE if ( l [ 0 ] == r [ 0 ] and l [ 1 ] == r [ 1 ] ) : NEW_LINE INDENT print ( ' LR ' * m ) NEW_LINE DEDENT elif ( l [ 0 ] == r [ 0 ] and l [ 1 ] == r [ 1 ] ) : NEW_LINE INDENT print ( ' RR ' * m ) NEW_LINE DEDENT elif ( l [ 0 ] == r [ 0 ] and l [ 1 ] == r [ 1 ] ) : NEW_LINE INDENT print ( ' LR ' * m ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( 2 , n ) : NEW_LINE INDENT if ( l [ i ] == ' R ' and r [ i - 1 ] == ' U ' ) : NEW_LINE INDENT print ( ' R ' * i ) NEW_LINE DEDENT elif ( l [ i ] == ' U ' and r [ i - 1 ] == ' D ' ) : NEW_LINE INDENT print ( ' D ' * i ) NEW_LINE DEDENT DEDENT DEDENT
import itertools NEW_LINE H , W = map ( int , input ( ) . split ( ) ) NEW_LINE C = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( H ) ] NEW_LINE ans = 0 NEW_LINE for i in range ( H ) : NEW_LINE INDENT for j in range ( W ) : NEW_LINE INDENT ans += ( i + 1 ) * ( H - i ) * ( j + 1 ) * ( W - j ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE lis = [ ] NEW_LINE for _ in range ( n ) : NEW_LINE INDENT lis . append ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE DEDENT a = [ ' Yes ' ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT if lis [ i ] [ 0 ] == ' Yes ' : NEW_LINE INDENT a [ i ] = ' No ' NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if lis [ i ] [ j ] == ' Yes ' : NEW_LINE INDENT a [ i ] = ' No ' NEW_LINE DEDENT DEDENT DEDENT print ( a [ n - 1 ] ) NEW_LINE
import sys NEW_LINE input = sys . stdin . readline NEW_LINE def solve ( ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE bin_str = str ( x ) NEW_LINE n = len ( bin_str ) NEW_LINE if n == 1 or ( x == "0" and y == "0" ) : NEW_LINE INDENT print ( bin_str [ : : - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( bin_str [ : : - 1 ] + "0" * ( n - 1 ) ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT b = bin ( i ) [ 2 : ] NEW_LINE if len ( b ) < 32 : NEW_LINE INDENT ans += '0' * ( 32 - len ( b ) ) NEW_LINE DEDENT else : NEW_LINE INDENT ans += b NEW_LINE DEDENT DEDENT if len ( ans ) == 32 : NEW_LINE INDENT ans += '0' * ( 32 - len ( ans ) ) NEW_LINE DEDENT print ( ' ' . join ( ans ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE s = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . append ( input ( ) ) NEW_LINE DEDENT cnt = 0 NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT for j in range ( n - 1 ) : NEW_LINE INDENT if s [ i ] [ j ] == " A " : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif s [ i ] [ j ] == " B " : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif s [ i ] [ j ] == " C " : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif s [ i ] [ j ] == " D " : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif s [ i ] [ j ] == " E " : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT DEDENT print ( cnt ) NEW_LINE
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] > b [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT if a [ 0 ] > b [ 0 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if a [ i ] < b [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
a = int ( input ( ) ) NEW_LINE while True : NEW_LINE INDENT op = input ( ) . strip ( ) NEW_LINE if op == ' ? ' : break NEW_LINE b = int ( input ( ) ) NEW_LINE if op == ' + ' : a += b NEW_LINE elif op == ' - ' : a - b NEW_LINE INDENT a -= b NEW_LINE DEDENT elif op == ' * ' : a * b : NEW_LINE INDENT a //= b NEW_LINE DEDENT else : NEW_LINE INDENT print ( a ) NEW_LINE DEDENT DEDENT
from math import ceil NEW_LINE n = int ( input ( ) ) NEW_LINE data = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( data [ i ] > data [ i + 1 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif ( data [ i ] == data [ i + 1 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
MAX = 256 NEW_LINE def countPairs ( s ) : NEW_LINE INDENT cnt = [ 0 for i in range ( MAX ) ] NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT cnt [ ord ( s [ i ] ) ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT ans += cnt [ i ] * cnt [ i ] NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE print ( countPairs ( s ) ) NEW_LINE DEDENT
prime = [ True for i in range ( 100006 ) ] NEW_LINE def SieveOfEratosthenes ( n ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def sortedArray ( arr , n ) : NEW_LINE INDENT SieveOfEratosthenes ( 100005 ) NEW_LINE v = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] == False ) : NEW_LINE INDENT v . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT v . sort ( ) NEW_LINE j = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] == True ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( v [ j ] , end = " " ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE arr = [ 100 , 11 , 500 , 2 , 17 , 1 ] NEW_LINE sortedArray ( arr , n ) NEW_LINE DEDENT
from math import gcd NEW_LINE def createHash ( hash , maxElement ) : NEW_LINE INDENT prev = 0 NEW_LINE curr = 1 NEW_LINE hash . add ( prev ) NEW_LINE hash . add ( curr ) NEW_LINE while ( curr <= maxElement ) : NEW_LINE INDENT temp = curr + prev NEW_LINE hash . add ( temp ) NEW_LINE prev = curr NEW_LINE curr = temp NEW_LINE DEDENT DEDENT def gcdFibonacciFreq ( arr , n ) : NEW_LINE INDENT hash = set ( ) NEW_LINE createHash ( hash , max ( arr ) ) NEW_LINE i = 0 NEW_LINE m = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in m . keys ( ) : NEW_LINE INDENT m [ arr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT gcd = 0 NEW_LINE for it in m : NEW_LINE INDENT if m [ it ] in hash : NEW_LINE INDENT gcd = gcd ( gcd , it ) NEW_LINE DEDENT DEDENT return gcd NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 5 , 3 , 6 , 5 , 6 , 6 , 5 , 5 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( gcdFibonacciFreq ( arr , n ) ) NEW_LINE DEDENT
import math NEW_LINE def find_Area ( a ) : NEW_LINE INDENT R = a * ( 2.0 - math . sqrt ( 2 ) ) NEW_LINE area = ( 3.14 * R * R ) / 2.0 NEW_LINE return area NEW_LINE DEDENT a = 4 NEW_LINE print ( " Area of Q = { 0 : . 4 } " . format ( find_Area ( a ) ) ) NEW_LINE
def find heapq ( a , b , c , d , x , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT for k in range ( n ) : NEW_LINE INDENT for l in range ( n ) : NEW_LINE INDENT if ( a [ i ] ^ b [ j ] ^ c [ k ] ^ d [ l ] ) == x : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return count NEW_LINE DEDENT x = 3 NEW_LINE a = [ 0 , 1 ] NEW_LINE b = [ 2 , 0 ] NEW_LINE c = [ 0 , 1 ] NEW_LINE d = [ 0 , 1 ] NEW_LINE n = len ( a ) NEW_LINE print ( find heapq ( a , b , c , d , x , n ) ) NEW_LINE
def printSmallest ( s , Query ) : NEW_LINE INDENT N = len ( s ) NEW_LINE H = [ [ 0 for i in range ( 26 ) ] for j in range ( N + 1 ) ] NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT H [ i ] [ ord ( s [ i - 1 ] ) - ord ( ' a ' ) ] += 1 NEW_LINE for j in range ( 26 ) : NEW_LINE INDENT H [ i ] [ j ] += H [ i - 1 ] [ j ] NEW_LINE DEDENT DEDENT m = len ( H ) NEW_LINE for j in range ( m ) : NEW_LINE INDENT l = q [ j ] [ l ] NEW_LINE r = q [ j ] [ r ] NEW_LINE n = q [ j ] [ n ] NEW_LINE sum = 0 NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT sum += H [ r ] [ i ] - H [ l - 1 ] [ i ] NEW_LINE if sum >= n : NEW_LINE INDENT print ( chr ( 97 + i ) ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " afbcc groups " NEW_LINE Query = [ [ 2 , 4 , 1 ] , [ 1 , 6 , 4 ] , [ 1 , 8 , 7 ] , [ 1 , 8 , 7 ] ] NEW_LINE printSmallest ( s , Query ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE if m == 1 : NEW_LINE INDENT print ( s . count ( "0" ) * n ) NEW_LINE DEDENT else : NEW_LINE INDENT change = int ( 0 ) NEW_LINE c = s [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == "1" : NEW_LINE INDENT change = change + 1 NEW_LINE DEDENT c = s [ i + 1 : ] . index ( "1" ) NEW_LINE DEDENT z = ( change + 1 ) * m NEW_LINE h = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == "0" : NEW_LINE INDENT h += 1 NEW_LINE DEDENT DEDENT z = ( z + 1 ) // m NEW_LINE print ( z ) NEW_LINE DEDENT DEDENT
for i in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE c = 1 NEW_LINE while n > 1 : NEW_LINE INDENT c += 1 NEW_LINE n -= 3 NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 1 NEW_LINE while i <= n : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT s = s [ : i ] + s [ i : ] NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( s ) NEW_LINE
def printPairs ( arr , n ) : NEW_LINE INDENT v = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( abs ( arr [ i ] ) == abs ( arr [ j ] ) ) : NEW_LINE INDENT v . append ( abs ( arr [ i ] ) ) NEW_LINE DEDENT DEDENT DEDENT if ( len ( v ) == 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT v . sort ( ) NEW_LINE for i in range ( len ( v ) ) : NEW_LINE INDENT print ( - v [ i ] , " " , v [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 4 , 8 , 9 , - 4 , 1 , - 1 , - 8 , - 9 ] NEW_LINE n = len ( arr ) NEW_LINE printPairs ( arr , n ) NEW_LINE DEDENT
def doublefactorial ( n ) : NEW_LINE INDENT if ( n == 0 or n == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return n * doublefactorial ( n - 2 ) NEW_LINE DEDENT print ( " Double factorial is " , doublefactorial ( 5 ) ) NEW_LINE
def isPalindrome ( str ) : NEW_LINE INDENT l = 0 NEW_LINE h = len ( str ) - 1 NEW_LINE while ( h > l ) : NEW_LINE INDENT if ( str [ l ] != str [ h - 1 ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT l += 1 NEW_LINE h -= 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def minRem ZIP ( str ) : NEW_LINE INDENT if ( str [ 0 ] == bx ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( isPalindrome ( str ) ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 2 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( minRem ZIP ( "010010" ) ) NEW_LINE print ( minRem ZIP ( "0100101" ) ) NEW_LINE DEDENT
def sumOfSubstrings ( num ) : NEW_LINE INDENT n = len ( num ) NEW_LINE sumofdigit = [ 0 ] * ( n ) NEW_LINE sumofdigit [ 0 ] = ord ( num [ 0 ] ) - ord ( '0' ) NEW_LINE res = sumofdigit [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT numi = ord ( num [ i ] ) - ord ( '0' ) NEW_LINE sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] NEW_LINE res += sumofdigit [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT num = "1234" NEW_LINE print ( sumOfSubstrings ( num ) ) NEW_LINE
def findCountOfPairs ( a , b , n ) : NEW_LINE INDENT ans = 0 ; NEW_LINE ans += n * ( a // n ) * ( b // n ) ; NEW_LINE ans += ( a // n ) * ( b % n ) ; NEW_LINE ans += ( a % n ) * ( b // n ) ; NEW_LINE ans += ( ( a % n ) + ( b % n ) ) // n ; NEW_LINE return int ( ans ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 5 ; b = 13 ; n = 3 ; NEW_LINE print ( findCountOfPairs ( a , b , n ) ) ; NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT LIMIT = 1000000 NEW_LINE ans = max ( range ( 1 , LIMIT + 1 ) , key = lambda x : ( x * 3 / 7 , x * 7 - ( x % 7 == 0 ) ) ) NEW_LINE return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
c = [ 0 for i in range ( 100 ) ] NEW_LINE def coef ( n ) : NEW_LINE INDENT c [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT c [ 1 + i ] = 1 NEW_LINE for j in range ( i , 0 , - 1 ) : NEW_LINE INDENT c [ j ] = c [ j - 1 ] - c [ j ] NEW_LINE DEDENT DEDENT DEDENT def isPrime ( n ) : NEW_LINE INDENT coef ( n ) NEW_LINE c [ 0 ] += 1 NEW_LINE c [ n ] -= 1 NEW_LINE i = n NEW_LINE while ( ( i - 1 ) > 0 and c [ i ] % n == 0 ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT return i < 0 NEW_LINE DEDENT n = 37 NEW_LINE if ( isPrime ( n ) ) : NEW_LINE INDENT print ( " Prime " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not Prime " ) NEW_LINE DEDENT
def count_ mp ( arr , n ) : NEW_LINE INDENT m = 999999 NEW_LINE counter = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( arr [ i ] > m ) : NEW_LINE INDENT counter += 1 NEW_LINE DEDENT if ( arr [ i ] <= m ) : NEW_LINE INDENT m = arr [ i ] NEW_LINE DEDENT DEDENT return counter NEW_LINE DEDENT arr = [ 3 , 2 , 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( count_ mp ( arr , n ) ) NEW_LINE
N , X = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE X = max ( a ) NEW_LINE c = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT c += a [ i ] - X NEW_LINE if c >= X : NEW_LINE INDENT c -= 1 NEW_LINE DEDENT DEDENT print ( N - c + 1 ) NEW_LINE
t = int ( input ( ) ) NEW_LINE z = t NEW_LINE while ( z > 0 ) : NEW_LINE INDENT z -= 1 NEW_LINE x = input ( ) . split ( ) NEW_LINE y = int ( x [ 0 ] ) NEW_LINE if ( y [ 0 ] == '0' ) : NEW_LINE INDENT y [ 0 ] = y [ 1 ] + 1 NEW_LINE DEDENT if ( y [ 0 ] == '1' ) : NEW_LINE INDENT y [ 0 ] = y [ 1 ] + 1 NEW_LINE DEDENT if ( y [ 0 ] == '1' ) : NEW_LINE INDENT z -= 1 NEW_LINE DEDENT if ( z > 0 ) : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT DEDENT
while 1 : NEW_LINE INDENT t , d , l = map ( int , input ( ) . split ( ) ) NEW_LINE if t == 0 : break NEW_LINE c = 0 ; ans = 0 NEW_LINE for i in range ( t ) : NEW_LINE INDENT x = int ( input ( ) ) NEW_LINE if x <= l : c += 1 NEW_LINE elif x > l : l -= 1 ; ans += 1 NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
def minimumSwaps ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE i = 0 NEW_LINE while i < n : NEW_LINE INDENT if arr [ i ] != i + 1 : NEW_LINE INDENT while arr [ i ] != i + 1 : NEW_LINE INDENT temp = arr [ arr [ i ] - 1 ] NEW_LINE arr [ i ] = arr [ i ] - 1 NEW_LINE arr [ i ] = temp NEW_LINE count = count + 1 NEW_LINE DEDENT DEDENT i = i + 1 NEW_LINE DEDENT return count NEW_LINE DEDENT arr = [ 2 , 3 , 4 , 1 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minimumSwaps ( arr , n ) ) NEW_LINE
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT TARGET = 500500 NEW_LINE MOD = 5005009 NEW_LINE queue = [ ] NEW_LINE nextprime = 2 NEW_LINE queue . append ( nextprime ) NEW_LINE product = 1 NEW_LINE for i in range ( 1 , TARGET ) : NEW_LINE INDENT item = queue . pop ( ) NEW_LINE product *= item % MOD NEW_LINE product %= MOD NEW_LINE queue . append ( item * item ) NEW_LINE if item == nextprime : NEW_LINE INDENT do = nextprime + 1 NEW_LINE while not eulerlib . is_prime ( nextprime ) : NEW_LINE INDENT queue . append ( nextprime ) NEW_LINE DEDENT queue . append ( nextprime ) NEW_LINE DEDENT DEDENT return str ( product ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def findUniquePair ( arr , n ) : NEW_LINE INDENT XOR = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT XOR = XOR ^ arr [ i ] NEW_LINE DEDENT set_bit_no = XOR & ~ ( XOR - 1 ) NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ( arr [ i ] & set_bit_no ) > 0 ) : NEW_LINE INDENT x = x ^ arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ arr [ i ] NEW_LINE DEDENT DEDENT print ( " The unique pair is ( " , x , " , " , y , " ) " ) NEW_LINE DEDENT arr = [ 6 , 1 , 3 , 5 , 1 , 3 , 7 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE findUniquePair ( arr , n ) NEW_LINE
n = int ( input ( ) ) NEW_LINE s = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . append ( input ( ) ) NEW_LINE DEDENT s1 = ' ' NEW_LINE for j in range ( n ) : NEW_LINE INDENT if s [ j ] != s [ n - j - 1 ] : NEW_LINE INDENT s1 += s [ j ] NEW_LINE DEDENT DEDENT if s1 == s [ n - 1 ] : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
import sys NEW_LINE for line in sys . stdin : NEW_LINE INDENT line = line . rstrip ( ) NEW_LINE if line == " @ " : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT N = len ( line ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT if line [ i ] == " @ " : NEW_LINE INDENT start = i NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT start = N // 10 NEW_LINE end = N % 10 NEW_LINE for i in range ( start , end + 1 ) : NEW_LINE INDENT line [ i ] = line [ i - start + 1 ] NEW_LINE DEDENT DEDENT print ( " " . join ( line ) ) NEW_LINE DEDENT DEDENT
def isMajority ( a , n ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] in mp . keys ( ) : NEW_LINE INDENT mp [ a [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ a [ i ] ] = 1 NEW_LINE DEDENT DEDENT for x in mp : NEW_LINE INDENT if ( mp [ x ] >= n // 2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 2 , 3 , 9 , 2 , 2 ] NEW_LINE n = len ( a ) NEW_LINE if ( isMajority ( a , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
N , W = map ( int , input ( ) . split ( ) ) NEW_LINE P = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( N ) ] NEW_LINE P . sort ( reverse = 1 ) NEW_LINE memo = [ [ - 1 for i in range ( W + 1 ) ] for j in range ( N + 1 ) ] NEW_LINE def dp ( i , j ) : NEW_LINE INDENT if memo [ i ] [ j ] != - 1 : NEW_LINE INDENT return memo [ i ] [ j ] NEW_LINE DEDENT elif j == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return memo [ i ] [ j ] NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( N + 1 ) : NEW_LINE INDENT if i * p [ i ] <= W : NEW_LINE INDENT ans = max ( ans , dp ( i , i * p [ i ] ) + dp ( i + 1 , W - p [ i ] ) ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
import math NEW_LINE def calc ( n ) : NEW_LINE INDENT a = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT a += math . sqrt ( a ** 2 + a ** 2 - 1 ) NEW_LINE DEDENT d = math . cos ( a ) NEW_LINE return d * math . sin ( a ) NEW_LINE DEDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == - 1 : NEW_LINE INDENT break NEW_LINE DEDENT print ( calc ( n ) ) NEW_LINE print ( calc ( n + 1 ) ) NEW_LINE print ( calc ( n ) ) NEW_LINE DEDENT
def printKMissing ( arr , n , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE i = 0 NEW_LINE while ( i < n and arr [ i ] <= 0 ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT count = 0 NEW_LINE curr = 1 NEW_LINE while ( count < k and i < n ) : NEW_LINE INDENT if ( arr [ i ] != curr ) : NEW_LINE INDENT print ( curr , end = " " ) NEW_LINE count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT curr += 1 NEW_LINE DEDENT while ( count < k ) : NEW_LINE INDENT print ( curr , end = " " ) NEW_LINE curr += 1 NEW_LINE count += 1 NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE k = 3 NEW_LINE printKMissing ( arr , n , k ) NEW_LINE DEDENT
def printNumbers ( a , n ) : NEW_LINE INDENT mpp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT num = a [ i ] NEW_LINE for j in range ( 1 , int ( num ** ( 1 / 2 ) ) + 1 ) : NEW_LINE INDENT if ( num % j == 0 ) : NEW_LINE INDENT if ( j != 1 ) : NEW_LINE INDENT mpp [ j ] = mpp [ j ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mpp [ j ] = 1 NEW_LINE DEDENT DEDENT if ( num // j != j ) : NEW_LINE INDENT mpp [ num // j ] = mpp [ num // j ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mpp [ num // j ] = 1 NEW_LINE DEDENT DEDENT DEDENT maxi = 0 NEW_LINE for it in sorted ( mpp ) : NEW_LINE INDENT maxi = max ( mpp [ it ] , maxi ) NEW_LINE DEDENT for it in sorted ( mpp ) : NEW_LINE INDENT if ( mpp [ it ] == maxi ) : NEW_LINE INDENT print ( it , end = " " ) NEW_LINE DEDENT DEDENT DEDENT a = [ 12 , 15 , 27 , 20 , 40 ] NEW_LINE n = len ( a ) NEW_LINE printNumbers ( a , n ) NEW_LINE
s = input ( ) NEW_LINE length = len ( s ) NEW_LINE def check ( s ) : NEW_LINE INDENT for i in range ( length ) : NEW_LINE INDENT if s [ i ] != ' a ' : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT for i in range ( length ) : NEW_LINE INDENT for j in range ( length ) : NEW_LINE INDENT if s [ i ] == ' a ' : NEW_LINE INDENT a = i NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT if check ( s ) : NEW_LINE INDENT print ( " : ( " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( s ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE temp = 0 NEW_LINE for i in x : NEW_LINE INDENT if ( x . count ( i ) > temp ) : NEW_LINE INDENT temp = x . count ( i ) NEW_LINE DEDENT DEDENT print ( temp ) NEW_LINE
def checkIfStartsWithCap ( str ) : NEW_LINE INDENT if ( str [ 0 ] >= ' A ' and str [ 0 ] <= ' Z ' ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT def check ( str ) : NEW_LINE INDENT if ( checkIfStartsWithCap ( str ) == 1 ) : NEW_LINE INDENT print ( " Accepted " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not Accepted " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = " GeeksforGeeks " NEW_LINE check ( str ) NEW_LINE str = " geeksforeks " NEW_LINE check ( str ) NEW_LINE DEDENT
def INF ( prev_ avg , x , n ) : NEW_LINE INDENT return ( prev_ avg * n + x ) / ( n + 1 ) NEW_LINE DEDENT def streamAvg ( arr , n ) : NEW_LINE INDENT avg = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT avg = INF NEW_LINE x = INF NEW_LINE if ( avg , arr [ i ] ) : NEW_LINE INDENT print ( "distance of " , i + INF , " numbers is " , avg ) NEW_LINE DEDENT DEDENT return NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 20 , 30 , 40 , 50 , 60 ] NEW_LINE n = len ( arr ) NEW_LINE streamAvg ( arr , n ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 6 NEW_LINE isprime = eulerlib . list_primality ( LIMIT ) NEW_LINE primes = eulerlib . list_primes ( LIMIT ) NEW_LINE max_ run = 0 NEW_LINE max_ run = - 1 NEW_LINE for i in range ( len ( primes ) ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( i , len ( primes ) ) : NEW_LINE INDENT sum += primes [ j ] NEW_LINE if sum > LIMIT : NEW_LINE INDENT break NEW_LINE DEDENT elif ( j - i > max_ run and sum > max_ run and isprime [ sum ] ) : NEW_LINE INDENT max_ run = sum NEW_LINE max_ run = j - i NEW_LINE DEDENT DEDENT DEDENT return str ( max_ run ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def lis ( arr , n ) : NEW_LINE INDENT max = 0 NEW_LINE lst = [ 1 for i in range ( n ) ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT if ( arr [ i ] > arr [ j ] and lst [ i ] < lst [ j ] + 1 ) : NEW_LINE INDENT lst [ i ] = lst [ j ] + 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( max < lst [ i ] ) : NEW_LINE INDENT max = lst [ i ] NEW_LINE DEDENT DEDENT return max NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Length of lst is " , lis ( arr , n ) ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE c = ( 10 ** ( b + 1 ) ) + 1 NEW_LINE if a <= c : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT
def fix ( A ) : NEW_LINE INDENT s = dict ( ) NEW_LINE for i in range ( len ( A ) ) : NEW_LINE INDENT s [ A [ i ] ] = 1 NEW_LINE DEDENT for i in range ( len ( A ) ) : NEW_LINE INDENT if i in s . keys ( ) : NEW_LINE INDENT A [ i ] = i NEW_LINE DEDENT else : NEW_LINE INDENT A [ i ] = - 1 NEW_LINE DEDENT DEDENT return A NEW_LINE DEDENT A = [ - 1 , - 1 , 6 , 1 , 9 , 3 , 2 , - 1 , 4 , - 1 ] NEW_LINE print ( fix ( A ) ) NEW_LINE
a = int ( input ( ) ) NEW_LINE b = int ( input ( ) ) NEW_LINE c = int ( input ( ) ) NEW_LINE d = int ( input ( ) ) NEW_LINE ans1 = abs ( a - b ) NEW_LINE ans2 = abs ( a - c ) NEW_LINE ans3 = abs ( b - d ) NEW_LINE ans4 = abs ( c - d ) NEW_LINE print ( min ( ans1 , ans2 , ans3 ) ) NEW_LINE
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . prev = None NEW_LINE self . next = None NEW_LINE DEDENT DEDENT def push ( head_ref , new_data ) : NEW_LINE INDENT new_node = Node ( new_data ) NEW_LINE new_node . data = new_data NEW_LINE new_node . prev = None NEW_LINE new_node . next = head_ref NEW_LINE if ( head_ref != None ) : NEW_LINE INDENT head_ref . prev = new_node NEW_LINE DEDENT head_ref = new_node NEW_LINE return head_ref NEW_LINE DEDENT def makeOddNode ( head_ref , A , n ) : NEW_LINE INDENT ptr = head_ref NEW_LINE next = 0 NEW_LINE i = 0 NEW_LINE while ( ptr != None ) : NEW_LINE INDENT next = ptr . next NEW_LINE if ( ptr . data % 2 == 0 ) : NEW_LINE INDENT ptr . data = A [ i ] NEW_LINE i += 1 NEW_LINE DEDENT ptr = next NEW_LINE DEDENT return head_ref NEW_LINE DEDENT def prList ( head ) : NEW_LINE INDENT i = 0 NEW_LINE while ( head != None ) : NEW_LINE INDENT print ( head . data , end = " " ) NEW_LINE head = head . next NEW_LINE i += 1 NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT head = None NEW_LINE Arr = [ 3 , 5 , 23 , 17 , 1 ] NEW_LINE head = push ( head , 4 ) NEW_LINE head = push ( head , 7 ) NEW_LINE head = push ( head , 8 ) NEW_LINE head = push ( head , 9 ) NEW_LINE head = push ( head , 6 ) NEW_LINE n = len ( Arr ) NEW_LINE print ( " Original List : " , end = " " ) NEW_LINE prList ( head ) NEW_LINE print ( ) NEW_LINE head = makeOddNode ( head , Arr , n ) NEW_LINE print ( " New odd List : " , end = " " ) NEW_LINE prList ( head ) NEW_LINE DEDENT
import sys NEW_LINE from sys import stdin NEW_LINE input = stdin . readline NEW_LINE def solve ( n , s ) : NEW_LINE INDENT if n > 10 : NEW_LINE INDENT return 0 NEW_LINE DEDENT dp = [ [ 0 for _ in range ( 10 ) ] for _ in range ( 3 * ( n + 1 ) ) ] NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for d in range ( 1 , n + 1 ) : NEW_LINE INDENT for s in range ( 3 * ( n + 1 ) ) : NEW_LINE INDENT dp [ d ] [ s ] += dp [ d - 1 ] [ s ] NEW_LINE DEDENT DEDENT for d in range ( 1 , n + 1 ) : NEW_LINE INDENT for s in range ( 3 * ( n + 1 ) ) : NEW_LINE INDENT dp [ d ] [ s ] += dp [ d - 1 ] [ s ] NEW_LINE DEDENT DEDENT return dp [ n ] [ s ] NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT for line in sys . stdin : NEW_LINE INDENT n , s = map ( int , line . split ( ) ) NEW_LINE ans = solve ( n , s ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
mod = 1000000007 NEW_LINE def fact ( n ) : NEW_LINE INDENT res = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT res = res * i NEW_LINE DEDENT return res NEW_LINE DEDENT def nCr ( n , r ) : NEW_LINE INDENT return fact ( n ) // ( fact ( r ) * fact ( n - r ) ) NEW_LINE DEDENT def powmod ( a , n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT pt = powmod ( a , n // 2 ) NEW_LINE pt = ( pt * pt ) % mod NEW_LINE if ( n % 2 == 1 ) : NEW_LINE INDENT return ( pt * a ) % mod NEW_LINE DEDENT else : NEW_LINE INDENT return pt NEW_LINE DEDENT DEDENT def CountSubset ( arr , n ) : NEW_LINE INDENT ans = powmod ( 2 , n - 1 ) NEW_LINE arr . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT j = i + 1 NEW_LINE while ( j < n and arr [ j ] == arr [ i ] ) : NEW_LINE INDENT r = n - 1 - j NEW_LINE l = i NEW_LINE ans = ( ans + nCr ( l + r , l ) ) % mod NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( CountSubset ( arr , n ) ) NEW_LINE DEDENT
MAX = 1000001 NEW_LINE primeUpto = [ 0 ] * MAX NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT isPrime = [ 1 ] * MAX NEW_LINE isPrime [ 0 ] = isPrime [ 1 ] = 0 NEW_LINE i = 2 NEW_LINE while i * i < MAX : NEW_LINE INDENT if ( isPrime [ i ] == 1 ) : NEW_LINE INDENT for j in range ( i * 2 , MAX , i ) : NEW_LINE INDENT isPrime [ j ] = 0 NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT for i in range ( 1 , MAX ) : NEW_LINE INDENT primeUpto [ i ] = primeUpto [ i - 1 ] NEW_LINE if ( isPrime [ i ] == 1 ) : NEW_LINE INDENT primeUpto [ i ] += 1 NEW_LINE DEDENT DEDENT DEDENT def countOfNumbers ( N , K ) : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE low , high , ans = 1 , N , 0 NEW_LINE while ( low <= high ) : NEW_LINE INDENT mid = ( low + high ) >> 1 NEW_LINE if ( mid - primeUpto [ mid ] >= K ) : NEW_LINE INDENT ans = mid NEW_LINE high = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT DEDENT if ( ans ) : NEW_LINE INDENT ans = N - ans + 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 10 NEW_LINE K = 3 NEW_LINE print ( countOfNumbers ( N , K ) ) NEW_LINE DEDENT
def countOperations ( n ) : NEW_LINE INDENT i = 2 NEW_LINE while ( ( i * i ) < n and ( n % i ) > 0 ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if ( ( i * i ) > n ) : NEW_LINE INDENT i = n NEW_LINE DEDENT return ( 1 + ( n - i ) // 2 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE print ( countOperations ( n ) ) NEW_LINE DEDENT
def solve ( ) : NEW_LINE INDENT N , Q = map ( int , input ( ) . split ( ) ) NEW_LINE S = input ( ) NEW_LINE pre = [ 0 for i in range ( N ) ] NEW_LINE li = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT if S [ i ] == ' A ' : NEW_LINE INDENT li . append ( li [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT pre . append ( li [ i ] ) NEW_LINE DEDENT DEDENT for i in range ( Q ) : NEW_LINE INDENT l , r = map ( int , input ( ) . split ( ) ) NEW_LINE print ( li [ r - 1 ] - li [ l - 1 ] ) NEW_LINE DEDENT DEDENT solve ( ) NEW_LINE
def f ( l , r ) : NEW_LINE INDENT if l == r : NEW_LINE INDENT return 0 , 1 NEW_LINE DEDENT x , y = 0 , 0 NEW_LINE while l <= r : NEW_LINE INDENT x += l NEW_LINE y += r NEW_LINE l *= 2 NEW_LINE DEDENT return x , y NEW_LINE DEDENT n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT l , r = map ( int , input ( ) . split ( ) ) NEW_LINE print ( f ( l , r ) , end = " " ) NEW_LINE print ( f ( l , r ) ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 5000 NEW_LINE MOD = 10000000000000000 NEW_LINE isprime = eulerlib . list_primality ( LIMIT * LIMIT // 2 ) NEW_LINE numSubsets = [ 0 ] * ( LIMIT * LIMIT // 2 ) NEW_LINE maxSum = 0 NEW_LINE for i in range ( LIMIT ) : NEW_LINE INDENT if not isprime [ i ] : NEW_LINE INDENT continue NEW_LINE DEDENT maxSum += i NEW_LINE for j in range ( maxSum , i , - 1 ) : NEW_LINE INDENT temp = numSubsets [ j ] + numSubsets [ j - i ] NEW_LINE if temp < MOD : NEW_LINE INDENT numSubsets [ j ] = temp NEW_LINE DEDENT else : NEW_LINE INDENT numSubsets [ j ] = temp - MOD NEW_LINE DEDENT DEDENT DEDENT ans = sum ( numSubsets ) NEW_LINE return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def countOddNumber ( row_num ) : NEW_LINE INDENT count = 0 NEW_LINE while ( row_num > 0 ) : NEW_LINE INDENT count += row_num & 1 NEW_LINE row_num >>= 1 NEW_LINE DEDENT return ( 1 << count ) NEW_LINE DEDENT def gouldSequence ( n ) : NEW_LINE INDENT for row_num in range ( n ) : NEW_LINE INDENT print ( countOddNumber ( row_num ) , end = " " ) NEW_LINE DEDENT DEDENT n = 16 NEW_LINE gouldSequence ( n ) NEW_LINE
d = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ] ; NEW_LINE n = len ( d = len ( d ) ) ; NEW_LINE def findMin ( V ) : NEW_LINE INDENT ans = [ ] ; NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT while ( V >= d [ i ] ) : NEW_LINE INDENT V -= d [ i ] ; NEW_LINE ans . append ( d [ i ] ) ; NEW_LINE DEDENT DEDENT for i in range ( 0 , len ( ans ) ) : NEW_LINE INDENT print ( ans [ i ] , end = " " ) ; NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 93 ; NEW_LINE print ( " Given number of change for " , n , " : " , end = " " ) ; NEW_LINE findMin ( n ) ; NEW_LINE DEDENT
import itertools NEW_LINE def compute ( ) : NEW_LINE INDENT for i in itertools . count ( 1 ) : NEW_LINE INDENT if i > sys . maxsize // 6 : NEW_LINE INDENT raise raise ValueError ( " Div size " ) NEW_LINE DEDENT if ( itr_n ( i ) > sys . maxsize // 6 ) : NEW_LINE INDENT raise ValueError ( " Div size " ) NEW_LINE DEDENT if ( itr_n ( i ) == ( 2 , 6 ) ) : NEW_LINE INDENT return str ( i ) NEW_LINE DEDENT DEDENT DEDENT def itr_n ( i ) : NEW_LINE INDENT return [ str ( i ) for i in range ( 2 , 6 ) if ( not ( int ( str ( i ) ) == int ( str ( i * x ) ) ) ) ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def count ( arr , n , x ) : NEW_LINE INDENT if ( x == 1 ) : NEW_LINE INDENT ans = pow ( 2 , n ) - 1 NEW_LINE return ans NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % x == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT ans = pow ( 2 , count ) - 1 NEW_LINE return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 4 , 3 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE x = 1 NEW_LINE print ( count ( arr , n , x ) ) NEW_LINE DEDENT
def findEle ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == sum - arr [ i ] ) : NEW_LINE INDENT return arr [ i ] NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findEle ( arr , n ) ) NEW_LINE DEDENT
def findExtraCharcter ( strA , strB ) : NEW_LINE INDENT m1 = [ 0 ] * 256 NEW_LINE for i in range ( len ( strB ) ) : NEW_LINE INDENT m1 [ ord ( strB [ i ] ) ] += 1 NEW_LINE DEDENT for i in range ( len ( strA ) ) : NEW_LINE INDENT m1 [ ord ( strA [ i ] ) ] -= 1 NEW_LINE DEDENT for i in range ( len ( m1 ) ) : NEW_LINE INDENT if ( m1 [ i ] == 1 ) : NEW_LINE INDENT return chr ( i ) NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT strA = " abcd " NEW_LINE strB = " cbdad " NEW_LINE print ( findExtraCharcter ( strA , strB ) ) NEW_LINE
import math NEW_LINE def main ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT data = int ( input ( ) ) NEW_LINE if data == 0 : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 101 ) : NEW_LINE INDENT for j in range ( 101 ) : NEW_LINE INDENT k = i * i NEW_LINE l = j * j NEW_LINE h = ( k - 1 ) * i NEW_LINE if l + h > data : NEW_LINE INDENT l = h NEW_LINE DEDENT if h > data : NEW_LINE INDENT ans = data NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def reconst ( n ) : NEW_LINE INDENT former = input ( ) NEW_LINE latter = input ( ) NEW_LINE formerRe = " " . join ( reversed ( former ) ) NEW_LINE latterRe = " " . join ( reversed ( latter ) ) NEW_LINE return [ former + latterRe , formerRe + latterRe , formerRe + latterRe , latter + formerRe , latterRe + formerRe ] NEW_LINE DEDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT n = int ( input ( ) ) NEW_LINE DEDENT print ( - 1 ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE flag = True NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if a [ i ] + 1 == a [ i + 1 ] : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT DEDENT print ( " YES " if flag else " NO " ) NEW_LINE
def maxSumPair ( arr1 , n1 , arr2 , n2 ) : NEW_LINE INDENT max1 = - 10 ** 9 NEW_LINE max2 = - 10 ** 9 NEW_LINE for i in range ( 0 , n1 ) : NEW_LINE INDENT if ( arr1 [ i ] > max1 ) : NEW_LINE INDENT max1 = arr1 [ i ] NEW_LINE DEDENT DEDENT for i in range ( 0 , n2 ) : NEW_LINE INDENT if ( arr2 [ i ] > max2 ) : NEW_LINE INDENT max2 = arr2 [ i ] NEW_LINE DEDENT DEDENT return max1 + max2 NEW_LINE DEDENT arr1 = [ 10 , 2 , 3 ] NEW_LINE arr2 = [ 3 , 4 , 7 ] NEW_LINE n1 = len ( arr1 ) NEW_LINE n2 = len ( arr2 ) NEW_LINE print ( maxSumPair ( arr1 , n1 , arr2 , n2 ) ) NEW_LINE
import sys NEW_LINE def operations ( op , n , k ) : NEW_LINE INDENT count = 0 NEW_LINE nVal = 0 NEW_LINE min = sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT nVal += op [ i ] NEW_LINE min = min ( min , nVal ) NEW_LINE if ( ( k + nVal ) <= 0 ) : NEW_LINE INDENT return ( i + 1 ) NEW_LINE DEDENT DEDENT if ( nVal >= 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT times = ( ( k - abs ( min ) ) // abs ( nVal ) ) NEW_LINE k = ( k - ( times * abs ( nVal ) ) ) NEW_LINE count = ( times * n ) NEW_LINE while ( k > 0 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT k = k + op [ i ] NEW_LINE count += 1 NEW_LINE if ( k <= 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT op = [ - 60 , 65 , - 1 , 14 , - 25 ] NEW_LINE n = len ( op ) NEW_LINE k = 100000 NEW_LINE print ( operations ( op , n , k ) ) NEW_LINE
from math import ceil NEW_LINE pref = [ 0 ] * ( 100010 ) NEW_LINE def isPerfectCube ( x ) : NEW_LINE INDENT cr = ceil ( x ** ( 1 / 3 ) ) NEW_LINE if ( cr * cr * cr == x ) : NEW_LINE INDENT return x NEW_LINE DEDENT return 0 NEW_LINE DEDENT def compute ( ) : NEW_LINE INDENT for i in range ( 1 , 100001 ) : NEW_LINE INDENT pref [ i ] = pref [ i - 1 ] + isPerfectCube ( i ) NEW_LINE DEDENT DEDENT def printSum ( L , R ) : NEW_LINE INDENT sum = pref [ R ] - pref [ L - 1 ] NEW_LINE print ( sum , end = " " ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT compute ( ) NEW_LINE Q = 4 NEW_LINE arr = [ [ 1 , 10 ] , [ 1 , 100 ] , [ 2 , 25 ] , [ 4 , 50 ] ] NEW_LINE for i in range ( Q ) : NEW_LINE INDENT printSum ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ) NEW_LINE DEDENT DEDENT
import sys NEW_LINE def solve ( ) : NEW_LINE INDENT n , r , l = map ( int , sys . stdin . readline ( ) . split ( ) ) NEW_LINE ans = n NEW_LINE for _ in range ( r ) : NEW_LINE INDENT d , t , x = map ( int , sys . stdin . readline ( ) . split ( ) ) NEW_LINE x -= 1 NEW_LINE if x < 0 : NEW_LINE INDENT ans = max ( ans , t ) NEW_LINE DEDENT elif x > 0 : NEW_LINE INDENT ans = max ( ans , t + x ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( solve ( ) ) NEW_LINE DEDENT
def centered_ cube ( n ) : NEW_LINE INDENT return ( 2 * n + 1 ) * ( n * n + n + 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 NEW_LINE print ( n , " th Centered cube number : " , centered_ cube ( n ) ) NEW_LINE n = 10 NEW_LINE print ( n , " th Centered cube number : " , centered_ cube ( n ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = n - 1 NEW_LINE while i >= 0 and s [ i ] == '1' : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT while i < n and s [ i + 1 ] == '0' : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if i > 0 : NEW_LINE INDENT print ( s [ : i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( s [ i : ] ) NEW_LINE DEDENT DEDENT
def nthTerm ( N ) : NEW_LINE INDENT nth = 0 NEW_LINE for i in range ( N , 0 , - 1 ) : NEW_LINE INDENT nth += pow ( i , i ) NEW_LINE DEDENT return nth NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 3 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def isPower ( 10 , 1 ) : NEW_LINE INDENT print ( ' True ' ) if ( isPower ( 10 , 1 ) ) else print ( ' False ' ) NEW_LINE print ( ' True ' ) if ( isPower ( 1 , 20 ) ) else print ( ' False ' ) NEW_LINE print ( ' True ' ) if ( isPower ( 2 , 128 ) ) else print ( ' False ' ) NEW_LINE print ( ' True ' ) if ( isPower ( 2 , 30 ) ) else print ( ' False ' ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( ' True ' ) if ( isPower ( 10 , 1 ) ) else print ( ' False ' ) NEW_LINE print ( ' True ' ) if ( isPower ( 2 , 30 ) ) else print ( ' False ' ) NEW_LINE DEDENT
def isPower ( 10 , 1 ) : NEW_LINE INDENT print ( 1 if ( isPower ( 10 , 1 ) ) else 0 ) NEW_LINE print ( 1 if ( isPower ( 1 , 20 ) ) else 0 ) NEW_LINE print ( 1 if ( isPower ( 2 , 128 ) ) else 0 ) NEW_LINE print ( 1 if ( isPower ( 2 , 30 ) ) else 0 ) NEW_LINE DEDENT def isPower ( x , y ) : NEW_LINE INDENT if ( x == 1 ) : NEW_LINE INDENT return ( y == 1 ) NEW_LINE DEDENT pow = 1 NEW_LINE while ( pow < y ) : NEW_LINE INDENT pow = pow * x NEW_LINE DEDENT return ( pow == y ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( 1 ) NEW_LINE print ( 1 ) NEW_LINE print ( 2 ) NEW_LINE print ( 1 if ( isPower ( 10 , 1 ) ) else 0 ) NEW_LINE print ( 1 if ( isPower ( 1 , 20 ) ) else 0 ) NEW_LINE print ( 1 if ( isPower ( 2 , 128 ) ) else 0 ) NEW_LINE print ( 1 if ( isPower ( 2 , 30 ) ) else 0 ) NEW_LINE DEDENT
def minimumValue ( arr , n , k ) : NEW_LINE INDENT arr = sorted ( arr ) NEW_LINE answer = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT answer += arr [ i ] * arr [ i ] NEW_LINE DEDENT return answer * ( 2 * k - 2 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 4 , 21 , 5 , 3 , 8 ] NEW_LINE k = 3 NEW_LINE n = len ( arr ) NEW_LINE print ( minimumValue ( arr , n , k ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE data = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE data . append ( s ) NEW_LINE DEDENT results = { } NEW_LINE for s in data : NEW_LINE INDENT if s [ 0 ] == ' A ' : NEW_LINE INDENT results [ s [ 1 ] ] = [ s [ 2 ] ] NEW_LINE DEDENT elif s [ 0 ] == ' B ' : NEW_LINE INDENT results [ s [ 1 ] ] = [ s [ 2 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT results [ s [ 1 ] ] = [ s [ 2 ] ] NEW_LINE DEDENT DEDENT for s in results : NEW_LINE INDENT if s [ 0 ] == ' C ' : NEW_LINE INDENT results [ s [ 1 ] ] . append ( s [ 2 ] ) NEW_LINE DEDENT elif s [ 0 ] == ' D ' : NEW_LINE INDENT results [ s [ 1 ] ] = [ s [ 2 ] ] NEW_LINE DEDENT DEDENT for s in results : NEW_LINE INDENT if s [ 0 ] == ' A ' : NEW_LINE INDENT results [ s [ 1 ] ] . append ( s [ 2 ] ) NEW_LINE DEDENT elif s [ 0 ] == ' B ' : NEW_LINE INDENT results [ s [ 1 ] ] . append ( s [ 2 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT results [ s [ 1 ] ] = [ s [ 2 ] ] NEW_LINE DEDENT DEDENT print ( 1 if len ( results ) == 0 else 0 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def countWays ( N ) : NEW_LINE INDENT E = ( N * ( N - 1 ) ) // 2 NEW_LINE if ( N == 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return pow ( 2 , E - 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE print ( countWays ( N ) ) NEW_LINE DEDENT
from math import gcd NEW_LINE def findLCM ( arr , n ) : NEW_LINE INDENT lcm = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lcm = ( lcm * arr [ i ] ) // gcd ( arr [ i ] , lcm ) NEW_LINE DEDENT return lcm NEW_LINE DEDENT def countNumbers ( arr , n , l , r ) : NEW_LINE INDENT lcm = findLCM ( arr , n ) NEW_LINE count = ( r // lcm ) - ( ( l - 1 ) // lcm ) NEW_LINE return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE l = 1 NEW_LINE r = 10 NEW_LINE print ( countNumbers ( arr , n , l , r ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE lst = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE print ( lst [ - 1 ] + lst [ - 2 ] ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE flag = True NEW_LINE for i in range ( 0 , n - 1 ) : NEW_LINE INDENT if ( a [ 2 * i ] != a [ 2 * i + 1 ] and a [ 2 * i + 1 ] != a [ 2 * i + 2 ] ) or ( a [ 2 * i + 1 ] != a [ 2 * i + 2 ] and a [ 2 * i + 1 ] == a [ 2 * i + 2 ] ) : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT DEDENT print ( " YES " if flag else " NO " ) NEW_LINE DEDENT
def MinDeletion ( a , n ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT mp [ a [ i ] ] = mp . get ( a [ i ] , 0 ) + 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in mp : NEW_LINE INDENT x = i NEW_LINE frequency = mp [ i ] NEW_LINE if ( x <= frequency ) : NEW_LINE INDENT ans += ( frequency - x ) NEW_LINE DEDENT else : NEW_LINE INDENT ans += frequency NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 2 , 3 , 2 , 3 , 4 , 4 , 4 , 4 , 5 ] NEW_LINE n = len ( a ) NEW_LINE print ( MinDeletion ( a , n ) ) NEW_LINE DEDENT
def fromStart ( inp , d ) : NEW_LINE INDENT inp1 = inp [ : d - 1 ] NEW_LINE inp2 = inp [ d : ] NEW_LINE print ( " num _ after _ E _ from _ starting " , inp1 + inp2 ) NEW_LINE DEDENT def fromEnd ( inp , d ) : NEW_LINE INDENT inp1 = inp [ : d - 1 ] NEW_LINE inp2 = inp [ d : ] NEW_LINE print ( " Check Input " , inp1 + inp2 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT inp = 1234 NEW_LINE d = 3 NEW_LINE print ( " num _ after _ E _ from _ starting " , inp ) NEW_LINE DEDENT
def nondecdigits ( n ) : NEW_LINE INDENT x = 0 NEW_LINE for x in range ( n , 0 , - 1 ) : NEW_LINE INDENT no = x NEW_LINE prev_dig = 11 NEW_LINE flag = True NEW_LINE while ( no != 0 ) : NEW_LINE INDENT if ( prev_dig < no % 10 ) : NEW_LINE INDENT flag = False NEW_LINE break NEW_LINE DEDENT prev_dig = no % 10 NEW_LINE no = int ( no / 10 ) NEW_LINE DEDENT if ( flag == True ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return x NEW_LINE DEDENT n = 200 NEW_LINE print ( nondecdigits ( n ) ) NEW_LINE
x1 , y1 , x2 , y2 = [ int ( x ) for x in input ( ) . split ( " " ) ] NEW_LINE if ( x2 - x1 ) == ( y2 - y1 ) : NEW_LINE INDENT print ( x1 , y1 , x2 + x1 , y2 ) NEW_LINE DEDENT elif ( x2 - x1 ) != ( y2 - y1 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( x1 , y1 , x2 + x1 , y2 + y1 ) NEW_LINE DEDENT
x , y = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE while 1 : NEW_LINE INDENT if x % 2 == 0 and y % 2 == 0 : NEW_LINE INDENT break NEW_LINE DEDENT elif x % 2 == 1 : NEW_LINE INDENT x = x - 2 NEW_LINE y = y - 2 NEW_LINE DEDENT elif x % 2 == 2 : NEW_LINE INDENT if y % 2 == 1 : NEW_LINE INDENT y = y - 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = x - 1 NEW_LINE y = y - 2 NEW_LINE DEDENT DEDENT elif y % 2 == 1 : NEW_LINE INDENT if x % 2 == 0 : NEW_LINE INDENT y = y - 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = x - 1 NEW_LINE y = y - 2 NEW_LINE DEDENT DEDENT elif x % 2 == 2 : NEW_LINE INDENT if y % 2 == 1 : NEW_LINE INDENT y = y - 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = x - 1 NEW_LINE y = y - 2 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if x == y : NEW_LINE INDENT print ( " Hanako " ) NEW_LINE DEDENT elif x == y : NEW_LINE INDENT print ( " Cop " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Cop " ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE w = [ ] NEW_LINE b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE w . append ( m - s . count ( " . " ) ) NEW_LINE b . append ( m - s . count ( " . " ) ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT print ( " W " * ( m - 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT if w [ i ] % 2 : NEW_LINE INDENT print ( " B " * ( m - 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " - " * ( m - 1 ) ) NEW_LINE DEDENT DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if n == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT elif n == 2 : NEW_LINE INDENT if l [ 0 ] == 1 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for i in range ( n - 2 ) : NEW_LINE INDENT l1 = l . count ( l [ i ] ) NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT l1 = l1 + l [ j ] NEW_LINE DEDENT if l1 > 1 : NEW_LINE INDENT print ( max ( l1 , 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT DEDENT DEDENT
def countDist dict ( arr , n ) : NEW_LINE INDENT vis = dict ( ) NEW_LINE ans = 0 NEW_LINE j = 0 NEW_LINE k = len ( arr ) NEW_LINE while ( j < n ) : NEW_LINE INDENT while ( j < n and win < k ) : NEW_LINE INDENT vis [ arr [ j ] ] = vis . get ( arr [ j ] , 0 ) + 1 NEW_LINE if ( vis [ arr [ j ] ] == 1 ) : NEW_LINE INDENT win += 1 NEW_LINE DEDENT j += 1 NEW_LINE DEDENT if ( win == k ) : NEW_LINE INDENT ans += ( n - j + 1 ) NEW_LINE DEDENT vis [ arr [ j ] ] = vis . get ( arr [ j ] , 0 ) - 1 NEW_LINE if ( vis [ arr [ j ] ] == 0 ) : NEW_LINE INDENT win -= 1 NEW_LINE DEDENT j += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 1 , 3 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countDist dict ( arr , n ) ) NEW_LINE DEDENT
n , s = int ( input ( ) ) , int ( input ( ) ) NEW_LINE max = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT f , t = map ( int , input ( ) . split ( ) ) NEW_LINE if f > max : NEW_LINE INDENT max = f NEW_LINE DEDENT if f + t > s : NEW_LINE INDENT s = s + t NEW_LINE DEDENT DEDENT print ( max ) NEW_LINE
def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n <= 3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT i = 5 NEW_LINE while ( i * i <= n ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT i += 6 NEW_LINE DEDENT return True NEW_LINE DEDENT def primeBitsInRange ( l , r ) : NEW_LINE INDENT tot_bit , count = 0 , 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT tot_bit = bin ( i ) . count ( '1' ) NEW_LINE if ( isPrime ( tot_bit ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT l = 6 NEW_LINE r = 10 NEW_LINE print ( primeBitsInRange ( l , r ) ) NEW_LINE
def countSetBits ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while ( n ) : NEW_LINE INDENT n &= ( n - 1 ) NEW_LINE count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT def pairs ( arr , n , k ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT sum = ( countSetBits ( arr [ i ] ) + countSetBits ( arr [ j ] ) ) NEW_LINE if ( sum == k ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 4 NEW_LINE print ( pairs ( arr , n , k ) ) NEW_LINE
from queue import Queue NEW_LINE def reverseQueueFirstKElements ( k ) : NEW_LINE INDENT if ( len ( queue ) == True or k > len ( queue ) ) : NEW_LINE INDENT return NEW_LINE DEDENT if ( k <= 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT stack = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT stack . append ( queue [ 0 ] ) NEW_LINE queue . pop ( ) NEW_LINE DEDENT while ( len ( stack ) != 0 ) : NEW_LINE INDENT queue . append ( stack [ 0 ] ) NEW_LINE stack . pop ( ) NEW_LINE DEDENT for i in range ( 1 , len ( queue ) - k + 1 ) : NEW_LINE INDENT queue . append ( queue [ i ] ) NEW_LINE queue . pop ( ) NEW_LINE DEDENT DEDENT def Print ( ) : NEW_LINE INDENT while ( len ( queue ) != 0 ) : NEW_LINE INDENT print ( queue [ 0 ] , end = " " ) NEW_LINE queue . pop ( 0 ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT queue = Queue ( ) NEW_LINE queue . append ( 10 ) NEW_LINE queue . append ( 20 ) NEW_LINE queue . append ( 30 ) NEW_LINE queue . append ( 40 ) NEW_LINE queue . append ( 50 ) NEW_LINE queue . append ( 60 ) NEW_LINE queue . append ( 70 ) NEW_LINE queue . append ( 80 ) NEW_LINE queue . append ( 90 ) NEW_LINE queue . append ( 100 ) NEW_LINE k = 5 NEW_LINE reverseQueueFirstKElements ( k ) NEW_LINE Print ( ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if sum ( a ) % 2 == 0 : NEW_LINE INDENT print ( " maomao90" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " errorgorn " ) NEW_LINE DEDENT DEDENT
def xor calc ( k ) : NEW_LINE INDENT if ( k == 1 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( ( ( k + 1 ) & k ) == 0 ) : NEW_LINE INDENT return k // 2 NEW_LINE DEDENT return 1 NEW_LINE DEDENT k = 31 NEW_LINE print ( xor calc ( k ) ) NEW_LINE
class Solution ( object ) : NEW_LINE INDENT def isPerfectSquare ( self , num ) : NEW_LINE INDENT low = 1 NEW_LINE high = num NEW_LINE while ( low <= high ) : NEW_LINE INDENT mid = ( low + high ) >> 1 NEW_LINE if ( mid * mid == num ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif ( mid * mid < num ) : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT high = mid - 1 NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE n = 16 NEW_LINE out = sObj . isPerfectSquare ( n ) NEW_LINE print ( out ) NEW_LINE DEDENT
a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a + b + c ) % 2 == 0 and ( a + b + c ) >= 2 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = [ * map ( int , input ( ) . split ( ) ) ] NEW_LINE s = sum ( a ) NEW_LINE a . sort ( ) NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == s : NEW_LINE INDENT ans . append ( i + 1 ) NEW_LINE DEDENT DEDENT print ( len ( ans ) ) NEW_LINE print ( * ans ) NEW_LINE
from collections import deque NEW_LINE n , m = map ( int , input ( ) . split ( ) ) NEW_LINE que = deque ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT name , time = input ( ) . split ( ) NEW_LINE time = int ( time ) NEW_LINE if time > m : NEW_LINE INDENT que . appendleft ( [ name , time ] ) NEW_LINE DEDENT else : NEW_LINE INDENT que . append ( [ name , time ] ) NEW_LINE DEDENT DEDENT total_length = sum ( [ int ( time ) for time in que ] ) NEW_LINE c = 1 NEW_LINE while c < m : NEW_LINE INDENT _q = que . popleft ( ) NEW_LINE if _q [ 0 ] <= time : NEW_LINE INDENT total_length += c NEW_LINE c += 1 NEW_LINE DEDENT else : NEW_LINE INDENT total_length += c NEW_LINE c -= 1 NEW_LINE DEDENT DEDENT print ( * total_length ) NEW_LINE
def findElement ( arr , ranges , rotations , index ) : NEW_LINE INDENT for i in range ( rotations - 1 , - 1 , - 1 ) : NEW_LINE INDENT left = ranges [ i ] [ 0 ] NEW_LINE right = ranges [ i ] [ 1 ] NEW_LINE if ( left <= index and right >= index ) : NEW_LINE INDENT if ( index == left ) : NEW_LINE INDENT index = right NEW_LINE DEDENT else : NEW_LINE INDENT index -= 1 NEW_LINE DEDENT DEDENT DEDENT return arr [ index ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE rotations = 2 NEW_LINE ranges = [ [ 0 , 2 ] , [ 0 , 3 ] ] NEW_LINE index = 1 NEW_LINE print ( findElement ( arr , ranges , rotations , index ) ) NEW_LINE DEDENT
MAXN = 1000001 NEW_LINE spf = [ 0 ] * MAXN NEW_LINE hash1 = [ 0 ] * MAXN NEW_LINE def sieve ( ) : NEW_LINE INDENT spf [ 1 ] = 1 NEW_LINE for i in range ( 2 , MAXN ) : NEW_LINE INDENT spf [ i ] = i NEW_LINE DEDENT for i in range ( 4 , MAXN , 2 ) : NEW_LINE INDENT spf [ i ] = 2 NEW_LINE DEDENT i = 3 NEW_LINE while i * i < MAXN : NEW_LINE INDENT if ( spf [ i ] == i ) : NEW_LINE INDENT for j in range ( i * i , MAXN , i ) : NEW_LINE INDENT if ( spf [ j ] == j ) : NEW_LINE INDENT spf [ j ] = i NEW_LINE DEDENT DEDENT DEDENT i += 1 NEW_LINE DEDENT DEDENT def getFactorization ( x ) : NEW_LINE INDENT while ( x != 1 ) : NEW_LINE INDENT temp = spf [ x ] NEW_LINE if ( x % temp == 0 ) : NEW_LINE INDENT hash1 [ spf [ x ] ] += 1 NEW_LINE x = x // spf [ x ] NEW_LINE DEDENT while ( x % temp == 0 ) : NEW_LINE INDENT x = x // temp NEW_LINE DEDENT DEDENT DEDENT def check ( x ) : NEW_LINE INDENT while ( x != 1 ) : NEW_LINE INDENT temp = spf [ x ] NEW_LINE if ( x % temp == 0 and hash1 [ temp ] > 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT while ( x % temp == 0 ) : NEW_LINE INDENT x = x // temp NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def hasValidNum ( arr , n ) : NEW_LINE INDENT sieve ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT getFactorization ( arr [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( check ( arr [ i ] ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 8 , 4 , 10 , 6 , 7 ] NEW_LINE n
def isExists ( a , n ) : NEW_LINE INDENT freq = dict ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ a [ i ] ] = freq . get ( a [ i ] , 0 ) + 1 NEW_LINE sum += a [ i ] NEW_LINE DEDENT if ( sum % 2 == 0 ) : NEW_LINE INDENT if ( freq [ sum // 2 ] != 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 5 , 1 , 2 , 2 ] NEW_LINE n = len ( a ) NEW_LINE if ( isExists ( a , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def areaOfKite ( d1 , d2 ) : NEW_LINE INDENT area = ( d1 * d2 ) / 2 NEW_LINE return area NEW_LINE DEDENT d1 = 4 NEW_LINE d2 = 6 NEW_LINE print ( " Area of Kite = " , areaOfKite ( d1 , d2 ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE ans = ' | ' + ' . " * ( - 2 ** ( n // 3 ) ) + ' . ' * ( 2 ** ( n // 3 ) ) NEW_LINE print ( ans ) NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT print ( ans + ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 2 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' + ' . ' * ( ( n + 2 ) // 3 ) + ' | ' if i % 3 == 0 else ' | ' NEW_LINE print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE if n % 2 != 0 or n == 2 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT
def productEqual ( n ) : NEW_LINE INDENT if ( n < 10 ) : NEW_LINE INDENT return False NEW_LINE DEDENT prodOdd = 1 NEW_LINE prodEven = 1 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT digit = n % 10 NEW_LINE prodOdd *= digit NEW_LINE n = int ( n / 10 ) NEW_LINE if ( n == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT digit = n % 10 NEW_LINE prodEven *= digit NEW_LINE n = int ( n / 10 ) NEW_LINE DEDENT if ( prodEven == prodOdd ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 406 NEW_LINE if ( productEqual ( n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def solve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : return - 1 NEW_LINE A = input ( ) . split ( ) NEW_LINE n1 = int ( A [ 0 ] ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ i ] == ' a ' : A [ i ] = ' h ' NEW_LINE if s [ i ] == ' h ' : A [ i ] = ' i ' NEW_LINE if s [ i ] == ' i ' : A [ i ] = ' j ' NEW_LINE if s [ i ] == ' j ' : A [ i ] = ' k ' NEW_LINE if s [ i ] == ' l ' : A [ i ] = ' l ' NEW_LINE if s [ i ] == ' m ' : A [ i ] = ' p ' NEW_LINE if s [ i ] == ' o ' : A [ i ] = ' q ' NEW_LINE DEDENT print ( ' ' . join ( map ( str , A ) ) ) NEW_LINE DEDENT solve ( ) NEW_LINE
def checkEVENodd ( arr , n , l , r ) : NEW_LINE INDENT if ( arr [ r ] == 1 ) : NEW_LINE INDENT print ( " odd " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " even " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 1 , 0 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE checkEVENodd ( arr , n , 1 , 3 ) NEW_LINE DEDENT
import sys NEW_LINE from collections import deque NEW_LINE sys . setrecursionlimit ( 10 ** 6 ) NEW_LINE def S ( ) : return sys . stdin . readline ( ) . rstrip ( ) NEW_LINE def SL ( ) : return map ( str , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) NEW_LINE def I ( ) : return int ( sys . stdin . readline ( ) . rstrip ( ) ) NEW_LINE def IL ( ) : return map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) NEW_LINE def LS ( ) : return list ( sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) NEW_LINE def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . rstrip ( ) . split ( ) ) ) NEW_LINE def main ( ) : NEW_LINE INDENT w , h , x , y , r = IL ( ) NEW_LINE if x + r <= w and y + r <= h : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def findPrime ( n ) : NEW_LINE INDENT num = n + 1 NEW_LINE while ( num > 0 ) : NEW_LINE INDENT if ( isPrime ( num ) ) : NEW_LINE INDENT return num NEW_LINE DEDENT num = num + 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT def minNumber ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT if ( isPrime ( sum ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT num = findPrime ( sum ) NEW_LINE return num - sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 4 , 6 , 8 , 12 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minNumber ( arr , n ) ) NEW_LINE DEDENT
def compositeProduct ( arr , n ) : NEW_LINE INDENT max_val = max ( arr ) NEW_LINE prime = ( max_val + 1 ) * [ True ] NEW_LINE prime [ 0 ] = True NEW_LINE prime [ 1 ] = True NEW_LINE for p in range ( 2 , int ( max_val ** ( 1 / 2 ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , max_val + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( not prime [ arr [ i ] ] ) : NEW_LINE INDENT product *= arr [ i ] NEW_LINE DEDENT DEDENT return product NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 5 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( compositeProduct ( arr , n ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT try : print ( max ( 0 , int ( input ( ) ) - 1 ) , min ( 0 , int ( input ( ) ) - 1 ) ) NEW_LINE except : break NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ 0 ] == " J " and s [ 1 ] == " po " and s [ 2 ] == " k <= " : NEW_LINE INDENT print ( " KONESE " ) NEW_LINE DEDENT elif s [ 0 ] == " m " and s [ 1 ] == " e " and s [ 2 ] == " o " : NEW_LINE INDENT print ( " JONESE " ) NEW_LINE DEDENT elif s [ 0 ] == " o " and s [ 1 ] == " k " and s [ 2 ] == " e " : NEW_LINE INDENT print ( " JONESE " ) NEW_LINE DEDENT elif s [ 0 ] == " l " and s [ 1 ] == " o " and s [ 2 ] == " k " : NEW_LINE INDENT print ( " KONESE " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " INF " ) NEW_LINE DEDENT DEDENT
def findSum ( arr , n , left , right ) : NEW_LINE INDENT k = right - left NEW_LINE d = arr [ 1 ] - arr [ 0 ] NEW_LINE ans = arr [ left - 1 ] * ( k + 1 ) NEW_LINE ans = ans + ( d * ( k * ( k + 1 ) ) ) // 2 NEW_LINE return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 ] NEW_LINE queries = 3 NEW_LINE q = [ [ 2 , 4 ] , [ 2 , 6 ] , [ 5 , 6 ] ] NEW_LINE n = len ( arr ) NEW_LINE for i in range ( queries ) : NEW_LINE INDENT print ( findSum ( arr , n , q [ i ] [ 0 ] , q [ i ] [ 1 ] ) ) NEW_LINE DEDENT DEDENT
def maxResult ( n , a , b , c ) : NEW_LINE INDENT maxVal = 0 NEW_LINE for i in range ( 0 , n + 1 , a ) : NEW_LINE INDENT for j in range ( 0 , n - i + 1 , b ) : NEW_LINE INDENT z = ( n - ( i + j ) ) // c NEW_LINE if ( z == ( int ( z ) ) ) : NEW_LINE INDENT x = i // a NEW_LINE y = j // b NEW_LINE maxVal = max ( maxVal , x + y + z ) NEW_LINE DEDENT DEDENT DEDENT return maxVal NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 10 NEW_LINE a = 5 NEW_LINE b = 3 NEW_LINE c = 4 NEW_LINE print ( maxResult ( n , a , b , c ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT data = list ( ) NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT data . append ( int ( input ( ) ) ) NEW_LINE DEDENT print ( * sorted ( data , key = lambda x : x [ 0 ] , reverse = True ) , sep = ' \n ' ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def fact ( n ) : NEW_LINE INDENT ans = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT ans = ans * i NEW_LINE DEDENT return ( ans ) NEW_LINE DEDENT def numberOfPossiblePallindrome ( strr , n ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if strr [ i ] not in mp . keys ( ) : NEW_LINE INDENT mp [ strr [ i ] ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ strr [ i ] ] += 1 NEW_LINE DEDENT DEDENT k = 0 NEW_LINE num = 0 NEW_LINE den = 1 NEW_LINE fi = 1 NEW_LINE for it in mp : NEW_LINE INDENT if ( mp [ it ] % 2 == 0 ) : NEW_LINE INDENT fi = mp [ it ] // 2 NEW_LINE DEDENT else : NEW_LINE INDENT fi = ( mp [ it ] - 1 ) // 2 NEW_LINE k += 1 NEW_LINE DEDENT num = num + fi NEW_LINE den = den * fact ( fi ) NEW_LINE DEDENT if ( num != 0 ) : NEW_LINE INDENT num = fact ( num ) NEW_LINE DEDENT ans = num // den NEW_LINE if ( k != 0 ) : NEW_LINE INDENT ans = ans * k NEW_LINE DEDENT return ( ans ) NEW_LINE DEDENT strr = " ababab " NEW_LINE n = len ( strr ) NEW_LINE print ( numberOfPossiblePallindrome ( strr , n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE def func ( l , r ) : NEW_LINE INDENT if r < l : NEW_LINE INDENT return 1 NEW_LINE DEDENT mid = ( r + l ) // 2 NEW_LINE return func ( l , mid ) + func ( mid - 1 , r ) NEW_LINE DEDENT res = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT l = a [ i ] NEW_LINE r = a [ i + 1 ] NEW_LINE if func ( l , r ) : NEW_LINE INDENT res += func ( l , r ) NEW_LINE DEDENT DEDENT print ( res ) NEW_LINE
def toggleLastMBits ( n , m ) : NEW_LINE INDENT num = ( 1 << m ) - 1 NEW_LINE return ( n ^ num ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 107 NEW_LINE m = 4 NEW_LINE n = toggleLastMBits ( n , m ) NEW_LINE print ( n ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT m = [ * input ( ) ] NEW_LINE a_c = 0 NEW_LINE b_c = 0 NEW_LINE c_c = 0 NEW_LINE if m [ 0 ] == ' A ' : NEW_LINE INDENT a_c += 1 NEW_LINE DEDENT if m [ 1 ] == ' B ' : NEW_LINE INDENT b_c += 1 NEW_LINE DEDENT if a_c > b_c : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT elif b_c > c_c : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT if a_c == b_c : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT
def first_subString ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE c = 0 NEW_LINE s1 , s2 = " " , " " NEW_LINE mpp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == ' ' or s [ i ] == ' # ' ) : NEW_LINE INDENT s1 = s [ : i ] + s [ i + 1 : ] NEW_LINE mpp [ s1 ] = 1 NEW_LINE c = i + 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == ' ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( n ) : NEW_LINE INDENT if ( s [ i ] == ' ' ) : NEW_LINE INDENT break NEW_LINE DEDENT s1 = s [ i : j - i + 1 ] NEW_LINE s2 = s1 NEW_LINE s1 = s1 [ : : - 1 ] NEW_LINE s1 = " " . join ( s1 ) NEW_LINE if ( s1 in mpp ) : NEW_LINE INDENT return s2 NEW_LINE DEDENT DEDENT DEDENT return " - 1" NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " mango is sweet \n it # " NEW_LINE s1 = first_subString ( s ) NEW_LINE print ( s1 ) NEW_LINE DEDENT
def countConsecutive ( n ) : NEW_LINE INDENT s = str ( n ) NEW_LINE count = 0 NEW_LINE for i in range ( 0 , len ( s ) - 1 ) : NEW_LINE INDENT if ( s [ i ] == s [ i + 1 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 44522255 NEW_LINE print ( countConsecutive ( n ) ) NEW_LINE DEDENT
def findAngle ( n ) : NEW_LINE INDENT interiorAngle = ( n - 2 ) * 180 / n NEW_LINE exteriorAngle = 360 / n NEW_LINE print ( " Interior angle : " , c = exteriorAngle ) NEW_LINE print ( " Exterior angle : " , exteriorAngle ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 10 NEW_LINE findAngle ( n ) NEW_LINE DEDENT
from math import sqrt NEW_LINE def nDigitPerfectSquares ( n ) : NEW_LINE INDENT print ( pow ( ceil ( sqrt ( pow ( 10 , n - 1 ) ) ) , 2 ) , end = " " ) NEW_LINE print ( pow ( ceil ( sqrt ( pow ( 10 , n ) ) ) - 1 , 2 ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 NEW_LINE nDigitPerfectSquares ( n ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) . split ( ) NEW_LINE ans = " Yes " NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == " ) " : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = " No " NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
from collections import defaultdict , deque NEW_LINE from functools import lru_cache NEW_LINE from heapq import heappush , heappop NEW_LINE from typing import Counter NEW_LINE from bisect import bisect_right , bisect_left NEW_LINE import math NEW_LINE hpop = heappop NEW_LINE hpush = heappush NEW_LINE def solution ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE res = 0 NEW_LINE sh = set ( ) NEW_LINE for i in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT if s [ i ] == s [ i + 1 ] : NEW_LINE INDENT sh . add ( i ) NEW_LINE DEDENT DEDENT print ( len ( sh ) ) NEW_LINE print ( * sh ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT t = 1 NEW_LINE for _ in range ( t ) : NEW_LINE INDENT solution ( ) NEW_LINE DEDENT DEDENT main ( ) NEW_LINE
import math NEW_LINE discard_count = 0 NEW_LINE def power ( a , n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT p = power ( a , n // 2 ) NEW_LINE p = p * p NEW_LINE if ( n % 2 == 1 ) : NEW_LINE INDENT p = p * a NEW_LINE DEDENT return p NEW_LINE DEDENT def solve ( i , n , sum , k , a , prefix ) : NEW_LINE INDENT if ( sum > k ) : NEW_LINE INDENT discard_count += power ( 2 , n - i ) NEW_LINE return NEW_LINE DEDENT if ( i == n ) : NEW_LINE INDENT return NEW_LINE DEDENT rem = prefix [ n - 1 ] - prefix [ i ] NEW_LINE if ( sum + a [ i ] + rem > k ) : NEW_LINE INDENT solve ( i + 1 , n , sum + a [ i ] , k , a , prefix ) NEW_LINE DEDENT if ( sum + rem > k ) : NEW_LINE INDENT solve ( i + 1 , n , sum , k , a , prefix ) NEW_LINE DEDENT DEDENT def countSubsequences ( arr , n , K ) : NEW_LINE INDENT sum = 0.0 NEW_LINE k = math . log ( K ) NEW_LINE prefix = [ 0 ] * ( n ) NEW_LINE a = [ 0 ] * ( n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ i ] = math . log ( arr [ i ] ) NEW_LINE sum += a [ i ] NEW_LINE DEDENT prefix [ 0 ] = a [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT prefix [ i ] = prefix [ i - 1 ] + a [ i ] NEW_LINE DEDENT total = power ( 2 , n ) - 1 NEW_LINE if ( sum <= k ) : NEW_LINE INDENT return total NEW_LINE DEDENT DEDENT solve ( 0 , n , 0.0 , k , a , prefix ) NEW_LINE return ( total - discard_count ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 4 , 8 , 7 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE k = 50 NEW_LINE print
class newNode : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT def newNode ( data ) : NEW_LINE INDENT node = ( newNode ( data ) ) NEW_LINE node . data = data NEW_LINE node . left = None NEW_LINE node . right = None NEW_LINE return node NEW_LINE DEDENT def inorder ( root ) : NEW_LINE INDENT if ( root == None ) : NEW_LINE INDENT return NEW_LINE DEDENT inorder ( root . left ) NEW_LINE print ( root . data , end = " " ) NEW_LINE inorder ( root . right ) NEW_LINE DEDENT def is ele ( root1 , root2 ) : NEW_LINE INDENT if ( root1 == None and root2 == None ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif ( root1 != None and root2 == None ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( root1 == None and root2 != None ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT if ( root1 . data == root2 . data and is ele ( root1 . left , root2 . left ) == 1 and is ele ( root1 . right , root2 . right ) == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT DEDENT root1 = newNode ( 5 ) NEW_LINE root2 = newNode ( 5 ) NEW_LINE root1 . left = newNode ( 3 ) NEW_LINE root1 . right = newNode ( 8 ) NEW_LINE root1 . left . left = newNode ( 2 ) NEW_LINE root1 . left . right = newNode ( 4 ) NEW_LINE root2 . left = newNode ( 3 ) NEW_LINE root2 . right = newNode ( 8 ) NEW_LINE root2 . left . left = newNode ( 2 ) NEW_LINE root2 . left . left = newNode ( 2 ) NEW_LINE root2 . left . right = newNode ( 4 ) NEW_LINE if ( is ele ( root1 , root2 ) == 1 ) : NEW_LINE INDENT print ( " HashSet BSTs are 100 10001 " ) NEW_LINE DEDENT else : NEW_LINE INDENT print
def main ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE o = 0 NEW_LINE i = 0 NEW_LINE while i < n : NEW_LINE INDENT if s [ i ] == " J " : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if s [ i ] == " O " : NEW_LINE INDENT o += 1 NEW_LINE DEDENT if s [ i ] == " I " : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT j_i = 0 NEW_LINE o_i = 0 NEW_LINE i_j = 0 NEW_LINE while i < n : NEW_LINE INDENT if s [ i ] == " J " : NEW_LINE INDENT j_i += 1 NEW_LINE DEDENT if s [ i ] == " I " : NEW_LINE INDENT o += 1 NEW_LINE DEDENT if s [ i ] == " O " : NEW_LINE INDENT i_j += 1 NEW_LINE DEDENT DEDENT max_j = 0 NEW_LINE max_i = 0 NEW_LINE for j in range ( 1 , n ) : NEW_LINE INDENT max_j = max ( max_j , j_i ) NEW_LINE max_i = max ( max_i , o_i ) NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT max_j = max ( max_j , j_i ) NEW_LINE max_i = max ( max_i , o_i ) NEW_LINE DEDENT print ( max_j + o_i * max_j ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
N = int ( input ( ) ) NEW_LINE c = list ( input ( ) . split ( ) ) NEW_LINE n = 0 NEW_LINE m = 0 NEW_LINE s = 0 NEW_LINE t = 0 NEW_LINE r = 0 NEW_LINE if c [ 1 ] == ' W ' : NEW_LINE INDENT n = 1 NEW_LINE m = 5 NEW_LINE DEDENT elif c [ 1 ] == ' E ' : NEW_LINE INDENT n = 2 NEW_LINE m = 5 NEW_LINE DEDENT elif c [ 1 ] == ' S ' : NEW_LINE INDENT n = 3 NEW_LINE m = 5 NEW_LINE DEDENT if c [ 1 ] == ' W ' : NEW_LINE INDENT t = 1 NEW_LINE DEDENT if c [ 1 ] == ' E ' : NEW_LINE INDENT t = 2 NEW_LINE DEDENT if c [ 1 ] == ' S ' : NEW_LINE INDENT n = 3 NEW_LINE m = 5 NEW_LINE DEDENT elif c [ 1 ] == ' W ' : NEW_LINE INDENT t = 1 NEW_LINE DEDENT if c [ 1 ] == ' E ' : NEW_LINE INDENT n = 4 NEW_LINE m = 5 NEW_LINE DEDENT elif c [ 1 ] == ' S ' : NEW_LINE INDENT n = 3 NEW_LINE m = 5 NEW_LINE DEDENT if c [ 2 ] == ' W ' : NEW_LINE INDENT t = 2 NEW_LINE DEDENT if c [ 2 ] == ' E ' : NEW_LINE INDENT n = 4 NEW_LINE m = 5 NEW_LINE DEDENT if c [ 3 ] == ' S ' : NEW_LINE INDENT t = 3 NEW_LINE DEDENT if c [ 2 ] == ' W ' : NEW_LINE INDENT t = 4 NEW_LINE DEDENT if c [ 3 ] == ' E ' : NEW_LINE INDENT t = 5 NEW_LINE DEDENT if c [ 4 ] == ' S ' : NEW_LINE INDENT t = 6 NEW_LINE DEDENT if c [ 5 ] == ' E ' : NEW_LINE INDENT t = 7 NEW_LINE DEDENT if c [ 4 ] == ' W ' : NEW_LINE INDENT t = 8 NEW_LINE DEDENT if c [ 5 ] == ' E ' : NEW_LINE INDENT t = 9 NEW_LINE DEDENT if c [ 6 ] == ' S ' : NEW_LINE INDENT t = 6 NEW_LINE DEDENT if c [
class node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = None NEW_LINE DEDENT DEDENT def add ( data ) : NEW_LINE INDENT Node ( data ) NEW_LINE final = node ( data ) NEW_LINE final . data = data NEW_LINE final . next = None NEW_LINE DEDENT def printArr ( a , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( a [ i ] , end = " " ) NEW_LINE DEDENT DEDENT def findlength ( head ) : NEW_LINE INDENT curr = head NEW_LINE cnt = 0 NEW_LINE while ( curr != None ) : NEW_LINE INDENT cnt += 1 NEW_LINE curr = curr . next NEW_LINE DEDENT return cnt NEW_LINE DEDENT def convertArr ( head ) : NEW_LINE INDENT len1 = findlength ( head ) NEW_LINE arr = [ 0 ] * len1 NEW_LINE index = 0 NEW_LINE curr = head NEW_LINE while ( curr != None ) : NEW_LINE INDENT arr [ index ] = curr . data NEW_LINE index += 1 NEW_LINE curr = curr . next NEW_LINE DEDENT printArr ( arr , len1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT head = node ( 1 ) NEW_LINE head . next = add ( 2 ) NEW_LINE head . next . next = add ( 3 ) NEW_LINE head . next . next . next = add ( 4 ) NEW_LINE head . next . next . next . next = add ( 5 ) NEW_LINE convertArr ( head ) NEW_LINE DEDENT
def nonDecNums ( n ) : NEW_LINE INDENT a = [ [ 0 for i in range ( 10 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( 1 , 10 ) : NEW_LINE INDENT a [ 0 ] [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a [ i ] [ 9 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 8 , - 1 , - 1 ) : NEW_LINE INDENT a [ i ] [ j ] = ( a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ) NEW_LINE DEDENT DEDENT return a [ n ] [ 0 ] NEW_LINE DEDENT n = 2 NEW_LINE print ( " Non - decreasing digits = " , nonDecNums ( n ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE f = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ( i + a [ i ] ) % n + 1 ) : NEW_LINE INDENT f = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if ( f == - 1 ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def minMoves ( self , nums ) : NEW_LINE INDENT if len ( nums ) == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT nums . sort ( ) NEW_LINE min_num = nums [ 0 ] NEW_LINE ans = 0 NEW_LINE for num in nums : NEW_LINE INDENT ans += num - min_num NEW_LINE DEDENT return ans NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE nums = [ 1 , 2 , 3 ] NEW_LINE out = sObj . minMoves ( nums ) NEW_LINE print ( out ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ' Negative ' if ( b - a ) % 2 == 0 else ' Negative ' ) NEW_LINE
def firstSetBit ( n ) : NEW_LINE INDENT x = n & ( n - 1 ) NEW_LINE return ( n ^ x ) NEW_LINE DEDENT n = 12 NEW_LINE print ( firstSetBit ( n ) ) NEW_LINE
MAX_CHAR = 256 NEW_LINE def maximumChars ( str ) : NEW_LINE INDENT n = len ( str ) NEW_LINE res = - 1 NEW_LINE firstInd = [ - 1 ] * ( MAX_CHAR ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT first_ind = firstInd [ ord ( str [ i ] ) ] NEW_LINE if ( first_ind == - 1 ) : NEW_LINE INDENT firstInd [ ord ( str [ i ] ) ] = i NEW_LINE DEDENT else : NEW_LINE INDENT res = max ( res , abs ( i - first_ind - 1 ) ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " abba " NEW_LINE print ( maximumChars ( str ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT v , m = map ( int , input ( ) . split ( ) ) NEW_LINE a . append ( [ v , m ] ) NEW_LINE DEDENT a . sort ( key = lambda x : x [ 1 ] ) NEW_LINE l = 0 NEW_LINE r = 0 NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT while r < n and a [ r ] [ 0 ] - a [ l ] [ 1 ] >= k : NEW_LINE INDENT l += 1 NEW_LINE r += 1 NEW_LINE DEDENT ans = max ( ans , l ) NEW_LINE DEDENT print ( ans ) NEW_LINE
import math NEW_LINE def findArea ( a ) : NEW_LINE INDENT area = ( 5 * math . sqrt ( 3 ) * a * a ) NEW_LINE return area NEW_LINE DEDENT def find volume ( a ) : NEW_LINE INDENT volume = ( 5 / 12 ) * ( 3 + math . sqrt ( 5 ) * a * a * a ) NEW_LINE return volume NEW_LINE DEDENT a = 5 NEW_LINE print ( " Area : " , findArea ( a ) ) NEW_LINE print ( " Volume : " , find volume ( a ) ) NEW_LINE
def compute ( ) : NEW_LINE INDENT PY dict dict = { } NEW_LINE for i in range ( 9 ) : NEW_LINE INDENT nine = conv ( ninePyalrown , PY dict [ i ] ) NEW_LINE DEDENT PY dict [ 1 ] = 1 NEW_LINE for i in range ( 6 ) : NEW_LINE INDENT sixCubicrown = conv ( sixCubicrown , CUB_ dic_ dic_ dic ) NEW_LINE DEDENT numer = 0 NEW_LINE for i in range ( len ( ninePyramidalrown ) ) : NEW_LINE INDENT numer += ninePyramidalrown [ i ] * sum ( sixCubicrown , 0 , i ) NEW_LINE DEDENT denom = ( sum ( ninePyramidalrown ) * sum ( sixC dic , 0 , ninePyramidalrown ) ) NEW_LINE return format ( numer / denom ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
N = 6 NEW_LINE Even = N // 2 NEW_LINE Odd = N - Even NEW_LINE print ( Even * Odd ) NEW_LINE
def solve ( M , N , s ) : NEW_LINE INDENT if ( N % s == 0 ) : NEW_LINE INDENT N = N // s NEW_LINE DEDENT else : NEW_LINE INDENT N = ( N // s ) + 1 NEW_LINE DEDENT if ( M % s == 0 ) : NEW_LINE INDENT M = M // s NEW_LINE DEDENT else : NEW_LINE INDENT M = ( M // s ) + 1 NEW_LINE DEDENT return M * N NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N , M , s = 12 , 13 , 4 NEW_LINE print ( solve ( M , N , s ) ) NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b ; NEW_LINE DEDENT return gcd ( b % a , a ) ; NEW_LINE DEDENT def lcm ( a , b ) : NEW_LINE INDENT return ( a * b ) // gcd ( a , b ) ; NEW_LINE DEDENT def countPairs ( arr , n ) : NEW_LINE INDENT ans = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( lcm ( arr [ i ] , arr [ j ] ) == gcd ( arr [ i ] , arr [ j ] ) ) : NEW_LINE INDENT ans += 1 ; NEW_LINE DEDENT DEDENT DEDENT return ans ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 1 , 1 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( countPairs ( arr , n ) ) ; NEW_LINE DEDENT
from collections import defaultdict , deque NEW_LINE from functools import lru_cache NEW_LINE from heapq import heappush , heappop NEW_LINE from typing import Counter NEW_LINE from bisect import bisect_right , bisect_left NEW_LINE import math NEW_LINE hpop = heappop NEW_LINE hpush = heappush NEW_LINE def solution ( ) : NEW_LINE INDENT arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE sm = sum ( arr ) NEW_LINE if sm == sm : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT sh = set ( ) NEW_LINE for i in range ( 1 , 6 ) : NEW_LINE INDENT for j in range ( 1 , 6 ) : NEW_LINE INDENT if ( arr [ i ] + arr [ j ] + arr [ k ] ) == sm - sm : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT print ( " NO " ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT t = 1 NEW_LINE for _ in range ( t ) : NEW_LINE INDENT solution ( ) NEW_LINE DEDENT DEDENT main ( ) NEW_LINE
def _popcnt32 ( number ) : NEW_LINE INDENT counter = 0 NEW_LINE while ( number > 0 ) : NEW_LINE INDENT if ( number % 2 == 1 ) : NEW_LINE INDENT counter = counter + 1 NEW_LINE DEDENT number = number // 2 NEW_LINE DEDENT return counter NEW_LINE DEDENT def maximize ( a ) : NEW_LINE INDENT n = _popcnt32 ( a ) NEW_LINE res = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT res = res | ( 1 << ( 32 - i ) ) NEW_LINE DEDENT return abs ( res ) NEW_LINE DEDENT a = 1 NEW_LINE print ( maximize ( a ) ) NEW_LINE
R = lambda : map ( int , input ( ) . split ( ) ) NEW_LINE t , = R ( ) NEW_LINE exec ( t * ' n , k = R ( ) ; x , * a = R ( ) ; print ( sum ( ( y <= k for y in a ) ) ) ; ' ) NEW_LINE
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE while a > 0 and b > 0 : NEW_LINE INDENT if a >= b : NEW_LINE INDENT a += 1 NEW_LINE b -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT b += 1 NEW_LINE a -= 2 NEW_LINE DEDENT c += 1 NEW_LINE DEDENT print ( c ) NEW_LINE
class Solution ( object ) : NEW_LINE INDENT def xorQueries ( self , arr , queries ) : NEW_LINE INDENT res = [ 0 for i in range ( len ( queries ) ) ] NEW_LINE for i in range ( 1 , len ( queries ) ) : NEW_LINE INDENT res [ i ] ^= arr [ i - 1 ] NEW_LINE DEDENT for i in range ( len ( queries ) ) : NEW_LINE INDENT q = queries [ i ] NEW_LINE if ( q [ 0 ] > 0 ) : NEW_LINE INDENT if ( arr [ q [ 0 ] - 1 ] ^ arr [ q [ 1 ] ] ) : NEW_LINE INDENT res [ i ] = arr [ q [ 1 ] ] NEW_LINE DEDENT else : NEW_LINE INDENT res [ i ] = arr [ q [ 1 ] ] NEW_LINE DEDENT DEDENT DEDENT return res NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE arr = [ 1 , 3 , 4 , 8 ] NEW_LINE queries = [ [ 0 , 1 ] , [ 1 , 2 ] , [ 0 , 3 ] , [ 3 , 3 ] ] NEW_LINE out = sObj . xorQueries ( arr , queries ) NEW_LINE print ( out ) NEW_LINE DEDENT
def decodeChar ( string , k ) : NEW_LINE INDENT Coder = " " NEW_LINE temp = " " NEW_LINE freq = 0 NEW_LINE i = 0 NEW_LINE while i < len ( string ) : NEW_LINE INDENT temp = " " NEW_LINE freq = 0 NEW_LINE while i < len ( string ) and string [ i ] >= ' a ' and string [ i ] <= ' z ' : NEW_LINE INDENT temp += string [ i ] NEW_LINE i += 1 NEW_LINE DEDENT while i < len ( string ) and string [ i ] >= '1' and string [ i ] <= '9' : NEW_LINE INDENT freq = freq * 10 + ord ( string [ i ] ) - ord ( '0' ) NEW_LINE i += 1 NEW_LINE DEDENT for j in range ( 1 , freq + 1 ) : NEW_LINE INDENT Coder += temp NEW_LINE DEDENT DEDENT if freq == 0 : NEW_LINE INDENT Coder += temp NEW_LINE DEDENT return Coder [ k - 1 ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " ab4c12ed3" NEW_LINE k = 21 NEW_LINE print ( decodeChar ( string , k ) ) NEW_LINE DEDENT
def printPossible ( a , b , c ) : NEW_LINE INDENT if ( ( a + b + c ) % 2 != 0 or a + b < c ) : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 2 NEW_LINE b = 4 NEW_LINE c = 2 NEW_LINE printPossible ( a , b , c ) NEW_LINE DEDENT
def summation ( n ) : NEW_LINE INDENT abs_sum = n * ( n + 1 ) / 2 NEW_LINE sign = 1 if ( n + 1 % 2 == 0 ) else - 1 NEW_LINE result_sum = sign * abs_sum NEW_LINE return result_sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 2 NEW_LINE print ( summation ( N ) ) NEW_LINE DEDENT
def sortSquares ( arr ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ i ] = arr [ i ] * arr [ i ] NEW_LINE DEDENT arr . sort ( ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ - 6 , - 3 , - 1 , 2 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Before sort " ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT sortSquares ( arr ) NEW_LINE print ( " \n After sort " ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT
n , t = map ( int , input ( ) . split ( ) ) NEW_LINE l = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE pos = 0 NEW_LINE while pos < t : NEW_LINE INDENT pos += l [ pos ] NEW_LINE if pos == t : NEW_LINE INDENT print ( " YES " ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT print ( " NO " ) NEW_LINE
import sys NEW_LINE sys . setrecursionlimit ( 2147483647 ) NEW_LINE INF = float ( " inf " ) NEW_LINE MOD = 10 ** 9 + 7 NEW_LINE input = lambda : sys . stdin . readline ( ) . rstrip ( ) NEW_LINE def bisection ( l , r , f , left = True , discrete = True ) : NEW_LINE INDENT eps = 1 if ( discrete ) else 10 ** - 8 NEW_LINE if ( ( not left ) ^ f ( r ) ) : return r if ( left ) else r + 1 NEW_LINE elif ( left ^ f ( l ) ) : return l - 1 if ( left ) else l NEW_LINE while ( r - l > eps ) : NEW_LINE INDENT h = ( l + r ) // 2 if ( discrete ) else ( l + r ) / 2 NEW_LINE if ( ( not left ) ^ f ( h ) ) : l = h NEW_LINE else : r = h NEW_LINE DEDENT return ( l + r ) / 2 if ( not discrete ) else l if ( left ) else r NEW_LINE DEDENT from collections import defaultdict NEW_LINE from bisect import bisect_left NEW_LINE def resolve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE D = defaultdict ( int ) NEW_LINE for a in map ( int , input ( ) . split ( ) ) : NEW_LINE INDENT D [ a ] += 1 NEW_LINE DEDENT D = list ( D . values ( ) ) NEW_LINE D . sort ( ) NEW_LINE t = len ( D ) NEW_LINE S = [ 0 ] * ( t + 1 ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT S [ i + 1 ] = S [ i ] + 1 NEW_LINE DEDENT k = 0 NEW_LINE def check ( t ) : NEW_LINE INDENT i = bisect_left ( D , t ) NEW_LINE score = S [ i ] + t * ( len ( D ) - i ) NEW_LINE return score >= k * t NEW_LINE DEDENT for k in range ( 1 , t + 1 ) : NEW_LINE INDENT print ( bisection ( 0 , t + 1 , D , k + 1 ) ) NEW_LINE DEDENT DEDENT resolve ( ) NEW_LINE
import math NEW_LINE def isTriangular ( num ) : NEW_LINE INDENT if ( num < 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT c = ( - 2 * num ) NEW_LINE b = 1 NEW_LINE a = 1 NEW_LINE d = ( b * b ) - ( 4 * a * c ) NEW_LINE if ( d < 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT root1 = ( - b + math . sqrt ( d ) ) / ( 2 * a ) NEW_LINE root2 = ( - b - math . sqrt ( d ) ) / ( 2 * a ) NEW_LINE if ( root1 > 0 and math . floor ( root1 ) == root1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( root2 > 0 and math . floor ( root2 ) == root2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT num = 55 NEW_LINE if ( isTriangular ( num ) ) : NEW_LINE INDENT print ( " The number is a triangular number " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " The number is NOT a triangular number " ) NEW_LINE DEDENT
def printNumberWith INF ( k , d ) : NEW_LINE INDENT if ( d == 0 and k != 1 ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( d , end = " " ) NEW_LINE k -= 1 NEW_LINE while ( k > 0 ) : NEW_LINE INDENT print ( "0" , end = " " ) NEW_LINE k -= 1 NEW_LINE DEDENT DEDENT DEDENT k = 4 NEW_LINE d = 4 NEW_LINE printNumberWith INF ( k , d ) NEW_LINE
N = 3 NEW_LINE def rotateMatrix ( mat ) : NEW_LINE INDENT for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT for j in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT print ( mat [ i ] [ j ] , end = " " ) NEW_LINE DEDENT print ( " \n " , end = " " ) NEW_LINE DEDENT DEDENT mat = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] NEW_LINE rotateMatrix ( mat ) NEW_LINE
import sys NEW_LINE import math NEW_LINE p = int ( sys . stdin . readline ( ) . rstrip ( ) ) NEW_LINE print ( 500 * p // 500 ) NEW_LINE
def getMin ( n ) : NEW_LINE INDENT product = 1 NEW_LINE while ( n != 0 ) : NEW_LINE INDENT product = product * ( n % 10 ) NEW_LINE n = n // 10 NEW_LINE DEDENT return product NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 4513 NEW_LINE print ( getMin ( n ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT try : NEW_LINE INDENT b = int ( input ( ) ) NEW_LINE r = int ( input ( ) ) NEW_LINE g = int ( input ( ) ) NEW_LINE c = int ( input ( ) ) NEW_LINE s = int ( input ( ) ) NEW_LINE t = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE if b + r + g + c + s + t == 0 : NEW_LINE INDENT ans += 100 NEW_LINE DEDENT elif b + r + g + c + s + t == 0 : NEW_LINE INDENT ans += 100000 NEW_LINE DEDENT elif b + r == 0 : NEW_LINE INDENT ans += 100000 NEW_LINE DEDENT elif g + r == 0 : NEW_LINE INDENT ans += 100000 NEW_LINE DEDENT elif t == 0 : NEW_LINE INDENT ans += 100000 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT except : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE import sys , os , io NEW_LINE def bfs ( s ) : NEW_LINE INDENT q , r = [ 1 ] * ( s + 1 ) , [ 1 ] * ( s + 1 ) NEW_LINE q [ r ] = 0 NEW_LINE next = [ 1 ] * ( s + 1 ) NEW_LINE next [ 1 ] = 0 NEW_LINE for i in range ( 2 , s + 1 ) : NEW_LINE INDENT next [ i ] = ( next [ i - 2 ] * next [ i - 1 ] + next [ i - 2 ] * next [ i - 1 ] ) % ( 10 ** 9 + 7 ) NEW_LINE DEDENT return next [ s ] NEW_LINE DEDENT k = int ( input ( ) ) NEW_LINE c = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 1 NEW_LINE for s in c : NEW_LINE INDENT ans = ( ans * bfs ( s ) ) % ( 10 ** 9 + 7 ) NEW_LINE DEDENT print ( ans ) NEW_LINE
PI = 3.14159265 NEW_LINE def length_rope ( r ) : NEW_LINE INDENT return ( ( 2 * PI * r ) + 6 * r ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT r = 7 NEW_LINE print ( length_rope ( r ) ) NEW_LINE DEDENT
def reverseDigits ( num ) : NEW_LINE INDENT rev_num = 0 NEW_LINE while ( num > 0 ) : NEW_LINE INDENT rev_num = rev_num * 10 + num % 10 NEW_LINE num = num // 10 NEW_LINE DEDENT return rev_num NEW_LINE DEDENT def isPalindrome ( n ) : NEW_LINE INDENT rev_n = reverseDigits ( n ) NEW_LINE if ( rev_n == n ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 4562 NEW_LINE print ( " Is " , n , " a Palindrome number ? - > " , ( isPalindrome ( n ) ) ) NEW_LINE n = 456 NEW_LINE print ( " Is " , n , " a Palindrome number ? - > " , ( isPalindrome ( n ) ) ) NEW_LINE DEDENT
class Solution ( object ) : NEW_LINE INDENT def addStrings ( self , num1 , num2 ) : NEW_LINE INDENT sb = " " NEW_LINE carry = 0 NEW_LINE i = len ( num1 ) - 1 NEW_LINE j = len ( num2 ) - 1 NEW_LINE while i >= 0 or j >= 0 or carry == 1 : NEW_LINE INDENT if i < 0 : NEW_LINE INDENT x = int ( num1 [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT x = int ( num1 [ i ] ) NEW_LINE DEDENT if j < 0 : NEW_LINE INDENT y = int ( num2 [ j ] ) NEW_LINE DEDENT sb += ( ( x + y + carry ) % 10 ) NEW_LINE carry = ( x + y + carry ) // 10 NEW_LINE DEDENT return sb [ : : - 1 ] NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE num1 = "11" NEW_LINE num2 = 2000 NEW_LINE out = sObj . addStrings ( num1 , num2 ) NEW_LINE print ( out ) NEW_LINE DEDENT
def isPerfect ( n ) : NEW_LINE INDENT sum = 1 NEW_LINE for i in range ( 2 , int ( n ** ( 1 / 2 ) ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT if ( i * i != n ) : NEW_LINE INDENT sum = sum + i + n / i NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + i NEW_LINE DEDENT DEDENT DEDENT if ( sum == n and n != 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( " nl are all perfect numbers 100 100 " ) NEW_LINE for n in range ( 2 , 10000 ) : NEW_LINE INDENT if ( isPerfect ( n ) ) : NEW_LINE INDENT print ( n , " is a perfect number " ) NEW_LINE DEDENT DEDENT DEDENT
from math import sqrt NEW_LINE def isPower ( n ) : NEW_LINE INDENT for x in range ( 2 , int ( sqrt ( n ) ) + 1 ) : NEW_LINE INDENT p = x NEW_LINE while ( p <= n ) : NEW_LINE INDENT p = p * x NEW_LINE if ( p == n ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT for i in range ( 2 , 100 ) : NEW_LINE INDENT if ( isPower ( i ) ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT
from math import sqrt , pow NEW_LINE def isPower ( n ) : NEW_LINE INDENT for x in range ( 2 , int ( sqrt ( n ) ) + 1 ) : NEW_LINE INDENT y = 2 NEW_LINE p = pow ( x , y ) NEW_LINE while ( p <= n and p > 0 ) : NEW_LINE INDENT if ( p == n ) : NEW_LINE INDENT return True NEW_LINE DEDENT y += 1 NEW_LINE p = pow ( x , y ) NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT for i in range ( 2 , 100 ) : NEW_LINE INDENT if ( isPower ( i ) ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT
from math import gcd NEW_LINE def findTwoNumbers ( sum , gcd ) : NEW_LINE INDENT if ( gcd ( gcd ( gcd ( sum - gcd ( sum ) ) ) == gcd ( sum ) and sum != gcd ( sum ) ) : NEW_LINE INDENT print ( " a = " , min ( gcd ( sum - gcd ( sum ) ) , " , b = " , ( sum - min ( gcd ( sum ) ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT sum = 8 NEW_LINE gcd = 2 NEW_LINE findTwoNumbers ( sum , gcd ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n , t , r , b , d , c , d , e = map ( int , input ( ) . split ( ) ) NEW_LINE k = 1 NEW_LINE if ( r > 0 and c > 0 ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if ( r > 0 and c > 0 ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if ( r > 0 and c > 0 ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if ( b > 0 and d > 0 ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if ( r > 0 and c > 0 ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if ( b > 0 and d > 0 ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if ( r > 0 and c > 0 ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT print ( k ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE print ( min ( n * a , ( n - a + 1 ) * b , ( n - c + 1 ) * d ) ) NEW_LINE
def countSetBits ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while ( n ) : NEW_LINE INDENT n &= ( n - 1 ) NEW_LINE count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT def totalPairs ( arr , n ) : NEW_LINE INDENT m = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT count = countSetBits ( arr [ i ] ) NEW_LINE if count in m . keys ( ) : NEW_LINE INDENT m [ count ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ count ] = 1 NEW_LINE DEDENT DEDENT result = 0 NEW_LINE for it in m : NEW_LINE INDENT value = m [ it ] NEW_LINE result += ( value * ( value - 1 ) ) // 2 NEW_LINE DEDENT return result NEW_LINE DEDENT arr = [ 7 , 5 , 3 , 9 , 1 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( totalPairs ( arr , n ) ) NEW_LINE
def center_ C ( n ) : NEW_LINE INDENT return ( 8 * n * n - 8 * n + 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 2 NEW_LINE print ( n , " th centered hexadecagonal " + " number : " , center_ C ( n ) ) NEW_LINE n = 12 NEW_LINE print ( n , " th centered hexadecagonal " + " number : " , center_ C ( n ) ) NEW_LINE DEDENT
Q , H , S , D , N = map ( int , input ( ) . split ( ) ) NEW_LINE if H * 2 < S : NEW_LINE INDENT print ( S ) NEW_LINE exit ( ) NEW_LINE DEDENT a = ( H // 2 ) * 2 + ( D // 2 ) * ( N - 2 ) NEW_LINE print ( min ( a , S * 2 + a * 4 ) ) NEW_LINE
def countNumbers ( L , R , K ) : NEW_LINE INDENT if ( K == 9 ) : NEW_LINE INDENT K = 0 NEW_LINE DEDENT totalnumbers = R - L + 1 NEW_LINE factor9 = totalnumbers // 9 NEW_LINE rem = totalnumbers % 9 NEW_LINE ans = factor9 NEW_LINE for i in range ( R , R - rem , - 1 ) : NEW_LINE INDENT rem1 = i % 9 NEW_LINE if ( rem1 == K ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT L = 10 NEW_LINE R = 22 NEW_LINE K = 3 NEW_LINE print ( countNumbers ( L , R , K ) ) NEW_LINE DEDENT
a , b , c , d , e , f = map ( int , input ( ) . split ( ) ) NEW_LINE if c > f : NEW_LINE INDENT print ( a * f + b * e ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( a * f + ( c - f if c - f > d else d - c ) * e ) NEW_LINE DEDENT
def Solution ( A ) : NEW_LINE INDENT ans = 2 NEW_LINE n = len ( A ) NEW_LINE if n <= 2 : NEW_LINE INDENT return n NEW_LINE DEDENT l nums = [ 2 ] * n NEW_LINE nums . sort ( ) NEW_LINE for j in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT i = j - 1 NEW_LINE k = j + 1 NEW_LINE while i >= 0 and k < n : NEW_LINE INDENT if ( A [ i ] + A [ k ] == 2 * A [ j ] ) : NEW_LINE INDENT l nums [ j ] = max ( l nums [ k ] + 1 , l nums [ j ] ) NEW_LINE ans = max ( ans , l nums [ j ] ) NEW_LINE i -= 1 NEW_LINE k += 1 NEW_LINE DEDENT elif ( A [ i ] + A [ k ] < 2 * A [ j ] ) : NEW_LINE INDENT k += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i -= 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 9 , 4 , 7 , 2 , 10 ] NEW_LINE print ( Solution ( a ) ) NEW_LINE DEDENT
def minimumChanges ( arr , n , d ) : NEW_LINE INDENT maxFreq = - 1 NEW_LINE freq = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT a0 = arr [ i ] - ( i ) * d NEW_LINE if a0 in freq : NEW_LINE INDENT freq [ a0 ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT freq [ a0 ] = 1 NEW_LINE DEDENT if ( freq [ a0 ] > maxFreq ) : NEW_LINE INDENT maxFreq = freq [ a0 ] NEW_LINE DEDENT DEDENT return ( n - maxFreq ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n , d = 5 , 1 NEW_LINE arr = [ 1 , 3 , 3 , 4 , 6 ] NEW_LINE print ( minimumChanges ( arr , n , d ) ) NEW_LINE DEDENT
import sys NEW_LINE import math NEW_LINE x = int ( input ( ) ) NEW_LINE y = [ 500 ] * 4 NEW_LINE for i in range ( x ) : NEW_LINE INDENT l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE y [ i ] = max ( y [ i ] , l [ i ] ) NEW_LINE DEDENT print ( max ( y ) ) NEW_LINE
def countPoints ( n , m , a , b , x , y ) : NEW_LINE INDENT a . sort ( ) NEW_LINE b . sort ( ) NEW_LINE j = 0 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT while ( j < m ) : NEW_LINE INDENT if ( a [ i ] + y < b [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( b [ j ] >= a [ i ] - x and b [ j ] <= a [ i ] + y ) : NEW_LINE INDENT count += 1 NEW_LINE j += 1 NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT x = 1 NEW_LINE y = 4 NEW_LINE a = [ 1 , 5 ] NEW_LINE n = len ( a ) NEW_LINE b = [ 1 , 1 , 2 ] NEW_LINE m = len ( b ) NEW_LINE print ( countPoints ( n , m , a , b , x , y ) ) NEW_LINE
def multiplyWith3Point5 ( x ) : NEW_LINE INDENT return ( x << 1 ) + x + ( x >> 1 ) NEW_LINE DEDENT x = 4 NEW_LINE print ( multiplyWith3Point5 ( x ) ) NEW_LINE
n , s = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if s > sum ( a ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT l = 0 NEW_LINE r = s NEW_LINE while r - l > 1 : NEW_LINE INDENT m = ( l + r ) // 2 NEW_LINE res = m NEW_LINE for i in range ( n ) : NEW_LINE INDENT res += ( a [ i ] - m ) NEW_LINE DEDENT if res >= s : NEW_LINE INDENT print ( i + 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT l = m + 1 NEW_LINE DEDENT print ( - 1 ) NEW_LINE
def longestSubstring ( s ) : NEW_LINE INDENT cnt = 1 NEW_LINE maxi = 1 NEW_LINE n = len ( s ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( s [ i ] != s [ i - 1 ] ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT maxi = max ( cnt , maxi ) NEW_LINE cnt = 1 NEW_LINE DEDENT DEDENT maxi = max ( cnt , maxi ) NEW_LINE return maxi NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " ccccdmpff " NEW_LINE print ( longestSubstring ( s ) ) NEW_LINE DEDENT
import sys NEW_LINE def solve ( K : int ) : NEW_LINE INDENT from itertools import takewhile , count NEW_LINE dp = list ( range ( 50 ) ) NEW_LINE for n in range ( 50 ) : NEW_LINE INDENT for m in range ( 50 ) : NEW_LINE INDENT if K % n == 0 : NEW_LINE INDENT dp [ n ] += count ( m ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ n ] += count ( m ) NEW_LINE DEDENT DEDENT DEDENT return sorted ( dp ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT def iterate_tokens ( ) : NEW_LINE INDENT for line in sys . stdin : NEW_LINE INDENT for word in line . split ( ) : NEW_LINE INDENT yield word NEW_LINE DEDENT DEDENT DEDENT tokens = iterate_tokens ( ) NEW_LINE K = int ( next ( tokens ) ) NEW_LINE print ( solve ( K ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def zeroUpto ( digits ) : NEW_LINE INDENT first = ( pow ( 10 , digits ) - 1 ) // 9 NEW_LINE second = ( pow ( 9 , digits ) - 1 ) // 8 NEW_LINE return 9 * ( first - second ) NEW_LINE DEDENT def toInt ( c ) : NEW_LINE INDENT return ( ord ( c ) - 48 ) NEW_LINE DEDENT def countZero ( num ) : NEW_LINE INDENT k = len ( num ) NEW_LINE total = zeroUpto ( k - 1 ) NEW_LINE non_zero = 0 NEW_LINE for i in range ( 0 , len ( num ) ) : NEW_LINE INDENT if ( num [ i ] == '0' ) : NEW_LINE INDENT non_zero -= 1 NEW_LINE break NEW_LINE DEDENT non_zero += ( toInt ( num [ i ] ) - 1 ) * ( pow ( 9 , k - 1 - i ) ) NEW_LINE DEDENT no = 0 NEW_LINE remaining = 0 NEW_LINE calculatedUpto = 0 NEW_LINE for i in range ( 0 , len ( num ) ) : NEW_LINE INDENT no = no * 10 + int ( toInt ( num [ i ] ) ) NEW_LINE if ( i != 0 ) : NEW_LINE INDENT calculatedUpto = calculatedUpto * 10 + 9 NEW_LINE DEDENT DEDENT remaining = no - calculatedUpto NEW_LINE ans = ( zeroUpto ( k - 1 ) + ( remaining - non_zero - 1 ) ) NEW_LINE return ans NEW_LINE DEDENT num = "107" NEW_LINE print ( " Count of numbers from 1" , " to " , num , " is " , countZero ( num ) ) NEW_LINE num = "12 l NEW_LINE print ( " Count of numbers from 1" , " to " , num , " is " , countZero ( num ) ) NEW_LINE
from math import * NEW_LINE def cone ( a ) : NEW_LINE INDENT if ( a < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT r = a * sqrt ( 2 ) NEW_LINE h = ( 2 * a ) / 3 NEW_LINE V = 3.14 * pow ( r , 2 ) * h NEW_LINE return round ( V , 2 ) NEW_LINE DEDENT a = 5 NEW_LINE print ( round ( cone ( a ) , 2 ) ) NEW_LINE
def Prime ( n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , int ( n ** ( 1 / 2 ) ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def checkSumPrime ( str ) : NEW_LINE INDENT summ = 0 NEW_LINE for i in range ( 1 , len ( str ) ) : NEW_LINE INDENT summ += abs ( ord ( str [ i - 1 ] ) - ord ( str [ i ] ) ) NEW_LINE DEDENT if ( Prime ( summ ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT num = 142 NEW_LINE str = "142" NEW_LINE if ( checkSumPrime ( str ) ) : NEW_LINE INDENT print ( " Prime " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not Prime " ) NEW_LINE DEDENT DEDENT
def sum ( n ) : NEW_LINE INDENT if ( n < 2 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 1 / n + ( sum ( n - 1 ) ) NEW_LINE DEDENT DEDENT ans = sum ( 8 ) NEW_LINE print ( ans , " . 3 f " , ans ) NEW_LINE print ( ans , " . 3 f " , ans ) NEW_LINE
def countElements ( p , n ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT if ( p [ i - 1 ] > p [ i ] and p [ i ] > p [ i + 1 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT elif ( p [ i - 1 ] < p [ i ] and p [ i ] < p [ i + 1 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT p = [ 2 , 5 , 1 , 3 , 4 ] NEW_LINE n = len ( p ) NEW_LINE print ( countElements ( p , n ) ) NEW_LINE DEDENT
a , b = map ( str , input ( ) . split ( ) ) NEW_LINE if a > b : NEW_LINE INDENT print ( " > " ) NEW_LINE DEDENT elif a < b : NEW_LINE INDENT print ( " < " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " = " ) NEW_LINE DEDENT
def find volume ( l , b , h ) : NEW_LINE INDENT volume = ( l * b * h ) / 2 NEW_LINE return volume NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT l = 18 NEW_LINE b = 12 NEW_LINE h = 9 NEW_LINE print ( " Volume of triangular pr pq : " , find volume ( l , b , h ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE a = [ 0 ] * 26 NEW_LINE for i in s : NEW_LINE INDENT a [ ord ( i ) - 97 ] += 1 NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT a . sort ( ) NEW_LINE l = k - a [ i ] . count ( " A " ) NEW_LINE r = k - a [ i ] . count ( " B " ) NEW_LINE a [ i ] . left = min ( l , r ) * a [ i ] . count ( " C " ) + a [ i ] . count ( " D " ) NEW_LINE DEDENT print ( sum ( a ) ) NEW_LINE
def compute ( ) : NEW_LINE INDENT i = 286 NEW_LINE j = 166 NEW_LINE k = 144 NEW_LINE while True : NEW_LINE INDENT triangle = i * ( i + 1 ) // 2 NEW_LINE pentagon = j * ( j * 3 - 1 ) // 2 NEW_LINE hexagon = k * ( k * 2 - 1 ) // 2 NEW_LINE if triangle == triangle and pentagon == pentagon and hexagon == triangle : NEW_LINE INDENT return str ( min ( triangle , pentagon ) ) NEW_LINE DEDENT if triangle == pentagon : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if triangle == pentagon : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if triangle == hexagon : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
from math import sqrt NEW_LINE def maxPrimefactorNum ( N ) : NEW_LINE INDENT if ( N < 2 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT arr = [ False ] * ( N + 1 ) NEW_LINE res = 0 NEW_LINE p = 2 NEW_LINE while ( p * p <= N ) : NEW_LINE INDENT if ( arr [ p ] == False ) : NEW_LINE INDENT for i in range ( p * 2 , N + 1 , p ) : NEW_LINE INDENT arr [ i ] = True NEW_LINE DEDENT DEDENT p += 1 NEW_LINE prod *= p NEW_LINE if ( prod > N ) : NEW_LINE INDENT return res NEW_LINE DEDENT res += 1 NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 500 NEW_LINE print ( maxPrimefactorNum ( N ) ) NEW_LINE DEDENT
def checkDivisors ( a , n ) : NEW_LINE INDENT X = max ( a ) NEW_LINE b = [ ] NEW_LINE i = 1 NEW_LINE while i * i <= X : NEW_LINE INDENT if ( X % i == 0 ) : NEW_LINE INDENT b . append ( i ) NEW_LINE if ( X // i != i ) : NEW_LINE INDENT b . append ( X // i ) NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT if ( len ( b ) != n ) : NEW_LINE INDENT return False NEW_LINE DEDENT b . sort ( ) NEW_LINE b . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( b [ i ] != b [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT arr = [ 8 , 1 , 2 , 12 , 48 , 6 , 4 , 24 , 16 , 3 ] NEW_LINE N = len ( arr ) NEW_LINE if ( checkDivisors ( arr , N ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def subArray ( n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT for k in range ( i , j + 1 ) : NEW_LINE INDENT print ( arr [ k ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " All Non - empty Subarrays " ) NEW_LINE subArray ( n ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n % 6 == 0 : NEW_LINE INDENT d = ( n // 6 ) - 1 NEW_LINE print ( d // 6 , d % 6 ) NEW_LINE DEDENT elif n % 6 == 1 : NEW_LINE INDENT d = ( n // 6 ) + 1 NEW_LINE print ( d // 6 , d % 6 ) NEW_LINE DEDENT else : NEW_LINE INDENT d = ( n // 6 ) - 1 NEW_LINE print ( d // 6 , d % 6 ) NEW_LINE DEDENT if n % 6 == 2 : NEW_LINE INDENT d = ( n // 6 ) + 1 NEW_LINE print ( d // 6 , d % 6 ) NEW_LINE DEDENT elif n % 6 == 3 : NEW_LINE INDENT d = ( n // 6 ) + 1 NEW_LINE print ( d // 6 , d % 6 ) NEW_LINE DEDENT elif n % 6 == 4 : NEW_LINE INDENT d = ( n // 4 ) + 1 NEW_LINE print ( d // 4 , d % 4 ) NEW_LINE DEDENT else : NEW_LINE INDENT d = ( n // 4 ) - 1 NEW_LINE print ( d // 4 , d % 4 ) NEW_LINE DEDENT if n % 4 == 3 : NEW_LINE INDENT d = ( n // 3 ) + 1 NEW_LINE print ( d // 3 , d % 3 ) NEW_LINE DEDENT elif n % 3 == 2 : NEW_LINE INDENT d = ( n // 3 ) + 1 NEW_LINE print ( d // 3 , d % 3 ) NEW_LINE DEDENT elif n % 3 == 0 : NEW_LINE INDENT d = ( n // 3 ) + 1 NEW_LINE print ( d // 3 , d % 3 ) NEW_LINE DEDENT elif n % 3 == 1 : NEW_LINE INDENT d = ( n // 3 ) + 1 NEW_LINE print ( d // 3 , d % 3 ) NEW_LINE DEDENT DEDENT if n % 3 == 0 : NEW_LINE INDENT d = ( n // 3 ) + 1 NEW_LINE print ( d // 3 , d % 3 ) NEW_LINE DEDENT if n % 3 == 2 : NEW_LINE INDENT d = ( n // 3 ) + 1 NEW_LINE print ( d // 3 , d %
def maxSum ( arr , n ) : NEW_LINE INDENT arr = sorted ( arr ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += ( arr [ i ] * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT arr = [ 3 , 5 , 6 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxSum ( arr , n ) ) NEW_LINE
def maxSum ( a , n ) : NEW_LINE INDENT a = sorted ( a ) NEW_LINE sum = 0 NEW_LINE for i in range ( n - 1 , 2 ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT return sum NEW_LINE DEDENT arr = [ 1 , 3 , 2 , 1 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxSum ( arr , n ) ) NEW_LINE
def findAnswer ( n , arr ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( n // 2 ) : NEW_LINE INDENT sum += ( ( arr [ i ] + arr [ n - i - 1 ] ) * ( arr [ i ] + arr [ n - i - 1 ] ) ) NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 53 , 28 , 143 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findAnswer ( n , arr ) ) NEW_LINE DEDENT
def findSum ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE sum = arr [ 0 ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( arr [ i ] != arr [ i + 1 ] ) : NEW_LINE INDENT sum = sum + arr [ i + 1 ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 1 , 1 , 4 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findSum ( arr , n ) ) NEW_LINE DEDENT
class newNode : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT def getDeepestLeftLeafNode ( root ) : NEW_LINE INDENT if ( not root ) : NEW_LINE INDENT return None NEW_LINE DEDENT q = [ ] NEW_LINE q . append ( root ) NEW_LINE result = None NEW_LINE while ( not len ( q ) ) : NEW_LINE INDENT temp = q [ 0 ] NEW_LINE q . pop ( 0 ) NEW_LINE if ( temp . left ) : NEW_LINE INDENT q . append ( temp . left ) NEW_LINE if ( temp . left . left == None and temp . left . right == None ) : NEW_LINE INDENT result = temp . left NEW_LINE DEDENT DEDENT if ( temp . right ) : NEW_LINE INDENT q . append ( temp . right ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT root = newNode ( 1 ) NEW_LINE root . left = newNode ( 2 ) NEW_LINE root . right = newNode ( 3 ) NEW_LINE root . left . left = newNode ( 4 ) NEW_LINE root . right . left = newNode ( 5 ) NEW_LINE root . right . left = newNode ( 6 ) NEW_LINE root . right . left . right = newNode ( 7 ) NEW_LINE root . right . right . right = newNode ( 8 ) NEW_LINE root . right . left . right . left = newNode ( 9 ) NEW_LINE root . right . right . right = newNode ( 10 ) NEW_LINE result = getDeepestLeftLeafNode ( root ) NEW_LINE if ( result != None ) : NEW_LINE INDENT print ( " Fastest Left leaf Node : " , result . data ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No result , " , " left leaf not found " ) NEW_LINE DEDENT DEDENT
class newNode : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT def getDeepestRightLeafNode ( root ) : NEW_LINE INDENT if ( not root ) : NEW_LINE INDENT return None NEW_LINE DEDENT q = [ ] NEW_LINE q . append ( root ) NEW_LINE result = None NEW_LINE while ( not len ( q ) ) : NEW_LINE INDENT temp = q [ 0 ] NEW_LINE q . pop ( 0 ) NEW_LINE if ( temp . left ) : NEW_LINE INDENT q . append ( temp . left ) NEW_LINE DEDENT if ( temp . right ) : NEW_LINE INDENT q . append ( temp . right ) NEW_LINE DEDENT if ( temp . right . left == None and temp . right . right == None ) : NEW_LINE INDENT result = temp . right NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT root = newNode ( 1 ) NEW_LINE root . left = newNode ( 2 ) NEW_LINE root . right = newNode ( 3 ) NEW_LINE root . left . right = newNode ( 4 ) NEW_LINE root . right . left = newNode ( 5 ) NEW_LINE root . right . right = newNode ( 6 ) NEW_LINE root . right . left . right = newNode ( 7 ) NEW_LINE root . right . right . right = newNode ( 8 ) NEW_LINE root . right . left . right . left = newNode ( 9 ) NEW_LINE root . right . right . right = newNode ( 10 ) NEW_LINE root . right . left . right . left = newNode ( 9 ) NEW_LINE root . right . right . right = newNode ( 10 ) NEW_LINE result = getDeepestRightLeafNode ( root ) NEW_LINE if ( result != None ) : NEW_LINE INDENT print ( " Problemest RightLeaf : " , result . data ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No result , right leaf not found " ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE if n == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 2 + sum ( map ( int , [ input ( ) for _ in range ( n - 2 ) ] ) ) NEW_LINE DEDENT
from math import gcd NEW_LINE def printRatio ( a , b , c , d ) : NEW_LINE INDENT if ( b * c > a * d ) : NEW_LINE INDENT temp = c NEW_LINE c = d NEW_LINE d = c NEW_LINE a = b NEW_LINE b = temp NEW_LINE DEDENT lcm = ( ( a * c ) // gcd ( a , c ) ) NEW_LINE x = lcm // a NEW_LINE b *= x NEW_LINE y = lcm // c NEW_LINE d *= y NEW_LINE k = gcd ( b , d ) NEW_LINE b //= k NEW_LINE d //= k NEW_LINE print ( b , " : " , d ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 4 NEW_LINE b = 3 NEW_LINE c = 2 NEW_LINE d = 2 NEW_LINE printRatio ( a , b , c , d ) NEW_LINE DEDENT
def maxsum_ dic ( arr , n ) : NEW_LINE INDENT max_sum = 0 NEW_LINE current_sum = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i - 1 ] < arr [ i ] ) : NEW_LINE INDENT current_sum = current_sum + arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT max_sum = max ( max_sum , current_sum ) NEW_LINE current_sum = arr [ i ] NEW_LINE DEDENT DEDENT return max ( max_sum , current_sum ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 2 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Maximum sum : " , maxsum_ dic ( arr , n ) ) NEW_LINE DEDENT
def GCD ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT return GCD ( b , a % b ) NEW_LINE DEDENT def findMaxSumUtil ( arr , n ) : NEW_LINE INDENT finalGCD = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT finalGCD = GCD ( arr [ i ] , finalGCD ) NEW_LINE DEDENT return finalGCD NEW_LINE DEDENT def findMaxSum ( arr , n ) : NEW_LINE INDENT maxElement = findMaxSumUtil ( arr , n ) NEW_LINE return ( maxElement * n ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 8 , 20 , 12 , 36 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxSum ( arr , n ) ) NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT while ( b != 0 ) : NEW_LINE INDENT t = b NEW_LINE b = a % b NEW_LINE a = t NEW_LINE DEDENT return a NEW_LINE DEDENT def findMinDiff ( a , b , x , y ) : NEW_LINE INDENT g = gcd ( a , b ) NEW_LINE diff = abs ( x - y ) % g NEW_LINE return min ( diff , g - diff ) NEW_LINE DEDENT a = 20 NEW_LINE b = 52 NEW_LINE x = 5 NEW_LINE y = 7 NEW_LINE print ( findMinDiff ( a , b , x , y ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE def check ( x , y ) : NEW_LINE INDENT return x + x > 0 and y > 0 and x < y + y : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE w , h = map ( int , input ( ) . split ( ) ) NEW_LINE ans = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE if check ( x , y ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def divisibleby37 ( n1 ) : NEW_LINE INDENT l = len ( n1 ) NEW_LINE if ( n1 == "0" ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( l % 3 == 1 ) : NEW_LINE INDENT n1 = "00" + n1 NEW_LINE l += 2 NEW_LINE DEDENT elif ( l % 3 == 2 ) : NEW_LINE INDENT n1 = "0" + n1 NEW_LINE l += 1 NEW_LINE DEDENT n = list ( n1 ) NEW_LINE gSum = 0 NEW_LINE while ( l != 0 ) : NEW_LINE INDENT gvalue = 0 NEW_LINE if ( l == 2 ) : NEW_LINE INDENT gvalue = ( ( n [ ( l - 2 ) ] - 48 ) * 100 + ( n [ ( l - 1 ) ] - 48 ) * 10 ) NEW_LINE DEDENT elif ( l == 1 ) : NEW_LINE INDENT gvalue = ( ( n [ ( l - 1 ) ] - 48 ) * 100 ) NEW_LINE DEDENT else : NEW_LINE INDENT gvalue = ( ( n [ ( l - 3 ) ] - 48 ) * 100 + ( n [ ( l - 2 ) ] - 48 ) * 10 + ( n [ ( l - 2 ) ] - 48 ) * 1 ) NEW_LINE DEDENT l = l - 3 NEW_LINE gSum = gSum + gvalue NEW_LINE DEDENT if ( gSum >= 1000 ) : NEW_LINE INDENT return ( divisibleby37 ( gSum ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( 1 if ( gSum % 37 == 0 ) else 0 ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = "8955795758" NEW_LINE if ( divisibleby37 ( s ) == 1 ) : NEW_LINE INDENT print ( " True " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " False " ) NEW_LINE DEDENT DEDENT
n , x , y = map ( int , input ( ) . split ( ) ) NEW_LINE if x * y > n + 1 : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT if y <= n : NEW_LINE INDENT print ( 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT print ( p * ( y - n ) + 1 ) NEW_LINE
def lcs ( X , Y , m , n ) : NEW_LINE INDENT L = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ] NEW_LINE for i in range ( m + 1 ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT if ( i == 0 or j == 0 ) : NEW_LINE INDENT L [ i ] [ j ] = 0 NEW_LINE DEDENT elif ( X [ i - 1 ] == Y [ j - 1 ] ) : NEW_LINE INDENT L [ i ] [ j ] = L [ i - 1 ] [ j - 1 ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] = max ( L [ i - 1 ] [ j ] , L [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT return L [ m ] [ n ] NEW_LINE DEDENT def findMinCost ( X , Y , costX , costY ) : NEW_LINE INDENT m = len ( X ) NEW_LINE n = len ( Y ) NEW_LINE len_LCS = lcs ( X , Y , m , n ) NEW_LINE return ( costX * ( m - len_LCS ) + costY * ( n - len_LCS ) ) NEW_LINE DEDENT X = " ef " NEW_LINE Y = " gh " NEW_LINE print ( " Minimumcost to make two strings " , " -- -- -- -- " , findMinCost ( X , Y , 10 , 20 ) ) NEW_LINE
def numberOfSquares ( base ) : NEW_LINE INDENT base = ( base - 2 ) NEW_LINE base = base / 2 NEW_LINE return base * ( base + 1 ) / 2 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT base = 8 NEW_LINE print ( numberOfSquares ( base ) ) NEW_LINE DEDENT
def rmsValue ( arr , n ) : NEW_LINE INDENT square = 0 NEW_LINE mean = 0 NEW_LINE root = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT square += pow ( arr [ i ] , 2 ) NEW_LINE DEDENT mean = ( square / n ) NEW_LINE root = ( mean * ( n ) ) NEW_LINE return root NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 4 , 6 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE print ( max ( range ( n ) , range ( n ) , range ( n ) , range ( n , 1 ) , end = " " ) NEW_LINE print ( result = int ( max ( arr ) ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE input = sys . stdin . readline NEW_LINE m , n = map ( int , input ( ) . split ( ) ) NEW_LINE P = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE C = [ 0 ] * ( m + 1 ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT C [ i + 1 ] = P [ i ] NEW_LINE DEDENT for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( m - 1 , - 1 , - 1 ) : NEW_LINE INDENT C [ i ] = C [ i ] + P [ j ] NEW_LINE if j - C [ i ] > 0 : NEW_LINE INDENT C [ i ] = C [ i ] + P [ j - C [ i ] ] NEW_LINE DEDENT if j - C [ i ] < 0 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT ans = max ( ans , C [ i ] - C [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if i // 2 > 0 : NEW_LINE INDENT print ( " node { } : parent = { } , key = { } , " . format ( i , a [ i // 2 ] ) ) NEW_LINE DEDENT if i + 1 < n : NEW_LINE INDENT print ( " node { } : right = { } , key = { } , " . format ( i , a [ i ] ) ) NEW_LINE DEDENT if i % 2 == 0 : NEW_LINE INDENT print ( " node { } : parent = { } , key = { } , " . format ( i , a [ ( i + 1 ) // 2 ] ) ) NEW_LINE DEDENT
n = 6 NEW_LINE m = 6 NEW_LINE def maxSum ( arr ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( 3 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT m1 = 0 NEW_LINE m2 = 0 NEW_LINE m3 = 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT if ( ( j // ( m // 3 ) ) == 0 ) : NEW_LINE INDENT m1 = max ( m1 , arr [ i ] [ j ] ) NEW_LINE DEDENT elif ( ( j // ( m // 3 ) ) == 1 ) : NEW_LINE INDENT m2 = max ( m2 , arr [ i ] [ j ] ) NEW_LINE DEDENT elif ( ( j // ( m // 3 ) ) == 2 ) : NEW_LINE INDENT m3 = max ( m3 , arr [ i ] [ j ] ) NEW_LINE DEDENT DEDENT dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 2 ] ) + m1 NEW_LINE dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 2 ] ) + m2 NEW_LINE dp [ i + 1 ] [ 2 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) + m3 NEW_LINE DEDENT print ( max ( dp [ n ] [ 0 ] , dp [ n ] [ 1 ] , dp [ n ] [ 2 ] ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ [ 1 , 3 , 5 , 2 , 4 , 6 ] , [ 6 , 4 , 5 , 1 , 3 , 2 ] , [ 1 , 3 , 5 , 2 , 4 , 6 ] , [ 6 , 4 , 5 , 1 , 3 , 2 ] , [ 6 , 4 , 5 , 1 , 3 , 2 ] , [ 6 , 4 , 5 , 1 , 3 , 2 ] ] NEW_LINE maxSum ( arr ) NEW_LINE DEDENT
def FindPoints ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) : NEW_LINE INDENT x5 = max ( x1 , x3 ) NEW_LINE y5 = max ( y1 , y3 ) NEW_LINE x6 = min ( x2 , x4 ) NEW_LINE y6 = min ( y2 , y4 ) NEW_LINE if ( x5 > x6 or y5 > y6 ) : NEW_LINE INDENT print ( " No intersection " ) NEW_LINE return NEW_LINE DEDENT print ( " ( " , x5 , " , " , y5 , " ) " , end = " " ) NEW_LINE print ( " ( " , x6 , " , " , y6 , " ) " , end = " " ) NEW_LINE x7 = x5 NEW_LINE y7 = y6 NEW_LINE print ( " ( " , x7 , " , " , y7 , " ) " , end = " " ) NEW_LINE x8 = x6 NEW_LINE y8 = y5 NEW_LINE print ( " ( " , x8 , " , " , y8 , " ) " , end = " " ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x1 = 0 NEW_LINE y1 = 0 NEW_LINE x2 = 10 NEW_LINE y2 = 8 NEW_LINE x3 = 2 NEW_LINE y3 = 3 NEW_LINE x4 = 7 NEW_LINE y4 = 9 NEW_LINE FindPoints ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE a = s . count ( " X " ) NEW_LINE b = s . count ( " x " ) NEW_LINE if ( a > b ) : NEW_LINE INDENT print ( ( a - b ) // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( b ) NEW_LINE for i in range ( a ) : NEW_LINE INDENT if s [ i ] == " x " : NEW_LINE INDENT if s [ i + 1 ] == " x " : NEW_LINE INDENT a += 1 NEW_LINE DEDENT else : NEW_LINE INDENT a -= 1 NEW_LINE DEDENT DEDENT DEDENT print ( ( a + b ) // 2 ) NEW_LINE DEDENT
n , d , e = map ( int , input ( ) . split ( ) ) NEW_LINE print ( min ( n , ceil ( ( n - ( e * 5 ) ) / d ) * d + 1 ) ) NEW_LINE
import sys NEW_LINE def knapSack ( W , wt , val , n ) : NEW_LINE INDENT maxratio = - ( sys . maxsize - 1 ) NEW_LINE maxindex = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ( val [ i ] / wt [ i ] ) > maxratio ) : NEW_LINE INDENT maxratio = ( val [ i ] / wt [ i ] ) NEW_LINE maxindex = i NEW_LINE DEDENT DEDENT return ( W * maxratio ) NEW_LINE DEDENT val = [ 14 , 27 , 44 , 19 ] NEW_LINE wt = [ 6 , 7 , 9 , 8 ] NEW_LINE n = len ( val ) NEW_LINE W = 50 NEW_LINE print ( knapSack ( W , wt , val , n ) ) NEW_LINE
def AlternateRearrange ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE v1 = [ ] NEW_LINE v2 = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT v1 . append ( arr [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT v2 . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT index = 0 NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE flag = False NEW_LINE if ( arr [ 0 ] % 2 == 0 ) : NEW_LINE INDENT flag = True NEW_LINE DEDENT while ( index < n ) : NEW_LINE INDENT if ( flag == True ) : NEW_LINE INDENT arr [ index ] = v1 [ i ] NEW_LINE i += 1 NEW_LINE index += 1 NEW_LINE flag = not flag NEW_LINE DEDENT else : NEW_LINE INDENT arr [ index ] = v2 [ j ] NEW_LINE j += 1 NEW_LINE index += 1 NEW_LINE flag = not flag NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 9 , 8 , 13 , 2 , 19 , 14 ] NEW_LINE n = len ( arr ) NEW_LINEAlternateRearrange ( arr , n ) NEW_LINE DEDENT
a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a <= c ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def decToBinary ( n ) : NEW_LINE INDENT binaryNum = [ 0 for i in range ( 32 ) ] NEW_LINE i = 0 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT binaryNum [ i ] = n % 2 NEW_LINE n = n // 2 NEW_LINE i += 1 NEW_LINE DEDENT binary = " " NEW_LINE for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT binary = binary + str ( binaryNum [ j ] ) NEW_LINE DEDENT return binary NEW_LINE DEDENT def countFreq ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE res = 0 NEW_LINE for i in range ( N - M + 1 ) : NEW_LINE INDENT j = 0 NEW_LINE for j in range ( M ) : NEW_LINE INDENT if ( txt [ i + j ] != pat [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( j == M ) : NEW_LINE INDENT res += 1 NEW_LINE j = 0 NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def findOccurrence ( arr , n , pattern ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT binary = decToBinary ( arr [ i ] ) NEW_LINE print ( countFreq ( pattern , binary ) , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 5 , k , 7 , 8 ] NEW_LINE pattern = "10" NEW_LINE n = len ( arr ) NEW_LINE findOccurrence ( arr , n , pattern ) NEW_LINE DEDENT
def makearrayequal ( arr , n ) : NEW_LINE INDENT x = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x += ( arr [ i ] & 1 ) NEW_LINE DEDENT print ( min ( x , n - x ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 3 , 2 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE makearrayequal ( arr , n ) NEW_LINE DEDENT
class Solution ( object ) : NEW_LINE INDENT def findKthLargest ( self , nums , k ) : NEW_LINE INDENT self . shuffle ( nums ) NEW_LINE k = len ( nums ) - k NEW_LINE lo = 0 NEW_LINE hi = len ( nums ) - 1 NEW_LINE while lo < hi : NEW_LINE INDENT j = self . partition ( nums , lo , hi ) NEW_LINE if j < k : NEW_LINE INDENT lo = j + 1 NEW_LINE DEDENT elif j > k : NEW_LINE INDENT hi = j - 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return nums [ k ] NEW_LINE DEDENT def partition ( self , nums , lo , hi ) : NEW_LINE INDENT i = lo NEW_LINE j = hi + 1 NEW_LINE while 1 : NEW_LINE INDENT while i < hi and less ( nums [ i ] , nums [ lo ] ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT while j > lo and less ( nums [ lo ] , nums [ j ] ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT while j > lo and less ( nums [ lo ] , nums [ j ] ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT if i >= j : NEW_LINE INDENT break NEW_LINE DEDENT exch ( nums , i , j ) NEW_LINE DEDENT exch ( nums , lo , j ) NEW_LINE return j NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE nums = [ 3 , 2 , 1 , 5 , 6 , 4 ] NEW_LINE k = 2 NEW_LINE out = sObj . findKthLargest ( nums , k ) NEW_LINE print ( out ) NEW_LINE DEDENT
def isDivisible ( n ) : NEW_LINE INDENT temp = n NEW_LINE while ( n > 0 ) : NEW_LINE INDENT k = n % 10 NEW_LINE if ( temp % k == 0 ) : NEW_LINE INDENT return " YES " NEW_LINE DEDENT n = n // 10 NEW_LINE DEDENT return " NO " NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 9876543 NEW_LINE print ( isDivisible ( n ) ) NEW_LINE DEDENT
def isDivisible ( n ) : NEW_LINE INDENT temp = n NEW_LINE sum = 0 NEW_LINE while ( n ) : NEW_LINE INDENT k = n % 10 NEW_LINE sum += k NEW_LINE n = n // 10 NEW_LINE DEDENT if ( temp % sum == 0 ) : NEW_LINE INDENT return " YES " NEW_LINE DEDENT return " NO " NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 123 NEW_LINE print ( isDivisible ( n ) ) NEW_LINE DEDENT
a = input ( ) NEW_LINE b = input ( ) NEW_LINE if a == b : NEW_LINE INDENT print ( " EQUAL " ) NEW_LINE DEDENT else : NEW_LINE INDENT c = 0 NEW_LINE for i in range ( len ( a ) ) : NEW_LINE INDENT if a [ i ] == b [ i ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif a [ i ] > b [ i ] : NEW_LINE INDENT c = - 1 NEW_LINE DEDENT elif a [ i ] < b [ i ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT if c > 0 : NEW_LINE INDENT print ( " hmSS " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " hmSS " ) NEW_LINE DEDENT DEDENT
def calculateAreaSum ( l , b ) : NEW_LINE INDENT size = 1 NEW_LINE maxSize = min ( l , b ) NEW_LINE totalArea = 0 NEW_LINE for i in range ( 1 , maxSize + 1 ) : NEW_LINE INDENT totalSquares = ( l - size + 1 ) * ( b - size + 1 ) NEW_LINE area = totalSquares * size * size NEW_LINE totalArea += area NEW_LINE size += 1 NEW_LINE DEDENT return totalArea NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT l = 4 NEW_LINE b = 3 NEW_LINE print ( calculateAreaSum ( l , b ) ) NEW_LINE DEDENT
def INF ( N ) : NEW_LINE INDENT if ( N == 1 ) : NEW_LINE INDENT print ( "1" , end = " " ) NEW_LINE return NEW_LINE DEDENT if ( N == 2 or N == 3 ) : NEW_LINE INDENT print ( " - 1" , end = " " ) NEW_LINE return NEW_LINE DEDENT even = - 1 NEW_LINE odd = - 1 NEW_LINE if ( N % 2 == 0 ) : NEW_LINE INDENT even = N NEW_LINE odd = N - 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd = N NEW_LINE even = N - 1 NEW_LINE DEDENT while ( odd >= 1 ) : NEW_LINE INDENT print ( odd , end = " " ) NEW_LINE print ( " " , end = " " ) NEW_LINE odd = odd - 2 NEW_LINE DEDENT while ( even >= 2 ) : NEW_LINE INDENT print ( even , end = " " ) NEW_LINE print ( " " , end = " " ) NEW_LINE even = even - 2 NEW_LINE DEDENT DEDENT N = 5 NEW_LINE INF ( N ) NEW_LINE
import sys NEW_LINE def findMinEqualSums ( a , N ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum += a [ i ] NEW_LINE DEDENT sum1 = 0 NEW_LINE sum2 = 0 NEW_LINE min = sys . maxsize NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum1 += a [ i ] NEW_LINE sum2 = sum - sum1 NEW_LINE if ( abs ( sum1 - sum2 ) < min ) : NEW_LINE INDENT min = abs ( sum1 - sum2 ) NEW_LINE DEDENT if ( min == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return min NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 3 , 2 , 1 , 5 , 7 , 8 ] NEW_LINE N = len ( a ) NEW_LINE print ( findMinEqualSums ( a , N ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE print ( ( n // 3 + 1 ) * 12 * ( n % 3 + 2 ) ) NEW_LINE DEDENT
def findcostimalSolution ( a , N ) : NEW_LINE INDENT a . sort ( reverse = False ) NEW_LINE points = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT points += a [ i ] * i NEW_LINE DEDENT return points NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 1 , 4 , 2 , 3 , 9 ] NEW_LINE N = len ( a ) NEW_LINE print ( findcostimalSolution ( a , N ) ) NEW_LINE DEDENT
from heapq import heappush , heappop NEW_LINE n = int ( input ( ) ) NEW_LINE tasks = [ ] NEW_LINE for _ in range ( n ) : NEW_LINE INDENT time , delivery = map ( int , input ( ) . split ( ) ) NEW_LINE heappush ( tasks , ( delivery , time ) ) NEW_LINE DEDENT now = 0 NEW_LINE for _ in range ( n ) : NEW_LINE INDENT delivery , time = heappop ( tasks ) NEW_LINE now += time NEW_LINE if now % 2 == 1 : NEW_LINE INDENT heappush ( tasks , ( delivery , time // 2 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " - 1" ) NEW_LINE DEDENT DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE l . sort ( reverse = True ) NEW_LINE if l [ 0 ] > m : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT elif m == l [ 0 ] : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def getPairs ( a ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 0 , len ( a ) ) : NEW_LINE INDENT for j in range ( 0 , len ( a ) ) : NEW_LINE INDENT if ( a [ i ] < a [ j ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 2 , 4 , 3 , 1 ] NEW_LINE print ( getPairs ( a ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 0 NEW_LINE while k > 0 and i < n and s [ i ] != '0' : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if i == n : NEW_LINE INDENT print ( '0' ) NEW_LINE DEDENT else : NEW_LINE INDENT while i < n and s [ i ] != '0' : NEW_LINE INDENT i += 1 NEW_LINE DEDENT print ( s [ i : ] + s [ : i ] ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT arr = [ ] NEW_LINE for _ in range ( 4 ) : NEW_LINE INDENT arr . append ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE DEDENT for i in range ( 3 ) : NEW_LINE INDENT if arr [ i ] [ i ] == 1 : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT if arr [ i ] [ j ] == 1 : NEW_LINE INDENT arr [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT DEDENT if arr [ 1 ] [ 1 ] == 1 : NEW_LINE INDENT if arr [ 1 ] [ 1 ] == 1 : NEW_LINE INDENT arr [ 1 ] [ 0 ] = 0 NEW_LINE DEDENT if arr [ 2 ] [ 1 ] == 1 : NEW_LINE INDENT arr [ 2 ] [ 0 ] = 0 NEW_LINE DEDENT if arr [ 3 ] [ 1 ] == 1 : NEW_LINE INDENT arr [ 3 ] [ 0 ] = 0 NEW_LINE DEDENT DEDENT if arr [ 0 ] [ 2 ] == 1 : NEW_LINE INDENT if arr [ 2 ] [ 0 ] == 1 : NEW_LINE INDENT arr [ 2 ] [ 2 ] = 0 NEW_LINE DEDENT if arr [ 3 ] [ 2 ] == 1 : NEW_LINE INDENT arr [ 3 ] [ 0 ] = 0 NEW_LINE DEDENT DEDENT if arr [ 2 ] [ 3 ] == 1 : NEW_LINE INDENT if arr [ 3 ] [ 2 ] == 1 : NEW_LINE INDENT arr [ 3 ] [ 2 ] = 0 NEW_LINE DEDENT DEDENT return " YES " NEW_LINE DEDENT main ( ) NEW_LINE print ( main ( ) ) NEW_LINE
N = 10000 NEW_LINE MOD = 1000000007 NEW_LINE F = [ 0 ] * N NEW_LINE def precompute ( ) : NEW_LINE INDENT F [ 1 ] = 2 NEW_LINE F [ 2 ] = 3 NEW_LINE F [ 3 ] = 4 NEW_LINE for i in range ( 4 , N ) : NEW_LINE INDENT F [ i ] = ( F [ i - 1 ] + F [ i - 2 ] ) % MOD NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 8 NEW_LINE precompute ( ) NEW_LINE print ( F [ n ] ) NEW_LINE DEDENT
import sys NEW_LINE from sys import stdin NEW_LINE input = stdin . readline NEW_LINE def main ( args ) : NEW_LINE INDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT ans = 0 NEW_LINE while True : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += i NEW_LINE if sum == n : NEW_LINE INDENT ans += 1 NEW_LINE break NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
def CeilIndex ( A , l , r , key ) : NEW_LINE INDENT while ( r - l > 1 ) : NEW_LINE INDENT m = l + ( r - l ) // 2 ; NEW_LINE if ( A [ m ] >= key ) : NEW_LINE INDENT r = m NEW_LINE DEDENT else : NEW_LINE INDENT l = m NEW_LINE DEDENT DEDENT return r NEW_LINE DEDENT def LongestIncreasingSubsequenceLength ( A , size ) : NEW_LINE INDENT tailTable = [ 0 ] * size NEW_LINE tailTable [ 0 ] = A [ 0 ] NEW_LINE length = 1 NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT if ( A [ i ] < tailTable [ 0 ] ) : NEW_LINE INDENT tailTable [ 0 ] = A [ i ] NEW_LINE DEDENT elif ( A [ i ] > tailTable [ length - 1 ] ) : NEW_LINE INDENT tailTable [ length - 1 ] = A [ i ] NEW_LINE length += 1 NEW_LINE DEDENT else : NEW_LINE INDENT tailTable [ CeilIndex ( tailTable , - 1 , length - 1 , A [ i ] ) ] = A [ i ] NEW_LINE DEDENT DEDENT return length NEW_LINE DEDENT A = [ 2 , 5 , 3 , 7 , 11 , 8 , 10 , 13 , 6 ] NEW_LINE n = len ( A ) NEW_LINE print ( " Length of Longest Increasing Subsequence is " , LongestIncreasingSubsequenceLength ( A , n ) ) NEW_LINE
import sys NEW_LINE def solve ( N : int , X : " List [ int ] " ) : NEW_LINE INDENT x = sorted ( X ) NEW_LINE l = x [ N - 1 ] - x [ 0 ] + 1 NEW_LINE print ( int ( l / 2 ) ) NEW_LINE return NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT def iterate_tokens ( ) : NEW_LINE INDENT for line in sys . stdin : NEW_LINE INDENT for word in line . split ( ) : NEW_LINE INDENT yield word NEW_LINE DEDENT DEDENT DEDENT tokens = iterate_tokens ( ) NEW_LINE N = int ( next ( tokens ) ) NEW_LINE X = [ int ( next ( tokens ) ) for _ in range ( N ) ] NEW_LINE solve ( N , X ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 6 NEW_LINE ans = 0 NEW_LINE for i in range ( LIMIT ) : NEW_LINE INDENT if get_Chain_length ( i ) == 60 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return str ( ans ) NEW_LINE DEDENT def get_Chain_length ( n ) : NEW_LINE INDENT seen = set ( ) NEW_LINE while True : NEW_LINE INDENT if not seen . add ( n ) : NEW_LINE INDENT return len ( seen ) NEW_LINE DEDENT n = factor process ( n ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def N ( height , minute ) : NEW_LINE INDENT arr = [ 0 ] * ( K + 1 ) NEW_LINE result = 0 NEW_LINE max = height [ K - 1 ] NEW_LINE arr [ K - 1 ] = 1 NEW_LINE for i in range ( K - 2 , - 1 , - 1 ) : NEW_LINE INDENT if ( height [ i ] > max ) : NEW_LINE INDENT max = height [ i ] NEW_LINE arr [ minute ] = 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , K + 1 ) : NEW_LINE INDENT if ( arr [ i ] == 1 ) : NEW_LINE INDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT height = [ 3 , 5 , 1 , 2 , 3 ] NEW_LINE minute = [ 1 , 2 , 3 , 4 , 3 ] NEW_LINE K = len ( minute ) NEW_LINE print ( N ( height , minute , K ) ) NEW_LINE
import math NEW_LINE def checkPowerof8 ( n ) : NEW_LINE INDENT i = math . log ( n ) / math . log ( 8 ) ; NEW_LINE return ( i - math . floor ( i ) < 0.000001 ) ; NEW_LINE DEDENT n = 65 ; NEW_LINE if ( checkPowerof8 ( n ) ) : NEW_LINE INDENT print ( " Yes " ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) ; NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE print ( min ( a , b , ( a + b ) // 4 ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE l = [ ] NEW_LINE for _ in range ( m ) : NEW_LINE INDENT l . append ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE DEDENT p = [ [ 0 for i in range ( m ) ] for j in range ( n ) ] NEW_LINE for i in range ( n ) : p [ i ] = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE print ( max ( p ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE c = 0 NEW_LINE l = [ ] NEW_LINE r = [ ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE l . append ( a ) NEW_LINE r . append ( b ) NEW_LINE if a > b : NEW_LINE INDENT c = max ( c , b - a ) NEW_LINE DEDENT elif a < b : NEW_LINE INDENT c = min ( c , a - b ) NEW_LINE DEDENT DEDENT print ( * c ) NEW_LINE DEDENT
def countWays ( n , m ) : NEW_LINE INDENT count = [ 0 ] * ( n + 1 ) NEW_LINE count [ 0 ] = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( i > m ) : NEW_LINE INDENT count [ i ] = count [ i - 1 ] + count [ i - m ] NEW_LINE DEDENT elif ( i < m ) : NEW_LINE INDENT count [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT count [ i ] = 2 NEW_LINE DEDENT DEDENT return count [ n ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 7 NEW_LINE m = 4 NEW_LINE print ( " Number of ways = " , countWays ( n , m ) ) NEW_LINE DEDENT
def print ( n ) : NEW_LINE INDENT print ( n + n // 2 ) NEW_LINE for i in range ( 2 , n + 1 , 2 ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT for i in range ( 1 , n + 1 , 2 ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT for i in range ( 2 , n + 1 , 2 ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE print ( n ) NEW_LINE DEDENT
import sys NEW_LINE def solve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE ans = n NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( ans % i == 0 ) : NEW_LINE INDENT ans = ( ans // i ) * ( 2 ** ( i - 1 ) ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( solve ( ) ) NEW_LINE DEDENT
s = input ( ) NEW_LINE for i in range ( 3 , - 1 , - 1 ) : NEW_LINE INDENT if s [ i ] == '0' : NEW_LINE INDENT print ( s [ i + 1 ] , end = ' ' ) NEW_LINE DEDENT elif s [ i ] == '1' : NEW_LINE INDENT print ( s [ i + 1 ] , end = ' ' ) NEW_LINE DEDENT DEDENT print ( ' ' ) NEW_LINE
while True : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if a == 0 : break NEW_LINE c = 0 ; d = [ 1 ] * ( a + 1 ) NEW_LINE for x in range ( a ) : NEW_LINE INDENT for y in range ( a ) : NEW_LINE INDENT if x + y == b : d [ x ] = 1 NEW_LINE elif d [ x + y ] == 1 : c += 1 NEW_LINE DEDENT DEDENT print ( sorted ( c ) [ - 1 ] ) NEW_LINE DEDENT
MAX = 100 NEW_LINE def recur ( ind , cnt , last , a , n , k , dp ) : NEW_LINE INDENT if ( cnt == k ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( ind == n ) : NEW_LINE INDENT return - 1e9 NEW_LINE DEDENT if ( dp [ ind ] [ cnt ] != - 1 ) : NEW_LINE INDENT return dp [ ind ] [ cnt ] NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( ind , n ) : NEW_LINE INDENT if ( cnt % 2 == 0 ) : NEW_LINE INDENT ans = max ( ans , recur ( i + 1 , cnt + 1 , i , a , n , k , dp ) ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = max ( ans , recur ( i + 1 , cnt + 1 , 0 , a , n , k , dp ) ) NEW_LINE DEDENT DEDENT dp [ ind ] [ cnt ] = ans NEW_LINE return dp [ ind ] [ cnt ] NEW_LINE DEDENT a = [ 4 , 5 , 3 , 7 , 8 , 10 , 9 , 8 ] NEW_LINE n = len ( a ) NEW_LINE k = 4 NEW_LINE dp = [ [ - 1 for i in range ( MAX ) ] for j in range ( MAX ) ] NEW_LINE print ( recur ( 0 , 0 , 0 , a , n , k , dp ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE x = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE y = [ ] NEW_LINE if len ( x ) > n : NEW_LINE INDENT y . append ( n ) NEW_LINE DEDENT c = 0 NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT c += x [ i ] NEW_LINE y . append ( x [ i ] - x [ i - 1 ] ) NEW_LINE DEDENT ans = max ( 0 , min ( len ( y ) , n - max ( y ) ) ) NEW_LINE if c < ans : NEW_LINE INDENT ans = c NEW_LINE DEDENT if c == ans : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( min ( len ( y ) , n - max ( y ) ) + 1 - min ( y ) ) NEW_LINE DEDENT
def calculateBase4 ( bin ) : NEW_LINE INDENT if ( bin > "00" ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( bin > "01" ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( bin > "10" ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT return 3 NEW_LINE DEDENT def isDivisibleBy5 ( bin ) : NEW_LINE INDENT l = len ( bin ) NEW_LINE if ( l % 2 != 0 ) : NEW_LINE INDENT bin = '0' + bin NEW_LINE DEDENT odd_sum = 0 NEW_LINE even_sum = 0 NEW_LINE isOddDigit = 1 NEW_LINE for i in range ( 0 , len ( bin ) , 2 ) : NEW_LINE INDENT if ( isOddDigit != 0 ) : NEW_LINE INDENT odd_sum += calculateBase4 ( bin [ i : i + 2 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT even_sum += calculateBase4 ( bin [ i : i + 2 ] ) NEW_LINE DEDENT isOddDigit ^= 1 NEW_LINE DEDENT if ( abs ( odd_sum - even_sum ) % 5 == 0 ) : NEW_LINE INDENT return " Yes " NEW_LINE DEDENT return " No " NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT bin = "10000101001" NEW_LINE print ( isDivisibleBy5 ( bin ) ) NEW_LINE DEDENT
import sys NEW_LINE from sys import stdin NEW_LINE input = stdin . readline NEW_LINE def main ( args ) : NEW_LINE INDENT dp = [ [ - 1 ] * 7 for _ in range ( 10 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 0 NEW_LINE for line in sys . stdin : NEW_LINE INDENT for l in range ( len ( line ) ) : NEW_LINE INDENT r = line [ l ] NEW_LINE for i in range ( 7 ) : NEW_LINE INDENT if int ( r ) == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( 3 ) : NEW_LINE INDENT if int ( r ) == 0 : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
s = input ( ) NEW_LINE c = input ( ) NEW_LINE l = s . split ( ) NEW_LINE n = len ( l ) NEW_LINE ans = 10 ** 9 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT if i == " + " and c [ i ] == " - " : NEW_LINE INDENT c [ i ] = int ( c [ i ] ) NEW_LINE DEDENT elif i == " * " and c [ i ] == " + " : NEW_LINE INDENT c [ i ] = int ( c [ i ] ) NEW_LINE DEDENT elif i == " + " and c [ i ] == " * " : NEW_LINE INDENT c [ i ] = int ( c [ i ] ) NEW_LINE DEDENT elif i == " * " and c [ i ] == " + " : NEW_LINE INDENT c [ i ] = int ( c [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT c [ i ] = c [ i ] * int ( c [ i ] ) NEW_LINE DEDENT DEDENT DEDENT s = " " NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s == " + " and c [ i ] == " - " : NEW_LINE INDENT l = l + int ( s ) NEW_LINE DEDENT elif s == " * " and c [ i ] == " + " : NEW_LINE INDENT l = l * int ( s ) NEW_LINE DEDENT elif s == " + " and c [ i ] == " * " : NEW_LINE INDENT l = l * int ( s ) NEW_LINE DEDENT DEDENT ans = min ( ans , n ) NEW_LINE print ( ans ) NEW_LINE
MAX = 1005 NEW_LINE def SieveOfEratosthenes ( primes ) : NEW_LINE INDENT prime = [ True for i in range ( MAX ) ] NEW_LINE p = 2 NEW_LINE while p * p < MAX : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT p = 2 NEW_LINE while p < MAX : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT primes . append ( p ) NEW_LINE DEDENT p += 1 NEW_LINE DEDENT DEDENT def minimumSquareFreeDivisors ( N ) : NEW_LINE INDENT primes = [ ] NEW_LINE SieveOfEratosthenes ( primes ) NEW_LINE max_count = 0 NEW_LINE for i in range ( len ( primes ) and primes [ i ] * primes [ i ] <= N ) : NEW_LINE INDENT if ( N % primes [ i ] == 0 ) : NEW_LINE INDENT tmp = 0 NEW_LINE while ( N % primes [ i ] == 0 ) : NEW_LINE INDENT tmp += 1 NEW_LINE N = int ( N / primes [ i ] ) NEW_LINE DEDENT max_count = max ( max_count , tmp ) NEW_LINE DEDENT DEDENT if ( max_count == 0 ) : NEW_LINE INDENT max_count = 1 NEW_LINE DEDENT return max_count NEW_LINE DEDENT N = 24 NEW_LINE print ( " Minimum Number of Square limit Divisors is " , minimumSquareFreeDivisors ( N ) ) NEW_LINE N = 6 NEW_LINE print ( " Minimum Number of Square limit Divisors is " , minimumSquareFreeDivisors ( N ) ) NEW_LINE
x , a , b = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ( x - a ) % b ) NEW_LINE
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE p = 0 ; c = 0 NEW_LINE for i in range ( n - k + 1 ) : NEW_LINE INDENT if ( a [ k + i ] == a [ i + k ] ) : NEW_LINE INDENT c = 1 NEW_LINE break NEW_LINE DEDENT k += i NEW_LINE DEDENT if ( c == 1 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( c ) NEW_LINE DEDENT
def fun ( n ) : NEW_LINE INDENT return n & ( n - 1 ) NEW_LINE DEDENT n = 7 NEW_LINE print ( " The number after un dic set bit " , " the rightmost set bit " , fun ( n ) ) NEW_LINE
def LongestFibSubseq ( A , n ) : NEW_LINE INDENT S = set ( ) NEW_LINE for t in A : NEW_LINE INDENT S . add ( t ) NEW_LINE DEDENT maxLen = 0 NEW_LINE x , y = 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT x = A [ j ] NEW_LINE y = A [ i ] + A [ j ] NEW_LINE length = 3 NEW_LINE while ( y in S and ( y != S . last ( ) ) ) : NEW_LINE INDENT z = x + y NEW_LINE x = y NEW_LINE y = z NEW_LINE maxLen = max ( maxLen , length ) NEW_LINE length = max ( maxLen , length ) NEW_LINE DEDENT DEDENT DEDENT if maxLen >= 3 : NEW_LINE INDENT return maxLen NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] NEW_LINE n = len ( A ) NEW_LINE print ( LongestFibSubseq ( A , n ) ) NEW_LINE DEDENT
def countPairs ( a , b , n , m ) : NEW_LINE INDENT cnt = 0 NEW_LINE s = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT sum = a [ i ] + b [ j ] NEW_LINE if sum in s : NEW_LINE INDENT cnt += 1 NEW_LINE s . add ( sum ) NEW_LINE DEDENT DEDENT DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 12 , 2 , 7 ] NEW_LINE n = len ( a ) NEW_LINE b = [ 4 , 3 , 8 ] NEW_LINE m = len ( b ) NEW_LINE print ( countPairs ( a , b , n , m ) ) NEW_LINE DEDENT
from math import sqrt , floor NEW_LINE def check ( arr , x , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT y = sqrt ( arr [ i ] ) NEW_LINE if ( floor ( y ) == ceil ( y ) ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT DEDENT if ( sum % x == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 9 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE x = 13 NEW_LINE if ( check ( arr , x , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
import sys NEW_LINE from heapq import heappush , heappop NEW_LINE input = sys . stdin . readline NEW_LINE def main ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE lines = sys . stdin . readlines ( ) NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT query , * arg = lines [ i ] . split ( ) NEW_LINE if query == '0' : NEW_LINE INDENT ans . append ( arg [ 1 ] ) NEW_LINE DEDENT elif query == '1' : NEW_LINE INDENT print ( max ( ans [ int ( arg [ 0 ] ) ] , ans [ int ( arg [ 1 ] ) ] ) ) NEW_LINE DEDENT elif query == '2' : NEW_LINE INDENT ans . append ( arg [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . pop ( ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def calculate_min_sum ( a , n ) : NEW_LINE INDENT a . sort ( ) NEW_LINE min_sum = 0 NEW_LINE for i in range ( 1 , n , 2 ) : NEW_LINE INDENT min_sum += abs ( a [ i ] - a [ i - 1 ] ) NEW_LINE DEDENT return min_sum NEW_LINE DEDENT def calculate_max_sum ( a , n ) : NEW_LINE INDENT a . sort ( ) NEW_LINE max_sum = 0 NEW_LINE for i in range ( n // 2 ) : NEW_LINE INDENT max_sum += abs ( a [ n - 1 - i ] - a [ i ] ) NEW_LINE DEDENT return max_sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 10 , - 10 , 20 , - 40 ] NEW_LINE n = len ( a ) NEW_LINE print ( " The minimum sum of pairs is " , calculate_min_sum ( a , n ) ) NEW_LINE print ( " The maximum sum of pairs is " , calculate_max_sum ( a , n ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = set ( map ( int , input ( ) . split ( ) ) ) NEW_LINE m = int ( input ( ) ) NEW_LINE b = set ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if b - a : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT
N = int ( input ( ) ) NEW_LINE A = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE DP = [ 0 ] * ( N + 1 ) NEW_LINE DP [ 0 ] = 1 NEW_LINE for i in range ( N ) : NEW_LINE INDENT DP [ i + 1 ] = DP [ i ] + 1 NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT if DP [ i + 1 ] : NEW_LINE INDENT if DP [ i ] : NEW_LINE INDENT DP [ i + 2 ] = 1 NEW_LINE DEDENT DEDENT DEDENT flag = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if DP [ i ] : NEW_LINE INDENT if A [ i ] % 2 == 0 : NEW_LINE INDENT DP [ i + 1 ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT DEDENT DEDENT if flag == 1 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def isPalindrome ( s ) : NEW_LINE INDENT for i in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ i ] != s [ len ( s ) - i - 1 ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def ans ( s ) : NEW_LINE INDENT s2 = s NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT s2 = s2 [ : - 1 ] + s2 NEW_LINE s2 = s2 [ 1 : ] NEW_LINE if ( s == None ) : NEW_LINE INDENT return s2 NEW_LINE DEDENT elif ( s != s2 and not isPalindrome ( s2 ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def solve ( s ) : NEW_LINE INDENT if ( len ( s ) <= 3 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT cnt = [ 0 ] * 25 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT cnt [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT if ( max ( cnt ) >= ( len ( s ) - 1 ) ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT else : NEW_LINE INDENT return ( 1 if ( ans ( s ) ) else 2 ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " nolon " NEW_LINE print ( solve ( s ) ) NEW_LINE DEDENT
def count_numbers ( k , n ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( 2 ) ] for i in range ( n + 1 ) ] NEW_LINE dp [ 1 ] [ 0 ] = 0 NEW_LINE dp [ 1 ] [ 1 ] = k - 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] NEW_LINE dp [ i ] [ 1 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] ) * ( k - 1 ) NEW_LINE DEDENT return dp [ n ] [ 0 ] + dp [ n ] [ 1 ] NEW_LINE DEDENT k = 10 NEW_LINE n = 3 NEW_LINE print ( count_numbers ( k , n ) ) NEW_LINE
def minCost ( n , arr , cost ) : NEW_LINE INDENT sum = 0 NEW_LINE totalCost = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT totalCost += cost * sum NEW_LINE arr [ n - 1 ] += sum NEW_LINE totalCost += ( 2 * cost * arr [ n - 1 ] ) NEW_LINE return totalCost NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE cost = 1 NEW_LINE print ( minCost ( n , arr , cost ) ) NEW_LINE DEDENT
c = 0 NEW_LINE for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c += 1 NEW_LINE if a [ 2 ] <= a [ 0 ] + 1 : c += 1 NEW_LINE elif a [ 2 ] > a [ 0 ] + 1 : c += 2 NEW_LINE else : c += 1 NEW_LINE DEDENT print ( c ) NEW_LINE
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE m = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 0 NEW_LINE ans = 0 NEW_LINE while i < m : NEW_LINE INDENT if s [ i ] == " I " : NEW_LINE INDENT j = i NEW_LINE while j < n : NEW_LINE INDENT if s [ j ] == " I " : j += 1 NEW_LINE else : NEW_LINE INDENT s [ j ] = " O " NEW_LINE DEDENT j += 2 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = input ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( len ( n ) ) : NEW_LINE INDENT if n [ i ] == "0" or n [ i ] == '5' : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = int ( n [ i ] ) NEW_LINE flag = 0 NEW_LINE for j in range ( x , 10 ) : NEW_LINE INDENT if ( j + j ) % 25 == 0 : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT DEDENT if flag == 1 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT def insert ( root , data ) : NEW_LINE INDENT if root == None : NEW_LINE INDENT return Node ( data ) NEW_LINE DEDENT if data < root . data : NEW_LINE INDENT root . left = insert ( root . left , data ) NEW_LINE DEDENT if data > root . data : NEW_LINE INDENT root . right = insert ( root . right , data ) NEW_LINE DEDENT return root NEW_LINE DEDENT def inorder ( root ) : NEW_LINE INDENT if root == None : NEW_LINE INDENT return NEW_LINE DEDENT inorder ( root . left ) NEW_LINE print ( root . data , end = " " ) NEW_LINE inorder ( root . right ) NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 2 , 5 , 4 , 4 ] NEW_LINE root = None NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT root = insert ( arr [ i ] , arr [ i ] ) NEW_LINE DEDENT inorder ( root ) NEW_LINE
MAX_CHAR = 26 NEW_LINE def removeChars ( Str , k ) : NEW_LINE INDENT hash = [ 0 ] * MAX_CHAR NEW_LINE n = len ( Str ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT hash [ ord ( Str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT res = " " NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( hash [ ord ( Str [ i ] ) - ord ( ' a ' ) ] >= k ) : NEW_LINE INDENT res += Str [ i ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT Str = " geeksforgeeks " NEW_LINE k = 2 NEW_LINE print ( removeChars ( Str , k ) ) NEW_LINE
def LCSubStr ( X , Y , m , n ) : NEW_LINE INDENT LC mp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ] NEW_LINE result = 0 NEW_LINE for i in range ( m + 1 ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT if ( i == 0 or j == 0 ) : NEW_LINE INDENT LC mp [ i ] [ j ] = 0 NEW_LINE DEDENT elif ( X [ i - 1 ] == Y [ j - 1 ] ) : NEW_LINE INDENT LC mp [ i ] [ j ] = LC mp [ i - 1 ] [ j - 1 ] + 1 NEW_LINE result = max ( result , LC mp [ i ] [ j ] ) NEW_LINE DEDENT else : NEW_LINE INDENT LC mp [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT return result NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT X = "SRSRSR : GeeksforGeeks . org " NEW_LINE Y = " New gen gen : GeeksQuiz . com " NEW_LINE m = len ( X ) NEW_LINE n = len ( Y ) NEW_LINE print ( " Length of Longest mat Substring is " , LCSubStr ( X , Y , m , n ) ) NEW_LINE DEDENT
def countOccurrences ( x , d ) : NEW_LINE INDENT count = 0 NEW_LINE while ( x > 0 ) : NEW_LINE INDENT if ( x % 10 == d ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT x = x // 10 NEW_LINE DEDENT return count NEW_LINE DEDENT def maxOccurring ( x ) : NEW_LINE INDENT if ( x < 0 ) : NEW_LINE INDENT x = - x NEW_LINE DEDENT result = 0 NEW_LINE max_count = 1 NEW_LINE for d in range ( 10 ) : NEW_LINE INDENT count = countOccurrences ( x , d ) NEW_LINE if ( count >= max_count ) : NEW_LINE INDENT max_count = count NEW_LINE result = d NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT x = 1223355 NEW_LINE print ( " Max np digit is " , maxOccurring ( x ) ) NEW_LINE
def printLogestIncSubArr ( arr , n ) : NEW_LINE INDENT max = 1 NEW_LINE len = 1 NEW_LINE maxIndex = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] > arr [ i - 1 ] ) : NEW_LINE INDENT len += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ( max < len ) : NEW_LINE INDENT max = len NEW_LINE maxIndex = i - max NEW_LINE DEDENT len = 1 NEW_LINE DEDENT DEDENT if ( max < len ) : NEW_LINE INDENT max = len NEW_LINE maxIndex = n - max NEW_LINE DEDENT for i in range ( maxIndex , max + maxIndex ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 5 , 6 , 3 , 5 , 7 , 8 , 9 , 1 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE printLogestIncSubArr ( arr , n ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE ans = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT ans . append ( i ) NEW_LINE DEDENT DEDENT print ( * ans ) NEW_LINE
from collections import Counter NEW_LINE n , m = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE z = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT z [ i + 1 ] = l [ i ] NEW_LINE DEDENT flag = True NEW_LINE for i in range ( m ) : NEW_LINE INDENT x , y , z [ x ] = map ( int , input ( ) . split ( ) ) NEW_LINE if y - x > 0 : NEW_LINE INDENT flag = False NEW_LINE DEDENT y -= 1 NEW_LINE if y + 1 == z [ x ] : NEW_LINE INDENT flag = False NEW_LINE DEDENT DEDENT print ( " Yes " if flag else " No " ) NEW_LINE
def Max_Sum ( a , n ) : NEW_LINE INDENT b = [ 0 for i in range ( n ) ] NEW_LINE S = 0 NEW_LINE res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ i ] = res NEW_LINE res += a [ i ] NEW_LINE S += a [ i ] NEW_LINE res = max ( res , - S ) NEW_LINE DEDENT ans = S NEW_LINE ans = max ( ans , res ) NEW_LINE g = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT g -= a [ i ] NEW_LINE ans = max ( ans , g + b [ i ] ) NEW_LINE DEDENT return ans NEW_LINE DEDENT a = [ - 6 , 10 , - 3 , 10 , - 2 ] NEW_LINE n = len ( a ) NEW_LINE print ( " Maximum sum is : " , Max_Sum ( a , n ) ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT l = [ int ( i ) for i in input ( ) . split ( " " ) ] NEW_LINE x = l [ 0 ] NEW_LINE y = l [ 1 ] NEW_LINE if x == y : NEW_LINE INDENT print ( x * 2 ) NEW_LINE DEDENT elif x < y : NEW_LINE INDENT print ( y * 2 - x ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( x * 2 ) NEW_LINE DEDENT DEDENT
def reverse ( Str , x ) : NEW_LINE INDENT n = ( len ( Str ) - x ) // 2 NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( Str [ i ] , end = " " ) NEW_LINE DEDENT for i in range ( n + x - 1 , n , - 1 ) : NEW_LINE INDENT print ( Str [ i ] , end = " " ) NEW_LINE DEDENT for i in range ( n + x , len ( Str ) , 1 ) : NEW_LINE INDENT print ( Str [ i ] , end = " " ) NEW_LINE DEDENT DEDENT Str = " geeksforgeeks " NEW_LINE x = 3 NEW_LINE reverse ( Str , x ) NEW_LINE
def lps ( str ) : NEW_LINE INDENT n = len ( str ) NEW_LINE L = [ [ 0 for i in range ( n ) ] for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT L [ i ] [ i ] = 1 NEW_LINE DEDENT for cl in range ( 2 , n + 1 ) : NEW_LINE INDENT for i in range ( n - cl + 1 ) : NEW_LINE INDENT j = i + cl - 1 NEW_LINE if ( str [ i ] == str [ j ] and cl == 2 ) : NEW_LINE INDENT L [ i ] [ j ] = 2 NEW_LINE DEDENT elif ( str [ i ] == str [ j ] ) : NEW_LINE INDENT L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 NEW_LINE DEDENT else : NEW_LINE INDENT L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return L [ 0 ] [ n - 1 ] NEW_LINE DEDENT def minimumNumberOfDeletions ( str ) : NEW_LINE INDENT n = len ( str ) NEW_LINE lps ( str ) NEW_LINE return ( n - lps ( str ) ) NEW_LINE DEDENT str = " geeksforgeeks " NEW_LINE print ( " Minimum number of write write writeableDeletions = " , minimumNumberOfDeletions ( str ) ) NEW_LINE
def bit_check ( n ) : NEW_LINE INDENT if ( n & ( n - 1 ) == 0 ) : NEW_LINE INDENT return True ; NEW_LINE DEDENT return False ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 14 ; NEW_LINE if ( bit_check ( n ) ) : NEW_LINE INDENT print ( '1' ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( '0' ) ; NEW_LINE DEDENT DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE ans = 0 NEW_LINE curr_max = max ( a ) NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if curr_max == a [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE curr_max = a [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT curr_max = a [ i ] NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 8 - 1 NEW_LINE ans = 0 NEW_LINE primes = eulerlib . list_primes ( LIMIT // 2 ) NEW_LINE for i in range ( 0 , len ( primes ) ) : NEW_LINE INDENT if primes [ i ] <= eulerlib . sqrt ( LIMIT ) : NEW_LINE INDENT end = eulerlib . list_primes ( LIMIT // primes [ i ] ) NEW_LINE if end >= 0 : NEW_LINE INDENT end += 1 NEW_LINE DEDENT else : NEW_LINE INDENT end = - end - 1 NEW_LINE DEDENT ans += end - i NEW_LINE DEDENT DEDENT return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
M = 20 NEW_LINE dp = [ [ [ [ - 1 for i in range ( 2 ) ] for j in range ( M ) ] for k in range ( M ) ] for l in range ( M ) ] NEW_LINE def count ( pos , cnt , tight , nonz , num ) : NEW_LINE INDENT if pos == len ( num ) : NEW_LINE INDENT if cnt == K : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if dp [ pos ] [ cnt ] [ tight ] [ nonz ] != - 1 : NEW_LINE INDENT return dp [ pos ] [ cnt ] [ tight ] [ nonz ] NEW_LINE DEDENT ans = 0 NEW_LINE limit = 9 if tight != 0 else num [ pos ] NEW_LINE for dig in range ( limit + 1 ) : NEW_LINE INDENT currCnt = cnt NEW_LINE if dig == d : NEW_LINE INDENT if d != 0 or ( d == 0 and nonz != 0 ) : NEW_LINE INDENT currCnt += 1 NEW_LINE DEDENT DEDENT currTight = tight NEW_LINE if dig < num [ pos ] : NEW_LINE INDENT currTight = 1 NEW_LINE DEDENT ans += count ( pos + 1 , currCnt , currTight , ( 1 if dig != 0 else 0 ) , num ) NEW_LINE DEDENT dp [ pos ] [ cnt ] [ tight ] [ nonz ] = ans NEW_LINE return dp [ pos ] [ cnt ] [ tight ] [ nonz ] NEW_LINE DEDENT def solve ( x ) : NEW_LINE INDENT num = [ ] NEW_LINE while x != 0 : NEW_LINE INDENT num . append ( x % 10 ) NEW_LINE x //= 10 NEW_LINE DEDENT num . reverse ( ) NEW_LINE for i in range ( M ) : NEW_LINE INDENT for j in range ( M ) : NEW_LINE INDENT for k in range ( 2 ) : NEW_LINE INDENT for l in range ( 2 ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] = - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return count ( 0 , 0 , 0 , 0 , num ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT L = 11 NEW_LINE R = 100 NEW_LINE d = 2 NEW_LINE K = 1 NEW_LINE print
n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE while ( n >= 0 ) : NEW_LINE INDENT r = n % 10 NEW_LINE ans += r * 10 ** ( 10 ** ( 10 - r ) ) NEW_LINE n = n // 10 NEW_LINE DEDENT if n == 0 : NEW_LINE INDENT print ( ans ) NEW_LINE exit ( ) NEW_LINE DEDENT ans += ( 9 - n ) * 10 ** ( 10 ** ( 10 - r ) ) NEW_LINE print ( ans ) NEW_LINE
def isP p p p p p ( arr , n , num , i , j ) : NEW_LINE INDENT if ( i >= 0 and arr [ i ] > num ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( j < n and arr [ j ] > num ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def isT Q ( arr , n , num , i , j ) : NEW_LINE INDENT if ( i >= 0 and arr [ i ] < num ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( j < n and arr [ j ] < num ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT def printPeaksT Q ( arr , n ) : NEW_LINE INDENT print ( " P mats : " , end = " " ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( isP p ( arr , n , arr [ i ] , i - 1 , i + 1 ) ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT print ( " " ) NEW_LINE print ( " T Q : " , end = " " ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( isT Q ( arr , n , arr [ i ] , i - 1 , i + 1 ) ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 5 , 10 , 5 , 7 , 4 , 3 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE printPeaksT Q ( arr , n ) NEW_LINE DEDENT
def index ( i ) : NEW_LINE INDENT return ( 1 + ( i >> 31 ) - ( - i >> 31 ) ) ; NEW_LINE DEDENT def check ( n ) : NEW_LINE INDENT s = [ " negative " , " zero " , " positive " ] ; NEW_LINE val = index ( n ) ; NEW_LINE print ( n , " is " , s [ val ] ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT check ( 30 ) ; NEW_LINE check ( 20 ) ; NEW_LINE check ( 0 ) ; NEW_LINE DEDENT
def frequency ( a , n , x ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] == x ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT a = [ 0 , 5 , 5 , 5 , 4 ] NEW_LINE x = 5 NEW_LINE n = len ( a ) NEW_LINE print ( frequency ( a , n , x ) ) NEW_LINE
def isNum nums ( num ) : NEW_LINE INDENT num = abs ( num ) NEW_LINE s = num NEW_LINE ans = True NEW_LINE s1 = s [ 0 ] NEW_LINE s2 = s [ 1 ] NEW_LINE hs = dict ( ) NEW_LINE for c in s1 : NEW_LINE INDENT hs [ c ] = 1 NEW_LINE DEDENT str_len = len ( s ) NEW_LINE hs_len = len ( hs ) NEW_LINE if ( hs_len <= ( str_len // 2 ) or hs_len == str_len ) : NEW_LINE INDENT ans = False NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 1234567890 NEW_LINE flag = isNum nums ( N ) NEW_LINE if flag : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
from math import sqrt NEW_LINE def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n <= 3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , int ( sqrt ( n ) ) + 1 , 6 ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def isThreeDisctFactors ( n ) : NEW_LINE INDENT sq = int ( sqrt ( n ) ) NEW_LINE if ( 1 + sq * sq != n ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( isPrime ( sq ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT num = 9 NEW_LINE if ( isThreeDisctFactors ( num ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT num = 15 NEW_LINE if ( isThreeDisctFactors ( num ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT num = 12397923568441 NEW_LINE if ( isThreeDisctFactors ( num ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT ans = sum ( 1 for i in range ( 99 , - 1 , - 1 ) ) NEW_LINE n = 1 NEW_LINE for i in range ( 99 , - 1 , - 1 ) : NEW_LINE INDENT temp = ( r r * n ) + d NEW_LINE d = n NEW_LINE n = temp NEW_LINE DEDENT ans = str ( ans ) NEW_LINE while n != 0 : NEW_LINE INDENT divrem = n // ( 10 ** ( - 1 ) ) NEW_LINE ans += divrem * 2 NEW_LINE n = divrem NEW_LINE DEDENT return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
from math import gcd NEW_LINE def LCM ( x , y , z ) : NEW_LINE INDENT ans = ( ( x * y ) // ( gcd ( x , y ) ) ) ; NEW_LINE return ( ( z * ans ) // ( gcd ( ans , z ) ) ) ; NEW_LINE DEDENT def findDivisible ( n , x , y , z ) : NEW_LINE INDENT lcm = LCM ( x , y , z ) ; NEW_LINE ndigitnumber = pow ( 10 , n - 1 ) ; NEW_LINE rem = ndigitnumber % lcm ; NEW_LINE if ( rem == 0 ) : NEW_LINE INDENT return ndigitnumber ; NEW_LINE DEDENT ndigitnumber += lcm - rem ; NEW_LINE if ( ndigitnumber < pow ( 10 , n ) ) : NEW_LINE INDENT return ndigitnumber ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 ; x = 2 ; y = 3 ; z = 5 ; NEW_LINE res = findDivisible ( n , x , y , z ) ; NEW_LINE if ( res != 0 ) : NEW_LINE INDENT print ( res ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not possible " ) ; NEW_LINE DEDENT DEDENT
from math import sqrt , gcd NEW_LINE MAXN = 100001 NEW_LINE prime = [ True for i in range ( MAXN ) ] NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , int ( sqrt ( MAXN ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , MAXN , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def common_prime ( a , b ) : NEW_LINE INDENT gcd = gcd ( a , b ) NEW_LINE for i in range ( 2 , gcd + 1 , 1 ) : NEW_LINE INDENT if ( prime [ i ] and gcd % i == 0 ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE a = 6 NEW_LINE b = 12 NEW_LINE common_prime ( a , b ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE lst = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s , l , p = map ( int , input ( ) . split ( ) ) NEW_LINE lst . append ( [ s , l , p ] ) NEW_LINE DEDENT m = int ( input ( ) ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT r = int ( input ( ) ) NEW_LINE lst . pop ( r ) NEW_LINE DEDENT ans = [ - 1 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT if lst [ i ] [ j ] != - 1 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT ans [ i ] = lst [ i ] [ j ] NEW_LINE DEDENT DEDENT if m > 0 : NEW_LINE INDENT print ( * ans , sep = " \n " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
from collections import deque NEW_LINE import sys NEW_LINE input = sys . stdin . readline NEW_LINE n = int ( input ( ) ) NEW_LINE g = [ [ ] for _ in range ( n ) ] NEW_LINE for _ in range ( n - 1 ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE a -= 1 NEW_LINE b -= 1 NEW_LINE g [ a ] . append ( b ) NEW_LINE g [ b ] . append ( a ) NEW_LINE DEDENT def dfs ( v , p ) : NEW_LINE INDENT if ( v == p ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( dfs ( v , p ) ) : NEW_LINE INDENT return 2 * p + 1 NEW_LINE DEDENT return 2 * p + 1 NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT ans = 0 NEW_LINE for _ in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if dfs ( a , - 1 ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT if ans % 2 : NEW_LINE INDENT print ( ' First ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' Second ' ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE while t : NEW_LINE INDENT t -= 1 NEW_LINE n , m = map ( int , input ( ) . split ( ) ) NEW_LINE grid = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT grid . append ( input ( ) ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if grid [ i ] [ i ] == '1' : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if i + 1 == j : NEW_LINE INDENT grid [ i ] [ j ] = '0' NEW_LINE DEDENT DEDENT DEDENT DEDENT if grid [ n - 1 ] [ m - 1 ] == '1' : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( input ( ) ) NEW_LINE DEDENT b = input ( ) NEW_LINE c = 0 NEW_LINE a . sort ( ) NEW_LINE b . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( len ( a [ i ] ) == k ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif ( len ( a [ i ] ) > k ) : NEW_LINE INDENT c += 5 NEW_LINE DEDENT elif ( len ( a [ i ] ) == k ) : NEW_LINE INDENT c -= 1 NEW_LINE DEDENT DEDENT print ( c , a [ - 1 ] ) NEW_LINE
def main ( ) : NEW_LINE INDENT x = input ( ) NEW_LINE x = x . lower ( ) NEW_LINE y = input ( ) NEW_LINE y = y . lower ( ) NEW_LINE n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT z = input ( ) NEW_LINE if z [ 0 ] == x [ 1 ] and z [ 1 ] == y [ 2 ] and z [ 2 ] == y [ 3 ] : NEW_LINE INDENT print ( " WA " ) NEW_LINE DEDENT else : NEW_LINE INDENT s = z . split ( ) NEW_LINE if s [ 0 ] == s [ 1 ] and s [ 2 ] == s [ 3 ] : NEW_LINE INDENT print ( "p " ) NEW_LINE DEDENT elif s [ 0 ] == s [ 2 ] and s [ 1 ] == s [ 3 ] : NEW_LINE INDENT print ( " WA " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " II " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT main ( ) NEW_LINE
import sys NEW_LINE T = int ( sys . stdin . readline ( ) ) NEW_LINE def solve ( ) : NEW_LINE INDENT N , L = map ( int , sys . stdin . readline ( ) . split ( ) ) NEW_LINE A = [ sys . stdin . readline ( ) . rstrip ( ) for i in range ( N ) ] NEW_LINE if N == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if L == 2 : NEW_LINE INDENT return 0 NEW_LINE DEDENT M = [ ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT M . append ( tuple ( sys . stdin . readline ( ) . rstrip ( ) ) ) NEW_LINE DEDENT last = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if A [ i ] == "0" : NEW_LINE INDENT last = i NEW_LINE DEDENT DEDENT for i in range ( L ) : NEW_LINE INDENT M . append ( tuple ( sys . stdin . readline ( ) . rstrip ( ) ) ) NEW_LINE last = i NEW_LINE DEDENT best = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if ( last ^ ( 1 << i ) ) not in M : NEW_LINE INDENT best = min ( best , len ( M ) - i ) NEW_LINE DEDENT DEDENT return best NEW_LINE DEDENT for tc in range ( 1 , T + 1 ) : NEW_LINE INDENT res = solve ( ) NEW_LINE print ( " Case # % d : % d " % ( tc , res ) ) NEW_LINE DEDENT
class Solution ( object ) : NEW_LINE INDENT def maxAreaOfIsland ( self , grid ) : NEW_LINE INDENT dr = [ 1 , - 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 ,
def sum ( x , y , n ) : NEW_LINE INDENT sum1 = ( ( pow ( x , 2 ) * ( pow ( x , 2 * n ) - 1 ) ) // ( pow ( x , 2 ) - 1 ) ) NEW_LINE sum2 = ( ( x * y * ( pow ( x , n ) * pow ( y , n ) - 1 ) ) // ( x * y - 1 ) ) NEW_LINE return sum1 + sum2 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x , y , n = 2 , 2 , 2 NEW_LINE print ( sum ( x , y , n ) ) NEW_LINE DEDENT
def findSum ( n ) : NEW_LINE INDENT n -= 1 NEW_LINE sum = 0 NEW_LINE sum += ( n * ( n + 1 ) ) // 2 NEW_LINE sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) // 6 NEW_LINE return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE print ( findSum ( n ) ) NEW_LINE DEDENT
def getSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE while ( n != 0 ) : NEW_LINE INDENT sum = sum + n % 10 NEW_LINE n = n // 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 687 NEW_LINE print ( getSum ( n ) ) NEW_LINE DEDENT
def getSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE while n > 0 : NEW_LINE INDENT sum += n % 10 NEW_LINE n //= 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 687 NEW_LINE print ( getSum ( n ) ) NEW_LINE DEDENT
import math NEW_LINE class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = None NEW_LINE DEDENT DEDENT def push ( head_ref , new_data ) : NEW_LINE INDENT new_node = Node ( new_data ) NEW_LINE new_node . data = new_data NEW_LINE new_node . next = head_ref NEW_LINE ( head_ref ) = new_node NEW_LINE return head_ref NEW_LINE DEDENT def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n <= 3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT i = 5 NEW_LINE while ( i * i <= n ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT i = i + 6 NEW_LINE DEDENT return True NEW_LINE DEDENT def deleteNonPrimeNodes ( head_ref ) : NEW_LINE INDENT ptr = head_ref NEW_LINE while ( ptr != None and not isPrime ( ptr . data ) ) : NEW_LINE INDENT temp = ptr NEW_LINE ptr = ptr . next NEW_LINE DEDENT head_ref = ptr NEW_LINE if ( ptr == None ) : NEW_LINE INDENT return None NEW_LINE DEDENT curr = ptr . next NEW_LINE while ( curr != None ) : NEW_LINE INDENT if ( not isPrime ( curr . data ) ) : NEW_LINE INDENT ptr . next = curr . next NEW_LINE curr = ptr . next NEW_LINE DEDENT else : NEW_LINE INDENT ptr = curr NEW_LINE curr = curr . next NEW_LINE DEDENT DEDENT return head_ref NEW_LINE DEDENT def prList ( head ) : NEW_LINE INDENT while ( head != None ) : NEW_LINE INDENT print ( head . data , end = " " ) NEW_LINE head = head . next NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT head = None NEW_LINE head = push ( head , 17 ) NEW_LINE head = push
import sys NEW_LINE n , m , l = map ( int , input ( ) . split ( ) ) NEW_LINE d = [ [ ] for i in range ( n * m ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT d [ i ] = [ int ( j ) for j in input ( ) . split ( ) ] NEW_LINE DEDENT d2 = [ [ ] for j in range ( n * m ) ] NEW_LINE for i in range ( n * m ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT d2 [ i ] . append ( [ d [ i ] [ j ] , i , j ] ) NEW_LINE DEDENT DEDENT l2 = len ( l ) NEW_LINE for i in range ( n * m ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if l2 - 1 in d2 [ i ] : NEW_LINE INDENT d2 [ i ] [ j + l2 - 1 ] . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT d2 [ i ] [ j + l2 - 1 ] = [ i ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( n * m ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if i + j == n * m : NEW_LINE INDENT break NEW_LINE DEDENT if l2 - 1 in d2 [ i ] : NEW_LINE INDENT d2 [ i ] [ j + l2 - 1 ] . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT d2 [ i ] [ j + l2 - 1 ] . append ( i ) NEW_LINE DEDENT DEDENT DEDENT mx = 0 NEW_LINE for i in range ( n * m ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if d2 [ i ] [ j ] > mx : NEW_LINE INDENT mx = d2 [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT print ( mx ) NEW_LINE
N , M = map ( int , input ( ) . split ( ) ) NEW_LINE AB = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( M ) ] NEW_LINE sAB = [ [ ] for _ in range ( N ) ] NEW_LINE for i in range ( M ) : NEW_LINE INDENT sAB [ i ] . append ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE DEDENT from collections import defaultdict NEW_LINE from heapq import heappush , heappop NEW_LINE h = defaultdict ( int ) NEW_LINE for a in AB : NEW_LINE INDENT heappush ( h , a ) NEW_LINE DEDENT ans = 0 NEW_LINE for k , v in h . items ( ) : NEW_LINE INDENT if v != 1 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT if N - 1 in ans : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
H , W = map ( int , input ( ) . split ( ) ) NEW_LINE c = [ input ( ) for i in range ( H ) ] NEW_LINE ans = 0 NEW_LINE for i in range ( H ) : NEW_LINE INDENT for j in range ( W ) : NEW_LINE INDENT if c [ i ] [ j ] == ' # ' : NEW_LINE INDENT continue NEW_LINE DEDENT c [ i ] [ j ] = 0 NEW_LINE c [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT c [ i ] [ j ] = 1 NEW_LINE DEDENT for k in range ( W - 1 ) : NEW_LINE INDENT for l in range ( H - k ) : NEW_LINE INDENT r = W - k NEW_LINE c [ i ] [ l ] = 0 NEW_LINE c [ i + 1 ] [ l ] = 1 NEW_LINE DEDENT DEDENT for l in range ( H - k ) : NEW_LINE INDENT r = W - k NEW_LINE c [ i ] [ l ] = 0 NEW_LINE c [ i + 1 ] [ l ] = 1 NEW_LINE DEDENT for k in range ( W - 2 ) : NEW_LINE INDENT for r in range ( H - k ) : NEW_LINE INDENT c [ i ] [ r ] = 0 NEW_LINE c [ i + 1 ] [ r ] = 1 NEW_LINE DEDENT DEDENT for k in range ( W - 2 ) : NEW_LINE INDENT for r in range ( H - k ) : NEW_LINE INDENT c [ i ] [ r ] = 0 NEW_LINE c [ i + 1 ] [ r ] = 1 NEW_LINE DEDENT DEDENT for r in range ( H - 2 ) : NEW_LINE INDENT for c in range ( W - k ) : NEW_LINE INDENT b = W - k NEW_LINE d = W - c [ r ] [ c + 1 ] NEW_LINE ans = max ( ans , d ) NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE
def min AA ( string ) : NEW_LINE INDENT if ( len ( string ) > 26 ) : NEW_LINE INDENT print ( " IMPOSSIBLE " ) NEW_LINE DEDENT else : NEW_LINE INDENT hash = [ 0 for i in range ( 26 ) ] NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT hash [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT if ( hash [ ord ( string [ i ] ) - ord ( ' a ' ) ] > 1 ) : NEW_LINE INDENT for j in range ( 26 ) : NEW_LINE INDENT if ( hash [ j ] == 0 ) : NEW_LINE INDENT hash [ ord ( string [ i ] ) - ord ( ' a ' ) ] -= 1 NEW_LINE string = string [ 0 : i ] + chr ( j + 1 ) + string [ i + 1 : ] NEW_LINE hash [ j ] += 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( string ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT string = " xxxxyyyy " NEW_LINE min AA ( string ) NEW_LINE DEDENT
def longestSubseq ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE pre_count_0 = [ 0 ] * ( n + 2 ) NEW_LINE pre_count_1 = [ 0 ] * ( n + 1 ) NEW_LINE post_count_0 = [ 0 ] * ( n + 2 ) NEW_LINE pre_count_0 [ 0 ] = 0 NEW_LINE post_count_0 [ n + 1 ] = 0 NEW_LINE pre_count_1 [ 0 ] = 0 NEW_LINE for j in range ( 1 , n + 1 ) : NEW_LINE INDENT pre_count_0 [ j ] = pre_count_0 [ j - 1 ] NEW_LINE pre_count_1 [ j ] = pre_count_1 [ j - 1 ] NEW_LINE post_count_0 [ n - j + 1 ] = post_count_0 [ n - j + 2 ] NEW_LINE if ( s [ j - 1 ] == '0' ) : NEW_LINE INDENT pre_count_0 [ j ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT pre_count_1 [ j ] += 1 NEW_LINE DEDENT if ( s [ n - j ] == '0' ) : NEW_LINE INDENT post_count_0 [ n - j + 1 ] += 1 NEW_LINE DEDENT DEDENT if ( pre_count_0 [ n ] == n or pre_count_0 [ n ] == 0 ) : NEW_LINE INDENT return n NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( i , n + 1 ) : NEW_LINE INDENT ans = max ( pre_count_0 [ i - 1 ] + pre_count_1 [ j ] - pre_count_1 [ i - 1 ] + post_count_0 [ j + 1 ] , ans ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = "000011100000" NEW_LINE print ( longestSubseq ( s ) ) NEW_LINE DEDENT
def sieveOfEratosthenes ( N , s ) : NEW_LINE INDENT prime = [ False ] * ( N + 1 ) NEW_LINE for i in range ( 2 , N + 1 , 2 ) : NEW_LINE INDENT s [ i ] = 2 NEW_LINE DEDENT for i in range ( 3 , N + 1 , 2 ) : NEW_LINE INDENT if ( prime [ i ] == False ) : NEW_LINE INDENT s [ i ] = i NEW_LINE for j in range ( i , N + 1 , 2 ) : NEW_LINE INDENT if ( prime [ i * j ] == False ) : NEW_LINE INDENT prime [ i * j ] = True NEW_LINE s [ i * j ] = i NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT def generatePrimeFactors ( N ) : NEW_LINE INDENT s = [ 0 ] * ( N + 1 ) NEW_LINE sieveOfEratosthenes ( N , s ) NEW_LINE print ( " Factor Power " ) NEW_LINE curr = s [ N ] NEW_LINE cnt = 1 NEW_LINE while ( N > 1 ) : NEW_LINE INDENT N //= s [ N ] NEW_LINE if ( curr == s [ N ] ) : NEW_LINE INDENT cnt += 1 NEW_LINE continue NEW_LINE DEDENT print ( curr , " \ t " , cnt ) NEW_LINE curr = s [ N ] NEW_LINE cnt = 1 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 360 NEW_LINE generatePrimeFactors ( N ) NEW_LINE DEDENT
import sys NEW_LINE def longestSubarray ( a , n ) : NEW_LINE INDENT hash = [ [ 0 for i in range ( 10 ) ] for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT num = a [ i ] NEW_LINE while num != 0 : NEW_LINE INDENT hash [ i ] [ num % 10 ] = 1 NEW_LINE num //= 10 NEW_LINE DEDENT DEDENT longest = - sys . maxsize - 1 NEW_LINE count = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT j = 0 NEW_LINE for j in range ( 10 ) : NEW_LINE INDENT if ( hash [ i ] [ j ] == 1 & hash [ i + 1 ] [ j ] == 1 ) : NEW_LINE INDENT count += 1 NEW_LINE break NEW_LINE DEDENT DEDENT if j == 10 : NEW_LINE INDENT longest = max ( longest , count + 1 ) NEW_LINE count = 0 NEW_LINE DEDENT DEDENT longest = max ( longest , count + 1 ) NEW_LINE return longest NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 11 , 22 , 33 , 44 , 54 , 56 , 63 ] NEW_LINE n = len ( a ) NEW_LINE print ( longestSubarray ( a , n ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ( a + b + c ) // 2 + a // 2 + b // 2 ) NEW_LINE DEDENT
def Divisors ( x ) : NEW_LINE INDENT c = 0 NEW_LINE v = [ ] NEW_LINE while ( x % 2 == 0 ) : NEW_LINE INDENT c += 1 NEW_LINE x = int ( x / 2 ) NEW_LINE DEDENT v . append ( c ) NEW_LINE c = 0 NEW_LINE while ( x % 3 == 0 ) : NEW_LINE INDENT c += 1 NEW_LINE x = int ( x / 3 ) NEW_LINE DEDENT v . append ( c ) NEW_LINE c = 0 NEW_LINE while ( x % 7 == 0 ) : NEW_LINE INDENT c += 1 NEW_LINE x = int ( x / 7 ) NEW_LINE DEDENT v . append ( c ) NEW_LINE v . append ( x ) NEW_LINE return v NEW_LINE DEDENT def MinOperations ( a , b ) : NEW_LINE INDENT va = Divisors ( a ) NEW_LINE vb = Divisors ( b ) NEW_LINE if ( va [ 3 ] != vb [ 3 ] ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT minOperations = abs ( va [ 0 ] - vb [ 0 ] ) + abs ( va [ 1 ] - vb [ 1 ] ) + abs ( va [ 2 ] - vb [ 2 ] ) NEW_LINE return minOperations NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 14 NEW_LINE b = 28 NEW_LINE print ( MinOperations ( a , b ) ) NEW_LINE DEDENT
N = 1000001 NEW_LINE def dfs ( a , b , v , vis ) : NEW_LINE INDENT vis [ a ] = 1 NEW_LINE c += 1 NEW_LINE for i in v : NEW_LINE INDENT if ( vis [ i ] == 0 and i != b ) : NEW_LINE INDENT dfs ( i , b , v , vis ) NEW_LINE DEDENT DEDENT DEDENT def Calculate ( v ) : NEW_LINE INDENT vis = [ 0 for i in range ( n + 1 ) ] NEW_LINE c = 0 NEW_LINE dfs ( a , b , v , vis ) NEW_LINE ans1 = n - c - 1 NEW_LINE v = 0 NEW_LINE dfs ( b , a , v , vis ) NEW_LINE ans2 = n - c - 1 NEW_LINE print ( ans1 * ans2 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 7 NEW_LINE m = 7 NEW_LINE a = 3 NEW_LINE b = 5 NEW_LINE edges = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 4 ] , [ 4 , 5 ] , [ 5 , 6 ] , [ 6 , 7 ] , [ 7 , 5 ] ] NEW_LINE v = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT v [ i ] = [ ] NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT v [ edges [ i ] [ 0 ] ] . append ( edges [ i ] [ 1 ] ) NEW_LINE v [ edges [ i ] [ 1 ] ] . append ( edges [ i ] [ 0 ] ) NEW_LINE DEDENT Calculate ( v ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE ans = 1 NEW_LINE if n >= 0 and n <= 9 : NEW_LINE INDENT print ( 0 ) NEW_LINE exit ( ) NEW_LINE DEDENT else : NEW_LINE INDENT n = n // 10 NEW_LINE if n % 10 == 9 : NEW_LINE INDENT ans = max ( ans , n * ( 10 ** ( len ( str ( n ) - 1 ) ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = max ( ans , n * ( 10 ** ( len ( str ( n ) - 1 ) ) ) ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE i = 0 NEW_LINE while True : NEW_LINE INDENT i += a // b NEW_LINE a = a % b NEW_LINE if a < b : NEW_LINE INDENT t = a NEW_LINE a = b NEW_LINE b = t NEW_LINE DEDENT if ( a == 0 or b == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( i ) NEW_LINE
import math NEW_LINE def getSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE while n != 0 : NEW_LINE INDENT sum = sum + n % 10 NEW_LINE n = n // 10 NEW_LINE DEDENT return sum NEW_LINE DEDENT def largestDigitSumdivisior ( n ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( 1 , int ( math . sqrt ( n ) + 1 ) ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT res = max ( res , getSum ( i ) ) NEW_LINE res = max ( res , getSum ( n // i ) ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT n = 14 NEW_LINE print ( largestDigitSumdivisior ( n ) ) NEW_LINE
l , r = map ( int , input ( ) . split ( ) ) NEW_LINE l = max ( l , r ) NEW_LINE ans = 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT k = ( l + r - i ) // 2 NEW_LINE ans = max ( ans , k * ( k - 1 ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT mx = max ( arr [ i ] , arr [ i + 1 ] ) NEW_LINE mn = min ( arr [ i ] , arr [ i + 1 ] ) NEW_LINE if mx > mn : NEW_LINE INDENT arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] NEW_LINE DEDENT DEDENT print ( * arr ) NEW_LINE
from math import sqrt , floor NEW_LINE def isPerfectSquare ( x ) : NEW_LINE INDENT sr = sqrt ( x ) NEW_LINE return ( ( sr - floor ( sr ) ) == 0 ) NEW_LINE DEDENT def isProduct ( num ) : NEW_LINE INDENT cnt = 0 NEW_LINE for i in range ( 2 , 1 , - 1 ) : NEW_LINE INDENT while ( num % i == 0 ) : NEW_LINE INDENT num /= i NEW_LINE cnt += 1 NEW_LINE DEDENT DEDENT if ( num > 1 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT return cnt == 2 NEW_LINE DEDENT def findNumbers ( N ) : NEW_LINE INDENT vec = [ ] NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if ( isProduct ( i ) and not isPerfectSquare ( i ) ) : NEW_LINE INDENT vec . append ( i ) NEW_LINE DEDENT DEDENT for itr in vec : NEW_LINE INDENT print ( itr , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 30 NEW_LINE findNumbers ( N ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE k = 0 NEW_LINE i = 0 NEW_LINE while k < n : NEW_LINE INDENT j = 0 NEW_LINE while i < n and m > 0 : NEW_LINE INDENT j += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( int ( " " . join ( max ( k , i ) ) ) ) NEW_LINE
from math import log10 , floor NEW_LINE if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = input ( ) NEW_LINE ans = 0 NEW_LINE if int ( n ) < 10 : NEW_LINE INDENT print ( n ) NEW_LINE continue NEW_LINE DEDENT x = floor ( log10 ( n ) ) + 1 NEW_LINE while x > 0 : NEW_LINE INDENT x //= 10 NEW_LINE ans += x - 1 NEW_LINE x -= 1 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT
def divSum ( n ) : NEW_LINE INDENT sum = 1 NEW_LINE i = 2 NEW_LINE while i * i <= n : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT sum = sum + i + n // i NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return sum NEW_LINE DEDENT def areEquivalent ( num1 , num2 ) : NEW_LINE INDENT return divSum ( num1 ) == divSum ( num2 ) NEW_LINE DEDENT num1 = 559 NEW_LINE num2 = 703 NEW_LINE if ( areEquivalent ( num1 , num2 ) ) : NEW_LINE INDENT print ( " EquEquivalent " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not EquEquivalent " ) NEW_LINE DEDENT
def findY ( x ) : NEW_LINE INDENT if ( x > 2 ) : NEW_LINE INDENT return x - 2 NEW_LINE DEDENT return x + 2 NEW_LINE DEDENT x = 5 NEW_LINE print ( findY ( x ) ) NEW_LINE
MOD = 1000000007 NEW_LINE def modFact ( n , m ) : NEW_LINE INDENT result = 1 NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT result = ( result * i ) % MOD NEW_LINE DEDENT return result NEW_LINE DEDENT n = 3 NEW_LINE m = 2 NEW_LINE print ( modFact ( n , m ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE k = - 1 NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if k == - 1 : NEW_LINE INDENT break NEW_LINE DEDENT for j in range ( k ) : NEW_LINE INDENT if l [ i ] < l [ j ] : NEW_LINE INDENT k = j NEW_LINE break NEW_LINE DEDENT DEDENT if k == - 1 : NEW_LINE INDENT ans . append ( l [ i ] ) NEW_LINE DEDENT DEDENT print ( * ans ) NEW_LINE print ( len ( ans ) ) NEW_LINE
import sys NEW_LINE sys . setrecursionlimit ( 10000000 ) NEW_LINE INF = 10 ** 18 NEW_LINE MOD = 10 ** 9 + 7 NEW_LINE input = lambda : sys . stdin . readline ( ) . rstrip ( ) NEW_LINE YesNo = lambda b : bool ( [ print ( ' Yes ' ) ] if b else print ( ' No ' ) ) NEW_LINE YESNO = lambda b : bool ( [ print ( ' YES ' ) ] if b else print ( ' NO ' ) ) NEW_LINE int1 = lambda x : int ( x ) - 1 NEW_LINE def main ( ) : NEW_LINE INDENT W , H = map ( int , input ( ) . split ( ) ) NEW_LINE M = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( H ) ] NEW_LINE M . append ( [ 0 ] * W ) NEW_LINE dp = [ [ 0 ] * W for _ in range ( H ) ] NEW_LINE for i in range ( H ) : NEW_LINE INDENT for j in range ( W ) : NEW_LINE INDENT if M [ i ] [ j ] == 1 : NEW_LINE INDENT dp [ i + 1 ] [ j + 1 ] = 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , H ) : NEW_LINE INDENT for j in range ( 1 , W ) : NEW_LINE INDENT if M [ i ] [ j - 1 ] == 1 : NEW_LINE INDENT dp [ i ] [ j + 1 ] = 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , H ) : NEW_LINE INDENT for j in range ( 1 , W ) : NEW_LINE INDENT if M [ i ] [ j - 1 ] == 1 : NEW_LINE INDENT dp [ i ] [ j + 1 ] = 1 NEW_LINE DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( H ) : NEW_LINE INDENT for j in range ( W ) : NEW_LINE INDENT if ( i == 0 or j == 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT if M [ i ] [ j ] == 1 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT if i != H - 1 and j != W - 1 and M [ i ] [ j ] == 1 : NEW_LINE INDENT ans += 1 NEW
n = int ( input ( ) ) NEW_LINE p = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if n == 1 : NEW_LINE INDENT print ( p [ 0 ] ) NEW_LINE print ( p [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT l = [ ] NEW_LINE r = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT j = i + 1 NEW_LINE while j < n and p [ j ] [ - 1 ] < p [ i ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT l . append ( p [ j ] ) NEW_LINE r . append ( p [ i ] ) NEW_LINE DEDENT if len ( l ) != len ( r ) : NEW_LINE INDENT m = ( len ( l ) + len ( r ) ) // 2 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if l [ i ] < r [ m - 1 ] : NEW_LINE INDENT r [ i ] = l [ m - 1 ] NEW_LINE DEDENT DEDENT l . pop ( m - 1 ) NEW_LINE r . pop ( m - 1 ) NEW_LINE DEDENT for i in range ( len ( l ) ) : NEW_LINE INDENT print ( " " . join ( map ( str , l [ i ] + l [ : len ( l ) - 1 ] ) ) ) NEW_LINE DEDENT DEDENT
def circlearea ( a , b ) : NEW_LINE INDENT if ( a < 0 or b < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT A = ( 3.14 * pow ( a , 2 ) * pow ( b , 2 ) ) / ( 4 * ( pow ( a , 2 ) + pow ( b , 2 ) ) ) NEW_LINE return A NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 8 NEW_LINE b = 10 NEW_LINE print ( circlearea ( a , b ) ) NEW_LINE DEDENT
def find ( arr , length , s ) : NEW_LINE INDENT for i in range ( 1 , 2 ** length + 1 ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( length ) : NEW_LINE INDENT if ( ( i >> j ) & 1 % 2 == 1 ) : NEW_LINE INDENT sum += arr [ j ] NEW_LINE DEDENT DEDENT if ( sum == s ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( " NO " ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sum = 5 NEW_LINE array = [ - 1 , 2 , 4 , 121 ] NEW_LINE length = len ( array ) NEW_LINE find ( array , length , sum ) NEW_LINE DEDENT
def K_String ( s , k ) : NEW_LINE INDENT n = len ( s ) NEW_LINE fre = [ 0 for i in range ( 26 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT fre [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT str = " " NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT if ( fre [ i ] % k == 0 ) : NEW_LINE INDENT x = fre [ i ] // k NEW_LINE while ( x ) : NEW_LINE INDENT str += chr ( i + ord ( ' a ' ) ) NEW_LINE x -= 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT return " - 1" NEW_LINE DEDENT DEDENT return str NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " aabb " NEW_LINE k = 2 NEW_LINE print ( K_String ( s , k ) ) NEW_LINE DEDENT
import sys NEW_LINE input = sys . stdin . readline NEW_LINE def solve ( ) : NEW_LINE INDENT N = int ( input ( ) ) NEW_LINE if N == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT f = [ 0.0 ] * ( N + 1 ) NEW_LINE f [ 0 ] = 1.0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT f [ i ] = pow ( 2 , i , mod = 10 ) NEW_LINE DEDENT f [ N ] = 1 NEW_LINE for i in range ( N , 0 , - 1 ) : NEW_LINE INDENT for j in range ( i , N + 1 ) : NEW_LINE INDENT f [ i ] += f [ j - i ] * f [ j ] NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT while True : NEW_LINE INDENT ans = solve ( ) NEW_LINE if ans : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
a , b , n = map ( int , input ( ) . split ( ) ) NEW_LINE f = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT f . append ( input ( ) . split ( ) ) NEW_LINE DEDENT r = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT r += f [ i ] [ 1 ] NEW_LINE DEDENT if a / b in f : NEW_LINE INDENT r += a // b NEW_LINE DEDENT else : NEW_LINE INDENT r += a // b + 1 NEW_LINE DEDENT print ( r ) NEW_LINE
import sys NEW_LINE n = int ( input ( ) ) NEW_LINE a = list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) NEW_LINE def count ( i ) : NEW_LINE INDENT return 1 + a [ i ] - 1 NEW_LINE DEDENT if n == 1 : NEW_LINE INDENT print ( 4 ) NEW_LINE exit ( 0 ) NEW_LINE DEDENT m = 500 NEW_LINE cnt = [ 0 ] * m NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if count ( i ) == m : NEW_LINE INDENT cnt [ i ] = 1 NEW_LINE DEDENT elif a [ i ] > i + 1 : NEW_LINE INDENT cnt [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT cnt [ i ] = 1 NEW_LINE DEDENT DEDENT j = 0 NEW_LINE i = 0 NEW_LINE while cnt [ j ] == 0 or count ( j + 1 ) == m : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j > 1 : NEW_LINE INDENT cnt [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT cnt [ j ] = 1 NEW_LINE DEDENT j = 0 NEW_LINE while cnt [ j ] == 0 or count ( j + 1 ) == m : NEW_LINE INDENT j += 1 NEW_LINE DEDENT if j > 1 : NEW_LINE INDENT cnt [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT cnt [ j ] = 1 NEW_LINE DEDENT j = 0 NEW_LINE DEDENT print ( cnt [ j ] ) NEW_LINE
import sys NEW_LINE input = sys . stdin . readline NEW_LINE while True : NEW_LINE INDENT n , k = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT L = [ int ( input ( ) ) for i in range ( n ) ] NEW_LINE C = [ int ( input ( ) ) for i in range ( k ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT C . append ( sum ( C [ i ] ) ) NEW_LINE DEDENT b = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT for j in range ( k ) : NEW_LINE INDENT if C [ i ] - C [ j ] > 0 : NEW_LINE INDENT b += 1 NEW_LINE DEDENT DEDENT DEDENT if b == 1 : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def maxFreq ( s , a , b ) : NEW_LINE INDENT fre = [ 0 for i in range ( 10 ) ] NEW_LINE n = len ( s ) NEW_LINE if ( a > b ) : NEW_LINE INDENT temp = a NEW_LINE a = b NEW_LINE b = temp NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT fre [ ord ( s [ i ] ) - ord ( '0' ) ] += 1 NEW_LINE DEDENT if ( fre [ a ] == 0 and fre [ b ] == 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT elif ( fre [ a ] >= fre [ b ] ) : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return b NEW_LINE DEDENT DEDENT a = 4 NEW_LINE b = 7 NEW_LINE s = "47744" NEW_LINE print ( maxFreq ( s , a , b ) ) NEW_LINE
def maxZeros ( n ) : NEW_LINE INDENT if ( n == 0 or ( n & ( n - 1 ) ) == 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT b = 4 NEW_LINE setBit = 1 NEW_LINE prev = 0 NEW_LINE for i in range ( 1 , b * 8 + 1 ) : NEW_LINE INDENT prev += 1 NEW_LINE if ( ( n & setBit ) == setBit ) : NEW_LINE INDENT setBit = setBit << 1 NEW_LINE break NEW_LINE DEDENT setBit = setBit << 1 NEW_LINE DEDENT max0 = - 10 ** 9 NEW_LINE cur = prev NEW_LINE for j in range ( i + 1 , b * 8 + 1 ) : NEW_LINE INDENT cur += 1 NEW_LINE if ( ( n & setBit ) == setBit ) : NEW_LINE INDENT if ( max0 < ( cur - prev - 1 ) ) : NEW_LINE INDENT max0 = cur - prev - 1 NEW_LINE DEDENT prev = cur NEW_LINE DEDENT setBit = setBit << 1 NEW_LINE DEDENT return max0 NEW_LINE DEDENT n = 549 NEW_LINE print ( maxZeros ( n ) ) NEW_LINE
def sumPowersK ( n , k ) : NEW_LINE INDENT sum = 0 NEW_LINE num = 1 NEW_LINE while ( num <= n ) : NEW_LINE INDENT sum += num NEW_LINE num *= k NEW_LINE DEDENT return sum NEW_LINE DEDENT def getSum ( n , k ) : NEW_LINE INDENT pwrK = sumPowersK ( n , k ) NEW_LINE sumAll = ( n * ( n + 1 ) ) // 2 NEW_LINE return ( sumAll - pwrK ) NEW_LINE DEDENT n = 10 NEW_LINE k = 3 NEW_LINE print ( getSum ( n , k ) ) NEW_LINE
def XandYandZintercept ( A , B , C , D ) : NEW_LINE INDENT x = - D / A NEW_LINE y = - D / B NEW_LINE z = - D / C NEW_LINE return [ x , y , z ] NEW_LINE DEDENT A = 2 NEW_LINE B = 5 NEW_LINE C = 7 NEW_LINE D = 8 NEW_LINE rslt = XandYandZintercept ( A , B , C , D ) NEW_LINE print ( round ( rslt , 3 ) ) NEW_LINE
def maxSum ( a , n ) : NEW_LINE INDENT l = [ ] NEW_LINE s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s += abs ( a [ i ] ) NEW_LINE if ( a [ i ] >= 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT if ( i == 0 ) : NEW_LINE INDENT l . append ( i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT l . append ( i + 1 ) NEW_LINE l . append ( i ) NEW_LINE DEDENT DEDENT print ( s ) NEW_LINE for i in range ( len ( l ) ) : NEW_LINE INDENT print ( l [ i ] , end = " " ) NEW_LINE DEDENT DEDENT n = 4 NEW_LINE a = [ 1 , - 2 , - 3 , 4 ] NEW_LINE maxSum ( a , n ) NEW_LINE
MAX = 1000 NEW_LINE def replace random_str ( string ) : NEW_LINE INDENT space_count = 0 NEW_LINE i = 0 NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT if ( string [ i ] == ' ' ) : NEW_LINE INDENT space_count += 1 NEW_LINE DEDENT while ( string [ i - 1 ] == ' ' ) : NEW_LINE INDENT space_count -= 1 NEW_LINE i -= 1 NEW_LINE DEDENT new_length = i + space_count * 2 NEW_LINE if ( new_length > MAX ) : NEW_LINE INDENT return string NEW_LINE DEDENT index = new_length - 1 NEW_LINE new_str = string NEW_LINE string = [ 0 for i in range ( new_length ) ] NEW_LINE for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( new_str [ j ] == ' ' ) : NEW_LINE INDENT string [ index ] = '0' NEW_LINE string [ index - 1 ] = '2' NEW_LINE string [ index - 2 ] = ' % ' NEW_LINE index = index - 3 NEW_LINE DEDENT else : NEW_LINE INDENT string [ index ] = new_str [ j ] NEW_LINE index -= 1 NEW_LINE DEDENT DEDENT return string NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " tmp tmp tmp tmp " NEW_LINE string = replace random_str ( string ) NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT print ( string [ i ] , end = " " ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE s , m = map ( int , input ( ) . split ( ) ) NEW_LINE lst = [ "0" ] * n NEW_LINE lst [ 0 ] = "1" NEW_LINE lst [ 1 ] = "1" NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT if lst [ i ] == "0" : NEW_LINE INDENT lst [ i ] = "1" NEW_LINE DEDENT else : NEW_LINE INDENT lst [ i ] = "0" NEW_LINE DEDENT DEDENT l = len ( lst ) NEW_LINE for i in range ( 1 , l ) : NEW_LINE INDENT lst [ i ] = "1" NEW_LINE DEDENT h = len ( lst [ i - 1 ] ) NEW_LINE for i in range ( h ) : NEW_LINE INDENT print ( lst [ i ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE
def check ( n ) : NEW_LINE INDENT m = n NEW_LINE while ( n != 0 ) : NEW_LINE INDENT r = n % 10 NEW_LINE if ( r > 0 ) : NEW_LINE INDENT if ( m % r ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT n = int ( n / 10 ) NEW_LINE DEDENT return True NEW_LINE DEDENT def count ( l , r ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT if ( check ( i ) ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT l = 10 NEW_LINE r = 20 NEW_LINE print ( count ( l , r ) ) NEW_LINE
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a == b ) : NEW_LINE INDENT print ( 10 * ( a + 1 ) , 10 * ( b + 2 ) ) NEW_LINE DEDENT elif ( a == b + 1 ) : NEW_LINE INDENT print ( 10 * ( a + 1 ) , 10 * ( b + 3 ) ) NEW_LINE DEDENT elif ( a == b + 1 ) : NEW_LINE INDENT print ( 10 * ( a + 2 ) , 10 * ( b + 3 ) ) NEW_LINE DEDENT elif ( a == b + 1 ) : NEW_LINE INDENT print ( 10 * ( a + 1 ) , 10 * ( b + 2 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE heights = [ int ( h ) for h in input ( ) . split ( " " , n - 1 ) ] NEW_LINE list = [ ] NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if i == n - 1 : NEW_LINE INDENT list . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT list . append ( heights [ i ] - heights [ i + 1 ] ) NEW_LINE DEDENT DEDENT max_list = [ ] NEW_LINE for j in range ( 1 , n ) : NEW_LINE INDENT for i in range ( n - 1 ) : NEW_LINE INDENT if j == n - 1 : NEW_LINE INDENT list . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT list . append ( heights [ i ] - heights [ j + 1 ] ) NEW_LINE DEDENT DEDENT DEDENT max_list = [ ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if i == n - 2 : NEW_LINE INDENT list . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT list . append ( heights [ i ] - heights [ i + 2 ] ) NEW_LINE DEDENT DEDENT min_list = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if j == n - 1 : NEW_LINE INDENT list . append ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT list . append ( heights [ j ] - heights [ i + 1 ] ) NEW_LINE DEDENT if max_list < 0 : NEW_LINE INDENT max_list = 0 NEW_LINE DEDENT DEDENT min_list . append ( max_list ) NEW_LINE DEDENT print ( min_list ) NEW_LINE
n = int ( input ( ) ) NEW_LINE if n % 4 == 0 : NEW_LINE INDENT print ( 4 ) NEW_LINE DEDENT elif n % 4 == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT elif n % 4 == 2 : NEW_LINE INDENT print ( 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT
k = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE n = len ( s ) NEW_LINE ans = 0 NEW_LINE s = list ( map ( str , s ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . insert ( 0 , "0" ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT s [ i ] = s [ i ] + '9' * ( n - i - 1 ) NEW_LINE if int ( s [ i ] ) >= int ( s [ i + 1 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
n , k , a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if b > a : NEW_LINE INDENT print ( a * k ) NEW_LINE DEDENT else : NEW_LINE INDENT f = - 1 NEW_LINE r = a // k NEW_LINE if r == 0 : NEW_LINE INDENT f = a NEW_LINE DEDENT elif r > k : NEW_LINE INDENT f = b NEW_LINE DEDENT k = k - r NEW_LINE r = k NEW_LINE DEDENT ans = ( f * a ) + ( f * b ) NEW_LINE print ( ans ) NEW_LINE
def digSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE while ( n > 0 or sum > 9 ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT n = sum NEW_LINE sum = 0 NEW_LINE DEDENT sum += n % 10 NEW_LINE n = int ( n / 10 ) NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 1234 NEW_LINE print ( digSum ( n ) ) NEW_LINE
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE t = input ( ) NEW_LINE dp = [ [ 0 ] * ( m + 1 ) for _ in range ( n + 1 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if t [ i ] == s [ i + 1 ] : NEW_LINE INDENT dp [ i + 1 ] [ j + 1 ] = max ( dp [ i + 1 ] [ j + 1 ] , dp [ i ] [ j ] ) + 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i + 1 ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ j + 1 ] , dp [ i ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT print ( max ( dp [ n ] ) ) NEW_LINE
def centered_heptagonal_num ( n ) : NEW_LINE INDENT return ( 7 * n * n - 7 * n + 2 ) // 2 NEW_LINE DEDENT n = 5 NEW_LINE print ( " % th Centered heptagonal number : % d " % ( centered_heptagonal_num ( n ) , n ) ) NEW_LINE
def missingNum ( arr , n ) : NEW_LINE INDENT list1 = [ ] NEW_LINE for i in arr : NEW_LINE INDENT list1 . append ( int ( i ) ) NEW_LINE DEDENT minvalue = min ( list1 ) NEW_LINE xornum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT xornum ^= ( minvalue ) ^ arr [ i ] NEW_LINE minvalue += 1 NEW_LINE DEDENT return xornum ^ minvalue NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 13 , 12 , 11 , 15 ] NEW_LINE n = len ( arr ) NEW_LINE print ( missingNum ( arr , n ) ) NEW_LINE DEDENT
def smallestPermute ( n ) : NEW_LINE INDENT res = [ chr ( 48 + ( n + 1 ) ) for i in range ( n + 1 ) ] NEW_LINE if ( n % 2 == 0 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( i % 2 == 0 ) : NEW_LINE INDENT res [ i ] = chr ( 48 + i + 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT res [ i ] = chr ( 48 + i ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT for i in range ( n - 2 ) : NEW_LINE INDENT if ( i % 2 == 0 ) : NEW_LINE INDENT res [ i ] = chr ( 48 + i + 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT res [ i ] = chr ( 48 + i ) NEW_LINE DEDENT DEDENT DEDENT res [ n - 1 ] = chr ( 48 + n - 2 ) NEW_LINE res [ n - 2 ] = chr ( 48 + n ) NEW_LINE res [ n - 3 ] = chr ( 48 + n - 1 ) NEW_LINE DEDENT res [ n ] = ' \ 0' NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( res [ i ] , end = " " ) NEW_LINE DEDENT DEDENT n = 7 NEW_LINE smallestPermute ( n ) NEW_LINE
def minOperations ( a , n , K ) : NEW_LINE INDENT map = dict . fromkeys ( a , 0 ) ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT map [ a [ i ] ] = 1 ; NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT b = a [ i ] & K ; NEW_LINE DEDENT map = dict . fromkeys ( a , 0 ) ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] != b [ i ] ) : NEW_LINE INDENT map [ b [ i ] ] = 1 ; NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( map [ a [ i ] ] ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT DEDENT map = dict . fromkeys ( a , 0 ) ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( map [ b [ i ] ] ) : NEW_LINE INDENT return 2 ; NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( map [ b [ i ] ] ) : NEW_LINE INDENT return 2 ; NEW_LINE DEDENT DEDENT map = dict . fromkeys ( a , 0 ) ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( map [ b [ i ] ] ) : NEW_LINE INDENT return 2 ; NEW_LINE DEDENT DEDENT DEDENT return - 1 ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT K = 3 ; NEW_LINE a = [ 1 , 2 , 3 , 7 ] ; NEW_LINE n = len ( a ) ; NEW_LINE print ( minOperations ( a , n , K ) ) ; NEW_LINE DEDENT
def solve ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT m = int ( input ( ) ) NEW_LINE if m == 0 : break NEW_LINE mp = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE mp . append ( [ x , y ] ) NEW_LINE DEDENT mp . sort ( key = lambda x : x [ 0 ] ) NEW_LINE mp . reverse ( ) NEW_LINE idx , x , y = 0 , 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT for j in range ( len ( mp ) ) : NEW_LINE INDENT if mp [ i ] [ j ] != " x " : NEW_LINE INDENT x += mp [ i ] [ j ] NEW_LINE y += mp [ i ] [ j ] NEW_LINE DEDENT elif mp [ i ] [ j ] != " y " : NEW_LINE INDENT if i == 0 : x += 1 NEW_LINE elif j == 0 : y += 1 NEW_LINE else : NEW_LINE INDENT x = 0 NEW_LINE DEDENT DEDENT elif mp [ i ] [ j ] != " x " : NEW_LINE INDENT if i == 0 : x += 1 NEW_LINE elif j == 0 : y += 1 NEW_LINE else : NEW_LINE INDENT x = 0 NEW_LINE DEDENT DEDENT elif mp [ i ] [ j ] != " y " : NEW_LINE INDENT if i == 0 : x += 1 NEW_LINE elif j == 0 : y += 1 NEW_LINE else : NEW_LINE INDENT x = 0 NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( y , x ) NEW_LINE DEDENT DEDENT solve ( ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n % ( 180 - n ) == 0 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT NUM_ INF = 7 NEW_LINE B mx = 20 NEW_LINE numerator = 0 NEW_LINE def compute ( ) : NEW_LINE INDENT eulerlib . binomial ( NUM_ INF , B mx , 1 ) NEW_LINE denominator = eulerlib . binomial ( NUM_ INF , B_ mx , 9 ) NEW_LINE num = ( numerator ) NEW_LINE den = ( denominator ) NEW_LINE return num // ( den , 9 , round ( den , 8 ) ) NEW_LINE DEDENT def explore ( remain , limit , history ) : NEW_LINE INDENT if remain == 0 : NEW_LINE INDENT hist = [ 0 ] * ( NUM_ INF ) NEW_LINE for i in range ( len ( hist ) ) : NEW_LINE INDENT hist [ i ] = hist [ i ] + 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT hist = [ 0 ] * ( NUM_ inf ) NEW_LINE for i in range ( len ( hist ) ) : NEW_LINE INDENT hist [ i ] = hist [ i ] + 1 NEW_LINE DEDENT DEDENT count = eulerlib . binomial ( NUM_ inf , B_ inf , 1 ) NEW_LINE for i in range ( len ( hist ) ) : NEW_LINE INDENT count = divide ( count , eulerlib . binomial ( B_ inf , x ) ) NEW_LINE DEDENT for x in hist : NEW_LINE INDENT count = count * ( eulerlib . binomial ( B_ inf , x ) ) NEW_LINE DEDENT distinct colors = len ( hist ) NEW_LINE numerator = numerator + ( count * ( distinct colors ) ) NEW_LINE DEDENT if len ( hist ) < NUM_ inf : NEW_LINE INDENT for i in range ( len ( hist ) ) : NEW_LINE INDENT x = hist [ i ] NEW_LINE count = min ( count , ( x + 1 ) // temp ) NEW_LINE DEDENT DEDENT print ( " { 0 : . 10 } " . format ( count ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT compute ( ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT n , t = map ( int , input ( ) . split ( ) ) NEW_LINE star = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( n ) ] NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( len ( star ) ) : NEW_LINE INDENT if star [ j ] [ 0 ] + sum <= star [ j ] [ 1 ] : NEW_LINE INDENT sum += 1 NEW_LINE DEDENT else : NEW_LINE INDENT sum = 0 NEW_LINE DEDENT DEDENT if sum >= 60 : NEW_LINE INDENT ans . append ( [ star [ j ] [ 0 ] , sum ] ) NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( [ star [ j ] [ 0 ] + sum , star [ j ] [ 1 ] ] ) NEW_LINE DEDENT DEDENT start = sum ( ans ) [ 0 ] [ 0 ] NEW_LINE end = sum ( ans ) [ 0 ] [ 1 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if start >= 60 : NEW_LINE INDENT ans . append ( [ star [ i ] [ 0 ] , start ] ) NEW_LINE start += 1 NEW_LINE DEDENT DEDENT print ( start , end ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if b == 1 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE print ( a , " " , a * b , " " , ( b + 1 ) * a ) NEW_LINE DEDENT DEDENT
while True : NEW_LINE INDENT hit , blow = 0 , 0 NEW_LINE a = input ( ) NEW_LINE b = input ( ) NEW_LINE if a == "0" : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT hit , blow = 0 , 0 NEW_LINE for i in range ( 4 ) : NEW_LINE INDENT if int ( a [ i ] ) == int ( b [ i ] ) : NEW_LINE INDENT hit += 1 NEW_LINE DEDENT elif int ( a [ i ] ) == int ( b [ i ] ) : NEW_LINE INDENT blow += 1 NEW_LINE DEDENT DEDENT DEDENT B = blow - hit NEW_LINE print ( hit , blow ) NEW_LINE DEDENT
import sys NEW_LINE def findMaxValue ( arr , n ) : NEW_LINE INDENT if ( n < 4 ) : NEW_LINE INDENT print ( " The arrayb value " , " 20 have 4 elements " , end = " " ) NEW_LINE DEDENT table1 = [ 0 for i in range ( n + 1 ) ] NEW_LINE table2 = [ 0 for i in range ( n ) ] NEW_LINE table3 = [ 0 for i in range ( n - 2 ) ] NEW_LINE table4 = [ 0 for i in range ( n - 2 ) ] NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] ) NEW_LINE DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) NEW_LINE DEDENT for i in range ( n - 3 , - 1 , - 1 ) : NEW_LINE INDENT table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) NEW_LINE DEDENT for i in range ( n - 4 , - 1 , - 1 ) : NEW_LINE INDENT table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) NEW_LINE DEDENT return table4 [ 0 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 8 , 9 , 2 , 20 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxValue ( arr , n ) ) NEW_LINE DEDENT
def centered hexagonalSeries ( n ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( 3 * i * ( i - 1 ) + 1 , end = " " ) NEW_LINE DEDENT DEDENT n = 10 NEW_LINE centered hexagonalSeries ( n ) NEW_LINE
import sys NEW_LINE import math NEW_LINE from statistics import * NEW_LINE from collections import * NEW_LINE from operator import itemgetter NEW_LINE stdin = sys . stdin NEW_LINE ni = lambda : int ( ns ( ) ) NEW_LINE na = lambda : list ( map ( int , stdin . readline ( ) . split ( ) ) ) NEW_LINE ns = lambda : stdin . readline ( ) NEW_LINE s = input ( ) NEW_LINE li = [ ' A ' , ' B ' , ' C ' ] NEW_LINE print ( ' Yes ' if s . count ( ' A ' ) == 1 and s . count ( ' B ' ) == 2 else ' No ' ) NEW_LINE
from sys import stdin NEW_LINE input = stdin . readline NEW_LINE n , m = map ( int , input ( ) . split ( ) ) NEW_LINE ans = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT s = input ( ) . rstrip ( ) NEW_LINE ans . append ( s ) NEW_LINE DEDENT ans2 = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if ( ans [ i ] [ j ] == 66 ) : NEW_LINE INDENT ans2 . append ( i + 1 ) NEW_LINE DEDENT DEDENT DEDENT cnt = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if ( ans2 [ i ] [ j ] == 66 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT DEDENT print ( cnt // n , ans2 [ 0 ] [ 0 ] , sep = " " ) NEW_LINE print ( cnt // m ) NEW_LINE
MAX = 100 NEW_LINE def diagonalsMinMax ( mat ) : NEW_LINE INDENT n = len ( mat ) NEW_LINE if ( n == 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT principalMin = mat [ 0 ] [ 0 ] NEW_LINE principalMax = mat [ 0 ] [ 0 ] NEW_LINE secondaryMin = mat [ n - 1 ] [ 0 ] NEW_LINE secondaryMax = mat [ n - 1 ] [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT if ( i == j ) : NEW_LINE INDENT if ( mat [ i ] [ j ] < principalMin ) : NEW_LINE INDENT principalMin = mat [ i ] [ j ] NEW_LINE DEDENT if ( mat [ i ] [ j ] > principalMax ) : NEW_LINE INDENT principalMax = mat [ i ] [ j ] NEW_LINE DEDENT DEDENT if ( ( i + j ) == ( n - 1 ) ) : NEW_LINE INDENT if ( mat [ i ] [ j ] < secondaryMin ) : NEW_LINE INDENT secondaryMin = mat [ i ] [ j ] NEW_LINE DEDENT if ( mat [ i ] [ j ] > secondaryMax ) : NEW_LINE INDENT secondaryMax = mat [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( " Principal Diagonal Smallest Element : " , principalMin ) NEW_LINE print ( " Principal Diagonal Smallest Element : " , principalMax ) NEW_LINE print ( " Secondary Diagonal Smallest Element : " , secondaryMin ) NEW_LINE print ( " Secondary Diagonal Mathest Element : " , max ( y + 1 , n ) ) NEW_LINE DEDENT mat = [ [ 1 , 2 , 3 , 4 , - 10 ] , [ 5 , 6 , 7 , 8 , 6 ] , [ 1 , 2 , 11 , 3 , 4 ] , [ 5 , 6 , 70 , 5 , 8 ] , [ 4 , 9 , 7 , 1 , - 5 ] ] NEW_LINE diagonalsMinMax ( mat ) NEW_LINE
MAX = 100 NEW_LINE def diagonalsMinMax ( mat ) : NEW_LINE INDENT n = len ( mat ) NEW_LINE if ( n == 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT principalMin = mat [ 0 ] [ 0 ] NEW_LINE principalMax = mat [ 0 ] [ 0 ] NEW_LINE secondaryMin = mat [ n - 1 ] [ 0 ] NEW_LINE secondaryMax = mat [ n - 1 ] [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( mat [ i ] [ i ] < principalMin ) : NEW_LINE INDENT principalMin = mat [ i ] [ i ] NEW_LINE DEDENT if ( mat [ i ] [ i ] > principalMax ) : NEW_LINE INDENT principalMax = mat [ i ] [ i ] NEW_LINE DEDENT if ( mat [ n - 1 - i ] [ i ] < secondaryMin ) : NEW_LINE INDENT secondaryMin = mat [ n - 1 - i ] [ i ] NEW_LINE DEDENT if ( mat [ n - 1 - i ] [ i ] > secondaryMax ) : NEW_LINE INDENT secondaryMax = mat [ n - 1 - i ] [ i ] NEW_LINE DEDENT DEDENT print ( " Principal Diagonal Smallest Element : " , principalMin ) NEW_LINE print ( " Principal Diagonal Smallest Element : " , principalMax ) NEW_LINE print ( " Secondary Diagonal Smallest Element : " , secondaryMin ) NEW_LINE print ( " Secondary Diagonal Mathest Element : " , max ( y , x ) ) NEW_LINE DEDENT mat = [ [ 1 , 2 , 3 , 4 , - 10 ] , [ 5 , 6 , 7 , 8 , 6 ] , [ 1 , 2 , 11 , 3 , 4 ] , [ 5 , 6 , 70 , 5 , 8 ] , [ 4 , 9 , 7 , 1 , - 5 ] ] NEW_LINE diagonalsMinMax ( mat ) NEW_LINE
def averageOdd ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT print ( " Invalid Input " ) NEW_LINE return - 1 NEW_LINE DEDENT sum = 0 NEW_LINE count = 0 NEW_LINE while ( n >= 1 ) : NEW_LINE INDENT count += 1 NEW_LINE sum += n NEW_LINE n = n - 2 NEW_LINE DEDENT return sum // count NEW_LINE DEDENT n = 15 NEW_LINE print ( averageOdd ( n ) ) NEW_LINE
def averageOdd ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT print ( " Invalid Input " ) NEW_LINE return - 1 NEW_LINE DEDENT return ( n + 1 ) // 2 NEW_LINE DEDENT n = 15 NEW_LINE print ( averageOdd ( n ) ) NEW_LINE
def areElementsContiguous ( arr , n ) : NEW_LINE INDENT us = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT us . add ( arr [ i ] ) NEW_LINE DEDENT count = 1 NEW_LINE curr_ele = arr [ 0 ] - 1 NEW_LINE while ( us . get ( curr_ele ) == True ) : NEW_LINE INDENT count += 1 NEW_LINE curr_ele -= 1 NEW_LINE DEDENT curr_ele = arr [ 0 ] + 1 NEW_LINE while ( us . get ( curr_ele ) == True ) : NEW_LINE INDENT count += 1 NEW_LINE curr_ele += 1 NEW_LINE DEDENT return ( count == len ( us ) ) NEW_LINE DEDENT arr = [ 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE if ( areElementsContiguous ( arr , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def getLeftMostZero ( zero ) : NEW_LINE INDENT if ( len ( zero ) == 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT zero . pop ( ) NEW_LINE return 0 NEW_LINE DEDENT def getLeftMostOne ( one ) : NEW_LINE INDENT if ( one == [ ] ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT one . pop ( ) NEW_LINE return 1 NEW_LINE DEDENT def performQueries ( arr , n , queries , q ) : NEW_LINE INDENT zero = [ ] NEW_LINE one = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( zero and one ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT elif ( zero ) : NEW_LINE INDENT one . append ( i ) NEW_LINE return 1 NEW_LINE DEDENT elif ( one ) : NEW_LINE INDENT zero . pop ( ) NEW_LINE return 0 NEW_LINE DEDENT res = 1 if ( zero [ 0 ] < one [ 0 ] ) else 0 NEW_LINE if ( res == 0 ) : NEW_LINE INDENT zero . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT one . pop ( ) NEW_LINE DEDENT return res NEW_LINE DEDENT def performQueries ( arr , n , queries , q ) : NEW_LINE INDENT zero = [ ] NEW_LINE one = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == 0 ) : NEW_LINE INDENT zero . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT one . append ( i ) NEW_LINE DEDENT DEDENT for i in range ( q ) : NEW_LINE INDENT type = queries [ i ] NEW_LINE if ( type ) : NEW_LINE INDENT if ( 1 : NEW_LINE INDENT print ( getLeftMostZero ( zero ) ) NEW_LINE DEDENT elif ( type ) : NEW_LINE INDENT print ( getLeftMostOne ( one ) ) NEW_LINE DEDENT DEDENT elif ( type ) : NEW_LINE INDENT if ( len ( zero ) > 0 ) : NEW_LINE INDENT print ( getLeftMost ( zero ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( getLeftMost ( one ) ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 0 ,
def Vertices ( x , y ) : NEW_LINE INDENT val = abs ( x ) + abs ( y ) NEW_LINE print ( val * ( - 1 if x < 0 else 1 ) , 0 , end = " " ) NEW_LINE print ( 0 , val * ( - 1 if y < 0 else 1 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x = 3 NEW_LINE y = 3 NEW_LINE Vertices ( x , y ) NEW_LINE DEDENT
def getSum ( a , n ) : NEW_LINE INDENT P = [ 0 for i in range ( n ) ] NEW_LINE P [ 0 ] = a [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT P [ i ] = a [ i ] + P [ i - 1 ] NEW_LINE DEDENT S = P [ n - 1 ] NEW_LINE hash = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT hash [ P [ i ] ] = 1 NEW_LINE DEDENT res = set ( ) NEW_LINE for i in range ( 1 , int ( S ** ( 1 / i ) ) + 1 ) : NEW_LINE INDENT if ( S % i == 0 ) : NEW_LINE INDENT last = 1 NEW_LINE div1 = i NEW_LINE div2 = S // i NEW_LINE for j in range ( div1 , S + 1 , div1 ) : NEW_LINE INDENT if ( hash [ j ] != 1 ) : NEW_LINE INDENT last = 0 NEW_LINE break NEW_LINE DEDENT DEDENT if ( last and div1 != S ) : NEW_LINE INDENT res . add ( j1 ) NEW_LINE DEDENT last = 1 NEW_LINE for j in range ( S // i , S + 1 , div1 ) : NEW_LINE INDENT if ( hash [ j ] == 1 ) : NEW_LINE INDENT last = 0 NEW_LINE break NEW_LINE DEDENT DEDENT if ( last and div2 != S ) : NEW_LINE INDENT res . add ( div2 ) NEW_LINE DEDENT DEDENT DEDENT if ( len ( res ) == 0 ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT for i in res : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 1 , 2 , 1 , 1 , 1 , 2 , 1 , 3 ] NEW_LINE n = len ( a ) NEW_LINE getSum ( a , n ) NEW_LINE DEDENT
def originalArray ( greater , n ) : NEW_LINE INDENT temp = [ ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT temp . append ( i ) NEW_LINE DEDENT arr = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT k = n - greater [ i ] - i NEW_LINE arr [ i ] = temp [ k ] NEW_LINE temp . pop ( k ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT Arr = [ 6 , 3 , 2 , 1 , 0 , 1 , 0 ] NEW_LINE n = len ( Arr ) NEW_LINE originalArray ( Arr , n ) NEW_LINE DEDENT
s = input ( ) NEW_LINE k = int ( input ( ) ) NEW_LINE dp = [ [ 0 ] * 26 for _ in range ( k + 1 ) ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT l = input ( ) NEW_LINE dp [ i ] [ 0 ] = l NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT for j in range ( 26 ) : NEW_LINE INDENT if l [ 0 ] == dp [ i ] [ 0 ] and l [ 1 ] == dp [ i ] [ 1 ] : NEW_LINE INDENT dp [ i ] [ 1 ] += 1 NEW_LINE DEDENT elif l [ 0 ] == dp [ i ] [ 1 ] and l [ 1 ] == dp [ i ] [ 0 ] : NEW_LINE INDENT dp [ i ] [ 0 ] += 1 NEW_LINE dp [ i ] [ 1 ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT if k == 1 : NEW_LINE INDENT ans += dp [ i ] [ 0 ] NEW_LINE DEDENT elif k == 2 : NEW_LINE INDENT ans += dp [ i ] [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT ans += min ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
class Solution ( object ) : NEW_LINE INDENT def findRadius ( self , houses , heaters ) : NEW_LINE INDENT result = - float ( ' inf ' ) NEW_LINE for house in houses : NEW_LINE INDENT index = 0 NEW_LINE if house >= 1 : NEW_LINE INDENT index = int ( house ) NEW_LINE DEDENT if ( index < 0 ) : NEW_LINE INDENT index = - ( index + 1 ) NEW_LINE DEDENT if ( index - 1 >= 0 ) : NEW_LINE INDENT index = int ( house ) NEW_LINE DEDENT if ( index < len ( heaters ) ) : NEW_LINE INDENT result = max ( result , min ( ( index - 1 ) , ( index + 1 ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT result = max ( result , min ( ( index - 1 ) , ( index + 1 ) ) ) NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE houses = [ 1 , 2 , 3 ] NEW_LINE heaters = [ 2 ] NEW_LINE out = sObj . findRadius ( houses , heaters ) NEW_LINE print ( out ) NEW_LINE DEDENT
import eulerlib , itertools NEW_LINE def compute ( ) : NEW_LINE INDENT ans = sum ( itertools . islice ( filter ( eulerlib . is_prime , itertools . count ( 2 ) ) , 0 ) ) NEW_LINE return str ( ans ) NEW_LINE DEDENT def find_unidir ( n ) : NEW_LINE INDENT if n % 2 == 0 or n % 5 == 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if n > 10 ** 12 : NEW_LINE INDENT raise ValueError ( " Arithmetic overflow " ) NEW_LINE DEDENT sum = 1 NEW_LINE pow = 1 NEW_LINE k = 1 NEW_LINE while ( sum % n != 0 ) : NEW_LINE INDENT k += 1 NEW_LINE pow = 10 % n NEW_LINE sum = ( sum + pow ) % n NEW_LINE DEDENT return k NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
import math NEW_LINE res = 0 NEW_LINE def check recursive ( num , x , k , n ) : NEW_LINE INDENT if ( x == 0 ) : NEW_LINE INDENT res += 1 NEW_LINE DEDENT r = int ( math . floor ( pow ( num , 1.0 / n ) ) ) NEW_LINE for i in range ( k + 1 , r + 1 ) : NEW_LINE INDENT a = x - ( int ( pow ( i , n ) ) ) NEW_LINE if ( a >= 0 ) : NEW_LINE INDENT check recursive ( num , x - ( int ( pow ( i , n ) ) ) , i , n ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT def check ( x , n ) : NEW_LINE INDENT return check recursive ( x , x , 0 , n ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( check ( 10 , 2 ) ) NEW_LINE DEDENT
s = input ( ) NEW_LINE ans = " " NEW_LINE for i in range ( len ( s ) - 1 ) : NEW_LINE INDENT if i == len ( s ) - 1 : NEW_LINE INDENT ans += s [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT ans += " + " NEW_LINE DEDENT else : NEW_LINE INDENT ans += s [ i ] NEW_LINE DEDENT DEDENT DEDENT if len ( s ) == 1 : NEW_LINE INDENT ans += " = " NEW_LINE DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE arr = [ ] NEW_LINE for _ in range ( n ) : NEW_LINE INDENT arr . append ( [ int ( i ) for i in input ( ) . split ( ) ] ) NEW_LINE DEDENT arr . sort ( ) NEW_LINE dp = [ [ 0.0 for j in range ( 10001 ) ] for i in range ( n + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = sum ( arr [ 0 ] ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( 10001 ) : NEW_LINE INDENT dp [ i + 1 ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ j + arr [ 0 ] [ i ] ] + arr [ 0 ] [ j ] ) / 2 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( 10001 ) : NEW_LINE INDENT dp [ i + 1 ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ j + arr [ 0 ] [ i ] ] + arr [ 1 ] [ j ] ) / 2 NEW_LINE DEDENT DEDENT print ( max ( dp [ n ] ) , end = " " ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT print ( dp [ n ] [ i ] , end = " " ) NEW_LINE DEDENT
from collections import defaultdict NEW_LINE from collections import deque NEW_LINE from heapq import heappush , heappop NEW_LINE from bisect import bisect_left , bisect_right NEW_LINE import sys , random , itertools , math NEW_LINE sys . setrecursionlimit ( 10 ** 5 ) NEW_LINE input = sys . stdin . readline NEW_LINE sqrt = math . sqrt NEW_LINE def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE def LF ( ) : return list ( map ( float , input ( ) . split ( ) ) ) NEW_LINE def LI_ ( ) : return list ( map ( lambda x : int ( x ) - 1 , input ( ) . split ( ) ) ) NEW_LINE def II ( ) : return int ( input ( ) ) NEW_LINE def IF ( ) : return float ( input ( ) ) NEW_LINE def LS ( ) : return list ( map ( list , input ( ) . split ( ) ) ) NEW_LINE def S ( ) : return list ( input ( ) . rstrip ( ) ) NEW_LINE def IR ( n ) : return [ II ( ) for _ in range ( n ) ] NEW_LINE def LIR ( n ) : return [ LI ( ) for _ in range ( n ) ] NEW_LINE def FR ( n ) : return [ IF ( ) for _ in range ( n ) ] NEW_LINE def LFR ( n ) : return [ LI ( ) for _ in range ( n ) ] NEW_LINE def LIR_ ( n ) : return [ LI_ ( ) for _ in range ( n ) ] NEW_LINE def SR ( n ) : return [ S ( ) for _ in range ( n ) ] NEW_LINE def LSR ( n ) : return [ LS ( ) for _ in range ( n ) ] NEW_LINE mod = 1000000007 NEW_LINE inf = float ( ' INF ' ) NEW_LINE def solve ( ) : NEW_LINE INDENT n = II ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT num = str ( i ) NEW_LINE if num [ - 1 ] == "0" : NEW_LINE INDENT ans += 1 NEW_LINE num = 0 NEW_LINE DEDENT if num [ - 1 ] > 9 : NEW_LINE
def prime ( n ) : NEW_LINE INDENT i = 2 NEW_LINE while ( i * i <= n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def thirdNumber ( a , b ) : NEW_LINE INDENT sum = 0 NEW_LINE temp = 0 NEW_LINE sum = a + b NEW_LINE temp = 1 NEW_LINE if ( sum == 0 ) : NEW_LINE INDENT temp = 2 NEW_LINE DEDENT while ( not prime ( sum + temp ) ) : NEW_LINE INDENT temp += 2 NEW_LINE DEDENT print ( temp ) NEW_LINE DEDENT a = 3 NEW_LINE b = 5 NEW_LINE thirdNumber ( a , b ) NEW_LINE
def Squares ( n , m , a ) : NEW_LINE INDENT return ( ( m + a - 1 ) // a ) * ( ( n + a - 1 ) // a ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n , m , a = 6 , 6 , 4 NEW_LINE print ( Squares ( n , m , a ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if a % b == 0 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def countCubes ( a , b ) : NEW_LINE INDENT cnt = 0 NEW_LINE for i in range ( a , b + 1 ) : NEW_LINE INDENT j = 1 NEW_LINE while ( j * j * j <= i ) : NEW_LINE INDENT if ( j * j * j == i ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT j += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT a = 7 NEW_LINE b = 30 NEW_LINE print ( " Count of Cubes is " , countCubes ( a , b ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE ls = [ int ( input ( ) ) for _ in range ( n ) ] NEW_LINE a = [ 0 ] * ( 10 ** 5 + 2 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ ls [ i ] - 1 ] += 1 NEW_LINE DEDENT for i in range ( 1 , 10 ** 5 + 2 ) : NEW_LINE INDENT a [ i ] = max ( a [ i ] , a [ i - 1 ] ) NEW_LINE DEDENT a = [ i for i in range ( 10 ** 5 + 2 ) if a [ i ] == i ] NEW_LINE b = [ i for i in range ( 10 ** 5 + 2 ) if b [ i ] == i ] NEW_LINE c = [ 10 ** 5 + 1 for i in range ( 10 ** 5 + 2 ) ] NEW_LINE d = [ 0 , 0 , 0 ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if a [ i ] == 1 : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT elif b [ i ] == 1 : NEW_LINE INDENT d [ i ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] = 0 NEW_LINE DEDENT DEDENT mx = 0 NEW_LINE for i in range ( 1 , 10 ** 5 + 2 ) : NEW_LINE INDENT if d [ i ] == 1 : NEW_LINE INDENT mx = max ( mx , d [ i - 1 ] ) NEW_LINE DEDENT DEDENT for i in range ( 1 , 10 ** 5 + 2 ) : NEW_LINE INDENT if b [ i ] == 1 : NEW_LINE INDENT mx = max ( mx , d [ i - 1 ] ) NEW_LINE DEDENT DEDENT print ( mx - max ( d ) ) NEW_LINE
def SubString ( string , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n + 1 ) : NEW_LINE INDENT print ( string [ i : j ] ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT string = " abcd " NEW_LINE SubString ( string , len ( string ) ) NEW_LINE DEDENT
def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def countPrimePosition ( arr ) : NEW_LINE INDENT c0 = 0 NEW_LINE c1 = 0 NEW_LINE n = len ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == 0 and isPrime ( i ) ) : NEW_LINE INDENT c0 += 1 NEW_LINE DEDENT if ( arr [ i ] == 1 and isPrime ( i ) ) : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT DEDENT print ( " Number of 0s = " , c0 ) NEW_LINE print ( " Number of 1s = " , c1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 0 , 1 , 0 , 1 ] NEW_LINE countPrimePosition ( arr ) NEW_LINE DEDENT
def angleextcyc src ( z ) : NEW_LINE INDENT print ( " The exterior angle of the " , " cyclic liilateral is " , z , " degrees " ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT z = 48 NEW_LINE angleextcyc src ( z ) NEW_LINE DEDENT
import sys NEW_LINE def printMinIndexChar ( str , patt ) : NEW_LINE INDENT minIndex = sys . maxsize NEW_LINE m = len ( str ) NEW_LINE n = patt . count ( " set " ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if ( patt [ i ] == str [ j ] and j < minIndex ) : NEW_LINE INDENT minIndex = j NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT if ( minIndex != sys . maxsize ) : NEW_LINE INDENT print ( " Minimum Index Character = " , str [ minIndex ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No character present " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = " geeksforgeeks " NEW_LINE patt = " set " NEW_LINE printMinIndexChar ( str , patt ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE if x > y : NEW_LINE INDENT print ( " beautiful " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " beautiful " ) NEW_LINE DEDENT DEDENT
def maxnumber ( n , k ) : NEW_LINE INDENT for j in range ( k ) : NEW_LINE INDENT ans = 0 NEW_LINE i = 1 NEW_LINE while ( n // i > 0 ) : NEW_LINE INDENT temp = ( n // ( i * 10 ) ) * i + ( n % i ) NEW_LINE i *= 10 NEW_LINE ans = max ( ans , temp ) NEW_LINE DEDENT n = ans NEW_LINE DEDENT return n NEW_LINE DEDENT n = 6358 NEW_LINE k = 1 NEW_LINE print ( maxnumber ( n , k ) ) NEW_LINE
N , M = map ( int , input ( ) . split ( ) ) NEW_LINE AB = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( M ) ] NEW_LINE sAB = sorted ( AB , key = lambda x : x [ 0 ] ) NEW_LINE cnt = [ 0 ] * ( N + 1 ) NEW_LINE for itr , ab in enumerate ( sAB ) : NEW_LINE INDENT a , b = ab NEW_LINE if itr == 0 : NEW_LINE INDENT cnt [ ( b + 1 ) % N ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT cnt [ ( b + 1 ) % N ] += 1 NEW_LINE DEDENT DEDENT smal = 0 NEW_LINE for itr , ab in enumerate ( cnt ) : NEW_LINE INDENT if ab > 0 : NEW_LINE INDENT p = itr % N NEW_LINE q = ab NEW_LINE if p > 2 : NEW_LINE INDENT continue NEW_LINE DEDENT if cnt [ p ] > 2 : NEW_LINE INDENT continue NEW_LINE DEDENT smal = max ( smal , cnt [ p ] ) NEW_LINE DEDENT DEDENT for itr , ab in enumerate ( cnt ) : NEW_LINE INDENT if ab > 0 : NEW_LINE INDENT if cnt [ ab ] > 2 : NEW_LINE INDENT continue NEW_LINE DEDENT smal = max ( smal , cnt [ ab ] ) NEW_LINE DEDENT DEDENT for itr , ab in enumerate ( cnt ) : NEW_LINE INDENT if ab > 0 : NEW_LINE INDENT print ( " { } { } " . format ( itr + 1 , ab ) ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE a = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT dp [ i ] [ 0 ] = a [ i - 1 ] NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT dp [ i ] [ 1 ] = a [ i - 1 ] + min ( dp [ i - 1 ] [ 1 ] , dp [ i - 1 ] [ 0 ] ) NEW_LINE DEDENT dp [ - 1 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT dp [ i ] [ 0 ] = a [ i - 1 ] + min ( dp [ i - 1 ] [ 1 ] , dp [ i - 1 ] [ 0 ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT dp [ i ] [ 1 ] = max ( dp [ i - 1 ] [ 1 ] , dp [ i - 1 ] [ 0 ] ) + a [ i - 1 ] NEW_LINE DEDENT print ( min ( dp [ - 1 ] [ 1 ] , dp [ - 1 ] [ 1 ] ) ) NEW_LINE
def get_last_two_digit ( N ) : NEW_LINE INDENT if ( N <= 10 ) : NEW_LINE INDENT ans = 0 NEW_LINE fac = 1 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT fac = fac * i NEW_LINE ans += fac NEW_LINE DEDENT return ans % 100 NEW_LINE DEDENT else : NEW_LINE INDENT return 13 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 1 NEW_LINE for N in range ( 1 , 11 ) : NEW_LINE INDENT print ( " For N = " , N , " : " , get_last_two_digit ( N ) ) NEW_LINE DEDENT DEDENT
if __name__ == " _ _ main _ _ " : NEW_LINE INDENT binaryNumber = "1001" NEW_LINE print ( int ( binaryNumber , 2 ) ) NEW_LINE DEDENT
from math import ceil , floor NEW_LINE def isPossible ( x , y , z ) : NEW_LINE INDENT a = x * x + y * y + z * z NEW_LINE if ( ceil ( a ) == 1 and floor ( a ) == 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT l = 0. mpf NEW_LINE m = 0.5 NEW_LINE n = 0.5 NEW_LINE if ( isPossible ( l , m , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
MAX = 10000007 NEW_LINE MOD = 10000007 NEW_LINE result = [ 0 ] * ( MAX + 1 ) NEW_LINE fact = [ 0 ] * ( MAX + 1 ) NEW_LINE def preCompute ( ) : NEW_LINE INDENT fact [ 0 ] = 1 NEW_LINE result [ 0 ] = 1 NEW_LINE for i in range ( 1 , MAX + 1 ) : NEW_LINE INDENT fact [ i ] = ( ( fact [ i - 1 ] % MOD ) * i ) % MOD NEW_LINE result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD NEW_LINE DEDENT DEDENT def performQueries ( q , n ) : NEW_LINE INDENT preCompute ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( result [ q [ i ] ] ) NEW_LINE DEDENT DEDENT q = [ 4 , 5 ] NEW_LINE n = len ( q ) NEW_LINE performQueries ( q , n ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT ans += ( i + 1 ) * ( a [ i ] - a [ i - 1 ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
def segregate ( arr , size ) : NEW_LINE INDENT j = 0 NEW_LINE for i in range ( size ) : NEW_LINE INDENT if ( arr [ i ] <= 0 ) : NEW_LINE INDENT arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ] NEW_LINE j += 1 NEW_LINE DEDENT DEDENT return j NEW_LINE DEDENT def findMissingPositive ( arr , size ) : NEW_LINE INDENT for i in range ( size ) : NEW_LINE INDENT x = abs ( arr [ i ] ) NEW_LINE if ( x - 1 < size and arr [ x - 1 ] > 0 ) : NEW_LINE INDENT arr [ x - 1 ] = - arr [ x - 1 ] NEW_LINE DEDENT DEDENT for i in range ( size ) : NEW_LINE INDENT if ( arr [ i ] > 0 ) : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return size + 1 NEW_LINE DEDENT def findMissing ( arr , size ) : NEW_LINE INDENT shift = segregate ( arr , size ) NEW_LINE arr2 = [ 0 for i in range ( size - shift ) ] NEW_LINE j = 0 NEW_LINE for i in range ( shift , size ) : NEW_LINE INDENT arr2 [ j ] = arr [ i ] NEW_LINE j += 1 NEW_LINE DEDENT return findMissingPositive ( arr2 , j ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 0 , 10 , 2 , - 10 , - 20 ] NEW_LINE arr_size = len ( arr ) NEW_LINE missing = findMissing ( arr , arr_size ) NEW_LINE print ( " The smallest positive missing number is " , missing ) NEW_LINE DEDENT
mod = 1000000007 NEW_LINE def digitNumber ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT return 9 NEW_LINE DEDENT if ( n % 2 != 0 ) : NEW_LINE INDENT temp = digitNumber ( int ( ( n - 1 ) / 2 ) ) % mod NEW_LINE return ( 9 * ( temp * temp ) % mod ) % mod NEW_LINE DEDENT else : NEW_LINE INDENT temp = digitNumber ( int ( n / 2 ) ) % mod NEW_LINE return ( temp * temp ) % mod NEW_LINE DEDENT DEDENT def count ex ex ex ex ex ( n , d ) : NEW_LINE INDENT if ( d == 0 ) : NEW_LINE INDENT return ( 9 * digitNumber ( n - 1 ) ) % mod NEW_LINE DEDENT else : NEW_LINE INDENT return ( 8 * digitNumber ( n - 1 ) ) % mod NEW_LINE DEDENT DEDENT d = 9 NEW_LINE n = 3 NEW_LINE print ( count ex ex ex ( n , d ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE if a [ - 1 ] + a [ 1 ] > a [ - 2 ] : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 1 , 2 , n ) NEW_LINE DEDENT DEDENT
def convert12 ( str ) : NEW_LINE INDENT h1 = ord ( str [ 0 ] ) - ord ( '0' ) NEW_LINE h2 = ord ( str [ 1 ] ) - ord ( '0' ) NEW_LINE hh = h1 * 10 + h2 NEW_LINE if ( hh < 12 ) : NEW_LINE INDENT Coder Coderen = " AM " NEW_LINE DEDENT else : NEW_LINE INDENT Coder Coderen = " INF " NEW_LINE DEDENT hh %= 12 NEW_LINE if ( hh == 0 ) : NEW_LINE INDENT print ( "12" , end = " " ) NEW_LINE for i in range ( 2 , 8 ) : NEW_LINE INDENT print ( str [ i ] , end = " " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( hh , end = " " ) NEW_LINE for i in range ( 2 , 8 ) : NEW_LINE INDENT print ( str [ i ] , end = " " ) NEW_LINE DEDENT DEDENT print ( " " , len ( Coder Coderen ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = "17 nd nd nd " NEW_LINE convert12 ( str ) NEW_LINE DEDENT
def check ( s , k ) : NEW_LINE INDENT for i in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ i ] != s [ i % k ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def countCommonDivisors ( a , b ) : NEW_LINE INDENT ct = 0 NEW_LINE n = len ( a ) NEW_LINE m = len ( b ) NEW_LINE for i in range ( 1 , min ( n , m ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 and m % i == 0 ) : NEW_LINE INDENT if ( a [ 0 : i ] == b [ 0 : i ] ) : NEW_LINE INDENT if ( check ( a , i ) and check ( b , i ) ) : NEW_LINE INDENT ct += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return ct NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = " xaxa " NEW_LINE b = " xaxaxaxa " NEW_LINE print ( countCommonDivisors ( a , b ) ) NEW_LINE DEDENT
def max ( a , b ) : NEW_LINE INDENT return a if ( a > b ) else b NEW_LINE DEDENT def print StringBufferapSack ( W , wt , val , n ) : NEW_LINE INDENT K = [ [ 0 for i in range ( W + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for w in range ( W + 1 ) : NEW_LINE INDENT if ( i == 0 or w == 0 ) : NEW_LINE INDENT K [ i ] [ w ] = 0 NEW_LINE DEDENT elif ( wt [ i - 1 ] <= w ) : NEW_LINE INDENT K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] , K [ i - 1 ] [ w ] ) NEW_LINE DEDENT else : NEW_LINE INDENT K [ i ] [ w ] = K [ i - 1 ] [ w ] NEW_LINE DEDENT DEDENT DEDENT res = K [ n ] [ W ] NEW_LINE print ( res ) NEW_LINE w = W NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT if ( res == K [ i - 1 ] [ w ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT print ( wt [ i - 1 ] , end = " " ) NEW_LINE res = res - val [ i - 1 ] NEW_LINE w = w - wt [ i - 1 ] NEW_LINE DEDENT DEDENT DEDENT val = [ 60 , 100 , 120 ] NEW_LINE wt = [ 10 , 20 , 30 ] NEW_LINE W = 50 NEW_LINE n = len ( val ) NEW_LINE print StringBufferapSack ( W , wt , val , n ) NEW_LINE
n = int ( input ( ) ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE arr . append ( [ a , b ] ) NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if arr [ i ] [ 2 * j ] == arr [ i ] [ 0 ] and arr [ i ] [ 0 ] == arr [ j ] [ 1 ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT print ( count ) NEW_LINE
def p ( ) : NEW_LINE INDENT global l , k NEW_LINE j , ind , start , end = 0 , 0 , 0 NEW_LINE for i in range ( 0 , n , 3 ) : NEW_LINE INDENT elements = l [ i ] NEW_LINE indices = [ i ] NEW_LINE ind += 1 NEW_LINE DEDENT if ( k < elements [ 0 ] ) : NEW_LINE INDENT print ( " Not found " ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( 1 , ind + 1 ) : NEW_LINE INDENT if ( k < elements [ i ] ) : NEW_LINE INDENT start = indices [ i - 1 ] NEW_LINE end = indices [ i ] NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( start , end + 1 ) : NEW_LINE INDENT if ( k == arr [ i ] ) : NEW_LINE INDENT j = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if ( j == 1 ) : NEW_LINE INDENT print ( " Found at index " , i ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not found " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT l = [ 6 , 7 , 8 , 9 , 10 ] NEW_LINE n = len ( l ) NEW_LINE k = 8 NEW_LINE p ( ) NEW_LINE DEDENT
def ls ( ) : NEW_LINE INDENT return len ( str ( max ( 1 , int ( input ( ) ) ) ) ) NEW_LINE DEDENT def ls_ ( ) : NEW_LINE INDENT return [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE DEDENT def ls_str ( ) : NEW_LINE INDENT return input ( ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 2 NEW_LINE while ( n >= ls_str ( ) and ls_str ( ) ) : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT print ( ls_str ( ) ) NEW_LINE DEDENT main ( ) NEW_LINE
import sys NEW_LINE input = sys . stdin . readline NEW_LINE sys . setrecursionlimit ( 10 ** 7 ) NEW_LINE from collections import Counter , deque NEW_LINE from collections import defaultdict NEW_LINE from itertools import combinations , permutations , accumulate , groupby , product NEW_LINE from bisect import bisect_left , bisect_right NEW_LINE from heapq import heapify , heappop , heappush NEW_LINE from math import floor , ceil NEW_LINE from operator import itemgetter NEW_LINE from copy import deepcopy NEW_LINE def I ( ) : return int ( input ( ) ) NEW_LINE def MI ( ) : return map ( int , input ( ) . split ( ) ) NEW_LINE def LI ( ) : return list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE def LI2 ( ) : return [ int ( input ( ) ) for i in range ( n ) ] NEW_LINE def MXI ( ) : return [ [ LI ( ) ] for i in range ( n ) ] NEW_LINE inf = 10 ** 17 NEW_LINE mod = 10 ** 9 + 7 NEW_LINE n = I ( ) NEW_LINE A = LI ( ) NEW_LINE ans = - 1 NEW_LINE if n == 1 : NEW_LINE INDENT print ( ans ) NEW_LINE exit ( ) NEW_LINE DEDENT x = max ( A ) NEW_LINE mx = x NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT mx = max ( mx , A [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( 0 , t ) : NEW_LINE INDENT l = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE a , b , c = l [ 0 ] , l [ 1 ] , l [ 2 ] NEW_LINE if a > b : NEW_LINE INDENT if a > c : NEW_LINE INDENT a , c = c , a NEW_LINE DEDENT DEDENT if b > c : NEW_LINE INDENT if b > a : NEW_LINE INDENT b , c = a , b NEW_LINE DEDENT DEDENT print ( max ( a , b , c ) + 1 ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT s = a [ i ] - a [ i - 1 ] NEW_LINE if s < 0 : NEW_LINE INDENT s = 0 NEW_LINE DEDENT ans = max ( ans , s ) NEW_LINE DEDENT for i in range ( n - 2 ) : NEW_LINE INDENT s = a [ i ] - a [ i + 1 ] NEW_LINE if s < 0 : NEW_LINE INDENT s = 0 NEW_LINE DEDENT ans = max ( ans , s ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def maximumXor ( arr , n ) : NEW_LINE INDENT sForward = [ ] NEW_LINE sForward = [ ] NEW_LINE ans = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT while ( len ( sForward ) != 0 and arr [ i ] < arr [ sForward [ - 1 ] ] ) : NEW_LINE INDENT ans = max ( ans , arr [ i ] ^ arr [ sForward [ - 1 ] ] ) NEW_LINE sForward . pop ( ) NEW_LINE DEDENT sForward . append ( i ) NEW_LINE while ( len ( sForward ) != 0 and arr [ n - i - 1 ] < arr [ sForward [ - 1 ] ] ) : NEW_LINE INDENT ans = max ( ans , arr [ n - i - 1 ] ^ arr [ sForward [ - 1 ] ] ) NEW_LINE sForward . pop ( ) NEW_LINE DEDENT sForward . append ( n - i - 1 ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 8 , 1 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maximumXor ( arr , n ) ) NEW_LINE DEDENT
def decTo hexaDeciNum ( n ) : NEW_LINE INDENT hexaDeciNum = list ( ) ; NEW_LINE i = 0 ; NEW_LINE while ( n != 0 ) : NEW_LINE INDENT temp = 0 ; NEW_LINE temp = n % 16 ; NEW_LINE if ( temp < 10 ) : NEW_LINE INDENT hexaDeciNum [ i ] = chr ( temp + 48 ) ; NEW_LINE i += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT hexaDeciNum [ i ] = chr ( temp + 55 ) ; NEW_LINE i += 1 ; NEW_LINE DEDENT n = n // 16 ; NEW_LINE DEDENT for j in range ( i - 1 , - 1 , - 1 ) : NEW_LINE INDENT print ( hexaDeciNum [ j ] , end = " " ) ; NEW_LINE DEDENT DEDENT n = 2545 ; NEW_LINE decTo hexa ( n ) ; NEW_LINE
N = int ( input ( ) ) NEW_LINE A = [ int ( input ( ) ) for _ in range ( N ) ] NEW_LINE B = { } NEW_LINE for a in A : NEW_LINE INDENT if a in B : NEW_LINE INDENT B [ a ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT B [ a ] = 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for k in range ( 1 , N + 1 ) : NEW_LINE INDENT x = B [ k - 1 ] NEW_LINE y = B [ k ] + B [ k + 1 ] NEW_LINE ans = max ( ans , x + y ) NEW_LINE DEDENT print ( ans ) NEW_LINE
while True : NEW_LINE INDENT r , c = map ( int , input ( ) . split ( ) ) NEW_LINE if r == 0 : break NEW_LINE table = [ ] NEW_LINE for _ in range ( r ) : NEW_LINE INDENT table . append ( input ( ) ) NEW_LINE DEDENT s = input ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( c ) : NEW_LINE INDENT for j in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] [ j ] == " _ " : continue NEW_LINE ans += 1 NEW_LINE table [ i ] [ j ] = 0 NEW_LINE for j in range ( c ) : NEW_LINE INDENT table [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT for i in range ( r ) : NEW_LINE INDENT for j in range ( c ) : NEW_LINE INDENT if s [ i ] [ j ] == " _ " : continue NEW_LINE ans += 1 NEW_LINE table [ i ] [ j ] = 0 NEW_LINE for j in range ( len ( s ) ) : NEW_LINE INDENT table [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT for i in range ( c ) : NEW_LINE INDENT for j in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] [ j ] == " _ " : continue NEW_LINE ans += 1 NEW_LINE table [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a , b = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE if n == 1 : NEW_LINE INDENT print ( a + b ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Hello 10001 " ) NEW_LINE DEDENT
def extractMaximum ( str ) : NEW_LINE INDENT num = 0 NEW_LINE res = 0 NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT if ( str [ i ] . isdigit ( ) ) : NEW_LINE INDENT num = num * 10 + ( ord ( str [ i ] ) - ord ( '0' ) ) NEW_LINE DEDENT else : NEW_LINE INDENT res = max ( res , num ) NEW_LINE num = 0 NEW_LINE DEDENT DEDENT return max ( res , num ) NEW_LINE DEDENT str = "100klh564abc lst lst " NEW_LINE print ( extractMaximum ( str ) ) NEW_LINE
max = 50009 NEW_LINE def find_Indices ( arr , n ) : NEW_LINE INDENT sum = [ 0 for i in range ( max ) ] NEW_LINE k = 0 NEW_LINE i = 1 NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT sum [ i ] = sum [ i - 1 ] + arr [ k ] NEW_LINE k += 1 NEW_LINE i += 1 NEW_LINE DEDENT ans = - ( 1e15 ) NEW_LINE index_1 = index_2 = index_3 = - 1 NEW_LINE for l in range ( n + 1 ) : NEW_LINE INDENT index = 0 NEW_LINE vmin = ( 1e15 ) NEW_LINE for r in range ( l , n + 1 ) : NEW_LINE INDENT if ( sum [ r ] < vmin ) : NEW_LINE INDENT vmin = sum [ r ] NEW_LINE index = r NEW_LINE DEDENT if ( sum [ l ] + sum [ r ] - vmin > ans ) : NEW_LINE INDENT ans = sum [ l ] + sum [ r ] - vmin NEW_LINE index_1 = l NEW_LINE index_2 = index NEW_LINE index_3 = r NEW_LINE DEDENT DEDENT DEDENT print ( index_1 , " " , index_2 , " " , index_3 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ - 1 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE find_Indices ( arr , n ) NEW_LINE DEDENT
def printElements ( arr , n ) : NEW_LINE INDENT for i in range ( 1 , n - 1 ) : NEW_LINE INDENT if ( arr [ i ] > arr [ i - 1 ] and arr [ i ] > arr [ i + 1 ] ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 2 , 3 , 1 , 5 , 4 , 9 , 8 , 7 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE printElements ( arr , n ) NEW_LINE
def valueofX ( ar , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + ar [ i ] NEW_LINE DEDENT if ( sum % n == 0 ) : NEW_LINE INDENT return sum // n NEW_LINE DEDENT else : NEW_LINE INDENT A = sum // n NEW_LINE B = sum // n + 1 NEW_LINE ValueA = 0 NEW_LINE ValueB = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ValueA += ( ( ar [ i ] - A ) * ( ar [ i ] - A ) ) NEW_LINE ValueB += ( ( ar [ i ] - B ) * ( ar [ i ] - B ) ) NEW_LINE DEDENT if ( ValueA < ValueB ) : NEW_LINE INDENT return A NEW_LINE DEDENT else : NEW_LINE INDENT return B NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 7 NEW_LINE arr = [ 6 , 9 , 1 , 6 , 1 , 3 , 7 ] NEW_LINE print ( valueofX ( arr , n ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , l = map ( int , input ( ) . split ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( l ) : NEW_LINE INDENT c = 1 NEW_LINE while i >= 0 and arr [ i ] & ( 1 << i ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT c = 0 NEW_LINE while i < n : NEW_LINE INDENT if arr [ i ] & ( 1 << i ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT if c > 1 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans * 2 ) NEW_LINE DEDENT
import sys NEW_LINE def input ( ) : return sys . stdin . readline ( ) . strip ( ) NEW_LINE def main ( ) : NEW_LINE INDENT S = input ( ) NEW_LINE N = len ( S ) NEW_LINE if S // 2 >= N : NEW_LINE INDENT print ( S ) NEW_LINE DEDENT else : NEW_LINE INDENT left = N // 2 NEW_LINE right = N // 2 NEW_LINE while right - left > 1 : NEW_LINE INDENT mid = ( left + right ) // 2 NEW_LINE if S [ ( mid ) : mid ] == S [ ( mid ) : mid ] : NEW_LINE INDENT left = mid NEW_LINE DEDENT else : NEW_LINE INDENT right = mid NEW_LINE DEDENT DEDENT print ( left ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def findNth ( n ) : NEW_LINE INDENT count = 0 NEW_LINE curr = 19 NEW_LINE while ( curr + 9 ) : NEW_LINE INDENT sum = 0 NEW_LINE x = curr NEW_LINE while ( x > 0 ) : NEW_LINE INDENT sum = sum + x % 10 NEW_LINE x = x // 10 NEW_LINE DEDENT if ( sum == 10 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( count == n ) : NEW_LINE INDENT return curr NEW_LINE DEDENT curr += 1 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( findNth ( 5 ) ) NEW_LINE DEDENT
def findNth ( n ) : NEW_LINE INDENT count = 0 NEW_LINE curr = 1 NEW_LINE while ( curr <= n ) : NEW_LINE INDENT sum = 0 NEW_LINE x = curr NEW_LINE while ( x > 0 ) : NEW_LINE INDENT sum = sum + x % 10 NEW_LINE x = x // 10 NEW_LINE DEDENT if ( sum == 10 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( count == n ) : NEW_LINE INDENT return curr NEW_LINE DEDENT curr += 1 NEW_LINE DEDENT DEDENT print ( findNth ( 5 ) ) NEW_LINE
def countNumber ( N , S ) : NEW_LINE INDENT countElements = 0 NEW_LINE currSum = 0 NEW_LINE while ( currSum <= S ) : NEW_LINE INDENT currSum += N NEW_LINE N -= 1 NEW_LINE countElements += 1 NEW_LINE DEDENT return countElements NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 5 NEW_LINE S = 11 NEW_LINE count = countNumber ( N , S ) NEW_LINE print ( count ) NEW_LINE DEDENT
def strmatch ( str , pattern , n , m ) : NEW_LINE INDENT if ( m == 0 ) : NEW_LINE INDENT return ( n == 0 ) NEW_LINE DEDENT lookup = [ [ 0 for i in range ( m + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE lookup [ 0 ] [ 0 ] = 1 NEW_LINE for j in range ( 1 , m + 1 ) : NEW_LINE INDENT if ( pattern [ j - 1 ] == ' * ' ) : NEW_LINE INDENT lookup [ 0 ] [ j ] = lookup [ 0 ] [ j - 1 ] NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , m + 1 ) : NEW_LINE INDENT if ( pattern [ j - 1 ] == ' * ' ) : NEW_LINE INDENT lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] or lookup [ i - 1 ] [ j ] NEW_LINE DEDENT elif ( pattern [ j - 1 ] == ' ? ' or str [ i - 1 ] == pattern [ j - 1 ] ) : NEW_LINE INDENT lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT lookup [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT DEDENT return lookup [ n ] [ m ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = " baaabab " NEW_LINE pattern = " * * * * * ba * * * * * * ab " NEW_LINE if ( strmatch ( str , pattern , len ( str ) , len ( str ) , len ( pattern ) ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
MAXN = 1000001 NEW_LINE MAXRT = 1000 NEW_LINE def prime ( ) : NEW_LINE INDENT p = [ 0 ] * MAXN NEW_LINE for i in range ( 2 , MAXN ) : NEW_LINE INDENT if p [ i ] : NEW_LINE INDENT for j in range ( i * i , MAXN , i ) : NEW_LINE INDENT p [ j ] = 1 NEW_LINE DEDENT DEDENT DEDENT return p NEW_LINE DEDENT def check ( a ) : NEW_LINE INDENT if a == 1 : return False NEW_LINE for i in range ( 2 , MAXN ) : NEW_LINE INDENT if p [ i ] : NEW_LINE INDENT for j in range ( i * i , MAXN , i ) : NEW_LINE INDENT p [ j ] = 1 NEW_LINE DEDENT return True NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT while True : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if a == 0 and b == 0 : break NEW_LINE f = prime ( ) NEW_LINE l = len ( f ) NEW_LINE f . sort ( reverse = True ) NEW_LINE if l == 1 : NEW_LINE INDENT print ( ' a ' ) NEW_LINE continue NEW_LINE DEDENT f . sort ( ) NEW_LINE c = 0 NEW_LINE j = l - 1 NEW_LINE while True : NEW_LINE INDENT if f [ c ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if b == c : NEW_LINE INDENT break NEW_LINE DEDENT c += 1 NEW_LINE DEDENT l -= 1 NEW_LINE DEDENT for x in range ( l ) : NEW_LINE INDENT if f [ x ] : NEW_LINE INDENT print ( ' a ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' b ' ) NEW_LINE DEDENT DEDENT
def nCr ( n , r ) : NEW_LINE INDENT fac = [ 1 for i in range ( 100 ) ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT fac [ i ] = fac [ i - 1 ] * i NEW_LINE DEDENT ans = fac [ n ] // ( fac [ n - r ] * fac [ r ] ) NEW_LINE return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 NEW_LINE k = 3 NEW_LINE ans = ( nCr ( n + k - 1 , k ) + nCr ( k - 1 , n - 1 ) ) NEW_LINE print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = sorted ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT b . append ( abs ( a [ n - 1 ] - a [ i ] ) * 2 ) NEW_LINE DEDENT b . sort ( ) NEW_LINE print ( a [ - 1 ] , end = " " ) NEW_LINE print ( b [ - 1 ] ) NEW_LINE
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b ; NEW_LINE DEDENT return gcd ( b % a , a ) ; NEW_LINE DEDENT def powGCD ( a , n , b ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT a = a * a ; NEW_LINE DEDENT return gcd ( a , b ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 10 ; b = 5 ; n = 2 ; NEW_LINE print ( powGCD ( a , n , b ) ) ; NEW_LINE DEDENT
import sys NEW_LINE sys . setrecursionlimit ( 2147483647 ) NEW_LINE INF = float ( " inf " ) NEW_LINE MOD = 10 ** 9 + 7 NEW_LINE input = lambda : sys . stdin . readline ( ) . rstrip ( ) NEW_LINE def bisection ( l , r , f , left = True , discrete = True ) : NEW_LINE INDENT eps = 1 if ( discrete ) else 10 ** - 8 NEW_LINE if ( ( not left ) ^ f ( r ) ) : return r if ( left ) else r + 1 NEW_LINE elif ( left ^ f ( l ) ) : return l - 1 if ( left ) else l NEW_LINE while ( r - l > eps ) : NEW_LINE INDENT h = ( l + r ) // 2 if ( discrete ) else ( l + r ) / 2 NEW_LINE if ( ( not left ) ^ f ( h ) ) : l = h NEW_LINE else : r = h NEW_LINE DEDENT return ( l + r ) / 2 if ( not discrete ) else l if ( left ) else r NEW_LINE DEDENT from collections import defaultdict NEW_LINE from bisect import bisect_left NEW_LINE def resolve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE D = defaultdict ( int ) NEW_LINE for a in map ( int , input ( ) . split ( ) ) : NEW_LINE INDENT D [ a ] += 1 NEW_LINE DEDENT D = list ( D . values ( ) ) NEW_LINE D . sort ( ) NEW_LINE t = len ( D ) NEW_LINE S = [ 0 ] * ( t + 1 ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT S [ i + 1 ] = S [ i ] + D [ i ] NEW_LINE DEDENT k = 0 NEW_LINE for v in D : NEW_LINE INDENT k += 1 NEW_LINE DEDENT print ( " " . join ( map ( str , v ) ) ) NEW_LINE DEDENT resolve ( ) NEW_LINE
n = int ( input ( ) ) NEW_LINE lst = list ( map ( int , input ( ) ) ) NEW_LINE lst . sort ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( n // 11 ) : NEW_LINE INDENT if lst [ i ] == 8 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def sumOfDigit ( n , b ) : NEW_LINE INDENT sum = 0 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT unitDigit = n % b NEW_LINE sum += unitDigit NEW_LINE n = n // b NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 50 NEW_LINE b = 2 NEW_LINE print ( sumOfDigit ( n , b ) ) NEW_LINE DEDENT
import math NEW_LINE def printLargestDivisible ( n , a ) : NEW_LINE INDENT c0 = 0 NEW_LINE c5 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] == 0 ) : NEW_LINE INDENT c0 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT c5 += 1 NEW_LINE DEDENT DEDENT c5 = int ( math . floor ( c5 / 9 ) * 9 ) NEW_LINE if ( c0 == 0 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT elif ( c5 == 0 ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( c5 ) : NEW_LINE INDENT print ( 5 , end = " " ) NEW_LINE DEDENT for i in range ( c0 ) : NEW_LINE INDENT print ( 0 , end = " " ) NEW_LINE DEDENT DEDENT DEDENT a = [ 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 0 , 5 , 5 , 5 ] NEW_LINE n = len ( a ) NEW_LINE printLargestDivisible ( n , a ) NEW_LINE
def countWays ( n ) : NEW_LINE INDENT counter = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT for k in range ( j , n ) : NEW_LINE INDENT for l in range ( k , n ) : NEW_LINE INDENT if ( i + j + k + l == n ) : NEW_LINE INDENT counter = counter + 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return counter NEW_LINE DEDENT n = 8 NEW_LINE print ( countWays ( n ) ) NEW_LINE
def numberOfMinutes ( S , S1 ) : NEW_LINE INDENT Min = 0 NEW_LINE Min = ( ( S - S1 ) // 60 ) * 60 NEW_LINE return Min NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT S = 30 NEW_LINE S1 = 10 NEW_LINE print ( numberOfMinutes ( S , S1 ) , " min " ) NEW_LINE DEDENT
n , m , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( reverse = True ) NEW_LINE i = 0 NEW_LINE while k < m and i < n - 1 : NEW_LINE INDENT k += a [ i + 1 ] - a [ i ] - 1 NEW_LINE i += 1 NEW_LINE DEDENT print ( k - max ( [ i for i in range ( k - 1 ) ] ) ) NEW_LINE
from math import floor , log2 NEW_LINE def onesComplement ( n ) : NEW_LINE INDENT number_of_bits = floor ( log2 ( n ) ) + 1 NEW_LINE return ( ( 1 << number_of_bits ) - 1 ) ^ n NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 22 NEW_LINE print ( onesComplement ( n ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT w , h , n = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE while w % 2 == 0 and h % 2 == 0 : NEW_LINE INDENT w //= 2 NEW_LINE h //= 2 NEW_LINE DEDENT while h % 2 == 0 : NEW_LINE INDENT h //= 2 NEW_LINE n //= 2 NEW_LINE DEDENT if w >= n : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def findPoint ( x1 , y1 , x2 , y2 ) : NEW_LINE INDENT print ( " ( " , ( 2 * x2 - x1 ) , " , " , ( 2 * y2 - y1 ) , " ) " ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT x1 = 0 NEW_LINE y1 = 0 NEW_LINE x2 = 1 NEW_LINE y2 = 1 NEW_LINE findPoint ( x1 , y1 , x2 , y2 ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b , k = map ( int , input ( ) . split ( ) ) NEW_LINE k -= 1 NEW_LINE if k == 0 : NEW_LINE INDENT print ( a - 1 ) NEW_LINE DEDENT elif k == 1 : NEW_LINE INDENT print ( b - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( max ( a + 1 , b + 1 ) - max ( a + 1 , b - 1 ) ) NEW_LINE DEDENT DEDENT
def MOD ( x , y ) : NEW_LINE INDENT while ( True ) : NEW_LINE INDENT if ( x == 0 or y == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( x >= 2 * y ) : NEW_LINE INDENT x = x % ( 2 * y ) NEW_LINE DEDENT elif ( y >= 2 * x ) : NEW_LINE INDENT y = y % ( 2 * x ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( " X = " , x , " , " , " Y = " , y ) NEW_LINE DEDENT x = 12 NEW_LINE y = 5 NEW_LINE MOD ( x , y ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE ans = 2 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT if a [ j ] - a [ i ] > 2 * i : NEW_LINE INDENT ans = max ( ans , j - i + 1 ) NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == s [ i + 1 ] : NEW_LINE INDENT ans . append ( i + 1 ) NEW_LINE DEDENT DEDENT if len ( ans ) == n : NEW_LINE INDENT print ( * ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 , - 1 ) NEW_LINE DEDENT DEDENT
mod = 1000000007 NEW_LINE inv2 = 5 BigInteger ( 5 BigInteger ( 1 ) ) NEW_LINE def modulo ( num ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( len ( num ) ) : NEW_LINE INDENT res = ( res * 10 + ( ord ( num [ i ] ) - ord ( '0' ) ) % mod ) NEW_LINE DEDENT return res NEW_LINE DEDENT def findSum ( L , R ) : NEW_LINE INDENT a = modulo ( L ) NEW_LINE b = modulo ( R ) NEW_LINE l = ( ( a * ( a - 1 ) ) % mod * inv2 ) % mod NEW_LINE r = ( ( b * ( b + 1 ) ) % mod * inv2 ) % mod NEW_LINE ret = ( r % mod - l % mod ) NEW_LINE if ( ret < 0 ) : NEW_LINE INDENT ret = ret + mod NEW_LINE DEDENT else : NEW_LINE INDENT ret = ret % mod NEW_LINE DEDENT return ret NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT L = "88949273204" NEW_LINE R = "98429729474298592" NEW_LINE print ( findSum ( L , R ) ) NEW_LINE DEDENT
def unsort ( l , r , a , k ) : NEW_LINE INDENT if ( k < 1 or l + 1 == r ) : NEW_LINE INDENT return NEW_LINE DEDENT k -= 2 NEW_LINE mid = ( l + r ) // 2 NEW_LINE a [ mid - 1 ] , a [ mid ] = a [ mid ] , a [ mid ] NEW_LINE unsort ( l , mid , a , k ) NEW_LINE unsort ( mid , r , a , k ) NEW_LINE DEDENT def arrayWithK pq ( n , k ) : NEW_LINE INDENT if ( k % 2 == 0 ) : NEW_LINE INDENT print ( " NO parent parent parent " ) NEW_LINE return NEW_LINE DEDENT a = [ 0 ] * ( n + 1 ) NEW_LINE a [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT a [ i ] = i + 1 NEW_LINE DEDENT k -= 1 NEW_LINE unsort ( 0 , n , a , k ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( a [ i ] , end = " " ) NEW_LINE DEDENT DEDENT n = 10 NEW_LINE k = 17 NEW_LINE arrayWithK pq ( n , k ) NEW_LINE
import math NEW_LINE def mean ( mid , freq , n ) : NEW_LINE INDENT sum = 0 NEW_LINE freqSum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + mid [ i ] * freq [ i ] NEW_LINE freqSum = freqSum + freq [ i ] NEW_LINE DEDENT return sum / freqSum NEW_LINE DEDENT def plst ( lower_limit , upper_limit , freq , n ) : NEW_LINE INDENT mid = [ 0 for i in range ( n ) ] NEW_LINE sum = 0 NEW_LINE freqSum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT mid [ i ] = ( lower_limit [ i ] + upper_limit [ i ] ) / 2 NEW_LINE sum = sum + freq [ i ] * mid [ i ] * mid [ i ] NEW_LINE freqSum = freqSum + freq [ i ] NEW_LINE DEDENT sd = math . sqrt ( ( sum - freqSum * mean ( mid , freq , n ) * mean ( mid , freq , n ) ) / ( freqSum - 1 ) ) NEW_LINE return sd NEW_LINE DEDENT lower_limit = [ 50 , 61 , 71 , 81 , 87 , 96 ] NEW_LINE upper_limit = [ 60 , 70 , 85 , 95 , 100 ] NEW_LINE freq = [ 9 , 7 , 9 , 12 , 8 ] NEW_LINE n = len ( lower_limit ) NEW_LINE print ( plst ( lower_limit , upper_limit , freq , n ) ) NEW_LINE
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 2 NEW_LINE b = 4 NEW_LINE print ( gcd ( a , b ) ) NEW_LINE DEDENT
def rectanglearea ( a , b ) : NEW_LINE INDENT if ( a < 0 or b < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return 2 * a * b NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 10 NEW_LINE b = 8 NEW_LINE print ( rectanglearea ( a , b ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if n > a * b : NEW_LINE INDENT print ( " NO " ) NEW_LINE continue NEW_LINE DEDENT if n == a : NEW_LINE INDENT print ( " YES " ) NEW_LINE continue NEW_LINE DEDENT if ( b - a ) % ( n - a ) == 0 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def getsum ( x ) : NEW_LINE INDENT return ( x * ( x + 1 ) ) // 2 NEW_LINE DEDENT def countJumps ( n ) : NEW_LINE INDENT n = abs ( n ) NEW_LINE ans = 0 NEW_LINE while ( getsum ( ans ) < n or ( getsum ( ans ) - n ) & 1 > 0 ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 9 NEW_LINE print ( countJumps ( n ) ) NEW_LINE DEDENT
MAX = 10 NEW_LINE def lcs ( dp , arr1 , n , arr2 , m , k ) : NEW_LINE INDENT if ( k < 0 ) : NEW_LINE INDENT return - 10000000 NEW_LINE DEDENT if ( n < 0 or m < 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT ans = dp [ n ] [ m ] [ k ] NEW_LINE if ( ans != - 1 ) : NEW_LINE INDENT return ans NEW_LINE DEDENT try : NEW_LINE INDENT ans = max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lcs ( dp , arr1 , n , arr2 , m - 1 , k ) ) NEW_LINE if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) : NEW_LINE INDENT ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k ) ) NEW_LINE DEDENT ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m - 1 , k - 1 ) ) NEW_LINE return ans NEW_LINE DEDENT except Exception : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ans NEW_LINE DEDENT k = 1 NEW_LINE arr1 = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE arr2 = [ 5 , 3 , 1 , 4 , 2 ] NEW_LINE n = len ( arr1 ) NEW_LINE m = len ( arr2 ) NEW_LINE dp = [ [ - 1 for i in range ( MAX ) ] for j in range ( MAX ) ] NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT for j in range ( MAX ) : NEW_LINE INDENT for l in range ( MAX ) : NEW_LINE INDENT dp [ i ] [ j ] = - 1 NEW_LINE DEDENT DEDENT DEDENT print ( lcs ( dp , arr1 , n , arr2 , m , k ) ) NEW_LINE
n , d , x = map ( int , input ( ) . split ( ) ) NEW_LINE i = 2 NEW_LINE a = 0 NEW_LINE while d > 1 and x > 1 : NEW_LINE INDENT a += i * ( d / 2 ) NEW_LINE d = d - x NEW_LINE i += 1 NEW_LINE DEDENT a += ( n - 1 ) * d NEW_LINE print ( a ) NEW_LINE
def reverseorder ( n ) : NEW_LINE INDENT prime = [ True ] * ( n + 1 ) NEW_LINE p = 2 NEW_LINE while ( p * p <= n ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT i = p * 2 NEW_LINE while ( i <= n ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE i += p NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT if ( prime [ i ] == True ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT DEDENT N = 25 NEW_LINE print ( " Prime number in reverse order " ) NEW_LINE if ( N == 1 ) : NEW_LINE INDENT print ( " No prime no exist in this range " ) NEW_LINE DEDENT else : NEW_LINE INDENT reverseorder ( N ) NEW_LINE DEDENT
def pattern ( min_stars , p_height ) : NEW_LINE INDENT p_space = p_height - 1 NEW_LINE x = 1 NEW_LINE for i in range ( 1 , p_height ) : NEW_LINE INDENT for j in range ( p_space , i , - 1 ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT for k in range ( min_stars ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT for n in range ( p_height + p_height - 2 , - 1 , - 1 ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT for k in range ( min_stars ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT min_stars = min_stars + 2 NEW_LINE x = x + 2 NEW_LINE print ( " " ) NEW_LINE DEDENT DEDENT min_stars = 1 NEW_LINE p_height = 5 NEW_LINE pattern ( min_stars , p_height ) NEW_LINE
n = int ( input ( ) ) NEW_LINE v = [ 0 for i in range ( 367 ) ] NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT t , a , b = input ( ) . split ( ) NEW_LINE a = int ( a ) NEW_LINE b = int ( b ) NEW_LINE if t == ' M ' : NEW_LINE INDENT v [ a - 1 ] += 1 NEW_LINE DEDENT elif t == ' L ' : NEW_LINE INDENT v [ a - 1 ] -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT v [ a - 1 ] += 1 NEW_LINE DEDENT if v [ a - 1 ] > v [ b - 1 ] : NEW_LINE INDENT ans = max ( ans , v [ a - 1 ] ) NEW_LINE DEDENT DEDENT print ( ans * 2 ) NEW_LINE
def distancesum ( x , y , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) ) NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT x = [ - 1 , 1 , 3 , 2 ] NEW_LINE y = [ 5 , 6 , 5 , 3 ] NEW_LINE n = len ( x ) NEW_LINE print ( distancesum ( x , y , n ) ) NEW_LINE
from math import sqrt , pow NEW_LINE def fib ( n ) : NEW_LINE INDENT phi = ( 1 + sqrt ( 5 ) ) / 2 ; NEW_LINE return round ( pow ( phi , n ) / sqrt ( 5 ) ) ; NEW_LINE DEDENT def calculateSum ( l , r ) : NEW_LINE INDENT sum = fib ( r + 2 ) - fib ( l + 1 ) ; NEW_LINE return sum ; NEW_LINE DEDENT def sumFibonacci ( k ) : NEW_LINE INDENT l = ( k * ( k - 1 ) ) / 2 ; NEW_LINE r = l + k ; NEW_LINE sum = calculateSum ( l , r - 1 ) ; NEW_LINE return sum ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT k = 3 ; NEW_LINE print ( sumFibonacci ( k ) ) ; NEW_LINE DEDENT
from math import sqrt , ceil , floor NEW_LINE def fib ( n ) : NEW_LINE INDENT phi = ( 1 + ceil ( sqrt ( 5 ) ) ) / 2 ; NEW_LINE return round ( pow ( phi , n ) / sqrt ( 5 ) ) ; NEW_LINE DEDENT def calculateSum ( l , r ) : NEW_LINE INDENT sum = 0 ; NEW_LINE for i in range ( l , r + 1 ) : NEW_LINE INDENT sum += fib ( i ) ; NEW_LINE DEDENT return sum ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT l = 4 ; r = 8 ; NEW_LINE print ( calculateSum ( l , r ) ) ; NEW_LINE DEDENT
from math import sqrt , ceil , floor NEW_LINE def fib ( n ) : NEW_LINE INDENT phi = ( 1 + ceil ( sqrt ( 5 ) ) ) / 2 NEW_LINE return round ( pow ( phi , n ) / sqrt ( 5 ) ) NEW_LINE DEDENT def calculateSum ( l , r ) : NEW_LINE INDENT sum = fib ( r + 2 ) - fib ( l + 1 ) NEW_LINE return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT l = 4 NEW_LINE r = 8 NEW_LINE print ( calculateSum ( l , r ) ) NEW_LINE DEDENT
n , q = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT l , r , c1 , c2 = map ( str , input ( ) . split ( ) ) NEW_LINE if l - 1 == r - 1 : NEW_LINE INDENT print ( c1 ) NEW_LINE DEDENT else : NEW_LINE INDENT c1 = c1 + c2 NEW_LINE c2 = c2 + c1 NEW_LINE print ( " " . join ( map ( str , range ( l - 1 , r ) ) ) ) NEW_LINE DEDENT DEDENT
def compareStrings ( str1 , str2 ) : NEW_LINE INDENT i = 0 NEW_LINE while ( i < len ( str1 ) - 1 and str1 [ i ] == str2 [ i ] ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if ( str1 [ i ] > str2 [ i ] ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if ( str1 [ i ] < str2 [ i ] ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT def searchStr ( arr , str , first , last ) : NEW_LINE INDENT if ( first > last ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( last + first ) // 2 NEW_LINE if ( arr [ mid ] == 0 ) : NEW_LINE INDENT left = mid - 1 NEW_LINE right = mid + 1 NEW_LINE while ( True ) : NEW_LINE INDENT if ( left < right and right > last ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if ( right <= last and not arr [ right ] == 0 ) : NEW_LINE INDENT mid = right NEW_LINE break NEW_LINE DEDENT if ( left >= right and not arr [ right ] == 0 ) : NEW_LINE INDENT mid = left NEW_LINE break NEW_LINE DEDENT right += 1 NEW_LINE left -= 1 NEW_LINE DEDENT DEDENT if ( compareStrings ( str , arr [ mid ] ) == 0 ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( compareStrings ( str , arr [ mid ] ) < 0 ) : NEW_LINE INDENT return searchStr ( arr , str , mid + 1 , last ) NEW_LINE DEDENT return searchStr ( arr , str , first , mid - 1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ " for " , " , " , " , " , " , " geeks " , " ide " , " , " " , " practice " , " " , " " , " freq " , " , " " , " 101 " , " , " " ] NEW_LINE str = " 101 " NEW_LINE n = len ( arr ) NEW_LINE print ( searchStr ( arr , str , 0 , n - 1 ) ) NEW_
def f ( n ) : NEW_LINE INDENT n = str ( n ) NEW_LINE if n == n [ : : - 1 ] : return 1 NEW_LINE DEDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE ans = 0 NEW_LINE while True : NEW_LINE INDENT if f ( b ) : print ( a ) ; break NEW_LINE a += b NEW_LINE b = b // 10 NEW_LINE if f ( a ) : print ( b ) ; break NEW_LINE DEDENT
a = input ( ) . split ( ) NEW_LINE a1 = int ( a [ 0 ] ) NEW_LINE a2 = int ( a [ 1 ] ) NEW_LINE a3 = int ( a [ 2 ] ) NEW_LINE a4 = int ( a [ 3 ] ) NEW_LINE b = [ a1 , a2 , a3 ] NEW_LINE if a1 == a2 : NEW_LINE INDENT print ( 3 , b [ 0 ] ) NEW_LINE DEDENT elif a1 == a3 : NEW_LINE INDENT print ( 3 , b [ 1 ] ) NEW_LINE DEDENT elif a1 == a2 : NEW_LINE INDENT print ( 3 , b [ 0 ] ) NEW_LINE DEDENT elif a1 == a3 : NEW_LINE INDENT print ( 3 , b [ 2 ] ) NEW_LINE DEDENT elif a1 == a4 : NEW_LINE INDENT print ( 3 , b [ 0 ] ) NEW_LINE DEDENT elif a1 == a3 : NEW_LINE INDENT print ( 3 , a [ 2 ] ) NEW_LINE DEDENT elif a1 == a4 : NEW_LINE INDENT print ( 3 , b [ 2 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 3 , a [ 0 ] ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = " " NEW_LINE c = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] not in ans : NEW_LINE INDENT ans += s [ i ] NEW_LINE c += 1 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE DEDENT
def sumAP ( n , d ) : NEW_LINE INDENT n = int ( n / d ) NEW_LINE return ( n ) * ( 1 + n ) * d / 2 NEW_LINE DEDENT def sumMultiples ( n ) : NEW_LINE INDENT n -= 1 NEW_LINE return ( sumAP ( n , 2 ) + sumAP ( n , 5 ) - sumAP ( n , 10 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 20 NEW_LINE print ( sumMultiples ( n ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT m = int ( input ( ) ) NEW_LINE l = [ int ( x ) for x in input ( ) . split ( " " ) ] NEW_LINE s = 0 NEW_LINE for j in range ( m ) : NEW_LINE INDENT s += l [ j ] - l [ j ] NEW_LINE DEDENT if s >= m : NEW_LINE INDENT print ( " OK " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( s ) NEW_LINE DEDENT DEDENT
def fact ( num ) : NEW_LINE INDENT fact = 1 NEW_LINE while ( num > 1 ) : NEW_LINE INDENT fact *= num NEW_LINE num -= 1 NEW_LINE DEDENT return fact NEW_LINE DEDENT def catalan ( n ) : NEW_LINE INDENT return ( fact ( 2 * n ) // ( fact ( n ) * fact ( n + 1 ) ) ) NEW_LINE DEDENT n = 5 NEW_LINE arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE for k in range ( n ) : NEW_LINE INDENT s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] < arr [ k ] ) : NEW_LINE INDENT s += 1 NEW_LINE DEDENT DEDENT catalan_leftBST = catalan ( s ) NEW_LINE catalan_rightBST = catalan ( n - s - 1 ) NEW_LINE totalBST = catalan_rightBST * catalan_leftBST NEW_LINE print ( totalBST , end = " " ) NEW_LINE DEDENT
def solve ( ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if a - b == 1 : NEW_LINE INDENT return " YES " NEW_LINE DEDENT return " NO " NEW_LINE DEDENT for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT print ( solve ( ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT l = [ int ( i ) for i in input ( ) . split ( ' ' ) ] NEW_LINE d = abs ( l [ 0 ] - l [ 1 ] ) NEW_LINE if d == 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT elif ( l [ 0 ] % 2 != l [ 1 ] % 2 ) : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( d ) NEW_LINE DEDENT DEDENT
def countWays ( n , arr , Len ) : NEW_LINE INDENT count = [ 0 ] * ( n + 1 ) NEW_LINE count [ 0 ] = 1 NEW_LINE if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT no_ways = 0 NEW_LINE for j in range ( Len ) : NEW_LINE INDENT if ( i - arr [ j ] >= 0 ) : NEW_LINE INDENT no_ways += count [ i - arr [ j ] ] NEW_LINE DEDENT count [ i ] = no_ways NEW_LINE DEDENT DEDENT return count [ n ] NEW_LINE DEDENT arr = [ 1 , 3 , 5 ] NEW_LINE Len = len ( arr ) NEW_LINE n = 5 NEW_LINE print ( countWays ( n , arr , Len ) ) NEW_LINE
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE a = [ int ( input ( ) . split ( ) [ 1 ] ) for _ in range ( n ) ] NEW_LINE p = sum ( a [ 0 : : 2 ] ) NEW_LINE if p <= n : print ( a [ 0 ] ) NEW_LINE else : print ( " NA " if sum ( a [ 1 : : 2 ] ) >= n else 0 ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT a , b , c = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE f = abs ( a - b ) + abs ( b - c ) + abs ( c - a ) - 4 NEW_LINE print ( f ) NEW_LINE DEDENT
n , b , d = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] <= b : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ans > d : NEW_LINE INDENT ans = 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
def binarySearch ( arr , low , high , key ) : NEW_LINE INDENT if ( high < low ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if ( key == arr [ mid ] ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( key > arr [ mid ] ) : NEW_LINE INDENT return binarySearch ( arr , ( mid + 1 ) , high , key ) NEW_LINE DEDENT return binarySearch ( arr , low , ( mid - 1 ) , key ) NEW_LINE DEDENT arr = [ 5 , 6 , 7 , 8 , 9 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE key = 10 NEW_LINE print ( " Index : " , binarySearch ( arr , 0 , n , key ) ) NEW_LINE
def equal_xor_sum ( arr , n ) : NEW_LINE INDENT Sum = 0 NEW_LINE Xor = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT Sum = Sum + arr [ i ] NEW_LINE Xor = Xor ^ arr [ i ] NEW_LINE DEDENT if ( Sum == Xor ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 6 , 3 , 7 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE equal_xor_sum ( arr , n ) NEW_LINE DEDENT
n , m , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if k == 0 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( k ) : NEW_LINE INDENT if a [ i ] in a [ 1 : ] : NEW_LINE INDENT print ( i + 1 ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT
def findPairs ( arr , n ) : NEW_LINE INDENT cntEven = 0 ; NEW_LINE cntOdd = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT cntEven += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT cntOdd += 1 ; NEW_LINE DEDENT DEDENT evenPairs = 0 ; NEW_LINE evenPairs += ( ( cntEven * ( cntEven - 1 ) ) // 2 ) ; NEW_LINE evenPairs += ( ( cntOdd * ( cntOdd - 1 ) ) // 2 ) ; NEW_LINE oddPairs = 0 ; NEW_LINE oddPairs += ( cntEven * cntOdd ) ; NEW_LINE print ( " Odd pairs = " , oddPairs ) ; NEW_LINE print ( " Even pairs = " , evenPairs ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE findPairs ( arr , n ) ; NEW_LINE DEDENT
import sys NEW_LINE def min bestRange ( houses , towers ) : NEW_LINE INDENT n = len ( houses ) NEW_LINE m = len ( towers ) NEW_LINE leftTower = - sys . maxsize NEW_LINE j = 0 NEW_LINE k = 0 NEW_LINE min_range = 0 NEW_LINE while ( j < n ) : NEW_LINE INDENT if ( houses [ j ] < rightTower ) : NEW_LINE INDENT left = houses [ j ] - leftTower NEW_LINE right = rightTower - houses [ j ] NEW_LINE if ( left < right ) : NEW_LINE INDENT min_range = left NEW_LINE DEDENT else : NEW_LINE INDENT min_range = right NEW_LINE DEDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT leftTower = towers [ k ] NEW_LINE if ( k < m - 1 ) : NEW_LINE INDENT k += 1 NEW_LINE rightTower = towers [ k ] NEW_LINE DEDENT else : NEW_LINE INDENT rightTower = sys . maxsize NEW_LINE DEDENT DEDENT DEDENT return min_range NEW_LINE DEDENT a = [ 12 , 13 , 11 , 80 ] NEW_LINE b = [ 4 , 6 , 15 , 60 ] NEW_LINE max = min bestRange ( a , b ) NEW_LINE print ( max ) NEW_LINE
def getRemainder ( num , divisor ) : NEW_LINE INDENT return ( num - divisor * ( num // divisor ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( getRemainder ( 100 , 7 ) ) NEW_LINE DEDENT
n , m , z = map ( int , input ( ) . split ( ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( m , z + 1 ) : NEW_LINE INDENT if ( i - m ) % n == 0 : NEW_LINE INDENT for j in range ( i - m , i - 1 , - 1 ) : NEW_LINE INDENT if ( j + 1 == i ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT for j in range ( i - m , i - 1 , - 1 ) : NEW_LINE INDENT if ( j + 1 == i ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( ans ) NEW_LINE
while True : NEW_LINE INDENT m , n = map ( int , input ( ) . split ( ) ) NEW_LINE if m == n == 0 : break NEW_LINE l = [ 0 ] + list ( map ( int , input ( ) . split ( ) ) ) + [ 0 ] NEW_LINE p = [ 0 ] + list ( map ( int , input ( ) . split ( ) ) ) + [ 0 ] NEW_LINE ans = 0 NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT p [ i + 1 ] = p [ i ] + l [ i ] NEW_LINE if p [ i + 1 ] > p [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans // 2 + 1 ) NEW_LINE DEDENT
N , W = map ( int , input ( ) . split ( ) ) NEW_LINE v_min = 0 NEW_LINE v_max = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT v , w = map ( int , input ( ) . split ( ) ) NEW_LINE v_min = max ( v , w ) NEW_LINE v_max = min ( v , w ) NEW_LINE DEDENT v_sum = 0 NEW_LINE w_sum = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT v , w = map ( int , input ( ) . split ( ) ) NEW_LINE if w > v : NEW_LINE INDENT w_sum += v NEW_LINE v_max = w NEW_LINE DEDENT elif w < v_min : NEW_LINE INDENT w_sum += v_min NEW_LINE v_min = 0 NEW_LINE DEDENT DEDENT print ( sum ( v_min * w , v_max * ( w_sum / w_sum ) ) ) NEW_LINE
def isEmpty ( arr , n ) : NEW_LINE INDENT ones = 0 NEW_LINE twos = 0 NEW_LINE common_bit_mask = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT twos = twos | ( ones & arr [ i ] ) NEW_LINE ones = ones ^ arr [ i ] NEW_LINE common_bit_mask = ~ ( ones & twos ) NEW_LINE ones &= common_bit_mask NEW_LINE twos &= common_bit_mask NEW_LINE DEDENT return ones NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 3 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " The element with single occurrence is " , isEmpty ( arr , n ) ) NEW_LINE DEDENT
def maxdiff ( arr , n ) : NEW_LINE INDENT freq = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ arr [ i ] ] = freq . get ( arr [ i ] , 0 ) + 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] ) : NEW_LINE INDENT ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] ) NEW_LINE DEDENT elif ( freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] ) : NEW_LINE INDENT ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] ) NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 1 , 3 , 2 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxdiff ( arr , n ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n , m = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE f = 0 NEW_LINE m = n * m NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] < 0 : NEW_LINE INDENT if m > arr [ i ] : NEW_LINE INDENT m = arr [ i ] NEW_LINE DEDENT f += 1 NEW_LINE DEDENT elif arr [ i ] > 0 : NEW_LINE INDENT if m < arr [ i ] : NEW_LINE INDENT m = arr [ i ] NEW_LINE DEDENT DEDENT DEDENT if f % 2 == 0 : NEW_LINE INDENT print ( m ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( m * 2 ) - arr [ 0 ] ) NEW_LINE DEDENT DEDENT
def makeAP ( arr , n ) : NEW_LINE INDENT if ( n == 3 ) : NEW_LINE INDENT common_difference = arr [ 2 ] - arr [ 1 ] NEW_LINE initial_term = arr [ 1 ] - common_difference NEW_LINE DEDENT elif ( ( arr [ 1 ] - arr [ 0 ] ) == arr [ 2 ] - arr [ 1 ] ) : NEW_LINE INDENT initial_term = arr [ 0 ] NEW_LINE common_difference = arr [ 1 ] - arr [ 0 ] NEW_LINE DEDENT elif ( ( arr [ 2 ] - arr [ 1 ] ) == ( arr [ 3 ] - arr [ 2 ] ) ) : NEW_LINE INDENT common_difference = arr [ 2 ] - arr [ 1 ] NEW_LINE initial_term = arr [ 1 ] - common_difference NEW_LINE DEDENT else : NEW_LINE INDENT common_difference = ( arr [ 3 ] - arr [ 0 ] ) // 3 NEW_LINE initial_term = arr [ 0 ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( initial_term + ( i * common_difference ) , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT arr = [ 1 , 3 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE makeAP ( arr , n ) NEW_LINE
def countPairs ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for x in range ( 1 , n ) : NEW_LINE INDENT for y in range ( x + 1 , n + 1 ) : NEW_LINE INDENT if ( ( y + x ) % ( y ^ x ) == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 6 NEW_LINE print ( countPairs ( n ) ) NEW_LINE DEDENT
def countPairs ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for x in range ( 1 , n ) : NEW_LINE INDENT for y in range ( x + 1 , n + 1 ) : NEW_LINE INDENT if ( ( y * x ) % ( y + x ) == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 15 NEW_LINE print ( countPairs ( n ) ) NEW_LINE DEDENT
class Solution ( object ) : NEW_LINE INDENT def longestPalindrome ( self , s ) : NEW_LINE INDENT count = { } NEW_LINE for c in s : NEW_LINE INDENT count [ c ] = count . get ( c , 0 ) + 1 NEW_LINE DEDENT ans = 0 NEW_LINE for v in count : NEW_LINE INDENT ans += v // 2 * 2 NEW_LINE if ans % 2 == 0 and v % 2 == 1 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE s = " abccdd " NEW_LINE out = sObj . longestPalindrome ( s ) NEW_LINE print ( out ) NEW_LINE DEDENT
def binomialCoeff ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE if ( k > n - k ) : NEW_LINE INDENT k = n - k NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT res *= ( n - i ) NEW_LINE res //= ( i + 1 ) NEW_LINE DEDENT return res NEW_LINE DEDENT def catalan ( n ) : NEW_LINE INDENT c = binomialCoeff ( 2 * n , n ) NEW_LINE return c // ( n + 1 ) NEW_LINE DEDENT def findWays ( n ) : NEW_LINE INDENT if ( n & 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return catalan ( n // 2 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE print ( " Total possiblecycle of length " , n , " is " , findWays ( 6 ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE l . append ( s ) NEW_LINE DEDENT ans = ' ' NEW_LINE ans1 = ' ' NEW_LINE for j in range ( 12 ) : NEW_LINE INDENT if l [ 0 ] [ j ] == ' X ' : NEW_LINE INDENT ans += '1x12" NEW_LINE DEDENT else : NEW_LINE INDENT ans += '1x12" NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( 12 ) : NEW_LINE INDENT if l [ i ] [ j ] == ' O ' : NEW_LINE INDENT ans += '1x1 ' NEW_LINE DEDENT elif l [ i ] [ j ] == ' X ' : NEW_LINE INDENT ans += '1x1 ' NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE for i in range ( 12 ) : NEW_LINE INDENT if l [ i ] [ ans ] != ' ' : NEW_LINE INDENT ans1 += ' ' + str ( l [ i ] [ ans ] + ' x ' + str ( 12 // l [ i ] [ ans ] + 1 ) ) NEW_LINE DEDENT DEDENT print ( ans1 ) NEW_LINE
n , t , a , b , ta , tb = map ( int , input ( ) . split ( ) ) NEW_LINE p , q = map ( int , input ( ) . split ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT for j in range ( t ) : NEW_LINE INDENT if i * ta + j * tb == p : NEW_LINE INDENT print ( " YES " ) NEW_LINE exit ( 0 ) NEW_LINE DEDENT DEDENT DEDENT print ( " NO " ) NEW_LINE
def isSumOfPowersOfTwo ( n ) : NEW_LINE INDENT if ( n % 2 == 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT n = 10 NEW_LINE if ( isSumOfPowersOfTwo ( n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def countNumber ( n ) : NEW_LINE INDENT result = 0 NEW_LINE for i in range ( 1 , 10 ) : NEW_LINE INDENT s = [ ] NEW_LINE if i <= n : NEW_LINE INDENT s . append ( i ) NEW_LINE result += 1 NEW_LINE DEDENT while len ( s ) > 0 : NEW_LINE INDENT tp = s [ - 1 ] NEW_LINE s . pop ( ) NEW_LINE for j in range ( tp % 10 , 10 ) : NEW_LINE INDENT x = tp * 10 + j NEW_LINE if x <= n : NEW_LINE INDENT s . append ( x ) NEW_LINE result += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return result NEW_LINE DEDENT n = 15 NEW_LINE print ( countNumber ( n ) ) NEW_LINE
def maxAverageOfPath ( cost , N ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( N + 1 ) ] for j in range ( N + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] NEW_LINE for i in range ( 1 , N ) : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] NEW_LINE DEDENT for j in range ( 1 , N ) : NEW_LINE INDENT dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] NEW_LINE DEDENT for i in range ( 1 , N ) : NEW_LINE INDENT for j in range ( 1 , N ) : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ] NEW_LINE DEDENT DEDENT return dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) NEW_LINE DEDENT cost = [ [ 1 , 2 , 3 ] , [ 6 , 5 , 4 ] , [ 7 , 3 , 9 ] ] NEW_LINE print ( maxAverageOfPath ( cost , 3 ) ) NEW_LINE
MAX = 1000000 NEW_LINE sieve_Prime = [ 0 ] * ( MAX + 2 ) NEW_LINE sieve_count = [ 0 ] * ( MAX + 4 ) NEW_LINE def form_sieve ( ) : NEW_LINE INDENT sieve_Prime [ 1 ] = 1 NEW_LINE for i in range ( 2 , MAX + 1 ) : NEW_LINE INDENT if ( sieve_Prime [ i ] == 0 ) : NEW_LINE INDENT for j in range ( i * 2 , MAX + 1 , i ) : NEW_LINE INDENT if ( sieve_Prime [ j ] == 0 ) : NEW_LINE INDENT sieve_Prime [ j ] = 1 NEW_LINE sieve_count [ i ] += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT form_sieve ( ) NEW_LINE n = 2 NEW_LINE print ( " Count = " , sieve_count [ n ] + 1 ) NEW_LINE n = 3 NEW_LINE print ( " Count = " , sieve_count [ n ] + 1 ) NEW_LINE
n , k , t , u , v , l = map ( int , input ( ) . split ( ) ) NEW_LINE d = [ int ( input ( ) ) for i in range ( n ) ] NEW_LINE pos = 0 NEW_LINE n -= 1 NEW_LINE ans = 0 NEW_LINE while pos < l : NEW_LINE INDENT ans += ( v - pos ) / v NEW_LINE pos = d [ pos ] NEW_LINE k -= 1 NEW_LINE while k >= 0 and pos < l : NEW_LINE INDENT k -= 1 NEW_LINE ans += ( v - pos ) / v NEW_LINE pos = d [ k ] NEW_LINE DEDENT ans += ( l - pos ) / v NEW_LINE pos = d [ pos ] NEW_LINE DEDENT print ( ans ) NEW_LINE
def waysToSplit ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE answer = 0 NEW_LINE prefix = [ 0 ] * n NEW_LINE suffix = [ 0 ] * n NEW_LINE seen = [ 0 ] * 26 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 ) : NEW_LINE INDENT prefix [ i ] += ( prev + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT prefix [ i ] = prev NEW_LINE DEDENT seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] = 1 NEW_LINE DEDENT for i in range ( 26 ) : NEW_LINE INDENT seen [ i ] = 0 NEW_LINE DEDENT suffix [ n - 1 ] = 0 NEW_LINE for i in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT prev = suffix [ i ] NEW_LINE if ( seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 ) : NEW_LINE INDENT suffix [ i - 1 ] += ( prev + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT suffix [ i - 1 ] = prev NEW_LINE DEDENT seen [ ord ( s [ i ] ) - ord ( ' a ' ) ] = 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( prefix [ i ] == suffix [ i ] ) : NEW_LINE INDENT answer += 1 NEW_LINE DEDENT DEDENT return answer NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " ababa " NEW_LINE print ( waysToSplit ( s ) ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT TURNS = 15 NEW_LINE ways = [ 1 ] * ( TURNS + 1 ) NEW_LINE for i in range ( 1 , TURNS + 1 ) : NEW_LINE INDENT ways [ i ] = [ i + 1 ] * ( i + 1 ) NEW_LINE for j in range ( i + 1 ) : NEW_LINE INDENT temp = 0 NEW_LINE if j < i : NEW_LINE INDENT temp = ways [ i - 1 ] [ j ] * ( i ) NEW_LINE DEDENT if j > 0 : NEW_LINE INDENT temp = ( temp + ways [ i - 1 ] [ j - 1 ] ) NEW_LINE DEDENT ways [ i ] [ j ] = temp NEW_LINE DEDENT DEDENT numer = 0 NEW_LINE for i in range ( TURNS // 2 + 1 , TURNS + 1 ) : NEW_LINE INDENT numer += ways [ TURNS ] [ i ] NEW_LINE DEDENT denom = eulerlib . factorial ( TURNS + 1 ) NEW_LINE return denom // numer NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE d = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT d [ b [ i ] ] = d . get ( b [ i ] , 0 ) + 1 NEW_LINE DEDENT r = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT r = max ( r , d [ i ] ) NEW_LINE DEDENT num = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == 1 : NEW_LINE INDENT t = [ ] NEW_LINE k = 1 NEW_LINE c = 0 NEW_LINE while k == n - 1 : NEW_LINE INDENT if d [ k ] == 0 : NEW_LINE INDENT c += 1 NEW_LINE k = n NEW_LINE DEDENT else : NEW_LINE INDENT t . append ( k ) NEW_LINE break NEW_LINE DEDENT k = n - 1 NEW_LINE DEDENT d [ i ] = c NEW_LINE while k == n - 1 and d [ k ] == 0 : NEW_LINE INDENT k = n - 1 NEW_LINE if i == 0 : NEW_LINE INDENT t . append ( k ) NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT t . append ( k ) NEW_LINE break NEW_LINE DEDENT k = n - 1 NEW_LINE DEDENT DEDENT DEDENT print ( r ) NEW_LINE print ( * t ) NEW_LINE
def merge ( arr1 , m , n ) : NEW_LINE INDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT last = arr1 [ m - 1 ] NEW_LINE for j in range ( m - 2 , - 1 , - 1 ) : NEW_LINE INDENT arr1 [ j + 1 ] = arr1 [ j ] NEW_LINE DEDENT if ( j != m - 2 or last > arr2 [ i ] ) : NEW_LINE INDENT arr1 [ j + 1 ] = arr2 [ i ] NEW_LINE arr2 [ i ] = last NEW_LINE DEDENT DEDENT DEDENT def merge ( arr1 , m , n ) : NEW_LINE INDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT j = 0 NEW_LINE last = arr1 [ m - 1 ] NEW_LINE for j in range ( m - 2 , - 1 , - 1 ) : NEW_LINE INDENT arr1 [ j + 1 ] = arr1 [ j ] NEW_LINE DEDENT if ( j != m - 2 or last > arr2 [ i ] ) : NEW_LINE INDENT arr1 [ j + 1 ] = arr2 [ i ] NEW_LINE arr2 [ i ] = last NEW_LINE DEDENT DEDENT DEDENT arr1 = [ 1 , 5 , 9 , 10 , 15 , 20 ] NEW_LINE arr2 = [ 2 , 3 , 8 , 13 ] NEW_LINE n = len ( arr1 ) NEW_LINE m = len ( arr2 ) NEW_LINE merge ( arr1 , m ) NEW_LINE print ( " After O abs : " ) NEW_LINE print ( " First Array : " ) NEW_LINE print ( arr1 ) NEW_LINE print ( " Second Array : " ) NEW_LINE print ( arr2 ) NEW_LINE
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b ; NEW_LINE DEDENT return gcd ( b % a , a ) ; NEW_LINE DEDENT def sameRemainder ( a , b , c ) : NEW_LINE INDENT a1 = ( b - a ) ; NEW_LINE b1 = ( c - b ) ; NEW_LINE c1 = ( c - a ) ; NEW_LINE return gcd ( a1 , gcd ( b1 , c1 ) ) ; NEW_LINE DEDENT a = 62 ; NEW_LINE b = 132 ; NEW_LINE c = 237 ; NEW_LINE print ( sameRemainder ( a , b , c ) ) ; NEW_LINE
a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE print ( min ( max ( a , b , c ) - max ( a , b , c ) + d , 0 ) ) NEW_LINE
dp = [ [ [ - 1 for i in range ( 5 ) ] for j in range ( 5001 ) ] for k in range ( 5001 ) ] NEW_LINE def countWaysUtil ( n , parts , nextPart ) : NEW_LINE INDENT if ( parts == 0 and n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( n <= 0 or parts <= 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( dp [ n ] [ nextPart ] [ parts ] != - 1 ) : NEW_LINE INDENT return dp [ n ] [ nextPart ] [ parts ] NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( nextPart , n + 1 ) : NEW_LINE INDENT ans += countWaysUtil ( n - i , parts - 1 , i ) NEW_LINE DEDENT dp [ n ] [ nextPart ] [ parts ] = ans NEW_LINE return dp [ n ] [ nextPart ] [ parts ] NEW_LINE DEDENT def countWays ( n ) : NEW_LINE INDENT for i in range ( 5001 ) : NEW_LINE INDENT for j in range ( 5001 ) : NEW_LINE INDENT for l in range ( 5 ) : NEW_LINE INDENT dp [ i ] [ j ] [ l ] = - 1 NEW_LINE DEDENT DEDENT DEDENT return countWaysUtil ( n , 4 , 1 ) NEW_LINE DEDENT n = 8 NEW_LINE print ( countWays ( n ) ) NEW_LINE
def find_k ( a , b ) : NEW_LINE INDENT if ( ( a + b ) % 2 == 0 ) : NEW_LINE INDENT return ( ( a + b ) // 2 ) NEW_LINE DEDENT return - 1 NEW_LINE DEDENT a = 2 NEW_LINE b = 16 NEW_LINE print ( find_k ( a , b ) ) NEW_LINE
N = 101 NEW_LINE mod = 10 ** 9 + 7 NEW_LINE def exactsum ( i , j , k ) : NEW_LINE INDENT return ( exactsum ( i - 1 , j , k ) * 10 + 4 * exactnum ( i - 1 , j , k ) ) % mod NEW_LINE DEDENT def getSum ( x , y , z ) : NEW_LINE INDENT ans = 0 NEW_LINE exactsum ( i , j , k ) NEW_LINE for i in range ( 1 , x + 1 ) : NEW_LINE INDENT for j in range ( 1 , y + 1 ) : NEW_LINE INDENT for k in range ( 1 , z + 1 ) : NEW_LINE INDENT if ( i > 0 ) : NEW_LINE INDENT exactsum ( i , j , k ) += ( exactsum ( i - 1 , j , k ) * 10 + 4 * exactnum ( i - 1 , j , k ) ) % mod NEW_LINE exactnum ( i , j , k ) += exactnum ( i - 1 , j , k ) [ k - 1 ] NEW_LINE DEDENT if ( j > 0 ) : NEW_LINE INDENT exactsum ( i , j , k ) += ( exactsum ( i , j - 1 , k ) * 10 + 5 * exactnum ( i - 1 , j - 1 ) ) % mod NEW_LINE exactnum ( i , j , k ) += exactnum ( i , j - 1 , k ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT i = 1 NEW_LINE y = 1 NEW_LINE z = 1 NEW_LINE print ( getSum ( i , y , z ) % mod ) NEW_LINE
def isValidString ( str ) : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT i , freq1 , count_freq1 = 0 , 0 , 0 NEW_LINE for i in range ( CHARS ) : NEW_LINE INDENT if ( freq [ i ] != 0 ) : NEW_LINE INDENT freq1 = freq [ i ] NEW_LINE count_freq1 = 1 NEW_LINE break NEW_LINE DEDENT DEDENT j , freq2 , count_freq2 = 0 , 0 , 0 NEW_LINE for i in range ( i + 1 , CHARS ) : NEW_LINE INDENT if ( freq [ j ] != 0 ) : NEW_LINE INDENT if ( freq [ j ] == freq1 ) : NEW_LINE INDENT count_freq1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_freq2 = 1 NEW_LINE freq2 = freq [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT for j in range ( j + 1 , CHARS ) : NEW_LINE INDENT if ( freq [ j ] != 0 ) : NEW_LINE INDENT if ( freq [ j ] == freq1 ) : NEW_LINE INDENT count_freq1 += 1 NEW_LINE DEDENT if ( freq [ j ] == freq2 ) : NEW_LINE INDENT count_freq2 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if ( count_freq1 > 1 and count_freq2 > 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " abc abc abc " NEW_LINE if ( isValidString ( str ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( 0 , t ) : NEW_LINE INDENT m = input ( ) NEW_LINE k = len ( m ) NEW_LINE a = m [ k - 1 ] NEW_LINE b = m [ k - 2 ] NEW_LINE c = m [ k - 1 ] NEW_LINE if a != b : NEW_LINE INDENT if a != c : NEW_LINE INDENT print ( m ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if b != c : NEW_LINE INDENT print ( m ) NEW_LINE DEDENT DEDENT DEDENT
def findMinimumSubsequences ( A , B ) : NEW_LINE INDENT numberOfSubsequences = 1 NEW_LINE d = len ( B ) NEW_LINE d1 = len ( A ) NEW_LINE inf = 1000000 NEW_LINE next = [ [ inf ] * 26 for i in range ( 26 ) ] NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT for j in range ( d1 ) : NEW_LINE INDENT next [ i ] [ j ] = inf NEW_LINE DEDENT DEDENT for i in range ( d1 ) : NEW_LINE INDENT next [ ord ( B [ i ] ) - ord ( ' a ' ) ] [ i ] = i NEW_LINE DEDENT for i in range ( 26 ) : NEW_LINE INDENT for j in range ( d1 - 2 , - 1 , - 1 ) : NEW_LINE INDENT if ( next [ i ] [ j ] == inf ) : NEW_LINE INDENT next [ i ] [ j ] = next [ i ] [ j + 1 ] NEW_LINE DEDENT DEDENT DEDENT pos = 0 NEW_LINE i = 0 NEW_LINE while ( i < d1 ) : NEW_LINE INDENT if ( pos == 0 and next [ ord ( A [ i ] ) - ord ( ' a ' ) ] [ pos ] == inf ) : NEW_LINE INDENT numberOfSubsequences = - 1 NEW_LINE break NEW_LINE DEDENT elif ( pos < d1 and next [ ord ( A [ i ] ) - ord ( ' a ' ) ] [ pos ] < inf ) : NEW_LINE INDENT idx = next [ ord ( A [ i ] ) - ord ( ' a ' ) ] [ pos ] + 1 NEW_LINE pos = idx NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT numberOfSubsequences += 1 NEW_LINE pos = 0 NEW_LINE DEDENT DEDENT return numberOfSubsequences NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = " aacbe " NEW_LINE B = " aceab " NEW_LINE print ( findMinimumSubsequences ( A , B ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE row = [ 0 ] * n NEW_LINE col = [ 0 ] * m NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if i == 0 or j == 0 : NEW_LINE INDENT if abs ( row [ i ] - j ) + abs ( col [ i ] - j ) > abs ( row [ i ] - j ) + abs ( col [ i ] - j ) : NEW_LINE INDENT row [ i ] , col [ i ] = row [ i ] , col [ i ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if abs ( row [ i ] - j ) + abs ( col [ i ] - j ) > abs ( row [ i ] - j ) + abs ( col [ i ] - j ) : NEW_LINE INDENT row [ i ] , col [ i ] = row [ i ] , col [ i ] NEW_LINE DEDENT DEDENT DEDENT DEDENT max_val = max ( row ) NEW_LINE max_val = max ( col ) NEW_LINE for r in row : NEW_LINE INDENT for k in col : NEW_LINE INDENT max_val = max ( max_val , abs ( r ) + abs ( k ) ) NEW_LINE DEDENT DEDENT print ( * max_val ) NEW_LINE DEDENT
def FindRank ( arr , length ) : NEW_LINE INDENT print ( 1 , end = " " ) NEW_LINE for i in range ( 1 , length ) : NEW_LINE INDENT rank = 1 NEW_LINE for j in range ( i ) : NEW_LINE INDENT if ( arr [ j ] > arr [ i ] ) : NEW_LINE INDENT rank += 1 NEW_LINE DEDENT DEDENT print ( rank , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 88 , 14 , 69 , 30 , 29 , 89 ] NEW_LINE length = len ( arr ) NEW_LINE FindRank ( arr , length ) NEW_LINE DEDENT
n , h = map ( int , input ( ) . split ( ) ) NEW_LINE a = [ ] NEW_LINE b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT at , bt , = map ( int , input ( ) . split ( ) ) NEW_LINE a . append ( at ) NEW_LINE b . append ( bt ) NEW_LINE DEDENT c = sorted ( zip ( a , b ) ) NEW_LINE ans = 10 ** 9 NEW_LINE for ( s , t ) in c : NEW_LINE INDENT while h >= bt : NEW_LINE INDENT h -= bt [ t ] [ 1 ] NEW_LINE ans = min ( ans , ( h + bt [ t + 1 ] [ 0 ] - 1 ) // bt [ t ] [ 1 ] ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def firstkdigits ( n , k ) : NEW_LINE INDENT product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT product *= n NEW_LINE DEDENT while product // pow ( 10 , k ) != 0 : NEW_LINE INDENT product = product // 10 NEW_LINE DEDENT return product NEW_LINE DEDENT n = 15 NEW_LINE k = 4 NEW_LINE print ( firstkdigits ( n , k ) ) NEW_LINE
import sys NEW_LINE def solve ( m , n ) : NEW_LINE INDENT l = 0 NEW_LINE r = m NEW_LINE while r != 0 : NEW_LINE INDENT m = m % r NEW_LINE l = r NEW_LINE r = m NEW_LINE DEDENT return l NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT m , n = map ( int , input ( ) . split ( ) ) NEW_LINE ans = solve ( m , n ) NEW_LINE print ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
s = input ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT a = ord ( s [ i ] ) - ord ( ' a ' ) NEW_LINE ans += ( a % 2 + min ( a , key = lambda x : ( x - 1 ) % 2 , key = lambda x : ( x - 1 ) % 2 ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def complement ( num ) : NEW_LINE INDENT l = 0 NEW_LINE temp = num NEW_LINE while ( True ) : NEW_LINE INDENT l += 1 NEW_LINE num = num // 10 NEW_LINE if ( abs ( num ) == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT num = temp NEW_LINE comp = pow ( 10 , l ) - num NEW_LINE return comp NEW_LINE DEDENT print ( complement ( 25 ) ) NEW_LINE print ( complement ( 456 ) ) NEW_LINE
def countUnsetBits ( n ) : NEW_LINE INDENT x = n NEW_LINE n |= n >> 1 NEW_LINE n |= n >> 2 NEW_LINE n |= n >> 4 NEW_LINE n |= n >> 8 NEW_LINE n |= n >> 16 NEW_LINE return int ( bin ( x ^ n ) . count ( '1' ) ) NEW_LINE DEDENT n = 17 NEW_LINE print ( countUnsetBits ( n ) ) NEW_LINE
def minOperations ( arr , n ) : NEW_LINE INDENT result = 0 NEW_LINE freq = [ 0 for i in range ( 1000001 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = arr [ i ] NEW_LINE freq [ x ] += 1 NEW_LINE DEDENT maxi = max ( arr ) NEW_LINE for i in range ( 1 , maxi + 1 ) : NEW_LINE INDENT if ( freq [ i ] != 0 ) : NEW_LINE INDENT for j in range ( i * 2 , maxi + 1 , i ) : NEW_LINE INDENT freq [ j ] = 0 NEW_LINE DEDENT result += 1 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 4 , 2 , 4 , 4 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minOperations ( arr , n ) ) NEW_LINE DEDENT
def totalWays ( N , M , X ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( 2 ) ] for i in range ( N + 1 ) ] NEW_LINE if ( X == 1 ) : NEW_LINE INDENT dp [ 0 ] [ 0 ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ 0 ] [ 1 ] = 0 NEW_LINE DEDENT if ( X == 1 ) : NEW_LINE INDENT dp [ 1 ] [ 0 ] = 0 NEW_LINE dp [ 1 ] [ 1 ] = M - 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ 1 ] [ 0 ] = 1 NEW_LINE dp [ 1 ] [ 1 ] = ( M - 2 ) NEW_LINE DEDENT for i in range ( 2 , N ) : NEW_LINE INDENT dp [ i ] [ 0 ] = dp [ i - 1 ] [ 1 ] NEW_LINE dp [ i ] [ 1 ] = dp [ i - 1 ] [ 0 ] * ( M - 1 ) + dp [ i - 1 ] [ 1 ] * ( M - 2 ) NEW_LINE DEDENT return dp [ N - 1 ] [ 0 ] NEW_LINE DEDENT N = 4 NEW_LINE M = 3 NEW_LINE X = 2 NEW_LINE print ( totalWays ( N , M , X ) ) NEW_LINE
def getMinNum ( a , b , c ) : NEW_LINE INDENT if c < a or c > b : NEW_LINE INDENT return c NEW_LINE DEDENT x = ( ( b // c ) * c ) + c NEW_LINE return x NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a , b , c = 2 , 4 , 4 NEW_LINE print ( getMinNum ( a , b , c ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE I = s . count ( " I " ) NEW_LINE if ( I > n ) : NEW_LINE INDENT n = I NEW_LINE DEDENT print ( n ) NEW_LINE
while True : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE total = 0 NEW_LINE while n : NEW_LINE INDENT d , p = map ( int , input ( ) . split ( ) ) NEW_LINE if d == 0 : NEW_LINE INDENT total += p NEW_LINE n = 0 NEW_LINE DEDENT elif d > 0 : NEW_LINE INDENT total += p NEW_LINE n -= d NEW_LINE DEDENT else : NEW_LINE INDENT total += d NEW_LINE m -= d NEW_LINE DEDENT DEDENT print ( total ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE b = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE a . sort ( ) NEW_LINE b . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ n - i - 1 ] -= b [ i ] NEW_LINE DEDENT j_a = [ ] NEW_LINE j_b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT j_a . append ( a [ - 1 ] + j_a [ i ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT j_b . append ( b [ - 1 ] + j_b [ i ] ) NEW_LINE DEDENT a . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT j_b . append ( a [ - 1 ] - j_b [ i ] ) NEW_LINE DEDENT ans = a [ 0 ] + a [ 1 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans = max ( ans , j_a [ i ] ) NEW_LINE DEDENT for i in range ( n + 1 ) : NEW_LINE INDENT j_b [ i + 1 ] -= b [ i ] NEW_LINE DEDENT for i in range ( n + 1 ) : NEW_LINE INDENT ans = max ( ans , j_b [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE
arr = [ 1 , 5 , 6 ] NEW_LINE def countWays ( N ) : NEW_LINE INDENT count = [ 0 ] * ( N + 1 ) NEW_LINE count [ 0 ] = 1 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT for j in range ( len ( arr ) ) : NEW_LINE INDENT if ( i >= arr [ j ] ) : NEW_LINE INDENT count [ i ] += count [ i - arr [ j ] ] NEW_LINE DEDENT DEDENT DEDENT return count [ N ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 7 NEW_LINE print ( " Total number of ways = " , countWays ( N ) ) NEW_LINE DEDENT
def numberOfWays ( x ) : NEW_LINE INDENT if ( x == 0 or x == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) NEW_LINE DEDENT DEDENT x = 3 NEW_LINE print ( numberOfWays ( x ) ) NEW_LINE
def countFreq ( a , n ) : NEW_LINE INDENT hm = [ 0 for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT hm [ a [ i ] ] += 1 NEW_LINE DEDENT cumul = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT cumul += hm [ a [ i ] ] NEW_LINE if ( hm [ a [ i ] ] != 0 ) : NEW_LINE INDENT print ( a [ i ] , " - > " , cumul ) NEW_LINE DEDENT hm [ a [ i ] ] = 0 NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 1 , 3 , 2 , 4 , 2 , 1 ] NEW_LINE n = len ( a ) NEW_LINE countFreq ( a , n ) NEW_LINE DEDENT
def possibleTripletInRange ( L , R ) : NEW_LINE INDENT flag = False NEW_LINE possibleA = 0 NEW_LINE possibleB = 0 NEW_LINE possibleC = 0 NEW_LINE numbersInRange = ( R - L + 1 ) NEW_LINE if ( numbersInRange < 3 ) : NEW_LINE INDENT flag = False NEW_LINE DEDENT elif ( numbersInRange > 3 ) : NEW_LINE INDENT flag = True NEW_LINE if ( L % 2 > 0 ) : NEW_LINE INDENT L += 1 NEW_LINE DEDENT possibleA = L NEW_LINE possibleB = L + 1 NEW_LINE possibleC = L + 2 NEW_LINE DEDENT else : NEW_LINE INDENT if ( not ( L % 2 ) ) : NEW_LINE INDENT flag = True NEW_LINE possibleA = L NEW_LINE possibleB = L + 1 NEW_LINE possibleC = L + 2 NEW_LINE DEDENT else : NEW_LINE INDENT flag = False NEW_LINE DEDENT DEDENT if ( flag == True ) : NEW_LINE INDENT print ( " ( " , possibleA , " , " , possibleB , " , " , possibleC , " ) is one such possible triplet between " , L , " and " , R ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No such Triplet exists between " , L , " and " , R ) NEW_LINE DEDENT DEDENT L = 2 NEW_LINE R = 10 NEW_LINE possibleTripletInRange ( L , R ) NEW_LINE L = 23 NEW_LINE R = 46 NEW_LINE possibleTripletInRange ( L , R ) NEW_LINE
alphabets = " abcdefghijklmnopqrstuvwxyz " ; NEW_LINE deflass ( charSet , str1 ) : NEW_LINE INDENT s2 = " " ; NEW_LINE for i in range ( len ( str1 ) ) : NEW_LINE INDENT s2 += alphabets [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] ; NEW_LINE DEDENT return s2 ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT charSet = " qwertyuiopasdfghjklzxcvbnm " ; NEW_LINE str1 = " egrt " ; NEW_LINE print (lass ( charSet , str1 ) ) ; NEW_LINE DEDENT
def generateNumber ( count , a , n , num , k ) : NEW_LINE INDENT if ( count == k ) : NEW_LINE INDENT set . add ( num ) NEW_LINE return NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT generateNumber ( count + 1 , a , n , num + a [ i ] , k ) NEW_LINE DEDENT DEDENT def printDistinctIntegers ( k , a , n ) : NEW_LINE INDENT generateNumber ( 0 , a , n , 0 , k ) NEW_LINE print ( " The " , len ( set ) , " distinct flag are : " ) NEW_LINE print ( ) NEW_LINE for i in sorted ( set ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 3 , 8 , 17 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE printDistinctIntegers ( k , arr , n ) NEW_LINE DEDENT
def product ( x ) : NEW_LINE INDENT prod = 1 NEW_LINE while ( x > 0 ) : NEW_LINE INDENT prod *= ( x % 10 ) NEW_LINE x //= 10 NEW_LINE DEDENT return prod NEW_LINE DEDENT def findNumber ( l , r ) : NEW_LINE INDENT b = str ( r ) NEW_LINE ans = r NEW_LINE for i in range ( len ( b ) ) : NEW_LINE INDENT if ( b [ i ] == '0' ) : NEW_LINE INDENT continue NEW_LINE DEDENT curr = b NEW_LINE curr [ i ] = chr ( ( ord ( curr [ i ] ) - ord ( '0' ) ) + 1 ) + chr ( ord ( '0' ) ) NEW_LINE for j in range ( i + 1 , len ( curr ) ) : NEW_LINE INDENT curr [ j ] = '9' NEW_LINE DEDENT num = 0 NEW_LINE for j in range ( len ( curr ) ) : NEW_LINE INDENT num = num * 10 + ( ord ( curr [ j ] ) - ord ( '0' ) ) NEW_LINE DEDENT if ( num >= l and product ( ans ) < product ( num ) ) : NEW_LINE INDENT ans = num NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT l = 1 NEW_LINE r = 10 NEW_LINE print ( findNumber ( l , r ) ) NEW_LINE l = 51 NEW_LINE r = 62 NEW_LINE print ( findNumber ( l , r ) ) NEW_LINE
MAX = 100005 NEW_LINE isPrime = [ 0 for i in range ( MAX ) ] NEW_LINE def sieveOfEratosthenes ( ) : NEW_LINE INDENT isPrime [ 1 ] = 1 NEW_LINE for i in range ( 2 , int ( MAX ** ( 1 / 2 ) ) ) : NEW_LINE INDENT if not isPrime [ i ] : NEW_LINE INDENT for j in range ( 2 * i , MAX , i ) : NEW_LINE INDENT isPrime [ j ] = 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT def findPrime ( n ) : NEW_LINE INDENT num = n + 1 NEW_LINE while ( num ) : NEW_LINE INDENT if not isPrime [ num ] : NEW_LINE INDENT return num NEW_LINE DEDENT num = num + 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT def minNumber ( arr , n ) : NEW_LINE INDENT sieveOfEratosthenes ( ) NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT if not isPrime [ sum ] : NEW_LINE INDENT return 0 NEW_LINE DEDENT num = findPrime ( sum ) NEW_LINE return num - sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 4 , 6 , 8 , 12 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minNumber ( arr , n ) ) NEW_LINE DEDENT
MAX = 25 NEW_LINE def getMinSum ( arr , n ) : NEW_LINE INDENT bits_count = [ 0 for i in range ( MAX ) ] NEW_LINE max_bit = 0 NEW_LINE sum = 0 NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT e = arr [ i ] NEW_LINE f = 0 NEW_LINE while ( e > 0 ) : NEW_LINE INDENT rem = e % 2 NEW_LINE e = e // 2 NEW_LINE if ( rem == 1 ) : NEW_LINE INDENT bits_count [ f ] += rem NEW_LINE DEDENT f += 1 NEW_LINE DEDENT max_bit = max ( max_bit , f ) NEW_LINE DEDENT for i in range ( max_bit ) : NEW_LINE INDENT temp = pow ( 2 , i ) NEW_LINE if ( bits_count [ i ] > n // 2 ) : NEW_LINE INDENT ans = ans + temp NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = arr [ i ] ^ ans NEW_LINE sum = sum + arr [ i ] NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 5 , 7 , 11 , 15 ] NEW_LINE n = len ( arr ) NEW_LINE print ( getMinSum ( arr , n ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 0 NEW_LINE while i < n and s [ i ] == ' . ' : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if i > n : NEW_LINE INDENT print ( " Impossible " ) NEW_LINE exit ( ) NEW_LINE DEDENT if s [ i ] == ' . ' : NEW_LINE INDENT if s [ i - 1 ] != ' ! ' : NEW_LINE INDENT print ( i - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT elif s [ i ] == ' ? ' : NEW_LINE INDENT if i - 1 > 0 and s [ i - 1 ] == ' ! ' : NEW_LINE INDENT print ( i - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT t = i NEW_LINE i = 0 NEW_LINE while i < n and s [ i ] != ' ? ' : NEW_LINE INDENT i += 1 NEW_LINE DEDENT if i == n : NEW_LINE INDENT t += 1 NEW_LINE DEDENT print ( t ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE g = [ [ ] for i in range ( n ) ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if a [ i ] != i + 1 : NEW_LINE INDENT g [ i ] . append ( a [ i ] ) NEW_LINE g [ i + 1 ] . append ( i + 1 ) NEW_LINE DEDENT DEDENT if a [ n - 1 ] != n - 1 : NEW_LINE INDENT g [ n - 1 ] . append ( n - 1 ) NEW_LINE DEDENT print ( 0 ) NEW_LINE l = [ ] NEW_LINE while l : NEW_LINE INDENT a = l . pop ( ) NEW_LINE for j in g [ a ] : NEW_LINE INDENT if l . count ( j ) > 0 : NEW_LINE INDENT l . append ( j ) NEW_LINE DEDENT DEDENT DEDENT print ( l [ 0 ] ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT print ( l [ i ] , end = " " ) NEW_LINE DEDENT print ( l [ - 1 ] ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = a . copy ( ) NEW_LINE b . sort ( ) NEW_LINE ans = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT x = a [ j ] - 1 NEW_LINE if x > 0 : NEW_LINE INDENT ans += x NEW_LINE DEDENT DEDENT for j in range ( m ) : NEW_LINE INDENT y = b [ j ] - 1 NEW_LINE if y > 0 : NEW_LINE INDENT ans += y NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def findMaximumNum ( arr , n ) : NEW_LINE INDENT for i in range ( n , - 1 , - 1 ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( i <= arr [ j ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if ( count >= i ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 8 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaximumNum ( arr , n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT s = input ( ) NEW_LINE q = int ( input ( ) ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT query = input ( ) NEW_LINE if ( query [ 0 ] == ' p ' ) : NEW_LINE INDENT temp = query [ 1 : ] NEW_LINE DEDENT else : NEW_LINE INDENT temp = query [ 2 : ] NEW_LINE DEDENT if ( query [ 0 ] == ' rev ' ) : NEW_LINE INDENT temp = query [ 1 : ] NEW_LINE DEDENT else : NEW_LINE INDENT temp = query [ 2 : ] NEW_LINE DEDENT print ( temp ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
import sys NEW_LINE def solve ( A , n ) : NEW_LINE INDENT dp = [ [ sys . maxsize ] * 2000 for i in range ( 2000 ) ] NEW_LINE flag = 1 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += A [ i ] NEW_LINE DEDENT for i in range ( - sum , sum + 1 ) : NEW_LINE INDENT dp [ 0 ] [ i ] = 0 NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( sum + 1 ) : NEW_LINE INDENT dp [ flag ] [ j ] = sys . maxsize NEW_LINE if ( j - A [ i - 1 ] <= sum and j - A [ i - 1 ] >= - sum ) : NEW_LINE INDENT dp [ flag ] [ j ] = dp [ flag ^ 1 ] [ j - A [ i - 1 ] ] NEW_LINE DEDENT if ( j + A [ i - 1 ] <= sum and j + A [ i - 1 ] >= - sum and dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] != sys . maxsize ) : NEW_LINE INDENT dp [ flag ] [ j ] = min ( dp [ flag ] [ j ] , dp [ flag ^ 1 ] [ j + A [ i - 1 ] ] + 1 ) NEW_LINE DEDENT DEDENT flag = flag ^ 1 NEW_LINE DEDENT for i in range ( 0 , sum + 1 ) : NEW_LINE INDENT if ( dp [ flag ^ 1 ] [ i ] != sys . maxsize ) : NEW_LINE INDENT return dp [ flag ^ 1 ] [ i ] NEW_LINE DEDENT DEDENT return n - 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 10 , 22 , 9 , 33 , 21 , 50 , 41 , 60 ] NEW_LINE n = len ( arr ) NEW_LINE print ( solve ( arr , n ) ) NEW_LINE DEDENT
import sys NEW_LINE class Vector ( object ) : NEW_LINE INDENT def __init__ ( self , _from , to ) : NEW_LINE INDENT self . x = to [ 0 ] - _from [ 0 ] NEW_LINE self . y = to [ 1 ] - _from [ 1 ] NEW_LINE DEDENT def cross ( self , other : " Vector " ) -> float : NEW_LINE INDENT return self . x * other . y - self . y * other . x NEW_LINE DEDENT DEDENT for a in ( list ( map ( float , l . split ( ) ) ) for l in sys . stdin ) : NEW_LINE INDENT points = [ ( x , y ) for x , y in zip ( a [ : : 2 ] , a [ 1 : : 2 ] ) ] NEW_LINE sign = { Vector ( p2 , p3 ) . cross ( Vector ( p2 , p3 ) ) > 0 for p2 , p3 in zip ( points , points [ 1 : ] + points , points [ 2 : ] + points ) } NEW_LINE print ( " YES " if abs ( sign [ Vector ( p2 , p3 ) . cross ( p2 , p3 ) ) > 10 ** 9 else " NO " ) NEW_LINE DEDENT
def count_div ( start , end , div ) : NEW_LINE INDENT return ( ( end - 1 ) // div - ( start - 1 ) ) + 1 NEW_LINE DEDENT def calc_start ( m , n ) : NEW_LINE INDENT div_start = { } NEW_LINE for i in range ( m ) : NEW_LINE INDENT start = { } NEW_LINE start [ i ] = ' Fizz ' if i % 15 == 0 else ' Buzz ' if i % 3 == 0 else ' Fizz ' if i % 5 == 0 else ' Buzz ' NEW_LINE div_start [ i ] = start NEW_LINE DEDENT return start NEW_LINE DEDENT while True : NEW_LINE INDENT m , n = map ( int , input ( ) . split ( ) ) NEW_LINE if m == n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT fizz_start = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE fizz_start [ s ] = count_div ( s , m ) NEW_LINE DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if calc_start ( i , m ) == count_div ( i + 1 , m ) : NEW_LINE INDENT print ( calc_start ( i , m ) + 1 ) NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT if calc_start ( i , m ) == count_div ( i + 1 , m ) : NEW_LINE INDENT print ( calc_start ( i , m ) + 1 ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT
l = [ [ 0 for i in range ( 1001 ) ] for j in range ( 1001 ) ] NEW_LINE def initialize ( ) : NEW_LINE INDENT l [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , 1001 ) : NEW_LINE INDENT l [ i ] [ 0 ] = 1 NEW_LINE for j in range ( 1 , i + 1 ) : NEW_LINE INDENT l [ i ] [ j ] = ( l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT def nCr ( n , r ) : NEW_LINE INDENT return l [ n ] [ r ] NEW_LINE DEDENT initialize ( ) NEW_LINE n = 8 NEW_LINE r = 3 NEW_LINE print ( nCr ( n , r ) ) NEW_LINE
a = int ( input ( ) ) NEW_LINE b = int ( input ( ) ) NEW_LINE c = int ( input ( ) ) NEW_LINE d = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE if a > b : NEW_LINE INDENT if a > c : NEW_LINE INDENT ans += 2 NEW_LINE DEDENT DEDENT elif b > c : NEW_LINE INDENT if b > d : NEW_LINE INDENT ans += 2 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if c > d : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
import math NEW_LINE def calculate ( a , b , n , m ) : NEW_LINE INDENT mul = 1 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if ( b [ i ] != 0 ) : NEW_LINE INDENT mul = mul * b [ i ] NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT x = math . floor ( a [ i ] / mul ) NEW_LINE print ( int ( x ) , end = " " ) NEW_LINE DEDENT DEDENT a = [ 5 , 100 , 8 ] NEW_LINE b = [ 2 , 3 ] NEW_LINE n = len ( a ) NEW_LINE m = len ( b ) NEW_LINE calculate ( a , b , n , m ) NEW_LINE
def main ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c . sort ( ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE while i < n - 1 and j < n - 1 : NEW_LINE INDENT if a [ i ] < b [ j ] : NEW_LINE INDENT i += 1 NEW_LINE DEDENT elif a [ i ] > b [ j ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( c [ n - 1 ] ) NEW_LINE print ( c [ n - 2 ] ) NEW_LINE DEDENT main ( ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 0 NEW_LINE while i < n and s [ i ] == " < " : NEW_LINE INDENT i += 1 NEW_LINE DEDENT while n > 0 and s [ n - 1 - i ] == " > " : NEW_LINE INDENT n -= 1 NEW_LINE i += 1 NEW_LINE DEDENT print ( i ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE while n > 0 : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT n //= 2 NEW_LINE ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += 2 NEW_LINE DEDENT n -= 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
v , d , t , f , c = map ( int , input ( ) . split ( ) ) NEW_LINE t += 1 NEW_LINE a = t NEW_LINE while d > v and a * v < v : NEW_LINE INDENT d -= a * v NEW_LINE a += 1 NEW_LINE DEDENT if d > v : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT r = 0 NEW_LINE while r < v : NEW_LINE INDENT r += 1 NEW_LINE if t + a * v * 2 + f >= c : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( r ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ' : ' ) ) NEW_LINE c , d = map ( int , input ( ) . split ( ' : ' ) ) NEW_LINE print ( c - ( a + d ) - ( b + c ) ) NEW_LINE
def longestAlternatingSubarray ( a , n ) : NEW_LINE INDENT longest = 1 NEW_LINE cnt = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( a [ i ] * a [ i - 1 ] < 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE longest = max ( longest , cnt ) NEW_LINE DEDENT else : NEW_LINE INDENT cnt = 1 NEW_LINE DEDENT DEDENT return longest NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ - 5 , - 1 , - 1 , - 1 , 2 , - 2 , - 3 ] NEW_LINE n = len ( a ) NEW_LINE print ( longestAlternatingSubarray ( a , n ) ) NEW_LINE DEDENT
def checkTypeOfTriangle ( a , b , c ) : NEW_LINE INDENT sqa = pow ( a , 2 ) NEW_LINE sqb = pow ( b , 2 ) NEW_LINE sqc = pow ( c , 2 ) NEW_LINE if ( sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb ) : NEW_LINE INDENT print ( " Right - rx ** 2 " ) NEW_LINE DEDENT elif ( sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb ) : NEW_LINE INDENT print ( " Oute - rx ** 2 " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Acute - rx ** 2 " ) NEW_LINE DEDENT DEDENT a = 2 NEW_LINE b = 2 NEW_LINE c = 2 NEW_LINE checkTypeOfTriangle ( a , b , c ) NEW_LINE
def countSubsequence ( s , n ) : NEW_LINE INDENT cntG = 0 NEW_LINE cntF = 0 NEW_LINE result = 0 NEW_LINE C = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == ' G ' ) : NEW_LINE INDENT cntG += 1 NEW_LINE result += C NEW_LINE DEDENT elif ( s [ i ] == ' F ' ) : NEW_LINE INDENT cntF += 1 NEW_LINE C += cntG NEW_LINE DEDENT else : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT print ( result ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " GFGFG " NEW_LINE n = len ( s ) NEW_LINE countSubsequence ( s , n ) NEW_LINE DEDENT
import sys NEW_LINE from collections import namedtuple NEW_LINE from itertools import product NEW_LINE def solve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE x = [ ] NEW_LINE y = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT p = tuple ( map ( int , input ( ) . split ( ) ) ) NEW_LINE x . append ( p ) NEW_LINE y . append ( p ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT d = abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) NEW_LINE if d > 0 : NEW_LINE INDENT print ( i + 1 , j + 1 , d ) NEW_LINE DEDENT DEDENT DEDENT DEDENT def main ( ) : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def countSteps ( n ) : NEW_LINE INDENT steps = 0 ; NEW_LINE while ( n > 0 ) : NEW_LINE INDENT largest = int ( n ** ( 1 / 3 ) ) ; NEW_LINE n -= ( largest * largest * largest ) ; NEW_LINE steps += 1 ; NEW_LINE DEDENT return steps ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 150 ; NEW_LINE print ( countSteps ( n ) ) ; NEW_LINE DEDENT
import sys NEW_LINE from sys import stdin NEW_LINE input = stdin . readline NEW_LINE def main ( args ) : NEW_LINE INDENT ranks = [ 0 ] * 12 NEW_LINE for line in sys . stdin : NEW_LINE INDENT line = line . rstrip ( ) NEW_LINE h , w = map ( int , line . split ( ) ) NEW_LINE ranks [ h ] = ( ranks [ h ] * 2 + w ) / 3 NEW_LINE DEDENT t_ ranks = [ 0 ] * 12 NEW_LINE for i in range ( 8 ) : NEW_LINE INDENT t = ranks [ i ] + 1 NEW_LINE for j in range ( 8 ) : NEW_LINE INDENT t_ ranks [ j ] = max ( ranks [ j ] , t_ ranks [ j + 1 ] ) NEW_LINE DEDENT DEDENT print ( f ' { t _ ranks [ 0 ] } { t _ ranks [ 1 ] } ' ) NEW_LINE print ( f ' { t _ ranks [ 2 ] } { t _ ranks [ 3 ] } ' ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE mx = max ( a ) NEW_LINE mn = min ( a ) NEW_LINE if mx == mn : NEW_LINE INDENT print ( 0 , 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( mx - mn , ( mn - 1 ) * ( mx // 2 ) ) NEW_LINE DEDENT
def find_count ( arr ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in arr : NEW_LINE INDENT x = bin ( i ) . count ( '1' ) NEW_LINE if ( i % x == 0 ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] NEW_LINE print ( find_count ( arr ) ) NEW_LINE
import sys NEW_LINE input = sys . stdin . readline NEW_LINE N = int ( input ( ) ) NEW_LINE A = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE S = sum ( A ) NEW_LINE flag = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if A [ i ] > S : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT S += A [ i ] NEW_LINE DEDENT if flag : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
def maxProd ( N ) : NEW_LINE INDENT if ( N == 0 ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT if ( N < 10 ) : NEW_LINE INDENT return N NEW_LINE DEDENT return max ( maxProd ( N // 10 ) * ( N % 10 ) , maxProd ( N // 10 - 1 ) * 9 ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 390 NEW_LINE print ( maxProd ( N ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = input ( ) . split ( ) NEW_LINE b = [ ] NEW_LINE c = [ ] NEW_LINE for i in a : NEW_LINE INDENT if i in c : NEW_LINE INDENT b . append ( c . count ( i ) ) NEW_LINE DEDENT else : NEW_LINE INDENT c . append ( i ) NEW_LINE b = [ i ] NEW_LINE DEDENT DEDENT print ( max ( b ) + 1 ) NEW_LINE
from math import sqrt NEW_LINE t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE x = [ ] NEW_LINE y = [ ] NEW_LINE for i in range ( 2 * n ) : NEW_LINE INDENT b , c = map ( int , input ( ) . split ( ) ) NEW_LINE x . append ( b ) NEW_LINE y . append ( c ) NEW_LINE DEDENT if len ( x ) == len ( y ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT x . sort ( ) NEW_LINE y . sort ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x_new = x [ i ] + y [ i ] NEW_LINE ans += sqrt ( x_new ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT
def countNonDecreasing ( n ) : NEW_LINE INDENT N = 10 NEW_LINE count = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT count *= ( N + i - 1 ) NEW_LINE count //= i NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE print ( countNonDecreasing ( n ) ) NEW_LINE DEDENT
def reduceString ( s , l ) : NEW_LINE INDENT count = 1 NEW_LINE steps = 0 NEW_LINE for i in range ( 1 , l ) : NEW_LINE INDENT if ( s [ i ] == s [ i - 1 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT steps += ( count / 2 ) NEW_LINE count = 1 NEW_LINE DEDENT DEDENT steps += count / 2 NEW_LINE return steps NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE l = len ( s ) NEW_LINE print ( reduceString ( s , l ) ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a == b == 0 ) : NEW_LINE INDENT print ( " Impossible " ) NEW_LINE exit ( ) NEW_LINE DEDENT c = 0 NEW_LINE l = [ ] NEW_LINE x = a NEW_LINE while ( c < a ) : NEW_LINE INDENT c += 1 NEW_LINE if ( c == 1 ) : NEW_LINE INDENT l . append ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT x = x + 1 NEW_LINE DEDENT DEDENT q = [ ] NEW_LINE for i in range ( len ( l ) ) : NEW_LINE INDENT if ( l [ i ] == 1 ) : NEW_LINE INDENT q . append ( l [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if ( i > len ( l ) - 1 ) : NEW_LINE INDENT print ( " Impossible " ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT DEDENT if ( len ( q ) != len ( l ) ) : NEW_LINE INDENT print ( " Impossible " ) NEW_LINE exit ( ) NEW_LINE DEDENT for i in range ( len ( l ) - 1 ) : NEW_LINE INDENT if ( l [ i ] == 0 ) : NEW_LINE INDENT q . append ( l [ i + 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT q . append ( l [ i ] ) NEW_LINE DEDENT DEDENT if ( len ( q ) == len ( l ) - 1 ) : NEW_LINE INDENT print ( " ? " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( str ( q [ 0 ] ) + " " + str ( q [ 1 ] ) + " ! " ) NEW_LINE DEDENT
x , y = map ( int , input ( ) . split ( ) ) NEW_LINE a , b = map ( int , input ( ) . split ( ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( a , x + 1 ) : NEW_LINE INDENT for j in range ( b , y + 1 ) : NEW_LINE INDENT if i <= j : NEW_LINE INDENT l . append ( [ i , j ] ) NEW_LINE DEDENT DEDENT DEDENT print ( len ( l ) ) NEW_LINE for i in l : NEW_LINE INDENT print ( i [ 0 ] , i [ 1 ] ) NEW_LINE DEDENT
mod = 1000000007 ; NEW_LINE def mult ( a , b ) : NEW_LINE INDENT return ( ( a % mod ) * ( b % mod ) ) % mod ; NEW_LINE DEDENT def calculate_factors ( n ) : NEW_LINE INDENT cnt = 0 ; NEW_LINE cnt = 1 ; NEW_LINE while ( n % 2 == 0 ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE n = n // 2 ; NEW_LINE DEDENT if ( cnt % 2 == 1 ) : NEW_LINE INDENT ans = mult ( ans , ( cnt + 1 ) ) ; NEW_LINE DEDENT for i in range ( 3 , int ( pow ( n , 1 / 2 ) ) + 1 ) : NEW_LINE INDENT cnt = 0 ; NEW_LINE while ( n % i == 0 ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE n = n // i ; NEW_LINE DEDENT if ( cnt % 2 ) : NEW_LINE INDENT ans = mult ( ans , ( cnt + 1 ) ) ; NEW_LINE DEDENT DEDENT if ( n > 2 ) : NEW_LINE INDENT ans = mult ( ans , ( 2 ) ) ; NEW_LINE DEDENT return ans % mod ; NEW_LINE DEDENT n = 1937 itertools76 ok = 2 ; NEW_LINE mod = 17 ; NEW_LINE print ( calculate_factors ( n ) ) ; NEW_LINE
s = input ( ) NEW_LINE c = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] == ' . ' : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif s [ i ] == ' - ' and s [ i + 1 ] == ' . ' : NEW_LINE INDENT c -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT c += 2 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE
def max absDiff ( arr , n ) : NEW_LINE INDENT minEle = arr [ 0 ] NEW_LINE maxEle = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT minEle = min ( minEle , arr [ i ] ) NEW_LINE maxEle = max ( maxEle , arr [ i ] ) NEW_LINE DEDENT return ( maxEle - minEle ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 1 , 5 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( max absDiff ( arr , n ) ) NEW_LINE DEDENT
def s ( ) : NEW_LINE INDENT import sys NEW_LINE r = sys . stdin . readline NEW_LINE for e in iter ( r , '0 \n ' ) : NEW_LINE INDENT R = [ [ ] for _ in [ 0 ] * - ~ int ( e ) ] NEW_LINE for _ in [ 0 ] * int ( r ( ) ) : NEW_LINE INDENT a , b , c = map ( int , r ( ) . split ( ) ) NEW_LINE R [ a ] += [ b ] ; R [ b ] += [ c ] NEW_LINE if c == 1 : R [ a ] += [ b ] ; R [ c ] += [ a ] NEW_LINE else : R [ a ] += [ b ] ; R [ c ] += [ c ] NEW_LINE DEDENT for m in R [ 1 ] [ : : - 1 ] : R [ m ] += R [ 1 ] NEW_LINE print ( * R , sep = ' \n ' ) NEW_LINE DEDENT DEDENT s ( ) NEW_LINE
def minRemove ( a , b , n , m ) : NEW_LINE INDENT countA = dict . fromkeys ( a , 0 ) ; NEW_LINE countB = dict . fromkeys ( b , 0 ) ; NEW_LINE res = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] in countA . keys ( ) ) : NEW_LINE INDENT countA [ a [ i ] ] += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT countA [ a [ i ] ] = 1 ; NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT if ( b [ i ] in countB . keys ( ) ) : NEW_LINE INDENT countB [ b [ i ] ] += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT countB [ b [ i ] ] = 1 ; NEW_LINE DEDENT DEDENT res = 0 ; NEW_LINE for k in countA . keys ( ) : NEW_LINE INDENT res += min ( countB [ k ] , countA [ k ] ) ; NEW_LINE DEDENT return res ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 1 , 2 , 3 , 4 ] ; NEW_LINE b = [ 2 , 3 , 4 , 5 , 8 ] ; NEW_LINE n = len ( a ) ; NEW_LINE m = len ( b ) ; NEW_LINE print ( minRemove ( a , b , n , m ) ) ; NEW_LINE DEDENT
M = 20 NEW_LINE def count ( pos , firstD , lastD , tight , num ) : NEW_LINE INDENT if ( pos == len ( num ) ) : NEW_LINE INDENT if ( firstD == lastD ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if ( dp [ pos ] [ firstD ] [ lastD ] [ tight ] != - 1 ) : NEW_LINE INDENT return dp [ pos ] [ firstD ] [ lastD ] [ tight ] NEW_LINE DEDENT ans = 0 NEW_LINE limit = 9 if ( tight == 1 ) else num [ pos ] NEW_LINE for dig in range ( limit + 1 ) : NEW_LINE INDENT currFirst = firstD NEW_LINE if ( pos == 0 ) : NEW_LINE INDENT currFirst = dig NEW_LINE DEDENT if ( currFirst == 0 and dig != 0 ) : NEW_LINE INDENT currFirst = dig NEW_LINE DEDENT currTight = tight NEW_LINE if ( dig < num [ pos ] ) : NEW_LINE INDENT currTight = 1 NEW_LINE DEDENT ans += count ( pos + 1 , currFirst , dig , currTight , num ) NEW_LINE DEDENT dp [ pos ] [ firstD ] [ lastD ] [ tight ] = ans NEW_LINE return dp [ pos ] [ firstD ] [ lastD ] [ tight ] NEW_LINE DEDENT def solve ( x ) : NEW_LINE INDENT num = [ ] NEW_LINE while ( x > 0 ) : NEW_LINE INDENT num . append ( x % 10 ) NEW_LINE x //= 10 NEW_LINE DEDENT num . reverse ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( M ) : NEW_LINE INDENT for j in range ( M ) : NEW_LINE INDENT for k in range ( M ) : NEW_LINE INDENT for l in range ( M ) : NEW_LINE INDENT dp [ i ] [ j ] [ k ] = - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT return count ( 0 , 0 , 0 , 0 , num ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT L = 2 NEW_LINE R = 60 NEW_LINE print ( solve ( R ) - solve ( L - 1 ) ) NEW_LINE L = 1 NEW_LINE R = 1000 NEW_LINE print ( solve (
n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE temp = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if l [ i ] == 1 : NEW_LINE INDENT if temp >= 0 : NEW_LINE INDENT ans *= ( i - temp ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = 1 NEW_LINE DEDENT temp = i NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
import math NEW_LINE def bit ( x ) : NEW_LINE INDENT ans = 0 ; NEW_LINE while ( x > 0 ) : NEW_LINE INDENT x = int ( x / 2 ) ; NEW_LINE ans += 1 ; NEW_LINE DEDENT return ans ; NEW_LINE DEDENT def check ( d , x ) : NEW_LINE INDENT if ( bit ( x / d ) <= bit ( d ) ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT return 0 ; NEW_LINE DEDENT def bs ( n ) : NEW_LINE INDENT l = 1 ; NEW_LINE r = int ( math . sqrt ( n ) ) ; NEW_LINE while ( l < r ) : NEW_LINE INDENT m = ( l + r ) / 2 ; NEW_LINE if ( check ( m , n ) ) : NEW_LINE INDENT r = m ; NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 ; NEW_LINE DEDENT DEDENT if ( check ( l , n ) == 0 ) : NEW_LINE INDENT return l + 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT return l ; NEW_LINE DEDENT DEDENT def countDivisor ( n ) : NEW_LINE INDENT return n - bs ( n ) + 1 ; NEW_LINE DEDENT n = 5 ; NEW_LINE print ( countDivisor ( n ) ) ; NEW_LINE
import sys NEW_LINE def minimalSteps ( s , n ) : NEW_LINE INDENT dp = [ 0 ] * ( n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT dp [ i ] = sys . maxsize NEW_LINE DEDENT s1 = " " NEW_LINE s2 = " " NEW_LINE dp [ 0 ] = 1 NEW_LINE s1 += s [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT s1 += s [ i ] NEW_LINE s2 = s [ i + 1 ] NEW_LINE dp [ i ] = min ( dp [ i ] , dp [ i - 1 ] + 1 ) NEW_LINE if ( s1 == s2 ) : NEW_LINE INDENT dp [ i * 2 + 1 ] = min ( dp [ i ] + 1 , dp [ i * 2 + 1 ] ) NEW_LINE DEDENT DEDENT return dp [ n - 1 ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " a pq aaa aaa " NEW_LINE n = len ( s ) NEW_LINE print ( minimalSteps ( s , n ) // 2 ) NEW_LINE DEDENT
def checkUtil ( num , dig , base ) : NEW_LINE INDENT if ( dig == 1 and num < base ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( dig > 1 and num >= base ) : NEW_LINE INDENT return checkUtil ( num // base , dig - 1 , base ) NEW_LINE DEDENT return False NEW_LINE DEDENT def check ( num , dig ) : NEW_LINE INDENT for base in range ( 2 , 32 ) : NEW_LINE INDENT if ( checkUtil ( num , dig , base ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT num = 8 NEW_LINE dig = 3 NEW_LINE if ( check ( num , dig ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT def getMin ( arr , i , j ) : NEW_LINE INDENT minVal = arr [ i ] NEW_LINE i += 1 NEW_LINE while ( i <= j ) : NEW_LINE INDENT minVal = min ( minVal , arr [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT return minVal NEW_LINE DEDENT def getMax ( arr , i , j ) : NEW_LINE INDENT maxVal = arr [ i ] NEW_LINE i += 1 NEW_LINE while ( i <= j ) : NEW_LINE INDENT maxVal = max ( maxVal , arr [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT return maxVal NEW_LINE DEDENT def generateArr ( arr , n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT print ( arr [ 0 ] ) NEW_LINE return NEW_LINE DEDENT tmpArr = [ 0 for i in range ( n ) ] NEW_LINE tmpArr [ 0 ] = getMax ( arr , 1 , n - 1 ) NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT tmpArr [ i ] = ( abs ( getMax ( arr , i + 1 , n - 1 ) ) - getMin ( arr , 0 , i - 1 ) ) NEW_LINE DEDENT tmpArr [ n - 1 ] = getMin ( arr , 0 , n - 2 ) NEW_LINE printArray ( tmpArr , n ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 5 , 2 , 4 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE generateArr ( arr , n ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE p = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE s = input ( ) NEW_LINE a = 0 NEW_LINE b = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] == ' A ' : NEW_LINE INDENT a += p [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT b += p [ i ] NEW_LINE DEDENT DEDENT for i in range ( len ( s ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if s [ i ] == ' B ' : NEW_LINE INDENT a += p [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT a -= p [ i ] NEW_LINE DEDENT DEDENT ans = max ( a , b ) NEW_LINE for i in range ( len ( s ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if s [ i ] == ' A ' : NEW_LINE INDENT a += p [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT b -= p [ i ] NEW_LINE DEDENT ans = max ( ans , max ( a , b ) ) NEW_LINE DEDENT print ( ans ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT x1 , y1 , x2 , y2 , x3 , y3 = [ float ( x ) for x in input ( ) . split ( ) ] NEW_LINE a = ( ( x2 - x1 ) / ( x1 - x3 ) ) + ( ( y2 - y1 ) / ( y1 - y3 ) ) NEW_LINE b = ( ( x3 - x1 ) / ( x1 - x3 ) ) + ( ( y3 - y1 ) / ( y1 - y3 ) ) + ( ( x2 - y2 ) / ( x1 - x3 ) ) NEW_LINE if a == b : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def nthXorFib ( n , a , b ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT return b NEW_LINE DEDENT if ( n == 2 ) : NEW_LINE INDENT return ( a ^ b ) NEW_LINE DEDENT return nthXorFib ( n % 3 , a , b ) NEW_LINE DEDENT a = 1 NEW_LINE b = 2 NEW_LINE n = 10 NEW_LINE print ( nthXorFib ( n , a , b ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = input ( ) . split ( ) NEW_LINE if int ( a ) > int ( b ) : NEW_LINE INDENT x += 3 NEW_LINE DEDENT elif int ( a ) == int ( b ) : NEW_LINE INDENT y += 3 NEW_LINE DEDENT DEDENT print ( x , y ) NEW_LINE
import math as mt NEW_LINE def Area ( a ) : NEW_LINE INDENT if ( a < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT h = 1.704 * a NEW_LINE A = 0.70477 * pow ( h , 2 ) NEW_LINE return A NEW_LINE DEDENT a = 5 NEW_LINE print ( Area ( a ) ) NEW_LINE
def compute ( ) : NEW_LINE INDENT ans = stern_ ufotCount ( 1 , 3 , 1 , 2 ) NEW_LINE return str ( ans ) NEW_LINE DEDENT def stern_ ufotCount ( leftN , leftD , rightN , rightD ) : NEW_LINE INDENT if leftD + rightD > 12000 : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return 1 + stern_fotCount ( leftN , leftD , n , d ) + stern_fotCount ( n , d , rightN , rightD ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE if n % 2 == 1 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 2 ** ( n // 2 ) ) NEW_LINE DEDENT
from math import sqrt NEW_LINE def sieve ( prime , n ) : NEW_LINE INDENT prime [ 0 ] = False ; NEW_LINE prime [ 1 ] = False ; NEW_LINE for p in range ( 2 , int ( sqrt ( n ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False ; NEW_LINE DEDENT DEDENT DEDENT DEDENT def sumPrime ( d ) : NEW_LINE INDENT maxVal = int ( sqrt ( d ) ) - 1 ; NEW_LINE prime = [ True ] * ( maxVal + 1 ) ; NEW_LINE sieve ( prime , maxVal ) ; NEW_LINE sum = 0 ; NEW_LINE for i in range ( 2 , maxVal + 1 ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT sum += i ; NEW_LINE DEDENT DEDENT return sum ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT d = 3 ; NEW_LINE print ( sumPrime ( d ) ) ; NEW_LINE DEDENT
from math import sqrt NEW_LINE def sieve ( prime , n ) : NEW_LINE INDENT prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , int ( sqrt ( n ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def sumPrime ( d ) : NEW_LINE INDENT maxVal = int ( pow ( 2 , d ) - 1 ) NEW_LINE prime = [ True ] * ( maxVal + 1 ) NEW_LINE sieve ( prime , maxVal ) NEW_LINE sum = 0 NEW_LINE for i in range ( 2 , maxVal + 1 ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT d = 8 NEW_LINE print ( sumPrime ( d ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , k = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE l . sort ( reverse = True ) NEW_LINE c = 0 NEW_LINE i = 0 NEW_LINE while k > 1 and i < n - 1 : NEW_LINE INDENT k -= l [ i ] NEW_LINE c += 1 NEW_LINE if k / ( i * ( i + 1 ) ) >= k : NEW_LINE INDENT break NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
n = input ( ) . split ( ) NEW_LINE a = int ( n [ 0 ] ) NEW_LINE b = int ( n [ 1 ] ) NEW_LINE c = int ( n [ 2 ] ) NEW_LINE d = int ( n [ 3 ] ) NEW_LINE e = int ( n [ 4 ] ) NEW_LINE f = int ( n [ 5 ] ) NEW_LINE g = int ( n [ 6 ] ) NEW_LINE h = int ( n [ 7 ] ) NEW_LINE i = 1 NEW_LINE j = 1 NEW_LINE k = 0 NEW_LINE while i <= a and j <= b and k <= c and i <= d and j <= e : NEW_LINE INDENT if a < k : NEW_LINE INDENT a += 1 NEW_LINE DEDENT elif b < k : NEW_LINE INDENT b += 1 NEW_LINE DEDENT elif c < k : NEW_LINE INDENT c += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( abs ( a - b ) + 1 ) NEW_LINE
def maxPartitions ( arr , n ) : NEW_LINE INDENT ans = 0 ; NEW_LINE max_so_far = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT max_so_far = max ( max_so_far , arr [ i ] ) ; NEW_LINE if ( max_so_far == i ) : NEW_LINE INDENT ans += 1 ; NEW_LINE DEDENT DEDENT return ans ; NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 0 , 2 , 3 , 4 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( maxPartitions ( arr , n ) ) ; NEW_LINE DEDENT
def countMaxContiguous ( arr , n ) : NEW_LINE INDENT current_max = 0 NEW_LINE max_so_far = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 != 0 ) : NEW_LINE INDENT current_max = 0 NEW_LINE DEDENT else : NEW_LINE INDENT current_max += 1 NEW_LINE max_so_far = max ( current_max , max_so_far ) NEW_LINE DEDENT DEDENT return max_so_far NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 0 , 2 , 4 , 3 , 8 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countMaxContiguous ( arr , n ) ) NEW_LINE DEDENT
from math import * NEW_LINE def cube ( h , r ) : NEW_LINE INDENT if ( h < 0 and r < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT a = ( h * r * sqrt ( 2 ) ) / ( h + sqrt ( 2 ) * r ) NEW_LINE return a NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT h , r = 5 , 6 NEW_LINE print ( cube ( h , r ) ) NEW_LINE DEDENT
def pattern ( rows_no ) : NEW_LINE INDENT for i in range ( 1 , rows_no + 1 ) : NEW_LINE INDENT for k in range ( 1 , i ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT for j in range ( i , rows_no + 1 ) : NEW_LINE INDENT print ( j , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT for i in range ( rows_no - 1 , 0 , - 1 ) : NEW_LINE INDENT for k in range ( 1 , i ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT for j in range ( i , rows_no + 1 ) : NEW_LINE INDENT print ( j , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT rows_no = 7 NEW_LINE pattern ( rows_no ) NEW_LINE
n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT print ( 10 ) NEW_LINE DEDENT else : NEW_LINE INDENT s = str ( n ) NEW_LINE if int ( s [ 0 ] ) == 0 : NEW_LINE INDENT print ( 10 ) NEW_LINE DEDENT else : NEW_LINE INDENT s = '0' + s [ 0 ] NEW_LINE print ( sum ( s ) ) NEW_LINE DEDENT DEDENT
def check_digits ( n ) : NEW_LINE INDENT while ( n > 0 ) : NEW_LINE INDENT if ( ( n % 10 ) % 2 == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT n = n // 10 NEW_LINE DEDENT return 1 NEW_LINE DEDENT def smallest_number ( n ) : NEW_LINE INDENT i = n NEW_LINE while ( check_digits ( i ) > 0 ) : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT return i NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 2 pos_number ( 2 pos_number ( N ) ) NEW_LINE print ( smallest_number ( N ) ) NEW_LINE DEDENT
def check_digits ( n ) : NEW_LINE INDENT while ( n ) : NEW_LINE INDENT if ( ( n % 10 ) % 2 != 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT n = n // 10 NEW_LINE DEDENT return 1 NEW_LINE DEDENT def smallest_number ( n ) : NEW_LINE INDENT for i in range ( n , 1 , 1 ) : NEW_LINE INDENT if ( check_digits ( i ) != 0 ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 2 pos_number ( 2 pos_number ( N ) ) NEW_LINE print ( smallest_number ( N ) ) NEW_LINE DEDENT
def triangular_series ( n ) : NEW_LINE INDENT j = 1 NEW_LINE k = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( k , end = " " ) NEW_LINE j = j + 1 NEW_LINE k = k + j NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 5 NEW_LINE triangular_series ( n ) NEW_LINE DEDENT
import math NEW_LINE n , m = map ( int , input ( ) . split ( ) ) NEW_LINE sum = 0 NEW_LINE num = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT sum += num [ i ] * ( n - num [ i ] ) NEW_LINE DEDENT print ( int ( sum / 2 ) ) NEW_LINE
def findPosition ( k , n ) : NEW_LINE INDENT f1 = 0 NEW_LINE f2 = 1 NEW_LINE f3 = 0 NEW_LINE i = 2 NEW_LINE while ( i != 0 ) : NEW_LINE INDENT f3 = f1 + f2 NEW_LINE f1 = f2 NEW_LINE f2 = f3 NEW_LINE if ( f2 % k == 0 ) : NEW_LINE INDENT return n * i NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE k = 4 NEW_LINE print ( " Position of n ' th multiple of k in Fibonacci column is " ) NEW_LINE print ( findPosition ( k , n ) ) NEW_LINE DEDENT
import sys NEW_LINE input = sys . stdin . readline NEW_LINE s = input ( ) [ : - 1 ] NEW_LINE n = len ( s ) NEW_LINE d = [ 0 ] * n NEW_LINE for i in range ( 97 , 97 + 26 ) : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT d [ chr ( i ) - 97 ] = 0 NEW_LINE DEDENT for i in range ( 97 + 26 ) : NEW_LINE INDENT if d [ chr ( i ) - 97 ] == 1 : NEW_LINE INDENT n -= 1 NEW_LINE DEDENT DEDENT if n == 2 : NEW_LINE INDENT print ( " Second " if d [ s [ 0 ] ] % 2 else " First " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " First " ) NEW_LINE DEDENT
def countMinimumMoves ( arr , n , k ) : NEW_LINE INDENT for i in range ( k - 1 , n , 1 ) : NEW_LINE INDENT if ( arr [ i ] != arr [ k - 1 ] ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT for i in range ( k - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( arr [ i ] != arr [ k - 1 ] ) : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE K = 4 NEW_LINE n = len ( arr ) NEW_LINE print ( countMinimumMoves ( arr , n , K ) ) NEW_LINE DEDENT
def power ( x , y , p ) : NEW_LINE INDENT res = 1 NEW_LINE x = x % p NEW_LINE while ( y > 0 ) : NEW_LINE INDENT if ( y & 1 ) : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT y = y >> 1 NEW_LINE x = ( x * x ) % p NEW_LINE DEDENT return res NEW_LINE DEDENT def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def powerGCD ( a , b , n ) : NEW_LINE INDENT e = power ( a , n , b ) NEW_LINE return gcd ( e , b ) NEW_LINE DEDENT a = 5 NEW_LINE b = 4 NEW_LINE n = 2 NEW_LINE print ( powerGCD ( a , b , n ) ) NEW_LINE
t , s , q = map ( int , input ( ) . split ( ) ) NEW_LINE i = 1 NEW_LINE sum = 0 NEW_LINE while s < t : NEW_LINE INDENT s += q * i NEW_LINE sum += 1 NEW_LINE DEDENT print ( sum ) NEW_LINE
n = int ( input ( ) ) NEW_LINE print ( ( n - 2 ) ** 2 ) NEW_LINE
def count ostRows ( mat ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( len ( mat ) ) : NEW_LINE INDENT hs = dict ( ) NEW_LINE for j in range ( len ( mat [ i ] ) ) : NEW_LINE INDENT hs [ mat [ i ] [ j ] ] = 1 NEW_LINE DEDENT if ( len ( hs ) == 1 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT mat = [ [ 1 , 1 , 1 ] , [ 1 , 2 , 3 ] , [ 5 , 5 , 5 ] ] NEW_LINE print ( ostRows ( mat ) ) NEW_LINE
def createSorted ( a , n ) : NEW_LINE INDENT b = [ ] NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( len ( b ) == 0 ) : NEW_LINE INDENT b . append ( a [ j ] ) NEW_LINE DEDENT else : NEW_LINE INDENT start = 0 NEW_LINE end = len ( b ) - 1 NEW_LINE pos = 0 NEW_LINE while ( start <= end ) : NEW_LINE INDENT mid = start + ( end - start ) // 2 NEW_LINE if ( b [ mid ] == a [ j ] ) : NEW_LINE INDENT b . append ( ( max ( 0 , mid + 1 ) , a [ j ] ) ) NEW_LINE break NEW_LINE DEDENT elif ( b [ mid ] > a [ j ] ) : NEW_LINE INDENT pos = end NEW_LINE DEDENT else : NEW_LINE INDENT pos = mid - 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT pos = start NEW_LINE b . append ( ( max ( 0 , pos ) , a [ j ] ) ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( b [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 2 , 5 , 4 , 9 , 8 ] NEW_LINE n = len ( a ) NEW_LINE createSorted ( a , n ) NEW_LINE DEDENT
def countTotalDistinct ( str ) : NEW_LINE INDENT cnt = 0 NEW_LINE items = set ( ) NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT temp = " " NEW_LINE ans = set ( ) NEW_LINE for j in range ( i , len ( str ) ) : NEW_LINE INDENT temp = temp + str [ j ] NEW_LINE ans . add ( str [ j ] ) NEW_LINE if ( temp not in items ) : NEW_LINE INDENT items . add ( temp ) NEW_LINE cnt += len ( ans ) NEW_LINE DEDENT DEDENT DEDENT return cnt NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " ABCA " NEW_LINE print ( countTotalDistinct ( str ) ) NEW_LINE DEDENT
import math NEW_LINE def firstDigit ( n ) : NEW_LINE INDENT digits = int ( math . log10 ( n ) ) NEW_LINE n = n // ( pow ( 10 , digits ) ) NEW_LINE return n NEW_LINE DEDENT def lastDigit ( n ) : NEW_LINE INDENT return ( n % 10 ) NEW_LINE DEDENT n = 98562 NEW_LINE print ( firstDigit ( n ) , end = " " ) NEW_LINE print ( lastDigit ( n ) ) NEW_LINE
def removeZeros ( a , n ) : NEW_LINE INDENT ind = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] != 0 ) : NEW_LINE INDENT ind = i NEW_LINE break NEW_LINE DEDENT DEDENT if ( ind == - 1 ) : NEW_LINE INDENT print ( " Array has leading zeros only " ) NEW_LINE return NEW_LINE DEDENT b = [ 0 for i in range ( n - ind ) ] NEW_LINE for i in range ( n - ind ) : NEW_LINE INDENT b [ i ] = a [ ind + i ] NEW_LINE DEDENT for i in range ( n - ind ) : NEW_LINE INDENT print ( b [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 0 , 0 , 1 , 2 , 0 , 3 ] NEW_LINE n = len ( a ) NEW_LINE removeZeros ( a , n ) NEW_LINE DEDENT
def find_maxm ( arr , n ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT mp [ arr [ i ] ] = mp . get ( arr [ i ] , 0 ) + 1 NEW_LINE DEDENT ans = 0 NEW_LINE for x in mp : NEW_LINE INDENT value = x NEW_LINE freq = mp [ x ] NEW_LINE if ( value == freq ) : NEW_LINE INDENT ans = max ( ans , value ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT arr = [ 3 , 2 , 2 , 3 , 4 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( find_maxm ( arr , n ) ) NEW_LINE
import sys NEW_LINE sys . setrecursionlimit ( 10 ** 6 ) NEW_LINE int1 = lambda x : int ( x ) - 1 NEW_LINE p2D = lambda x : print ( * x , sep = " \n " ) NEW_LINE def II ( ) : return int ( sys . stdin . readline ( ) ) NEW_LINE def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) NEW_LINE def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) NEW_LINE def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] NEW_LINE def SI ( ) : return sys . stdin . readline ( ) [ : - 1 ] NEW_LINE def main ( ) : NEW_LINE INDENT n = II ( ) NEW_LINE aa = LI ( ) NEW_LINE t = sorted ( aa ) NEW_LINE ok = [ [ ] for _ in range ( n ) ] NEW_LINE j = n - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if t [ i ] == 1 : NEW_LINE INDENT ok [ i ] . append ( j ) NEW_LINE DEDENT j = j + 1 NEW_LINE DEDENT ok [ 0 ] . append ( n ) NEW_LINE ok [ n ] . append ( j ) NEW_LINE while 1 : NEW_LINE INDENT j = ( n + 1 ) // 2 NEW_LINE k = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ok [ i ] [ j ] >= k : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT t [ i ] . append ( k ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ok [ i ] [ j ] >= k : NEW_LINE INDENT ok [ i ] [ j ] = k NEW_LINE DEDENT DEDENT DEDENT ans = n NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ok [ i ] [ j ] >= k : NEW_LINE INDENT ans = i NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT main ( ) NEW_LINE
def sumOfDigitsSingle ( x ) : NEW_LINE INDENT ans = 0 NEW_LINE while ( x != 0 ) : NEW_LINE INDENT ans += x % 10 NEW_LINE x = int ( x / 10 ) NEW_LINE DEDENT return ans NEW_LINE DEDENT def closest ( x ) : NEW_LINE INDENT ans = 0 NEW_LINE while ( ans * 10 + 9 <= x ) : NEW_LINE INDENT ans = ans * 10 + 9 NEW_LINE DEDENT return ans NEW_LINE DEDENT def sumOfDigitsTwoParts ( N ) : NEW_LINE INDENT A = closest ( N ) NEW_LINE return ( sumOfDigitsSingle ( A ) + sumOfDigitsSingle ( N - A ) ) NEW_LINE DEDENT N = 35 NEW_LINE print ( sumOfDigitsTwoParts ( N ) ) NEW_LINE
import sys NEW_LINE for line in sys . stdin : NEW_LINE INDENT a , b = [ float ( i ) for i in line . split ( ) ] NEW_LINE tos = [ " AA " , " A " , " B " , " C " , " D " , " E " , " F " ] NEW_LINE ans = [ " NA " ] NEW_LINE if a > b : NEW_LINE INDENT for i in range ( 50 ) : NEW_LINE INDENT if a < b : NEW_LINE INDENT ans += [ i ] NEW_LINE DEDENT DEDENT DEDENT elif b > a : NEW_LINE INDENT for i in range ( 100 ) : NEW_LINE INDENT if a < i : NEW_LINE INDENT ans += [ i ] NEW_LINE DEDENT DEDENT DEDENT elif a <= b : NEW_LINE INDENT for i in range ( 100 ) : NEW_LINE INDENT if a < i : NEW_LINE INDENT ans += [ i ] NEW_LINE DEDENT DEDENT DEDENT print ( ans [ 0 ] ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE if c > a : NEW_LINE INDENT d , c = c , a NEW_LINE DEDENT if b > b : NEW_LINE INDENT b , b = b , b NEW_LINE DEDENT print ( max ( d - 1 , c - 1 ) + max ( d - 1 , b - d ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = sorted ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if a [ n - 1 ] - a [ n - 2 ] > 1 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT DEDENT
def cal_ N ( n ) : NEW_LINE INDENT idx = 0.0001 NEW_LINE n = n * ( 3.142 / 180.0 ) NEW_LINE x1 = n NEW_LINE sinx = n NEW_LINE sinval = sin ( n ) NEW_LINE i = 1 NEW_LINE denominator = 2 * i * ( 2 * i + 1 ) NEW_LINE x1 = - x1 * n * n / denominator NEW_LINE sinx = sinx + x1 NEW_LINE i = i + 1 NEW_LINE DEDENT while (distance <= sinval - sinx ) : NEW_LINE INDENT print ( sinx ) NEW_LINE i = i + 1 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 90 NEW_LINE cal_ N ( n ) NEW_LINE DEDENT
arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] NEW_LINE def multiply ( ) : NEW_LINE INDENT pro = 1 NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT pro = pro * arr [ i ] NEW_LINE DEDENT return pro NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( multiply ( ) ) NEW_LINE DEDENT
q = int ( input ( ) ) NEW_LINE r = [ ] NEW_LINE for i in range ( q ) : NEW_LINE INDENT l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE r . append ( l [ 1 ] ) NEW_LINE DEDENT r . sort ( ) NEW_LINE for i in range ( len ( r ) ) : NEW_LINE INDENT if r [ i ] == 0 : NEW_LINE INDENT x = 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = 0 NEW_LINE DEDENT if r [ i ] == 1 : NEW_LINE INDENT r [ i ] = 0 NEW_LINE DEDENT elif r [ i ] == 2 : NEW_LINE INDENT r [ i ] = r [ i ] * 2 NEW_LINE DEDENT elif r [ i ] == 3 : NEW_LINE INDENT r [ i ] = r [ i ] * 3 NEW_LINE DEDENT else : NEW_LINE INDENT r [ i ] = r [ i ] * 2 NEW_LINE DEDENT DEDENT for i in range ( len ( r ) ) : NEW_LINE INDENT print ( r [ i ] ) NEW_LINE DEDENT
def bit ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while n > 0 : NEW_LINE INDENT count += 1 NEW_LINE n = n & ( n - 1 ) NEW_LINE DEDENT return count NEW_LINE DEDENT def maxSumOfBits ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = bit ( arr [ i ] ) NEW_LINE DEDENT lst = arr [ 0 ] NEW_LINE excl = 0 NEW_LINE excl_new = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT excl_new = ( lst [ i ] > excl ) NEW_LINE lst . append ( excl ) NEW_LINE excl = excl + arr [ i ] NEW_LINE excl = excl_new NEW_LINE DEDENT if ( lst [ n - 1 ] > excl ) : NEW_LINE INDENT lst . append ( lst [ n - 1 ] ) NEW_LINE DEDENT return ( ( lst [ n - 1 ] > excl ) ) NEW_LINE DEDENT arr = [ 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxSumOfBits ( arr , n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE c = 0 NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE l . append ( s ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if l [ i ] == ' C ' : NEW_LINE INDENT c += 1 NEW_LINE DEDENT else : NEW_LINE INDENT l [ i ] = c NEW_LINE DEDENT DEDENT p = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT p += ( l [ i ] . count ( ' C ' ) ) * ( l [ i ] . count ( ' C ' ) - 1 ) // 2 NEW_LINE DEDENT print ( p ) NEW_LINE
def findMinIndex ( arr , low , high ) : NEW_LINE INDENT if ( high < low ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( high == low ) : NEW_LINE INDENT return low NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) : NEW_LINE INDENT return ( mid + 1 ) NEW_LINE DEDENT if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( arr [ high ] > arr [ mid ] ) : NEW_LINE INDENT return findMinIndex ( arr , low , mid - 1 ) NEW_LINE DEDENT return findMinIndex ( arr , mid + 1 , high ) NEW_LINE DEDENT def binary_search ( arr , l , h , x ) : NEW_LINE INDENT while ( l <= h ) : NEW_LINE INDENT mid = ( l + h ) // 2 NEW_LINE if ( arr [ mid ] <= x ) : NEW_LINE INDENT l = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT h = mid - 1 NEW_LINE DEDENT DEDENT return h NEW_LINE DEDENT def countEleLessThanLessThanLessThan ( arr , n , x ) : NEW_LINE INDENT min_index = findMinIndex ( arr , 0 , n - 1 ) NEW_LINE if ( x <= arr [ n - 1 ] ) : NEW_LINE INDENT return ( binary_search ( arr , min_index , n - 1 , x ) + 1 - min_index ) NEW_LINE DEDENT if ( ( min_index - 1 ) >= 0 and x <= arr [ min_index - 1 ] ) : NEW_LINE INDENT return ( n - min_index + binary_search ( arr , 0 , min_index - 1 , x ) + 1 ) NEW_LINE DEDENT return n NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 6 , 10 , 12 , 15 , 2 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE x = 14 NEW_LINE print ( " Count = " , countEleLessThanLessThan ( arr , n , x ) ) NEW_LINE DEDENT
def f ( x , y ) : NEW_LINE INDENT v = y - 2 * x * x + 1 NEW_LINE return v NEW_LINE DEDENT def random random_value ( x , y , h ) : NEW_LINE INDENT while ( x < xn ) : NEW_LINE INDENT x1 = x + h NEW_LINE y1p = random_value ( x , y , h ) NEW_LINE y1c = random_value ( x , y , h ) NEW_LINE x = x1 NEW_LINE y = y1c NEW_LINE h = abs ( y1c - y1 ) NEW_LINE while ( abs ( y1c - y1 ) > e ) : NEW_LINE INDENT y1 = y1c NEW_LINE y1c = y + 0.5 * h * ( f ( x , y ) + f ( x1 , y1 ) ) NEW_LINE DEDENT return y1c NEW_LINE DEDENT def printRValues ( x , y , h ) : NEW_LINE INDENT while ( x < xn ) : NEW_LINE INDENT x1 = x + h NEW_LINE y1p = random_value ( x , y , h ) NEW_LINE y1c = random_value ( x , y , h ) NEW_LINE x = x1 NEW_LINE y = y1c NEW_LINE DEDENT print ( " The final value of y at x = " , int ( x ) , " is : " , int ( y ) , " " , int ( y ) , " " , sep = ' ' ) NEW_LINE DEDENT x = 0 NEW_LINE y = 0.5 NEW_LINE xn = 1 NEW_LINE h = 0.2 NEW_LINE printRValues ( x , y , h ) NEW_LINE
def D_Pattern ( n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT if ( j == 1 or ( ( i == 0 or i == n - 1 ) and ( j > 1 and j < n - 2 ) ) or ( j == n - 2 and i != 0 and i != n - 1 ) ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT DEDENT n = 9 NEW_LINE D_Pattern ( n ) NEW_LINE
def kthString ( n , k ) : NEW_LINE INDENT total = 0 NEW_LINE i = 1 NEW_LINE while ( total < k ) : NEW_LINE INDENT total = total + n - i NEW_LINE i += 1 NEW_LINE DEDENT first_y_position = i - 1 NEW_LINE second_y_position = k - ( total - n + first_y_position ) NEW_LINE for j in range ( 1 , first_y_position ) : NEW_LINE INDENT print ( " x " , end = " " ) NEW_LINE DEDENT print ( " y " , end = " " ) NEW_LINE j = first_y_position + 1 NEW_LINE while ( second_y_position > 1 ) : NEW_LINE INDENT print ( " x " , end = " " ) NEW_LINE second_y_position -= 1 NEW_LINE j += 1 NEW_LINE DEDENT print ( " y " , end = " " ) NEW_LINE while ( j < n ) : NEW_LINE INDENT print ( " x " , end = " " ) NEW_LINE j += 1 NEW_LINE DEDENT DEDENT n = 5 NEW_LINE k = 7 NEW_LINE kthString ( n , k ) NEW_LINE
def binomialCoeff ( n , k ) : NEW_LINE INDENT C = [ 0 ] * ( k + 1 ) ; NEW_LINE C [ 0 ] = 1 ; NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( min ( i , k ) , 0 , - 1 ) : NEW_LINE INDENT C [ j ] = C [ j ] + C [ j - 1 ] ; NEW_LINE DEDENT DEDENT return C [ k ] ; NEW_LINE DEDENT def count_of_subarrays ( N ) : NEW_LINE INDENT count = binomialCoeff ( 2 * N - 1 , N ) ; NEW_LINE return count ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 3 ; NEW_LINE print ( count_of_subarrays ( N ) ) ; NEW_LINE DEDENT
class Solution ( object ) : NEW_LINE INDENT def product INF ( self , nums ) : NEW_LINE INDENT res = [ 0 ] * len ( nums ) NEW_LINE res [ 0 ] = 1 NEW_LINE for i in range ( 1 , len ( nums ) ) : NEW_LINE INDENT res [ i ] = res [ i - 1 ] * nums [ i - 1 ] NEW_LINE DEDENT right = 1 NEW_LINE for i in range ( len ( nums ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT res [ i ] *= right NEW_LINE right *= nums [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE nums = [ ] NEW_LINE out = sObj . product INF ( nums ) NEW_LINE print ( out ) NEW_LINE DEDENT
def getIntestAndLargest ( s , k ) : NEW_LINE INDENT currStr = s [ 0 : k ] NEW_LINE lexMin = currStr NEW_LINE lexMax = currStr NEW_LINE for i in range ( k , len ( s ) ) : NEW_LINE INDENT currStr = currStr [ 1 : k ] + s [ i ] NEW_LINE if ( lexMax > currStr ) : NEW_LINE INDENT lexMax = currStr NEW_LINE DEDENT if ( lexMin > currStr ) : NEW_LINE INDENT lexMin = currStr NEW_LINE DEDENT DEDENT print ( lexMin ) NEW_LINE print ( lexMax ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " GeeksForGeeks " NEW_LINE k = 3 NEW_LINE getIntestAndLargest ( str , k ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( reverse = True ) NEW_LINE b . sort ( reverse = True ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if b [ i ] < a [ j ] : NEW_LINE INDENT print ( a [ j ] , end = " " ) NEW_LINE DEDENT DEDENT print ( b [ i ] ) NEW_LINE DEDENT
INT_BITS = 32 NEW_LINE def maxSubarrayXOR ( set , n ) : NEW_LINE INDENT index = 0 NEW_LINE for i in range ( INT_BITS - 1 , - 1 , - 1 ) : NEW_LINE INDENT maxInd = index NEW_LINE maxEle = - 2147483648 NEW_LINE for j in range ( index , n ) : NEW_LINE INDENT if ( ( set [ j ] & ( 1 << i ) ) and set [ j ] > maxEle ) : NEW_LINE INDENT maxEle = set [ j ] NEW_LINE maxInd = j NEW_LINE DEDENT DEDENT if ( maxEle == - 2147483648 ) : NEW_LINE INDENT continue NEW_LINE DEDENT temp = set [ index ] NEW_LINE set [ index ] = set [ maxInd ] NEW_LINE set [ maxInd ] = temp NEW_LINE maxInd = index NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( j != maxInd and ( set [ j ] & ( 1 << i ) ) ) : NEW_LINE INDENT set [ j ] = set [ j ] ^ set [ maxInd ] NEW_LINE DEDENT DEDENT index += 1 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res ^= set [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT set = [ 9 , 8 , 5 ] NEW_LINE n = len ( set ) NEW_LINE print ( " Max subset XOR is " , end = " " ) NEW_LINE print ( maxSubarrayXOR ( set , n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE max_list = list ( range ( 1 , n + 1 ) ) NEW_LINE i = 0 NEW_LINE max_count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if a [ j ] == max_list [ i ] : NEW_LINE INDENT max_list [ i ] = j NEW_LINE i += 1 NEW_LINE count = 1 NEW_LINE DEDENT else : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( max_list [ i ] , count ) NEW_LINE
def min abs ( arr ) : NEW_LINE INDENT l = 0 NEW_LINE r = len ( arr ) - 1 NEW_LINE min_l = l NEW_LINE min_r = r - 1 NEW_LINE if ( n < 2 ) : NEW_LINE INDENT print ( " Invalid Input " ) NEW_LINE return NEW_LINE DEDENT arr . sort ( ) NEW_LINE while ( l < r ) : NEW_LINE INDENT sum = arr [ l ] + arr [ r ] NEW_LINE if ( abs ( sum ) < abs ( min_sum ) ) : NEW_LINE INDENT min_sum = sum NEW_LINE min_l = l NEW_LINE min_r = r NEW_LINE DEDENT if ( sum < 0 ) : NEW_LINE INDENT l += 1 NEW_LINE DEDENT else : NEW_LINE INDENT r -= 1 NEW_LINE DEDENT DEDENT print ( " The two elementsv { } and { } " . format ( arr [ min_l ] , arr [ min_r ] , arr [ max_l ] ) ) NEW_LINE DEDENT arr = [ 1 , 60 , - 10 , 70 , - 80 , 85 ] NEW_LINE n = len ( arr ) NEW_LINE min abs ( arr ) NEW_LINE def partition ( arr , l , r ) : NEW_LINE INDENT x = arr [ r ] NEW_LINE i = ( l - 1 ) NEW_LINE for j in range ( l , r + 1 ) : NEW_LINE INDENT if ( arr [ j ] <= x ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT temp = arr [ i ] NEW_LINE arr [ i ] = arr [ j ] NEW_LINE arr [ j ] = temp NEW_LINE DEDENT DEDENT temp = arr [ i + 1 ] NEW_LINE arr [ i + 1 ] = arr [ r ] NEW_LINE arr [ r ] = temp NEW_LINE return i + 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 60 , - 10 , 70 , - 80 , 85 ] NEW_LINE n = len ( arr ) NEW_LINE min abs ( arr ) NEW_LINE partition ( arr , l , r ) NEW_LINE DEDENT
class Solution ( object ) : NEW_LINE INDENT def firstUn pqChar ( self , s ) : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i , ch in enumerate ( s ) : NEW_LINE INDENT if freq [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 1 : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE s = ' leetcode ' NEW_LINE out = sObj . firstUn pqChar ( s ) NEW_LINE print ( out ) NEW_LINE DEDENT
def checkStackPermutation ( ip , op , n ) : NEW_LINE INDENT input = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT input . append ( ip [ i ] ) NEW_LINE DEDENT output = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT output . append ( op [ i ] ) NEW_LINE DEDENT tempStack = [ ] NEW_LINE while ( len ( input ) > 0 ) : NEW_LINE INDENT ele = input [ 0 ] NEW_LINE if ( ele == output [ - 1 ] ) : NEW_LINE INDENT output . pop ( ) NEW_LINE while ( len ( tempStack ) > 0 ) : NEW_LINE INDENT if ( tempStack [ - 1 ] == output [ - 2 ] ) : NEW_LINE INDENT tempStack . pop ( ) NEW_LINE output . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT tempStack . append ( ele ) NEW_LINE DEDENT DEDENT return ( len ( input ) and len ( tempStack ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT input = [ 1 , 2 , 3 ] NEW_LINE output = [ 2 , 1 , 3 ] NEW_LINE n = 3 NEW_LINE if ( checkStackPermutation ( input , output , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not Possible " ) NEW_LINE DEDENT DEDENT
s = input ( ) NEW_LINE t = input ( ) NEW_LINE s = " " . join ( s ) NEW_LINE t = " " . join ( t ) NEW_LINE s = s + s NEW_LINE t = t + t NEW_LINE s = s + s NEW_LINE t = t + t NEW_LINE if s == t : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def getSum ( n , d ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( i % 10 == d ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 30 NEW_LINE d = 3 NEW_LINE print ( getSum ( n , d ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT st , end , n , m = map ( int , input ( ) . split ( ) ) NEW_LINE if st > end : NEW_LINE INDENT end = end - st NEW_LINE st = 0 NEW_LINE DEDENT if n > end : NEW_LINE INDENT end = n - end NEW_LINE n = end - ( end - st ) NEW_LINE DEDENT if m > end : NEW_LINE INDENT end = end - m NEW_LINE m = end - ( end - st ) NEW_LINE DEDENT print ( max ( 0 , end - m * 2 ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT e , s , t = map ( int , input ( ) . split ( ) ) NEW_LINE print ( max ( e - s , t - e + 1 ) ) NEW_LINE DEDENT
def findSum ( N , K ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT ans = ans + ( i % K ) NEW_LINE DEDENT return ans NEW_LINE DEDENT N = 10 NEW_LINE K = 2 NEW_LINE print ( findSum ( N , K ) ) NEW_LINE
from math import ceil NEW_LINE for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE print ( ceil ( ( n + 1 ) / ( 4 * n ) ) ) NEW_LINE DEDENT
PI = 3.14 NEW_LINE def find_area ( r , d ) : NEW_LINE INDENT R = d / PI NEW_LINE R += pow ( r , 2 ) NEW_LINE R = math . sqrt ( R ) NEW_LINE area = PI * pow ( R , 2 ) NEW_LINE return area NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT r , d = 4 , 5 NEW_LINE print ( find_area ( r , d ) ) NEW_LINE DEDENT
def minimumNumbers ( n , s ) : NEW_LINE INDENT if ( s % n ) : NEW_LINE INDENT return s // n + 1 NEW_LINE DEDENT else : NEW_LINE INDENT return s // n NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE s = 11 NEW_LINE print ( minimumNumbers ( n , s ) ) NEW_LINE DEDENT
def countTriplets ( arr , n , m ) : NEW_LINE INDENT count = 0 NEW_LINE arr . sort ( ) NEW_LINE end = n - 1 NEW_LINE while ( end >= 2 ) : NEW_LINE INDENT start = 0 NEW_LINE mid = end - 1 NEW_LINE while ( start < mid ) : NEW_LINE INDENT prod = arr [ end ] * arr [ start ] * arr [ mid ] NEW_LINE if ( prod > m ) : NEW_LINE INDENT mid -= 1 NEW_LINE DEDENT elif ( prod < m ) : NEW_LINE INDENT start += 1 NEW_LINE DEDENT elif ( prod == m ) : NEW_LINE INDENT count += 1 NEW_LINE mid -= 1 NEW_LINE start += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE m = 1 NEW_LINE print ( countTriplets ( arr , n , m ) ) NEW_LINE DEDENT
def findIndex ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return n NEW_LINE DEDENT a = 0 NEW_LINE b = 1 NEW_LINE c = 1 NEW_LINE res = 1 NEW_LINE while ( c < n ) : NEW_LINE INDENT c = a + b NEW_LINE res = res + 1 NEW_LINE a = b NEW_LINE b = c NEW_LINE DEDENT return res NEW_LINE DEDENT result = findIndex ( 21 ) NEW_LINE print ( result ) NEW_LINE
def isVowel ( ch ) : NEW_LINE INDENT if ( ch in [ ' a ' , ' e ' , ' i ' , ' o ' , ' u ' ] ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def is tuple ( string ) : NEW_LINE INDENT for i in range ( len ( string ) ) : NEW_LINE INDENT if ( isVowel ( string [ i ] ) == False and isVowel ( string [ i - 1 ] ) == False ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT for i in range ( 1 , len ( string ) ) : NEW_LINE INDENT if ( isVowel ( string [ i ] ) == False and isVowel ( string [ i - 1 ] ) == False and isVowel ( string [ i + 1 ] ) == False ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " acaba " NEW_LINE n = len ( string ) NEW_LINE if ( is tuple ( string ) == True ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def countWays ( n ) : NEW_LINE INDENT dp = [ 0 ] * ( n + 1 ) NEW_LINE dp [ 0 ] = 0 NEW_LINE dp [ 1 ] = 1 NEW_LINE dp [ 2 ] = 1 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT dp [ i ] = dp [ i - 1 ] + dp [ i - 3 ] + 1 NEW_LINE DEDENT return dp [ n ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 6 NEW_LINE print ( countWays ( n ) ) NEW_LINE DEDENT
def expect ( m , n ) : NEW_LINE INDENT ans = 0.0 NEW_LINE for i in range ( m , 0 , - 1 ) : NEW_LINE INDENT ans += ( ( pow ( i / m , n ) - pow ( ( i - 1 ) / m , n ) ) * i NEW_LINE DEDENT return ans NEW_LINE DEDENT m = 6 NEW_LINE n = 3 NEW_LINE print ( str ( expect ( m , n ) ) ) NEW_LINE
def ProdOfPrimes ( n ) : NEW_LINE INDENT prime = [ True ] * ( n + 1 ) NEW_LINE for p in range ( 2 , int ( n ** ( 1 / 2 ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT prod = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT prod *= i NEW_LINE DEDENT DEDENT return prod NEW_LINE DEDENT n = 10 NEW_LINE print ( ProdOfPrimes ( n ) ) NEW_LINE
def compute ( ) : NEW_LINE INDENT ans = sum ( 1 for y in range ( 1901 , 2000 + 1 ) for m in range ( 1 , 12 + 1 ) if day 7 - day ( y , m , 1 ) == 0 ) NEW_LINE return str ( ans ) NEW_LINE DEDENT def dayOfWeek ( y , m , day ) : NEW_LINE INDENT if ( y < 0 or y > 10000 or m < 1 or m > 12 or day < 1 or day > 31 ) : NEW_LINE INDENT raise ValueError ( ) NEW_LINE DEDENT m = ( month - 3 + 4800 ) % 4800 NEW_LINE y = ( y + m // 12 ) % 400 NEW_LINE m %= 12 NEW_LINE return ( y + y // 4 - y // 100 + ( 13 * m + 2 ) // 5 + day + 2 ) % 7 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def countLeap year ( d ) : NEW_LINE INDENT years = d NEW_LINE if d <= 2 : NEW_LINE INDENT years -= 1 NEW_LINE DEDENT return years // 4 - years // 100 + years // 400 NEW_LINE DEDENT def getDifference ( dt1 , dt2 ) : NEW_LINE INDENT n1 = dt1 . y * 365 + dt1 . d NEW_LINE for i in range ( m - 1 ) : NEW_LINE INDENT n1 += monthDays [ i ] NEW_LINE DEDENT n1 += countLeap year ( dt1 ) NEW_LINE n2 = dt2 . y * 365 + dt2 . d NEW_LINE for i in range ( dt2 . m - 1 ) : NEW_LINE INDENT n2 += monthDays [ i ] NEW_LINE DEDENT n2 += countLeap year ( dt2 ) NEW_LINE return ( n2 - n1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT dt1 = ( 1 , 2 , 2000 ) NEW_LINE dt2 = ( 1 , 2 , 2004 ) NEW_LINE print ( " Difference between twodate is " , getDifference ( dt1 , dt2 ) ) NEW_LINE DEDENT
st = { } ; NEW_LINE def generateNumbers ( n , num , a , b ) : NEW_LINE INDENT if ( num > 0 and num < n ) : NEW_LINE INDENT st [ num ] = 1 ; NEW_LINE DEDENT if ( num >= n ) : NEW_LINE INDENT return ; NEW_LINE DEDENT if ( num * 10 + a > num ) : NEW_LINE INDENT generateNumbers ( n , num * 10 + a , a , b ) ; NEW_LINE DEDENT generateNumbers ( n , num * 10 + b , a , b ) ; NEW_LINE DEDENT def printNumbers ( n ) : NEW_LINE INDENT for i in range ( 10 ) : NEW_LINE INDENT for j in range ( i + 1 , 10 ) : NEW_LINE INDENT generateNumbers ( n , 0 , i , j ) ; NEW_LINE DEDENT DEDENT print ( " The numbers are : " , end = " " ) ; NEW_LINE print ( st . keys ( ) ) ; NEW_LINE DEDENT n = 12 ; NEW_LINE printNumbers ( n ) ; NEW_LINE
n , k , t = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ( t * k ) // 100 + n * k // 100 ) NEW_LINE
while True : NEW_LINE INDENT n , q = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE to = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT line = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE for j in range ( 1 , line [ 0 ] + 1 ) : NEW_LINE INDENT to [ j ] = [ x for x in line [ j : ] if x != j ] NEW_LINE DEDENT DEDENT order = [ ] NEW_LINE used = [ False ] * ( n + 1 ) NEW_LINE def dfs ( x ) : NEW_LINE INDENT if used [ x ] : return NEW_LINE used [ x ] = True NEW_LINE dfs ( to [ x ] ) NEW_LINE order . append ( x ) NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT dfs ( i ) NEW_LINE DEDENT order . reverse ( ) NEW_LINE def dfs2 ( x , used , group ) : NEW_LINE INDENT if used [ x ] : return False NEW_LINE if x in group : return True NEW_LINE group . add ( x ) NEW_LINE return dfs2 ( to [ x ] , used , group ) NEW_LINE DEDENT used = [ False ] * ( n + 1 ) NEW_LINE ans = 0 NEW_LINE for i in order : NEW_LINE INDENT group = set ( ) NEW_LINE if not used [ i ] : NEW_LINE INDENT if dfs2 ( i , used , group ) : ans = i NEW_LINE DEDENT DEDENT print ( ans + 1 ) NEW_LINE DEDENT
def getOddOccurrence ( ar , ar_size ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( ar_size ) : NEW_LINE INDENT res = res ^ ar [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT ar = [ 2 , 3 , 5 , 4 , 5 , 2 , 4 , 3 , 5 , 2 , 4 , 4 , 2 ] NEW_LINE n = len ( ar ) NEW_LINE print ( getOddOccurrence ( ar , n ) ) NEW_LINE DEDENT
def isKth goal ( x , k ) : NEW_LINE INDENT rslt = 1 if ( x & ( 1 << ( k - 1 ) ) ) else 0 NEW_LINE return rslt NEW_LINE DEDENT def isPalindrome ( x ) : NEW_LINE INDENT l = 1 NEW_LINE r = ( int ) ( ( 1 << 31 ) / 8 ) * 8 NEW_LINE while ( l < r ) : NEW_LINE INDENT if ( isKth goal ( x , l ) != isKth goal ( x , r ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT l += 1 NEW_LINE r -= 1 NEW_LINE DEDENT return 1 NEW_LINE DEDENT x = ( 1 << 15 + 1 << 16 ) NEW_LINE print ( isPalindrome ( x ) ) NEW_LINE x = ( 1 << 31 ) + 1 NEW_LINE print ( isPalindrome ( x ) ) NEW_LINE
def SieveOfEratosthenes ( n , isPrime ) : NEW_LINE INDENT isPrime [ 0 ] = isPrime [ 1 ] = False NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT isPrime [ p ] = True NEW_LINE DEDENT for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( isPrime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , n + 1 , p ) : NEW_LINE INDENT isPrime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def findPrimePair ( n ) : NEW_LINE INDENT flag = 0 NEW_LINE isPrime = [ True ] * ( n + 1 ) NEW_LINE SieveOfEratosthenes ( n , isPrime ) NEW_LINE for i in range ( 2 , n ) : NEW_LINE INDENT x = n // i NEW_LINE if ( isPrime [ i ] and isPrime [ x ] and x != i and x * i == n ) : NEW_LINE INDENT print ( i , x ) NEW_LINE flag = 1 NEW_LINE return NEW_LINE DEDENT DEDENT if ( flag == 0 ) : NEW_LINE INDENT print ( " No such pair found " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 39 NEW_LINE findPrimePair ( n ) NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT a = 10 NEW_LINE b = 15 NEW_LINE g = gcd ( a , b ) NEW_LINE print ( " GCD ( " , a , " , " , b , " ) = " , g ) NEW_LINE a = 35 NEW_LINE b = 10 NEW_LINE g = gcd ( a , b ) NEW_LINE print ( " GCD ( " , a , " , " , b , " ) = " , g ) NEW_LINE a = 31 NEW_LINE b = 2 NEW_LINE g = gcd ( a , b ) NEW_LINE print ( " GCD ( " , a , " , " , b , " ) = " , g ) NEW_LINE
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT a = 10 NEW_LINE b = 15 NEW_LINE g = gcd ( a , b ) NEW_LINE print ( " GCD ( " , a , " , " , b , " ) = " , g ) NEW_LINE a = 35 NEW_LINE b = 10 NEW_LINE g = gcd ( a , b ) NEW_LINE print ( " GCD ( " , a , " , " , b , " ) = " , g ) NEW_LINE a = 31 NEW_LINE b = 2 NEW_LINE g = gcd ( a , b ) NEW_LINE print ( " GCD ( " , a , " , " , b , " ) = " , g ) NEW_LINE
SIZE_ u = 10 NEW_LINE def compute ( ) : NEW_LINE INDENT SIZE_ u = 1000000 NEW_LINE ans = 0 NEW_LINE type = [ 0 for i in range ( SIZE_ u + 1 ) ] NEW_LINE for n in range ( 3 , SIZE_ u + 1 ) : NEW_LINE INDENT for m in range ( n - 2 , 0 , - 2 ) : NEW_LINE INDENT tiles = n * n - m * m NEW_LINE if tiles > SIZE_ u : NEW_LINE INDENT break NEW_LINE DEDENT type [ tiles ] += 1 NEW_LINE DEDENT DEDENT for i in range ( type ) : NEW_LINE INDENT if 1 <= i and i <= SIZE_ u : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
from sys import stdin , stdout NEW_LINE def solve ( ) : NEW_LINE INDENT x = stdin . readline ( ) NEW_LINE if x . count ( '0' ) == len ( x ) : NEW_LINE INDENT return ' YES ' NEW_LINE DEDENT else : NEW_LINE INDENT y = len ( x ) - 1 NEW_LINE for i in range ( y ) : NEW_LINE INDENT if x [ i ] == '0' : NEW_LINE INDENT x [ i ] = 1 NEW_LINE DEDENT DEDENT return ' NO ' if x . count ( '0' ) > 0 else ' YES ' NEW_LINE DEDENT DEDENT for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT print ( solve ( ) ) NEW_LINE DEDENT
def maxZeros ( N ) : NEW_LINE INDENT maxm = - 1 NEW_LINE cnt = 0 NEW_LINE while ( N ) : NEW_LINE INDENT if ( N & 1 ) : NEW_LINE INDENT cnt += 1 NEW_LINE N >>= 1 NEW_LINE maxm = max ( maxm , cnt ) NEW_LINE DEDENT else : NEW_LINE INDENT maxm = max ( maxm , cnt ) NEW_LINE cnt = 0 NEW_LINE N >>= 1 NEW_LINE DEDENT DEDENT return maxm NEW_LINE DEDENT N = 14 NEW_LINE print ( maxZeros ( N ) ) NEW_LINE
def nextLongestSeq ( a , n ) : NEW_LINE INDENT maxIdx = 0 NEW_LINE maxLen = 0 NEW_LINE currLen = 0 NEW_LINE currIdx = 0 NEW_LINE for k in range ( n ) : NEW_LINE INDENT if ( a [ k ] > 0 ) : NEW_LINE INDENT currLen += 1 NEW_LINE if ( currLen == 1 ) : NEW_LINE INDENT currIdx = k NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( currLen > maxLen ) : NEW_LINE INDENT maxLen = currLen NEW_LINE maxIdx = currIdx NEW_LINE DEDENT currLen = 0 NEW_LINE DEDENT DEDENT if ( maxLen > 0 ) : NEW_LINE INDENT print ( " Index : " , maxIdx , " , Length : " , maxLen ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No positive sequence itertools . " ) NEW_LINE DEDENT return NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , - 3 , 2 , 3 , 4 , - 6 , 1 , 2 , 3 , 4 , 5 , - 8 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE nextLongestSeq ( arr , n ) NEW_LINE DEDENT
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . right = None NEW_LINE DEDENT DEDENT def construct ( arr , i , j , m , n ) : NEW_LINE INDENT if ( i > n - 1 or j > m - 1 ) : NEW_LINE INDENT return None NEW_LINE DEDENT temp = Node ( data ) NEW_LINE temp . data = arr [ i ] [ j ] NEW_LINE temp . right = construct ( arr , i , j + 1 , m , n ) NEW_LINE temp . down = construct ( arr , i + 1 , j , m , n ) NEW_LINE return temp NEW_LINE DEDENT def display ( head ) : NEW_LINE INDENT Rp = head NEW_LINE while ( Dp ) : NEW_LINE INDENT Rp = Dp NEW_LINE while ( Rp ) : NEW_LINE INDENT print ( Rp . data , end = " " ) NEW_LINE Rp = Rp . right NEW_LINE DEDENT print ( " " ) NEW_LINE Dp = Dp . down NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] NEW_LINE m = 3 NEW_LINE n = 3 NEW_LINE head = construct ( arr , 0 , 0 , m , n ) NEW_LINE display ( head ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE def f ( x ) : NEW_LINE INDENT if x % 2 == 0 : return 0 NEW_LINE for i in range ( 3 , int ( x ** 0.5 ) + 1 , 2 ) : NEW_LINE INDENT if x % i == 0 : return 0 NEW_LINE DEDENT return 1 NEW_LINE DEDENT i = 1 NEW_LINE ans = 0 NEW_LINE while i < n : NEW_LINE INDENT ans += f ( i ) NEW_LINE i += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
def findNthTerm ( N ) : NEW_LINE INDENT if ( N % 2 == 0 ) : NEW_LINE INDENT ans = ( N // 2 ) * 6 + ( N // 2 ) * 2 ; NEW_LINE DEDENT else : NEW_LINE INDENT ans = ( N // 2 + 1 ) * 6 + ( N // 2 ) * 2 ; NEW_LINE DEDENT print ( ans ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 3 ; NEW_LINE findNthTerm ( N ) ; NEW_LINE DEDENT
def isRectangle ( a , b , c , d ) : NEW_LINE INDENT if ( a == b and a == c and a == d and c == d and b == c and b == d ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif ( a == b and c == d ) : NEW_LINE INDENT return True NEW_LINE DEDENT elif ( a == d and b == c ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 1 NEW_LINE b = 2 NEW_LINE c = 3 NEW_LINE d = 4 NEW_LINE if ( isRectangle ( a , b , c , d ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
from math import sqrt NEW_LINE def discreteLogarger ( a , b , m ) : NEW_LINE INDENT n = int ( sqrt ( m ) + 1 ) NEW_LINE an = 1 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT an = ( an * a ) % m NEW_LINE DEDENT value = [ 0 ] * m NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT if ( value [ cur ] == 0 ) : NEW_LINE INDENT value [ cur ] = i NEW_LINE DEDENT cur = ( cur * an ) % m NEW_LINE DEDENT i = 0 NEW_LINE cur = b NEW_LINE while ( i < n ) : NEW_LINE INDENT if ( value [ cur ] > 0 ) : NEW_LINE INDENT ans = value [ cur ] * n - i NEW_LINE if ( ans < m ) : NEW_LINE INDENT return ans NEW_LINE DEDENT DEDENT cur = ( cur * a ) % m NEW_LINE i += 1 NEW_LINE DEDENT return - 1 NEW_LINE DEDENT a = 2 NEW_LINE b = 3 NEW_LINE m = 5 NEW_LINE print ( discreteLogarger ( a , b , m ) ) NEW_LINE a = 3 NEW_LINE b = 7 NEW_LINE m = 11 NEW_LINE print ( discreteLogarger ( a , b , m ) ) NEW_LINE
import sys NEW_LINE def FindMinimumCost ( ind , a , n , k , dp ) : NEW_LINE INDENT if ( ind == ( n - 1 ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( dp [ ind ] != - 1 ) : NEW_LINE INDENT return dp [ ind ] NEW_LINE DEDENT else : NEW_LINE INDENT ans = sys . maxsize NEW_LINE for i in range ( 1 , k + 1 ) : NEW_LINE INDENT if ( ind + i < n ) : NEW_LINE INDENT ans = min ( ans , abs ( a [ ind + i ] - a [ ind ] ) + FindMinimumCost ( ind + i , a , n , k , dp ) ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT dp [ ind ] = ans NEW_LINE return ans NEW_LINE DEDENT a = [ 10 , 30 , 40 , 50 , 20 ] NEW_LINE k = 3 NEW_LINE n = len ( a ) NEW_LINE dp = [ - 1 ] * n NEW_LINE print ( FindMinimumCost ( 0 , a , n , k , dp ) ) NEW_LINE
from math import gcd NEW_LINE def Probability ( sum , times ) : NEW_LINE INDENT II = 6 NEW_LINE total = 36 NEW_LINE probability = 0 NEW_LINE for i in range ( 1 , 6 ) : NEW_LINE INDENT for j in range ( 1 , 6 ) : NEW_LINE INDENT if ( ( i + j ) == sum ) : NEW_LINE INDENT II += 1 NEW_LINE DEDENT DEDENT DEDENT gcd1 = gcd ( II , total ) NEW_LINE II += 1 NEW_LINE total = total // gcd1 NEW_LINE probability = pow ( total , times ) NEW_LINE return probability NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sum = 7 NEW_LINE times = 7 NEW_LINE print ( 1 , " / " , Probability ( sum , times ) ) NEW_LINE DEDENT
K , N = map ( int , input ( ) . split ( ) ) NEW_LINE if K % 2 == 0 : NEW_LINE INDENT print ( ( K // 2 ) * ( K // 2 + 1 ) * ( K // 2 + 2 ) ) NEW_LINE exit ( ) NEW_LINE DEDENT mod = 998244353 NEW_LINE ans = 0 NEW_LINE for l in range ( 1 , K + 1 ) : NEW_LINE INDENT r = l + 2 NEW_LINE ans += ( K - l ) * ( K // 2 + r ) * ( ( l + 1 ) // 2 ) * ( K // 2 + r ) NEW_LINE ans %= mod NEW_LINE DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = [ input ( ) for i in range ( n ) ] NEW_LINE b = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == " J " : NEW_LINE INDENT b . append ( a [ i ] * 380000 ) NEW_LINE DEDENT else : NEW_LINE INDENT b . append ( a [ i ] * 380000 ) NEW_LINE DEDENT DEDENT print ( sum ( b ) ) NEW_LINE
def getCount ( arr , n , num1 , num2 ) : NEW_LINE INDENT i = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == num1 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( i >= n - 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT j = n - 1 NEW_LINE for j in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT if ( arr [ j ] == num2 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( j == i ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return ( j - i - 1 ) NEW_LINE DEDENT arr = [ 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE num1 = 5 NEW_LINE num2 = 4 NEW_LINE print ( getCount ( arr , n , num1 , num2 ) ) NEW_LINE
while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE a = sorted ( [ int ( input ( ) ) for i in range ( n ) ] ) NEW_LINE ans = 1000000001 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT ans = min ( ans , a [ i ] - a [ j ] ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def countSetBits ( n ) : NEW_LINE INDENT cnt = 0 NEW_LINE setBits = [ 0 ] * ( n + 1 ) NEW_LINE setBits [ 0 ] = 0 NEW_LINE setBits [ 1 ] = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( i % 2 == 0 ) : NEW_LINE INDENT setBits [ i ] = setBits [ i // 2 ] NEW_LINE DEDENT else : NEW_LINE INDENT setBits [ i ] = setBits [ i - 1 ] + 1 NEW_LINE DEDENT DEDENT for i in range ( 0 , n + 1 ) : NEW_LINE INDENT cnt = cnt + setBits [ i ] NEW_LINE DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE print ( countSetBits ( n ) ) NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def largestGCD1Subset ( A , n ) : NEW_LINE INDENT currentGCD = A [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT currentGCD = gcd ( currentGCD , A [ i ] ) NEW_LINE if ( currentGCD == 1 ) : NEW_LINE INDENT return n NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = [ 2 , 18 , 6 , 3 ] NEW_LINE n = len ( A ) NEW_LINE print ( largestGCD1Subset ( A , n ) ) NEW_LINE DEDENT
import itertools NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 7 NEW_LINE numDivisors = [ 2 ] * ( LIMIT + 1 ) NEW_LINE for i in range ( 2 , len ( numDivisors ) ) : NEW_LINE INDENT for j in itertools . count ( i * 2 , len ( numDivisors ) , i ) : NEW_LINE INDENT numDivisors [ j ] += 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 2 , len ( numDivisors ) - 1 ) : NEW_LINE INDENT if numDivisors [ i ] == numDivisors [ i + 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def updateArray ( arr , n ) : NEW_LINE INDENT for i in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT arr [ i ] = arr [ i - 1 ] NEW_LINE DEDENT arr [ 0 ] = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 5 , 1 , 3 , 2 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE updateArray ( arr , N ) NEW_LINE DEDENT
def find heapq ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( sum - arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 5 , 1 , 3 , 2 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE find heapq ( arr , N ) NEW_LINE DEDENT
def updateArray ( arr , n ) : NEW_LINE INDENT for i in range ( n - 2 ) : NEW_LINE INDENT arr [ i ] = arr [ i + 1 ] NEW_LINE DEDENT arr [ n - 1 ] = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 5 , 1 , 3 , 2 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE updateArray ( arr , N ) NEW_LINE DEDENT
def findMinDifference ( arr , n ) : NEW_LINE INDENT min = 0 NEW_LINE secondMax = 0 NEW_LINE min = max ( arr [ 0 ] , arr [ 1 ] ) NEW_LINE if ( arr [ 0 ] < arr [ 1 ] ) : NEW_LINE INDENT arr [ 0 ] = arr [ 1 ] NEW_LINE DEDENT if ( arr [ 0 ] > arr [ 1 ] ) : NEW_LINE INDENT secondMax = max ( arr [ 0 ] , arr [ 1 ] ) NEW_LINE DEDENT elif ( arr [ i ] > secondMax ) : NEW_LINE INDENT secondMax = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] < min ) : NEW_LINE INDENT secondMin = min NEW_LINE min = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] < secondMin ) : NEW_LINE INDENT secondMin = arr [ i ] NEW_LINE DEDENT DEDENT diff = min ( max - secondMin , secondMax - min ) NEW_LINE return diff NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 4 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMinDifference ( arr , n ) ) NEW_LINE DEDENT
from math import sqrt NEW_LINE from collections import defaultdict NEW_LINE n = int ( input ( ) ) NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE d = defaultdict ( int ) NEW_LINE if a % 2 == 0 : NEW_LINE INDENT d [ a ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ a ] += 1 NEW_LINE DEDENT if d [ b ] > 1 : NEW_LINE INDENT ans = [ b ] NEW_LINE DEDENT DEDENT d = defaultdict ( int ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = ans [ i ] NEW_LINE for j in d : NEW_LINE INDENT if x % j == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT while x % j == 0 : NEW_LINE INDENT x //= j NEW_LINE ans . append ( j ) NEW_LINE DEDENT DEDENT DEDENT if len ( ans ) == 1 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( * ans , sep = ' \n ' ) NEW_LINE DEDENT
import sys NEW_LINE from operator import itemgetter NEW_LINE inf = 1 << 30 NEW_LINE def solve ( ) : NEW_LINE INDENT while 1 : NEW_LINE INDENT n = int ( sys . stdin . readline ( ) . rstrip ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT return NEW_LINE DEDENT l = sorted ( list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) ) NEW_LINE i = 0 NEW_LINE ans = [ ] NEW_LINE while i < n : NEW_LINE INDENT if l [ i ] == l [ i - 1 ] : NEW_LINE INDENT ans . append ( l [ i ] ) NEW_LINE i += 1 NEW_LINE DEDENT elif i < n - 1 : NEW_LINE INDENT print ( " NOl " ) NEW_LINE return NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( " YES " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT
def factorial ( n ) : NEW_LINE INDENT return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 1 ) ; NEW_LINE DEDENT num = 5 ; NEW_LINE print ( " Factorial of " , num , " is " , factorial ( num ) ) ; NEW_LINE
n , d , x = map ( int , input ( ) . split ( ) ) NEW_LINE c = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( d ) ] NEW_LINE d_val = [ 0 ] * ( x + 1 ) NEW_LINE for i in range ( d ) : NEW_LINE INDENT for j in range ( x , x + 1 ) : NEW_LINE INDENT d_val [ j ] = max ( d_val [ j ] , d_val [ j - x ] + c [ j - x ] [ i ] ) NEW_LINE DEDENT DEDENT print ( x ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE m = int ( input ( ) ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT l , r = map ( int , input ( ) . split ( ) ) NEW_LINE if l == 1 : NEW_LINE INDENT a [ r ] = sum ( a [ : l - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT a [ r ] = a [ r - 1 ] - sum ( a [ l - 1 : r - 1 ] ) NEW_LINE DEDENT DEDENT print ( sum ( a ) ) NEW_LINE
def findMinimumX ( a , n ) : NEW_LINE INDENT st = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT st [ a [ i ] ] = 1 NEW_LINE DEDENT if ( len ( st ) == 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( len ( st ) == 2 ) : NEW_LINE INDENT for i in st : NEW_LINE INDENT el1 = st [ i ] NEW_LINE el2 = st [ i ] NEW_LINE if ( ( el2 - el1 ) % 2 == 0 ) : NEW_LINE INDENT return ( el2 - el1 ) // 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( el2 - el1 ) NEW_LINE DEDENT DEDENT if ( len ( st ) == 3 ) : NEW_LINE INDENT for i in st : NEW_LINE INDENT el1 = st [ i ] NEW_LINE el2 = st [ i ] NEW_LINE el3 = st [ i ] NEW_LINE if ( ( el2 - el1 ) == ( el3 - el2 ) ) : NEW_LINE INDENT return el2 - el1 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT a = [ 1 , 4 , 4 , 7 , 4 , 1 ] NEW_LINE n = len ( a ) NEW_LINE print ( findMinimumX ( a , n ) ) NEW_LINE
from math import * NEW_LINE def findX ( n , k ) : NEW_LINE INDENT r = n NEW_LINE v = 0 NEW_LINE m = int ( sqrt ( k ) + 1 ) NEW_LINE for i in range ( 2 , m + 1 , 1 ) : NEW_LINE INDENT if ( i == m ) : NEW_LINE INDENT i = k NEW_LINE DEDENT v = 0 NEW_LINE if ( k % i == 0 ) : NEW_LINE INDENT v += 1 NEW_LINE k //= i NEW_LINE DEDENT if ( v > 0 ) : NEW_LINE INDENT t = n NEW_LINE while ( t > 0 ) : NEW_LINE INDENT t = t // i NEW_LINE t += 1 NEW_LINE DEDENT r = min ( r , u // v ) NEW_LINE DEDENT DEDENT return r NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE k = 2 NEW_LINE print ( findX ( n , k ) ) NEW_LINE DEDENT
def LiesieRectangle ( a , b , x , y ) : NEW_LINE INDENT if ( x - y - b <= 0 and x - y + b >= 0 and x + y - 2 * a + b <= 0 and x + y - b >= 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT a = 7 NEW_LINE b = 2 NEW_LINE x = 4 NEW_LINE y = 5 NEW_LINE if ( LiesieRectangle ( a , b , x , y ) ) : NEW_LINE INDENT print ( " Given point EPS " , " inside the rectangle " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Given point does not " , " lie on the rectangle " ) NEW_LINE DEDENT
N = 1000 NEW_LINE def countPairs ( arr , n ) : NEW_LINE INDENT size = ( 2 * N ) + 1 NEW_LINE freq = [ 0 for i in range ( size ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x = arr [ i ] NEW_LINE freq [ x + N ] += 1 NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( size ) : NEW_LINE INDENT if ( freq [ i ] > 0 ) : NEW_LINE INDENT ans += ( ( freq [ i ] ) * ( freq [ i ] - 1 ) ) // 2 NEW_LINE for j in range ( i + 2 , 2000 , 2 ) : NEW_LINE INDENT if ( freq [ j ] > 0 and ( freq [ ( i + j ) // 2 ] > 0 ) ) : NEW_LINE INDENT ans += ( freq [ i ] * freq [ j ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT arr = [ 4 , 2 , 5 , 1 , 3 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countPairs ( arr , n ) ) NEW_LINE
def sum ( x ) : NEW_LINE INDENT sum += x NEW_LINE return ( ( float ) sum ) / n NEW_LINE DEDENT def streamAvg ( arr , n ) : NEW_LINE INDENT avg = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT avg = flyg ( arr [ i ] ) NEW_LINE print ( " INF " , " INF " , " numbers is " , avg ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 20 , 30 , 40 , 50 , 60 ] NEW_LINE n = len ( arr ) NEW_LINE streamAvg ( arr , n ) NEW_LINE DEDENT
MAX = 10000 NEW_LINE s = set ( ) NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime = [ True for i in range ( MAX ) ] NEW_LINE prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , MAX , 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT product = 1 NEW_LINE for p in range ( 2 , MAX , 1 ) : NEW_LINE INDENT if ( prime [ p ] ) : NEW_LINE INDENT product = product * p NEW_LINE s . add ( product + 1 ) NEW_LINE DEDENT DEDENT DEDENT def isEuclid ( n ) : NEW_LINE INDENT if n in s : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n = 31 NEW_LINE if ( isEuclid ( n ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT n = 42 NEW_LINE if ( isEuclid ( n ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
n , b = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE odds = [ ] NEW_LINE evens = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] % 2 == 0 : NEW_LINE INDENT odds . append ( a [ i ] - a [ i - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT evens . append ( a [ i ] - a [ i - 1 ] ) NEW_LINE DEDENT DEDENT odds = sorted ( odds , reverse = True ) NEW_LINE if len ( odds ) > 1 : NEW_LINE INDENT print ( len ( evens ) * 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( len ( odds ) * 2 ) NEW_LINE DEDENT
def maxOperations ( str ) : NEW_LINE INDENT i = g = gk = gks = 0 NEW_LINE for i in range ( len ( str ) ) : NEW_LINE INDENT if str [ i ] == ' g ' : NEW_LINE INDENT g += 1 NEW_LINE DEDENT elif str [ i ] == ' k ' : NEW_LINE INDENT if g > 0 : NEW_LINE INDENT g -= 1 NEW_LINE gk += 1 NEW_LINE DEDENT DEDENT elif str [ i ] == ' s ' : NEW_LINE INDENT if gk > 0 : NEW_LINE INDENT gk -= 1 NEW_LINE gks += 1 NEW_LINE DEDENT DEDENT DEDENT return gks NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = " ggkssk " NEW_LINE print ( maxOperations ( a ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE print ( a [ n - 1 ] - a [ 0 ] + 1 - n ) NEW_LINE
from collections import defaultdict NEW_LINE import sys , os , io NEW_LINE m , n = map ( int , input ( ) . split ( ) ) NEW_LINE inf = pow ( 2 , m + 1 ) NEW_LINE ma = [ inf ] * ( m + 1 ) NEW_LINE l = [ ] NEW_LINE for _ in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE l . append ( ( a , b ) ) NEW_LINE l [ a ] . append ( b ) NEW_LINE l [ b ] . append ( a ) NEW_LINE DEDENT s = set ( ) NEW_LINE t = 0 NEW_LINE c = [ ] NEW_LINE for i in range ( 1 , m + 1 ) : NEW_LINE INDENT if not s : NEW_LINE INDENT t += 1 NEW_LINE c += [ i ] NEW_LINE DEDENT if not t : NEW_LINE INDENT s . add ( i ) NEW_LINE t = 1 NEW_LINE DEDENT if not t : NEW_LINE INDENT t += 1 NEW_LINE c . append ( i ) NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in c : NEW_LINE INDENT if not t : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def kthSmallest ( arr , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE return arr [ k - 1 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 12 , 3 , 5 , 7 , 19 ] NEW_LINE k = 2 NEW_LINE print ( " K ' th smallest element is " , kthSmallest ( arr , k ) ) NEW_LINE DEDENT
for s in [ * open ( 0 ) ] [ 2 : : 2 ] : NEW_LINE INDENT a = [ 0 , * map ( int , s . split ( ) ) , 0 ] ; i = 1 NEW_LINE while a [ i ] == a [ i - 1 ] : i += 1 NEW_LINE print ( * ( a [ i : ] + a [ : i ] [ : : - 1 ] ) ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT END_NUM = 1 NEW_LINE END_NUM = 500 NEW_LINE CROAK_SEQ = " P pp pp pp pp ppN perm perm perm perm = " ( 1 - END_NUM ) * 2 " NEW_LINE ans = max ( 0 , end_NUM - 11 ) NEW_LINE for i in range ( END_NUM + 1 ) : NEW_LINE INDENT for j in range ( 0 , END_NUM + 1 ) : NEW_LINE INDENT pos = i NEW_LINE trial_num = 1 NEW_LINE if ( isPrime [ pos ] == ( CROAK_SEQ [ 0 ] == " P " ) ) : NEW_LINE INDENT trial_num *= 2 NEW_LINE DEDENT for k in range ( 0 , NUM_Jlips_SEQ ) : NEW_LINE INDENT if ( pos <= END_NUM ) : NEW_LINE INDENT pos += 1 NEW_LINE DEDENT elif ( pos >= END_NUM ) : NEW_LINE INDENT pos -= 1 NEW_LINE DEDENT elif ( ( j >> k ) & 1 == 0 ) : NEW_LINE INDENT pos += 1 NEW_LINE DEDENT else : NEW_LINE INDENT pos -= 1 NEW_LINE DEDENT DEDENT if ( isPrime [ pos ] == ( CROAK_SEQ [ k + 1 ] == " P " ) ) : NEW_LINE INDENT trial_num *= 2 NEW_LINE DEDENT DEDENT ans = max ( ans , trial_num ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
from math import * NEW_LINE def distance ( lat1 , lat2 , lon1 , lon2 ) : NEW_LINE INDENT lon1 = ( lon1 ) NEW_LINE lon2 = ( lon2 ) NEW_LINE lat1 = ( lat1 ) NEW_LINE lat2 = ( lat2 ) NEW_LINE dlon = lon2 - lon1 NEW_LINE dlat = lat2 - lat1 NEW_LINE a = ( pow ( math . sin ( dlat / 2 ) , 2 ) + math . cos ( lat1 ) * math . cos ( lat2 ) * math . sin ( dlon / 2 ) , 2 ) NEW_LINE c = 2 * math . asin ( math . sqrt ( a ) ) NEW_LINE return ( c * r ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT lat1 = 5 3.32055555556 NEW_LINE lat2 = 53.39999999911 NEW_LINE lon1 = -6297070707122221 NEW_LINE lon2 = -6997111123 NEW_LINE print ( " M " + distance ( lat1 , lat2 , lon1 , lon2 ) + " K . M " ) NEW_LINE DEDENT
def centeredOctahedral ( n ) : NEW_LINE INDENT return ( 2 * n + 1 ) * ( 2 * n * n + 2 * n + 3 ) // 3 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 NEW_LINE print ( centeredOctahedral ( n ) ) NEW_LINE print ( ) NEW_LINE n = 9 NEW_LINE print ( centeredOctahedral ( n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT n , m , p = map ( int , input ( ) . split ( ) ) NEW_LINE m2 = m NEW_LINE p2 = p NEW_LINE cost = [ 100 * n ] * n NEW_LINE d = { } NEW_LINE def update ( k , x ) : NEW_LINE INDENT k += m2 NEW_LINE if k in d : NEW_LINE INDENT d [ k ] = x NEW_LINE DEDENT else : NEW_LINE INDENT d [ k ] = x NEW_LINE DEDENT DEDENT def query ( start ) : NEW_LINE INDENT global d NEW_LINE if d [ start ] == 0 : NEW_LINE INDENT return start NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT def dfs ( start ) : NEW_LINE INDENT global d NEW_LINE if d [ start ] == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT if p [ i ] != p [ i - 1 ] : NEW_LINE INDENT return dfs ( i - 1 ) NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def dfs2 ( start , i ) : NEW_LINE INDENT global d NEW_LINE if d [ start ] == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT for j in range ( 1 , m ) : NEW_LINE INDENT if p [ j ] != p [ i - 1 ] : NEW_LINE INDENT return dfs2 ( start , j ) NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT print ( min ( dfs2 ( 0 , 0 ) , dfs2 ( 1 , 0 ) , dfs2 ( - 1 , 0 ) ) ) NEW_LINE DEDENT main ( ) NEW_LINE
import math NEW_LINE def SumDivPrime ( A , n ) : NEW_LINE INDENT max_val = ( max_val + 1 ) NEW_LINE prime = [ True for i in range ( max_val + 1 ) ] NEW_LINE prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , int ( math . sqrt ( max_val ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( 2 * p , max_val + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ A [ i ] ] ) : NEW_LINE INDENT sum += A [ i ] NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( prime [ A [ i ] ] and sum % A [ i ] == 0 ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE return NEW_LINE DEDENT DEDENT print ( " NO " ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( A ) NEW_LINE SumDivPrime ( A , n ) NEW_LINE DEDENT
def leftRotate ( arr , n , k ) : NEW_LINE INDENT for i in range ( k , k + n ) : NEW_LINE INDENT print ( arr [ i % n ] , end = " " ) NEW_LINE DEDENT DEDENT arr = [ 1 , 3 , 5 , 7 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE leftRotate ( arr , n , k ) NEW_LINE print ( " " ) NEW_LINE k = 3 NEW_LINE leftRotate ( arr , n , k ) NEW_LINE print ( " " ) NEW_LINE k = 4 NEW_LINE leftRotate ( arr , n , k ) NEW_LINE print ( " " ) NEW_LINE
def closestMultiple ( n , x ) : NEW_LINE INDENT if ( x > n ) : NEW_LINE INDENT return x NEW_LINE DEDENT n = n + x / 2 NEW_LINE n = n - ( n % x ) NEW_LINE return n NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 56287 NEW_LINE x = 27 NEW_LINE print ( closestMultiple ( n , x ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT s = input ( ) NEW_LINE c1 = c2 = 0 NEW_LINE for i in s : NEW_LINE INDENT if i == '0' : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT elif i == '1' and i != '0' : NEW_LINE INDENT c2 += 1 NEW_LINE DEDENT elif i == '0' and i != '0' : NEW_LINE INDENT c1 += 1 NEW_LINE DEDENT DEDENT if ( c1 == c2 == 0 and c2 == 1 ) or ( c1 == 0 and c2 == 1 ) : NEW_LINE INDENT print ( " cyan " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " red " ) NEW_LINE DEDENT DEDENT
dp = [ [ - 1 for i in range ( 8101 ) ] for j in range ( 901 ) ] NEW_LINE def minimumNumberOfDigits ( a , b ) : NEW_LINE INDENT if ( a > b or a < 0 or b < 0 or a > 900 or b > 8100 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if ( a == 0 and b == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( dp [ a ] [ b ] != - 1 ) : NEW_LINE INDENT return dp [ a ] [ b ] NEW_LINE DEDENT ans = 101 NEW_LINE for i in range ( 9 , 0 , - 1 ) : NEW_LINE INDENT k = minimumNumberOfDigits ( a - i , b - ( i * i ) ) NEW_LINE if ( k != - 1 ) : NEW_LINE INDENT ans = min ( ans , k + 1 ) NEW_LINE DEDENT DEDENT dp [ a ] [ b ] = ans NEW_LINE return ans NEW_LINE DEDENT def printSmallestNumber ( a , b ) : NEW_LINE INDENT for row in dp : NEW_LINE INDENT print ( row , end = " " ) NEW_LINE DEDENT print ( " " ) NEW_LINE k = minimumNumberOfDigits ( a , b ) NEW_LINE if ( k == - 1 or k > 100 ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE DEDENT else : NEW_LINE INDENT while ( a > 0 and b > 0 ) : NEW_LINE INDENT for i in range ( 1 , 10 ) : NEW_LINE INDENT if ( a >= i and b >= i * i and 1 + dp [ a - i ] [ b - i * i ] == dp [ a ] [ b ] ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE a -= i NEW_LINE b -= i * i NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 18 NEW_LINE b = 162 NEW_LINE printSmallestNumber ( a , b ) NEW_LINE DEDENT
N = 5005 NEW_LINE ans = 0 NEW_LINE gr = [ [ ] for i in range ( N ) ] NEW_LINE for i in range ( N ) : NEW_LINE INDENT gr [ i ] . append ( i ) NEW_LINE gr [ i ] . append ( i ) NEW_LINE DEDENT def dfs ( v , par ) : NEW_LINE INDENT d [ v ] [ 0 ] = 1 NEW_LINE for i in gr [ v ] : NEW_LINE INDENT if ( i != par ) : NEW_LINE INDENT dfs ( i , v ) NEW_LINE for j in range ( 1 , k + 1 ) : NEW_LINE INDENT ans += d [ i ] [ j - 1 ] * d [ v ] [ k - j ] NEW_LINE DEDENT for j in range ( 1 , k + 1 ) : NEW_LINE INDENT d [ v ] [ j ] += d [ i ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE k = 2 NEW_LINE for i in range ( N ) : NEW_LINE INDENT gr [ i ] . append ( 2 ) NEW_LINE DEDENT Add_edge ( 1 , 2 ) NEW_LINE Add_edge ( 2 , 3 ) NEW_LINE Add_edge ( 3 , 4 ) NEW_LINE Add_edge ( 2 , 5 ) NEW_LINE dfs ( 1 , 0 ) NEW_LINE print ( ans ) NEW_LINE DEDENT
def findSubsequence ( arr , n ) : NEW_LINE INDENT Len = 1 NEW_LINE tmp = 0 NEW_LINE i , j , d = 0 , 0 , 0 NEW_LINE dp = [ 0 for i in range ( 10 ) ] NEW_LINE cnt = [ 0 for i in range ( 10 ) ] NEW_LINE locMax = 0 NEW_LINE tmp = arr [ 0 ] NEW_LINE while ( tmp > 0 ) : NEW_LINE INDENT dp [ tmp % 10 ] = 1 NEW_LINE tmp //= 10 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT tmp = arr [ i ] NEW_LINE locMax = 1 NEW_LINE cnt = [ 0 for i in range ( 10 ) ] NEW_LINE while ( tmp > 0 ) : NEW_LINE INDENT cnt [ tmp % 10 ] = 1 NEW_LINE tmp //= 10 NEW_LINE DEDENT for i in range ( 10 ) : NEW_LINE INDENT if ( cnt [ i ] == 1 ) : NEW_LINE INDENT dp [ i ] += 1 NEW_LINE locMax = max ( locMax , dp [ i ] ) NEW_LINE DEDENT DEDENT for i in range ( 10 ) : NEW_LINE INDENT if ( cnt [ i ] == 1 ) : NEW_LINE INDENT dp [ i ] = locMax NEW_LINE DEDENT DEDENT Len = max ( Len , locMax ) NEW_LINE DEDENT return Len NEW_LINE DEDENT arr = [ 1 , 12 , 44 , 29 , 33 , 96 , 89 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findSubsequence ( arr , n ) ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n , m = [ int ( num ) for num in input ( ) . split ( ) ] NEW_LINE a = [ int ( num ) for num in input ( ) . split ( ) ] NEW_LINE b = [ int ( num ) for num in input ( ) . split ( ) ] NEW_LINE c = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] != b [ i ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE DEDENT
from math import sqrt NEW_LINE def totalPrimeFactors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE if ( n % 2 == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE while ( n % 2 == 0 ) : NEW_LINE INDENT n = n / 2 NEW_LINE DEDENT DEDENT for i in range ( 3 , int ( sqrt ( n ) ) + 1 , 2 ) : NEW_LINE INDENT if ( ( n % i == 0 ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT while ( ( n % i == 0 ) ) : NEW_LINE INDENT n = n / 2 NEW_LINE DEDENT DEDENT if ( n > 2 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT def countPairs ( G , L ) : NEW_LINE INDENT if ( L % G != 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT div = L // G NEW_LINE return ( 1 << totalPrimeFactors ( div ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT G , L = 2 , 12 NEW_LINE print ( " Total possible pair with GCD " , G ) NEW_LINE print ( " & LCM " , L ) NEW_LINE print ( " = " , countPairs ( G , L ) ) NEW_LINE DEDENT
def calculate_sum ( a , N ) : NEW_LINE INDENT m = N // a NEW_LINE sum = m * ( m + 1 ) // 2 NEW_LINE ans = a * sum NEW_LINE return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 7 NEW_LINE N = 49 NEW_LINE print ( " Sum of divisor of 7 up to 49 = " , N , " = " , calculate_sum ( a , N ) ) NEW_LINE DEDENT
n , m , k = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = input ( ) . split ( ) NEW_LINE w = int ( b ) * k // 100 NEW_LINE if w < 100 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT l . append ( [ a , w ] ) NEW_LINE DEDENT for _ in range ( m ) : NEW_LINE INDENT a = input ( ) NEW_LINE l . append ( [ a , 0 ] ) NEW_LINE DEDENT print ( c ) NEW_LINE for i in l : NEW_LINE INDENT print ( i [ 0 ] , i [ 1 ] ) NEW_LINE DEDENT
def countSolutions ( a ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( a + 1 ) : NEW_LINE INDENT if ( a == ( i + ( a ^ i ) ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 3 NEW_LINE print ( countSolutions ( a ) ) NEW_LINE DEDENT
def next ( arr , target ) : NEW_LINE INDENT start = 0 NEW_LINE end = len ( arr ) - 1 NEW_LINE ans = - 1 NEW_LINE while ( start <= end ) : NEW_LINE INDENT mid = int ( ( start + end ) / 2 ) NEW_LINE if ( arr [ mid ] <= target ) : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans = mid NEW_LINE end = mid - 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 5 , 8 , 12 ] NEW_LINE print ( next ( arr , 8 ) ) NEW_LINE
word = [ " zero " , " one " , " two " , " three " , " four " , " five " , " six " , " seven " , " eight " , " nine " ] ; NEW_LINE def printWordsWithout max ( n , m ) : NEW_LINE INDENT digits = [ 0 ] * 10 ; NEW_LINE dc = 0 ; NEW_LINE while ( True ) : NEW_LINE INDENT digits [ dc ] = n % 10 ; NEW_LINE n = n // 10 ; NEW_LINE dc += 1 ; NEW_LINE DEDENT while ( n ) : NEW_LINE INDENT for i in range ( dc - 1 , - 1 , - 1 ) : NEW_LINE INDENT print ( word [ digits [ i ] ] , end = " " ) ; NEW_LINE DEDENT DEDENT DEDENT n = 350 ; NEW_LINE printWordsWithout max ( n , m ) ; NEW_LINE
n , k , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( reverse = True ) NEW_LINE a = list ( zip ( a , a [ 1 : ] ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT l . append ( a [ i ] ) NEW_LINE DEDENT l . sort ( reverse = True ) NEW_LINE l . append ( a [ 0 ] ) NEW_LINE s = 0 NEW_LINE r = m NEW_LINE for i in range ( 1 , len ( l ) ) : NEW_LINE INDENT s += l [ i ] NEW_LINE r = max ( r , s + min ( m - i , len ( l ) - 1 ) * k ) NEW_LINE DEDENT print ( r ) NEW_LINE
def solve ( a , b ) : NEW_LINE INDENT l = len ( a ) NEW_LINE min , max = 0 , 0 NEW_LINE for i in range ( l ) : NEW_LINE INDENT if ( a [ i ] == ' + ' or b [ i ] == ' + ' or a [ i ] != b [ i ] ) : NEW_LINE INDENT max += 1 NEW_LINE DEDENT if ( a [ i ] != ' + ' and b [ i ] != ' + ' and a [ i ] != b [ i ] ) : NEW_LINE INDENT min += 1 NEW_LINE DEDENT DEDENT print ( min + max ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s1 = " a + c " NEW_LINE s2 = " + b " NEW_LINE solve ( s1 , s2 ) NEW_LINE DEDENT
def TotalWays ( n , s , k ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE dp [ s - 1 ] = 1 NEW_LINE for i in range ( s , n ) : NEW_LINE INDENT idx = max ( s - 1 , i - k ) NEW_LINE for j in range ( idx , i ) : NEW_LINE INDENT dp [ i ] += dp [ j ] NEW_LINE DEDENT DEDENT return dp [ n - 1 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE k = 2 NEW_LINE s = 2 NEW_LINE print ( " Total Ways = " , TotalWays ( n , s , k ) ) NEW_LINE DEDENT
def countEvenOdd ( n ) : NEW_LINE INDENT even_count = 0 NEW_LINE odd_count = 0 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT rem = n % 10 NEW_LINE if ( rem % 2 == 0 ) : NEW_LINE INDENT even_count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd_count += 1 NEW_LINE DEDENT n = n // 10 NEW_LINE DEDENT print ( " Even count : " , even_count ) NEW_LINE print ( " Odd count : " , odd_count ) NEW_LINE if ( even_count % 2 == 0 and odd_count % 2 != 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 2 S NEW_LINE t = countEvenOdd ( n ) NEW_LINE if t == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT n , k = map ( int , input ( ) . split ( ) ) NEW_LINE d = [ [ ] for _ in range ( 10 ) ] NEW_LINE for _ in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE d [ a ] . append ( b ) NEW_LINE d [ b ] . append ( a ) NEW_LINE DEDENT k = k + 1 NEW_LINE dp = [ [ - 1 ] * 10 for _ in range ( k + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT for j in range ( k + 1 ) : NEW_LINE INDENT tmp = 0 NEW_LINE for l in range ( k , 10 ) : NEW_LINE INDENT tmp += d [ l ] [ j ] NEW_LINE DEDENT dp [ i + 1 ] [ tmp ] = max ( dp [ i + 1 ] [ tmp ] , dp [ i ] [ tmp ] + tmp ) NEW_LINE DEDENT DEDENT print ( dp [ k ] [ 0 ] ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def findmin ( p , n ) : NEW_LINE INDENT a = 0 NEW_LINE b = 0 NEW_LINE c = 0 NEW_LINE d = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( p [ i ] . x <= 0 ) : NEW_LINE INDENT a += 1 NEW_LINE DEDENT elif ( p [ i ] . x >= 0 ) : NEW_LINE INDENT b += 1 NEW_LINE DEDENT if ( p [ i ] . y >= 0 ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif ( p [ i ] . y <= 0 ) : NEW_LINE INDENT d += 1 NEW_LINE DEDENT DEDENT return min ( min ( a , b ) , min ( c , d ) ) NEW_LINE DEDENT p = [ 1 , 1 ] NEW_LINE p = [ 2 , 2 ] NEW_LINE p = [ - 1 , - 1 ] NEW_LINE n = len ( p ) NEW_LINE print ( findmin ( p , n ) ) NEW_LINE
from math import sqrt , ceil , floor NEW_LINE def maxGCD ( N , P ) : NEW_LINE INDENT ans = 1 NEW_LINE prime_factors = dict ( ) NEW_LINE for i in range ( 2 , ceil ( sqrt ( P ) ) + 1 ) : NEW_LINE INDENT while ( P % i == 0 ) : NEW_LINE INDENT if i in prime_factors : NEW_LINE INDENT prime_factors [ i ] += 1 NEW_LINE DEDENT P //= i NEW_LINE DEDENT DEDENT if ( P != 1 ) : NEW_LINE INDENT if ( prime_factors [ P ] == 1 ) : NEW_LINE INDENT prime_factors [ P ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT prime_factors [ P ] = ( prime_factors [ P ] + 1 ) NEW_LINE DEDENT DEDENT st = sorted ( prime_factors . keys ( ) ) NEW_LINE for k , v in st : NEW_LINE INDENT ans *= pow ( k , v / N ) NEW_LINE DEDENT return ans NEW_LINE DEDENT N = 3 NEW_LINE P = 24 NEW_LINE print ( maxGCD ( N , P ) ) NEW_LINE
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE mask = k ** 2 NEW_LINE ans = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT tmp = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if a [ j ] & 1 : NEW_LINE INDENT tmp += 1 NEW_LINE DEDENT DEDENT if tmp > 1 : NEW_LINE INDENT ans . append ( tmp ) NEW_LINE DEDENT tmp = 0 NEW_LINE DEDENT ans . append ( " : " ) NEW_LINE for i in range ( k ) : NEW_LINE INDENT tmp += str ( a [ i ] ) + " " NEW_LINE DEDENT print ( tmp [ 0 ] ) NEW_LINE print ( " : " + tmp [ 1 ] ) NEW_LINE
def primeFactorization ( countOfPf , primeFactor ) : NEW_LINE INDENT global countOfPf , primeFactor NEW_LINE countOfPf = countOfPf NEW_LINE primeFactor = primeFactor NEW_LINE DEDENT def generateDivisors ( curIndex , curDivisor , arr ) : NEW_LINE INDENT if ( curIndex == len ( arr ) ) : NEW_LINE INDENT print ( curDivisor , end = " " ) NEW_LINE return NEW_LINE DEDENT for i in range ( 0 , arr [ curIndex ] . countOfPf + 1 ) : NEW_LINE INDENT generateDivisors ( curIndex + 1 , curDivisor , arr ) NEW_LINE curDivisor *= arr [ curIndex ] [ primeFactor ] NEW_LINE DEDENT DEDENT def findDivisors ( n ) : NEW_LINE INDENT arr = [ ] NEW_LINE i = 2 NEW_LINE while ( i * i <= n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT count = 0 NEW_LINE while ( n % i == 0 ) : NEW_LINE INDENT n = n // i NEW_LINE count += 1 NEW_LINE DEDENT arr . append ( primeFactorization ( count , i ) ) NEW_LINE DEDENT i += 1 NEW_LINE DEDENT if ( n > 1 ) : NEW_LINE INDENT arr . append ( primeFactorization ( 1 , n ) ) NEW_LINE DEDENT curIndex = 0 NEW_LINE curDivisor = 1 NEW_LINE generateDivisors ( curIndex , curDivisor , arr ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 6 NEW_LINE findDivisors ( n ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE arr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE arr . append ( [ a , b ] ) NEW_LINE DEDENT set_arr = set ( arr ) NEW_LINE if not set_arr : NEW_LINE INDENT arr = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT set_arr . add ( arr [ i ] [ 0 ] + 1 ) NEW_LINE DEDENT DEDENT if len ( set_arr ) == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT elif len ( set_arr ) == 2 : NEW_LINE INDENT print ( max ( arr ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n - max ( arr ) + 1 ) NEW_LINE DEDENT
def largestPalinSub ( s ) : NEW_LINE INDENT res = " " NEW_LINE mx = ord ( s [ 0 ] ) NEW_LINE for i in range ( 1 , len ( s ) ) : NEW_LINE INDENT mx = max ( mx , ord ( s [ i ] ) ) NEW_LINE DEDENT for i in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ i ] == mx ) : NEW_LINE INDENT res += s [ i ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE print ( largestPalinSub ( s ) ) NEW_LINE DEDENT
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE count = 0 NEW_LINE S = input ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT j = 0 NEW_LINE while j < n - 1 and S [ j ] == S [ j + 1 ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT S = S [ : j ] + S [ j + 1 : ] NEW_LINE count += 1 NEW_LINE DEDENT print ( count ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT c = 0 NEW_LINE while n % i == 0 : NEW_LINE INDENT n //= i NEW_LINE c += 1 NEW_LINE DEDENT if c > 1 : NEW_LINE INDENT print ( c ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT
def initializeDiffArray ( A , D ) : NEW_LINE INDENT n = len ( A ) NEW_LINE D [ 0 ] = A [ 0 ] NEW_LINE D [ n ] = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT D [ i ] = A [ i ] - A [ i - 1 ] NEW_LINE DEDENT DEDENT def update ( D , l , r , x ) : NEW_LINE INDENT D [ l ] += x NEW_LINE D [ r + 1 ] -= x NEW_LINE DEDENT def printArray ( A , D ) : NEW_LINE INDENT for i in range ( len ( A ) ) : NEW_LINE INDENT if ( i == 0 ) : NEW_LINE INDENT A [ i ] = D [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT A [ i ] = D [ i ] + A [ i - 1 ] NEW_LINE DEDENT print ( A [ i ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE return 0 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = [ 10 , 5 , 20 , 40 ] NEW_LINE n = len ( A ) NEW_LINE D = [ 0 for i in range ( n + 1 ) ] NEW_LINE initializeDiffArray ( A , D ) NEW_LINE update ( D , 0 , 1 , 10 ) NEW_LINE printArray ( A , D ) NEW_LINE update ( D , 1 , 3 , 20 ) NEW_LINE update ( D , 2 , 2 , 30 ) NEW_LINE printArray ( A , D ) NEW_LINE DEDENT
def findMaxGuests ( arrl , exit , n ) : NEW_LINE INDENT a = max ( arrl ) NEW_LINE a = max ( arrl ) NEW_LINE exit = max ( arrl ) NEW_LINE j = 0 NEW_LINE while i < n and j < n : NEW_LINE INDENT if ( arrl [ i ] <= exit [ j ] ) : NEW_LINE INDENT guests_in = guests_in + 1 NEW_LINE if ( guests_in > max_guests ) : NEW_LINE INDENT max_guests = guests_in NEW_LINE time = arrl [ i ] NEW_LINE DEDENT i = i + 1 NEW_LINE DEDENT else : NEW_LINE INDENT guests_in = guests_in - 1 NEW_LINE j = j + 1 NEW_LINE DEDENT DEDENT print ( " Maximum Number of uests = { } at time { } " . format ( max_guests , time ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arrl = [ 1 , 2 , 10 , 5 , 5 ] NEW_LINE exit = [ 4 , 5 , 12 , 9 , 12 ] NEW_LINE n = len ( arrl ) NEW_LINE findMaxGuests ( arrl , exit , n ) NEW_LINE DEDENT
while True : NEW_LINE INDENT s = input ( ) NEW_LINE if s == " # " : break NEW_LINE t = " " NEW_LINE f = [ 0 ] * ( len ( s ) + 1 ) NEW_LINE for i in range ( len ( t ) ) : NEW_LINE INDENT if i > 0 and s [ i ] == t [ i - 1 ] : NEW_LINE INDENT f [ i ] = 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , len ( t ) ) : NEW_LINE INDENT if len ( f [ i ] ) > len ( t ) : NEW_LINE INDENT t = t [ i ] NEW_LINE DEDENT DEDENT ans = " " NEW_LINE for i in range ( len ( t ) ) : NEW_LINE INDENT if f [ i ] : NEW_LINE INDENT ans = max ( ans , len ( t ) ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def calcfunction ( n , r ) : NEW_LINE INDENT final length = 1 NEW_LINE mx = max ( r , n - r ) NEW_LINE for i in range ( mx + 1 , n + 1 ) : NEW_LINE INDENT denominator = pow ( i , i ) NEW_LINE numerator = pow ( i - mx , i - mx ) NEW_LINE final length = ( final length * denominator ) / numerator NEW_LINE DEDENT return final length NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 6 NEW_LINE r = 2 NEW_LINE print ( "1 / " , calcfunction ( n , r ) ) NEW_LINE DEDENT
import math NEW_LINE def isPerfectSquare ( x ) : NEW_LINE INDENT sr = math . sqrt ( x ) NEW_LINE if ( sr * sr == x ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 7 NEW_LINE k = 2 NEW_LINE isPerfectSquare ( n + k ) NEW_LINE DEDENT
import sys NEW_LINE from collections import deque NEW_LINE from collections import Counter NEW_LINE readline = sys . stdin . readline NEW_LINE N = int ( readline ( ) ) NEW_LINE A = list ( map ( int , readline ( ) . split ( ) ) ) NEW_LINE x = [ ] NEW_LINE y = [ ] NEW_LINE for a in A : NEW_LINE INDENT x . append ( a ) NEW_LINE DEDENT def solve ( ) : NEW_LINE INDENT c = Counter ( x ) NEW_LINE ans = 0 NEW_LINE for i , a in enumerate ( x ) : NEW_LINE INDENT if a % 2 != 0 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT return ans // 2 NEW_LINE DEDENT print ( solve ( ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = [ int ( x ) for x in input ( ) . split ( " " ) ] NEW_LINE a . sort ( ) NEW_LINE flag = 0 NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT if a [ i + 1 ] - a [ i ] == 1 : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if l [ i ] > 0 : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT if c == 10000 : print ( - 1 ) NEW_LINE else : NEW_LINE INDENT k = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if l [ i ] > 0 : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT if k == n : print ( c ) NEW_LINE else : print ( n - k + 1 ) NEW_LINE DEDENT DEDENT
def isDivisible ( S ) : NEW_LINE INDENT n = len ( S ) NEW_LINE if ( S [ n - 1 ] != '5' and S [ n - 1 ] != '0' ) : NEW_LINE INDENT return False NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += ord ( S [ i ] ) NEW_LINE DEDENT if ( sum % 3 == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT S = nextDouble645746 INF INF INF23847 INF23847 INF23847 INF2 ] NEW_LINE if ( isDivisible ( S ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT S1 = nextDouble6446 INF13847 INF23847 INF23847 INF2 ] NEW_LINE if ( isDivisible ( S1 ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT isSquare = [ True ] * 10 NEW_LINE for i in range ( sumlimit ) : NEW_LINE INDENT isSquare [ i * i ] = False NEW_LINE DEDENT sum = find_sum ( sumlimit ) NEW_LINE if sum != - 1 : NEW_LINE INDENT sum = sumlimit NEW_LINE break NEW_LINE DEDENT sumlimit *= 10 NEW_LINE DEDENT while True : NEW_LINE INDENT sum = find_sum ( sumlimit ) NEW_LINE if sum == - 1 : NEW_LINE INDENT break NEW_LINE DEDENT for a in range ( 1 , int ( eulerlib . sqrt ( sum ) ) + 1 ) : NEW_LINE INDENT for b in range ( a - 1 , 0 , - 1 ) : NEW_LINE INDENT if ( ( a + b ) % 2 != 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT x = ( a * a + b * b ) // 2 NEW_LINE y = ( a * a - b * b ) // 2 NEW_LINE if ( x + y + 1 >= limit ) : NEW_LINE INDENT continue NEW_LINE DEDENT zlimit = min ( y , limit - x - y ) NEW_LINE for c in range ( eulerlib . sqrt ( y ) + 1 , eulerlib . sqrt ( y ) + 1 , zlimit ) : NEW_LINE INDENT z = c * c - y NEW_LINE if ( isSquare [ x + z ] and isSquare [ x - z ] and isSquare [ y - z ] ) : NEW_LINE INDENT return x + y + z NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def isVowel ( c ) : NEW_LINE INDENT return ( c == ' a ' or c == ' e ' or c == ' i ' or c == ' o ' or c == ' u ' ) NEW_LINE DEDENT def encryptString ( s , n , k ) : NEW_LINE INDENT countVowels = 0 NEW_LINE countConsonants = 0 NEW_LINE ans = " " NEW_LINE for l in range ( 0 , n - k + 1 ) : NEW_LINE INDENT countVowels = 0 NEW_LINE countConsonants = 0 NEW_LINE for r in range ( l , l + k + 1 ) : NEW_LINE INDENT if ( isVowel ( s [ r ] ) ) : NEW_LINE INDENT countVowels += 1 NEW_LINE DEDENT else : NEW_LINE INDENT countConsonants += 1 NEW_LINE DEDENT DEDENT ans += ( countVowels * countConsonants ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " hello " NEW_LINE n = len ( s ) NEW_LINE k = 2 NEW_LINE print ( encryptString ( s , n , k ) ) NEW_LINE DEDENT
import math NEW_LINE from fractions import gcd NEW_LINE from functools import reduce NEW_LINE from sys import stdin NEW_LINE import copy NEW_LINE import itertools NEW_LINE from collections import deque NEW_LINE from operator import mul NEW_LINE from functools import reduce NEW_LINE import sys NEW_LINE sys . setrecursionlimit ( 10 ** 6 ) NEW_LINE def input ( ) : return sys . stdin . readline ( ) . strip ( ) NEW_LINE def ii ( ) : return int ( input ( ) ) NEW_LINE def mi ( ) : return map ( int , input ( ) . split ( ) ) NEW_LINE def lmi ( ) : return list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE def li ( ) : return list ( input ( ) ) NEW_LINE def debug ( * args , sep = " " , end = " \n " ) : print ( " debug : " , * args , file = sys . stderr , sep = sep , end = end ) if not __debug__ else None NEW_LINE def exit ( * arg ) : print ( * arg ) ; sys . exit ( ) NEW_LINE def main ( ) : NEW_LINE INDENT n , m = mi ( ) NEW_LINE s = input ( ) NEW_LINE t = input ( ) NEW_LINE n //= m NEW_LINE if n == m : NEW_LINE INDENT print ( 0 ) NEW_LINE exit ( ) NEW_LINE DEDENT if n < m : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT if m % n == 0 or n % m == 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE exit ( ) NEW_LINE DEDENT if n // m == 0 or m // n == 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT print ( - 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE d = [ [ 0 ] * ( n + 2 ) for i in range ( n + 2 ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE for j in range ( x - 1 , x + 1 ) : NEW_LINE INDENT for k in range ( y - 1 , y + 1 ) : NEW_LINE INDENT d [ j ] [ k ] += 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , n + 2 ) : NEW_LINE INDENT for j in range ( 1 , n + 2 ) : NEW_LINE INDENT if d [ i ] [ j ] == 1 : NEW_LINE INDENT print ( i ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT DEDENT print ( - 1 ) NEW_LINE
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE c = 0 NEW_LINE f = [ list ( input ( ) ) for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if f [ i ] [ j ] == "1" : c += 1 NEW_LINE else : c = 0 NEW_LINE for k in range ( n ) : NEW_LINE INDENT if f [ i ] [ j ] == "1" : c += 1 NEW_LINE DEDENT if c > c : NEW_LINE INDENT print ( c ) NEW_LINE f . append ( [ i , j ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT
def inpPowerSum ( n ) : NEW_LINE INDENT return ( ( 6 * n * n * n * n * n * n ) + ( 15 * n * n * n * n ) + ( 10 * n * n * n ) - n ) // 30 NEW_LINE DEDENT n = 6 NEW_LINE print ( inpPowerSum ( n ) ) NEW_LINE
def maxLengthSub ( arr , n ) : NEW_LINE INDENT max_val = 0 NEW_LINE start = 0 NEW_LINE map = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT temp = 0 NEW_LINE if ( arr [ i ] - 1 ) in map : NEW_LINE INDENT temp = map [ arr [ i ] - 1 ] NEW_LINE DEDENT if ( arr [ i ] in map ) : NEW_LINE INDENT temp = max ( temp , map [ arr [ i ] ] ) NEW_LINE DEDENT if ( arr [ i ] + 1 ) in map : NEW_LINE INDENT temp = max ( temp , map [ arr [ i ] + 1 ] ) NEW_LINE DEDENT temp += 1 NEW_LINE if ( temp > max_val ) : NEW_LINE INDENT max_val = temp NEW_LINE DEDENT map [ arr [ i ] ] = temp NEW_LINE DEDENT return max_val NEW_LINE DEDENT arr = [ 2 , 5 , 6 , 3 , 7 , 6 , 5 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Maximum length subsequence = " , maxLengthSub ( arr , n ) ) NEW_LINE
def rearrange ( arr , n ) : NEW_LINE INDENT if ( arr == None or n % 2 == 1 ) : NEW_LINE INDENT return NEW_LINE DEDENT currIdx = int ( ( n - 1 ) / 2 ) NEW_LINE while ( currIdx > 0 ) : NEW_LINE INDENT count = currIdx NEW_LINE swapIdx = currIdx NEW_LINE while ( count ) : NEW_LINE INDENT temp = arr [ swapIdx + 1 ] NEW_LINE arr [ swapIdx + 1 ] = arr [ swapIdx ] NEW_LINE arr [ swapIdx ] = temp NEW_LINE swapIdx += 1 NEW_LINE count -= 1 NEW_LINE DEDENT currIdx -= 1 NEW_LINE DEDENT DEDENT arr = [ 1 , 3 , 5 , 2 , 4 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE rearrange ( arr , n ) NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT
from heapq import heappush , heappop NEW_LINE def main ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT n , k = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE f = [ [ float ( " inf " ) for i in range ( n ) ] for j in range ( n ) ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT a , b , c , d , e = map ( int , input ( ) . split ( ) ) NEW_LINE f [ a - 1 ] [ b - 1 ] = min ( f [ a - 1 ] [ b - 1 ] , f [ c - 1 ] [ d - 1 ] + f [ d - 1 ] [ e - 1 ] ) NEW_LINE DEDENT d = [ [ float ( " inf " ) for i in range ( n ) ] for j in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT d [ i ] [ i ] = 0 NEW_LINE DEDENT for i in range ( k ) : NEW_LINE INDENT op , * v = map ( int , input ( ) . split ( ) ) NEW_LINE if op == 1 : NEW_LINE INDENT w , c , d , e = v NEW_LINE DEDENT else : NEW_LINE INDENT w = min ( w , f [ c - 1 ] [ d - 1 ] + f [ c - 1 ] [ d - 1 ] + f [ d - 1 ] [ e - 1 ] ) NEW_LINE DEDENT DEDENT print ( * d , sep = " \n " ) NEW_LINE DEDENT DEDENT main ( ) NEW_LINE
def countCharacterType ( string ) : NEW_LINE INDENT vowels = 0 NEW_LINE consonant = 0 NEW_LINE specialChar = 0 NEW_LINE digit = 0 NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT ch = string [ i ] NEW_LINE if ( ( ch >= ' a ' and ch <= ' z ' ) or ( ch >= ' A ' and ch <= ' Z ' ) ) : NEW_LINE INDENT ch = ch . lower ( ) NEW_LINE if ( ch == ' a ' or ch == ' e ' or ch == ' i ' or ch == ' o ' or ch == ' u ' ) : NEW_LINE INDENT vowels += 1 NEW_LINE DEDENT else : NEW_LINE INDENT consonant += 1 NEW_LINE DEDENT DEDENT elif ( ch >= '0' and ch <= '9' ) : NEW_LINE INDENT digit += 1 NEW_LINE DEDENT else : NEW_LINE INDENT specialChar += 1 NEW_LINE DEDENT DEDENT print ( " Vowels : " , vowels ) NEW_LINE print ( " Consonant : " , consonant ) NEW_LINE print ( " Digit : " , digit ) NEW_LINE print ( " Special Character : " , specialChar ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " geeks for geeks121" NEW_LINE countCharacterType ( string ) NEW_LINE DEDENT
def increaseInvol ( l , b , h ) : NEW_LINE INDENT percentInc = ( ( 1 + ( l / 100 ) ) * ( 1 + ( b / 100 ) ) * ( 1 + ( h / 100 ) ) ) NEW_LINE percentInc -= 1 NEW_LINE percentInc *= 100 NEW_LINE return percentInc NEW_LINE DEDENT l = 50 NEW_LINE b = 20 NEW_LINE h = 10 NEW_LINE print ( increaseInvol ( l , b , h ) , " % " ) NEW_LINE
def MaxTotalRectangleArea ( a , n ) : NEW_LINE INDENT a . sort ( ) NEW_LINE sum = 0 NEW_LINE flag = 0 NEW_LINE l = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i + 1 ] == 1 ) and not flag ) : NEW_LINE INDENT flag = 1 NEW_LINE l = a [ i + 1 ] NEW_LINE i += 1 NEW_LINE DEDENT elif ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i + 1 ] == 1 ) and ( flag ) ) : NEW_LINE INDENT sum = sum + a [ i + 1 ] * l NEW_LINE flag = 0 NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 10 , 10 , 10 , 10 , 11 , 10 , 11 , 10 , 9 , 9 , 8 , 8 ] NEW_LINE n = len ( a ) NEW_LINE print ( MaxTotalRectangleArea ( a , n ) ) NEW_LINE DEDENT
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . prev = None NEW_LINE DEDENT DEDENT def insertEnd ( head , new_node ) : NEW_LINE INDENT if ( head == None ) : NEW_LINE INDENT new_node . next = new_node . prev = new_node NEW_LINE head = new_node NEW_LINE return head NEW_LINE DEDENT last = head . prev NEW_LINE new_node . next = head NEW_LINE ( head ) . prev = new_node NEW_LINE new_node . prev = last NEW_LINE last . next = new_node NEW_LINE return head NEW_LINE DEDENT def display ( head ) : NEW_LINE INDENT if ( head == None ) : NEW_LINE INDENT return NEW_LINE DEDENT new_head = None NEW_LINE last = head . prev NEW_LINE curr = last NEW_LINE while ( curr . prev != last ) : NEW_LINE INDENT prev = curr . prev NEW_LINE new_head = insertEnd ( new_head , curr ) NEW_LINE curr = prev NEW_LINE DEDENT new_head = insertEnd ( new_head , curr ) NEW_LINE return new_head NEW_LINE DEDENT def display ( head ) : NEW_LINE INDENT if ( head == None ) : NEW_LINE INDENT return NEW_LINE DEDENT temp = head NEW_LINE print ( " lb direction : " , end = " " ) NEW_LINE while ( temp . next != head ) : NEW_LINE INDENT print ( temp . data , end = " " ) NEW_LINE temp = temp . next NEW_LINE DEDENT print ( temp . data , end = " " ) NEW_LINE last = head . prev NEW_LINE temp = last NEW_LINE print ( " \n Back road : " , end = " " ) NEW_LINE while ( temp . prev != last ) : NEW_LINE INDENT print ( temp . data , end = " " ) NEW_LINE temp = temp . prev NEW_LINE DEDENT print ( temp . data , end = " " ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT head = None NEW_LINE head = insertEnd ( head , getNode ( 1 ) ) NEW_LINE head = insertEnd ( head , getNode ( 2 ) )
def lastFiveDigits ( n ) : NEW_LINE INDENT n = ( ( n // 10000 ) * 10000 + ( ( n // 100 ) % 10 ) * 1000 + ( n % 10 ) * 100 + ( ( n // 10 ) % 10 ) * 10 + ( n // 1000 ) % 10 ) NEW_LINE ans = 1 NEW_LINE for i in range ( 5 ) : NEW_LINE INDENT ans *= n NEW_LINE ans %= 100000 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 12345 NEW_LINE lastFiveDigits ( n ) NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( 1 , 101 ) : NEW_LINE INDENT x = i NEW_LINE x = x * 10 ** 100 * 2 NEW_LINE y = sqrt ( x ) NEW_LINE if y != x : NEW_LINE INDENT s = str ( y ) NEW_LINE for j in range ( len ( s ) ) : NEW_LINE INDENT s += s [ j ] NEW_LINE DEDENT DEDENT ans += sum ( s ) NEW_LINE DEDENT return str ( ans ) NEW_LINE DEDENT def sqrt ( x ) : NEW_LINE INDENT i = 0 NEW_LINE while ( 10 ** i * 2 <= x ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT y = 0 NEW_LINE for i in range ( 10 ** i - 1 ) : NEW_LINE INDENT delta = - 1 NEW_LINE for j in range ( 9 , - 1 , - 1 ) : NEW_LINE INDENT temp = ( j * 10 ** i ) NEW_LINE delta = max ( delta , ( y // 1 ) * temp ) NEW_LINE if ( delta <= x ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( j < 0 ) : NEW_LINE INDENT raise AssertionError ( ) NEW_LINE DEDENT x = x - delta NEW_LINE y = y + ( j * 10 ** i ) * 10 ** i NEW_LINE DEDENT return y NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def evaluate ( n ) : NEW_LINE INDENT if ( n == 1 or n == 2 ) : NEW_LINE INDENT print ( " No Pythagoras Triplet exists " ) NEW_LINE DEDENT elif ( n % 2 == 0 ) : NEW_LINE INDENT var = 1 * n * n // 4 NEW_LINE print ( " Pythagoras Triplets " , " exist i . e . " , end = " " ) NEW_LINE print ( n , end = " " ) NEW_LINE print ( var - 1 , end = " " ) NEW_LINE print ( var + 1 , end = " " ) NEW_LINE DEDENT elif ( n % 2 != 0 ) : NEW_LINE INDENT var = 1 * n * n + 1 NEW_LINE print ( " Pythagoras Triplets " , " exist i . e . " , end = " " ) NEW_LINE print ( n , end = " " ) NEW_LINE print ( var // 2 - 1 , end = " " ) NEW_LINE print ( var // 2 , end = " " ) NEW_LINE DEDENT DEDENT n = 22 NEW_LINE evaluate ( n ) NEW_LINE
a , b , x = map ( int , input ( ) . split ( ) ) NEW_LINE if a == 0 : NEW_LINE INDENT print ( b // x + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( b // x + ( a - 1 ) // x + 1 ) NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b ; NEW_LINE DEDENT return gcd ( b % a , a ) ; NEW_LINE DEDENT def findNumber ( arr , n ) : NEW_LINE INDENT ans = arr [ 0 ] ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans = gcd ( ans , arr [ i ] ) ; NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == ans ) : NEW_LINE INDENT return ans ; NEW_LINE DEDENT DEDENT return - 1 ; NEW_LINE DEDENT arr = [ 2 , 2 , 4 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( findNumber ( arr , n ) ) ; NEW_LINE
def countKdivPairs ( A , n , K ) : NEW_LINE INDENT freq = [ 0 ] * K NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT rem = A [ i ] % K NEW_LINE if ( rem != 0 ) : NEW_LINE INDENT ans += freq [ K - rem ] NEW_LINE DEDENT else : NEW_LINE INDENT ans += freq [ 0 ] NEW_LINE DEDENT freq [ rem ] += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 2 , 2 , 1 , 7 , 5 , 3 ] NEW_LINE n = len ( A ) NEW_LINE K = 4 NEW_LINE print ( countKdivPairs ( A , n , K ) ) NEW_LINE DEDENT
a , b , c = map ( str , input ( ) . split ( ' , ' ) ) NEW_LINE print ( a + b + c , end = ' ' ) NEW_LINE print ( c + a , end = ' ' ) NEW_LINE print ( a ) NEW_LINE print ( b + c , end = ' ' ) NEW_LINE print ( c ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE l = 0 NEW_LINE r = 0 NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == 1 : NEW_LINE INDENT l = i NEW_LINE DEDENT elif a [ i ] == 0 : NEW_LINE INDENT r = i NEW_LINE DEDENT else : NEW_LINE INDENT l = i NEW_LINE DEDENT DEDENT if l == r : NEW_LINE INDENT ans = max ( ans , n - i ) NEW_LINE DEDENT elif a [ l ] != r : NEW_LINE INDENT ans = max ( ans , n - l + 1 ) NEW_LINE DEDENT print ( ans ) NEW_LINE
def countSubarrays ( arr , n ) : NEW_LINE INDENT difference = 0 NEW_LINE ans = 0 NEW_LINE hash_negative = [ 0 for i in range ( n + 1 ) ] NEW_LINE hash_negative = [ 0 for i in range ( n + 1 ) ] NEW_LINE hash_negative [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ( arr [ i ] & 1 ) == 1 ) : NEW_LINE INDENT difference += 1 NEW_LINE DEDENT else : NEW_LINE INDENT difference -= 1 NEW_LINE DEDENT if ( difference < 0 ) : NEW_LINE INDENT ans += hash_negative [ - difference ] NEW_LINE hash_negative [ - difference ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += hash_negative [ difference ] NEW_LINE hash_negative [ difference ] += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT arr = [ 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Total Number of Even - Odd subarrays are " , countSubarrays ( arr , n ) ) NEW_LINE
SIZE = 26 NEW_LINE def printChar ( str , n ) : NEW_LINE INDENT freq = [ 0 for i in range ( SIZE ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] % 2 == 0 ) : NEW_LINE INDENT print ( str [ i ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = " geeksforgeeks " NEW_LINE n = len ( str ) NEW_LINE printChar ( str , n ) NEW_LINE DEDENT
def printChar ( str , n ) : NEW_LINE INDENT freq = [ 0 for i in range ( 26 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] % 2 == 1 ) : NEW_LINE INDENT print ( str [ i ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = " geeksforgeeks " NEW_LINE n = len ( str ) NEW_LINE printChar ( str , n ) NEW_LINE DEDENT
def countGreater ( arr , n , k ) : NEW_LINE INDENT l = 0 ; NEW_LINE r = n - 1 ; NEW_LINE leftGreater = n ; NEW_LINE while ( l <= r ) : NEW_LINE INDENT m = l + ( r - l ) // 2 ; NEW_LINE if ( arr [ m ] > k ) : NEW_LINE INDENT leftGreater = m ; NEW_LINE r = m - 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 ; NEW_LINE DEDENT DEDENT return ( n - leftGreater ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 3 , 3 , 4 , 7 , 7 , 7 , 11 , 13 , 13 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE k = 7 ; NEW_LINE print ( countGreater ( arr , n , k ) ) ; NEW_LINE DEDENT
import sys NEW_LINE import math NEW_LINE from bisect import bisect_right as br NEW_LINE from bisect import bisect_left as bl NEW_LINE sys . setrecursionlimit ( 2147483647 ) NEW_LINE from heapq import heappush , heappop , heappushpop NEW_LINE from collections import defaultdict NEW_LINE from itertools import accumulate NEW_LINE from collections import Counter NEW_LINE from collections import deque NEW_LINE from operator import itemgetter NEW_LINE from itertools import permutations NEW_LINE mod = 10 ** 9 + 7 NEW_LINE inf = float ( ' inf ' ) NEW_LINE def I ( ) : return int ( sys . stdin . readline ( ) ) NEW_LINE def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) NEW_LINE def f ( x ) : NEW_LINE INDENT if min ( x , y ) < 0 : NEW_LINE INDENT return 0 NEW_LINE DEDENT if x == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 2 NEW_LINE DEDENT h , w = LI ( ) NEW_LINE dp = [ [ 0 ] * ( w + 1 ) for _ in range ( h + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( h ) : NEW_LINE INDENT for j in range ( w + 1 ) : NEW_LINE INDENT dp [ i + 1 ] [ j + 1 ] = dp [ i ] [ j ] * 2 % mod NEW_LINE dp [ i + 1 ] [ j + 1 ] = dp [ i ] [ j ] * 2 % mod NEW_LINE dp [ i + 1 ] [ j + 1 ] %= mod NEW_LINE DEDENT DEDENT print ( dp [ h ] [ w ] ) NEW_LINE
from math import sqrt NEW_LINE def findAandB ( N ) : NEW_LINE INDENT val = N * N - 4.0 * N NEW_LINE if ( val < 0 ) : NEW_LINE INDENT print ( " NO " ) NEW_LINE return NEW_LINE DEDENT a = ( N + sqrt ( val ) ) / 2.0 NEW_LINE b = ( N - sqrt ( val ) ) / 2.0 NEW_LINE print ( " a = " , a ) NEW_LINE print ( " b = " , b ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 69.0 NEW_LINE findAandB ( N ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE a . append ( x ) NEW_LINE DEDENT b = sorted ( a , key = lambda x : x [ 0 ] ) NEW_LINE if b [ 0 ] == 0 : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( b [ 1 ] - b [ 0 ] ) NEW_LINE DEDENT DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ 0 ] == " X " : NEW_LINE INDENT l . append ( s ) NEW_LINE DEDENT DEDENT if len ( l ) != 1 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT k = 0 NEW_LINE flag = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if l [ i ] == " X " : NEW_LINE INDENT k += 1 NEW_LINE DEDENT if k == m - 1 : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE input = sys . stdin . readline NEW_LINE def check ( si , ti ) : NEW_LINE INDENT return si . count ( " ? " ) - si . count ( " ? " ) == 0 NEW_LINE DEDENT def count ( si ) : NEW_LINE INDENT return si . count ( " ? " ) - si . count ( " ? " ) NEW_LINE DEDENT def int1 ( n ) : NEW_LINE INDENT if n == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 2 * n NEW_LINE DEDENT DEDENT def int2 ( n ) : NEW_LINE INDENT if n == 1 : NEW_LINE INDENT return 2 NEW_LINE DEDENT else : NEW_LINE INDENT return 3 NEW_LINE DEDENT DEDENT def solve ( p , n ) : NEW_LINE INDENT if check ( p , n ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT dp = [ [ 0 ] * 10 for _ in range ( n + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT si = p . replace ( " ? " , str ( i ) ) NEW_LINE if si == " ? " : NEW_LINE INDENT for j in range ( 10 ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT if si [ - 1 ] == "0" : NEW_LINE INDENT continue NEW_LINE DEDENT for k in range ( 10 ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT if si [ 0 ] * si [ - 1 ] == " ? " : NEW_LINE INDENT dp [ i + 1 ] [ j + 1 ] += dp [ i ] [ j ] NEW_LINE DEDENT dp [ i + 1 ] [ j + 1 ] %= 1000000007 NEW_LINE DEDENT DEDENT DEDENT DEDENT return dp [ n ] [ 0 ] NEW_LINE DEDENT while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT p = list ( map ( int , input ( ) . strip ( ) ) ) NEW_LINE ans = solve ( p , n ) NEW_LINE print ( ans ) NEW_LINE DEDENT DEDENT if __name__
for i in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE z = 0 NEW_LINE while ( n % 2 == 0 ) : NEW_LINE INDENT n = n // 2 NEW_LINE z += 1 NEW_LINE DEDENT while ( n % 3 == 0 ) : NEW_LINE INDENT n = n // 3 NEW_LINE z += 1 NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT print ( z ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT
def minDequeForUnique ( A ) : NEW_LINE INDENT mpp = dict ( ) NEW_LINE for i in A : NEW_LINE INDENT mpp [ i ] = mpp . get ( i , 0 ) + 1 NEW_LINE DEDENT ans = 0 NEW_LINE for x in range ( 100000 ) : NEW_LINE INDENT if ( mpp [ x ] >= 2 ) : NEW_LINE INDENT k = x * ( mpp [ x ] - 1 ) NEW_LINE DEDENT elif ( len ( k ) > 0 and ( ( mpp [ x ] == 0 ) or ( mpp [ x ] > 1 ) ) ) : NEW_LINE INDENT ans += x - k NEW_LINE k = k . index ( 1 ) NEW_LINE k = k . index ( 0 ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = [ 3 , 2 , 1 , 2 , 1 , 7 ] NEW_LINE print ( minDequeForUnique ( A ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( ( 3 ** ( n - 1 ) ) * ( 2 ** ( n - 1 ) ) ) % ( 1000003 ) ) NEW_LINE DEDENT
MOD = 100 + 7 NEW_LINE def modulo mn ( s , n ) : NEW_LINE INDENT dp = [ [ 0 for i in range ( 13 ) ] for i in range ( n + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( 10 ) : NEW_LINE INDENT nxt = ord ( s [ i ] ) - ord ( '0' ) NEW_LINE if ( s [ i ] == ' ? ' ) : NEW_LINE INDENT nxt = j NEW_LINE DEDENT for k in range ( 13 ) : NEW_LINE INDENT rem = ( 10 * k + nxt ) % 13 NEW_LINE dp [ i + 1 ] [ rem ] += dp [ i ] [ k ] NEW_LINE dp [ i + 1 ] [ rem ] %= MOD NEW_LINE DEDENT if ( s [ i ] != ' ? ' ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return dp [ n ] [ 5 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " ? 44" NEW_LINE n = len ( s ) NEW_LINE print ( modulo mn ( s , n ) ) NEW_LINE DEDENT
def countNums ( a , b , c , d ) : NEW_LINE INDENT x = b // c - ( a - 1 ) // c NEW_LINE y = b // d - ( a - 1 ) // d NEW_LINE k = ( c * d ) // __gcd ( c , d ) NEW_LINE z = b // k - ( a - 1 ) // k NEW_LINE return b - a + 1 - x - y + z NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a , b , c , d = 10 , 50 , 4 , 6 NEW_LINE print ( countNums ( a , b , c , d ) ) NEW_LINE DEDENT
import math NEW_LINE def printSubstrings ( n ) : NEW_LINE INDENT s = int ( math . log10 ( n ) ) NEW_LINE d = ( int ) ( ( pow ( 10 , s ) + 0.5 ) ) NEW_LINE k = d NEW_LINE while ( n > 0 ) : NEW_LINE INDENT while ( d > 0 ) : NEW_LINE INDENT print ( int ( n / d ) ) NEW_LINE d = int ( d / 10 ) NEW_LINE DEDENT n = n % k NEW_LINE k = int ( k / 10 ) NEW_LINE d = k NEW_LINE DEDENT DEDENT n = 123 NEW_LINE printSubstrings ( n ) NEW_LINE
def NthCharacter ( n ) : NEW_LINE INDENT s = " " NEW_LINE c = 1 NEW_LINE for i in range ( 1 , 10 ) : NEW_LINE INDENT if c < 10 : NEW_LINE INDENT s += str ( c ) NEW_LINE DEDENT else : NEW_LINE INDENT s1 = " " NEW_LINE dup = c NEW_LINE while dup > 0 : NEW_LINE INDENT s1 += str ( dup % 10 ) NEW_LINE dup //= 10 NEW_LINE DEDENT temp = " " NEW_LINE temp += s1 NEW_LINE temp = temp [ : : - 1 ] NEW_LINE s += temp NEW_LINE DEDENT c += 1 NEW_LINE if len ( s ) >= n : NEW_LINE INDENT return s [ n - 1 ] NEW_LINE DEDENT DEDENT DEDENT n = 11 NEW_LINE print ( NthCharacter ( n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE cards = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT d , m , n = map ( int , input ( ) . split ( ) ) NEW_LINE cards . append ( [ d , m , n ] ) NEW_LINE DEDENT ans = 0 NEW_LINE for p in range ( 1 , 1001 ) : NEW_LINE INDENT t = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if p % 3 == 0 : NEW_LINE INDENT t += 1 NEW_LINE DEDENT else : NEW_LINE INDENT t += 195 NEW_LINE DEDENT DEDENT if t % 2 == 0 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += cards [ p - 1 ] [ 0 ] * 2 + 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
from math import sqrt NEW_LINE def check_prime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n <= 3 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 5 , int ( sqrt ( n ) ) + 1 , 6 ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def countPrimeFrequent ( s ) : NEW_LINE INDENT count = 0 NEW_LINE mp = dict ( ) NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if s [ i ] in mp . keys ( ) : NEW_LINE INDENT mp [ s [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ s [ i ] ] = 1 NEW_LINE DEDENT DEDENT for it in mp : NEW_LINE INDENT if ( check_prime ( mp [ it ] ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE print ( countPrimeFrequent ( s ) ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ ans ] > b [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( n - ans ) NEW_LINE
def catalanDP ( n ) : NEW_LINE INDENT catalan = [ 1 for i in range ( n + 2 ) ] NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT catalan [ i ] = 0 NEW_LINE for j in range ( i ) : NEW_LINE INDENT catalan [ i ] += ( catalan [ j ] * catalan [ i - j - 1 ] ) NEW_LINE DEDENT DEDENT return catalan [ n ] NEW_LINE DEDENT for i in range ( 10 ) : NEW_LINE INDENT print ( catalanDP ( i ) , end = " " ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT TARGET = Fraction ( 15499 , 94744 ) NEW_LINE totient = 1 NEW_LINE denominator = 1 NEW_LINE for p in range ( 2 , 1 ) : NEW_LINE INDENT totient = ( totient * ( p - 1 ) ) NEW_LINE denominator = denominator * p NEW_LINE while not eulerlib . is_prime ( p ) : NEW_LINE INDENT if ( ( totient , denominator ) > TARGET ) : NEW_LINE INDENT break NEW_LINE DEDENT for i in range ( 1 , p ) : NEW_LINE INDENT numer = ( i * totient ) NEW_LINE denom = ( i * denominator ) NEW_LINE if ( Fraction ( numer , denom - 1 ) < TARGET ) : NEW_LINE INDENT return str ( denom ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
import sys NEW_LINE s = input ( ) NEW_LINE g = s . count ( " L " ) NEW_LINE if ( g == 1 ) : NEW_LINE INDENT print ( " OK " ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT g = s . count ( " U " ) NEW_LINE if ( g == 2 ) : NEW_LINE INDENT print ( " OK " ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT g = s . count ( " R " ) NEW_LINE if ( g == 3 ) : NEW_LINE INDENT print ( " OK " ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT t = 0 NEW_LINE for i in range ( g - 2 ) : NEW_LINE INDENT for j in range ( g + 1 ) : NEW_LINE INDENT if ( s [ i ] == " R " and s [ j ] == " L " ) : NEW_LINE INDENT t += 1 NEW_LINE DEDENT elif ( s [ i ] == " U " and s [ j ] == " D " ) : NEW_LINE INDENT t -= 1 NEW_LINE DEDENT elif ( s [ i ] == " D " and s [ j ] == " R " ) : NEW_LINE INDENT t += 1 NEW_LINE DEDENT elif ( s [ i ] == " R " and s [ j ] == " U " ) : NEW_LINE INDENT t -= 1 NEW_LINE DEDENT elif ( s [ i ] == " L " and s [ j ] == " R " ) : NEW_LINE INDENT t += 1 NEW_LINE DEDENT elif ( s [ i ] == " R " and s [ j ] == " U " ) : NEW_LINE INDENT t -= 1 NEW_LINE DEDENT elif ( s [ i ] == " D " and s [ j ] == " R " ) : NEW_LINE INDENT t += 1 NEW_LINE DEDENT if ( t < 2 ) : NEW_LINE INDENT print ( " Math " ) NEW_LINE sys . exit ( ) NEW_LINE DEDENT DEDENT DEDENT print ( " KG " ) NEW_LINE
from math import sqrt NEW_LINE def isPrime ( n ) : NEW_LINE INDENT if ( n <= 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT for i in range ( 2 , int ( sqrt ( n ) ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def isPossible ( N ) : NEW_LINE INDENT if ( isPrime ( N ) and isPrime ( N - 2 ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 13 NEW_LINE if ( isPossible ( n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def countDyck arg ( n ) : NEW_LINE INDENT res = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT res *= ( 2 * n - i ) NEW_LINE res //= ( i + 1 ) NEW_LINE DEDENT return res // ( n + 1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 NEW_LINE print ( " Number of Dyck arg is " , countDyck arg ( n ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n > 30 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT elif n == 30 : NEW_LINE INDENT print ( " YES " ) NEW_LINE print ( " 6 10 15 " , n ) NEW_LINE DEDENT elif n == 31 : NEW_LINE INDENT print ( " YES " ) NEW_LINE print ( " 6 10 14 " , n ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE print ( " 6 10 " , n - 30 ) NEW_LINE DEDENT DEDENT
import math NEW_LINE n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE result = a [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT result = math . gcd ( result , a [ i ] ) NEW_LINE DEDENT print ( result ) NEW_LINE
a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( 14 ) : NEW_LINE INDENT if a [ i ] % 2 == 0 : NEW_LINE INDENT ans += ( a [ i ] // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT ans += a [ i ] // 2 NEW_LINE DEDENT DEDENT if a [ - 1 ] % 2 == 0 : NEW_LINE INDENT ans += 14 NEW_LINE DEDENT else : NEW_LINE INDENT ans += a [ - 1 ] // 2 NEW_LINE DEDENT print ( ans ) NEW_LINE
def pentdiagonal ( a ) : NEW_LINE INDENT if ( a < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT d = 1.22 * a NEW_LINE return d NEW_LINE DEDENT a = 6 NEW_LINE print ( pentdiagonal ( a ) ) NEW_LINE
def hexDiagonal ( a ) : NEW_LINE INDENT if a < 0 : NEW_LINE INDENT return - 1 NEW_LINE DEDENT d = 1.73 * a NEW_LINE return d NEW_LINE DEDENT a = 9 NEW_LINE print ( hexDiagonal ( a ) ) NEW_LINE
def translate ( string ) : NEW_LINE INDENT l = len ( string ) NEW_LINE if l < 2 : NEW_LINE INDENT return NEW_LINE DEDENT i = 0 NEW_LINE j = 0 NEW_LINE while j < l - 1 : NEW_LINE INDENT if ( string [ j ] == ' A ' and string [ j + 1 ] == ' B ' ) : NEW_LINE INDENT j = j + 2 NEW_LINE i += 1 NEW_LINE string = string [ : i ] + string [ i + 1 : ] + string [ i + 2 : ] NEW_LINE continue NEW_LINE DEDENT string = string [ : i ] + string [ i + 1 : ] + string [ i + 2 : ] NEW_LINE i += 1 NEW_LINE DEDENT if j == l - 1 : NEW_LINE INDENT string = string [ : i ] + string [ i + 1 : ] NEW_LINE DEDENT string = ' ' + string [ : i ] + ' ' + string [ i + 1 : ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT st = " helloAB anABGfG " NEW_LINE string = list ( st ) NEW_LINE translate ( string ) NEW_LINE print ( " The wr string is : " ) NEW_LINE print ( string ) NEW_LINE DEDENT
def translate ( string ) : NEW_LINE INDENT for i in range ( 1 , len ( string ) ) : NEW_LINE INDENT if ( string [ i - 1 ] == ' A ' and string [ i ] == ' B ' ) : NEW_LINE INDENT string [ i - 1 ] = ' C ' NEW_LINE for j in range ( i , len ( string ) - 1 ) : NEW_LINE INDENT string [ j ] = string [ j + 1 ] NEW_LINE DEDENT string [ j ] = ' ' NEW_LINE DEDENT DEDENT return string NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT st = " helloAB ?G " NEW_LINE string = list ( st ) NEW_LINE translate ( string ) NEW_LINE print ( " The rs is : " ) NEW_LINE print ( string ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT target = 2000 NEW_LINE count = 2 NEW_LINE for ring in range ( 2 ) : NEW_LINE INDENT if ring * 12 + 5 > eulerlib . sqrt ( ) : NEW_LINE INDENT raise ValueError ( ) NEW_LINE DEDENT if ( eulerlib . is_prime ( ring * 6 - 1 ) and eulerlib . is_prime ( ring * 6 + 1 ) and eulerlib . is_prime ( ring * 12 + 5 ) ) : NEW_LINE INDENT count += 1 NEW_LINE if count == target : NEW_LINE INDENT return str ( ring * ( ring - 1 ) * 3 + 2 ) NEW_LINE DEDENT DEDENT if ( eulerlib . is_prime ( ring * 6 - 1 ) and eulerlib . is_prime ( ring * 6 + 5 ) and eulerlib . is_prime ( ring * 12 - 7 ) ) : NEW_LINE INDENT count += 1 NEW_LINE if count == target : NEW_LINE INDENT return str ( ring * ( ring + 1 ) * 3 + 1 ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE for i in range ( a + 1 , min ( a + 1 , b ) + 1 ) : NEW_LINE INDENT if a * i == b * i : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE
def Digits ( n ) : NEW_LINE INDENT largest = 0 NEW_LINE smallest = 9 NEW_LINE while ( n != 0 ) : NEW_LINE INDENT r = n % 10 NEW_LINE largest = max ( r , largest ) NEW_LINE smallest = min ( r , smallest ) NEW_LINE n = n // 10 NEW_LINE DEDENT print ( largest , smallest ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 2346 NEW_LINE Digits ( n ) NEW_LINE DEDENT
def solve ( d1 , d2 , d3 ) : NEW_LINE INDENT maxx = max ( d1 , max ( d2 , d3 ) ) NEW_LINE sum = ( d1 + d2 + d3 ) NEW_LINE if ( 2 * maxx > sum or sum % 2 == 1 ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT x1 = 0 NEW_LINE y1 = 0 NEW_LINE x2 = d1 NEW_LINE y2 = 0 NEW_LINE x3 = ( d1 + d2 - d3 ) // 2 NEW_LINE y3 = ( d2 + d3 - d1 ) // 2 NEW_LINE print ( " ( " , x1 , " , " , y1 , " ) , ( " , x2 , " , " , y2 , " ) and ( " , x3 , " , " , y3 , " ) " ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT d1 = 3 NEW_LINE d2 = 4 NEW_LINE d3 = 5 NEW_LINE solve ( d1 , d2 , d3 ) NEW_LINE DEDENT
MAX_CHAR = 26 NEW_LINE def flag flag ( k , n , str ) : NEW_LINE INDENT a = [ 0 for i in range ( MAX_CHAR ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i in range ( MAX_CHAR ) : NEW_LINE INDENT if ( a [ i ] > k ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE k = 3 NEW_LINE str = " aacaab " NEW_LINE if ( flag ( k , n , str ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE count = 0 NEW_LINE reversed = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == " M " : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT reversed . append ( count ) NEW_LINE count = 0 NEW_LINE DEDENT DEDENT if n == 1 and len ( reversed ) == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT elif len ( reversed ) == 2 and len ( reversed ) == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT elif len ( reversed ) == 3 and len ( reversed ) == 2 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT elif len ( reversed ) == 1 and len ( reversed ) == 2 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
e1 , e2 , e3 , e4 = map ( int , input ( ) . split ( ) ) NEW_LINE E = [ [ e1 , e2 , e3 ] , [ e1 , e2 , e3 ] , [ e1 , e3 , e4 ] ] NEW_LINE e = set ( E ) NEW_LINE e_list = list ( e ) NEW_LINE for i in range ( 1 , 12 ) : NEW_LINE INDENT if sum ( e ) in e_list : NEW_LINE INDENT print ( " yes " ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( " no " ) NEW_LINE DEDENT
R = 4 NEW_LINE C = 4 NEW_LINE def first ( arr , low , high ) : NEW_LINE INDENT if ( high >= low ) : NEW_LINE INDENT mid = low + ( high - low ) // 2 NEW_LINE if ( ( mid == 0 or arr [ mid - 1 ] == 0 ) and arr [ mid ] == 1 ) : NEW_LINE INDENT return mid NEW_LINE DEDENT elif ( arr [ mid ] == 0 ) : NEW_LINE INDENT return first ( arr , ( mid + 1 ) , high ) NEW_LINE DEDENT else : NEW_LINE INDENT return first ( arr , low , ( mid - 1 ) ) NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def rowWith0s ( mat ) : NEW_LINE INDENT max_row_index = 0 NEW_LINE max = - ( 2 ** 32 ) NEW_LINE min_row_index = 0 NEW_LINE min = 2 ** 32 NEW_LINE for i in range ( R ) : NEW_LINE INDENT index = first ( mat [ i ] , 0 , C - 1 ) NEW_LINE cntZeroes = 0 NEW_LINE if ( index == - 1 ) : NEW_LINE INDENT cntZeroes = C NEW_LINE DEDENT else : NEW_LINE INDENT cntZeroes = index NEW_LINE DEDENT if ( max < cntZeroes ) : NEW_LINE INDENT max = cntZeroes NEW_LINE max_row_index = i NEW_LINE DEDENT if ( min > cntZeroes ) : NEW_LINE INDENT min = cntZeroes NEW_LINE min_row_index = i NEW_LINE DEDENT DEDENT print ( " StringBuilder with min 0s : " , min_row_index + 1 ) NEW_LINE print ( " StringBuilder with max 0s : " , max_row_index + 1 ) NEW_LINE DEDENT mat = [ [ 0 , 0 , 0 , 1 ] , [ 0 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 ] , [ 0 , 0 , 0 , 0 ] ] NEW_LINE row0s ( mat ) NEW_LINE
def bitAtGivenPosSetOrUnset ( n , k ) : NEW_LINE INDENT new_num = n >> ( k - 1 ) NEW_LINE return ( new_num & 1 ) NEW_LINE DEDENT n = 10 NEW_LINE k = 2 NEW_LINE if ( bitAtGivenPosSetOrUnset ( n , k ) == 1 ) : NEW_LINE INDENT print ( " Set " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Unset " ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE a = s . count ( ' A ' ) NEW_LINE b = s . count ( ' G ' ) NEW_LINE c = s . count ( ' T ' ) NEW_LINE if ( n % 4 == 0 ) : NEW_LINE INDENT print ( " = = " ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( n // 4 ) : NEW_LINE INDENT for j in range ( 4 ) : NEW_LINE INDENT if ( s [ i ] == ' A ' ) : NEW_LINE INDENT a += 1 NEW_LINE DEDENT if ( s [ i ] == ' G ' ) : NEW_LINE INDENT b += 1 NEW_LINE DEDENT if ( s [ i ] == ' T ' ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT if ( a > 100 or c > 100 or a > 100 or b > 100 ) : NEW_LINE INDENT print ( " = = " ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT print ( " = = " ) NEW_LINE
import sys NEW_LINE if sys . version_info [ 0 ] >= 3 : input = input NEW_LINE def checkio ( data ) : NEW_LINE INDENT y = len ( data ) NEW_LINE x = len ( data [ 0 ] ) NEW_LINE m = len ( data [ 1 ] ) NEW_LINE n = len ( data [ 2 ] ) NEW_LINE p = [ [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , 0 ] , [ 1 , - 1 ] , [ - 1 , - 1 ] ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT j = 0 NEW_LINE for k in range ( 3 ) : NEW_LINE INDENT j += p [ i ] [ k ] NEW_LINE DEDENT j += 1 NEW_LINE for i in range ( x ) : NEW_LINE INDENT p [ i ] [ j ] = p [ i ] [ j ] + p [ i ] [ k ] NEW_LINE DEDENT DEDENT return j NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE io , os = sys . stdin , sys . stdin NEW_LINE if n == 1 : NEW_LINE INDENT print ( checkio ( data ) ) NEW_LINE DEDENT else : NEW_LINE INDENT pos = [ [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ - 1 , 0 ] ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT j = pos [ i ] [ 0 ] NEW_LINE k [ i ] = j = checkio ( data [ i : i + 1 ] ) NEW_LINE pos [ i + 1 ] [ j ] = j NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans += checkio ( data [ i : i + 1 ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT DEDENT
l , r = map ( int , input ( ) . split ( ) ) NEW_LINE c = 0 NEW_LINE for i in range ( 1 , r + 1 ) : NEW_LINE INDENT if i * 2 <= r and i * 3 <= l : NEW_LINE INDENT c += 1 NEW_LINE DEDENT elif i * 3 >= l : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT print ( c ) NEW_LINE
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE ans = 0 NEW_LINE s = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s + 2 * k >= n : NEW_LINE INDENT ans += s + 2 * k NEW_LINE DEDENT else : NEW_LINE INDENT ans = min ( ans , k - s + 2 * k ) NEW_LINE s += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def arePermutations ( a , b , n , m ) : NEW_LINE INDENT sum1 = 0 NEW_LINE sum2 = 0 NEW_LINE mul1 = 1 NEW_LINE mul2 = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum1 += a [ i ] NEW_LINE mul1 *= a [ i ] NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT sum2 += b [ i ] NEW_LINE mul2 *= b [ i ] NEW_LINE DEDENT return ( ( sum1 == sum2 ) and ( mul1 == mul2 ) ) NEW_LINE DEDENT a = [ 1 , 3 , 2 ] NEW_LINE b = [ 3 , 1 , 2 ] NEW_LINE n = len ( a ) NEW_LINE m = len ( b ) NEW_LINE if ( arePermutations ( a , b , n , m ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
MAX_CHAR = 26 NEW_LINE def findAndPrintUncommonChars ( str1 , str2 ) : NEW_LINE INDENT present = [ 0 for i in range ( MAX_CHAR ) ] NEW_LINE l1 = len ( str1 ) NEW_LINE l2 = len ( str2 ) NEW_LINE for i in range ( l1 ) : NEW_LINE INDENT present [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] = 1 NEW_LINE DEDENT for i in range ( l2 ) : NEW_LINE INDENT if ( present [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] == 1 or present [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] == - 1 ) : NEW_LINE INDENT present [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] = - 1 NEW_LINE DEDENT else : NEW_LINE INDENT present [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] = 2 NEW_LINE DEDENT DEDENT for i in range ( MAX_CHAR ) : NEW_LINE INDENT if ( present [ i ] == 1 or present [ i ] == 2 ) : NEW_LINE INDENT print ( chr ( i + ord ( ' a ' ) ) , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str1 = " characters " NEW_LINE str2 = " alphabets " NEW_LINE findAndPrintUncommonChars ( str1 , str2 ) NEW_LINE DEDENT
def isInside ( circle_x , circle_y , rad , x , y ) : NEW_LINE INDENT if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT x = 1 NEW_LINE y = 1 NEW_LINE circle_x = 0 NEW_LINE circle_y = 1 NEW_LINE rad = 2 NEW_LINE if ( isInside ( circle_x , circle_y , rad , x , y ) ) : NEW_LINE INDENT print ( " inside " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Outside " ) NEW_LINE DEDENT DEDENT
def minSum ( arr , n , x ) : NEW_LINE INDENT sum = 0 NEW_LINE largestDivisible = - 1 NEW_LINE minimum = arr [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE if ( arr [ i ] % x == 0 and largestDivisible < arr [ i ] ) : NEW_LINE INDENT largestDivisible = arr [ i ] NEW_LINE DEDENT if ( arr [ i ] < minimum ) : NEW_LINE INDENT minimum = arr [ i ] NEW_LINE DEDENT DEDENT if ( largestDivisible == - 1 ) : NEW_LINE INDENT return sum NEW_LINE DEDENT sumAfterOperation = sum - minimum - largestDivisible + ( x * minimum ) + ( largestDivisible // x ) NEW_LINE return min ( sum , sumAfterOperation ) NEW_LINE DEDENT arr = [ 5 , 5 , 5 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE x = 3 NEW_LINE print ( minSum ( arr , n , x ) ) NEW_LINE
def nthTerm ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT nth = 2 * ( ( n * n ) - n ) NEW_LINE DEDENT else : NEW_LINE INDENT nth = ( 2 * n * n ) - n NEW_LINE DEDENT return nth NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 5 NEW_LINE print ( nthTerm ( n ) ) NEW_LINE n = 25 NEW_LINE print ( nthTerm ( n ) ) NEW_LINE n = 25000000 NEW_LINE print ( nthTerm ( n ) ) NEW_LINE n = 250000007 NEW_LINE print ( nthTerm ( n ) ) NEW_LINE DEDENT
from collections import deque NEW_LINE q = int ( input ( ) ) NEW_LINE l = deque ( ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT query = input ( ) NEW_LINE if query [ 0 ] == "0" : NEW_LINE INDENT if query [ 1 ] == "0" : NEW_LINE INDENT l . appendleft ( query [ 2 ] ) NEW_LINE DEDENT elif query [ 1 ] == "1" : NEW_LINE INDENT print ( " \n " . join ( l ) ) NEW_LINE DEDENT else : NEW_LINE INDENT l . append ( query [ 2 ] ) NEW_LINE DEDENT DEDENT elif query [ 0 ] == "1" : NEW_LINE INDENT print ( l [ int ( query [ 1 ] ) ] ) NEW_LINE DEDENT elif query [ 0 ] == "2" : NEW_LINE INDENT print ( l [ int ( query [ 1 ] ) ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if query [ 1 ] == "0" : NEW_LINE INDENT l . popleft ( ) NEW_LINE DEDENT elif query [ 1 ] == "1" : NEW_LINE INDENT l . pop ( ) NEW_LINE DEDENT DEDENT DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE cur = 0 NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ cur ] == s [ cur + i ] : NEW_LINE INDENT cur += i NEW_LINE DEDENT else : NEW_LINE INDENT ans . append ( cur ) NEW_LINE cur = i NEW_LINE DEDENT DEDENT ans . append ( s [ cur : ] ) NEW_LINE cur += k NEW_LINE for i in range ( len ( ans ) ) : NEW_LINE INDENT print ( ans [ i ] ) NEW_LINE DEDENT
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT def newNode ( data ) : NEW_LINE INDENT temp = Node ( data ) NEW_LINE temp . data = data NEW_LINE temp . left = temp . right = None NEW_LINE return temp NEW_LINE DEDENT def printInorder ( node ) : NEW_LINE INDENT if ( node == None ) : NEW_LINE INDENT return NEW_LINE DEDENT printInorder ( node . left ) NEW_LINE print ( node . data ) NEW_LINE printInorder ( node . right ) NEW_LINE DEDENT def conBinaryTreeUtil ( pre , preM , preIndex , l , h , size ) : NEW_LINE INDENT if ( preIndex . a >= size or l > h ) : NEW_LINE INDENT return None NEW_LINE DEDENT root = newNode ( pre [ preIndex . a ] ) NEW_LINE preIndex = preIndex . a NEW_LINE l = h NEW_LINE if ( l == h ) : NEW_LINE INDENT return root NEW_LINE DEDENT i = l NEW_LINE for i in range ( l , h + 1 ) : NEW_LINE INDENT if ( pre [ preIndex . a ] == preM [ i ] ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( i <= h ) : NEW_LINE INDENT root . left = conBinaryTreeUtil ( pre , preM , preIndex , i , h , size ) NEW_LINE root . right = conBinaryTreeUtil ( pre , preM , preIndex , l + 1 , i - 1 , size ) NEW_LINE DEDENT return root NEW_LINE DEDENT def conBinaryTree ( root , pre , pre = [ 0 ] * 4 ) : NEW_LINE INDENT preM = 0 NEW_LINE root = newNode ( pre [ preIndex . a ] ) NEW_LINE preIndex = preIndex . a NEW_LINE DEDENT root = conBinaryTreeUtil ( root , pre , pre > 0 , 0 , size - 1 , size ) NEW_LINE printInorder ( root ) NEW_LINE
import sys NEW_LINE no_of_ chars = 256 NEW_LINE def findSubString ( string , pat ) : NEW_LINE INDENT len1 = len ( string ) NEW_LINE len2 = len ( pat ) NEW_LINE if ( len1 < len2 ) : NEW_LINE INDENT print ( " No suchCount exists " ) NEW_LINE return " " NEW_LINE DEDENT hash_ pat = [ 0 ] * ( no_of_ chars ) NEW_LINE for i in range ( len2 ) : NEW_LINE INDENT hash_ pat [ i ] += 1 NEW_LINE DEDENT start = 0 NEW_LINE start_index = - 1 NEW_LINE min_len = sys . maxsize NEW_LINE count = 0 NEW_LINE for j in range ( len1 ) : NEW_LINE INDENT hash_str [ ord ( string [ j ] ) ] += 1 NEW_LINE if ( hash_str [ ord ( string [ j ] ) ] != 0 and hash_str [ ord ( string [ j ] ) ] <= hash_ pat [ ord ( string [ j ] ) ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( count == len2 ) : NEW_LINE INDENT while ( hash_str [ ord ( string [ start ] ) ] > hash_ pat [ ord ( string [ start ] ) ] or hash_ pat [ ord ( string [ start ] ) ] == 0 ) : NEW_LINE INDENT if ( hash_str [ ord ( string [ start ] ) ] > hash_ pat [ ord ( string [ start ] ) ] ) : NEW_LINE INDENT hash_str [ ord ( string [ start ] ) ] -= 1 NEW_LINE DEDENT start += 1 NEW_LINE DEDENT DEDENT len_ pat [ len_str [ start ] ] -= 1 NEW_LINE DEDENT len_ higher = j - start + 1 NEW_LINE if ( min_len > len_ higher ) : NEW_LINE INDENT min_len = len_ higher NEW_LINE start_index = start NEW_LINE DEDENT DEDENT if ( start_index == - 1 ) : NEW_LINE INDENT print ( " No suchCount exists " ) NEW_LINE return " " NEW_LINE DEDENT return string [ start_index : start_index + min_len ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT string = " this is a string test
from math import atan , pi NEW_LINE E = 10 ** - 10 NEW_LINE def cross ( a0 , a1 , b0 , b1 ) : NEW_LINE INDENT return a0 * b1 - a1 * b0 NEW_LINE DEDENT while ( 1 ) : NEW_LINE INDENT a = [ 0 for i in range ( 2 ) ] NEW_LINE b = [ 0 for i in range ( 2 ) ] NEW_LINE c = [ 0 for i in range ( 2 ) ] NEW_LINE d = [ 0 for i in range ( 2 ) ] NEW_LINE try : NEW_LINE INDENT a [ 0 ] , a [ 1 ] , b [ 0 ] , b [ 1 ] , c [ 0 ] , c [ 1 ] , d [ 0 ] , d [ 1 ] = [ float ( i ) for i in input ( ) . split ( ) ] NEW_LINE A = cross ( ( d [ 1 ] - a [ 1 ] ) , ( d [ 0 ] - a [ 0 ] ) , ( b [ 1 ] - a [ 1 ] ) ) NEW_LINE B = cross ( ( c [ 0 ] - d [ 0 ] ) , ( c [ 1 ] - d [ 1 ] ) , ( a [ 0 ] - d [ 0 ] ) ) NEW_LINE C = cross ( ( a [ 1 ] - b [ 1 ] ) , ( a [ 0 ] - b [ 0 ] ) , ( c [ 1 ] - b [ 1 ] ) ) NEW_LINE D = cross ( ( a [ 1 ] - b [ 1 ] ) , ( c [ 0 ] - b [ 0 ] ) , ( d [ 1 ] - b [ 1 ] ) ) NEW_LINE if A * B * C * D < 0 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT DEDENT except EOFError : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE l = [ ] NEW_LINE for _ in range ( n ) : NEW_LINE INDENT l . append ( input ( ) ) NEW_LINE DEDENT s = set ( ) NEW_LINE for i in l : NEW_LINE INDENT s . add ( i ) NEW_LINE DEDENT if n > m : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT elif n == m : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in s : NEW_LINE INDENT if i not in l : NEW_LINE INDENT l . append ( i ) NEW_LINE DEDENT DEDENT if len ( l ) % 2 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT DEDENT
MAX = 100005 NEW_LINE def addPrimes ( ) : NEW_LINE INDENT n = MAX NEW_LINE prime = [ True for i in range ( n + 1 ) ] NEW_LINE p = 2 NEW_LINE while ( p * p <= n ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT ans = [ ] NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if ( prime [ p ] ) : NEW_LINE INDENT ans . append ( p ) NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT def is_prime ( n ) : NEW_LINE INDENT return ( n == 3 or n == 5 or n == 7 ) NEW_LINE DEDENT def find_Sum ( n ) : NEW_LINE INDENT v = addPrimes ( ) NEW_LINE for i in range ( 0 , len ( v ) , 1 ) : NEW_LINE INDENT flag = 1 NEW_LINE a = v [ i ] NEW_LINE while ( a != 0 ) : NEW_LINE INDENT d = a % 10 NEW_LINE a = a // 10 NEW_LINE if ( is_prime ( d ) ) : NEW_LINE INDENT flag = 0 NEW_LINE break NEW_LINE DEDENT DEDENT if ( flag == 1 ) : NEW_LINE INDENT n -= 1 NEW_LINE sum = sum + v [ i ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 7 NEW_LINE print ( find_Sum ( n ) ) NEW_LINE DEDENT
A = int ( input ( ) ) NEW_LINE B = int ( input ( ) ) NEW_LINE C = int ( input ( ) ) NEW_LINE D = int ( input ( ) ) NEW_LINE sum = 0 NEW_LINE if A > B : NEW_LINE INDENT sum += B NEW_LINE DEDENT else : NEW_LINE INDENT sum += A NEW_LINE DEDENT if C > D : NEW_LINE INDENT print ( sum + D ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( sum + C ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE print ( min ( max ( l ) - 1 , 90 ) ) NEW_LINE
def dp ( index , evenSum , oddSum , tight ) : NEW_LINE INDENT if ( index == len ( v ) ) : NEW_LINE INDENT if ( evenSum > oddSum ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT if ( dp [ index ] [ evenSum ] [ oddSum ] [ tight ] != - 1 ) : NEW_LINE INDENT return dp [ index ] [ evenSum ] [ oddSum ] [ tight ] NEW_LINE DEDENT limit = v [ index ] if ( tight > 0 ) else 9 NEW_LINE ans = 0 NEW_LINE for d in range ( limit + 1 ) : NEW_LINE INDENT currTight = 0 NEW_LINE if ( d == v [ index ] ) : NEW_LINE INDENT currTight = tight NEW_LINE DEDENT if ( d % 2 != 0 ) : NEW_LINE INDENT ans += dp ( index + 1 , evenSum , oddSum + d , currTight ) NEW_LINE DEDENT else : NEW_LINE INDENT ans += dp ( index + 1 , evenSum + d , oddSum , currTight ) NEW_LINE DEDENT DEDENT dp [ index ] [ evenSum ] [ oddSum ] [ tight ] = ans NEW_LINE return ans NEW_LINE DEDENT def CountNum ( n ) : NEW_LINE INDENT v = [ ] NEW_LINE while ( n > 0 ) : NEW_LINE INDENT v . append ( n % 10 ) NEW_LINE n = n // 10 NEW_LINE DEDENT v . reverse ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( 18 ) : NEW_LINE INDENT for j in range ( 180 ) : NEW_LINE INDENT for k in range ( 180 ) : NEW_LINE INDENT for l in range ( 2 ) : NEW_LINE INDENT dp ( i , j , k ) : NEW_LINE INDENT dp ( i , j , k ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return dp ( 0 , 0 , 0 , 1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT v = [ ] NEW_LINE L = 2 NEW_LINE R = 10 NEW_LINE print ( CountNum ( R ) - CountNum ( L - 1 ) ) NEW_LINE DEDENT
from sys import exit , stdin NEW_LINE A = [ list ( map ( int , stdin . readline ( ) . rstrip ( ) . split ( ) ) ) for _ in range ( 3 ) ] NEW_LINE B = [ [ 0 , 0 , 0 ] , [ 0 , 1 , 0 ] , [ 1 , 1 , 0 ] ] NEW_LINE C = [ [ 0 , 0 , 1 , 0 ] , [ 1 , 1 , 1 , 0 ] , [ 0 , - 1 , - 1 ] , [ - 1 , - 1 , 0 ] , [ 1 , - 1 , - 1 ] ] NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT if A [ i ] [ j ] == B [ j ] [ 0 ] + C [ i ] [ j ] == C [ j ] [ 1 ] + C [ i ] [ j ] : NEW_LINE INDENT print ( " Yes " ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT DEDENT print ( " No " ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE s = - 1 NEW_LINE k = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( l [ i ] > 0 and l [ i + 1 ] - l [ i ] > 0 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE break NEW_LINE DEDENT k = k + l [ i ] NEW_LINE l [ i ] = l [ i + 1 ] - l [ i ] NEW_LINE DEDENT print ( * l ) NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT print ( "0" if str ( 0 ) == str ( 0 ) else str ( 0 ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def search ( arr , x ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] == x : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 2 , 3 , 4 , 10 , 40 ] NEW_LINE x = 10 NEW_LINE result = search ( arr , x ) NEW_LINE if result == - 1 : NEW_LINE INDENT print ( " Element is not present in array " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Element is present at index " , result ) NEW_LINE DEDENT
N , C = map ( int , input ( ) . split ( ) ) NEW_LINE A = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( N ) ] NEW_LINE B = [ 0 ] * ( N + 1 ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT A [ i ] [ 0 ] = A [ i ] [ 1 ] + A [ i ] [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT A [ i ] [ 0 ] = A [ i - 1 ] [ 0 ] + A [ i ] [ 1 ] NEW_LINE DEDENT DEDENT for i in range ( N - 1 ) : NEW_LINE INDENT B [ i ] = max ( B [ i ] , B [ i + 1 ] - A [ i ] [ 0 ] ) + A [ i ] [ 1 ] NEW_LINE DEDENT for i in range ( N - 2 , - 1 , - 1 ) : NEW_LINE INDENT B [ i ] = max ( B [ i + 1 ] , B [ i + 2 ] - A [ i ] [ 1 ] ) + A [ i ] [ 2 ] NEW_LINE DEDENT print ( max ( B ) ) NEW_LINE
def toggleBitsFromLToR ( n , l , r ) : NEW_LINE INDENT num = ( ( 1 << r ) - 1 ) ^ ( ( 1 << ( l - 1 ) ) - 1 ) NEW_LINE return ( n ^ num ) NEW_LINE DEDENT def unsetBitsInGivenRange ( n , l , r ) : NEW_LINE INDENT num = ( 1 << ( 4 * 8 - 1 ) ) - 1 NEW_LINE num = toggleBitsFromLToR ( num , l , r ) NEW_LINE return ( n & num ) NEW_LINE DEDENT n = 42 NEW_LINE l = 2 NEW_LINE r = 5 NEW_LINE print ( unsetBitsInGivenRange ( n , l , r ) ) NEW_LINE
def Min step ( a , n ) : NEW_LINE INDENT positive = 0 NEW_LINE negative = 0 NEW_LINE zero = 0 NEW_LINE step = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] == 0 ) : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT elif ( a [ i ] < 0 ) : NEW_LINE INDENT negative += 1 NEW_LINE step = step + ( - 1 - a [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT positive += 1 NEW_LINE step = step + ( a [ i ] - 1 ) NEW_LINE DEDENT DEDENT if ( negative % 2 == 0 ) : NEW_LINE INDENT step = step + zero NEW_LINE DEDENT else : NEW_LINE INDENT if ( zero > 0 ) : NEW_LINE INDENT step = step + zero NEW_LINE DEDENT else : NEW_LINE INDENT step = step + 2 NEW_LINE DEDENT DEDENT return step NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 0 , - 2 , - 1 , - 3 , 4 ] NEW_LINE n = len ( a ) NEW_LINE print ( Min step ( a , n ) ) NEW_LINE DEDENT
n , a , b = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = 0 NEW_LINE if int ( s [ a - 1 ] ) == int ( s [ b - 1 ] ) : NEW_LINE INDENT ans = 0 NEW_LINE DEDENT else : NEW_LINE INDENT x = int ( s [ a - 1 ] ) NEW_LINE ans = abs ( x - y ) NEW_LINE DEDENT if int ( s [ a - 1 ] ) == int ( s [ b - 1 ] ) : NEW_LINE INDENT ans = 0 NEW_LINE DEDENT print ( ans ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT input ( ) NEW_LINE li = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE li . sort ( ) NEW_LINE print ( li [ - 1 ] + li [ - 2 ] ) NEW_LINE DEDENT
from math import gcd NEW_LINE def noOfSquares ( x1 , y1 , x2 , y2 ) : NEW_LINE INDENT dx = abs ( x2 - x1 ) NEW_LINE dy = abs ( y2 - y1 ) NEW_LINE ans = dx + dy - gcd ( dx , dy ) NEW_LINE print ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT x1 , y1 , x2 , y2 = 1 , 1 , 4 , 3 NEW_LINE noOfSquares ( x1 , y1 , x2 , y2 ) NEW_LINE DEDENT
def get_ maximum ( s , a ) : NEW_LINE INDENT n = len ( s ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ord ( s [ i ] ) - ord ( '0' ) < ord ( a [ ord ( s [ i ] ) - ord ( '0' ) ] ) : NEW_LINE INDENT j = i NEW_LINE while ( j < n and ( ord ( s [ j ] ) - ord ( '0' ) <= ord ( a [ ord ( s [ j ] ) - ord ( '0' ) ] ) ) : NEW_LINE INDENT s = s . replace ( '0' , ' ' , 1 ) NEW_LINE j += 1 NEW_LINE DEDENT return " " . join ( s ) NEW_LINE DEDENT DEDENT return " " . join ( s ) NEW_LINE DEDENT s = "1337" NEW_LINE a = [ 0 , 1 , 2 , 5 , 4 , 6 , 6 , 3 , 1 , 9 ] NEW_LINE print ( maximum ( s , a ) ) NEW_LINE
MAX_ INFITS = 20 NEW_LINE def isOctal ( n ) : NEW_LINE INDENT while ( n > 0 ) : NEW_LINE INDENT if ( ( n % 10 ) >= 8 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT n = n // 10 NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT def isPalindrome ( n ) : NEW_LINE INDENT divide = 8 if ( isOctal ( n ) == 0 ) else 10 NEW_LINE octal = [ 0 ] * MAX_ INF NEW_LINE i = 0 NEW_LINE while ( n != 0 ) : NEW_LINE INDENT octal [ i ] = n % divide NEW_LINE i += 1 NEW_LINE n = n // divide NEW_LINE DEDENT j = i - 1 NEW_LINE k = 0 NEW_LINE while ( k <= j ) : NEW_LINE INDENT if ( octal [ j ] != octal [ k ] ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT j = j - 1 NEW_LINE k += 1 NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 97 NEW_LINE if ( isPalindrome ( n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE k = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == '4' and s [ i ] == '7' : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT if k > n // 2 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT
def binarySearch ( arr , low , high ) : NEW_LINE INDENT if ( high < low ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = int ( ( low + high ) / 2 ) NEW_LINE midValue = arr [ mid ] NEW_LINE if ( mid == arr [ mid ] ) : NEW_LINE INDENT return mid NEW_LINE DEDENT leftindex = min ( mid - 1 , midValue ) NEW_LINE left = binarySearch ( arr , low , leftindex ) NEW_LINE if ( left >= 0 ) : NEW_LINE INDENT return left NEW_LINE DEDENT rightindex = max ( mid + 1 , midValue ) NEW_LINE right = binarySearch ( arr , rightindex , high ) NEW_LINE return right NEW_LINE DEDENT arr = [ - 10 , - 5 , 2 , 2 , 2 , 3 , 4 , 7 , 9 , 12 , 13 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " obst Point is " , binarySearch ( arr , 0 , n - 1 ) ) NEW_LINE arr1 = [ - 10 , - 1 , 3 , 3 , 10 , 30 , 30 , 50 , 100 ] NEW_LINE print ( " obst Point is " , binarySearch ( arr1 , 0 , n - 1 ) ) NEW_LINE
MAX = 10000 NEW_LINE prodDig = [ 0 ] * MAX NEW_LINE def getDigitProduct ( x ) : NEW_LINE INDENT if ( x < 10 ) : NEW_LINE INDENT return x NEW_LINE DEDENT if ( prodDig [ x ] != 0 ) : NEW_LINE INDENT return prodDig [ x ] NEW_LINE DEDENT prod = ( x % 10 ) * getDigitProduct ( x // 10 ) NEW_LINE return ( prodDig [ x ] = prod ) NEW_LINE DEDENT def find pq ( n ) : NEW_LINE INDENT res = [ ] NEW_LINE for i in range ( 1 , ( n // 2 ) + 1 ) : NEW_LINE INDENT if ( i * getDigitProduct ( i ) == n ) : NEW_LINE INDENT res . append ( i ) NEW_LINE DEDENT DEDENT if ( len ( res ) == 0 ) : NEW_LINE INDENT print ( " NO seed exists " ) NEW_LINE return NEW_LINE DEDENT for i in range ( len ( res ) ) : NEW_LINE INDENT print ( res [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE find pq ( n ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 10 ** 9 NEW_LINE for i in range ( n - k + 1 ) : NEW_LINE INDENT if x [ i + k - 1 ] <= x [ i ] : NEW_LINE INDENT ans = min ( ans , abs ( x [ i ] - x [ i + k - 1 ] ) + abs ( x [ i + k - 1 ] - x [ i ] ) ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = min ( ans , abs ( x [ i ] - x [ i + k - 1 ] ) + abs ( x [ i ] - x [ i + k - 1 ] ) ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def diff ( n , mid ) : NEW_LINE INDENT if ( n > ( mid * mid * mid ) ) : NEW_LINE INDENT return ( n - ( mid * mid * mid ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( ( mid * mid * mid ) - n ) NEW_LINE DEDENT DEDENT def cubicRoot ( n ) : NEW_LINE INDENT start = 0 NEW_LINE end = n NEW_LINE e = 0.0000001 NEW_LINE while ( True ) : NEW_LINE INDENT mid = ( start + end ) / 2 NEW_LINE error = diff ( n , mid ) NEW_LINE if ( error <= e ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( mid * mid * mid > n ) : NEW_LINE INDENT end = mid NEW_LINE DEDENT else : NEW_LINE INDENT start = mid NEW_LINE DEDENT DEDENT DEDENT n = 3 NEW_LINE print ( " Cubic root of " , n , " is " , cubicRoot ( n ) ) NEW_LINE
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE c = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c . sort ( ) NEW_LINE c1 = c [ 0 ] NEW_LINE for i in range ( 1 , a ) : NEW_LINE INDENT if c [ i ] == c [ i - 1 ] : NEW_LINE INDENT c1 . append ( i ) NEW_LINE DEDENT DEDENT x = max ( c1 ) NEW_LINE y = c [ - 1 ] NEW_LINE for i in range ( a ) : NEW_LINE INDENT if c [ i ] == x : NEW_LINE INDENT y += 1 NEW_LINE DEDENT DEDENT print ( x , y ) NEW_LINE
def inv ( a , m ) : NEW_LINE INDENT m0 = m NEW_LINE x0 = 0 NEW_LINE x1 = 1 NEW_LINE if ( m == 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT while ( a > 1 ) : NEW_LINE INDENT q = a // m NEW_LINE t = m NEW_LINE m = a % m NEW_LINE a = t NEW_LINE t = x0 NEW_LINE x0 = x1 - q * x0 NEW_LINE x1 = t NEW_LINE DEDENT if ( x1 < 0 ) : NEW_LINE INDENT x1 += m0 NEW_LINE DEDENT return x1 NEW_LINE DEDENT def findMinX ( num , rem , k ) : NEW_LINE INDENT prod = 1 NEW_LINE for i in range ( k ) : NEW_LINE INDENT prod *= num [ i ] NEW_LINE DEDENT result = 0 NEW_LINE for i in range ( k ) : NEW_LINE INDENT pp = prod // num [ i ] NEW_LINE result += rem [ i ] * inv ( pp , num [ i ] ) * pp NEW_LINE DEDENT return result % prod NEW_LINE DEDENT num = [ 3 , 4 , 5 ] NEW_LINE rem = [ 2 , 3 , 1 ] NEW_LINE k = len ( num ) NEW_LINE print ( " x is " , findMinX ( num , rem , k ) ) NEW_LINE
def compare ( a , b ) : NEW_LINE INDENT return a > b NEW_LINE DEDENT def findMaxOR ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr [ i ] < arr [ j ] ) : NEW_LINE INDENT arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ] NEW_LINE DEDENT DEDENT DEDENT maxOR = arr [ 0 ] NEW_LINE count = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( ( maxOR | arr [ i ] ) > maxOR ) : NEW_LINE INDENT maxOR = maxOR | arr [ i ] NEW_LINE count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT arr = [ 5 , 1 , 3 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxOR ( arr , n ) ) NEW_LINE
def seriesSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i * ( i + 1 ) / 2 NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 4 NEW_LINE print ( seriesSum ( n ) ) NEW_LINE
def ali PriorityQueue ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 12 NEW_LINE print ( ali PriorityQueue ( n ) ) NEW_LINE DEDENT
def pentagon_pyramidal ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT p = ( 3 * i * i - i ) // 2 NEW_LINE sum = sum + p NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 4 NEW_LINE print ( pentagon_pyramidal ( n ) ) NEW_LINE
def fifthPowerSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum = sum + ( i * i * i * i * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 6 NEW_LINE print ( fifthPowerSum ( n ) ) NEW_LINE
def squaresum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( i * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 4 NEW_LINE print ( squaresum ( n ) ) NEW_LINE
def seriesSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i * ( i + 1 ) / 2 NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 4 NEW_LINE print ( seriesSum ( n ) ) NEW_LINE
def sumOfSeries ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 10 NEW_LINE print ( sumOfSeries ( n ) ) NEW_LINE
def findSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( ( i * ( i + 1 ) * ( 2 * i + 1 ) ) // 6 ) NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE print ( findSum ( n ) ) NEW_LINE DEDENT
def 4 ( ) : NEW_LINE INDENT return 3 * ( 1 << 30 ) NEW_LINE DEDENT def ii ( ) : NEW_LINE INDENT return int ( ( 1 << 30 ) - 1 ) NEW_LINE DEDENT def iii ( ) : NEW_LINE INDENT return [ int ( i ) for i in input ( ) . split ( " " ) ] NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT n = 6 NEW_LINE print ( 4 ( ) ) NEW_LINE DEDENT def iiii ( ) : NEW_LINE INDENT return iii ( ) NEW_LINE DEDENT t = iii ( ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT t = t + iii ( ) - iii ( ) NEW_LINE DEDENT print ( t ) NEW_LINE
def squareSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( 2 * i ) * ( 2 * i ) NEW_LINE DEDENT return sum NEW_LINE DEDENT print ( squareSum ( 8 ) ) NEW_LINE
def AvgofSquareN ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += ( i * i ) NEW_LINE DEDENT return sum / n NEW_LINE DEDENT n = 2 NEW_LINE print ( AvgofSquareN ( n ) ) NEW_LINE
def findSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT sum += i * ( n - i ) NEW_LINE DEDENT return 2 * sum NEW_LINE DEDENT n = 3 NEW_LINE print ( findSum ( n ) ) NEW_LINE
def solve ( n , base ) : NEW_LINE INDENT sum = 0 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT remainder = n % base NEW_LINE sum = sum + remainder NEW_LINE n = n // base NEW_LINE DEDENT return sum NEW_LINE DEDENT def SumsOfDigits ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for base in range ( 2 , int ( n / 2 ) + 1 ) : NEW_LINE INDENT sum = sum + solve ( n , base ) NEW_LINE DEDENT print ( sum ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 8 NEW_LINE SumsOfDigits ( n ) NEW_LINE DEDENT
import sys NEW_LINE readline = sys . stdin . readline NEW_LINE write = sys . stdout . write NEW_LINE def solve ( ) : NEW_LINE INDENT N = int ( readline ( ) ) NEW_LINE if N == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT if N == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT * p , = range ( N ) NEW_LINE def make_prime_list ( num ) : NEW_LINE INDENT if num < 2 : NEW_LINE INDENT return [ ] NEW_LINE DEDENT if num % 2 == 1 : NEW_LINE INDENT return [ num ] NEW_LINE DEDENT prime_list = make_prime_list ( num // 2 ) NEW_LINE prime_list . sort ( reverse = True ) NEW_LINE for i in range ( len ( prime_list ) ) : NEW_LINE INDENT if prime_list [ i ] == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( i + 1 , len ( prime_list ) ) : NEW_LINE INDENT prime_list [ j ] = 0 NEW_LINE DEDENT DEDENT return [ prime_list for prime_list in prime_list if prime_list [ - 1 ] == 0 ] NEW_LINE DEDENT def make_prime_list ( num ) : NEW_LINE INDENT prime_list = make_prime_list ( num // 2 ) NEW_LINE prime_list = make_prime_list ( num ) NEW_LINE return [ prime_list for prime_list in prime_list if prime_ [ - 1 ] == 0 ] NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT while solve ( ) : NEW_LINE INDENT data = readline ( ) . strip ( ) NEW_LINE if data [ 0 ] == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( len ( data ) ) : NEW_LINE INDENT ans += data [ i ] NEW_LINE DEDENT write ( " % d \n " % ans ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def bitCount ( n ) : NEW_LINE INDENT return bin ( n ) . count ( '1' ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( bitCount ( 4 ) ) NEW_LINE print ( bitCount ( 15 ) ) NEW_LINE DEDENT
def optimalSearchTree ( keys , freq , n ) : NEW_LINE INDENT cost = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT cost [ i ] [ i ] = freq [ i ] NEW_LINE DEDENT for L in range ( 2 , n + 1 ) : NEW_LINE INDENT for i in range ( n - L + 1 + 1 ) : NEW_LINE INDENT j = i + L - 1 NEW_LINE cost [ i ] [ j ] = 10 ** 9 + 1 NEW_LINE for r in range ( i , j + 1 ) : NEW_LINE INDENT c = ( ( r > i ) if r > i else 0 ) + ( ( r < j ) if r < j else 0 ) + sum ( freq , i , j ) NEW_LINE if c < cost [ i ] [ j ] : NEW_LINE INDENT cost [ i ] [ j ] = c NEW_LINE DEDENT DEDENT DEDENT DEDENT return cost [ 0 ] [ n - 1 ] NEW_LINE DEDENT def sum ( freq , i , j ) : NEW_LINE INDENT s = 0 NEW_LINE for k in range ( i , j + 1 ) : NEW_LINE INDENT if k >= len ( freq ) : NEW_LINE INDENT continue NEW_LINE DEDENT s += freq [ k ] NEW_LINE DEDENT return s NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT keys = [ 10 , 12 , 20 ] NEW_LINE freq = [ 34 , 8 , 50 ] NEW_LINE n = len ( keys ) NEW_LINE print ( " Cost of permutationsimal BST is " , optimalSearchTree ( keys , freq , n ) ) NEW_LINE DEDENT
def get ( x , y , z ) : NEW_LINE INDENT if ( x > z ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT val = z - x NEW_LINE div = ( z - x ) // y NEW_LINE ans = div * y + x NEW_LINE return ans NEW_LINE DEDENT x = 1 NEW_LINE y = 5 NEW_LINE z = 8 NEW_LINE print ( get ( x , y , z ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE k = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT ans += abs ( a [ k + 1 ] - a [ k ] ) NEW_LINE k += 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT ans += abs ( a [ k + 1 ] - a [ k ] ) NEW_LINE k += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE
def binomialCoeff ( n , k ) : NEW_LINE INDENT C = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( 0 , n + 1 , 1 ) : NEW_LINE INDENT for j in range ( 0 , min ( i , k ) + 1 , 1 ) : NEW_LINE INDENT if ( j == 0 or j == i ) : NEW_LINE INDENT C [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return C [ n ] [ k ] NEW_LINE DEDENT def maxcoefficientvalue ( n ) : NEW_LINE INDENT if ( n % 2 == 0 ) : NEW_LINE INDENT return binomialCoeff ( n , n // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT return binomialCoeff ( n , ( n + 1 ) // 2 ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 4 NEW_LINE print ( maxcoefficientvalue ( n ) ) NEW_LINE DEDENT
def isVowel ( ch ) : NEW_LINE INDENT if ( ch == ' a ' or ch == ' e ' or ch == ' i ' or ch == ' o ' or ch == ' u ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT def vowelPairs ( s , n ) : NEW_LINE INDENT cnt = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( isVowel ( s [ i ] ) and isVowel ( s [ i + 1 ] ) ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " abaebio " NEW_LINE n = len ( s ) NEW_LINE print ( vowelPairs ( s , n ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE w , h = map ( int , input ( ) . split ( ) ) NEW_LINE mp = [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( n ) ] NEW_LINE s , t = map ( int , input ( ) . split ( ) ) NEW_LINE mp . sort ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( h - t + 1 ) : NEW_LINE INDENT for j in range ( w - t + 1 ) : NEW_LINE INDENT ans = max ( ans , sum ( mp [ : i + t ] ) ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def isSubstring ( s1 , s2 ) : NEW_LINE INDENT M = len ( s1 ) NEW_LINE N = len ( s2 ) NEW_LINE for i in range ( N - M + 1 ) : NEW_LINE INDENT j = 0 NEW_LINE for j in range ( M ) : NEW_LINE INDENT if ( s2 [ i + j ] != s1 [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( j == M - 1 ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s1 = " for " NEW_LINE s2 = " geeksforgeeks " NEW_LINE res = isSubstring ( s1 , s2 ) NEW_LINE if ( res == - 1 ) : NEW_LINE INDENT print ( " Not present " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " P present at index " , res ) NEW_LINE DEDENT DEDENT
def angleOncirCumference ( z ) : NEW_LINE INDENT return ( z / 2 ) NEW_LINE DEDENT angle = 65 NEW_LINE z = angleOncirCumference ( angle ) NEW_LINE print ( " The angle is " , z , " degrees " ) NEW_LINE
def countSubarraysof1and0 ( a , n ) : NEW_LINE INDENT count1 = 0 NEW_LINE count0 = 0 NEW_LINE number1 = 0 NEW_LINE number0 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] == 1 ) : NEW_LINE INDENT count1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT number1 += ( count1 ) * ( count1 + 1 ) / 2 NEW_LINE count1 = 0 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] == 0 ) : NEW_LINE INDENT count0 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT number0 += ( count0 ) * ( count0 + 1 ) / 2 NEW_LINE count0 = 0 NEW_LINE DEDENT DEDENT if ( count1 > 0 ) : NEW_LINE INDENT number1 += ( count1 ) * ( count1 + 1 ) / 2 NEW_LINE DEDENT if ( count0 > 0 ) : NEW_LINE INDENT number0 += ( count0 ) * ( count0 + 1 ) / 2 NEW_LINE DEDENT print ( " Count of subarrays of 0 only : " , number0 ) NEW_LINE print ( " Count of subarrays of 1 only : " , number1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 ] NEW_LINE n = len ( a ) NEW_LINE countSubarraysof1and0 ( a , n ) NEW_LINE DEDENT
def printNumbers ( N ) : NEW_LINE INDENT flag = 1 ; NEW_LINE x = N ; NEW_LINE if ( N > 0 ) : NEW_LINE INDENT while ( x > 0 and flag == 1 ) : NEW_LINE INDENT digit = x % 10 ; NEW_LINE if ( digit != 1 and digit != 3 ) : NEW_LINE INDENT flag = 0 ; NEW_LINE DEDENT x = x // 10 ; NEW_LINE DEDENT if ( flag == 1 ) : NEW_LINE INDENT print ( N , end = " " ) ; NEW_LINE DEDENT printNumbers ( N - 1 ) ; NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 20 ; NEW_LINE printNumbers ( N ) ; NEW_LINE DEDENT
def printPermutation ( n , k ) : NEW_LINE INDENT mx = n NEW_LINE for i in range ( 1 , k + 1 ) : NEW_LINE INDENT print ( mx , end = " " ) NEW_LINE mx -= 1 NEW_LINE DEDENT for i in range ( 1 , mx + 1 ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 5 NEW_LINE K = 3 NEW_LINE if ( K >= N - 1 ) : NEW_LINE INDENT print ( " Not Possible " ) NEW_LINE DEDENT else : NEW_LINE INDENT printPermutation ( N , K ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE l . append ( [ a + b + c + d , a + b , c + d ] ) NEW_LINE DEDENT k = 1 NEW_LINE for i in l : NEW_LINE INDENT if i [ 0 ] <= i [ 1 ] : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT print ( k ) NEW_LINE
def check ( s1 , s2 ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for i in range ( len ( s1 ) ) : NEW_LINE INDENT mp [ s1 [ i ] ] = mp . get ( s1 [ i ] , 0 ) + 1 NEW_LINE DEDENT for i in range ( len ( s2 ) ) : NEW_LINE INDENT if ( mp [ s2 [ i ] ] > 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s1 = " geeksforgeeks " NEW_LINE s2 = " geeks " NEW_LINE yes_or_no = check ( s1 , s2 ) NEW_LINE if ( yes_or_no == True ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
for s in [ * open ( 0 ) ] [ 1 : ] : a , b , c , d = map ( int , s . split ( ) ) ; print ( ' YNEOS ' [ a - b > c * n : : 2 ] ) NEW_LINE
def findElements ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( arr [ j ] > arr [ i ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if ( count >= 2 ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT arr = [ 2 , - 6 , 3 , 5 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE findElements ( arr , n ) NEW_LINE
N = 3 NEW_LINE def maxPathSum ( tri , m , n ) : NEW_LINE INDENT for i in range ( m - 1 , - 1 , - 1 ) : NEW_LINE INDENT for j in range ( 0 , i + 1 ) : NEW_LINE INDENT if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) : NEW_LINE INDENT tri [ i ] [ j ] += tri [ i + 1 ] [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] NEW_LINE DEDENT DEDENT DEDENT return tri [ 0 ] [ 0 ] NEW_LINE DEDENT tri = [ [ 1 , 0 , 0 ] , [ 4 , 8 , 0 ] , [ 1 , 5 , 3 ] ] NEW_LINE print ( maxPathSum ( tri , 2 , 2 ) ) NEW_LINE
def isHeap ( arr , n ) : NEW_LINE INDENT for i in range ( ( n - 2 ) // 2 + 1 ) : NEW_LINE INDENT if ( arr [ 2 * i + 1 ] > arr [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT arr = [ 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE if ( isHeap ( arr , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def isHeap ( arr , i , n ) : NEW_LINE INDENT if ( i > ( n - 2 ) // 2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr [ 2 * i + 2 ] and isHeap ( arr , 2 * i + 1 , n ) and isHeap ( arr , 2 * i + 2 , n ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT arr = [ 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 ] NEW_LINE n = len ( arr ) - 1 NEW_LINE if ( isHeap ( arr , 0 , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
import sys NEW_LINE input = sys . stdin . readline NEW_LINE def print ( * args , end = ' \n ' , sep = ' ' ) -> None : NEW_LINE INDENT sys . stdout . write ( sep . join ( map ( str , args ) ) + end ) NEW_LINE DEDENT def Solve ( ) : NEW_LINE INDENT ax , ay = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE bx , by = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE cx , cy = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if ( bx - ax ) * ( cx - ax ) == ( by - ay ) * ( cy - ay ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT Solve ( ) NEW_LINE DEDENT
import sys NEW_LINE def findMinDel ( arr , n ) : NEW_LINE INDENT min_num = sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT min_num = min ( arr [ i ] , min_num ) NEW_LINE DEDENT cnt = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == min_num ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return n - cnt NEW_LINE DEDENT arr = [ 3 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMinDel ( arr , n ) ) NEW_LINE
def count ( x , y ) : NEW_LINE INDENT ans = 0 ; NEW_LINE m = dict . fromkeys ( x , 0 ) ; NEW_LINE while ( x % y != 0 ) : NEW_LINE INDENT x = x % y ; NEW_LINE ans += 1 ; NEW_LINE if ( x in m . keys ( ) ) : NEW_LINE INDENT return - 1 ; NEW_LINE DEDENT m [ x ] += 1 ; NEW_LINE x = x * 10 ; NEW_LINE DEDENT return ans ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT res = count ( 1 , 2 ) ; NEW_LINE if ( res == - 1 ) : NEW_LINE INDENT print ( " INF " ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( res ) ; NEW_LINE DEDENT res = count ( 5 , 3 ) ; NEW_LINE if ( res == - 1 ) : NEW_LINE INDENT print ( " INF " ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( res ) ; NEW_LINE DEDENT res = count ( 3 , 5 ) ; NEW_LINE if ( res == - 1 ) : NEW_LINE INDENT print ( " INF " ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( res ) ; NEW_LINE DEDENT DEDENT
def isPossibleToMakeDivisible ( arr , n ) : NEW_LINE INDENT remainder = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT remainder = ( remainder + arr [ i ] ) % 3 NEW_LINE DEDENT return ( remainder == 0 ) NEW_LINE DEDENT arr = [ 40 , 50 , 90 ] NEW_LINE n = 3 NEW_LINE if ( isPossibleToMakeDivisible ( arr , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
from collections import defaultdict NEW_LINE N , K = map ( int , input ( ) . split ( ) ) NEW_LINE A = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if 1 not in A : NEW_LINE INDENT A . insert ( 0 , 0 ) NEW_LINE DEDENT cnt = defaultdict ( int ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT cnt [ A [ i ] - 1 ] += 1 NEW_LINE DEDENT def dfs ( k , x ) : NEW_LINE INDENT if cnt [ x ] == k : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT dfs ( k , x ) NEW_LINE print ( cnt [ x ] ) NEW_LINE
def printCubes ( a , b ) : NEW_LINE INDENT for i in range ( a , b + 1 ) : NEW_LINE INDENT j = 1 NEW_LINE while ( j * j * j <= i ) : NEW_LINE INDENT if ( j * j * j == i ) : NEW_LINE INDENT print ( j * j * j , end = " " ) NEW_LINE break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT DEDENT DEDENT a = 1 NEW_LINE b = 100 NEW_LINE print ( " Perfect cubes in given range : " ) NEW_LINE printCubes ( a , b ) NEW_LINE
def getMaxulo ( n , d ) : NEW_LINE INDENT return ( n & ( d - 1 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE d = 4 NEW_LINE print ( n , " moduo " , d , " is " , getMaxulo ( n , d ) ) NEW_LINE DEDENT
n , d = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE l . sort ( ) NEW_LINE ans = 0 NEW_LINE k = 2 NEW_LINE last = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT cnt = 0 NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT if l [ j ] - l [ i ] > k : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT last = j NEW_LINE DEDENT DEDENT ans = max ( ans , cnt ) NEW_LINE k += 1 NEW_LINE DEDENT print ( n - ans ) NEW_LINE
s = input ( ) NEW_LINE f = s . find ( " f " ) NEW_LINE l = s . rfind ( " e " ) NEW_LINE if f == - 1 : NEW_LINE INDENT print ( 7 * f + l + 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 7 * f + l + 1 ) NEW_LINE DEDENT
def isPerfectCube ( x ) : NEW_LINE INDENT cr = ( int ) ( pow ( x , 1 ) ) NEW_LINE return ( cr * cr * cr == x ) NEW_LINE DEDENT def canBePerfectCube ( N , K ) : NEW_LINE INDENT if ( isPerfectCube ( N + K ) or isPerfectCube ( N - K ) == 1 ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 7 NEW_LINE K = 1 NEW_LINE canBePerfectCube ( N , K ) NEW_LINE N = 5 NEW_LINE K = 4 NEW_LINE canBePerfectCube ( N , K ) NEW_LINE N = 7 NEW_LINE K = 2 NEW_LINE canBePerfectCube ( N , K ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE t = input ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if t [ i : i + n ] == s [ : : - 1 ] : NEW_LINE INDENT ans += 2 * n NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def dfs ( v , visited ) : NEW_LINE INDENT visited [ v ] = True NEW_LINE print ( v , end = " " ) NEW_LINE for i in adj [ v ] : NEW_LINE INDENT if not visited [ i ] : NEW_LINE INDENT dfsUtil ( i , visited ) NEW_LINE DEDENT DEDENT DEDENT def DFS ( v ) : NEW_LINE INDENT visited = [ False for i in range ( V ) ] NEW_LINE dfsUtil ( v , visited ) NEW_LINE DEDENT def DFS ( v , visited ) : NEW_LINE INDENT visited [ v ] = True NEW_LINE print ( v , end = " " ) NEW_LINE i = adj [ v ] . index ( True ) NEW_LINE while ( i ) : NEW_LINE INDENT n = i . next ( ) NEW_LINE if not visited [ n ] : NEW_LINE INDENT DFSUtil ( n , visited ) NEW_LINE DEDENT DEDENT DEDENT def DFS ( v ) : NEW_LINE INDENT visited = [ False for i in range ( V ) ] NEW_LINE DFSUtil ( v , visited ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT g = [ ] NEW_LINE v = 4 NEW_LINE g . addEdge ( 0 , 1 ) NEW_LINE g . addEdge ( 0 , 2 ) NEW_LINE g . addEdge ( 1 , 2 ) NEW_LINE g . addEdge ( 2 , 0 ) NEW_LINE g . addEdge ( 2 , 3 ) NEW_LINE g . addEdge ( 3 , 3 ) NEW_LINE print ( " ruiseki is First nd ndp " ) NEW_LINE g . DFS ( 2 ) NEW_LINE DEDENT
def countDigits ( val , arr ) : NEW_LINE INDENT while ( val > 0 ) : NEW_LINE INDENT digit = val % 10 NEW_LINE arr [ digit ] += 1 NEW_LINE val = int ( val / 10 ) NEW_LINE DEDENT return NEW_LINE DEDENT def countFrequency ( x , n ) : NEW_LINE INDENT freq_count = [ 0 ] * 10 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT val = pow ( x , i ) NEW_LINE countDigits ( val , freq_count ) NEW_LINE DEDENT for i in range ( 0 , 10 ) : NEW_LINE INDENT print ( freq_count [ i ] , end = " " ) NEW_LINE DEDENT DEDENT x = 15 NEW_LINE n = 3 NEW_LINE countFrequency ( x , n ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE a . sort ( ) NEW_LINE flag = False NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if a [ 2 * i ] > a [ 2 * i + 1 ] : NEW_LINE INDENT flag = True NEW_LINE break NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if ( n <= 2 ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT elif ( n > 2 ) : NEW_LINE INDENT print ( n - 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( n ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE a = set ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = set ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if len ( a ) != n : NEW_LINE INDENT print ( " I have the matr " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " I have the matr " ) NEW_LINE DEDENT
m = 6 NEW_LINE n = 4 NEW_LINE def linearCheck ( ar , arr ) : NEW_LINE INDENT for i in range ( m ) : NEW_LINE INDENT matched = True NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ar [ i ] [ j ] != arr [ j ] : NEW_LINE INDENT matched = False NEW_LINE break NEW_LINE DEDENT DEDENT if matched : NEW_LINE INDENT return i + 1 NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT mat = [ [ 0 , 0 , 1 , 0 ] , [ 10 , 9 , 22 , 23 ] , [ 40 , 40 , 40 , 40 ] , [ 43 , 44 , 55 , 68 ] , [ 81 , 73 , 100 , 132 ] , [ 100 , 75 , 125 , 133 ] ] NEW_LINE row = [ 10 , 9 , 22 , 23 ] NEW_LINE print ( linearCheck ( mat , row ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE s = sum ( a ) NEW_LINE k = 0 NEW_LINE if s % n == 0 : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if a [ i ] > s : NEW_LINE INDENT k += 1 NEW_LINE DEDENT DEDENT print ( k ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT
N = int ( input ( ) ) NEW_LINE t = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE v = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE max_v = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum_v = sum ( v [ : i ] ) NEW_LINE max_v = max ( max_v , sum_v ) NEW_LINE DEDENT for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT sum_v = sum ( v [ : i ] ) NEW_LINE max_v = max ( max_v , sum_v + 1 ) NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT if v [ i ] > max_v : NEW_LINE INDENT max_v = v [ i ] NEW_LINE DEDENT DEDENT for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT sum_v = sum ( v [ i : i + 1 ] ) NEW_LINE max_v = max ( max_v , sum_v + 1 ) NEW_LINE DEDENT print ( max_v ) NEW_LINE
def nthTerm ( n ) : NEW_LINE INDENT return 2 * pow ( n , 2 ) + 4 * n - 2 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def nthTerm ( n ) : NEW_LINE INDENT return 7 * pow ( n , 2 ) - 7 * n + 7 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def nthTerm ( n ) : NEW_LINE INDENT return 5 * pow ( n , 2 ) - 5 * n NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def nthTerm ( n ) : NEW_LINE INDENT return ( pow ( n , 2 ) + 2 * n + 2 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def nthTerm ( n ) : NEW_LINE INDENT return 2 * pow ( n , 3 ) + pow ( n , 2 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 3 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def nthTerm ( n ) : NEW_LINE INDENT return 2 * pow ( n , 2 ) - n - 1 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def nthTerm ( n ) : NEW_LINE INDENT return ( pow ( n , 2 ) - 2 * n + 2 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def nthTerm ( n ) : NEW_LINE INDENT return 3 * pow ( n , 2 ) + n - 2 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 4 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a > 0 and b > 0 ) : NEW_LINE INDENT print ( "0 + " + str ( abs ( a ) + abs ( b ) ) + " - " + str ( abs ( a ) + abs ( b ) ) ) NEW_LINE DEDENT elif ( a < 0 and b < 0 ) : NEW_LINE INDENT print ( " - " + str ( abs ( a ) + abs ( b ) + abs ( a ) ) + " - " + str ( abs ( a ) + abs ( b ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " + " + str ( abs ( a ) + abs ( b ) ) + " - " + str ( abs ( a ) + abs ( b ) ) ) NEW_LINE DEDENT
import sys NEW_LINE input = lambda : sys . stdin . readline ( ) . rstrip ( ) NEW_LINE sys . setrecursionlimit ( max ( 1000 , 10 ** 9 ) ) NEW_LINE write = lambda x : sys . stdout . write ( x + " \n " ) NEW_LINE s = input ( ) NEW_LINE K = int ( input ( ) ) NEW_LINE n = len ( s ) NEW_LINE v = [ ] NEW_LINE for i in range ( K ) : NEW_LINE INDENT v . append ( s [ i : i + K ] ) NEW_LINE DEDENT v . sort ( ) NEW_LINE l = len ( s ) NEW_LINE if K <= l : NEW_LINE INDENT print ( v [ K - 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( v [ K - 1 ] + s [ 0 : K ] ) NEW_LINE DEDENT
class Solution ( object ) : NEW_LINE INDENT def fib ( self , N ) : NEW_LINE INDENT if N < len ( memo ) : NEW_LINE INDENT return memo [ N ] NEW_LINE DEDENT for i in range ( len ( memo ) , N + 1 ) : NEW_LINE INDENT memo [ i ] = ( memo [ i - 1 ] + memo [ i - 2 ] ) NEW_LINE DEDENT return memo [ N ] NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE N = 2 NEW_LINE out = sObj . fib ( N ) NEW_LINE print ( out ) NEW_LINE DEDENT
from collections import Counter NEW_LINE for jj in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = list ( input ( ) ) NEW_LINE c = input ( ) NEW_LINE n1 = n . count ( ' a ' ) NEW_LINE n2 = n . count ( ' b ' ) NEW_LINE n3 = n . count ( ' c ' ) NEW_LINE if n1 == n2 == n3 == n : NEW_LINE INDENT print ( c ) NEW_LINE DEDENT elif n1 > n2 : NEW_LINE INDENT print ( c + n1 ) NEW_LINE DEDENT elif n2 > n3 : NEW_LINE INDENT print ( c + n2 ) NEW_LINE DEDENT else : NEW_LINE INDENT t = ' ' NEW_LINE for i in range ( n ) : NEW_LINE INDENT if i == 0 : NEW_LINE INDENT t += chr ( 97 + i ) NEW_LINE DEDENT else : NEW_LINE INDENT t += chr ( 97 + i ) NEW_LINE DEDENT DEDENT print ( t ) NEW_LINE DEDENT DEDENT
PI = 3.142 NEW_LINE def cosXSertiesSum ( x , n ) : NEW_LINE INDENT x = x * ( PI / 180.0 ) NEW_LINE res = 1 NEW_LINE sign = 1 NEW_LINE fact = 1 NEW_LINE pow = 1 NEW_LINE for i in range ( 1 , 5 ) : NEW_LINE INDENT sign = sign * - 1 NEW_LINE fact = fact * ( 2 * i - 1 ) * ( 2 * i ) NEW_LINE pow = pow * x * x NEW_LINE res = res + sign * pow / fact NEW_LINE DEDENT return res NEW_LINE DEDENT x = 50 NEW_LINE n = 5 NEW_LINE print ( ( cosXSertiesSum ( x , 5 ) * 1000000 ) / 1000000 1000000 1000000 ) NEW_LINE
def findNumber ( N , S ) : NEW_LINE INDENT i = ( ( N ) * ( N + 1 ) / 4 ) - ( S + 1 ) / 2 NEW_LINE return i NEW_LINE DEDENT def check ( N , S ) : NEW_LINE INDENT i = findNumber ( N , S ) NEW_LINE integerI = i NEW_LINE if ( i - integerI == 0 ) : NEW_LINE INDENT print ( " Yes : " , integerI , " , " , ( integerI + 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE S = 3 NEW_LINE check ( N , S ) NEW_LINE N = 5 NEW_LINE S = 3 NEW_LINE check ( N , S ) NEW_LINE DEDENT
def multipleOfThree ( K , dig0 , dig1 ) : NEW_LINE INDENT sum = 0 NEW_LINE temp = ( dig0 + dig1 ) % 10 NEW_LINE sum = dig0 + dig1 NEW_LINE if ( K == 2 ) : NEW_LINE INDENT if ( sum % 3 == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT sum += temp NEW_LINE numberofGroups = ( K - 3 ) // 4 NEW_LINE remNumberofDigits = ( K - 3 ) % 4 NEW_LINE sum += ( numberofGroups * 20 ) NEW_LINE for i in range ( remNumberofDigits ) : NEW_LINE INDENT temp = ( 2 * temp ) % 10 NEW_LINE sum += temp NEW_LINE DEDENT if ( sum % 3 == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT K = 5 NEW_LINE dig0 = 3 NEW_LINE dig1 = 4 NEW_LINE if ( multipleOfThree ( K , dig0 , dig1 ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( reverse = True ) NEW_LINE if ( sum ( a ) > sum ( b ) ) : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE exit ( ) NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT sum ( a [ i ] ) NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT if ( a [ i ] + b [ i - 1 ] ) <= sum ( a [ i ] ) : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT print ( ' NO ' ) NEW_LINE
def countOcc ( s ) : NEW_LINE INDENT cnt = 0 NEW_LINE for i in range ( len ( s ) - 3 ) : NEW_LINE INDENT c = 0 NEW_LINE l = 0 NEW_LINE a = 0 NEW_LINE p = 0 NEW_LINE for j in range ( i , i + 4 ) : NEW_LINE INDENT if s [ j ] == ' c ' : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if s [ j ] == ' l ' : NEW_LINE INDENT l += 1 NEW_LINE DEDENT if s [ j ] == ' a ' : NEW_LINE INDENT a += 1 NEW_LINE DEDENT if s [ j ] == ' p ' : NEW_LINE INDENT p += 1 NEW_LINE DEDENT DEDENT if c == 1 and l == 1 and a == 1 and p == 1 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = "ijkpc " NEW_LINE print ( countOcc ( s . lower ( ) ) ) NEW_LINE DEDENT
def countSteps ( x , y ) : NEW_LINE INDENT if ( x % y == 0 ) : NEW_LINE INDENT return x // y NEW_LINE DEDENT return x // y + countSteps ( y , x % y ) NEW_LINE DEDENT x = 100 NEW_LINE y = 19 NEW_LINE print ( countSteps ( x , y ) ) NEW_LINE
from math import sqrt , floor NEW_LINE def isPerfectSquare ( x ) : NEW_LINE INDENT sr = sqrt ( x ) NEW_LINE return ( ( sr - floor ( sr ) ) == 0 ) NEW_LINE DEDENT def isSunnyNum ( n ) : NEW_LINE INDENT if ( isPerfectSquare ( n + 1 ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE if ( isSunnyNum ( n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
PI = 3.14159265 NEW_LINE def area_inscribed ( P , B , H ) : NEW_LINE INDENT return ( ( P + B - H ) * ( P + B - H ) * ( PI / 4 ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT P = 3 NEW_LINE B = 4 NEW_LINE H = 5 NEW_LINE print ( area_inscribed ( P , B , H ) ) NEW_LINE DEDENT
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT objects = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT h , r = input ( ) . split ( ) NEW_LINE objects . append ( ( h , r ) ) NEW_LINE DEDENT n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT h , r = input ( ) . split ( ) NEW_LINE objects . append ( ( h , r ) ) NEW_LINE DEDENT objects = sorted ( objects , key = lambda w : ( w [ 0 ] , - 1 * w [ 1 ] ) ) NEW_LINE r = [ i [ 1 ] for i in objects ] NEW_LINE for i in range ( len ( r ) ) : NEW_LINE INDENT print ( r [ i ] [ 0 ] , end = " " ) NEW_LINE if i [ 0 ] == r [ i [ 1 ] ] [ 0 ] : NEW_LINE INDENT print ( r [ i ] [ 1 ] , end = " " ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE DEDENT
def getCount ( v , n ) : NEW_LINE INDENT v . sort ( ) NEW_LINE cnt = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT tmp = n - 1 - bisect ( v , n , v [ i ] - 1 ) NEW_LINE if ( tmp == v [ i ] ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT def upperBound ( array , length , value ) : NEW_LINE INDENT low = 0 NEW_LINE high = length NEW_LINE while ( low < high ) : NEW_LINE INDENT mid = ( low + high ) // 2 NEW_LINE if ( value >= array [ mid ] ) : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT high = mid NEW_LINE DEDENT DEDENT return low NEW_LINE DEDENT n = 4 NEW_LINE v = [ 1 , 2 , 3 , 4 ] NEW_LINE print ( getCount ( v , n ) ) NEW_LINE
def trailing_zeros ( N ) : NEW_LINE INDENT count_of_two = 0 ; NEW_LINE count_of_five = 0 ; NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT val = i ; NEW_LINE while ( val % 2 == 0 and val > 0 ) : NEW_LINE INDENT val //= 2 ; NEW_LINE count_of_two += i ; NEW_LINE DEDENT while ( val % 5 == 0 and val > 0 ) : NEW_LINE INDENT val //= 5 ; NEW_LINE count_of_five += i ; NEW_LINE DEDENT DEDENT ans = min ( count_of_two , count_of_five ) ; NEW_LINE return ans ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 12 ; NEW_LINE print ( trailing_zeros ( N ) ) ; NEW_LINE DEDENT
def removeZero ( n ) : NEW_LINE INDENT res = 0 NEW_LINE d = 1 NEW_LINE while ( n > 0 ) : NEW_LINE INDENT if ( n % 10 != 0 ) : NEW_LINE INDENT res += ( n % 10 ) * d NEW_LINE d *= 10 NEW_LINE DEDENT n //= 10 NEW_LINE DEDENT return res NEW_LINE DEDENT def vs ( a , b ) : NEW_LINE INDENT if ( removeZero ( a ) + removeZero ( b ) == removeZero ( a + b ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT a = 105 NEW_LINE b = vs ( a , b ) NEW_LINE if ( vs ( a , b ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
import sys NEW_LINE sys . setrecursionlimit ( 10 ** 6 ) NEW_LINE int1 = lambda x : int ( x ) - 1 NEW_LINE p2D = lambda x : print ( * x , sep = " \n " ) NEW_LINE def MI ( ) : return map ( int , sys . stdin . readline ( ) . split ( ) ) NEW_LINE def LI ( ) : return list ( map ( int , sys . stdin . readline ( ) . split ( ) ) ) NEW_LINE def LLI ( rows_number ) : return [ LI ( ) for _ in range ( rows_number ) ] NEW_LINE def main ( ) : NEW_LINE INDENT def check ( s ) : NEW_LINE INDENT i = 0 NEW_LINE while i < rows_number : NEW_LINE INDENT if s [ i ] == " R " : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 2 NEW_LINE DEDENT DEDENT return i NEW_LINE DEDENT def main1 ( ) : NEW_LINE INDENT N = int ( input ( ) ) NEW_LINE arr = [ ] NEW_LINE for _ in range ( N - 1 ) : NEW_LINE INDENT s , c = input ( ) . split ( ) NEW_LINE arr . append ( [ s , int ( c ) ] ) NEW_LINE DEDENT print ( check ( arr [ 0 ] [ 0 ] , arr [ 0 ] [ 1 ] ) % 1000000007 ) NEW_LINE DEDENT main2 ( ) NEW_LINE
n = int ( input ( ) ) NEW_LINE x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE print ( min ( x ) ) NEW_LINE
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if ( a == 0 or b == 0 ) : NEW_LINE INDENT print ( 0 , 0 ) NEW_LINE DEDENT elif ( a >= b ) : NEW_LINE INDENT print ( ( a + b ) // 2 , ( a + b ) // 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT min = max ( a , b ) NEW_LINE print ( min + 1 , ( a + b ) // 2 ) NEW_LINE DEDENT
from math import ceil NEW_LINE n , m = map ( int , input ( ) . split ( ) ) NEW_LINE r = ceil ( n / m ) NEW_LINE print ( r , * range ( m ) ) NEW_LINE
def totalPairs ( s1 , s2 ) : NEW_LINE INDENT count = 0 NEW_LINE arr1 = [ 0 for i in range ( 7 ) ] NEW_LINE arr2 = [ 0 for i in range ( 7 ) ] NEW_LINE for i in range ( len ( s1 ) ) : NEW_LINE INDENT set_bits = bin ( s1 [ i ] ) . count ( '1' ) NEW_LINE arr1 [ set_bits ] += 1 NEW_LINE DEDENT for i in range ( len ( s2 ) ) : NEW_LINE INDENT set_bits = bin ( s2 [ i ] ) . count ( '1' ) NEW_LINE arr2 [ set_bits ] += 1 NEW_LINE DEDENT for i in range ( 1 , 7 ) : NEW_LINE INDENT count += ( arr1 [ i ] * arr2 [ i ] ) NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s1 = " geeks " NEW_LINE s2 = " forgeeks " NEW_LINE print ( totalPairs ( s1 , s2 ) ) NEW_LINE DEDENT
def countSubSeq ( i , sum , cnt , a , n ) : NEW_LINE INDENT if ( i == n ) : NEW_LINE INDENT if ( sum == 0 and cnt > 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE ans += countSubSeq ( i + 1 , sum , cnt , a , n ) NEW_LINE ans += countSubSeq ( i + 1 , sum + a [ i ] , cnt + 1 , a , n ) NEW_LINE return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ - 1 , 2 , - 2 , 1 ] NEW_LINE n = len ( a ) NEW_LINE print ( countSubSeq ( 0 , 0 , 0 , a , n ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE i = 0 NEW_LINE j = n - 1 NEW_LINE while i < j : NEW_LINE INDENT i += 1 NEW_LINE j -= 1 NEW_LINE s [ i ] , s [ j ] = s [ j ] , s [ i ] NEW_LINE DEDENT if n % 2 == 0 : NEW_LINE INDENT print ( s [ ( n // 2 - i ) ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( s [ ( n // 2 ) + 1 ] ) NEW_LINE DEDENT
a , n , m = map ( int , input ( ) . split ( ) ) NEW_LINE count = 0 NEW_LINE i = 1 NEW_LINE while i * i <= m : NEW_LINE INDENT j = i * i NEW_LINE k = len ( str ( j ) ) NEW_LINE if j == k : NEW_LINE INDENT count += 1 NEW_LINE DEDENT i += 1 NEW_LINE DEDENT print ( count ) NEW_LINE
def pivotedBinarySearch ( arr , n , key ) : NEW_LINE INDENT pivot = findPivot ( arr , 0 , n - 1 ) NEW_LINE if ( pivot == - 1 ) : NEW_LINE INDENT return binarySearch ( arr , 0 , n - 1 , key ) NEW_LINE DEDENT if ( arr [ pivot ] == key ) : NEW_LINE INDENT return pivot NEW_LINE DEDENT if ( arr [ 0 ] <= key ) : NEW_LINE INDENT return binarySearch ( arr , 0 , pivot - 1 , key ) NEW_LINE DEDENT return binarySearch ( arr , pivot + 1 , n - 1 , key ) NEW_LINE DEDENT def findPivot ( arr , low , high , key ) : NEW_LINE INDENT if ( high < low ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if ( high == low ) : NEW_LINE INDENT return low NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if ( mid < high and arr [ mid ] > arr [ mid + 1 ] ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) : NEW_LINE INDENT return mid - 1 NEW_LINE DEDENT if ( arr [ low ] >= arr [ mid ] ) : NEW_LINE INDENT return findPivot ( arr , low , mid - 1 ) NEW_LINE DEDENT return findPivot ( arr , mid + 1 , high ) NEW_LINE DEDENT def binarySearch ( arr , low , high , key ) : NEW_LINE INDENT if ( high < low ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( low + high ) // 2 NEW_LINE if ( key == arr [ mid ] ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( key > arr [ mid ] ) : NEW_LINE INDENT return binarySearch ( arr , ( mid + 1 ) , high , key ) NEW_LINE DEDENT return binarySearch ( arr , low , ( mid - 1 ) , key ) NEW_LINE DEDENT arr = [ 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE key = 3 NEW_LINE print ( " Index of the element is : " , pivotedBinarySearch ( arr , n , key ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE MOD = 10 ** 9 + 7 NEW_LINE ans = 0 NEW_LINE d = [ [ 0 ] * 4050 for i in range ( 4050 ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 ) : NEW_LINE INDENT d [ i ] [ j ] = ( d [ i ] [ j ] + d [ i ] [ j - 1 ] ) % MOD NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n + 1 ) : NEW_LINE INDENT ans += i * d [ i ] [ j ] * ( d [ i ] [ j - 1 ] + d [ i - 1 ] [ j ] ) % MOD NEW_LINE ans %= MOD NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE p = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE used = [ False ] * ( n + 1 ) NEW_LINE def dfs ( x ) : NEW_LINE INDENT if used [ x ] : NEW_LINE INDENT return NEW_LINE DEDENT used [ x ] = True NEW_LINE dfs ( p [ x ] ) NEW_LINE used [ x ] = False NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if not used [ i ] : NEW_LINE INDENT ans += 1 NEW_LINE dfs ( i + 1 ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( dfs ( i ) ) NEW_LINE DEDENT
D = int ( input ( ) ) NEW_LINE N = int ( input ( ) ) NEW_LINE grid = [ [ ' # ' for i in range ( N ) ] for j in range ( N ) ] NEW_LINE for i in range ( D ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE for j in range ( N ) : NEW_LINE INDENT grid [ j ] [ n ] = ' ' NEW_LINE DEDENT DEDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT if grid [ i ] [ j ] == ' # ' : NEW_LINE INDENT continue NEW_LINE DEDENT for k in range ( 4 ) : NEW_LINE INDENT grid [ i ] [ j ] = ' # ' NEW_LINE DEDENT DEDENT DEDENT s = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if s == 0 : NEW_LINE INDENT break NEW_LINE DEDENT for j in range ( N ) : NEW_LINE INDENT if grid [ j ] [ i ] == ' # ' : NEW_LINE INDENT s += 1 NEW_LINE DEDENT DEDENT DEDENT for i in range ( N ) : NEW_LINE INDENT print ( grid [ i ] [ i ] ) NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT ans = sum ( 1 for i in range ( 1 << 10 ) for j in range ( i , 11 ) if ( bin ( i ) [ 0 ] == "1" and bin ( j ) [ 1 ] == "1" ) ) NEW_LINE return str ( ans ) NEW_LINE DEDENT def bin_sum ( a ) : NEW_LINE INDENT return sum ( 1 << 10 for i in range ( a ) ) NEW_LINE DEDENT def bin_sum ( a ) : NEW_LINE INDENT return sum ( 1 << 10 for i in range ( a ) ) NEW_LINE DEDENT SQUA comb = [ [ 0 , 1 ] , [ 0 , 4 ] , [ 0 , 9 ] , [ 1 , 6 ] , [ 2 , 5 ] , [ 3 , 6 ] , [ 4 , 9 ] , [ 6 , 4 ] , [ 8 , 1 ] ] NEW_LINE def is_arrangement ( a , b ) : NEW_LINE INDENT if ( ( int ( a ) != 0 ) or int ( a ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( int ( 1 << 6 ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( int ( 1 << 6 ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( int ( b ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( int ( b ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( int ( b ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( int ( b ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( int ( b ) != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE adj = [ [ ] for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT joints = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE adj [ joints [ 0 ] - 1 ] . append ( joints [ 1 ] - 1 ) NEW_LINE DEDENT q = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if adj [ i ] [ j ] == - 1 : NEW_LINE INDENT q . append ( adj [ i ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT print ( * q ) NEW_LINE
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE mp = [ input ( ) for _ in range ( n ) ] NEW_LINE t = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if i == 0 or j == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT if mp [ i ] [ j ] == ' a ' : NEW_LINE INDENT t += 1 NEW_LINE DEDENT if i == n - 1 or j == m - 1 or i == n - 1 or j == m - 1 : NEW_LINE INDENT continue NEW_LINE DEDENT if mp [ i ] [ j ] == ' f ' : NEW_LINE INDENT t += 1 NEW_LINE DEDENT if mp [ i ] [ j ] == ' c ' : NEW_LINE INDENT t += 1 NEW_LINE DEDENT if mp [ i ] [ j ] == ' e ' : NEW_LINE INDENT t += 1 NEW_LINE DEDENT DEDENT DEDENT print ( t ) NEW_LINE
s = input ( ) NEW_LINE stk = [ ] NEW_LINE for c in s : NEW_LINE INDENT if stk and c == stk [ - 1 ] : NEW_LINE INDENT stk . pop ( ) NEW_LINE DEDENT else : NEW_LINE INDENT stk . append ( c ) NEW_LINE DEDENT DEDENT print ( ' Yes ' if len ( stk ) == 1 else ' No ' ) NEW_LINE
from collections import defaultdict NEW_LINE import sys NEW_LINE sys . setrecursionlimit ( 10 ** 9 ) NEW_LINE input = sys . stdin . readline NEW_LINE def solve ( ) : NEW_LINE INDENT H , W , E = map ( int , input ( ) . split ( ) ) NEW_LINE graph = defaultdict ( list ) NEW_LINE for _ in range ( E ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE x += 1 NEW_LINE y += 1 NEW_LINE graph [ x ] . append ( y ) NEW_LINE graph [ y ] . append ( x ) NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( H ) : NEW_LINE INDENT for j in range ( W ) : NEW_LINE INDENT if i == j : NEW_LINE INDENT continue NEW_LINE DEDENT dfs ( i ) NEW_LINE res += 1 NEW_LINE DEDENT DEDENT print ( res ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT
MAX = 100 NEW_LINE def countMountains ( a , n ) : NEW_LINE INDENT A = [ [ 0 for x in range ( n + 2 ) ] for y in range ( n + 2 ) ] NEW_LINE count = 0 NEW_LINE for i in range ( 0 , n + 2 ) : NEW_LINE INDENT for j in range ( 0 , n + 2 ) : NEW_LINE INDENT if ( ( i == 0 ) or ( j == 0 ) or ( i == n + 1 ) or ( j == n + 1 ) ) : NEW_LINE INDENT A [ i ] [ j ] = - 2147483648 NEW_LINE DEDENT else : NEW_LINE INDENT A [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( ( A [ i ] [ j ] > A [ i - 1 ] [ j ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j ] ) and ( A [ i ] [ j ] > A [ i ] [ j - 1 ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j ] ) and ( A [ i ] [ j ] > A [ i - 1 ] [ j - 1 ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j + 1 ] ) and ( A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] ) and ( A [ i ] [ j ] > A [ i - 1 ] [ j + 1 ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j - 1 ] ) and ( A [ i ] [ j ] > A [ i + 1 ] [ j ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] NEW_LINE n = 3 NEW_LINE print ( countMountains ( a , n ) ) NEW_LINE DEDENT
N = 100005 NEW_LINE d = [ 0 for i in range ( N ) ] NEW_LINE pre = [ 0 for i in range ( N ) ] NEW_LINE def Negative_Divisors ( ) : NEW_LINE INDENT for i in range ( 1 , N ) : NEW_LINE INDENT j = 1 NEW_LINE while j * j <= i : NEW_LINE INDENT if i % j == 0 : NEW_LINE INDENT if ( j * j == i ) : NEW_LINE INDENT d [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] += 2 NEW_LINE DEDENT DEDENT j += 1 NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( 2 , N ) : NEW_LINE INDENT if ( d [ i ] == d [ i - 1 ] ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT pre [ i ] = ans NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT Negative_Divisors ( ) NEW_LINE n = 15 NEW_LINE print ( pre [ n ] ) NEW_LINE DEDENT
t , m = map ( int , input ( ) . split ( ) ) NEW_LINE l = [ ] NEW_LINE for i in range ( t ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ 0 ] == " p " : NEW_LINE INDENT p = int ( s [ 2 : ] ) NEW_LINE if p <= 0 : NEW_LINE INDENT l . append ( " h " ) NEW_LINE DEDENT else : NEW_LINE INDENT l . append ( " i " ) NEW_LINE DEDENT DEDENT elif s [ 0 ] == " def " : NEW_LINE INDENT if p <= 0 : NEW_LINE INDENT l . append ( " i " ) NEW_LINE DEDENT else : NEW_LINE INDENT l . append ( " j " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if p <= 0 : NEW_LINE INDENT l . append ( " i " ) NEW_LINE DEDENT else : NEW_LINE INDENT l . append ( " l " ) NEW_LINE DEDENT DEDENT DEDENT m -= 1 NEW_LINE for i in range ( len ( l ) ) : NEW_LINE INDENT if l [ i ] == " p " : NEW_LINE INDENT p -= 1 NEW_LINE DEDENT elif l [ i ] == " def " : NEW_LINE INDENT l [ i ] = " h " NEW_LINE DEDENT DEDENT if m == 0 : NEW_LINE INDENT print ( " ILj _ ENESE _ INF " ) NEW_LINE DEDENT elif m == 1 : NEW_LINE INDENT print ( " ILj _ ENESE _ INF " ) NEW_LINE DEDENT elif m == 2 : NEW_LINE INDENT ans = " r " NEW_LINE if l [ i ] == " r " : NEW_LINE INDENT ans = " h " NEW_LINE DEDENT DEDENT elif m == 3 : NEW_LINE INDENT ans = " ILj _ ENESE _ INF " NEW_LINE DEDENT elif m == 4 : NEW_LINE INDENT ans = " ILj _ ENESE _ INF " NEW_LINE DEDENT elif m == 5 : NEW_LINE INDENT ans = " ILj _ ENESE _ INF " NEW_LINE DEDENT elif m == 6 : NEW_LINE INDENT ans = " ILj _ ENESE _ INF " NEW_LINE DEDENT elif m == 7 : NEW_LINE INDENT ans = " ILj _ ENE
from math import tan NEW_LINE def area_of_triangle_inscribed ( n , len1 ) : NEW_LINE INDENT P = ( len1 * n ) NEW_LINE A = round ( l1 / ( 2 * tan ( ( 180 / n ) * 3.14159 / 180 ) ) NEW_LINE area = ( P * A ) / 2 NEW_LINE return area NEW_LINE DEDENT def area_of_triangle_inscribed ( n , len1 ) : NEW_LINE INDENT area = area_of_triangle_inscribed ( n , len1 ) NEW_LINE triangle = area / n NEW_LINE ins_tri = ( triangle * 3 ) NEW_LINE return ins_tri NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE len1 = 10 NEW_LINE print ( " % .3f " % ( area_of_triangle_inscribed ( n , len1 ) ) ) NEW_LINE DEDENT
MAX = 256 NEW_LINE def lastNonRepeating ( Str , n ) : NEW_LINE INDENT freq = [ 0 for i in range ( MAX ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ ord ( Str [ i ] ) ] += 1 NEW_LINE DEDENT for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT ch = Str [ i ] NEW_LINE if ( freq [ ch ] == 1 ) : NEW_LINE INDENT return ( " " + ch ) NEW_LINE DEDENT DEDENT return " - 1" NEW_LINE DEDENT Str = " GeeksForGeeks " NEW_LINE n = len ( Str ) NEW_LINE print ( lastNonRepeating ( Str , n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE arr = [ ] NEW_LINE brr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE arr . append ( a ) NEW_LINE brr . append ( b ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == brr [ i ] and arr [ i ] == brr [ i + 1 ] ) : NEW_LINE INDENT print ( i + 1 ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
def y ( x ) : NEW_LINE INDENT return ( 1 / ( 1 + x ) ) NEW_LINE DEDENT def Point ( a , b ) : NEW_LINE INDENT n = 4 NEW_LINE h = ( b - a ) / n NEW_LINE sum = 0 NEW_LINE bl = ( 7 * y ( a ) + 32 * y ( a + h ) + 12 * y ( a + 2 * h ) + 32 * y ( a + 3 * h ) + 7 * y ( a + 4 * h ) ) * 2 * h / 45 NEW_LINE sum = sum + bl NEW_LINE return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT x = 0 NEW_LINE y = 4 NEW_LINE print ( " f ( x ) = % .4f " % round ( y , 4 ) ) NEW_LINE DEDENT
maxN = 300 NEW_LINE maxM = 300 NEW_LINE dp = [ [ 0 for i in range ( maxN ) ] for j in range ( maxM ) ] NEW_LINE v = [ [ 0 for i in range ( maxM ) ] for j in range ( maxN ) ] NEW_LINE def findLen ( arr , i , curr , n , m ) : NEW_LINE INDENT if ( i == n ) : NEW_LINE INDENT if ( curr == m ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT if ( v [ i ] [ curr ] ) : NEW_LINE INDENT return dp [ i ] [ curr ] NEW_LINE DEDENT v [ i ] [ curr ] = 1 NEW_LINE l = findLen ( arr , i + 1 , curr , n , m ) NEW_LINE r = findLen ( arr , i + 1 , curr & arr [ i ] , n , m ) NEW_LINE dp [ i ] [ curr ] = l NEW_LINE if ( r != - 1 ) : NEW_LINE INDENT dp [ i ] [ curr ] = max ( dp [ i ] [ curr ] , r + 1 ) NEW_LINE DEDENT return dp [ i ] [ curr ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 7 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE m = 3 NEW_LINE ans = findLen ( arr , 0 , ( ( 1 << 8 ) - 1 ) , n , m ) NEW_LINE if ( ans == - 1 ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT DEDENT
maxN = 20 NEW_LINE maxM = 64 NEW_LINE dp = [ [ 0 for i in range ( maxN ) ] for j in range ( maxM ) ] NEW_LINE v = [ [ 0 for i in range ( maxN ) ] for j in range ( maxM ) ] NEW_LINE def findLen ( arr , i , curr , n , m ) : NEW_LINE INDENT if ( i == n ) : NEW_LINE INDENT if ( curr == m ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT if ( v [ i ] [ curr ] ) : NEW_LINE INDENT return dp [ i ] [ curr ] NEW_LINE DEDENT v [ i ] [ curr ] = 1 NEW_LINE l = findLen ( arr , i + 1 , curr , n , m ) NEW_LINE r = findLen ( arr , i + 1 , curr | arr [ i ] , n , m ) NEW_LINE dp [ i ] [ curr ] = l NEW_LINE if ( r != - 1 ) : NEW_LINE INDENT dp [ i ] [ curr ] = max ( dp [ i ] [ curr ] , r + 1 ) NEW_LINE DEDENT return dp [ i ] [ curr ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 7 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE m = 3 NEW_LINE ans = findLen ( arr , 0 , 0 , n , m ) NEW_LINE if ( ans == - 1 ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT DEDENT
from heapq import heappush , heappop NEW_LINE def get_par ( x , par_lst ) : NEW_LINE INDENT if x == par_lst [ x - 1 ] : NEW_LINE INDENT return x - 1 NEW_LINE DEDENT p = get_par ( par_lst [ x - 1 ] , par_lst ) NEW_LINE par_lst [ x - 1 ] = p NEW_LINE return p + 1 NEW_LINE DEDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT que = [ ] NEW_LINE for _ in range ( n - 1 ) : NEW_LINE INDENT a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE heappush ( que , ( c , a , b ) ) NEW_LINE DEDENT par_lst = [ [ - 1 ] * n for _ in range ( n ) ] NEW_LINE ans = 0 NEW_LINE while que : NEW_LINE INDENT c , a , b = heappop ( que ) NEW_LINE pa , pb = get_par ( a , par_lst ) , get_par ( b , par_lst ) NEW_LINE if pa != pb : NEW_LINE INDENT par_lst [ pa ] = pb NEW_LINE ans += c * 2 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
from collections import Counter NEW_LINE n = int ( input ( ) ) NEW_LINE def f ( n ) : NEW_LINE INDENT if n < 3 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return n * ( n - 3 ) // 3 + n NEW_LINE DEDENT def f ( n ) : NEW_LINE INDENT if n < 5 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return f ( n // 5 ) + f ( n // 7 ) NEW_LINE DEDENT print ( f ( n ) ) NEW_LINE
import sys NEW_LINE def minDiff ( arr , n , k ) : NEW_LINE INDENT result = sys . maxsize ; NEW_LINE arr . sort ( ) ; NEW_LINE for i in range ( n - k + 1 ) : NEW_LINE INDENT result = min ( result , arr [ i + k - 1 ] - arr [ i ] ) ; NEW_LINE DEDENT return result ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 10 , 100 , 300 , 200 , 1000 , 20 , 30 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE k = 3 ; NEW_LINE print ( minDiff ( arr , n , k ) ) ; NEW_LINE DEDENT
T = int ( input ( ) ) NEW_LINE for _ in range ( T ) : NEW_LINE INDENT L , R = 0 , 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT x = int ( input ( ) ) NEW_LINE if x > L : NEW_LINE INDENT L = x NEW_LINE DEDENT elif x < R : NEW_LINE INDENT R = x NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT x = int ( input ( ) ) NEW_LINE z = int ( 1e9 ) + 1 NEW_LINE c = 0 NEW_LINE while z > 0 : NEW_LINE INDENT z = z * 2 + 1 NEW_LINE c += 1 NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
def mean ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum = sum + arr [ i ] NEW_LINE DEDENT return sum / n NEW_LINE DEDENT def mean reverse ( arr , n ) : NEW_LINE INDENT absSum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT absSum = absSum + abs ( arr [ i ] - mean ( arr , n ) ) NEW_LINE DEDENT return absSum / n NEW_LINE DEDENT arr = [ 10 , 15 , 15 , 17 , 18 , 21 ] NEW_LINE n = len ( arr ) NEW_LINE print ( mean reverse ( arr , n ) ) NEW_LINE
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 9 NEW_LINE primes = eulerlib . list_primes ( 100 ) NEW_LINE def count ( primeIndex , product ) : NEW_LINE INDENT if product <= LIMIT : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT count = 0 NEW_LINE while product <= LIMIT : NEW_LINE INDENT count += count ( primeIndex + 1 , product ) NEW_LINE product *= primes [ primeIndex ] NEW_LINE DEDENT return count NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
from math import log NEW_LINE def maximumXOR ( n , l , r ) : NEW_LINE INDENT x = 0 NEW_LINE for i in range ( int ( log ( r ) / log ( 2 ) ) , - 1 , - 1 ) : NEW_LINE INDENT if ( n & ( 1 << i ) ) : NEW_LINE INDENT if ( ( x > r ) or ( x + ( 1 << i ) - 1 < l ) ) : NEW_LINE INDENT x ^= ( 1 << i ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( ( x ^ ( 1 << i ) ) <= r ) : NEW_LINE INDENT x ^= ( 1 << i ) NEW_LINE DEDENT DEDENT DEDENT return n ^ x NEW_LINE DEDENT n = 7 NEW_LINE l = 2 NEW_LINE r = 23 NEW_LINE print ( " The output is " , maximumXOR ( n , l , r ) ) NEW_LINE
from math import sqrt NEW_LINE def maxPrimefactorNum ( N ) : NEW_LINE INDENT arr = [ False ] * ( N + 5 ) NEW_LINE for i in range ( 3 , int ( sqrt ( N ) ) + 1 , 2 ) : NEW_LINE INDENT if ( arr [ i ] == False ) : NEW_LINE INDENT for j in range ( i * i , N + 1 , i ) : NEW_LINE INDENT arr [ j ] = True NEW_LINE DEDENT DEDENT DEDENT prime = [ ] NEW_LINE prime . append ( len ( prime ) ) NEW_LINE for i in range ( 3 , N + 1 , 2 ) : NEW_LINE INDENT if ( arr [ i ] == False ) : NEW_LINE INDENT prime . append ( i ) NEW_LINE DEDENT DEDENT i = 0 NEW_LINE ans = 1 NEW_LINE while ( ans * prime [ i ] <= N and i < len ( prime ) ) : NEW_LINE INDENT ans *= prime [ i ] NEW_LINE i += 1 NEW_LINE DEDENT return ans NEW_LINE DEDENT N = 40 NEW_LINE print ( maxPrimefactorNum ( N ) ) NEW_LINE
def CountTrailingZeros ( n ) : NEW_LINE INDENT bit = bin ( n ) NEW_LINE bit1 = bin ( bit ) NEW_LINE bit1 = ( bit1 [ : : - 1 ] ) NEW_LINE zero = 0 NEW_LINE for i in range ( 64 ) : NEW_LINE INDENT if ( bit1 [ i ] == '0' ) : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return zero NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 NEW_LINE ans = CountTrailingZeros ( n ) NEW_LINE print ( ans ) NEW_LINE DEDENT
a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ( a + b + c ) * 2 + min ( a , b , c ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE i = 0 NEW_LINE while i < n - 1 : NEW_LINE INDENT if a [ i ] > a [ i + 1 ] : NEW_LINE INDENT ans += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def distinctSubString ( P , Q , K , N ) : NEW_LINE INDENT S = set ( ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum = 0 NEW_LINE s = " " NEW_LINE for j in range ( i , N ) : NEW_LINE INDENT pos = ord ( P [ j ] ) - ord ( ' a ' ) NEW_LINE sum += ord ( Q [ pos ] ) - ord ( '0' ) NEW_LINE s += P [ j ] NEW_LINE if ( sum <= K ) : NEW_LINE INDENT S . add ( s ) NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT return len ( S ) NEW_LINE DEDENT P = " abcde " NEW_LINE Q = "1234567895678956789 scipy" NEW_LINE K = 5 NEW_LINE N = len ( P ) NEW_LINE print ( distinctSubString ( P , Q , K , N ) ) NEW_LINE
import sys NEW_LINE def makeEven ( string ) : NEW_LINE INDENT string = string . strip ( ) NEW_LINE n = len ( string ) NEW_LINE even = sys . maxsize NEW_LINE index = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if ( ( ord ( string [ i ] ) - ord ( '0' ) ) % 2 == 0 ) : NEW_LINE INDENT even = ( ord ( string [ i ] ) - ord ( '0' ) ) NEW_LINE index = i NEW_LINE DEDENT if ( even <= ( ord ( string [ n - 1 ] ) - ord ( '0' ) ) ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( even == sys . maxsize ) : NEW_LINE INDENT return string NEW_LINE DEDENT string = list ( string ) NEW_LINE string . insert ( index , string [ n - 1 ] ) NEW_LINE return string NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = "13564 25 NEW_LINE print ( makeEven ( string ) ) NEW_LINE DEDENT
def findDivisors ( n ) : NEW_LINE INDENT div = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT j = 1 NEW_LINE while ( j * i <= n ) : NEW_LINE INDENT div [ i * j ] += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( div [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 10 NEW_LINE findDivisors ( n ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT s1 = input ( ) NEW_LINE s2 = input ( ) NEW_LINE n = len ( s1 ) NEW_LINE m = len ( s2 ) NEW_LINE pre = 0 NEW_LINE pre_sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT pre += int ( s1 [ i ] ) NEW_LINE DEDENT for i in range ( m ) : NEW_LINE INDENT pre += int ( s2 [ i ] ) NEW_LINE DEDENT ans = pre_sum NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans += ( m - pre + 1 ) NEW_LINE pre_sum += ( m - pre + 1 ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
MAX_CHAR = 256 NEW_LINE def printDistinct ( Str ) : NEW_LINE INDENT n = len ( Str ) NEW_LINE count = [ 0 ] * MAX_CHAR NEW_LINE index = [ 0 ] * MAX_CHAR NEW_LINE for i in range ( MAX_CHAR ) : NEW_LINE INDENT count [ i ] = 0 NEW_LINE index [ i ] = n NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT x = Str [ i ] NEW_LINE count [ ord ( x ) ] += 1 NEW_LINE if ( count [ ord ( x ) ] == 1 and x != ' ' ) : NEW_LINE INDENT index [ ord ( x ) ] = i NEW_LINE DEDENT if ( count [ ord ( x ) ] == 2 ) : NEW_LINE INDENT index [ ord ( x ) ] = n NEW_LINE DEDENT DEDENT Str = sorted ( index ) NEW_LINE for i in range ( MAX_CHAR and index [ i ] != n ) : NEW_LINE INDENT print ( Str [ index [ i ] ] , end = " " ) NEW_LINE DEDENT DEDENT Str = " GeeksforGeeks " NEW_LINE printDistinct ( Str ) NEW_LINE
def calculate ( x , k , m ) : NEW_LINE INDENT result = x NEW_LINE while ( k > 0 ) : NEW_LINE INDENT result = pow ( result , x ) NEW_LINE if ( result > m ) : NEW_LINE INDENT result %= m NEW_LINE DEDENT k -= 1 NEW_LINE DEDENT return result NEW_LINE DEDENT x = 5 NEW_LINE k = 2 NEW_LINE m = 3 NEW_LINE print ( calculate ( x , k , m ) ) NEW_LINE
def converth k ( n ) : NEW_LINE INDENT s = str ( n ) NEW_LINE res = " " NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ i ] == '1' or s [ i ] == '3' or s [ i ] == '5' or s [ i ] == '7' or s [ i ] == '9' ) : NEW_LINE INDENT res += s [ i ] NEW_LINE DEDENT if ( len ( res ) == 2 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( len ( res ) == 2 ) : NEW_LINE INDENT print ( res ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT n = 18720 NEW_LINE converth k ( n ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE l = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] not in l : NEW_LINE INDENT l . append ( s [ i ] ) NEW_LINE DEDENT DEDENT l = l + s NEW_LINE for i in l : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE print ( * ( max ( i + 1 , n - i ) for i in range ( n ) ) ) NEW_LINE DEDENT
def sn ( n , an ) : NEW_LINE INDENT return ( n * ( 1 + an ) ) / 2 NEW_LINE DEDENT def trace ( n , m ) : NEW_LINE INDENT an = 1 + ( n - 1 ) * ( m + 1 ) NEW_LINE row '9' = sn ( n , an ) NEW_LINE an = 1 + ( n - 1 ) * ( n + 1 ) NEW_LINE col '9' = sn ( n , an ) NEW_LINE return row '9' + col '9' NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE M = 3 NEW_LINE print ( trace ( N , M ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE input = sys . stdin . readline NEW_LINE h , w = map ( int , input ( ) . split ( ) ) NEW_LINE data = [ ] NEW_LINE for _ in range ( h ) : NEW_LINE INDENT data . append ( list ( input ( ) ) ) NEW_LINE DEDENT dp = [ [ 0 ] * w for _ in range ( h ) ] NEW_LINE for i in range ( h ) : NEW_LINE INDENT for j in range ( w ) : NEW_LINE INDENT count = 0 NEW_LINE if data [ i ] [ j ] == ' J ' : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if data [ i ] [ j ] == ' O ' : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if data [ i ] [ j ] == ' I ' : NEW_LINE INDENT count += 1 NEW_LINE DEDENT dp [ i ] [ j ] = count NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( h ) : NEW_LINE INDENT for j in range ( w ) : NEW_LINE INDENT if data [ i ] [ j ] == ' I ' : NEW_LINE INDENT ans += j * i NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
import math NEW_LINE def countDivisors ( n , k ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 1 , ( int ) ( math . sqrt ( n ) ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT if ( i % k == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( ( n // i ) % k == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT if ( ( i * i == n ) and ( i % k == 0 ) ) : NEW_LINE INDENT count -= 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 12 NEW_LINE k = 3 NEW_LINE print ( countDivisors ( n , k ) ) NEW_LINE DEDENT
def countDivisors ( n , k ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( n % i == 0 and i % k == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 12 NEW_LINE k = 3 NEW_LINE print ( countDivisors ( n , k ) ) NEW_LINE DEDENT
def power ( x , y , p ) : NEW_LINE INDENT res = 1 NEW_LINE x = x % p NEW_LINE while ( y > 0 ) : NEW_LINE INDENT if ( y & 1 ) : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT y = y >> 1 NEW_LINE x = ( x * x ) % p NEW_LINE DEDENT return res NEW_LINE DEDENT def findModuloByM ( X , N , M ) : NEW_LINE INDENT if ( N < 6 ) : NEW_LINE INDENT temp = " " NEW_LINE for i in range ( N ) : NEW_LINE INDENT temp = temp + chr ( X + 48 ) NEW_LINE DEDENT res = int ( temp ) % M NEW_LINE return res NEW_LINE DEDENT if ( N % 2 == 0 ) : NEW_LINE INDENT half = findModuloByM ( X , N // 2 , M ) % M NEW_LINE res = ( half * power ( 10 , N // 2 , M ) + half ) % M NEW_LINE return res NEW_LINE DEDENT else : NEW_LINE INDENT half = findModuloByM ( X , N // 2 , M ) % M NEW_LINE res = ( half * power ( 10 , N // 2 + 1 , M ) + half * 10 + X ) % M NEW_LINE return res NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT X = 6 NEW_LINE N = 14 NEW_LINE M = 9 NEW_LINE print ( findModuloByM ( X , N , M ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE m = int ( input ( ) ) NEW_LINE b = [ int ( y ) for y in input ( ) . split ( ) ] NEW_LINE odd = sum ( a ) % 2 NEW_LINE even = sum ( b ) % 2 NEW_LINE print ( odd * even + even * odd ) NEW_LINE DEDENT
import sys NEW_LINE def findMaxDiff ( arr , n ) : NEW_LINE INDENT if ( n < 2 ) : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE return 0 NEW_LINE DEDENT min_val = sys . maxsize NEW_LINE max_val = - sys . maxsize - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ( arr [ i ] - i ) > max_val ) : NEW_LINE INDENT max_val = arr [ i ] - i NEW_LINE DEDENT if ( ( arr [ i ] - i ) < min_val ) : NEW_LINE INDENT min_val = arr [ i ] - i NEW_LINE DEDENT DEDENT return ( max_val - min_val ) NEW_LINE DEDENT arr = [ 9 , 15 , 4 , 12 , 13 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxDiff ( arr , n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE temp = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE temp . append ( s ) NEW_LINE DEDENT def check_movable ( s ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if s [ i ] == ' # ' : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT for i in range ( n - 2 ) : NEW_LINE INDENT for j in range ( n - 2 ) : NEW_LINE INDENT if temp [ i ] [ j ] == ' . ' : NEW_LINE INDENT temp [ i + 1 ] [ j ] = ' # ' NEW_LINE temp [ i + 1 ] [ j ] = ' # ' NEW_LINE DEDENT if temp [ i + 2 ] [ j ] == ' . ' : NEW_LINE INDENT temp [ i + 1 ] [ j ] = ' # ' NEW_LINE temp [ i + 2 ] [ j ] = ' # ' NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if check_movable ( temp [ i ] ) : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT print ( ' NO ' ) NEW_LINE
def numberOfPaths ( m , n ) : NEW_LINE INDENT count = [ [ 0 for i in range ( n ) ] for j in range ( m ) ] NEW_LINE for i in range ( m ) : NEW_LINE INDENT count [ i ] [ 0 ] = 1 NEW_LINE DEDENT for j in range ( n ) : NEW_LINE INDENT count [ 0 ] [ j ] = 1 NEW_LINE DEDENT for i in range ( 1 , m ) : NEW_LINE INDENT for j in range ( 1 , n ) : NEW_LINE INDENT count [ i ] [ j ] = ( count [ i - 1 ] [ j ] + count [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT return count [ m - 1 ] [ n - 1 ] NEW_LINE DEDENT print ( numberOfPaths ( 3 , 3 ) ) NEW_LINE
import sys NEW_LINE input = sys . stdin . readline NEW_LINE for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE w = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE s = sum ( w ) NEW_LINE if s % n != 0 : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT DEDENT
def isKth goal ( n , k ) : NEW_LINE INDENT if ( ( n >> ( k - 1 ) ) == 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def setKthBit ( n , k ) : NEW_LINE INDENT return ( ( 1 << ( k - 1 ) ) | n ) NEW_LINE DEDENT def allBitsAreSet ( n ) : NEW_LINE INDENT if ( ( ( n + 1 ) & n ) == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def bitsAreInAltOrder ( n ) : NEW_LINE INDENT num = n ^ ( n >> 1 ) NEW_LINE return allBitsAreSet ( num ) NEW_LINE DEDENT def bitsAreInAlt q ( n , l , r ) : NEW_LINE INDENT num , left_ shift = 0 , 0 NEW_LINE if ( isKth goal ( n , r ) ) : NEW_LINE INDENT num = n NEW_LINE left_ shift = r NEW_LINE DEDENT else : NEW_LINE INDENT num = setKthBit ( n , ( r + 1 ) ) NEW_LINE left_ shift = r + 1 NEW_LINE DEDENT num = num & ( ( 1 << left_ shift ) - 1 ) NEW_LINE num = num >> ( l - 1 ) NEW_LINE return bitsAreInAltOrder ( num ) NEW_LINE DEDENT n = 18 NEW_LINE l = 1 NEW_LINE r = 3 NEW_LINE if ( bitsAreInAlt q ( n , l , r ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def factorial ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return n * factorial ( n - 1 ) NEW_LINE DEDENT def nCr ( n , r ) : NEW_LINE INDENT return ( factorial ( n ) // ( factorial ( n - r ) * factorial ( r ) ) ) NEW_LINE DEDENT def NumberOfWays ( n , x , y ) : NEW_LINE INDENT return nCr ( 2 * n - x - y , n - x ) * factorial ( n ) * factorial ( n ) NEW_LINE DEDENT n = 5 NEW_LINE x = 4 NEW_LINE y = 2 NEW_LINE print ( NumberOfWays ( n , x , y ) ) NEW_LINE
def commonPrefixUtil ( str1 , str2 ) : NEW_LINE INDENT result = " " NEW_LINE n1 = len ( str1 ) NEW_LINE n2 = len ( str2 ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE while i <= n1 - 1 and j <= n2 - 1 : NEW_LINE INDENT if ( str1 [ i ] != str2 [ j ] ) : NEW_LINE INDENT break NEW_LINE DEDENT result += str1 [ i ] NEW_LINE i += 1 NEW_LINE j += 1 NEW_LINE DEDENT return ( result ) NEW_LINE DEDENT def commonPrefix ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE print ( commonPrefixUtil ( arr [ 0 ] , arr [ n - 1 ] ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ " geeksforgeeks " , " geeks " , " geek " , " geezer " ] NEW_LINE n = len ( arr ) NEW_LINE commonPrefix ( arr , n ) NEW_LINE DEDENT
from sys import stdin NEW_LINE point = 0 NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT p = int ( stdin . readline ( ) . rstrip ( ) ) NEW_LINE if i % 2 == 0 : NEW_LINE INDENT point += p NEW_LINE DEDENT else : NEW_LINE INDENT point += p NEW_LINE DEDENT DEDENT point = sorted ( point ) NEW_LINE print ( point [ 3 ] ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = [ 0 ] + list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE tmp = 0 NEW_LINE ind = 0 NEW_LINE while ind < n + 1 : NEW_LINE INDENT if a [ ind ] == 1 : NEW_LINE INDENT ans += 1 NEW_LINE tmp += 1 NEW_LINE DEDENT elif a [ ind ] == 2 : NEW_LINE INDENT ans = - 1 NEW_LINE break NEW_LINE DEDENT ind += 1 NEW_LINE DEDENT if ans > 0 : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT a = 0 NEW_LINE b = 1 NEW_LINE for i in range ( 32 ) : NEW_LINE INDENT c = a + b NEW_LINE a = b NEW_LINE b = c NEW_LINE DEDENT return str ( a ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def findFrequencyUtil ( arr , low , high , freq ) : NEW_LINE INDENT if ( arr [ low ] == arr [ high ] ) : NEW_LINE INDENT freq [ arr [ low ] ] += high - low + 1 NEW_LINE DEDENT else : NEW_LINE INDENT mid = ( low + high ) // 2 NEW_LINE findFrequencyUtil ( arr , low , mid , freq ) NEW_LINE findFrequencyUtil ( arr , mid + 1 , high , freq ) NEW_LINE DEDENT DEDENT def findFrequency ( arr , n ) : NEW_LINE INDENT freq = [ 0 for i in range ( arr [ n - 1 ] + 1 ) ] NEW_LINE findFrequencyUtil ( arr , 0 , n - 1 , freq ) NEW_LINE for i in range ( 0 , arr [ n - 1 ] + 1 ) : NEW_LINE INDENT if ( freq [ i ] != 0 ) : NEW_LINE INDENT print ( " Element " , i , " rotate " , freq [ i ] , " times " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 1 , 1 , 2 , 3 , 3 , 5 , 5 , 8 , 8 , 8 , 9 , 9 , 10 ] NEW_LINE n = len ( arr ) NEW_LINE findFrequency ( arr , n ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 7 NEW_LINE totients = eulerlib . list_Totients ( LIMIT - 1 ) NEW_LINE for n in range ( 2 , len ( totients ) ) : NEW_LINE INDENT totients [ n ] = totients [ n ] NEW_LINE if n * min BufferedWriter < ( totients [ n ] * totients [ n ] and has_same_digits ( n , totients [ n ] ) ) : NEW_LINE INDENT minNumer = n NEW_LINE min xi = totients [ n ] NEW_LINE DEDENT DEDENT if min aux_digits == 0 : NEW_LINE INDENT raise ValueError ( " Not found " ) NEW_LINE DEDENT return str ( minNumer ) NEW_LINE DEDENT def has_same_digits ( x , y ) : NEW_LINE INDENT return sorted ( str ( x ) ) == sorted ( str ( y ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def intersection ( a , b , n , m ) : NEW_LINE INDENT i = 0 NEW_LINE j = 0 NEW_LINE while ( i < n and j < m ) : NEW_LINE INDENT if ( a [ i ] > b [ j ] ) : NEW_LINE INDENT j += 1 NEW_LINE DEDENT elif ( b [ j ] > a [ i ] ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( a [ i ] , end = " " ) NEW_LINE i += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT DEDENT a = [ 1 , 2 , 3 , 3 , 4 , 5 , 5 , 6 ] NEW_LINE b = [ 3 , 3 , 5 ] NEW_LINE n = len ( a ) NEW_LINE m = len ( b ) NEW_LINE intersection ( a , b , n , m ) NEW_LINE
import math NEW_LINE def findMin ( a , n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += math . log ( a [ i ] ) NEW_LINE DEDENT x = int ( math . exp ( sum / n ) ) NEW_LINE return x + 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 3 , 2 , 1 , 4 ] NEW_LINE n = len ( a ) NEW_LINE print ( findMin ( a , n ) ) NEW_LINE DEDENT
def gcd ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT else : NEW_LINE INDENT return gcd ( b , a % b ) NEW_LINE DEDENT DEDENT def lcmOfArray ( arr , n ) : NEW_LINE INDENT if ( n < 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT lcm = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT lcm = ( lcm * arr [ i ] ) / gcd ( lcm , arr [ i ] ) NEW_LINE DEDENT return lcm NEW_LINE DEDENT def minPerfectSq = ( arr , n ) : NEW_LINE INDENT minPerfectSq = ( arr , n ) NEW_LINE cnt = 0 NEW_LINE while ( lcm > 1 and lcm % 2 == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= 2 NEW_LINE DEDENT if ( cnt % 2 != 0 ) : NEW_LINE INDENT minPerfectSq *= 2 NEW_LINE DEDENT i = 3 NEW_LINE while ( lcm > 1 ) : NEW_LINE INDENT cnt = 0 NEW_LINE while ( lcm % i == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE lcm //= i NEW_LINE DEDENT if ( cnt % 2 != 0 ) : NEW_LINE INDENT minPerfectSq *= i NEW_LINE DEDENT i += 2 NEW_LINE DEDENT return minPerfectSq NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 5 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minPerfectSq ) NEW_LINE DEDENT
def subarrayCount ( arr , n ) : NEW_LINE INDENT result = 0 NEW_LINE fast = 0 NEW_LINE slow = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] - arr [ i - 1 ] == 1 ) : NEW_LINE INDENT fast += 1 NEW_LINE DEDENT else : NEW_LINE INDENT len = fast - slow + 1 NEW_LINE result += len * ( len - 1 ) / 2 NEW_LINE fast = i NEW_LINE slow = i NEW_LINE DEDENT DEDENT if ( fast != slow ) : NEW_LINE INDENT len = fast - slow + 1 NEW_LINE result += len * ( len - 1 ) / 2 NEW_LINE DEDENT return result NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 5 , 6 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE print ( subarrayCount ( arr , n ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE while n > 0 : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT if n // 2 >= 3 : NEW_LINE INDENT ans += ( n // 2 ) NEW_LINE DEDENT elif n // 4 >= 4 : NEW_LINE INDENT ans += n // 4 - 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if n % 2 == 0 : NEW_LINE INDENT ans += n // 2 NEW_LINE DEDENT elif n // 4 >= 2 : NEW_LINE INDENT ans += n // 4 - 1 NEW_LINE DEDENT elif n // 2 >= 2 : NEW_LINE INDENT ans += n // 2 - 1 NEW_LINE DEDENT n -= 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE a . sort ( ) NEW_LINE b = a [ - 1 ] NEW_LINE print ( b , a [ - 1 ] , sum ( a [ : - 1 ] ) ) NEW_LINE
MAX_CHARS = 256 NEW_LINE def findSubString ( str ) : NEW_LINE INDENT n = len ( str ) NEW_LINE dist_count = 0 NEW_LINE visited = [ False ] * ( MAX_CHARS ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( visited [ ord ( str [ i ] ) ] == False ) : NEW_LINE INDENT visited [ ord ( str [ i ] ) ] = True NEW_LINE dist_count += 1 NEW_LINE DEDENT DEDENT start = 0 NEW_LINE start_index = - 1 NEW_LINE min_len = MAX_CHARS NEW_LINE count = 0 NEW_LINE curr_count = [ 0 ] * ( MAX_CHARS ) NEW_LINE for j in range ( n ) : NEW_LINE INDENT curr_count [ ord ( str [ j ] ) ] += 1 NEW_LINE if ( curr_count [ ord ( str [ j ] ) ] == 1 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( count == dist_count ) : NEW_LINE INDENT while ( curr_count [ ord ( str [ start ] ) ] > 1 ) : NEW_LINE INDENT if ( curr_count [ ord ( str [ start ] ) ] > 1 ) : NEW_LINE INDENT curr_count [ ord ( str [ start ] ) ] -= 1 NEW_LINE DEDENT start += 1 NEW_LINE DEDENT len_ order = j - start + 1 NEW_LINE if ( min_len > len_ order ) : NEW_LINE INDENT min_len = len_ order NEW_LINE start_index = start NEW_LINE DEDENT DEDENT DEDENT return str [ start_index : start_index + min_len ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " aabcbcdbca " NEW_LINE print ( " Smallest pop pop all distinct " + " characters is : " , findSubString ( str ) ) NEW_LINE DEDENT
a = int ( input ( ) ) NEW_LINE b = int ( input ( ) ) NEW_LINE c = int ( input ( ) ) NEW_LINE d = int ( input ( ) ) NEW_LINE e = int ( input ( ) ) NEW_LINE f = int ( input ( ) ) NEW_LINE h = 100 * e NEW_LINE ans1 = 0 NEW_LINE if a > f : NEW_LINE INDENT ans1 = a NEW_LINE DEDENT else : NEW_LINE INDENT for i in range ( f , f + 1 ) : NEW_LINE INDENT for j in range ( i , f + 1 ) : NEW_LINE INDENT k = 100 * i + 100 * j NEW_LINE if k <= h : NEW_LINE INDENT ans1 = k NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( ans1 , ans2 ) NEW_LINE
while True : NEW_LINE INDENT try : NEW_LINE INDENT s = list ( map ( int , input ( ) . split ( " , " ) ) ) NEW_LINE DEDENT except : NEW_LINE INDENT break NEW_LINE DEDENT s . sort ( reverse = True ) NEW_LINE now = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT now = s [ i ] NEW_LINE DEDENT print ( now ) NEW_LINE DEDENT
def countPairs ( arr , n ) : NEW_LINE INDENT even = 0 ; NEW_LINE odd = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT even += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT odd += 1 ; NEW_LINE DEDENT DEDENT print ( ( even ) * ( n - 1 ) ) ; NEW_LINE print ( ( odd ) * ( n - 1 ) ) ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 5 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE countPairs ( arr , n ) ; NEW_LINE DEDENT
from collections import defaultdict , deque NEW_LINE from functools import lru_cache NEW_LINE from heapq import heappush , heappop NEW_LINE from typing import Counter NEW_LINE from bisect import bisect_right , bisect_left NEW_LINE import math NEW_LINE hpop = heappop NEW_LINE hpush = heappush NEW_LINE def solution ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE X , P , X , P = map ( int , input ( ) . split ( ) ) NEW_LINE if P > X : NEW_LINE INDENT X = ' > ' + str ( X ) NEW_LINE P += 1 NEW_LINE DEDENT elif P > X : NEW_LINE INDENT X = ' < ' + str ( X ) NEW_LINE P += 1 NEW_LINE DEDENT elif P < Y : NEW_LINE INDENT Y = ' > ' + str ( Y ) NEW_LINE P += 1 NEW_LINE DEDENT print ( ' = ' * P if P > X else ' < ' ) NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT t = 1 NEW_LINE for _ in range ( t ) : NEW_LINE INDENT solution ( ) NEW_LINE DEDENT DEDENT main ( ) NEW_LINE
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE fl = 0 NEW_LINE idx = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ : m ] == " S " : NEW_LINE INDENT fl += 1 NEW_LINE idx += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if fl : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( len ( set ( idx ) ) ) NEW_LINE DEDENT
def search ( arr , n , x ) : NEW_LINE INDENT front = 0 NEW_LINE back = n - 1 NEW_LINE while ( front <= back ) : NEW_LINE INDENT if ( arr [ front ] == x or arr [ back ] == x ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT front += 1 NEW_LINE back -= 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT arr = [ 10 , 20 , 80 , 30 , 60 , 50 , 110 , 100 , 170 ] NEW_LINE x = 170 NEW_LINE n = len ( arr ) NEW_LINE if ( search ( arr , n , x ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def countFreq ( arr , n ) : NEW_LINE INDENT mp = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in mp . keys ( ) : NEW_LINE INDENT mp [ arr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( mp [ arr [ i ] ] != - 1 ) : NEW_LINE INDENT print ( arr [ i ] , mp [ arr [ i ] ] ) NEW_LINE mp [ arr [ i ] ] = - 1 NEW_LINE DEDENT DEDENT DEDENT arr = [ 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 ] NEW_LINE n = len ( arr ) NEW_LINE countFreq ( arr , n ) NEW_LINE
import sys NEW_LINE def MinCostTree ( arr , n ) : NEW_LINE INDENT ans = 0 NEW_LINE st = [ ] NEW_LINE st . append ( sys . maxsize ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT while ( st [ len ( st ) - 1 ] <= arr [ i ] ) : NEW_LINE INDENT x = st [ len ( st ) - 1 ] NEW_LINE st . pop ( ) NEW_LINE ans += x * min ( st [ len ( st ) - 1 ] , arr [ i ] ) NEW_LINE DEDENT st . append ( arr [ i ] ) NEW_LINE DEDENT for i in range ( 2 , len ( st ) ) : NEW_LINE INDENT ans += st [ i ] * st [ i - 1 ] NEW_LINE DEDENT return ans NEW_LINE DEDENT arr = [ 5 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( MinCostTree ( arr , n ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE t = input ( ) NEW_LINE cnt = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT cnt [ ord ( s [ i ] ) - ord ( " a " ) ] += 1 NEW_LINE DEDENT flag = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if cnt [ j ] < cnt [ j ] : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT if flag : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( cnt ) NEW_LINE ans = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT l = i + 1 NEW_LINE ans . append ( ans [ - 1 ] ) NEW_LINE DEDENT print ( len ( ans ) ) NEW_LINE for i in range ( len ( ans ) ) : NEW_LINE INDENT print ( ans [ i ] , end = " " ) NEW_LINE DEDENT print ( " " ) NEW_LINE DEDENT
def findEquation ( a , b ) : NEW_LINE INDENT sum = ( a + b ) NEW_LINE product = ( a * b ) NEW_LINE print ( " x ^ 2 - ( " , sum , " x ) + ( " , product , " ) = 0" ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a , b = 2 , 3 NEW_LINE findEquation ( a , b ) NEW_LINE DEDENT
def circle_Equation ( x1 , y1 , r ) : NEW_LINE INDENT a = - 2 * x1 NEW_LINE b = - 2 * y1 NEW_LINE c = ( r * r ) - ( x1 * x1 ) - ( y1 * y1 ) NEW_LINE print ( " x ^ 2 + ( " + str ( a ) + " x " ) , " y ^ 2 + ( " + str ( b ) + " y " ) = " , end = " " ) NEW_LINE print ( c ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT x1 = 2 NEW_LINE y1 = - 3 NEW_LINE r = 8 NEW_LINE circle_Equation ( x1 , y1 , r ) NEW_LINE DEDENT
def unique_combination ( l , sum , K , local , A ) : NEW_LINE INDENT if ( sum == K ) : NEW_LINE INDENT print ( " { " ) NEW_LINE for i in range ( len ( local ) ) : NEW_LINE INDENT if ( i != 0 ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT print ( local [ i ] , end = " " ) NEW_LINE if ( i != len ( local ) - 1 ) : NEW_LINE INDENT print ( " , " , end = " " ) NEW_LINE DEDENT DEDENT print ( " } " ) NEW_LINE return NEW_LINE DEDENT for i in range ( l , len ( A ) ) : NEW_LINE INDENT if ( sum + A [ i ] > K ) : NEW_LINE INDENT continue NEW_LINE DEDENT if ( i == 1 and A [ i ] == A [ i - 1 ] and i > l ) : NEW_LINE INDENT continue NEW_LINE DEDENT local . append ( A [ i ] ) NEW_LINE unique_combination ( i + 1 , sum + A [ i ] , K , local , A ) NEW_LINE local . pop ( ) NEW_LINE DEDENT DEDENT def Combination ( A , K ) : NEW_LINE INDENT global global A NEW_LINE A . sort ( ) NEW_LINE local = [ ] NEW_LINE unique_combination ( 0 , 0 , K , local , A ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT A = [ 10 , 1 , 2 , 7 , 6 , 1 , 5 ] NEW_LINE K = 8 NEW_LINE Combination ( A , K ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = sorted ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE q = int ( input ( ) ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT k = int ( input ( ) ) NEW_LINE print ( a [ k - 1 ] ) NEW_LINE DEDENT
def caesarshift ( sentence ) : NEW_LINE INDENT abc = " abcdefghijklmnopqrstuvwxyz " NEW_LINE bcd = abc [ 1 : ] + " a " NEW_LINE return sentence . translate ( str . maketrans ( abc , bcd ) ) NEW_LINE DEDENT n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT sentence = input ( ) NEW_LINE DEDENT while True : NEW_LINE INDENT if " the " in sentence or " this " in sentence or " that " in sentence : NEW_LINE INDENT break NEW_LINE DEDENT sentence = caesarshift ( sentence ) NEW_LINE DEDENT print ( sentence ) NEW_LINE
def findN q ( a , b , n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return ( 1 if ( a & 1 ) else 0 ) NEW_LINE DEDENT if ( n == 1 ) : NEW_LINE INDENT return ( 1 if ( b & 1 ) else 0 ) NEW_LINE DEDENT if ( ( a & 1 ) == 0 ) : NEW_LINE INDENT if ( ( b & 1 ) == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT else : NEW_LINE INDENT return ( n % 3 != 0 ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( ( b & 1 ) == 0 ) : NEW_LINE INDENT return ( ( n - 1 ) % 3 != 0 ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( ( n + 1 ) % 3 != 0 ) NEW_LINE DEDENT DEDENT DEDENT a = 2 NEW_LINE b = 4 NEW_LINE n = 3 NEW_LINE if ( findN q ( a , b , n ) ) : NEW_LINE INDENT print ( " Odd " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Even " ) NEW_LINE DEDENT
import math NEW_LINE while True : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if a == 0 : break NEW_LINE c = math . sqrt ( a + b ) NEW_LINE h = c - 2 * c NEW_LINE x = 0 NEW_LINE y = b - h NEW_LINE while True : NEW_LINE INDENT if h > x : break NEW_LINE x += c - 2 * h NEW_LINE if x > y : break NEW_LINE h -= x NEW_LINE y += c - 2 * h NEW_LINE if y > a : break NEW_LINE DEDENT print ( f ' { x : .8f } { y : .8f } ' ) NEW_LINE DEDENT
def max_sum ( a , n ) : NEW_LINE INDENT dp = [ 0 for i in range ( n ) ] NEW_LINE if ( n == 1 ) : NEW_LINE INDENT dp [ 0 ] = max ( 0 , a [ 0 ] ) NEW_LINE DEDENT elif ( n == 2 ) : NEW_LINE INDENT dp [ 0 ] = max ( 0 , a [ 0 ] ) NEW_LINE dp [ 1 ] = max ( a [ 1 ] , dp [ 0 ] ) NEW_LINE DEDENT elif ( n >= 3 ) : NEW_LINE INDENT dp [ 0 ] = max ( 0 , a [ 0 ] ) NEW_LINE dp [ 1 ] = max ( a [ 1 ] , max ( 0 , a [ 0 ] ) ) NEW_LINE dp [ 2 ] = max ( a [ 2 ] , max ( a [ 1 ] , max ( 0 , a [ 0 ] ) ) ) NEW_LINE i = 3 NEW_LINE while ( i < n ) : NEW_LINE INDENT dp [ i ] = max ( dp [ i - 1 ] , a [ i ] + dp [ i - 3 ] ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT return dp [ n - 1 ] NEW_LINE DEDENT arr = [ 1 , 2 , - 2 , 4 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( max_sum ( arr , n ) ) NEW_LINE
s = input ( ) NEW_LINE if s [ 0 ] == ' A ' or s [ 0 ] == ' E ' or s [ 0 ] == ' I ' or s [ 0 ] == ' O ' or s [ 0 ] == ' U ' or s [ 0 ] == ' Y ' : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT
import sys NEW_LINE def minimumX ( n , k ) : NEW_LINE INDENT mini = sys . maxsize NEW_LINE for i in range ( 1 , int ( n ** ( 1 / 2 ) ) + 1 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT fir = i NEW_LINE sec = n // i NEW_LINE num1 = fir * k + sec NEW_LINE res = ( num1 // k ) * ( num1 % k ) NEW_LINE if ( res == n ) : NEW_LINE INDENT mini = min ( num1 , mini ) NEW_LINE DEDENT num2 = sec * k + fir NEW_LINE res = ( num2 // k ) * ( num2 % k ) NEW_LINE if ( res == n ) : NEW_LINE INDENT mini = min ( num2 , mini ) NEW_LINE DEDENT DEDENT DEDENT return mini NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 4 NEW_LINE k = 6 NEW_LINE print ( minimumX ( n , k ) ) NEW_LINE n = 5 NEW_LINE k = 5 NEW_LINE print ( minimumX ( n , k ) ) NEW_LINE DEDENT
import sys NEW_LINE def max1 ( r ) : NEW_LINE INDENT z = 1 NEW_LINE for i in range ( len ( r ) ) : NEW_LINE INDENT z += 2 * r [ i ] NEW_LINE DEDENT return z NEW_LINE DEDENT def solve ( n ) : NEW_LINE INDENT r = [ int ( j ) - 1 for j in input ( ) . split ( " " ) ] NEW_LINE p = [ - 1 for j in range ( n ) ] NEW_LINE k = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if r [ i ] != - 1 : NEW_LINE INDENT j = r [ i ] NEW_LINE k = max ( k , solve ( i + 1 ) ) NEW_LINE p [ i ] = j NEW_LINE DEDENT DEDENT return k NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT t = int ( input ( ) ) NEW_LINE for ti in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE r = [ int ( j ) - 1 for j in input ( ) . split ( " " ) ] NEW_LINE p = [ - 1 for j in range ( n ) ] NEW_LINE print ( " Case # { } : { } " . format ( ti + 1 , solve ( n ) ) ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def SellingPrice ( CP , PP ) : NEW_LINE INDENT P_decimal = 1 + ( PP / 100 ) NEW_LINE res = P_decimal * CP NEW_LINE return res NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT C = 720 NEW_LINE P = 13 NEW_LINE print ( SellingPrice ( C , P ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = [ ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if a [ i ] > a [ i - 1 ] : NEW_LINE INDENT ans . append ( i ) NEW_LINE DEDENT elif a [ i ] < a [ i - 1 ] : NEW_LINE INDENT ans . append ( a [ i - 1 ] ) NEW_LINE DEDENT elif a [ i ] == a [ i - 1 ] : NEW_LINE INDENT ans . append ( i ) NEW_LINE DEDENT DEDENT print ( * ans , sep = " " ) NEW_LINE DEDENT
import math NEW_LINE n = int ( input ( ) ) NEW_LINE s = int ( input ( ) ) NEW_LINE def f ( b , n ) : NEW_LINE INDENT if n < b : NEW_LINE INDENT return n NEW_LINE DEDENT else : NEW_LINE INDENT return f ( b , n // b ) + ( n % b ) NEW_LINE DEDENT DEDENT def abc ( N , S ) : NEW_LINE INDENT if N < S : NEW_LINE INDENT return - 1 NEW_LINE DEDENT else : NEW_LINE INDENT for b in range ( 39 , 1 + 10 ) : NEW_LINE INDENT if ( N - S ) % b == 0 : NEW_LINE INDENT return ( N - S ) // b + 1 NEW_LINE DEDENT DEDENT tmp = - 1 NEW_LINE for p in range ( 1 , 31 ) : NEW_LINE INDENT if ( N - S ) % p == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT b = ( N - S ) // p + 1 NEW_LINE if b <= 1 : NEW_LINE INDENT continue NEW_LINE DEDENT if ( N - S ) % b == 0 : NEW_LINE INDENT tmp = ( N - S ) // b NEW_LINE if tmp > 1 : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT tmp = ( N - S ) // b + 1 NEW_LINE if tmp > 1 : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT DEDENT return tmp NEW_LINE DEDENT DEDENT ans = abc ( n , s ) NEW_LINE print ( ans ) NEW_LINE
m , b = map ( int , input ( ) . split ( ) ) NEW_LINE ans = 0 NEW_LINE for x in range ( 1 , m * b + 1 ) : NEW_LINE INDENT for y in range ( x , m + 1 ) : NEW_LINE INDENT k = - 1 * ( x // m ) + 1 * ( y // b ) NEW_LINE ans = max ( ans , k * ( x * ( y + 1 ) ) * ( k - 1 ) * ( x // 2 ) ) NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
def check ( n , m ) : NEW_LINE INDENT if ( m % n == 0 ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 5 NEW_LINE m = 10 NEW_LINE check ( n , m ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE while n : NEW_LINE INDENT n -= 1 NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE h = [ ] NEW_LINE for i in range ( 1 , len ( a ) ) : NEW_LINE INDENT if a [ i ] == 1 : NEW_LINE INDENT h . append ( [ a [ i ] , i ] ) NEW_LINE DEDENT DEDENT if len ( h ) > 0 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT for i in h : NEW_LINE INDENT if i > 0 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT DEDENT n = int ( input ( ) ) NEW_LINE DEDENT
a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if ( b - a ) >= 0 : NEW_LINE INDENT print ( b - a ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( a - b ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE alp = ' abcdefghijklmnopqrstuvwxyz ' NEW_LINE alp = alp + alp NEW_LINE s = list ( s ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT t = input ( ) NEW_LINE s1 = input ( ) NEW_LINE s . remove ( t [ 0 ] ) NEW_LINE s . remove ( t [ 0 ] ) NEW_LINE alp = alp + s1 NEW_LINE DEDENT ans = ' ' NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans += s [ alp [ i ] ] NEW_LINE DEDENT print ( ans ) NEW_LINE
def findNthOccur ( string , ch , N ) : NEW_LINE INDENT occur = 0 NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT if ( string [ i ] == ch ) : NEW_LINE INDENT occur += 1 NEW_LINE DEDENT if ( occur == N ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " geeks " NEW_LINE ch = ' e ' NEW_LINE N = 2 NEW_LINE print ( findNthOccur ( string , ch , N ) ) NEW_LINE DEDENT
a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = " Elephant " NEW_LINE if a . count ( 2 ) >= 4 : NEW_LINE INDENT ans = " Bear " NEW_LINE DEDENT if a . count ( 3 ) >= 6 : NEW_LINE INDENT ans = " Elephant " NEW_LINE DEDENT if a . count ( 4 ) >= 2 : NEW_LINE INDENT ans = " Bear " NEW_LINE DEDENT if a . count ( 5 ) >= 2 : NEW_LINE INDENT ans = " Elephant " NEW_LINE DEDENT if a . count ( 1 ) >= 1 : NEW_LINE INDENT ans = " Bear " NEW_LINE DEDENT print ( ans ) NEW_LINE
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 9 NEW_LINE MOD = 9 NEW_LINE splitCount = eulerlib . sqrt ( LIMIT ) NEW_LINE splitCount = max ( splitCount // 3 , 1 ) NEW_LINE splitAt = ( LIMIT // ( splitCount + 1 ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( 1 , splitAt + 1 ) : NEW_LINE INDENT count = LIMIT // i % MOD NEW_LINE term = i * i % MOD NEW_LINE term = term * count % MOD NEW_LINE ans = ( ans + term ) % MOD NEW_LINE DEDENT for i in range ( splitCount , 0 , - 1 ) : NEW_LINE INDENT start = LIMIT // ( i + 1 ) NEW_LINE end = LIMIT // i NEW_LINE sumSquares = ( sumSquares * ( end ) - sumSquares * ( start ) ) % MOD NEW_LINE sumSquares = ( sumSquares + MOD ) % MOD NEW_LINE ans = ( ans + i * sumSquares ) % MOD NEW_LINE DEDENT return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE while t > 0 : NEW_LINE INDENT t -= 1 NEW_LINE n , k , z = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE s = 0 NEW_LINE for i in range ( z + 1 ) : NEW_LINE INDENT for j in range ( n - 1 ) : NEW_LINE INDENT if i + j > n : NEW_LINE INDENT break NEW_LINE DEDENT s += a [ i ] + a [ i + 1 ] NEW_LINE DEDENT DEDENT if k - 2 * a [ 0 ] >= 0 : NEW_LINE INDENT s += a [ 0 ] NEW_LINE DEDENT elif k - 2 * a [ 1 ] < 0 : NEW_LINE INDENT s += a [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT s += k - 2 * a [ 0 ] NEW_LINE DEDENT print ( s ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ ] NEW_LINE c = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] != i + 1 : NEW_LINE INDENT b . append ( i + 1 ) NEW_LINE DEDENT DEDENT for i in range ( n - 2 ) : NEW_LINE INDENT if a [ i ] != i + 2 : NEW_LINE INDENT c . append ( i + 2 ) NEW_LINE DEDENT DEDENT c . append ( n - 1 ) NEW_LINE print ( * c , sep = ' ' ) NEW_LINE print ( * b ) NEW_LINE
def solve ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE teams = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT teams . append ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT for k in range ( n ) : NEW_LINE INDENT if i == 0 or j == 0 or k == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT time = 60 * i + j NEW_LINE if time > teams [ i ] [ 0 ] and time < teams [ i ] [ 1 ] and time > teams [ i ] [ 2 ] : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT print ( ans ) NEW_LINE DEDENT solve ( ) NEW_LINE
while 1 : NEW_LINE INDENT n , p = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE r = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT r [ i + 1 ] = r [ i ] + 1 NEW_LINE DEDENT s = 0 NEW_LINE while 1 : NEW_LINE INDENT if r [ s ] == 0 : break NEW_LINE s += 1 NEW_LINE if r [ s ] == p : NEW_LINE INDENT print ( i ) NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT
def solve ( ) : NEW_LINE INDENT n , q = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ 0 ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT b . append ( a [ i + 1 ] + a [ i ] ) NEW_LINE DEDENT for i in range ( q ) : NEW_LINE INDENT x = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE l , r = 0 , 0 NEW_LINE while l < n : NEW_LINE INDENT a [ l ] += b [ r ] NEW_LINE if r < n : NEW_LINE INDENT r += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += n - l + 1 NEW_LINE DEDENT l += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT solve ( ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for i in range ( t ) : NEW_LINE INDENT a , b = [ i for i in input ( ) . split ( ) ] NEW_LINE toadd = 0 NEW_LINE cmpr = '9' * len ( b ) NEW_LINE if int ( b ) == int ( cmpr ) : NEW_LINE INDENT toadd = 1 NEW_LINE DEDENT print ( ( int ( b ) - int ( a ) ) // 10 ) NEW_LINE DEDENT
from math import inf NEW_LINE maxSize = ( 10 ** 5 + 5 ) NEW_LINE isFib = [ 0 ] * maxSize NEW_LINE prefix = [ 0 ] * maxSize NEW_LINE def digitSum ( num ) : NEW_LINE INDENT s = 0 NEW_LINE while ( num != 0 ) : NEW_LINE INDENT s = s + num % 10 NEW_LINE num = num // 10 NEW_LINE DEDENT return s NEW_LINE DEDENT def generateFibonacci ( ) : NEW_LINE INDENT isFib = [ 0 ] * ( maxSize ) NEW_LINE prev = 0 NEW_LINE curr = 1 NEW_LINE isFib [ prev ] = 1 NEW_LINE isFib [ prev ] = 1 NEW_LINE while ( curr < maxSize ) : NEW_LINE INDENT temp = curr + prev NEW_LINE if ( temp < maxSize ) : NEW_LINE INDENT isFib [ temp ] = 1 NEW_LINE DEDENT prev = curr NEW_LINE curr = temp NEW_LINE DEDENT DEDENT def precompute ( k ) : NEW_LINE INDENT generateFibonacci ( ) NEW_LINE for i in range ( 1 , maxSize ) : NEW_LINE INDENT sum = digitSum ( i ) NEW_LINE if ( isFib [ sum ] == 1 and sum % k == 0 ) : NEW_LINE INDENT prefix [ i ] += 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , maxSize ) : NEW_LINE INDENT prefix [ i ] = prefix [ i ] + prefix [ i - 1 ] NEW_LINE DEDENT DEDENT def performQueries ( k , q , q ) : NEW_LINE INDENT precompute ( k ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT l = query [ i ] [ 0 ] NEW_LINE r = query [ i ] [ 1 ] NEW_LINE cnt = prefix [ r ] - prefix [ l - 1 ] NEW_LINE print ( cnt ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT query = [ [ 1 , 11 ] , [ 5 , 15 ] , [ 2 , 24 ] ] NEW_LINE k = 2 NEW_LINE q = len ( query ) NEW_LINE performQueries ( k , q , query ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT if ( x [ i + 1 ] > x [ i ] and x [ i + 1 ] > x [ i ] ) : NEW_LINE INDENT ans += x [ i ] - x [ i - 1 ] NEW_LINE DEDENT elif ( x [ i + 1 ] < x [ i ] and x [ i + 1 ] < x [ i ] ) : NEW_LINE INDENT ans += x [ i ] - x [ i - 1 ] NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
def isPalindrome ( Str ) : NEW_LINE INDENT l = len ( Str ) NEW_LINE for i in range ( l // 2 ) : NEW_LINE INDENT if ( Str [ i ] != Str [ l - 1 - i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def createString q ( N ) : NEW_LINE INDENT sub = " " + N NEW_LINE res_str = " " NEW_LINE sum = 0 NEW_LINE while ( N > 0 ) : NEW_LINE INDENT digit = N % 10 NEW_LINE sum += digit NEW_LINE N = N // 10 NEW_LINE DEDENT while ( len ( res_str ) < sum ) : NEW_LINE INDENT res_str += sub NEW_LINE DEDENT if ( len ( res_str ) > sum ) : NEW_LINE INDENT res_str = res_str [ : sum ] NEW_LINE DEDENT if ( isPalindrome ( res_str ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT N = 10101 NEW_LINE if ( createString q ( N ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE lst = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a , b = input ( ) . split ( ) NEW_LINE lst . append ( [ a , b ] ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT if lst [ i ] [ j ] == " S " : NEW_LINE INDENT lst [ i ] [ j ] = " H " NEW_LINE lst [ i ] [ j ] = " C " NEW_LINE DEDENT elif lst [ i ] [ j ] == " D " : NEW_LINE INDENT lst [ i ] [ j ] = " C " NEW_LINE lst [ i ] [ j ] = " H " NEW_LINE DEDENT else : NEW_LINE INDENT lst [ i ] [ j ] = " D " NEW_LINE lst [ i ] [ j ] = " S " NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( lst [ i ] [ 0 ] ) NEW_LINE DEDENT
def sum_even_and_even_index ( arr , n ) : NEW_LINE INDENT i = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT DEDENT return sum NEW_LINE DEDENT arr = [ 5 , 6 , 12 , 1 , 18 , 8 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Sum of even numbers at even indices is " , sum_even_and_even_index ( arr , n ) ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT s = input ( ) NEW_LINE if len ( s ) > 2 : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT elif len ( s ) == 1 : NEW_LINE INDENT if s == " " : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT i = 0 NEW_LINE t = True NEW_LINE while i < len ( s ) - 1 : NEW_LINE INDENT if i == len ( s ) - 2 : NEW_LINE INDENT if s [ i ] == s [ i + 1 ] : NEW_LINE INDENT i += 2 NEW_LINE DEDENT else : NEW_LINE INDENT t = False NEW_LINE break NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT if t : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT DEDENT
def printD ( arr , n ) : NEW_LINE INDENT fl = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ arr [ i ] % n ] >= n ) : NEW_LINE INDENT if ( arr [ arr [ i ] % n ] < 2 * n ) : NEW_LINE INDENT print ( arr [ i ] % n , end = " " ) NEW_LINE fl = 1 NEW_LINE DEDENT DEDENT arr [ arr [ i ] % n ] += n NEW_LINE DEDENT if ( not ( fl ) ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT DEDENT arr = [ 1 , 6 , 3 , 1 , 3 , 6 , 6 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printD ( arr , arr_size ) NEW_LINE
n = int ( input ( ) ) NEW_LINE print ( sum ( ( n - i ) / ( n - i + 1 ) for i in range ( 0 , n + 1 ) ) ) NEW_LINE
def sum ( n ) : NEW_LINE INDENT return int ( n * ( n + 1 ) * ( n + 2 ) / 3 ) NEW_LINE DEDENT n = 2 NEW_LINE print ( sum ( n ) ) NEW_LINE
def max 20 ( n ) : NEW_LINE INDENT return ( n * ( n - 1 ) ) // 2 NEW_LINE DEDENT n = 10 NEW_LINE print ( max 20 ( n ) ) NEW_LINE
def grayCode ( n ) : NEW_LINE INDENT return n ^ ( n >> 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 10 NEW_LINE print ( grayCode ( n ) ) NEW_LINE DEDENT
def Max_Sum ( n ) : NEW_LINE INDENT return ( n * ( n - 1 ) ) // 2 NEW_LINE DEDENT n = 8 NEW_LINE print ( Max_Sum ( n ) ) NEW_LINE
def possibleways ( n ) : NEW_LINE INDENT if ( n % 2 == 1 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT elif ( n % 4 == 0 ) : NEW_LINE INDENT return n // 4 - 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT return n // 4 ; NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 20 ; NEW_LINE print ( int ( possibleways ( n ) ) ) ; NEW_LINE DEDENT
def CountSetBits ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( n & 1 == 1 ) : NEW_LINE INDENT return 1 + CountSetBits ( n >> 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return CountSetBits ( n >> 1 ) NEW_LINE DEDENT DEDENT n = 21 NEW_LINE print ( CountSetBits ( n ) ) NEW_LINE
def sum ( m , n ) : NEW_LINE INDENT return 8 * m * n - 6 * m - 6 * n + 4 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT m = 3 NEW_LINE n = 2 NEW_LINE print ( sum ( m , n ) ) NEW_LINE DEDENT
def SUM ( n , m ) : NEW_LINE INDENT if ( m == 1 ) : NEW_LINE INDENT return ( n * ( n + 1 ) / 2 ) NEW_LINE DEDENT sum = SUM ( n , m - 1 ) NEW_LINE return ( sum * ( sum + 1 ) / 2 ) NEW_LINE DEDENT n = 5 NEW_LINE m = 3 NEW_LINE print ( " SUM ( " , n , " , " , m , " ) : " , SUM ( n , m ) , sep = " " ) NEW_LINE
def maxLCM ( n ) : NEW_LINE INDENT return ( n * ( n - 1 ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE print ( maxLCM ( n ) ) NEW_LINE DEDENT
def findSum ( n ) : NEW_LINE INDENT return int ( ( n * ( n + 1 ) * ( n + 1 ) * ( n + 2 ) ) / 12 ) NEW_LINE DEDENT n = 3 NEW_LINE print ( findSum ( n ) ) NEW_LINE
def cntWays ( n ) : NEW_LINE INDENT if ( n % 2 == 1 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT else : NEW_LINE INDENT return ( n - 2 ) // 4 ; NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 18 ; NEW_LINE print ( cntWays ( n ) ) ; NEW_LINE DEDENT
def find_composite_ pop_n ( n ) : NEW_LINE INDENT print ( 9 * n , " " , 8 * n ) NEW_LINE DEDENT n = 4 NEW_LINE find_composite_ pop_n ( n ) NEW_LINE
def find max_digit ( n ) : NEW_LINE INDENT if ( n < 3 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( n & 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 6 NEW_LINE DEDENT DEDENT n = 7 NEW_LINE print ( find max_digit ( n ) ) NEW_LINE
def countMaxIntersect ( n ) : NEW_LINE INDENT return ( n * ( n - 1 ) / 2 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 8 NEW_LINE print ( countMaxIntersect ( n ) ) NEW_LINE DEDENT
def sum ( n ) : NEW_LINE INDENT if n == 1 : NEW_LINE INDENT return 2 NEW_LINE DEDENT else : NEW_LINE INDENT return ( n * ( n + 1 ) + sum ( n - 1 ) ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 2 NEW_LINE print ( sum ( n ) ) NEW_LINE DEDENT
def highestPowerOf2 ( n ) : NEW_LINE INDENT return ( n & ( ~ ( n - 1 ) ) ) NEW_LINE DEDENT n = 48 NEW_LINE print ( highestPowerOf2 ( n ) ) NEW_LINE
def countIntersections ( n ) : NEW_LINE INDENT return n * ( n - 1 ) // 2 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 NEW_LINE print ( countIntersections ( n ) ) NEW_LINE DEDENT
import sys NEW_LINE s = sys . stdin . readline ( ) . rstrip ( ) NEW_LINE for c in s : NEW_LINE INDENT if c not in ' abcdefghijklmnopqrstuvwxyz ' : NEW_LINE INDENT print ( c ) NEW_LINE break NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( ' None ' ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE arr . sort ( ) NEW_LINE flag = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % arr [ 0 ] != 0 : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT print ( arr [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT
import sys NEW_LINE import os NEW_LINE if sys . platform == " darwin " : NEW_LINE INDENT base = os . path . dirname ( os . path . abspath ( __file__ ) ) NEW_LINE name = os . path . normpath ( os . path . join ( base , ' . . / Documents / input . txt ' ) ) NEW_LINE sys . stdin = open ( name ) NEW_LINE DEDENT N = int ( input ( ) ) NEW_LINE if N < 1200 : NEW_LINE INDENT print ( " ABC " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " ARC " ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE arr = [ 0 ] + list ( map ( int , input ( ) . split ( ) ) ) + [ 0 ] NEW_LINE max_val = max ( arr [ i ] for i in range ( n + 1 ) ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT val = arr [ i ] NEW_LINE if val > max_val : NEW_LINE INDENT max_val = val NEW_LINE DEDENT DEDENT print ( max_val , end = " " ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT val = arr [ i - 1 ] NEW_LINE if i % 2 == 0 : NEW_LINE INDENT print ( max_val , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( max_val , end = " " ) NEW_LINE DEDENT DEDENT print ( ) NEW_LINE
def smallest ( x , y , z ) : NEW_LINE INDENT c = 0 NEW_LINE while ( x != 0 and y != 0 and z != 0 ) : NEW_LINE INDENT x -= 1 NEW_LINE y -= 1 NEW_LINE z -= 1 NEW_LINE c += 1 NEW_LINE DEDENT return c NEW_LINE DEDENT x = 12 NEW_LINE y = 15 NEW_LINE z = 5 NEW_LINE print ( " Minimum of 3" , " numbers is " , smallest ( x , y , z ) ) NEW_LINE
a = int ( input ( ) ) NEW_LINE b = int ( input ( ) ) NEW_LINE c = int ( input ( ) ) NEW_LINE d = int ( input ( ) ) NEW_LINE e = int ( input ( ) ) NEW_LINE f = int ( input ( ) ) NEW_LINE g = int ( input ( ) ) NEW_LINE h = int ( input ( ) ) NEW_LINE i = int ( input ( ) ) NEW_LINE j = int ( input ( ) ) NEW_LINE k = int ( input ( ) ) NEW_LINE if ( k <= 1 ) : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT elif ( k <= 5 ) : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT elif ( k <= 10 ) : NEW_LINE INDENT print ( 5 ) NEW_LINE DEDENT elif ( k <= 50 ) : NEW_LINE INDENT print ( 10 ) NEW_LINE DEDENT elif ( k <= 100 ) : NEW_LINE INDENT print ( 50 ) NEW_LINE DEDENT elif ( k <= 500 ) : NEW_LINE INDENT print ( 500 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 0 ) NEW_LINE DEDENT
from math import sqrt , floor NEW_LINE m , r = map ( int , input ( ) . split ( ) ) NEW_LINE s = 2 * floor ( sqrt ( m ) ) + ( m - 1 ) * floor ( sqrt ( 2 ) ) NEW_LINE l = s * ( floor ( r ) ) + ( r + 1 ) * floor ( sqrt ( 2 ) ) NEW_LINE print ( ( s + 1 ) * ( l + 2 ) * ( l + 3 ) * ( l + 2 ) ) NEW_LINE
import math NEW_LINE def countCubes ( a , b ) : NEW_LINE INDENT return ( math . floor ( ( cbrt ( b ) ) - math . ceil ( ( cbrt ( a ) ) + 1 ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 7 NEW_LINE b = 28 NEW_LINE print ( " Count of cubes is " , countCubes ( a , b ) ) NEW_LINE DEDENT
from heapq import heappush , heappop NEW_LINE def get_dist ( x ) : NEW_LINE INDENT if x > 100 : return 0 NEW_LINE return 10 ** 9 + 7 NEW_LINE DEDENT while 1 : NEW_LINE INDENT d , n = map ( int , input ( ) . split ( ) ) NEW_LINE if d == 0 : break NEW_LINE a = [ ] NEW_LINE for _ in range ( n ) : NEW_LINE INDENT a . append ( list ( map ( int , input ( ) . split ( ) ) ) ) NEW_LINE DEDENT p = [ 0 ] * n NEW_LINE q = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT r = a [ i ] [ 1 ] NEW_LINE p [ i ] = r NEW_LINE q [ r ] = i NEW_LINE DEDENT dp = [ [ 10 ** 9 + 7 for i in range ( 1001 ) ] for j in range ( d + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 0 NEW_LINE for i in range ( d ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if dp [ j ] [ i ] != 10 ** 9 + 7 : NEW_LINE INDENT continue NEW_LINE DEDENT for k in range ( 1001 ) : NEW_LINE INDENT h = j + k NEW_LINE if dp [ j ] [ i ] > 10 ** 9 + 7 : NEW_LINE INDENT dp [ j ] [ i ] = 10 ** 9 + 7 NEW_LINE heappush ( dp , [ j ] [ i ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT ans = 10 ** 9 NEW_LINE for i in range ( 1001 ) : NEW_LINE INDENT if dp [ i ] [ n ] < ans : NEW_LINE INDENT ans = dp [ i ] [ n ] NEW_LINE DEDENT DEDENT print ( " NA " if ans == 10 ** 9 + 7 else ans ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT triangle = 0 NEW_LINE for i in range ( 1 , 10000 ) : NEW_LINE INDENT if eulerlib . sqrt ( i ) < i : NEW_LINE INDENT raise ValueError ( " Divide " ) NEW_LINE DEDENT triangle += i NEW_LINE if count_divisors ( triangle ) > 500 : NEW_LINE INDENT return str ( triangle ) NEW_LINE DEDENT DEDENT DEDENT def count_divisors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE end = eulerlib . sqrt ( n ) NEW_LINE for i in range ( 1 , end ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT count += 2 NEW_LINE DEDENT DEDENT if end * end == n : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def find INF ( a , b , c , d ) : NEW_LINE INDENT return ( b * c - a * d ) // ( d - c ) NEW_LINE DEDENT a = 3 NEW_LINE b = 9 NEW_LINE c = 3 NEW_LINE d = 5 NEW_LINE print ( " \u0394 X = " , find INF ( a , b , c , d ) ) NEW_LINE
def SieveOfEratosthenes ( n , isPrime ) : NEW_LINE INDENT isPrime [ 0 ] = isPrime [ 1 ] = False NEW_LINE for p in range ( 2 , n + 1 ) : NEW_LINE INDENT isPrime [ p ] = True NEW_LINE DEDENT for p in range ( 2 , n + 1 ) : NEW_LINE INDENT if p * p > n : NEW_LINE INDENT break NEW_LINE DEDENT if ( isPrime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , n + 1 , p ) : NEW_LINE INDENT isPrime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT return False NEW_LINE DEDENT def findPrimePair ( n ) : NEW_LINE INDENT isPrime = [ True ] * ( n + 1 ) NEW_LINE SieveOfEratosthenes ( n , isPrime ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( isPrime [ i ] and isPrime [ n - i ] ) : NEW_LINE INDENT print ( i , n - i ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 74 NEW_LINE findPrimePair ( n ) NEW_LINE DEDENT
def replaceDigit ( x , d1 , d2 ) : NEW_LINE INDENT result = 0 ; NEW_LINE multiply = 1 ; NEW_LINE while ( x % 10 > 0 ) : NEW_LINE INDENT remainder = x % 10 ; NEW_LINE if ( remainder == d1 ) : NEW_LINE INDENT result = result + d2 * multiply ; NEW_LINE DEDENT else : NEW_LINE INDENT result = result + remainder * multiply ; NEW_LINE DEDENT multiply *= 10 ; NEW_LINE x = x // 10 ; NEW_LINE DEDENT return result ; NEW_LINE DEDENT x = 645 ; NEW_LINE d1 = 6 ; NEW_LINE d2 = 5 ; NEW_LINE print ( replaceDigit ( x , d1 , d2 ) ) ; NEW_LINE
def printPattern ( i , j , n ) : NEW_LINE INDENT if ( j >= n ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( i >= n ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( j == i or j == n - 1 - i ) : NEW_LINE INDENT if ( i == n - 1 - j ) : NEW_LINE INDENT print ( " / " , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " \ " , end = " " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE DEDENT if ( printPattern ( i , j + 1 , n ) == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT print ( ) NEW_LINE return printPattern ( i + 1 , 0 , n ) NEW_LINE DEDENT N = 9 NEW_LINE printPattern ( 0 , 0 , N ) NEW_LINE
def getPairsCount ( arr , n , sum ) : NEW_LINE INDENT hm = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT hm [ arr [ i ] ] = 0 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT hm [ arr [ i ] ] += 1 NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if sum - arr [ i ] in hm : NEW_LINE INDENT count += hm [ sum - arr [ i ] ] NEW_LINE DEDENT if sum - arr [ i ] == arr [ i ] : NEW_LINE INDENT count -= 1 NEW_LINE DEDENT DEDENT return count // 2 NEW_LINE DEDENT arr = [ 1 , 5 , 7 , - 1 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE sum = sum - arr [ n ] NEW_LINE print ( " Count of pairs is " , getPairsCount ( arr , n , sum ) ) NEW_LINE
def Count_subarray ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE INDENT subarray_sum = 0 NEW_LINE remaining_sum = 0 NEW_LINE for k in range ( i , j + 1 ) : NEW_LINE INDENT subarray_sum += arr [ k ] NEW_LINE DEDENT for l in range ( i ) : NEW_LINE INDENT remaining_sum += arr [ l ] NEW_LINE DEDENT for l in range ( j + 1 , n ) : NEW_LINE INDENT remaining_sum += arr [ l ] NEW_LINE DEDENT if ( subarray_sum > remaining_sum ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 9 , 12 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( Count_subarray ( arr , n ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE while t > 0 : NEW_LINE INDENT t -= 1 NEW_LINE n , x = map ( int , input ( ) . split ( ) ) NEW_LINE a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if b > a : NEW_LINE INDENT a , b = b , a NEW_LINE DEDENT if a <= x : NEW_LINE INDENT print ( n - 1 ) NEW_LINE DEDENT elif b <= x : NEW_LINE INDENT print ( n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT if a + 1 + x < b : NEW_LINE INDENT print ( n - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT m = ( a + x ) // 2 NEW_LINE print ( m * 2 + 1 ) NEW_LINE DEDENT DEDENT DEDENT
N = int ( input ( ) ) NEW_LINE s = [ int ( input ( ) ) for _ in range ( N ) ] NEW_LINE D = [ ] NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT D . append ( 0 ) NEW_LINE DEDENT for i in range ( N ) : NEW_LINE INDENT D . append ( ( sum ( D [ : , i ] ) + s [ i ] ) % 10 ) NEW_LINE DEDENT D = sorted ( D ) NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT if ( D [ i ] % 10 != 0 ) : NEW_LINE INDENT print ( D [ i ] ) NEW_LINE exit ( ) NEW_LINE DEDENT DEDENT
from sys import stdin , stdout NEW_LINE import math NEW_LINE T = int ( stdin . readline ( ) ) NEW_LINE for i in range ( T ) : NEW_LINE INDENT N , K = map ( int , stdin . readline ( ) . split ( ) ) NEW_LINE A = list ( map ( int , stdin . readline ( ) . split ( ) ) ) NEW_LINE L = { } NEW_LINE for a in A : NEW_LINE INDENT if a not in L : NEW_LINE INDENT L [ a ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT L [ a ] += 1 NEW_LINE DEDENT DEDENT s = 0 NEW_LINE ans = math . inf NEW_LINE for j in range ( K ) : NEW_LINE INDENT while s + 1 < N and L [ a ] >= 1 : NEW_LINE INDENT s += 1 NEW_LINE L [ a ] -= 1 NEW_LINE DEDENT if s > 0 : NEW_LINE INDENT ans = min ( ans , L [ s ] ) NEW_LINE DEDENT DEDENT stdout . write ( " % d \n " % ( ans ) ) NEW_LINE DEDENT
import math NEW_LINE def findRepeatingNumber ( arr , n ) : NEW_LINE INDENT sq = int ( math . sqrt ( n ) ) NEW_LINE range = ( n // sq + 1 ) NEW_LINE count = [ 0 ] * ( range ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT count [ ( arr [ i ] - 1 ) // sq ] += 1 NEW_LINE DEDENT selected_ block = range - 1 NEW_LINE for i in range ( range - 1 ) : NEW_LINE INDENT if ( count [ i ] > sq ) : NEW_LINE INDENT selected_ block = i NEW_LINE break NEW_LINE DEDENT DEDENT m = dict ( ) NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT if ( ( selected_ block * sq ) < arr [ i ] ) and ( arr [ i ] <= ( ( selected_ block + 1 ) * sq ) ) : NEW_LINE INDENT m [ arr [ i ] ] = 1 NEW_LINE if ( ( arr [ i ] - 1 ) // sq ) in m . keys ( ) : NEW_LINE INDENT return arr [ i ] NEW_LINE DEDENT DEDENT DEDENT return - 1 NEW_LINE DEDENT arr = [ 1 , 1 , 2 , 3 , 5 , 4 ] NEW_LINE n = 5 NEW_LINE print ( " One of the numbers in the array is : " , findRepeatingNumber ( arr , n ) ) NEW_LINE
from math import sqrt NEW_LINE def maxPrimeFactors ( n ) : NEW_LINE INDENT maxPrime = - 1 NEW_LINE while n % 2 == 0 : NEW_LINE INDENT maxPrime = 2 NEW_LINE n = n >> 1 NEW_LINE DEDENT for i in range ( 3 , int ( sqrt ( n ) ) + 1 , 2 ) : NEW_LINE INDENT while n % i == 0 : NEW_LINE INDENT maxPrime = i NEW_LINE n = n // i NEW_LINE DEDENT DEDENT if n > 2 : NEW_LINE INDENT maxPrime = n NEW_LINE DEDENT return maxPrime NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 15 NEW_LINE print ( maxPrimeFactors ( n ) ) NEW_LINE n = 25698751364526 NEW_LINE print ( maxPrimeFactors ( n ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE od_sum = 0 NEW_LINE ev_sum = 0 NEW_LINE for i in a : NEW_LINE INDENT if i % 2 : NEW_LINE INDENT od_sum += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ev_sum += 1 NEW_LINE DEDENT DEDENT print ( min ( od_sum , ev_sum ) ) NEW_LINE DEDENT
a = input ( ) NEW_LINE ans = 0 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( len ( a ) ) : NEW_LINE INDENT if ( a [ i ] == "1" ) : NEW_LINE INDENT if ( x >= y ) : NEW_LINE INDENT ans += 1 NEW_LINE x += 2 NEW_LINE DEDENT else : NEW_LINE INDENT y += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( x >= y ) : NEW_LINE INDENT ans += 1 NEW_LINE x -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT y -= 1 NEW_LINE DEDENT DEDENT DEDENT print ( ans ) NEW_LINE
def pythagoreTriplet ( n ) : NEW_LINE INDENT for i in range ( 1 , n // 3 + 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n // 2 + 1 ) : NEW_LINE INDENT k = n - i - j NEW_LINE if ( i * i + j * j == k * k ) : NEW_LINE INDENT print ( i , " , " , j , " , " , k ) NEW_LINE return NEW_LINE DEDENT DEDENT DEDENT print ( " No Triplet " ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 12 NEW_LINE pythagoreTriplet ( n ) NEW_LINE DEDENT
import math NEW_LINE def countDigits ( a , b ) : NEW_LINE INDENT if ( a == 0 or b == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return math . floor ( math . log10 ( abs ( a ) ) + math . log10 ( abs ( b ) ) + 1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = 33 NEW_LINE b = - 24 NEW_LINE print ( countDigits ( a , b ) ) NEW_LINE DEDENT
def indexOfFirstOne ( arr , low , high ) : NEW_LINE INDENT mid = 0 NEW_LINE while ( low <= high ) : NEW_LINE INDENT mid = int ( ( low + high ) / 2 ) NEW_LINE if ( arr [ mid ] == 1 and ( mid == 0 or arr [ mid - 1 ] == 0 ) ) : NEW_LINE INDENT break NEW_LINE DEDENT elif ( arr [ mid ] == 1 ) : NEW_LINE INDENT high = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT DEDENT return mid NEW_LINE DEDENT def posOfFirstOne ( arr ) : NEW_LINE INDENT l = 0 NEW_LINE h = 1 NEW_LINE while ( arr [ h ] == 0 ) : NEW_LINE INDENT l = h NEW_LINE h = 2 * h NEW_LINE DEDENT return indexOfFirstOne ( arr , l , h ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 0 , 0 , 1 , 1 , 1 , 1 , 1 ] NEW_LINE print ( " Index = " , posOfFirstOne ( arr ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE ans = 0 NEW_LINE while n > 0 : NEW_LINE INDENT n -= 2 NEW_LINE ans += 1 NEW_LINE if n >= 2 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
import sys NEW_LINE from sys import stdin NEW_LINE input = stdin . readline NEW_LINE def solve ( data ) : NEW_LINE INDENT if data == '0' : NEW_LINE INDENT return ' NA ' NEW_LINE DEDENT cnt = 0 NEW_LINE for d in data : NEW_LINE INDENT if d . is_integer ( ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if d > 16 : NEW_LINE INDENT return ' NA ' NEW_LINE DEDENT DEDENT DEDENT return ' ' NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT while True : NEW_LINE INDENT data = int ( input ( ) ) NEW_LINE if data == 0 : NEW_LINE INDENT break NEW_LINE DEDENT ans = solve ( data ) NEW_LINE if data > 10 ** 12 : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT elif data > 10 ** 14 : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
def digSum ( n ) : NEW_LINE INDENT sum = 0 ; rem = 0 ; NEW_LINE while ( n > 0 ) : NEW_LINE INDENT rem = n % 10 ; NEW_LINE sum += rem ; NEW_LINE n = int ( n / 10 ) ; NEW_LINE DEDENT return sum ; NEW_LINE DEDENT def findX ( n ) : NEW_LINE INDENT for i in range ( 0 , n + 1 ) : NEW_LINE INDENT if ( i + digSum ( i ) == n ) : NEW_LINE INDENT return i ; NEW_LINE DEDENT DEDENT return - 1 ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 43 ; NEW_LINE print ( " x = " , findX ( n ) ) ; NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = [ int ( i ) - 1 for i in input ( ) . split ( ) ] NEW_LINE ans = 1 NEW_LINE l = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if a [ i ] < a [ i + 1 ] : NEW_LINE INDENT l . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = max ( ans , l [ - 1 ] ) NEW_LINE l = [ ] NEW_LINE DEDENT DEDENT l . append ( a [ - 1 ] ) NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT if a [ i ] > a [ i + 1 ] : NEW_LINE INDENT l . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = max ( ans , l [ - 1 ] ) NEW_LINE l = [ ] NEW_LINE DEDENT DEDENT ans = max ( ans , l [ - 1 ] ) NEW_LINE print ( ans ) NEW_LINE
import sys NEW_LINE for line in sys . stdin : NEW_LINE INDENT h , w = map ( int , line . split ( ) ) NEW_LINE print ( h - w ) NEW_LINE DEDENT
def performQueries ( A , q ) : NEW_LINE INDENT n = len ( A ) NEW_LINE pref_xor = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT pref_xor [ i ] = pref_xor [ i - 1 ] ^ A [ i - 1 ] NEW_LINE DEDENT for i in range ( q ) : NEW_LINE INDENT L = i [ 0 ] NEW_LINE R = i [ 1 ] NEW_LINE if ( L > R ) : NEW_LINE INDENT temp = L NEW_LINE L = R NEW_LINE R = temp NEW_LINE DEDENT if ( L != R and pref_xor [ R ] == pref_xor [ L - 1 ] ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT Arr = [ 1 , 1 , 2 , 2 , 1 ] NEW_LINE q = [ [ 1 , 5 ] , [ 1 , 4 ] , [ 3 , 4 ] ] NEW_LINE performQueries ( Arr , q ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE arr = list ( map ( lambda x : int ( x ) , input ( ) . split ( " " ) ) ) NEW_LINE arr_map = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr_map [ arr [ i ] ] = arr_map . get ( arr [ i ] , 0 ) + 1 NEW_LINE DEDENT max_count = 0 NEW_LINE for key in arr_map : NEW_LINE INDENT max_count = max ( max_count , arr_map [ key ] ) NEW_LINE DEDENT print ( n - max_count ) NEW_LINE
n = int ( input ( ) ) NEW_LINE d = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE m = int ( input ( ) ) NEW_LINE p = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE k = int ( input ( ) ) NEW_LINE x = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE d1 = [ ] NEW_LINE for i in range ( k ) : NEW_LINE INDENT d1 . append ( x [ i ] ) NEW_LINE DEDENT for i in range ( len ( d1 ) ) : NEW_LINE INDENT d1 . append ( d1 [ i ] ** 2 ) NEW_LINE DEDENT for i in range ( len ( d2 ) ) : NEW_LINE INDENT d2 . append ( d2 [ i ] ** 2 ) NEW_LINE DEDENT a , b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE mx = max ( d2 ) NEW_LINE mn = ( a * ( mx // b ) ) NEW_LINE mx1 = mn NEW_LINE for i in range ( len ( d1 ) ) : NEW_LINE INDENT d1 [ i ] = d1 [ i ] / ( d1 [ i ] * ( mx // b ) ) NEW_LINE DEDENT for i in range ( len ( d2 ) ) : NEW_LINE INDENT d2 [ i ] = d2 [ i ] / ( d2 [ i ] * ( mx // b ) ) NEW_LINE DEDENT r = ( mx * ( mx1 // b ) ) * ( mn * ( mx // b ) ) NEW_LINE print ( r ) NEW_LINE
def trapeziumPattern ( num ) : NEW_LINE INDENT firsthalf = 1 NEW_LINE secondhalf = num * num + 1 NEW_LINE numOf chars = 0 NEW_LINE for numOfLines in range ( num , 0 , - 1 ) : NEW_LINE INDENT for numOf lst in range ( num , 0 , - 1 ) : NEW_LINE INDENT for numOf lst2 in range ( num , 0 , - 1 ) : NEW_LINE INDENT if ( numOfLines ) : NEW_LINE INDENT print ( " " , end = " " ) NEW_LINE DEDENT if ( firstHalfCounter <= numOfLines ) : NEW_LINE INDENT firsthalf += 1 NEW_LINE DEDENT else : NEW_LINE INDENT firsthalf += 1 NEW_LINE DEDENT print ( " * " , end = " " ) NEW_LINE DEDENT for secondHalfCounter in range ( 1 , num + 1 ) : NEW_LINE INDENT print ( " * " , end = " " ) NEW_LINE secondhalf += 1 NEW_LINE DEDENT print ( " " ) NEW_LINE numOf chars += 2 NEW_LINE secondhalf = ( secondhalf - 1 ) - ( ( numOfLines - 1 ) * 2 ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT trapeziumPattern ( 3 ) NEW_LINE DEDENT
def findPerm ( n , vec ) : NEW_LINE INDENT ans = [ ] NEW_LINE ans . append ( 0 ) NEW_LINE x = 0 NEW_LINE for i in range ( 0 , n - 2 + 1 ) : NEW_LINE INDENT diff = vec [ i ] NEW_LINE x = x + diff NEW_LINE ans . append ( x ) NEW_LINE DEDENT anss = [ ] NEW_LINE for i in ans : NEW_LINE INDENT anss . append ( i ) NEW_LINE DEDENT anss . sort ( ) NEW_LINE flag = - 1 NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT res = ans [ i ] - ans [ i - 1 ] NEW_LINE if ( res != 1 ) : NEW_LINE INDENT flag = 0 NEW_LINE DEDENT DEDENT if ( flag == 0 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE return NEW_LINE DEDENT else : NEW_LINE INDENT mpp = dict ( ) NEW_LINE mpp . clear ( ) NEW_LINE j = 1 NEW_LINE value_at_index = [ ] NEW_LINE for i in ans : NEW_LINE INDENT mpp [ i ] = j NEW_LINE j += 1 NEW_LINE DEDENT for i in range ( anss ) : NEW_LINE INDENT value_at_index . append ( mpp [ i ] ) NEW_LINE DEDENT for x3 in value_at_index : NEW_LINE INDENT print ( x3 , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT vec = [ 2 , - 3 , 2 ] NEW_LINE n = len ( vec ) NEW_LINE vec . append ( 1 ) NEW_LINE findPerm ( n , vec ) NEW_LINE DEDENT
from math import sqrt , ceil , floor NEW_LINE def countPrimeFactors ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while n % 2 == 0 : NEW_LINE INDENT n = n // 2 NEW_LINE count += 1 NEW_LINE DEDENT for i in range ( 3 , ceil ( sqrt ( n ) ) , 2 ) : NEW_LINE INDENT while n % i == 0 : NEW_LINE INDENT n = n // i NEW_LINE count += 1 NEW_LINE DEDENT DEDENT if n > 2 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return ( count ) NEW_LINE DEDENT def printK pimes ( k , n ) : NEW_LINE INDENT for i in range ( 1 , num , 1 ) : NEW_LINE INDENT if ( countPrimeFactors ( num ) == k ) : NEW_LINE INDENT print ( num , end = " " ) NEW_LINE i += 1 NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 10 NEW_LINE k = 2 NEW_LINE print ( " First " , n , " " , k , " - almost prime numbers : " ) NEW_LINE printK pimes ( k , n ) NEW_LINE DEDENT
def solve ( N , K ) : NEW_LINE INDENT comb = [ [ 0 for i in range ( 50 ) ] for j in range ( N ) ] NEW_LINE comb [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , K + 1 ) : NEW_LINE INDENT for j in range ( 0 , N + 1 ) : NEW_LINE INDENT if ( j >= i ) : NEW_LINE INDENT comb [ j ] [ j ] += comb [ j - i ] [ i ] NEW_LINE DEDENT DEDENT DEDENT return comb [ N ] [ N ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 29 NEW_LINE K = 5 NEW_LINE print ( solve ( N , K ) ) NEW_LINE solve ( N , K ) NEW_LINE DEDENT
def solve ( n ) : NEW_LINE INDENT ans = " " NEW_LINE while ( n >= 10 ) : NEW_LINE INDENT n //= 10 NEW_LINE ans += str ( n % 10 ) NEW_LINE n //= 10 NEW_LINE DEDENT return ans [ : : - 1 ] NEW_LINE DEDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE print ( solve ( n ) ) NEW_LINE DEDENT
from math import sqrt NEW_LINE def normal ( m , n ) : NEW_LINE INDENT N = ( ( abs ( m ) * abs ( n ) ) / sqrt ( ( abs ( m ) * abs ( m ) ) + ( abs ( n ) * abs ( n ) ) ) ; NEW_LINE return N ; NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT m = - 5 ; NEW_LINE n = 3 ; NEW_LINE print ( normal ( m , n ) ) ; NEW_LINE DEDENT
n , h = map ( int , input ( ) . split ( ) ) NEW_LINE a = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( ( ( i + 1 ) ** 2 / n ) ** 0.5 ) NEW_LINE DEDENT for i in a : NEW_LINE INDENT print ( i ) NEW_LINE DEDENT
def countBits ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while ( n ) : NEW_LINE INDENT count += 1 NEW_LINE n >>= 1 NEW_LINE DEDENT return count NEW_LINE DEDENT i = 65 NEW_LINE print ( countBits ( i ) ) NEW_LINE
import math NEW_LINE h , w = map ( int , input ( ) . split ( ) ) NEW_LINE a , b = map ( int , input ( ) . split ( ) ) NEW_LINE print ( a * w - ( h // a ) * ( w // b ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE d = [ int ( _ ) for _ in input ( ) . split ( ) ] NEW_LINE cnt = 0 NEW_LINE for i in range ( 1 , d [ - 1 ] + 1 ) : NEW_LINE INDENT for j in range ( i , n + 1 , i ) : NEW_LINE INDENT if _ % j == 0 : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT DEDENT print ( cnt ) NEW_LINE
def LongestSubarray ( arr , n , k ) : NEW_LINE INDENT arr2 = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr2 [ i ] = arr [ i ] % k NEW_LINE DEDENT current_length = 0 NEW_LINE max_length = 0 NEW_LINE i = 0 NEW_LINE while i < n : NEW_LINE INDENT current_length = 1 NEW_LINE for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr2 [ j ] == arr2 [ i ] ) : NEW_LINE INDENT current_length += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT max_length = max ( max_length , current_length ) NEW_LINE i = j NEW_LINE DEDENT return max_length NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 4 , 9 , 7 , 18 , 29 , 11 ] NEW_LINE n = len ( arr ) NEW_LINE k = 11 NEW_LINE print ( LongestSubarray ( arr , n , k ) ) NEW_LINE DEDENT
n , m = map ( int , input ( ) . split ( ) ) NEW_LINE if m == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT elif m > 1 : NEW_LINE INDENT print ( m - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ( m + 1 ) - 1 ) NEW_LINE DEDENT
def isHeterogram ( s , n ) : NEW_LINE INDENT hash = [ 0 ] * 26 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] != ' ' ) : NEW_LINE INDENT if ( hash [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 ) : NEW_LINE INDENT hash [ ord ( s [ i ] ) - ord ( ' a ' ) ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " the big dwarf only jumps " NEW_LINE n = len ( s ) NEW_LINE if ( isHeterogram ( s , n ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT array = [ i for i in range ( 10 ) ] NEW_LINE for i in range ( 999999 ) : NEW_LINE INDENT if not eulerlib . next_Permutation ( array ) : NEW_LINE INDENT raise AssertionError ( ) NEW_LINE DEDENT DEDENT ans = [ ] NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT ans . append ( array [ i ] ) NEW_LINE DEDENT return " " . join ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def FindPoint ( x1 , y1 , x2 , y2 , x , y ) : NEW_LINE INDENT if ( x > x1 and x < x2 and y > y1 and y < y2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT x1 = 0 NEW_LINE y1 = 0 NEW_LINE x2 = 10 NEW_LINE y2 = 8 NEW_LINE x = 1 NEW_LINE y = 5 NEW_LINE if ( FindPoint ( x1 , y1 , x2 , y2 , x , y ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
import sys NEW_LINE mx = 1e9 NEW_LINE mxn = 1000 NEW_LINE def countPoints ( n , points ) : NEW_LINE INDENT global mx , mxn , mxm NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = points [ i ] NEW_LINE mx . append ( ( x , y ) ) NEW_LINE DEDENT mx . append ( ( 0 , 0 ) ) NEW_LINE mxn . append ( ( 1 , 0 ) ) NEW_LINE mxm . append ( ( - 1 , - 1 ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = mx [ i ] NEW_LINE x += 1 NEW_LINE y += 1 NEW_LINE mx [ i ] [ 0 ] += 1 NEW_LINE mx [ i ] [ 1 ] += 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT x , y = mx [ i ] NEW_LINE if x > minx [ y ] and x < maxx [ y ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if y > miny [ x ] and y < maxy [ x ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT points = [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 0 , - 1 ] , [ - 1 , 0 ] ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT x , y = points [ i ] NEW_LINE if ( x > minx [ y ] and x < maxx [ y ] ) : NEW_LINE INDENT if ( y > miny [ x ] and y < maxy [ x ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT points = [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 0 , - 1 ] , [ - 1 , 0 ] ] NEW_LINE n = len ( points ) NEW_LINE print ( countPoints ( n , points ) ) NEW_LINE DEDENT
import sys NEW_LINE input = sys . stdin . readline NEW_LINE def main ( ) : NEW_LINE INDENT X , Y = map ( int , input ( ) . split ( ) ) NEW_LINE ans = 1 NEW_LINE while True : NEW_LINE INDENT X *= 2 NEW_LINE if X > Y : NEW_LINE INDENT break NEW_LINE DEDENT ans += 1 NEW_LINE DEDENT print ( ans - 1 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
sticks = [ 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 ] ; NEW_LINE def countSticks ( string , n ) : NEW_LINE INDENT cnt = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT cnt += ( sticks [ ord ( string [ i ] ) - ord ( '0' ) ] ) ; NEW_LINE DEDENT return cnt ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " INF " ; NEW_LINE n = len ( string ) ; NEW_LINE print ( countSticks ( string , n ) ) ; NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = [ ] NEW_LINE l = 0 NEW_LINE r = n - 2 NEW_LINE while l != r : NEW_LINE INDENT m = ( l + r ) // 2 NEW_LINE if a [ m ] > a [ m - 1 ] : NEW_LINE INDENT ans . append ( m ) NEW_LINE l = m NEW_LINE DEDENT elif a [ m ] < a [ m + 1 ] : NEW_LINE INDENT ans . append ( m ) NEW_LINE r = m - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT DEDENT print ( len ( ans ) ) NEW_LINE print ( * ans ) NEW_LINE DEDENT
def command ( arr , a , b ) : NEW_LINE INDENT arr [ a ] ^= 1 NEW_LINE arr [ b + 1 ] ^= 1 NEW_LINE DEDENT def process ( arr , n ) : NEW_LINE INDENT for k in range ( 1 , n + 1 ) : NEW_LINE INDENT arr [ k ] ^= arr [ k - 1 ] NEW_LINE DEDENT DEDENT def result ( arr , n ) : NEW_LINE INDENT for k in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( arr [ k ] == 1 ) : NEW_LINE INDENT print ( "1" , end = " " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( "0" , end = " " ) NEW_LINE DEDENT DEDENT DEDENT n = 5 NEW_LINE m = 3 NEW_LINE arr = [ 0 for i in range ( n + 2 ) ] NEW_LINE command ( arr , 1 , 5 ) NEW_LINE command ( arr , 2 , 5 ) NEW_LINE command ( arr , 3 , 5 ) NEW_LINE process ( arr , n ) NEW_LINE result ( arr , n ) NEW_LINE
def mostFrequent ( arr , n ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE max_count = 1 NEW_LINE res = arr [ 0 ] NEW_LINE curr_count = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT if ( arr [ i ] == arr [ i - 1 ] ) : NEW_LINE INDENT curr_count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ( curr_count > max_count ) : NEW_LINE INDENT max_count = curr_count NEW_LINE res = arr [ i - 1 ] NEW_LINE DEDENT curr_count = 1 NEW_LINE DEDENT DEDENT if ( curr_count > max_count ) : NEW_LINE INDENT max_count = curr_count NEW_LINE res = arr [ n - 1 ] NEW_LINE DEDENT return res NEW_LINE DEDENT arr = [ 1 , 5 , 2 , 1 , 3 , 2 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( mostFrequent ( arr , n ) ) NEW_LINE
MAX = 26 NEW_LINE def maxLength ( string , l ) : NEW_LINE INDENT res = 0 NEW_LINE lastPos = [ - 1 for i in range ( MAX ) ] NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT lastPos [ i ] = - 1 NEW_LINE DEDENT for i in range ( l ) : NEW_LINE INDENT C = ord ( string [ i ] ) - ord ( ' a ' ) NEW_LINE if ( lastPos [ C ] != - 1 ) : NEW_LINE INDENT res = max ( l - ( i - lastPos [ C ] - 1 ) - 1 , res ) NEW_LINE DEDENT lastPos [ C ] = i NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT string = " geeksforgeeks " NEW_LINE l = len ( string ) NEW_LINE print ( maxLength ( string , l ) ) NEW_LINE DEDENT
MAX = 1000000 NEW_LINE def ksmallest ( arr , n , k ) : NEW_LINE INDENT b = [ 0 for i in range ( MAX ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ arr [ i ] ] = 1 NEW_LINE DEDENT for j in range ( 1 , MAX , 1 ) : NEW_LINE INDENT if ( b [ j ] != 1 ) : NEW_LINE INDENT k -= 1 NEW_LINE DEDENT if ( k != 1 ) : NEW_LINE INDENT return j NEW_LINE DEDENT DEDENT return MAX_VALUE NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT k = 1 NEW_LINE arr = [ 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( ksmallest ( arr , n , k ) ) NEW_LINE DEDENT
def isDivisible ( n ) : NEW_LINE INDENT while ( ( n // 100 ) > 0 ) : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n + ( d * 13 ) ) NEW_LINE DEDENT return ( n % 43 == 0 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 2795 NEW_LINE if ( isDivisible ( N ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def isDivisible ( n ) : NEW_LINE INDENT while ( ( n // 100 ) > 0 ) : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n - ( d * 14 ) ) NEW_LINE DEDENT return ( n % 47 == 0 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 59173 NEW_LINE if ( isDivisible ( N ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def isDivisible ( n ) : NEW_LINE INDENT while ( ( n // 100 ) > 0 ) : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n - ( d * 3 ) ) NEW_LINE DEDENT return ( n % 31 == 0 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 1922 NEW_LINE if ( isDivisible ( N ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def isDivisible ( n ) : NEW_LINE INDENT while ( ( n // 100 ) <= 0 ) : NEW_LINE INDENT d = n % 10 NEW_LINE n //= 10 NEW_LINE n = abs ( n - ( d * 7 ) ) NEW_LINE DEDENT return ( n % 71 == 0 ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = 5041 NEW_LINE if ( isDivisible ( N ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
def Odd_Sum ( n ) : NEW_LINE INDENT total = ( n + 1 ) // 2 ; NEW_LINE odd = total * total ; NEW_LINE return odd ; NEW_LINE DEDENT def Even_Sum ( n ) : NEW_LINE INDENT total = ( n ) // 2 ; NEW_LINE even = total * ( total + 1 ) ; NEW_LINE return even ; NEW_LINE DEDENT def sumLtoR ( L , R ) : NEW_LINE INDENT odd_sum = Odd_Sum ( R ) - Odd_Sum ( L - 1 ) ; NEW_LINE even_sum = Even_Sum ( R ) - Even_Sum ( L - 1 ) ; NEW_LINE return even_sum - odd_sum ; NEW_LINE DEDENT L = 1 ; NEW_LINE R = 5 ; NEW_LINE print ( sumLtoR ( L , R ) ) ; NEW_LINE
def isRatioPossible ( lowCost , upCost , low INF , up INF , r ) : NEW_LINE INDENT for i in range ( low INF , up INF + 1 ) : NEW_LINE INDENT ans = i * r NEW_LINE if ( lowCost <= ans and ans <= upCost ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT lowCost = 14 NEW_LINE upCost = 30 NEW_LINE low INF = 5 NEW_LINE up INF = 12 NEW_LINE r = 9 NEW_LINE if ( isRatioPossible ( lowCost , upCost , low INF , up INF , up INF , r ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
from math import ceil , log2 NEW_LINE def isPowerOfTwo ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT return ( ceil ( log2 ( n ) / log2 ( 2 ) ) == ( log2 ( n ) / log2 ( 2 ) ) ) NEW_LINE DEDENT if ( isPowerOfTwo ( 31 ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT if ( isPowerOfTwo ( 64 ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 50000000 NEW_LINE sums = set ( ) NEW_LINE for i in range ( 2 , 4 ) : NEW_LINE INDENT sums . update ( { p : 1 for p in primes if p ** 2 > LIMIT : NEW_LINE INDENT break NEW_LINE DEDENT r = eulerlib . list_primes ( eulerlib . sqrt ( LIMIT ) ) NEW_LINE for p in primes : NEW_LINE INDENT q = 1 NEW_LINE for j in range ( i ) : NEW_LINE INDENT q *= p NEW_LINE DEDENT if q > LIMIT : NEW_LINE INDENT break NEW_LINE DEDENT r = eulerlib . list_primes ( eulerlib . sqrt ( LIMIT ) ) NEW_LINE for j in range ( i + 1 ) : NEW_LINE INDENT if p ** 2 + q ** 3 <= LIMIT : NEW_LINE INDENT sums . update ( ( p + j ) ) NEW_LINE DEDENT DEDENT DEDENT sums = sorted ( sums ) NEW_LINE return str ( len ( sums ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def longLenSub ( arr , n ) : NEW_LINE INDENT um = { i : 0 for i in range ( 8 ) } NEW_LINE longLen = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT len = 0 NEW_LINE if ( um [ arr [ i ] - 1 ] and len < um [ arr [ i ] - 1 ] ) : NEW_LINE INDENT len = um [ arr [ i ] - 1 ] NEW_LINE DEDENT if ( um [ arr [ i ] + 1 ] and len < um [ arr [ i ] + 1 ] ) : NEW_LINE INDENT len = um [ arr [ i ] + 1 ] NEW_LINE DEDENT um [ arr [ i ] ] = len + 1 NEW_LINE if ( longLen < um [ arr [ i ] ] ) : NEW_LINE INDENT longLen = um [ arr [ i ] ] NEW_LINE DEDENT DEDENT return longLen NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Longest length subsequence = " , longLenSub ( arr , n ) ) NEW_LINE DEDENT
for s in [ * open ( 0 ) ] [ 1 : ] : print ( sum ( map ( int , s . split ( ) ) ) ) NEW_LINE
def calculateSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE sum = 1 << n NEW_LINE return ( sum - 1 ) NEW_LINE DEDENT n = 10 NEW_LINE print ( " Sum of all elements : " , calculateSum ( n ) ) NEW_LINE
def calculateSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for row in range ( 0 , n ) : NEW_LINE INDENT sum = sum + ( 1 << row ) NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 10 NEW_LINE print ( " Sum of all elements : " , calculateSum ( n ) ) NEW_LINE
def maxDiff ( arr , n ) : NEW_LINE INDENT diff = arr [ 1 ] - arr [ 0 ] NEW_LINE curr_sum = diff NEW_LINE max_sum = curr_sum NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT diff = arr [ i + 1 ] - arr [ i ] NEW_LINE if ( curr_sum > 0 ) : NEW_LINE INDENT curr_sum += diff NEW_LINE DEDENT else : NEW_LINE INDENT curr_sum = diff NEW_LINE DEDENT if ( curr_sum > max_sum ) : NEW_LINE INDENT max_sum = curr_sum NEW_LINE DEDENT DEDENT return max_sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 80 , 2 , 6 , 3 , 100 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Maximum difference is " , maxDiff ( arr , n ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT S = input ( ) NEW_LINE if S == " # " : NEW_LINE INDENT break NEW_LINE DEDENT ans = 1 NEW_LINE pre = 0 NEW_LINE pre_r = 1 NEW_LINE acc = 1 NEW_LINE for c in S : NEW_LINE INDENT if c == " # " : NEW_LINE INDENT acc *= 3 NEW_LINE DEDENT elif c == " . " : NEW_LINE INDENT acc *= 5 NEW_LINE DEDENT elif c == " # " : NEW_LINE INDENT acc *= 7 NEW_LINE DEDENT else : NEW_LINE INDENT if pre_r != 1 : NEW_LINE INDENT pre_r = pre_r NEW_LINE ans += acc NEW_LINE DEDENT acc %= 1000000007 NEW_LINE DEDENT pre = c NEW_LINE DEDENT if S == " # " : NEW_LINE INDENT pre_r = 1 NEW_LINE ans += acc NEW_LINE DEDENT print ( ans % 1000000007 ) NEW_LINE DEDENT DEDENT def main ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT S = input ( ) NEW_LINE if S == " # " : NEW_LINE INDENT break NEW_LINE DEDENT print ( main ( ) ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
def countPairs ( n ) : NEW_LINE INDENT num = ( ( n // 2 ) + 1 ) NEW_LINE max = n % num NEW_LINE count = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT val = ( ( n % i ) % j ) % n NEW_LINE if ( val == max ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE print ( countPairs ( n ) ) NEW_LINE DEDENT
from sys import stdin , stdout NEW_LINE from math import * NEW_LINE import math , random , operator NEW_LINE from itertools import product , permutations , combinations NEW_LINE from collections import deque , defaultdict , Counter NEW_LINE def hi ( ) : NEW_LINE INDENT a , b = map ( int , input ( ) . split ( ) ) NEW_LINE if b > a : NEW_LINE INDENT a = b NEW_LINE DEDENT else : NEW_LINE INDENT a = a NEW_LINE DEDENT n = len ( a ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] == a [ i + 1 ] : NEW_LINE INDENT a [ i + 1 ] = n - i - 1 NEW_LINE DEDENT else : NEW_LINE INDENT a [ i + 1 ] += 1 NEW_LINE DEDENT DEDENT DEDENT for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT l , r = map ( int , input ( ) . split ( ) ) NEW_LINE print ( hi ( ) - hi ( l - 1 ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE ma = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT ma [ i ] = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE DEDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT ma [ i ] [ j ] += ma [ i - 1 ] [ j - 1 ] + ( ma [ i - 1 ] [ j ] - ma [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ma [ i ] [ 0 ] >= ma [ i + 1 ] [ 0 ] : ans += ma [ i ] [ 1 ] - ma [ i + 1 ] [ 0 ] NEW_LINE DEDENT if ans > m : print ( - 1 ) NEW_LINE else : print ( ans ) NEW_LINE DEDENT
MAX = 100000 NEW_LINE def print ( g1 , a , g2 , b ) : NEW_LINE INDENT for i in range ( a ) : NEW_LINE INDENT print ( g1 [ i ] , end = " " ) NEW_LINE DEDENT print ( " and " , end = " " ) NEW_LINE for i in range ( b ) : NEW_LINE INDENT print ( g2 [ i ] , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT def checksum ( g1 , a , g2 , b ) : NEW_LINE INDENT i = 0 NEW_LINE x = 0 NEW_LINE for i in range ( a ) : NEW_LINE INDENT x += g1 [ i ] NEW_LINE DEDENT for i in range ( b ) : NEW_LINE INDENT x -= g2 [ i ] NEW_LINE DEDENT return ( x == 0 ) NEW_LINE DEDENT def form groups ( arr , x , g1 , a , g2 , b , n ) : NEW_LINE INDENT if ( x == n ) : NEW_LINE INDENT if ( checksum ( g1 , a , g2 , b ) ) : NEW_LINE INDENT print ( g1 , a , g2 , b ) NEW_LINE DEDENT return NEW_LINE DEDENT g1 [ a ] = arr [ x ] NEW_LINE form groups ( arr , x + 1 , g1 , a + 1 , g2 , b , n ) NEW_LINE g2 [ b ] = arr [ x ] NEW_LINE form groups ( arr , x + 1 , g1 , a , g2 , b , n ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 9 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE g1 = [ 0 ] * MAX NEW_LINE g2 = [ 0 ] * MAX NEW_LINE form groups ( arr , 0 , g1 , 0 , g2 , 0 , n ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE a -= 1 NEW_LINE b -= 1 NEW_LINE c -= 1 NEW_LINE z = 1 NEW_LINE for x in range ( n + 1 ) : NEW_LINE INDENT y = x + 1 NEW_LINE if y > a : NEW_LINE INDENT if y - a > z : NEW_LINE INDENT z = y - a NEW_LINE DEDENT DEDENT if x - y > c : NEW_LINE INDENT c = x - y NEW_LINE DEDENT DEDENT print ( z ) NEW_LINE
def maxSubseq ( vec , n ) : NEW_LINE INDENT suffix = 0 NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( vec [ i ] == 1 ) : NEW_LINE INDENT suffix += 1 NEW_LINE vec [ i ] = suffix NEW_LINE DEDENT DEDENT res = 0 NEW_LINE zero = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( vec [ i ] == 0 ) : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT if ( vec [ i ] > 0 ) : NEW_LINE INDENT res = max ( res , zero + vec [ i ] ) NEW_LINE DEDENT DEDENT return max ( res , zero ) NEW_LINE DEDENT vec = [ 0 , 1 , 0 , 0 , 1 , 0 ] NEW_LINE n = len ( vec ) NEW_LINE print ( maxSubseq ( vec , n ) ) NEW_LINE
R = 4 NEW_LINE C = 4 NEW_LINE def countPaths ( maze ) : NEW_LINE INDENT if ( maze [ 0 ] [ 0 ] == - 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT for i in range ( R ) : NEW_LINE INDENT if ( maze [ i ] [ 0 ] == 0 ) : NEW_LINE INDENT maze [ i ] [ 0 ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( 1 , C ) : NEW_LINE INDENT if ( maze [ 0 ] [ i ] == 0 ) : NEW_LINE INDENT maze [ 0 ] [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( 1 , R ) : NEW_LINE INDENT for j in range ( 1 , C ) : NEW_LINE INDENT if ( maze [ i ] [ j ] == - 1 ) : NEW_LINE INDENT continue NEW_LINE DEDENT if ( maze [ i - 1 ] [ j ] > 0 ) : NEW_LINE INDENT maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i - 1 ] [ j ] ) NEW_LINE DEDENT if ( maze [ i ] [ j - 1 ] > 0 ) : NEW_LINE INDENT maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT if ( maze [ R - 1 ] [ C - 1 ] > 0 ) : NEW_LINE INDENT return maze [ R - 1 ] [ C - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT maze = [ [ 0 , 0 , 0 , 0 ] , [ 0 , - 1 , 0 , 0 ] , [ - 1 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ] NEW_LINE print ( countPaths ( maze ) ) NEW_LINE
def isPrime ( N ) : NEW_LINE INDENT isPrime = True NEW_LINE arr = [ 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 ] NEW_LINE if ( N < 2 ) : NEW_LINE INDENT isPrime = False NEW_LINE DEDENT if ( N % 2 == 0 or N % 3 == 0 or N % 5 == 0 ) : NEW_LINE INDENT isPrime = False NEW_LINE DEDENT for i in range ( int ( N ** ( 0.5 ) ) + 1 ) : NEW_LINE INDENT for c in arr : NEW_LINE INDENT if ( c > int ( N ** ( 0.5 ) ) ) : NEW_LINE INDENT break NEW_LINE DEDENT else : NEW_LINE INDENT if ( N % ( c + i ) == 0 ) : NEW_LINE INDENT isPrime = False NEW_LINE break NEW_LINE DEDENT DEDENT if ( not isPrime ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT if ( isPrime ) : NEW_LINE INDENT print ( " Prime Number " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not Prime Number " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 121 NEW_LINE isPrime ( N ) NEW_LINE DEDENT
x1 , y1 = map ( int , input ( ) . split ( ) ) NEW_LINE x2 , y2 = map ( int , input ( ) . split ( ) ) NEW_LINE print ( x2 - x1 ) NEW_LINE print ( y2 - y1 ) NEW_LINE print ( x1 - ( y2 - y1 ) ) NEW_LINE
def max ( x , y ) : NEW_LINE INDENT return x if ( x > y ) else y NEW_LINE DEDENT def lps ( seq , i , j ) : NEW_LINE INDENT if ( i == j ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] and i + 1 == j ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( seq [ i ] == seq [ j ] ) : NEW_LINE INDENT return lps ( seq , i + 1 , j - 1 ) + 2 NEW_LINE DEDENT return max ( lps ( seq , i , j - 1 ) , lps ( seq , i + 1 , j ) ) NEW_LINE DEDENT seq = " GEEKSFORGEEKS " NEW_LINE n = len ( seq ) NEW_LINE print ( " The length of the LPS is " , lps ( seq , 0 , n - 1 ) ) NEW_LINE
def findLength ( string , n ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( n - 2 + 1 ) : NEW_LINE INDENT l = i NEW_LINE r = i + 1 NEW_LINE lsum = 0 NEW_LINE rsum = 0 NEW_LINE while ( r < n and l >= 0 ) : NEW_LINE INDENT lsum += ord ( string [ l ] ) - ord ( '0' ) NEW_LINE rsum += ord ( string [ r ] ) - ord ( '0' ) NEW_LINE if ( lsum == rsum ) : NEW_LINE INDENT ans = max ( ans , r - l + 1 ) NEW_LINE DEDENT l -= 1 NEW_LINE r += 1 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = "123 abc NEW_LINE print ( " Length of the substring is " , findLength ( string , len ( string ) ) ) NEW_LINE DEDENT
def print ( a , n , ind ) : NEW_LINE INDENT for i in range ( ind , n + ind ) : NEW_LINE INDENT print ( a [ ( i % n ) ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' ] NEW_LINE n = 6 NEW_LINE print ( a , n , 3 ) NEW_LINE DEDENT
def print ( a , n , ind ) : NEW_LINE INDENT b = [ None ] * ( 2 * n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ i ] = b [ n + i ] = a [ i ] NEW_LINE DEDENT for i in range ( ind , n + ind ) : NEW_LINE INDENT print ( b [ i ] , end = " " ) NEW_LINE DEDENT DEDENT a = [ ' A ' , ' B ' , ' C ' , ' D ' , ' E ' , ' F ' ] NEW_LINE n = 6 NEW_LINE print ( a , n , 3 ) NEW_LINE
n , a , b = map ( int , input ( ) . split ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = 0 NEW_LINE k = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if s [ i ] == " * " : NEW_LINE INDENT k += 1 NEW_LINE DEDENT elif s [ i ] == " * " : NEW_LINE INDENT if a > b : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += ( a - b ) NEW_LINE DEDENT a = a + b NEW_LINE k = 1 NEW_LINE DEDENT elif s [ i ] == " * " : NEW_LINE INDENT if a > b : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ans += ( b - a ) NEW_LINE DEDENT a = a + b NEW_LINE k = 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE id = int ( input ( ) ) NEW_LINE data = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT j , k , * l = input ( ) . split ( ) NEW_LINE data . append ( [ int ( k ) , k , l ] ) NEW_LINE DEDENT data = [ ] NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( len ( data [ i ] ) ) : NEW_LINE INDENT if ( data [ i ] [ j ] == 1 ) : NEW_LINE INDENT data . append ( [ i + 1 , j + 1 ] ) NEW_LINE DEDENT DEDENT DEDENT result = [ ] NEW_LINE for i in range ( len ( data ) ) : NEW_LINE INDENT r = " " NEW_LINE for j in data : NEW_LINE INDENT r += " . " + j + " . " NEW_LINE DEDENT result . append ( r ) NEW_LINE DEDENT print ( * result , sep = " \n " ) NEW_LINE
import sys NEW_LINE def get_ints ( ) : return map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) NEW_LINE def get_array ( ) : return list ( map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) ) NEW_LINE def input ( ) : return sys . stdin . readline ( ) . strip ( ) NEW_LINE MOD = 1000000007 NEW_LINE INF = float ( ' inf ' ) NEW_LINE a , b , c , t , d = get_ints ( ) NEW_LINE if t == 1 : NEW_LINE INDENT print ( a + b ) NEW_LINE DEDENT elif t == 2 : NEW_LINE INDENT print ( a + b ) NEW_LINE DEDENT else : NEW_LINE INDENT if d < c : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT j = 0 NEW_LINE f = 1 NEW_LINE for i in range ( t ) : NEW_LINE INDENT if j == 0 : NEW_LINE INDENT continue NEW_LINE DEDENT for j in range ( 3 ) : NEW_LINE INDENT if f == 1 : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT j = 3 NEW_LINE f = 2 NEW_LINE DEDENT print ( j + 1 ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE a = sorted ( list ( input ( ) ) ) NEW_LINE b = sorted ( list ( input ( ) ) , reverse = True ) NEW_LINE j = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT while j < n and a [ j ] < b [ i ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT j += 1 NEW_LINE DEDENT print ( j + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if b [ i ] > a [ j ] : NEW_LINE INDENT j += 1 NEW_LINE DEDENT DEDENT print ( j ) NEW_LINE
import math NEW_LINE a , b , c = map ( int , input ( ) . split ( ) ) NEW_LINE m = max ( a , b , c ) NEW_LINE su = math . ceil ( ( m + c ) / 2 ) NEW_LINE k = math . ceil ( ( m - a ) / 2 ) NEW_LINE print ( k ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE print ( * [ 1 for i in range ( n ) ] ) NEW_LINE DEDENT
def bin ( n ) : NEW_LINE INDENT if ( n > 1 ) : NEW_LINE INDENT bin ( n >> 1 ) NEW_LINE DEDENT print ( n & 1 , end = " " ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT bin ( 131 ) NEW_LINE print ( " " ) NEW_LINE bin ( 3 ) NEW_LINE DEDENT
def compute ( ) : NEW_LINE INDENT ans = sum ( i for i in range ( 1000 ) if i % 3 == 0 or i % 5 == 0 ) NEW_LINE return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s = input ( ) NEW_LINE ans = " " NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT if s [ i ] == " n " : NEW_LINE INDENT ans += "1 " NEW_LINE DEDENT elif s [ i ] == " z " : NEW_LINE INDENT ans += "0 " NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
R , G = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ( G - R ) * 2 ) NEW_LINE
def Circular ( n ) : NEW_LINE INDENT Result = 1 ; NEW_LINE while ( n > 0 ) : NEW_LINE INDENT Result = Result * n ; NEW_LINE n -= 1 ; NEW_LINE DEDENT return Result ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 ; NEW_LINE print ( Circular ( n - 1 ) ) ; NEW_LINE DEDENT
def productDiagonals ( arr , n ) : NEW_LINE INDENT product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT product = product * arr [ i ] [ i ] NEW_LINE product = product * arr [ i ] [ n - i - 1 ] NEW_LINE DEDENT if ( n % 2 == 1 ) : NEW_LINE INDENT product = product // arr [ n // 2 ] [ n // 2 ] NEW_LINE DEDENT return product NEW_LINE DEDENT arr1 = [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 7 , 4 , 2 ] , [ 2 , 2 , 2 , 1 ] ] NEW_LINE print ( productDiagonals ( arr1 , 4 ) ) NEW_LINE arr2 = [ [ 2 , 1 , 2 , 1 , 2 ] , [ 1 , 2 , 1 , 2 ] , [ 2 , 1 , 2 , 1 , 2 ] , [ 1 , 2 , 1 , 2 , 1 ] , [ 2 , 1 , 2 , 1 , 2 ] ] NEW_LINE print ( productDiagonals ( arr2 , 5 ) ) NEW_LINE
import sys NEW_LINE from sys import stdin NEW_LINE input = stdin . readline NEW_LINE def solve ( data ) : NEW_LINE INDENT ans = [ ] NEW_LINE for d in data : NEW_LINE INDENT if d != 0 : NEW_LINE INDENT ans . append ( ' - ' * d ) NEW_LINE DEDENT DEDENT return ' ' . join ( ans ) NEW_LINE DEDENT def main ( args ) : NEW_LINE INDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT data = [ int ( i ) for i in input ( ) . split ( ) ] NEW_LINE ans = solve ( data ) NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT print ( ans [ i ] ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( sys . argv [ 1 : ] ) NEW_LINE DEDENT
NO_OF_CHARS = 256 NEW_LINE def point ( string ) : NEW_LINE INDENT count = [ 0 ] * ( NO_OF_CHARS ) NEW_LINE for i in range ( len ( string ) ) : NEW_LINE INDENT count [ ord ( string [ i ] ) ] += 1 NEW_LINE DEDENT first = 0 NEW_LINE second = 0 NEW_LINE for i in range ( NO_OF_CHARS ) : NEW_LINE INDENT if ( count [ i ] > count [ first ] ) : NEW_LINE INDENT second = first NEW_LINE first = i NEW_LINE DEDENT elif ( count [ i ] > count [ second ] and count [ i ] != count [ first ] ) : NEW_LINE INDENT second = i NEW_LINE DEDENT DEDENT return chr ( second ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " geeksforgeeks " NEW_LINE res = point ( string ) NEW_LINE if res != ' \ 0' : NEW_LINE INDENT print ( " Second mostf gen char " + " is " + res ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No second mostf gen char " + " character " ) NEW_LINE DEDENT DEDENT
from __future__ import ( division , absolute_import , print_function , unicode_literals ) NEW_LINE from sys import stdin NEW_LINE L = [ [ 0 ] * 5 for _ in range ( 5 ) ] NEW_LINE for line in stdin : NEW_LINE INDENT n = int ( line ) NEW_LINE L [ n ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT L [ i ] [ 1 ] += L [ i - 1 ] [ 1 ] NEW_LINE DEDENT for i in range ( 5 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT L [ i ] [ j ] += L [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( 1 , 5 ) : NEW_LINE INDENT print ( L [ i ] [ i ] ) NEW_LINE DEDENT
def mySort ( arr ) : NEW_LINE INDENT n = len ( arr ) ; NEW_LINE arr1 = arr [ : n ] ; NEW_LINE arr1 . sort ( ) ; NEW_LINE arr1 . sort ( ) ; NEW_LINE arr1 . sort ( ) ; NEW_LINE arr1 . sort ( ) ; NEW_LINE arr1 . reverse ( ) ; NEW_LINE DEDENT arr = [ 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , 7 ] ; NEW_LINE arr = mySort ( arr ) ; NEW_LINE print ( " Modified Array : " , arr ) ; NEW_LINE
def minflip ( arr1 , arr2 , arr3 , p , q , n ) : NEW_LINE INDENT flip = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr1 [ i ] > 0 ^ arr2 [ i ] > 0 ) : NEW_LINE INDENT flip += 1 NEW_LINE DEDENT DEDENT if ( flip <= p + q ) : NEW_LINE INDENT return flip NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT DEDENT arr1 = [ 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] NEW_LINE arr2 = [ 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 ] NEW_LINE arr3 = [ 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 ] NEW_LINE n = len ( arr1 ) NEW_LINE p = 2 NEW_LINE q = 4 NEW_LINE print ( minflip ( arr1 , arr2 , arr3 , p , q , n ) ) NEW_LINE
def sum ( n ) : NEW_LINE INDENT s = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT s = s + 1 / i NEW_LINE DEDENT return s NEW_LINE DEDENT n = 5 NEW_LINE print ( " Sum is " , sum ( n ) ) NEW_LINE
def bitonicGenerator ( arr , n ) : NEW_LINE INDENT evenArr = [ ] NEW_LINE oddArr = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( i % 2 != 1 ) : NEW_LINE INDENT evenArr . append ( arr [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT oddArr . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT evenArr . sort ( reverse = True ) NEW_LINE oddArr . sort ( reverse = True ) NEW_LINE i = 0 NEW_LINE for j in range ( len ( evenArr ) ) : NEW_LINE INDENT arr [ i ] = evenArr [ j ] NEW_LINE i += 1 NEW_LINE DEDENT for j in range ( len ( oddArr ) ) : NEW_LINE INDENT arr [ i ] = oddArr [ j ] NEW_LINE i += 1 NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE bitonicGenerator ( arr , n ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT
def countPairs ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE right = 0 NEW_LINE left = 0 NEW_LINE visited = [ False for i in range ( n ) ] NEW_LINE while ( right < n ) : NEW_LINE INDENT while ( right < n and not visited [ arr [ right ] ] ) : NEW_LINE INDENT count += ( right - left ) NEW_LINE visited [ arr [ right ] ] = True NEW_LINE right += 1 NEW_LINE DEDENT while ( left < right and ( right != n and visited [ arr [ right ] ] ) ) : NEW_LINE INDENT visited [ arr [ left ] ] = False NEW_LINE left += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 4 , 2 , 4 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countPairs ( arr , n ) ) NEW_LINE DEDENT
class TreeNode : NEW_LINE INDENT def __init__ ( self , rootData ) : NEW_LINE INDENT self . val = rootData NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT class Solution ( object ) : NEW_LINE INDENT def isSubtree ( self , s , t ) : NEW_LINE INDENT tree1 = preorder ( s , True ) NEW_LINE tree2 = preorder ( t , True ) NEW_LINE return tree1 . find ( tree2 ) >= 0 NEW_LINE DEDENT def preorder ( self , t , left ) : NEW_LINE INDENT if t == None : NEW_LINE INDENT if left : NEW_LINE INDENT return " l fir " NEW_LINE DEDENT else : NEW_LINE INDENT return " r fir " NEW_LINE DEDENT DEDENT return " # " + str ( t . val ) + " " + preorder ( t . left , True ) + " " + preorder ( t . right , False ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE root = TreeNode ( 3 ) NEW_LINE root . left = TreeNode ( 4 ) NEW_LINE root . right = TreeNode ( 5 ) NEW_LINE root . left . left = TreeNode ( 1 ) NEW_LINE root . left . right = TreeNode ( 2 ) NEW_LINE subRoot = TreeNode ( 4 ) NEW_LINE subRoot . left = TreeNode ( 1 ) NEW_LINE subRoot . right = TreeNode ( 2 ) NEW_LINE out = sObj . isSubtree ( root , subRoot ) NEW_LINE print ( out ) NEW_LINE DEDENT
M = 1001 NEW_LINE MOD = 998244353 NEW_LINE dp = [ [ - 1 for i in range ( M ) ] for j in range ( M ) ] NEW_LINE def solve ( idx , diff , N , M , K ) : NEW_LINE INDENT if ( idx > N ) : NEW_LINE INDENT if ( diff == K ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT if ( dp [ idx ] [ diff ] != - 1 ) : NEW_LINE INDENT return dp [ idx ] [ diff ] NEW_LINE DEDENT ans = solve ( idx + 1 , diff , N , M , K ) NEW_LINE ans += ( M - 1 ) * solve ( idx + 1 , diff + 1 , N , M , K ) NEW_LINE dp [ idx ] [ diff ] = ans % MOD NEW_LINE return dp [ idx ] [ diff ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE M = 3 NEW_LINE K = 0 NEW_LINE for i in range ( M + 1 ) : NEW_LINE INDENT for j in range ( M + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = - 1 NEW_LINE DEDENT DEDENT print ( ( M * solve ( 2 , 0 , N , M , K ) ) ) NEW_LINE DEDENT
import itertools NEW_LINE def compute ( ) : NEW_LINE INDENT n = len ( itr ) NEW_LINE mat = [ [ 0 ] * 21 for i in range ( n ) ] NEW_LINE min_len = [ [ 0 ] * 21 for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT min_len [ i ] [ i ] = min ( ( i + 30 ) * 1000 , mat [ i ] [ i ] ) NEW_LINE DEDENT ans = 99999999999999999 NEW_LINE for i in range ( n ) : NEW_LINE INDENT mat [ i ] [ i ] = ( i + 30 ) * 1000 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( mat [ i ] [ i ] == 0 ) : NEW_LINE INDENT ans = min ( ans , mat [ i ] [ i ] ) NEW_LINE DEDENT DEDENT return str ( ans ) NEW_LINE DEDENT def findMinimum_length ( current INF , setOfSph operator ) : NEW_LINE INDENT if ( setOfSph operator & ( 1 << i ) ) : NEW_LINE INDENT raise ValueError ( ) NEW_LINE DEDENT if ( min_len [ current INF ] [ setOfSph operator ] == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( setOfSph operator & ( 1 << i ) ) : NEW_LINE INDENT return min ( ans , mat [ i ] [ current INF ] ) NEW_LINE DEDENT if ( ( 1 << i ) & ( 1 << i ) ) : NEW_LINE INDENT temp = ( mat [ i ] [ current INF ] - 50000 ) * 200000 NEW_LINE temp += findMinimum_length ( i , setOfSph operator ) NEW_LINE ans = min ( ans , temp ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def line ( ) : NEW_LINE INDENT return input ( ) NEW_LINE DEDENT N = int ( input ( ) ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT a = [ int ( i ) for i in line ( ) . split ( ) ] NEW_LINE if a [ 0 ] % 3 == 0 or a [ 1 ] % 3 == 0 or a [ 2 ] % 3 == 0 : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
def getTotalXorOfSubarrayXors ( arr , N ) : NEW_LINE INDENT if ( N % 2 == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT res ^= arr [ i ] NEW_LINE DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 5 , 2 , 4 , 6 ] NEW_LINE N = len ( arr ) NEW_LINE print ( getTotalXorOfSubarrayXors ( arr , N ) ) NEW_LINE DEDENT
def getTotalXorOfSubarrayXors ( arr , N ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT freq = ( i + 1 ) * ( N - i ) NEW_LINE if ( freq % 2 == 1 ) : NEW_LINE INDENT res = res ^ arr [ i ] NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 5 , 2 , 4 , 6 ] NEW_LINE N = len ( arr ) NEW_LINE print ( getTotalXorOfSubarrayXors ( arr , N ) ) NEW_LINE DEDENT
l , p , q = map ( int , input ( ) . split ( ) ) NEW_LINE print ( ( l + p ) * ( l / p + q ) ) NEW_LINE
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = sorted ( map ( int , input ( ) . split ( ) ) ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT ans += abs ( a [ i + n ] - a [ i ] ) NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT
a = int ( input ( ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE c = [ 0 ] * 10 NEW_LINE d = [ 0 ] * 10 NEW_LINE for i in b : NEW_LINE INDENT c [ i ] += 1 NEW_LINE DEDENT for i in range ( a ) : NEW_LINE INDENT d [ i ] += c [ i ] % 2 NEW_LINE DEDENT res = 0 NEW_LINE for i in range ( 10 ) : NEW_LINE INDENT res += ( d [ i ] * c [ i ] ) // 2 NEW_LINE DEDENT res += ( d [ a ] * d [ a ] ) // 2 NEW_LINE print ( res ) NEW_LINE
def check_a ( l ) : NEW_LINE INDENT f = 0 NEW_LINE for i in range ( len ( l ) ) : NEW_LINE INDENT if l [ i ] . islower ( ) : NEW_LINE INDENT f = 1 NEW_LINE DEDENT DEDENT return f NEW_LINE DEDENT def check_b ( l ) : NEW_LINE INDENT f = 1 NEW_LINE for i in range ( len ( l ) ) : NEW_LINE INDENT if l [ i ] . isupper ( ) : NEW_LINE INDENT j = i NEW_LINE while j < len ( l ) and l [ j ] . islower ( ) : NEW_LINE INDENT f = 2 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT if f : NEW_LINE INDENT return 2 NEW_LINE DEDENT DEDENT return 1 NEW_LINE DEDENT n = int ( input ( ) ) NEW_LINE l = [ input ( ) for i in range ( n ) ] NEW_LINE c = input ( ) NEW_LINE b = [ input ( ) for i in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if c [ i ] . islower ( ) : NEW_LINE INDENT l [ i ] = c [ i ] . upper ( ) NEW_LINE DEDENT elif c [ i ] . isupper ( ) : NEW_LINE INDENT b [ i ] = c [ i ] . lower ( ) NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if b [ i ] in l : NEW_LINE INDENT print ( l [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( b [ i ] . lower ( ) ) NEW_LINE DEDENT DEDENT
N = int ( input ( ) ) NEW_LINE c = input ( ) NEW_LINE idxl = - 1 NEW_LINE idxr = N NEW_LINE cnt = 0 NEW_LINE while ( 1 ) : NEW_LINE INDENT while ( 1 ) : NEW_LINE INDENT idxl = idxl + 1 NEW_LINE if ( idxl >= N ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( c [ idxl ] == " W " ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( idxl >= N ) : NEW_LINE INDENT break NEW_LINE DEDENT while ( 1 ) : NEW_LINE INDENT idxr = idxr - 1 NEW_LINE if ( idxr <= 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( c [ idxr ] == " B " ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT if ( idxr <= 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( idxl >= idxr ) : NEW_LINE INDENT break ; NEW_LINE DEDENT cnt = min ( cnt , cnt + 1 ) NEW_LINE DEDENT print ( cnt ) NEW_LINE
n = int ( input ( ) ) NEW_LINE a = [ int ( x ) for x in input ( ) . split ( ) ] NEW_LINE even_num = 0 NEW_LINE num_odd = 0 NEW_LINE for i in a : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT even_num += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd_num += 1 NEW_LINE DEDENT DEDENT print ( max ( even_num , odd_num ) ) NEW_LINE
import math NEW_LINE p = [ 2 ] NEW_LINE s = 3 NEW_LINE max = 50000 NEW_LINE while p [ len ( p ) - 1 ] <= max : NEW_LINE INDENT m = int ( math . sqrt ( s ) ) NEW_LINE r = True NEW_LINE for i in p : NEW_LINE INDENT if i > m : NEW_LINE INDENT break NEW_LINE DEDENT if s % i == 0 : NEW_LINE INDENT r = False NEW_LINE break NEW_LINE DEDENT DEDENT if r : NEW_LINE INDENT p . append ( s ) NEW_LINE DEDENT s += 2 NEW_LINE DEDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT if p [ i ] == 1 and p [ i - 2 ] == 1 and p [ i - 6 ] == 1 and p [ i - 8 ] == 1 : NEW_LINE INDENT ans = i NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE b = input ( ) . split ( ) NEW_LINE k = 0 NEW_LINE a = [ 1 , 2 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT a . append ( int ( b [ i ] ) ) NEW_LINE if a [ i ] == 1 : NEW_LINE INDENT k += 1 NEW_LINE DEDENT elif a [ i ] == 0 : NEW_LINE INDENT if k % 2 == 0 : NEW_LINE INDENT a [ i ] = 2 NEW_LINE DEDENT else : NEW_LINE INDENT a [ i ] = 1 NEW_LINE DEDENT DEDENT DEDENT if len ( a ) % 2 == 0 : NEW_LINE INDENT print ( 2 ) NEW_LINE DEDENT elif len ( a ) % 2 == 1 : NEW_LINE INDENT print ( 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 2 ) NEW_LINE DEDENT
def powerOfTwo ( n ) : NEW_LINE INDENT return ( not ( n & n - 1 ) ) NEW_LINE DEDENT def onlyFirstAndLastAreSet ( n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return powerOfTwo ( n - 1 ) NEW_LINE DEDENT n = int ( parse parseInt ( "9" ) ) NEW_LINE if ( onlyFirstAndLastAreSet ( n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def minimumCostOf sumsing ( X , Y , m , n ) : NEW_LINE INDENT res = 0 NEW_LINE X . sort ( reverse = True ) NEW_LINE Y . sort ( reverse = True ) NEW_LINE hz lru_left = 1 NEW_LINE vert = 1 NEW_LINE i = 0 NEW_LINE while ( i < m and j < n ) : NEW_LINE INDENT if ( X [ i ] > Y [ j ] ) : NEW_LINE INDENT res += X [ i ] * vert NEW_LINE hz lru_left += 1 NEW_LINE i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT res += Y [ j ] * hz lru_left NEW_LINE vert += 1 NEW_LINE j += 1 NEW_LINE DEDENT DEDENT total = 0 NEW_LINE while ( i < m ) : NEW_LINE INDENT total += X [ i ] NEW_LINE i += 1 NEW_LINE DEDENT res += total * vert NEW_LINE total = 0 NEW_LINE while ( j < n ) : NEW_LINE INDENT total += Y [ j ] NEW_LINE j += 1 NEW_LINE DEDENT res += total * hz lru_left NEW_LINE return res NEW_LINE DEDENT m , n = 6 , 4 NEW_LINE X = [ 2 , 1 , 3 , 1 , 4 ] NEW_LINE Y = [ 4 , 1 , 2 ] NEW_LINE print ( minimumCostOf sumsing ( X , Y , m - 1 , n - 1 ) ) NEW_LINE
def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b ; NEW_LINE DEDENT return gcd ( b % a , a ) ; NEW_LINE DEDENT def countPairs ( G , L ) : NEW_LINE INDENT count = 0 ; NEW_LINE p = G * L ; NEW_LINE for a in range ( 1 , L + 1 ) : NEW_LINE INDENT if ( ( p % a == 0 ) and gcd ( a , p // a ) == G ) : NEW_LINE INDENT count += 1 ; NEW_LINE DEDENT DEDENT return count ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT G = 2 ; L = 12 ; NEW_LINE print ( " Total possible pair with GCD " , G ) ; NEW_LINE print ( " & LCM " , L ) ; NEW_LINE print ( " = " , countPairs ( G , L ) ) ; NEW_LINE DEDENT
def multiply ( a , b ) : NEW_LINE INDENT mul = [ [ 0 for i in range ( 3 ) ] for j in range ( 3 ) ] NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT mul [ i ] [ j ] = 0 NEW_LINE for k in range ( 3 ) : NEW_LINE INDENT mul [ i ] [ j ] += a [ i ] [ k ] * b [ k ] [ j ] NEW_LINE DEDENT DEDENT DEDENT for i in range ( 3 ) : NEW_LINE INDENT for j in range ( 3 ) : NEW_LINE INDENT a [ i ] [ j ] = mul [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT def power ( F , n ) : NEW_LINE INDENT M = [ [ 1 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] ] NEW_LINE if ( n == 1 ) : NEW_LINE INDENT return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] NEW_LINE DEDENT power ( F , n // 2 ) NEW_LINE multiply ( F , F ) NEW_LINE if ( n % 2 != 0 ) : NEW_LINE INDENT multiply ( F , M ) NEW_LINE DEDENT return F [ 0 ] [ 0 ] + F [ 0 ] [ 1 ] NEW_LINE DEDENT def findNthTerm ( n ) : NEW_LINE INDENT F = [ [ 1 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] ] NEW_LINE return power ( F , n - 2 ) NEW_LINE DEDENT n = 5 NEW_LINE print ( " F ( 5 ) is " , findNthTerm ( n ) ) NEW_LINE
def MinimumValue ( x , y ) : NEW_LINE INDENT if ( x > y ) : NEW_LINE INDENT temp = x NEW_LINE x = y NEW_LINE y = temp NEW_LINE DEDENT a = 1 NEW_LINE b = x - 1 NEW_LINE c = y - b NEW_LINE print ( a , b , c ) NEW_LINE DEDENT x = 123 NEW_LINE y = 13 NEW_LINE MinimumValue ( x , y ) NEW_LINE
class Solution ( object ) : NEW_LINE INDENT def checkPossibility ( self , nums ) : NEW_LINE INDENT brokenPoint = 0 NEW_LINE for i in range ( len ( nums ) - 1 ) : NEW_LINE INDENT if nums [ i ] > nums [ i + 1 ] : NEW_LINE INDENT brokenPoint += 1 NEW_LINE if brokenPoint >= 2 : NEW_LINE INDENT return False NEW_LINE DEDENT if nums [ i - 1 ] <= nums [ i + 1 ] : NEW_LINE INDENT nums [ i ] = nums [ i + 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT nums [ i + 1 ] = nums [ i ] NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE nums = [ 4 , 2 , 3 ] NEW_LINE out = sObj . checkPossibility ( nums ) NEW_LINE print ( out ) NEW_LINE DEDENT
def check ( mid , array , n , K ) : NEW_LINE INDENT count = 0 NEW_LINE sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( array [ i ] > mid ) : NEW_LINE INDENT return False NEW_LINE DEDENT sum += array [ i ] NEW_LINE if ( sum > mid ) : NEW_LINE INDENT count += 1 NEW_LINE sum = array [ i ] NEW_LINE DEDENT DEDENT count += 1 NEW_LINE if ( count <= K ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def solve ( array , n , K ) : NEW_LINE INDENT start = 1 NEW_LINE end = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT end += array [ i ] NEW_LINE DEDENT answer = 0 NEW_LINE while ( start <= end ) : NEW_LINE INDENT mid = int ( ( start + end ) / 2 ) NEW_LINE if ( check ( mid , array , n , K ) ) : NEW_LINE INDENT answer = mid NEW_LINE end = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT DEDENT return answer NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT array = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( array ) NEW_LINE K = 3 NEW_LINE print ( solve ( array , n , K ) ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT m , n = map ( int , input ( ) . split ( ) ) NEW_LINE if m == 0 : break NEW_LINE p = [ int ( input ( ) ) for _ in range ( n ) ] NEW_LINE p . sort ( reverse = True ) NEW_LINE s = [ ] NEW_LINE f = 0 NEW_LINE for i in range ( m ) : NEW_LINE INDENT if p [ i ] == 1 : NEW_LINE INDENT s . append ( p [ i ] ) NEW_LINE DEDENT elif s [ i ] == 2 : NEW_LINE INDENT if f == 1 : s [ i ] = 2 NEW_LINE else : s [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT if s [ i ] < s [ i - 1 ] : NEW_LINE INDENT f = 2 NEW_LINE DEDENT s . append ( p [ i ] ) NEW_LINE DEDENT DEDENT print ( min ( s ) ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT main ( ) NEW_LINE DEDENT
for s in [ * open ( 0 ) ] [ 1 : ] : a , b = map ( int , s . split ( ) ) ; print ( min ( abs ( a - b ) , abs ( b - a ) ) * max ( a , b ) ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE d = { } NEW_LINE c = ' YES ' NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] - b [ i ] > 0 : NEW_LINE INDENT d [ ( a [ i ] - b [ i ] ) ] = a [ i ] - b [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT c = ' NO ' NEW_LINE break NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if a [ i ] - b [ i ] < 0 : NEW_LINE INDENT d [ ( a [ i ] - b [ i ] ) ] = a [ i ] - b [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT d [ ( a [ i ] - b [ i ] ) ] = a [ i ] - b [ i ] NEW_LINE DEDENT DEDENT if d [ ( a [ n - 1 ] ) ] == 0 : NEW_LINE INDENT print ( c ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( c ) NEW_LINE DEDENT DEDENT
def even_or_odd ( N ) : NEW_LINE INDENT l = len ( N ) NEW_LINE if ( N [ l - 1 ] == '0' or N [ l - 1 ] == '2' or N [ l - 1 ] == '4' or N [ l - 1 ] == '6' ) : NEW_LINE INDENT return ( " Even " ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( " Odd " ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT N = "935" NEW_LINE print ( even_or_odd ( N ) ) NEW_LINE DEDENT
n , q = map ( int , input ( ) . split ( ) ) NEW_LINE Q = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT query = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if query [ 0 ] == 0 : NEW_LINE INDENT Q . append ( query [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if len ( Q ) == 1 : NEW_LINE INDENT Q . append ( query [ 1 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT Q . append ( query [ 1 ] ) NEW_LINE DEDENT DEDENT DEDENT for i in range ( q ) : NEW_LINE INDENT if query [ 0 ] == 0 : NEW_LINE INDENT print ( Q [ i ] ) NEW_LINE DEDENT elif query [ 0 ] == 1 : NEW_LINE INDENT print ( Q [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT if len ( Q ) == 2 : NEW_LINE INDENT print ( Q [ i ] * 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT Q . append ( Q [ i ] ) NEW_LINE DEDENT DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE even = 0 NEW_LINE odd = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] % 2 == 0 : NEW_LINE INDENT even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT odd += 1 NEW_LINE DEDENT DEDENT if even == n : NEW_LINE INDENT print ( odd ) NEW_LINE DEDENT elif odd == n : NEW_LINE INDENT print ( even ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( odd + 1 ) NEW_LINE DEDENT
def solve ( X , Y , N , K ) : NEW_LINE INDENT count = [ 0 ] * ( N + 1 ) NEW_LINE sol = 0 NEW_LINE count [ 0 ] = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT count [ i ] = count [ i - 1 ] + abs ( ord ( X [ i - 1 ] ) - ord ( Y [ i - 1 ] ) ) NEW_LINE DEDENT j = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT while ( ( count [ i ] - count [ j ] ) > K ) : NEW_LINE INDENT j += 1 NEW_LINE DEDENT sol = max ( sol , i - j ) NEW_LINE DEDENT return sol NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE X = " abcd " NEW_LINE Y = " bcde " NEW_LINE K = 3 NEW_LINE print ( solve ( X , Y , N , K ) ) NEW_LINE DEDENT
def gcd ( x , y ) : NEW_LINE INDENT if y == 0 : NEW_LINE INDENT return x NEW_LINE DEDENT else : NEW_LINE INDENT return gcd ( y , x % y ) NEW_LINE DEDENT DEDENT def solve ( n , m ) : NEW_LINE INDENT a = [ int ( input ( ) ) for _ in range ( m ) ] NEW_LINE if n == 1 : NEW_LINE INDENT return a [ 0 ] NEW_LINE DEDENT p = a [ 0 ] NEW_LINE for i in range ( 1 , m ) : NEW_LINE INDENT p = gcd ( p , a [ i ] ) NEW_LINE DEDENT return a [ 0 ] % p if p < n else p NEW_LINE DEDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE a = [ int ( input ( ) ) for _ in range ( m ) ] NEW_LINE print ( " Yes " if solve ( n , m ) else " No " ) NEW_LINE
def isPrime ( n , i ) : NEW_LINE INDENT if ( n <= 2 ) : NEW_LINE INDENT return ( 1 ) NEW_LINE DEDENT if ( n == 2 ) : NEW_LINE INDENT return ( 0 ) NEW_LINE DEDENT if ( n % i == 0 ) : NEW_LINE INDENT return ( 0 ) NEW_LINE DEDENT if ( i * i > n ) : NEW_LINE INDENT return ( 1 ) NEW_LINE DEDENT return isPrime ( n , i + 1 ) NEW_LINE DEDENT n = 15 NEW_LINE if ( isPrime ( n , 2 ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def isPrime ( n ) : NEW_LINE INDENT i = 2 NEW_LINE while ( i * i <= n ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def minimumSum ( n ) : NEW_LINE INDENT if ( isPrime ( n ) ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( n % 2 == 0 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( isPrime ( n - 2 ) ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT return 3 NEW_LINE DEDENT n = 27 NEW_LINE print ( minimumSum ( n ) ) NEW_LINE
def isPrime ( x ) : NEW_LINE INDENT i = 2 NEW_LINE while ( i * i <= x ) : NEW_LINE INDENT if ( x % i == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT i += 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def minimumCost ( n ) : NEW_LINE INDENT if ( isPrime ( n ) ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( n % 2 == 1 and isPrime ( n - 2 ) ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT if ( n % 2 == 0 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT return 3 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE print ( minimumCost ( n ) ) NEW_LINE DEDENT
def snoob ( x ) : NEW_LINE INDENT rightOne = 0 NEW_LINE next higherOneBit = 0 NEW_LINE rightOnesPattern = 0 NEW_LINE if ( x > 0 ) : NEW_LINE INDENT rightOne = x & - x NEW_LINE next higherOneBit = x + rightOne NEW_LINE rightOnesPattern = x ^ next higherOneBit NEW_LINE rightOnesPattern = int ( ( rightOnesPattern ) / rightOne ) NEW_LINE rightOnesPattern = int ( ( rightOnesPattern ) / rightOne ) NEW_LINE rightOnesPattern = int ( rightOnesPattern ) NEW_LINE rightOnesPattern = int ( rightOnesPattern ) NEW_LINE rightOnesPattern = int ( rightOnesPattern ) NEW_LINE next = next higherOneBit | rightOnesPattern NEW_LINE DEDENT return next NEW_LINE DEDENT x = 156 NEW_LINE print ( " Next higher number with same " , " number of set bits is " , snoob ( x ) ) NEW_LINE
def rstDivisorSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , i + 1 ) : NEW_LINE INDENT if i % j == 0 : NEW_LINE INDENT if i // j == j : NEW_LINE INDENT sum += j NEW_LINE DEDENT else : NEW_LINE INDENT sum += j + i // j NEW_LINE DEDENT DEDENT DEDENT sum = sum - i NEW_LINE DEDENT return sum NEW_LINE DEDENT n = 4 NEW_LINE print ( rstDivisorSum ( n ) ) NEW_LINE n = 5 NEW_LINE print ( rstDivisorSum ( n ) ) NEW_LINE
import sys NEW_LINE def getMinLength ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE result = sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == 1 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ( count != 0 ) : NEW_LINE INDENT result = min ( result , count ) NEW_LINE DEDENT count = 0 NEW_LINE DEDENT DEDENT return result NEW_LINE DEDENT arr = [ 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( getMinLength ( arr , n ) ) NEW_LINE
def getLevenstein ( inp ) : NEW_LINE INDENT revInput = inp NEW_LINE n = len ( inp ) NEW_LINE dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( inp [ i - 1 ] == revInput [ j - 1 ] ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] , dp [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT res = 10 ** 9 NEW_LINE for i in range ( n , 0 , - 1 ) : NEW_LINE INDENT res = min ( res , dp [ i ] [ j ] ) NEW_LINE if ( i < n ) : NEW_LINE INDENT res = min ( res , dp [ i + 1 ] [ j ] ) NEW_LINE DEDENT if ( i > 0 ) : NEW_LINE INDENT res = min ( res , dp [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT inp = " myfirstgeek func " NEW_LINE print ( getLevenstein ( inp ) ) NEW_LINE
import itertools NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 12000 NEW_LINE minSumProduct = [ 999999 ] * ( LIMIT + 1 ) NEW_LINE for i in range ( 2 , LIMIT * 2 + 1 ) : NEW_LINE INDENT factorize ( i , i , i , 0 , 0 ) NEW_LINE DEDENT items = set ( ) NEW_LINE for i in range ( 2 , LIMIT ) : NEW_LINE INDENT items . add ( minSumProduct [ i ] ) NEW_LINE DEDENT sum = 0 NEW_LINE for n in items : NEW_LINE INDENT sum += n NEW_LINE DEDENT return str ( sum ) NEW_LINE DEDENT def factorize ( n , remain , maxFactor , sum , terms ) : NEW_LINE INDENT if ( remain == 1 ) : NEW_LINE INDENT if ( sum > n ) : NEW_LINE INDENT raise AssertionError ( ) NEW_LINE DEDENT terms += n - sum NEW_LINE if ( terms <= LIMIT and n < minSumProduct [ terms ] ) : NEW_LINE INDENT minSumProduct [ terms ] = n NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT for i in range ( 2 , maxFactor + 1 ) : NEW_LINE INDENT if ( remain % i == 0 ) : NEW_LINE INDENT factor = i NEW_LINE factorize ( n , remain // factor , min ( factor , maxFactor ) , sum + factor , terms + 1 ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ 1 ] NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT b . append ( b [ - 1 ] * i % ( 10 ** 9 + 7 ) ) NEW_LINE DEDENT b . append ( 1 ) NEW_LINE for i in range ( n - 2 ) : NEW_LINE INDENT b . append ( b [ - 1 ] * i % ( 10 ** 9 + 7 ) ) NEW_LINE DEDENT ans = 0 NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT ans += b [ i ] * ( a [ i ] - 1 ) * b [ i + 1 ] NEW_LINE ans %= 10 ** 9 + 7 NEW_LINE DEDENT print ( ans ) NEW_LINE
from collections import deque NEW_LINE def Print ( ) : NEW_LINE INDENT while ( len ( queue ) > 0 ) : NEW_LINE INDENT print ( queue [ 0 ] , end = " " ) NEW_LINE queue . pop ( 0 ) NEW_LINE DEDENT DEDENT def reverseQueue ( q ) : NEW_LINE INDENT if ( len ( q ) > 0 ) : NEW_LINE INDENT return q NEW_LINE DEDENT data = q . pop ( 0 ) NEW_LINE q = reverseQueue ( q ) NEW_LINE q = q + data NEW_LINE return q NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT queue = deque ( ) NEW_LINE queue . append ( 56 ) NEW_LINE queue . append ( 27 ) NEW_LINE queue . append ( 30 ) NEW_LINE queue . append ( 45 ) NEW_LINE queue . append ( 85 ) NEW_LINE queue . append ( 92 ) NEW_LINE queue . append ( 58 ) NEW_LINE queue . append ( 80 ) NEW_LINE queue . append ( 90 ) NEW_LINE queue . append ( 100 ) NEW_LINE queue = reverseQueue ( queue ) NEW_LINE Print ( ) NEW_LINE DEDENT
MAX = 1000000 NEW_LINE prime = [ True for i in range ( MAX + 1 ) ] NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE for p in range ( 2 , MAX + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( 2 * p , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT def findDiff ( arr , n ) : NEW_LINE INDENT min = MAX + 2 NEW_LINE max = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( prime [ arr [ i ] ] == True ) : NEW_LINE INDENT if ( arr [ i ] > max ) : NEW_LINE INDENT max = arr [ i ] NEW_LINE DEDENT if ( arr [ i ] < min ) : NEW_LINE INDENT min = arr [ i ] NEW_LINE DEDENT DEDENT DEDENT return ( - 1 if max == - 1 else max - min ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n = 4 NEW_LINE arr = [ 1 , 2 , 3 , 5 ] NEW_LINE res = findDiff ( arr , n ) NEW_LINE if ( res == - 1 ) : NEW_LINE INDENT print ( " No prime numbers " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Difference is " , res ) NEW_LINE DEDENT DEDENT
from collections import defaultdict NEW_LINE def root ( x ) : NEW_LINE INDENT while P [ x ] != x : NEW_LINE INDENT x = P [ x ] NEW_LINE DEDENT return x NEW_LINE DEDENT def unite ( x , y ) : NEW_LINE INDENT root_x , root_y = root ( x ) , root ( y ) NEW_LINE if root_x != root_y : NEW_LINE INDENT P [ root_x ] = y NEW_LINE DEDENT DEDENT def is_same ( x , y ) : NEW_LINE INDENT return root ( x ) == root ( y ) NEW_LINE DEDENT while True : NEW_LINE INDENT N = int ( input ( ) ) NEW_LINE if N == 0 : NEW_LINE INDENT break NEW_LINE DEDENT P = [ ] NEW_LINE p_num = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT x , y , c = map ( int , input ( ) . split ( " , " ) ) NEW_LINE P . append ( [ x , y , c ] ) NEW_LINE DEDENT P = sorted ( P , key = lambda x : ( x [ 0 ] , x [ 1 ] ) ) NEW_LINE count = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT root = root ( i ) [ 1 ] NEW_LINE if is_same ( root , i [ 0 ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT count += 1 NEW_LINE for j in range ( i [ 1 ] , N ) : NEW_LINE INDENT if P [ j ] [ i [ 0 ] ] != root ( i ) [ 1 ] : NEW_LINE INDENT P [ j ] [ i [ 0 ] ] = P [ j ] [ i [ 1 ] ] NEW_LINE DEDENT DEDENT DEDENT print ( count ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE print ( ( n - 1 ) * ( n + 1 ) [ : n ] ) NEW_LINE
def distinctSubString ( P , N ) : NEW_LINE INDENT S = set ( ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE s = " " NEW_LINE for j in range ( i , N ) : NEW_LINE INDENT pos = ord ( P [ j ] ) - ord ( ' a ' ) NEW_LINE if ( freq [ pos ] == 1 ) : NEW_LINE INDENT break NEW_LINE DEDENT freq [ pos ] = 1 NEW_LINE s += P [ j ] NEW_LINE DEDENT DEDENT return len ( S ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT S = " abba " NEW_LINE N = len ( S ) NEW_LINE print ( distinctSubString ( S , N ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE p = min ( a ) NEW_LINE a += [ p ] NEW_LINE ans , i , temp = 0 , 0 , 0 NEW_LINE while i < n : NEW_LINE INDENT if a [ i ] == p : NEW_LINE INDENT m = - ( - ( i - temp ) // ( k - 1 ) ) NEW_LINE ans += m NEW_LINE temp += m * ( k - 1 ) + 1 NEW_LINE i = temp + 1 NEW_LINE DEDENT else : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT ans += - ( - ( n - temp ) // ( k - 1 ) ) NEW_LINE print ( ans ) NEW_LINE
import sys NEW_LINE INT_MAX = sys . maxsize ; NEW_LINE def minimumAdjacentDifference ( a , n , k ) : NEW_LINE INDENT minDiff = INT_MAX ; NEW_LINE for i in range ( ( 1 << n ) ) : NEW_LINE INDENT cnt = bin ( i ) . count ( '1' ) ; NEW_LINE if ( cnt == n - k ) : NEW_LINE INDENT temp = [ ] ; NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( ( i & ( 1 << j ) ) != 0 ) : NEW_LINE INDENT temp . append ( a [ j ] ) ; NEW_LINE DEDENT DEDENT DEDENT maxDiff = INT_MAX ; NEW_LINE for j in range ( len ( temp ) - 1 ) : NEW_LINE INDENT maxDiff = max ( maxDiff , temp [ j + 1 ] - temp [ j ] ) ; NEW_LINE DEDENT minDiff = min ( minDiff , maxDiff ) ; NEW_LINE DEDENT return minDiff ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 5 ; NEW_LINE k = 2 ; NEW_LINE a = [ 3 , 7 , 8 , 10 , 14 ] ; NEW_LINE print ( minimumAdjacentDifference ( a , n , k ) ) ; NEW_LINE DEDENT
def difference ( arr , n ) : NEW_LINE INDENT largest = arr [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( largest < arr [ i ] ) : NEW_LINE INDENT largest = arr [ i ] NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = largest - arr [ i ] NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 5 , 9 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE difference ( arr , n ) NEW_LINE DEDENT
def countKdivPairs ( A , n , K ) : NEW_LINE INDENT freq = [ 0 for i in range ( K ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ A [ i ] % K ] += 1 NEW_LINE DEDENT sum = freq [ 0 ] * ( freq [ 0 ] - 1 ) // 2 NEW_LINE for i in range ( 1 , K // 2 + 1 ) : NEW_LINE INDENT sum += freq [ i ] * freq [ K - i ] NEW_LINE DEDENT if ( K % 2 == 0 ) : NEW_LINE INDENT sum += ( freq [ K // 2 ] * ( freq [ K // 2 ] - 1 ) // 2 ) NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 2 , 2 , 1 , 7 , 5 , 3 ] NEW_LINE n = len ( A ) NEW_LINE K = 4 NEW_LINE print ( countKdivPairs ( A , n , K ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT s = input ( ) NEW_LINE if s == "0" : NEW_LINE INDENT break NEW_LINE DEDENT s = s . split ( " + " ) NEW_LINE a = s [ 0 ] . split ( " + " ) NEW_LINE b = s [ 1 ] . split ( " + " ) NEW_LINE cnt = 0 NEW_LINE for i in range ( 3 ) : NEW_LINE INDENT if a [ i ] [ 0 ] == b [ i ] [ 1 ] == b [ i ] [ 2 ] : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT if cnt == 3 : NEW_LINE INDENT print ( a [ 0 ] [ 0 ] ) NEW_LINE DEDENT elif cnt == 4 : NEW_LINE INDENT print ( a [ 1 ] [ 0 ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NA " ) NEW_LINE DEDENT DEDENT
def maxOnesIndex ( arr , n ) : NEW_LINE INDENT max_count = 0 NEW_LINE max_index = 0 NEW_LINE prev_zero = - 1 NEW_LINE prev_prev_zero = - 1 NEW_LINE for curr in range ( n ) : NEW_LINE INDENT if ( arr [ curr ] == 0 ) : NEW_LINE INDENT if ( curr - prev_prev_zero > max_count ) : NEW_LINE INDENT max_count = curr - prev_prev_zero NEW_LINE max_index = prev_zero NEW_LINE DEDENT prev_prev_zero = prev_zero NEW_LINE DEDENT prev_prev_zero = prev_zero NEW_LINE prev_zero = curr NEW_LINE DEDENT if ( n - prev_prev_zero > max_count ) : NEW_LINE INDENT max_index = prev_zero NEW_LINE DEDENT return max_index NEW_LINE DEDENT arr = [ 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Index of 0 to be replace replace " , maxOnesIndex ( arr , n ) ) NEW_LINE
import sys NEW_LINE def minimumX ( n , k ) : NEW_LINE INDENT ans = sys . maxsize ; NEW_LINE for rem in range ( k - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( n % rem == 0 ) : NEW_LINE INDENT ans = min ( ans , rem + ( n // rem ) * k ) ; NEW_LINE DEDENT DEDENT return ans ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 4 ; NEW_LINE k = 6 ; NEW_LINE print ( minimumX ( n , k ) ) ; NEW_LINE n = 5 ; NEW_LINE k = 5 ; NEW_LINE print ( minimumX ( n , k ) ) ; NEW_LINE DEDENT
def modulo multiply multiply multiply multiply multiply multiply multiply multiply multiply ( a , b , mod ) : NEW_LINE INDENT res = 0 NEW_LINE a %= mod NEW_LINE while ( b > 0 ) : NEW_LINE INDENT if ( ( b & 1 ) > 0 ) : NEW_LINE INDENT res = ( res + a ) % mod NEW_LINE DEDENT a = ( 2 * a ) % mod NEW_LINE b >>= 1 NEW_LINE DEDENT return res NEW_LINE DEDENT a = 10123465234878998 NEW_LINE b = 657463 vx4564646548794 NEW_LINE m = 10005412336548794 NEW_LINE print ( modulo multiply multiply multiply multiply multiply ( a , b , m ) ) NEW_LINE
import sys NEW_LINE from collections import defaultdict NEW_LINE sys . setrecursionlimit ( 10000000 ) NEW_LINE input = sys . stdin . readline NEW_LINE from collections import deque NEW_LINE def bfs ( node ) : NEW_LINE INDENT if node == ( 1 ) : NEW_LINE INDENT return input ( ) . rstrip ( ) NEW_LINE DEDENT else : NEW_LINE INDENT return input ( ) . rstrip ( ) [ : - 1 ] NEW_LINE DEDENT DEDENT def search ( node ) : NEW_LINE INDENT l = [ ] NEW_LINE start = node NEW_LINE while start != len ( node ) : NEW_LINE INDENT if node [ start ] == 1 : NEW_LINE INDENT l . append ( start ) NEW_LINE start = node [ start ] NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return l NEW_LINE DEDENT def bfs ( node ) : NEW_LINE INDENT l = [ ] NEW_LINE start = node [ 0 ] NEW_LINE while start != len ( node ) : NEW_LINE INDENT if node [ start ] == 1 : NEW_LINE INDENT l . append ( start ) NEW_LINE start = node [ start ] NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT l . append ( start ) NEW_LINE return l NEW_LINE DEDENT def main ( ) : NEW_LINE INDENT while True : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT break NEW_LINE DEDENT l = [ list ( input ( ) . rstrip ( ) ) for _ in range ( n ) ] NEW_LINE node = [ [ None for _ in range ( n ) ] for _ in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT node [ i ] = { } NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT tmp = bfs ( i ) NEW_LINE if tmp in node : NEW_LINE INDENT node [ tmp ] [ 1 ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT node [ tmp ] = [ 1 ] NEW_LINE DEDENT DEDENT search ( node ) NEW_LINE if node [ 0 ] [ 0 ] is not None : NEW_LINE INDENT print ( ' OK ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NG '
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ 0 ] * n NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT if abs ( a [ i ] ) < abs ( a [ i + 1 ] ) : NEW_LINE INDENT b [ i ] = 1 NEW_LINE DEDENT DEDENT print ( 2 * n - 1 ) NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT print ( i , i + 1 ) NEW_LINE DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT print ( b [ i ] , b [ i + 1 ] ) NEW_LINE DEDENT
def checkPalindrome ( str ) : NEW_LINE INDENT l = len ( str ) NEW_LINE l -= 1 NEW_LINE for i in range ( l ) : NEW_LINE INDENT if ( str [ i ] != str [ l ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT l -= 1 NEW_LINE DEDENT return True NEW_LINE DEDENT def printSolution ( partitions ) : NEW_LINE INDENT for i in partitions : NEW_LINE INDENT for j in range ( i ) : NEW_LINE INDENT print ( j , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT def addStrings ( v , s , temp , index ) : NEW_LINE INDENT l = len ( s ) NEW_LINE if ( index == 0 ) : NEW_LINE INDENT temp = [ ] NEW_LINE DEDENT for i in range ( index , l ) : NEW_LINE INDENT s = s + s [ i ] NEW_LINE if ( checkPalindrome ( s ) ) : NEW_LINE INDENT temp . append ( s ) NEW_LINE if ( i + 1 < l ) : NEW_LINE INDENT v = addStrings ( v , s , temp , i + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT v . append ( temp ) NEW_LINE DEDENT DEDENT DEDENT return v NEW_LINE DEDENT def partition ( s , v ) : NEW_LINE INDENT v = addStrings ( v , s , temp , 0 ) NEW_LINE printSolution ( v ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " geeks " NEW_LINE partitions = [ ] NEW_LINE partition ( s , partitions ) NEW_LINE DEDENT
def main ( ) : NEW_LINE INDENT import sys NEW_LINE input = sys . stdin . readline NEW_LINE r , c , a , b , c , d = map ( int , input ( ) . split ( ) ) NEW_LINE mod = 10 ** 9 + 7 NEW_LINE def pow ( n , p , mod = 10 ** 9 + 7 ) : NEW_LINE INDENT res = 1 NEW_LINE while p > 0 : NEW_LINE INDENT if p % 2 == 0 : NEW_LINE INDENT n = n ** 2 % mod NEW_LINE p //= 2 NEW_LINE DEDENT else : NEW_LINE INDENT res = res * n % mod NEW_LINE p -= 1 NEW_LINE DEDENT DEDENT return res % mod NEW_LINE DEDENT def calc ( i , j ) : NEW_LINE INDENT return ( 2 * i + 2 * j + 1 ) % mod NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( calc ( r , c ) ) NEW_LINE DEDENT
def findSubsequence ( arr , n , k ) : NEW_LINE INDENT M = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT M [ arr [ i ] ] = M . get ( arr [ i ] , 0 ) + 1 NEW_LINE DEDENT numCount = [ 0 ] * ( k + 1 ) NEW_LINE for i in range ( k + 1 ) : NEW_LINE INDENT numCount [ i ] = 0 NEW_LINE DEDENT for itr in M : NEW_LINE INDENT if itr <= k : NEW_LINE INDENT break NEW_LINE DEDENT if itr <= k : NEW_LINE INDENT for i in range ( 1 , 1 ) : NEW_LINE INDENT if ( itr * i > k ) : NEW_LINE INDENT break NEW_LINE DEDENT numCount [ itr * i ] += M [ itr ] NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT lcm = 0 NEW_LINE length = 0 NEW_LINE for i in range ( 1 , k + 1 ) : NEW_LINE INDENT if ( numCount [ i ] > length ) : NEW_LINE INDENT length = numCount [ i ] NEW_LINE lcm = i NEW_LINE DEDENT DEDENT if ( lcm == 0 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " LCM = " , lcm , " , Length = " , length , end = " " ) NEW_LINE print ( " Indexes = " , end = " " ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( lcm % arr [ i ] == 0 ) : NEW_LINE INDENT print ( i , end = " " ) NEW_LINE DEDENT DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT k = 14 NEW_LINE arr = [ 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE findSubsequence ( arr , n , k ) NEW_LINE DEDENT
def count_pairs ( a , b , n , m ) : NEW_LINE INDENT odd1 = 0 NEW_LINE even1 = 0 NEW_LINE odd2 = 0 NEW_LINE even2 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] % 2 ) : NEW_LINE INDENT odd1 = odd1 + 1 NEW_LINE DEDENT else : NEW_LINE INDENT even1 = even1 + 1 NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT if ( b [ i ] % 2 ) : NEW_LINE INDENT odd2 = odd2 + 1 NEW_LINE DEDENT else : NEW_LINE INDENT even2 = even2 + 1 NEW_LINE DEDENT DEDENT pairs = min ( odd1 , odd2 ) + min ( even1 , even2 ) NEW_LINE return pairs NEW_LINE DEDENT a = [ 9 , 14 , 6 , 2 , 11 ] NEW_LINE b = [ 8 , 4 , 7 , 20 ] NEW_LINE n = len ( a ) NEW_LINE m = len ( b ) NEW_LINE print ( count_pairs ( a , b , n , m ) ) NEW_LINE
def count_pairs ( a , b , n , m ) : NEW_LINE INDENT odd1 = 0 NEW_LINE even1 = 0 NEW_LINE odd2 = 0 NEW_LINE even2 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] % 2 ) : NEW_LINE INDENT odd1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT even1 += 1 NEW_LINE DEDENT DEDENT for i in range ( m ) : NEW_LINE INDENT if ( b [ i ] % 2 ) : NEW_LINE INDENT odd2 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT even2 += 1 NEW_LINE DEDENT DEDENT pairs = min ( odd1 , even2 ) + min ( odd2 , even1 ) NEW_LINE return pairs NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 9 , 14 , 6 , 2 , 11 ] NEW_LINE b = [ 8 , 4 , 7 , 20 ] NEW_LINE n = len ( a ) NEW_LINE m = len ( b ) NEW_LINE print ( count_pairs ( a , b , n , m ) ) NEW_LINE DEDENT
def maxDiff ( arr , arr_size ) : NEW_LINE INDENT max_diff = arr [ 1 ] - arr [ 0 ] NEW_LINE min_element = arr [ 0 ] NEW_LINE for i in range ( 1 , arr_size ) : NEW_LINE INDENT if ( arr [ i ] - min_element > max_diff ) : NEW_LINE INDENT max_diff = arr [ i ] - min_element NEW_LINE DEDENT if ( arr [ i ] < min_element ) : NEW_LINE INDENT min_element = arr [ i ] NEW_LINE DEDENT DEDENT return max_diff NEW_LINE DEDENT arr = [ 1 , 2 , 6 , 80 , 100 ] NEW_LINE size = len ( arr ) NEW_LINE print ( " Maximum difference is " , maxDiff ( arr , size ) ) NEW_LINE
def binomialCoeff ( n , k ) : NEW_LINE INDENT C = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( min ( i , k ) + 1 ) : NEW_LINE INDENT if ( j == 0 or j == i ) : NEW_LINE INDENT C [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return C [ n ] [ k ] NEW_LINE DEDENT def findMax ( n ) : NEW_LINE INDENT return binomialCoeff ( n , n // 2 ) NEW_LINE DEDENT n = 5 NEW_LINE print ( findMax ( n ) ) NEW_LINE
MAX = 26 NEW_LINE def max_ele ( freq ) : NEW_LINE INDENT max_ele = freq [ 0 ] NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if ( max_ele < freq [ i ] ) : NEW_LINE INDENT max_ele = freq [ i ] NEW_LINE DEDENT DEDENT return max_ele NEW_LINE DEDENT def minimum answermap ( string , length ) : NEW_LINE INDENT freq = [ 0 ] * MAX NEW_LINE for i in range ( length ) : NEW_LINE INDENT freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT maxFreq = max_ele ( freq ) NEW_LINE min now = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if ( freq [ i ] > 0 ) : NEW_LINE INDENT min now += abs ( maxFreq - freq [ i ] ) NEW_LINE DEDENT DEDENT return min now NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT string = " geeksforgeeks " NEW_LINE length = len ( string ) NEW_LINE print ( minimum answermap ( string , length ) ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE s1 = input ( ) NEW_LINE s2 = input ( ) NEW_LINE k = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT k += abs ( ord ( s1 [ i ] ) - ord ( s2 [ i ] ) ) NEW_LINE if i == 0 : NEW_LINE INDENT s1 = s2 [ 0 ] NEW_LINE DEDENT elif i == 1 : NEW_LINE INDENT s1 += 10 NEW_LINE DEDENT elif i == 2 : NEW_LINE INDENT s2 += 10 NEW_LINE DEDENT else : NEW_LINE INDENT s1 += abs ( ord ( s1 [ i ] ) - ord ( s2 [ i ] ) ) NEW_LINE DEDENT DEDENT print ( k ) NEW_LINE
MAX = 32 NEW_LINE pow2 = [ 0 for i in range ( MAX ) ] NEW_LINE visited = [ 0 for i in range ( MAX ) ] NEW_LINE ans = [ ] NEW_LINE def power_2 ( ) : NEW_LINE INDENT ans = 1 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT pow2 [ i ] = ans NEW_LINE ans *= 2 NEW_LINE DEDENT DEDENT def countSetBits ( x ) : NEW_LINE INDENT setBits = 0 NEW_LINE while ( x != 0 ) : NEW_LINE INDENT x = x & ( x - 1 ) NEW_LINE setBits += 1 NEW_LINE DEDENT return setBits NEW_LINE DEDENT def add ( num ) : NEW_LINE INDENT point = 0 NEW_LINE value = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT if ( visited [ i ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT if ( num % 2 == 1 ) : NEW_LINE INDENT value += ( 1 << i ) NEW_LINE DEDENT num //= 2 NEW_LINE DEDENT DEDENT ans . append ( value ) NEW_LINE DEDENT def solve ( n , k ) : NEW_LINE INDENT ans . append ( k ) NEW_LINE countk = countSetBits ( k ) NEW_LINE if ( pow2 [ countk ] < n ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE return NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( pow2 [ countk ] - 1 ) : NEW_LINE INDENT add ( i ) NEW_LINE count += 1 NEW_LINE if ( count == n ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT print ( ans [ i ] , end = " " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 NEW_LINE k = 5 NEW_LINE power_2 ( ) NEW_LINE solve ( n , k ) NEW_LINE DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT ans = max ( range ( - 1000 , 1000 ) , range ( - 1000 , 1000 ) ) NEW_LINE for a in range ( - 1000 , 1000 + 1 ) : NEW_LINE INDENT for b in range ( - 1000 , 1000 + 1 ) : NEW_LINE INDENT num = numberOfConsecutive_primes ( a , b ) NEW_LINE if num > ans : NEW_LINE INDENT ans = num NEW_LINE a = a NEW_LINE b = b NEW_LINE DEDENT DEDENT DEDENT return str ( ans * best ) NEW_LINE DEDENT def numberOfConsecutive_primes ( a , b ) : NEW_LINE INDENT for i in range ( 0 , 1 ) : NEW_LINE INDENT n = i ** 2 + i ** 2 + b ** 2 NEW_LINE if n < 0 or not eulerlib . is_prime ( n ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n , k = map ( int , input ( ) . split ( ) ) NEW_LINE area = k * ( k + 1 ) // 2 NEW_LINE if n > k : NEW_LINE INDENT area += 1 NEW_LINE DEDENT print ( area ) NEW_LINE DEDENT
MAX = 100001 NEW_LINE isPrime = [ 0 ] * MAX NEW_LINE def sieve ( ) : NEW_LINE INDENT p = 2 NEW_LINE while ( p * p < MAX ) : NEW_LINE INDENT if ( isPrime [ p ] == 0 ) : NEW_LINE INDENT for i in range ( p * 2 , MAX , p ) : NEW_LINE INDENT isPrime [ i ] = 1 NEW_LINE DEDENT DEDENT p += 1 NEW_LINE DEDENT return - 1 NEW_LINE DEDENT def findSubset ( a , n ) : NEW_LINE INDENT cnt1 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] == 1 ) : NEW_LINE INDENT cnt1 += 1 NEW_LINE DEDENT DEDENT if ( cnt1 > 0 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if ( ( a [ i ] != 1 ) and ( isPrime [ a [ i ] + 1 ] == 0 ) ) : NEW_LINE INDENT print ( cnt1 + 1 ) NEW_LINE for j in range ( cnt1 ) : NEW_LINE INDENT print ( 1 , end = " " ) NEW_LINE DEDENT print ( a [ i ] ) NEW_LINE return 0 NEW_LINE DEDENT DEDENT DEDENT if ( cnt1 >= 2 ) : NEW_LINE INDENT print ( cnt1 ) NEW_LINE for i in range ( cnt1 ) : NEW_LINE INDENT print ( 1 , end = " " ) NEW_LINE DEDENT print ( ) NEW_LINE return 0 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( isPrime [ a [ i ] + a [ j ] ] == 0 ) : NEW_LINE INDENT print ( cnt1 + 1 ) NEW_LINE for j in range ( cnt1 ) : NEW_LINE INDENT print ( a [ i ] , end = " " ) NEW_LINE DEDENT print ( a [ j ] ) NEW_LINE return 0 NEW_LINE DEDENT DEDENT DEDENT print ( - 1 ) NEW_LINE return - 1 NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sieve ( ) NEW_LINE A = [ 2 , 1 , 1 ] NEW_LINE n = len ( A ) NEW_LINE findSubset ( A
n , r , t = map ( int , input ( ) . split ( ) ) NEW_LINE lst = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE mod = r ** 2 NEW_LINE ans = 0 NEW_LINE f = [ 0 ] * mod NEW_LINE for i in range ( n ) : NEW_LINE INDENT c = lst [ i ] * mod NEW_LINE for j in range ( r ) : NEW_LINE INDENT f [ ( j * c ) % r ] += 1 NEW_LINE DEDENT ans += c NEW_LINE if i : NEW_LINE INDENT f [ ( i * c ) % r ] += 1 NEW_LINE DEDENT DEDENT print ( ans ) NEW_LINE
n = int ( input ( ) ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if s [ 0 ] == " h " or s [ 0 ] == " a " or s [ 0 ] == " i " or s [ 0 ] == " o " : NEW_LINE INDENT if s [ 1 ] == " n " or s [ 1 ] == " o " : NEW_LINE INDENT print ( " a " * ( n - 1 ) + s [ 2 : ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " o " * ( n - 1 ) + s [ 2 : n - 1 ] ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT print ( s * 2 ) NEW_LINE DEDENT DEDENT
def countRotations ( arr , low , high ) : NEW_LINE INDENT if ( high < low ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( high == low ) : NEW_LINE INDENT return low NEW_LINE DEDENT mid = low + ( high - low ) // 2 NEW_LINE if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) : NEW_LINE INDENT return ( mid + 1 ) NEW_LINE DEDENT if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) : NEW_LINE INDENT return mid NEW_LINE DEDENT if ( arr [ high ] > arr [ mid ] ) : NEW_LINE INDENT return countRotations ( arr , low , mid - 1 ) NEW_LINE DEDENT return countRotations ( arr , mid + 1 , high ) NEW_LINE DEDENT arr = [ 15 , 18 , 2 , 3 , 6 , 12 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countRotations ( arr , 0 , n - 1 ) ) NEW_LINE
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE d = 0 NEW_LINE r = n - 1 NEW_LINE while r >= k : NEW_LINE INDENT d += 1 NEW_LINE r -= k NEW_LINE if r == 0 : NEW_LINE INDENT break NEW_LINE DEDENT k += 1 NEW_LINE DEDENT print ( k ) NEW_LINE
def modularSum ( arr , n , m ) : NEW_LINE INDENT if ( n > m ) : NEW_LINE INDENT return True NEW_LINE DEDENT DP = [ 0 for i in range ( m ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( DP [ 0 ] ) : NEW_LINE INDENT return True NEW_LINE DEDENT temp = [ 0 for i in range ( m ) ] NEW_LINE for j in range ( m ) : NEW_LINE INDENT if ( DP [ j ] == 1 ) : NEW_LINE INDENT if ( DP [ ( j + arr [ i ] ) % m ] == 0 ) : NEW_LINE INDENT temp [ ( j + arr [ i ] ) % m ] = 1 NEW_LINE DEDENT DEDENT DEDENT for j in range ( m ) : NEW_LINE INDENT if ( temp [ j ] ) : NEW_LINE INDENT DP [ j ] = 1 NEW_LINE DEDENT DEDENT DP [ arr [ i ] % m ] = 1 NEW_LINE DEDENT return DP [ 0 ] NEW_LINE DEDENT arr = [ 1 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE m = 5 NEW_LINE if ( modularSum ( arr , n , m ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE q = int ( input ( ) ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT b , e , k = map ( int , input ( ) . split ( ) ) NEW_LINE s = 0 NEW_LINE if a [ b - 1 ] == k : NEW_LINE INDENT s += 1 NEW_LINE DEDENT else : NEW_LINE INDENT s -= 1 NEW_LINE DEDENT print ( s ) NEW_LINE DEDENT
n , x = map ( int , input ( ) . split ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE b = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT b [ i ] = a [ i ] NEW_LINE DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT b [ i ] = min ( b [ i ] , b [ i + 1 ] + a [ i ] [ j ] ) NEW_LINE DEDENT DEDENT b [ i ] += x * i NEW_LINE print ( b [ i ] ) NEW_LINE
import sys NEW_LINE from itertools import product NEW_LINE sys . setrecursionlimit ( 10000 ) NEW_LINE while True : NEW_LINE INDENT D , W = map ( int , input ( ) . split ( ) ) NEW_LINE if D == 0 : NEW_LINE INDENT break NEW_LINE DEDENT m = tuple ( [ list ( map ( int , input ( ) . split ( ) ) ) for _ in range ( D ) ] ) NEW_LINE def dfs ( y , x ) : NEW_LINE INDENT if m [ y ] [ x ] == 0 : NEW_LINE INDENT return x NEW_LINE DEDENT for dx , dy in product ( ( - 1 , 0 ) , repeat = 3 ) : NEW_LINE INDENT ny = y + dx NEW_LINE nx = x + dy NEW_LINE if 0 <= ny < D and 0 <= nx < W : NEW_LINE INDENT dfs ( ny , nx ) NEW_LINE DEDENT DEDENT DEDENT dfs ( 2 , 1 ) NEW_LINE print ( max ( m [ y ] [ x ] for y in range ( D ) if y > x ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE if k == 1 : NEW_LINE INDENT print ( n ) NEW_LINE exit ( ) NEW_LINE DEDENT cnt = 0 NEW_LINE x = min ( l ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if l [ i ] == x : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT else : NEW_LINE INDENT x = l [ i ] NEW_LINE DEDENT DEDENT print ( cnt ) NEW_LINE
def Sum ( k , n ) : NEW_LINE INDENT Sum = ( pow ( k , n + 1 ) - pow ( k - 1 , n + 1 ) ) NEW_LINE return Sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE K = 3 NEW_LINE print ( Sum ( K , n ) ) NEW_LINE DEDENT
import numpy as np NEW_LINE dp = np . zeros ( ( 18 , 2 , 162 ) ) ; NEW_LINE def solve ( i , tight , sum_so_far , Sum , number , len ( number ) ) : NEW_LINE INDENT if ( i == len ( number ) ) : NEW_LINE INDENT if ( sum_so_far == Sum ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT ans = dp [ i ] [ 1 ] [ sum_so_far ] ; NEW_LINE if ( ans != - 1 ) : NEW_LINE INDENT return ans ; NEW_LINE DEDENT ans = 0 ; NEW_LINE ntight = 0 ; NEW_LINE nsum_so_far = 0 ; NEW_LINE for currdigit in range ( 10 ) : NEW_LINE INDENT if ( not tight and currdigit > number [ i ] ) : NEW_LINE INDENT break ; NEW_LINE DEDENT ntight = tight or currdigit < number [ i ] ; NEW_LINE nsum_so_far = sum_so_far + ( currdigit - ord ( '0' ) ) ; NEW_LINE ans += solve ( i + 1 , ntight , nsum_so_far , Sum , number , len ( number ) ) ; NEW_LINE DEDENT return ans ; NEW_LINE DEDENT count = 0 ; NEW_LINE sum = 4 ; NEW_LINE number = "100" ; NEW_LINE print ( solve ( 0 , 0 , count , 1 , 2 ) ) ; NEW_LINE
n = int ( input ( ) ) NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT n = input ( ) NEW_LINE if n == '1' : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count = 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE
INT_MIN = - 2 ** 31 NEW_LINE class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT def evenOddLevelDifference ( root ) : NEW_LINE INDENT if ( root == None ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT q = [ ] NEW_LINE q . append ( root ) NEW_LINE level = 0 NEW_LINE evenSum = 0 NEW_LINE oddSum = 0 NEW_LINE while ( len ( q ) != 0 ) : NEW_LINE INDENT size = len ( q ) NEW_LINE level += 1 NEW_LINE while ( size > 0 ) : NEW_LINE INDENT temp = q [ 0 ] NEW_LINE if ( level % 2 == 0 ) : NEW_LINE INDENT evenSum += temp . data NEW_LINE DEDENT else : NEW_LINE INDENT oddSum += temp . data NEW_LINE DEDENT if ( temp . left ) : NEW_LINE INDENT q . append ( temp . left ) NEW_LINE DEDENT if ( temp . right ) : NEW_LINE INDENT q . append ( temp . right ) NEW_LINE DEDENT size -= 1 NEW_LINE DEDENT DEDENT return ( oddSum - evenSum ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT root = Node ( 5 ) NEW_LINE root . left = Node ( 2 ) NEW_LINE root . right = Node ( 6 ) NEW_LINE root . left . left = Node ( 1 ) NEW_LINE root . left . right = Node ( 4 ) NEW_LINE root . left . right . left = Node ( 3 ) NEW_LINE root . right . right = Node ( 8 ) NEW_LINE root . right . right = Node ( 9 ) NEW_LINE root . right . right . left = Node ( 7 ) NEW_LINE print ( " Difference between sums is " , evenOddLevelDifference ( root ) ) NEW_LINE DEDENT
def countSubarrays ( a , n , x ) : NEW_LINE INDENT count = 0 NEW_LINE number = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] > x ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT number += ( count ) * ( count + 1 ) // 2 NEW_LINE count = 0 NEW_LINE DEDENT DEDENT if ( count != 0 ) : NEW_LINE INDENT number += ( count ) * ( count + 1 ) // 2 NEW_LINE DEDENT return number NEW_LINE DEDENT a = [ 3 , 4 , 5 , 6 , 7 , 2 , 10 , 11 ] NEW_LINE n = len ( a ) NEW_LINE k = 5 NEW_LINE print ( countSubarrays ( a , n , k ) ) NEW_LINE
def minCost ( arr , n ) : NEW_LINE INDENT count_even = 0 NEW_LINE count_odd = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT count_even += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_odd += 1 NEW_LINE DEDENT DEDENT return min ( count_even , count_odd ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 4 , 3 , 1 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minCost ( arr , n ) ) NEW_LINE DEDENT
def printLastOccurrence ( a , n ) : NEW_LINE INDENT map = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT map [ a [ i ] ] = i NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT if ( map [ a [ i ] ] == i ) : NEW_LINE INDENT print ( a [ i ] , end = " " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 1 , 5 , 5 , 1 , 6 , 1 ] NEW_LINE n = len ( a ) NEW_LINE printLastOccurrence ( a , n ) NEW_LINE DEDENT
while 1 : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : break NEW_LINE a = [ int ( input ( ) ) for i in range ( n ) ] NEW_LINE ans = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if a [ i ] < 2 : ans += 1 NEW_LINE elif a [ i ] > 0 : ans += 2 NEW_LINE else : ans = ans + 1 NEW_LINE DEDENT print ( ans if ans != 1 else " NA " ) NEW_LINE DEDENT
def countPaths ( m , n ) : NEW_LINE INDENT if ( m == 1 or n == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return countPaths ( m - 1 , n ) + countPaths ( m , n - 1 ) NEW_LINE DEDENT n = 5 NEW_LINE m = 5 NEW_LINE print ( countPaths ( n , m ) ) NEW_LINE
def sumOfAP ( a , d , n ) : NEW_LINE INDENT sum = ( n / 2 ) * ( 2 * a + ( n - 1 ) * d ) NEW_LINE return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 20 NEW_LINE a = 4.5 NEW_LINE d = 1.5 NEW_LINE print ( sumOfAP ( a , d , n ) ) NEW_LINE DEDENT
def countPairs ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr [ i ] * arr [ j ] > arr [ i ] + arr [ j ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 5 , 0 , 3 , 1 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( countPairs ( arr , n ) ) NEW_LINE DEDENT
def ret ( ) : NEW_LINE INDENT global ans NEW_LINE for i in range ( len ( ans ) ) : NEW_LINE INDENT ans [ i ] = 1 NEW_LINE DEDENT DEDENT def ret_1 ( arr , n ) : NEW_LINE INDENT global ans NEW_LINE s = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT s . add ( arr [ i ] ) NEW_LINE DEDENT index = 0 NEW_LINE mp = dict ( ) NEW_LINE for itr in s : NEW_LINE INDENT index += 1 NEW_LINE mp [ itr ] = index NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = mp [ arr [ i ] ] NEW_LINE DEDENT DEDENT def query ( BIT , index , n ) : NEW_LINE INDENT ans = 0 NEW_LINE while ( index > 0 ) : NEW_LINE INDENT ans = max ( ans , BIT [ index ] ) NEW_LINE index -= index & ( - index ) NEW_LINE DEDENT return ans NEW_LINE DEDENT def update ( BIT , index , n ) : NEW_LINE INDENT x = query ( BIT , index - 1 , n ) NEW_LINE value = x + 1 NEW_LINE while ( index <= n ) : NEW_LINE INDENT BIT [ index ] = max ( BIT [ index ] , value ) NEW_LINE index += index & ( - index ) NEW_LINE DEDENT DEDENT def findLISLength ( arr , n ) : NEW_LINE INDENT global ans NEW_LINE global ans NEW_LINE while ( index > 0 ) : NEW_LINE INDENT ans = max ( ans , BIT [ index ] ) NEW_LINE index -= index & ( - index ) NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 6 , 5 , 1 , 3 , 2 , 4 , 8 , 7 ] NEW_LINE n = len ( arr ) NEW_LINE ans = findLISLength ( arr , n ) NEW_LINE print ( ans ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE p = [ list ( map ( int , input ( ) . split ( ) ) ) for i in range ( n ) ] NEW_LINE flag = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if p [ j ] [ 0 ] == p [ j ] [ 1 ] == p [ j ] [ 0 ] : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if flag : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if p [ j ] [ 0 ] == p [ j ] [ 1 ] == p [ j ] [ 2 ] == p [ j ] [ 3 ] : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT if flag : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
import eulerlib NEW_LINE def compute ( ) : NEW_LINE INDENT BASE = 10 NEW_LINE DIGITS = 20 NEW_LINE 18_ val_ max_ pop_n = 9 NEW_LINE MAX_ w = 9 NEW_LINE ans = 0 NEW_LINE for i in range ( DIGITS + 1 ) : NEW_LINE INDENT for j in range ( BASE , mn_n + 1 ) : NEW_LINE INDENT ans += ( ans - 1 ) NEW_LINE DEDENT DEDENT ans = ans * ( max_n + 1 ) NEW_LINE if m < DIGITS + 1 : NEW_LINE INDENT return str ( ans ) NEW_LINE DEDENT dp = [ [ 0 ] * ( m + 1 ) for _ in range ( DIGITS + 1 ) ] NEW_LINE for digits in range ( 1 , len ( dp ) ) : NEW_LINE INDENT for prefix in range ( len ( dp [ digits ] ) ) : NEW_LINE INDENT if dp [ digits ] [ prefix ] > 0 : NEW_LINE INDENT if digit_sum ( prefix ) <= MAX_ w : NEW_LINE INDENT for next_digit in range ( BASE , 1 , - 1 ) : NEW_LINE INDENT ans += ( dp [ digits - 1 ] [ prefix % eulerlib . pow ( BASE , mn_n - 1 ) * BASE + next_digit ] ) NEW_LINE DEDENT DEDENT DEDENT dp [ digits ] [ prefix ] = ans NEW_LINE DEDENT DEDENT return str ( ans [ - 1 ] ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
def f ( s ) : NEW_LINE INDENT if s [ 0 ] == s [ 1 ] : NEW_LINE INDENT if s [ 2 ] == s [ 3 ] : NEW_LINE INDENT return ' YES ' NEW_LINE DEDENT return ' NO ' NEW_LINE DEDENT for i in range ( 3 ) : NEW_LINE INDENT if s [ i ] == s [ i + 1 ] : NEW_LINE INDENT if s [ i + 1 ] == s [ i + 2 ] : NEW_LINE INDENT return ' YES ' NEW_LINE DEDENT return ' NO ' NEW_LINE DEDENT DEDENT return ' NO ' NEW_LINE DEDENT for _ in range ( 1 ) : NEW_LINE INDENT a = input ( ) NEW_LINE b = input ( ) NEW_LINE c = input ( ) NEW_LINE if f ( a ) == f ( b ) == f ( c ) : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
class Solution ( object ) : NEW_LINE INDENT def isToe usedzMatrix ( self , matrix ) : NEW_LINE INDENT for r in range ( 1 , len ( matrix ) ) : NEW_LINE INDENT for c in range ( 1 , len ( matrix [ 0 ] ) ) : NEW_LINE INDENT if matrix [ r - 1 ] [ c - 1 ] != matrix [ r ] [ c ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT sObj = Solution ( ) NEW_LINE matrix = [ [ 1 , 2 , 3 , 4 ] , [ 5 , 1 , 2 , 3 ] , [ 9 , 5 , 1 , 2 ] ] NEW_LINE out = sObj . isToe usedzMatrix ( matrix ) NEW_LINE print ( out ) NEW_LINE DEDENT
import eulerlib , fractions NEW_LINE def compute ( ) : NEW_LINE INDENT LIMIT = 10 ** 9 NEW_LINE ans = 0 NEW_LINE for s in range ( 1 , eulerlib . sqrt ( LIMIT + 1 ) // 3 + 2 ) : NEW_LINE INDENT for t in range ( s - 2 , 0 , - 2 ) : NEW_LINE INDENT if fractions . gcd ( s , t ) == 1 : NEW_LINE INDENT a = s * t NEW_LINE b = ( s * s - t * t ) // 2 NEW_LINE c = ( s * s + t * t ) // 2 NEW_LINE if a * 2 == c - 1 : NEW_LINE INDENT p = c * 3 - 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT ans += p NEW_LINE DEDENT DEDENT if a * 2 == c + 1 : NEW_LINE INDENT p = c * 3 + 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT ans += p NEW_LINE DEDENT DEDENT if b * 2 == c - 1 : NEW_LINE INDENT p = c * 3 - 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT ans += p NEW_LINE DEDENT DEDENT if b * 2 == c + 1 : NEW_LINE INDENT p = c * 3 + 1 NEW_LINE if p <= LIMIT : NEW_LINE INDENT ans += p NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return str ( ans ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT print ( compute ( ) ) NEW_LINE DEDENT
while True : NEW_LINE INDENT n , t , l , b = map ( int , input ( ) . split ( ) ) NEW_LINE if n == 0 : break NEW_LINE f = [ int ( input ( ) ) for _ in range ( n ) ] NEW_LINE p = [ int ( input ( ) ) for _ in range ( l ) ] NEW_LINE dp = [ [ 0.0 ] * ( t + 1 ) for _ in range ( n + 1 ) ] NEW_LINE dp [ 0 ] [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : dp [ i ] [ 0 ] = 1 NEW_LINE for j in range ( 1 , t + 1 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for k in range ( max ( 0 , t - i ) , min ( l , i + 1 ) ) : NEW_LINE INDENT dp [ i ] [ j ] += dp [ i - 1 ] [ j - k ] NEW_LINE DEDENT DEDENT DEDENT print ( sum ( dp [ n ] ) / 6 ) NEW_LINE DEDENT
t = int ( input ( ) ) NEW_LINE for _ in range ( t ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE a = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE od_sum = 0 NEW_LINE ev_sum = 0 NEW_LINE for i in a : NEW_LINE INDENT if i % 2 == 0 : NEW_LINE INDENT od_sum += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ev_sum += 1 NEW_LINE DEDENT DEDENT if od_sum % 2 == 1 and ev_sum >= 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT elif od_sum >= 2 or ev_sum >= 2 : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
from math import ceil NEW_LINE def min PriorityQueue ( H , n , K ) : NEW_LINE INDENT inser = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT diff = abs ( H [ i ] - H [ i - 1 ] ) NEW_LINE if ( diff <= K ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT inser += ceil ( diff / K ) - 1 NEW_LINE DEDENT DEDENT return inser NEW_LINE DEDENT H = [ 2 , 4 , 8 , 16 ] NEW_LINE K = 3 NEW_LINE n = len ( H ) NEW_LINE print ( min PriorityQueue ( H , n , K ) ) NEW_LINE
def countWords ( str , l ) : NEW_LINE INDENT count = 1 NEW_LINE if l == 1 : NEW_LINE INDENT return count NEW_LINE DEDENT if ( str [ 0 ] == str [ 1 ] ) : NEW_LINE INDENT count *= 1 NEW_LINE DEDENT else : NEW_LINE INDENT count *= 2 NEW_LINE DEDENT for j in range ( 1 , l - 1 ) : NEW_LINE INDENT if ( str [ j ] == str [ j - 1 ] and str [ j ] == str [ j + 1 ] ) : NEW_LINE INDENT count *= 1 NEW_LINE DEDENT elif ( str [ j ] == str [ j - 1 ] or str [ j ] == str [ j + 1 ] or str [ j - 1 ] == str [ j + 1 ] ) : NEW_LINE INDENT count *= 2 NEW_LINE DEDENT else : NEW_LINE INDENT count *= 3 NEW_LINE DEDENT DEDENT if ( str [ l - 1 ] == str [ l - 2 ] ) : NEW_LINE INDENT count *= 1 NEW_LINE DEDENT else : NEW_LINE INDENT count *= 2 NEW_LINE DEDENT return count NEW_LINE DEDENT str = " abc " NEW_LINE l = len ( str ) NEW_LINE print ( countWords ( str , l ) ) NEW_LINE
n = int ( input ( ) ) NEW_LINE arr = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE evenlist = [ ] NEW_LINE oddlist = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT evenlist . append ( arr [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT oddlist . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT evenlist . sort ( ) NEW_LINE oddlist . reverse ( ) NEW_LINE if ( len ( evenlist ) % 2 == 0 ) : NEW_LINE INDENT max = evenlist [ 0 ] NEW_LINE DEDENT else : NEW_LINE INDENT max = oddlist [ 0 ] NEW_LINE DEDENT for i in range ( len ( oddlist ) ) : NEW_LINE INDENT if ( len ( evenlist ) % 2 == 0 ) : NEW_LINE INDENT max += ( oddlist [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT max += evenlist [ i ] NEW_LINE DEDENT DEDENT print ( max ) NEW_LINE
def getPerfectSquares ( n ) : NEW_LINE INDENT perfectSquares = [ ] NEW_LINE current = 1 NEW_LINE i = 1 NEW_LINE while ( current <= n ) : NEW_LINE INDENT perfectSquares . append ( current ) NEW_LINE current = i ** 2 NEW_LINE i += 1 NEW_LINE DEDENT return perfectSquares NEW_LINE DEDENT def maxPairSum ( arr ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE max , secondMax = 0 , 0 NEW_LINE if ( arr [ 0 ] > arr [ 1 ] ) : NEW_LINE INDENT max = arr [ 0 ] NEW_LINE secondMax = arr [ 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT max = arr [ 1 ] NEW_LINE secondMax = arr [ 0 ] NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT if ( arr [ i ] > max ) : NEW_LINE INDENT secondMax = max NEW_LINE max = arr [ i ] NEW_LINE DEDENT elif ( arr [ i ] > secondMax ) : NEW_LINE INDENT secondMax = arr [ i ] NEW_LINE DEDENT DEDENT return ( max + secondMax ) NEW_LINE DEDENT def countPairsWith ( n , perfectSquares ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( len ( perfectSquares ) ) : NEW_LINE INDENT temp = perfectSquares [ i ] - n NEW_LINE if ( temp > n and ( temp in nums ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT def countPairs ( arr ) : NEW_LINE INDENT i , n = len ( arr ) NEW_LINE max = maxPairSum ( arr ) NEW_LINE perfectSquares = getPerfectSquares ( max ) NEW_LINE nums = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT nums [ i ] = arr [ i ] NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT count += countPairsWith ( arr [ i ] , perfectSquares , nums ) NEW_LINE DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 2 , 3 , 6 , 10 , 20 ] NEW_LINE
import math NEW_LINE def findHypotenuse ( side1 , side2 ) : NEW_LINE INDENT h = math . sqrt ( ( side1 * side1 ) + ( side2 * side2 ) ) NEW_LINE return h NEW_LINE DEDENT side1 = 3 NEW_LINE side2 = 4 NEW_LINE print ( round ( findHypotenuse ( side1 , side2 ) , 2 ) ) NEW_LINE
def printTwoOdd ( arr , size ) : NEW_LINE INDENT xor2 = arr [ 0 ] NEW_LINE n = size - 2 NEW_LINE x = 0 NEW_LINE y = 0 NEW_LINE for i in range ( 1 , size ) : NEW_LINE INDENT xor2 = xor2 ^ arr [ i ] NEW_LINE DEDENT set_bit_no = xor2 & ~ ( xor2 - 1 ) NEW_LINE for i in range ( size ) : NEW_LINE INDENT if ( ( arr [ i ] & set_bit_no ) > 0 ) : NEW_LINE INDENT x = x ^ arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT y = y ^ arr [ i ] NEW_LINE DEDENT DEDENT print ( " The two ODD elements are " , x , " & " , y ) NEW_LINE DEDENT arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE printTwoOdd ( arr , arr_size ) NEW_LINE
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE l = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE l = l + l NEW_LINE p = 0 NEW_LINE q = 0 NEW_LINE if l [ 0 ] > l [ 1 ] : NEW_LINE INDENT p = l [ 1 ] NEW_LINE q = l [ 0 ] NEW_LINE DEDENT if l [ 1 ] < l [ 0 ] : NEW_LINE INDENT q = l [ 0 ] NEW_LINE DEDENT if l [ 0 ] > l [ 1 ] : NEW_LINE INDENT p = l [ 1 ] NEW_LINE DEDENT if l [ 0 ] < l [ 1 ] : NEW_LINE INDENT q = l [ 0 ] NEW_LINE DEDENT if l [ 1 ] > l [ 0 ] : NEW_LINE INDENT q = l [ 1 ] NEW_LINE DEDENT if l [ 0 ] == l [ 1 ] : NEW_LINE INDENT print ( p + q ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( p + q ) NEW_LINE DEDENT DEDENT
a = input ( ) NEW_LINE b = input ( ) NEW_LINE if a == " m n " or a == " e " or a == " f " or a == " g " or a == " h " or a == " i " or a == " j " or a == " k " or a == " l " or a == " e " or a == " f " : NEW_LINE INDENT if b == " k " or b == " l " : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if b == " k " or b == " l " : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT
n = int ( input ( ) ) NEW_LINE OO = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT s = input ( ) NEW_LINE if " OO " in s : NEW_LINE INDENT OO . append ( i ) NEW_LINE DEDENT else : NEW_LINE INDENT OO . append ( i ) NEW_LINE DEDENT DEDENT if len ( OO ) == 1 : NEW_LINE INDENT print ( " YES " ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if OO [ i ] == 1 : NEW_LINE INDENT print ( s [ i ] ) NEW_LINE DEDENT DEDENT DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = None NEW_LINE DEDENT DEDENT def printList ( head ) : NEW_LINE INDENT if ( head == None ) : NEW_LINE INDENT return NEW_LINE DEDENT temp = head NEW_LINE while ( True ) : NEW_LINE INDENT print ( temp . data , end = " - > " ) NEW_LINE temp = temp . next NEW_LINE if ( temp != head ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT print ( head . data ) NEW_LINE DEDENT def deleteK ( head_ref , k ) : NEW_LINE INDENT head = head_ref NEW_LINE if ( head == None ) : NEW_LINE INDENT return None NEW_LINE DEDENT curr = head NEW_LINE prev = None NEW_LINE while ( True ) : NEW_LINE INDENT if ( curr . next == head and curr == head ) : NEW_LINE INDENT break NEW_LINE DEDENT printList ( head ) NEW_LINE for i in range ( k ) : NEW_LINE INDENT prev = curr NEW_LINE curr = curr . next NEW_LINE DEDENT if ( curr == head ) : NEW_LINE INDENT prev = head NEW_LINE while ( prev . next != head ) : NEW_LINE INDENT prev = prev . next NEW_LINE DEDENT head = curr . next NEW_LINE prev . next = head NEW_LINE head_ref = head NEW_LINE DEDENT elif ( curr . next == head ) : NEW_LINE INDENT prev . next = head NEW_LINE DEDENT else : NEW_LINE INDENT prev . next = curr . next NEW_LINE DEDENT DEDENT return head NEW_LINE DEDENT def insertNode ( head_ref , x ) : NEW_LINE INDENT head = head_ref NEW_LINE temp = Node ( x ) NEW_LINE if ( head == None ) : NEW_LINE INDENT temp . next = temp NEW_LINE DEDENT head_ref = temp NEW_LINE return head NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT head = None NEW_LINE head = insertNode ( head , 1 ) NEW_LINE head = insertNode ( head , 2 ) NEW_LINE head = insertNode ( head , 3 ) NEW_LINE head = insertNode ( head , 4 ) NEW_LINE head = insert
def steps ( cur , x , n ) : NEW_LINE INDENT if ( x == 0 ) : NEW_LINE INDENT return MAX_VALUE NEW_LINE DEDENT if ( x > 0 ) : NEW_LINE INDENT return abs ( ( n - cur ) / x ) NEW_LINE DEDENT else : NEW_LINE INDENT return abs ( ( cur - 1 ) / x ) NEW_LINE DEDENT DEDENT def countSteps ( curx , cury , n , m ) : NEW_LINE INDENT count = 0 NEW_LINE k = len ( moves ) NEW_LINE for i in range ( k ) : NEW_LINE INDENT x = moves [ i ] [ 0 ] NEW_LINE y = moves [ i ] [ 1 ] NEW_LINE stepct = min ( steps ( curx , x , n ) , steps ( cury , y , m ) ) NEW_LINE count += stepct NEW_LINE curx += stepct * x NEW_LINE cury += stepct * y NEW_LINE DEDENT return count NEW_LINE DEDENT n = 4 NEW_LINE m = 5 NEW_LINE x = 1 NEW_LINE y = 1 NEW_LINE moves = [ [ 1 , 1 ] , [ 1 , 1 ] , [ 0 , - 2 ] ] NEW_LINE print ( countSteps ( x , y , n , m , moves ) ) NEW_LINE
x , y , z = map ( int , input ( ) . split ( ) ) NEW_LINE if z > x : NEW_LINE INDENT x , y = z , x NEW_LINE DEDENT if y > y : NEW_LINE INDENT y , x = y , x NEW_LINE DEDENT print ( max ( abs ( x - y ) , abs ( y - z ) ) ) NEW_LINE
def cntSubArr ( arr , n ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT curr_gcd = 0 NEW_LINE for j in range ( i , n ) : NEW_LINE INDENT curr_gcd = gcd ( curr_gcd , arr [ j ] ) NEW_LINE ans += 1 if ( curr_gcd == 1 ) else 0 NEW_LINE DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( cntSubArr ( arr , n ) ) NEW_LINE DEDENT
def isVowel ( c ) : NEW_LINE INDENT if ( c == ' a ' or c == ' e ' or c == ' i ' or c == ' o ' or c == ' u ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT def isVowelPrime ( str , n ) : NEW_LINE INDENT prime = [ True ] * n NEW_LINE prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , n ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE INDENT for i in range ( p * p , n , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT if ( isVowel ( str [ i ] ) and not prime [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT str = " geeksforgeeks " NEW_LINE n = len ( str ) NEW_LINE if ( isVowelPrime ( str , n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT
def min step > 0 : NEW_LINE INDENT N = len ( str ) NEW_LINE dp = [ [ 0 for i in range ( N + 1 ) ] for j in range ( N + 1 ) ] NEW_LINE for i in range ( N + 1 ) : NEW_LINE INDENT for j in range ( N + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = 0 NEW_LINE DEDENT DEDENT for l in range ( 1 , N + 1 ) : NEW_LINE INDENT for i in range ( N + 1 ) : NEW_LINE INDENT for j in range ( N + 1 ) : NEW_LINE INDENT if ( l == 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] NEW_LINE if ( str [ i ] == str [ i + 1 ] ) : NEW_LINE INDENT dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) NEW_LINE DEDENT DEDENT for K in range ( i + 2 , j + 1 ) : NEW_LINE INDENT if ( str [ i ] == str [ K ] ) : NEW_LINE INDENT dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) NEW_LINE DEDENT DEDENT DEDENT DEDENT DEDENT return dp [ 0 ] [ N - 1 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = "255349" NEW_LINE print ( min step > 0 ) NEW_LINE DEDENT
limit = 10000000 NEW_LINE position = [ 0 ] * ( limit + 1 ) NEW_LINE def sieve ( ) : NEW_LINE INDENT position [ 0 ] = - 1 NEW_LINE position [ 1 ] = - 1 NEW_LINE pos = 0 NEW_LINE for i in range ( 2 , limit + 1 ) : NEW_LINE INDENT if ( position [ i ] == 0 ) : NEW_LINE INDENT position [ i ] = 1 NEW_LINE for j in range ( i * 2 , limit + 1 , i ) : NEW_LINE INDENT position [ j ] = - 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT sieve ( ) NEW_LINE n = 11 NEW_LINE print ( position [ n ] ) NEW_LINE
DP_s = 9 NEW_LINE def getNumMonotone ( Len ) : NEW_LINE INDENT DP = [ [ 0 for i in range ( DP_s ) ] for j in range ( Len ) ] NEW_LINE for i in range ( DP_s ) : NEW_LINE INDENT DP [ 0 ] [ i ] = i + 1 NEW_LINE DEDENT for i in range ( Len ) : NEW_LINE INDENT DP [ i ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , Len ) : NEW_LINE INDENT for j in range ( 1 , DP_s ) : NEW_LINE INDENT DP [ i ] [ j ] = ( DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT return DP [ Len - 1 ] [ DP_s - 1 ] NEW_LINE DEDENT print ( getNumMonotone ( 10 ) ) NEW_LINE
DP_s = 9 NEW_LINE def getNumMonotone ( Len ) : NEW_LINE INDENT DP = [ [ 0 for i in range ( DP_s ) ] for j in range ( Len ) ] NEW_LINE for i in range ( DP_s ) : NEW_LINE INDENT DP [ 0 ] [ i ] = i + 1 NEW_LINE DEDENT for i in range ( Len ) : NEW_LINE INDENT DP [ i ] [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , Len ) : NEW_LINE INDENT for j in range ( 1 , DP_s ) : NEW_LINE INDENT DP [ i ] [ j ] = ( DP [ i - 1 ] [ j ] + DP [ i ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT return DP [ Len - 1 ] [ DP_s - 1 ] NEW_LINE DEDENT print ( getNumMonotone ( 10 ) ) NEW_LINE
def maxCost ( a , n , l , r ) : NEW_LINE INDENT mx = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT mx = max ( mx , a [ i ] ) NEW_LINE DEDENT count = [ 0 ] * ( mx + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT count [ a [ i ] ] += 1 NEW_LINE DEDENT res = [ 0 ] * ( mx + 1 ) NEW_LINE res [ 0 ] = 0 NEW_LINE l = min ( l , r ) NEW_LINE for num in range ( 1 , mx + 1 ) : NEW_LINE INDENT k = max ( num - l - 1 , 0 ) NEW_LINE res [ num ] = max ( res [ num - 1 ] , num * count [ num ] + res [ k ] ) NEW_LINE DEDENT return res [ mx ] NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 2 , 1 , 2 , 3 , 2 , 2 , 1 ] NEW_LINE l = 1 NEW_LINE r = 1 NEW_LINE n = len ( a ) NEW_LINE print ( maxCost ( a , n , l , r ) ) NEW_LINE DEDENT
for _ in range ( int ( input ( ) ) ) : NEW_LINE INDENT n , m = map ( int , input ( ) . split ( ) ) NEW_LINE lst = [ input ( ) for i in range ( n ) ] NEW_LINE if ' R ' in lst : NEW_LINE INDENT print ( ' YES ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' NO ' ) NEW_LINE DEDENT DEDENT
PI = 3.1415926535 NEW_LINE def findArea ( r ) : NEW_LINE INDENT return PI * pow ( r , 2 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( " Area is " , findArea ( 5 ) ) NEW_LINE DEDENT
n , k = map ( int , input ( ) . split ( ) ) NEW_LINE yp = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT yp . append ( [ ] ) NEW_LINE DEDENT yk = list ( map ( int , input ( ) . split ( ) ) ) NEW_LINE for i in range ( 2 * k ) : NEW_LINE INDENT yk [ yk [ i ] [ 0 ] - 1 ] . append ( yk [ i ] [ 1 ] - 1 ) NEW_LINE DEDENT ans = 0 NEW_LINE vis = [ - 1 ] * n NEW_LINE def dfs ( x ) : NEW_LINE INDENT vis [ x ] = 1 NEW_LINE p = [ ] NEW_LINE p . append ( x ) NEW_LINE for y in yk [ x ] : NEW_LINE INDENT if vis [ y ] : NEW_LINE INDENT continue NEW_LINE DEDENT dfs ( y ) NEW_LINE DEDENT ans += min ( k - p . count ( x ) , 2 * k - p . count ( x ) ) NEW_LINE DEDENT for i in range ( n - 1 ) : NEW_LINE INDENT x , y = map ( int , input ( ) . split ( ) ) NEW_LINE y -= 1 NEW_LINE yk [ x ] . append ( y ) NEW_LINE DEDENT dfs ( 0 ) NEW_LINE print ( ans ) NEW_LINE
def nthTerm ( N ) : NEW_LINE INDENT return abs ( N * ( ( N - 1 ) * ( N - 3 ) * ( N - 5 ) ) ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 6 NEW_LINE print ( nthTerm ( N ) ) NEW_LINE DEDENT
def weight ( X ) : NEW_LINE INDENT return ( 2 * X ) NEW_LINE DEDENT X = 35 NEW_LINE print ( weight ( X ) ) NEW_LINE
V = 4 NEW_LINE def countwalks ( graph , u , v , k ) : NEW_LINE INDENT if ( k == 0 and u == v ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( k == 1 and graph [ u ] [ v ] == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( k <= 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( V ) : NEW_LINE INDENT if ( graph [ u ] [ i ] == 1 ) : NEW_LINE INDENT count += countwalks ( graph , i , v , k - 1 ) NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT graph = [ [ 0 , 1 , 1 , 1 ] , [ 0 , 0 , 0 , 1 ] , [ 0 , 0 , 0 , 1 ] , [ 0 , 0 , 0 , 1 ] , [ 0 , 0 , 0 , 0 ] ] NEW_LINE u = 0 NEW_LINE v = 3 NEW_LINE k = 2 NEW_LINE KPaths = [ ] NEW_LINE print ( countwalks ( graph , u , v , k ) ) NEW_LINE
from math import log10 , floor NEW_LINE def findDigits ( n , b ) : NEW_LINE INDENT if ( n < 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( n <= 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT M_ pi = 3.141592 NEW_LINE M_E = li10 ( n / M_E ) + log10 ( 2 * M_ pi * n ) / 2.0 NEW_LINE return floor ( log10 ( b ) + 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( findDigits ( 4 , 16 ) ) NEW_LINE print ( findDigits ( 5 , 8 ) ) NEW_LINE print ( findDigits ( 12 , 16 ) ) NEW_LINE print ( findDigits ( 19 , 13 ) ) NEW_LINE DEDENT
import sys NEW_LINE def solve ( ) : NEW_LINE INDENT n , q = map ( int , sys . stdin . readline ( ) . split ( ) ) NEW_LINE q = 0 NEW_LINE d = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( q ) : NEW_LINE INDENT query = sys . stdin . readline ( ) . rstrip ( ) NEW_LINE if query [ 0 ] == '0' : NEW_LINE INDENT d [ int ( query [ 1 ] ) ] = 1 NEW_LINE while query [ 1 ] == '0' : NEW_LINE INDENT query . pop ( ) NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT ans = 0 NEW_LINE count = 0 NEW_LINE for query in d : NEW_LINE INDENT ans += query [ 1 ] NEW_LINE count += 1 NEW_LINE DEDENT print ( ans ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT solve ( ) NEW_LINE DEDENT
import sys NEW_LINE import collections NEW_LINE input_methods = [ ' clipboard ' , ' file ' , ' key ' ] NEW_LINE using_method = 0 NEW_LINE input_method = input_methods [ using_method ] NEW_LINE tin = lambda : map ( int , input ( ) . split ( ) ) NEW_LINE lin = lambda : list ( tin ( ) ) NEW_LINE mod = 1000000007 NEW_LINE def main ( ) : NEW_LINE INDENT n = int ( input ( ) ) NEW_LINE if n == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT if n % 2 == 1 : NEW_LINE INDENT return ( ( n // 2 ) * 2 ) % mod NEW_LINE DEDENT else : NEW_LINE INDENT return ( ( 2 * ( n // 2 ) ) % mod ) NEW_LINE DEDENT DEDENT isTest = False NEW_LINE def pa ( v ) : NEW_LINE INDENT if isTest : NEW_LINE INDENT print ( v ) NEW_LINE DEDENT DEDENT def input_clipboard ( ) : NEW_LINE INDENT import clipboard NEW_LINE input_text = clipboard . get ( ) NEW_LINE input_l = input_text . splitlines ( ) NEW_LINE for l in input_l : NEW_LINE INDENT yield l NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT if sys . platform == ' ios ' : NEW_LINE INDENT if input_method == input_methods [ 0 ] : NEW_LINE INDENT ic = input_clipboard ( ) NEW_LINE input = lambda : ic . __next__ ( ) NEW_LINE DEDENT elif sys . platform == ' ios ' : NEW_LINE INDENT sys . stdin = open ( ' inputFile . txt ' ) NEW_LINE DEDENT else : NEW_LINE INDENT pass NEW_LINE DEDENT isTest = True NEW_LINE DEDENT else : NEW_LINE INDENT pass NEW_LINE DEDENT DEDENT isTest = False NEW_LINE DEDENT
from math import ceil NEW_LINE while 1 : NEW_LINE INDENT a = [ int ( input ( ) ) for i in range ( 5 ) ] NEW_LINE if a [ 0 ] == 0 : break NEW_LINE b = [ int ( input ( ) ) for i in range ( 5 ) ] NEW_LINE d = ceil ( a [ 1 ] / a [ 0 ] ) NEW_LINE c = 0 NEW_LINE if d == 0 : c += 1 NEW_LINE while 1 : NEW_LINE INDENT if d > a [ 0 ] : d -= 1 NEW_LINE if b [ d ] > a [ 0 ] : break NEW_LINE c += 1 NEW_LINE if a [ 0 ] * a [ 1 ] <= a [ 1 ] : c += 1 NEW_LINE else : break NEW_LINE DEDENT print ( c ) NEW_LINE DEDENT
def ReverseString ( s ) : NEW_LINE INDENT arr = s NEW_LINE for i in range ( int ( len ( arr ) / 2 ) ) : NEW_LINE INDENT arr [ i ] , arr [ len ( arr ) - i - 1 ] = arr [ len ( arr ) - i - 1 ] , arr [ i ] NEW_LINE DEDENT return arr NEW_LINE DEDENT def binary_ nd ( m ) : NEW_LINE INDENT while ( m ) : NEW_LINE INDENT tmp = m % 2 NEW_LINE s += str ( tmp ) NEW_LINE m = int ( m / 2 ) NEW_LINE DEDENT s = ReverseString ( s ) NEW_LINE DEDENT def find_ //= ( m ) : NEW_LINE INDENT binary_ nd ( m ) NEW_LINE s1 = " " NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ j ] == '1' ) : NEW_LINE INDENT s1 += "10" NEW_LINE DEDENT else : NEW_LINE INDENT s1 += "01" NEW_LINE DEDENT DEDENT s = s1 NEW_LINE s1 = " " NEW_LINE DEDENT return ord ( s [ i ] ) - ord ( '0' ) NEW_LINE DEDENT m = 5 NEW_LINE n = 2 NEW_LINE i = 8 NEW_LINE print ( find_ //= ( m ) ) NEW_LINE
def countSubsets ( arr , n ) : NEW_LINE INDENT us = set ( ) NEW_LINE even_count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT us . add ( arr [ i ] ) NEW_LINE DEDENT DEDENT even_count = len ( us ) NEW_LINE return ( pow ( 2 , even_count ) - 1 ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 2 , 1 , 9 , 2 , 6 , 5 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( " Number of subsets = " , countSubsets ( arr , n ) ) NEW_LINE DEDENT
MAX = 1000 NEW_LINE f = [ 0 for i in range ( MAX ) ] NEW_LINE def fib ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( n == 1 or n == 2 ) : NEW_LINE INDENT f [ n ] = 1 NEW_LINE return ( f [ n ] ) NEW_LINE DEDENT if ( f [ n ] != 0 ) : NEW_LINE INDENT return f [ n ] NEW_LINE DEDENT k = 0 NEW_LINE if ( n & 1 ) : NEW_LINE INDENT k = ( n + 1 ) // 2 NEW_LINE DEDENT else : NEW_LINE INDENT k = n // 2 NEW_LINE DEDENT if ( n & 1 ) : NEW_LINE INDENT f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) NEW_LINE DEDENT else : NEW_LINE INDENT f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) NEW_LINE DEDENT return f [ n ] NEW_LINE DEDENT def gcd ( a , b ) : NEW_LINE INDENT if ( a == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT def findLCMFibonacci ( a , b ) : NEW_LINE INDENT return ( ( fib ( a ) * fib ( b ) ) / fib ( gcd ( a , b ) ) ) NEW_LINE DEDENT a = 3 NEW_LINE b = 12 NEW_LINE print ( findLCMFibonacci ( a , b ) ) NEW_LINE
def findNumbers ( n , w ) : NEW_LINE INDENT x = 0 ; NEW_LINE sum = 0 ; NEW_LINE if ( w >= 0 and w <= 8 ) : NEW_LINE INDENT x = 9 - w ; NEW_LINE DEDENT elif ( w >= - 9 and w <= - 1 ) : NEW_LINE INDENT x = 10 + w ; NEW_LINE DEDENT sum = pow ( 10 , n - 2 ) ; NEW_LINE sum = ( x * sum ) ; NEW_LINE return sum ; NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 ; NEW_LINE w = 4 ; NEW_LINE print ( findNumbers ( n , w ) ) ; NEW_LINE DEDENT
def findKthChar ( s , k ) : NEW_LINE INDENT l = len ( s ) NEW_LINE i = 0 NEW_LINE total_len = 0 NEW_LINE while i < l : NEW_LINE INDENT if s [ i ] . is lower ( ) == True : NEW_LINE INDENT total_len += 1 NEW_LINE if total_len == k : NEW_LINE INDENT return s [ i ] NEW_LINE DEDENT i += 1 NEW_LINE DEDENT else : NEW_LINE INDENT n = 0 NEW_LINE while i < l and s [ i ] . isupper ( ) == False : NEW_LINE INDENT n = n * 10 + ( ord ( s [ i ] ) - ord ( '0' ) ) NEW_LINE i += 1 NEW_LINE DEDENT next_total_len = total_len * n NEW_LINE if k <= next_total_len : NEW_LINE INDENT pos = k % total_len NEW_LINE if pos == 0 : NEW_LINE INDENT pos = total_len NEW_LINE DEDENT return findKthChar ( s , pos ) NEW_LINE DEDENT else : NEW_LINE INDENT total_len = next_total_len NEW_LINE DEDENT DEDENT DEDENT return ' ' NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " ab2c3" NEW_LINE k = 5 NEW_LINE print ( findKthChar ( s , k ) ) NEW_LINE DEDENT
def countNon Fstr ( str ) : NEW_LINE INDENT n = len ( str ) NEW_LINE return int ( n * ( n + 1 ) / 2 ) NEW_LINE DEDENT s = " abcde " NEW_LINE print ( countNon Fstr ( s ) ) NEW_LINE
