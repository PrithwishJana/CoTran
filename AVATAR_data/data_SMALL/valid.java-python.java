public class Improve { static int calculateSquareSum ( int n ) { if ( n <= 0 ) return 0 ; int fibo [ ] = new int [ n + 1 ] ; fibo [ 0 ] = 0 ; fibo [ 1 ] = 1 ; int sum = ( fibo [ 0 ] * fibo [ 0 ] ) + ( fibo [ 1 ] * fibo [ 1 ] ) ; for ( int i = 2 ; i <= n ; i ++ ) { fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ; sum += ( fibo [ i ] * fibo [ i ] ) ; } return sum ; } public static void main ( String args [ ] ) { int n = 6 ; System . out . println ( " Sum ▁ of ▁ squares ▁ of ▁ Fibonacci ▁ numbers ▁ is ▁ : ▁ " + calculateSquareSum ( n ) ) ; } }
import java . util . Scanner ; public class NewProblem { public static void main ( String [ ] args ) { Scanner s = new Scanner ( System . in ) ; String start = s . next ( ) ; String end = s . next ( ) ; int n = start . length ( ) ; int k = s . nextInt ( ) ; int amount = 0 ; for ( int i = 1 ; i < n ; i ++ ) { String str = start . substring ( i , n ) + start . substring ( 0 , i ) ; if ( str . equals ( end ) ) amount ++ ; } if ( amount == 0 && ! start . equals ( end ) ) { System . out . println ( 0 ) ; System . exit ( 0 ) ; } long x = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) x = ( x * ( n - 1 ) + 1 ) % 1000000007 ; else x = ( x * ( n - 1 ) - 1 ) % 1000000007 ; } long ans = amount * x ; if ( start . equals ( end ) ) { if ( k % 2 == 0 ) ans += x + 1 ; else ans += x - 1 ; } System . out . println ( ans % 1000000007 ) ; } }
import java . util . * ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; boolean go = false ; while ( true ) { int n = sc . nextInt ( ) ; if ( n == 0 ) break ; if ( go == true ) System . out . println ( ) ; go = true ; int max = 0 ; int [ ] sum = new int [ n ] ; String [ ] name = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { name [ i ] = sc . next ( ) ; sum [ i ] = sc . nextInt ( ) * 3 + sc . nextInt ( ) * 0 + sc . nextInt ( ) * 1 ; max = Math . max ( max , sum [ i ] ) ; } for ( int i = max ; i >= 0 ; i -- ) { for ( int j = 0 ; j < n ; j ++ ) { if ( sum [ j ] == i ) System . out . println ( name [ j ] + " , " + sum [ j ] ) ; } } } } }
import java . util . Scanner ; import java . util . Arrays ; public class MainClass { public static void main ( String [ ] agrs ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) ; int [ ] lst = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) lst [ i ] = sc . nextInt ( ) ; int res = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( lst [ i ] == 0 && lst [ i - 1 ] == 1 && lst [ i + 1 ] == 1 ) { res += 1 ; if ( i <= n - 4 ) { if ( lst [ i + 2 ] == 0 && lst [ i + 3 ] == 1 ) { i += 3 ; } } } } System . out . println ( res ) ; } }
public class GFG { static int val ( char c ) { if ( c >= '0' && c <= '9' ) return ( int ) c - '0' ; else return ( int ) c - ' A ' + 10 ; } static int toDeci ( String str , int base ) { int len = str . length ( ) ; int power = 1 ; int num = 0 ; int i ; for ( i = len - 1 ; i >= 0 ; i -- ) { if ( val ( str . charAt ( i ) ) >= base ) { return - 1 ; } num += val ( str . charAt ( i ) ) * power ; power = power * base ; } return num ; } static void checkCorrespond ( String [ ] str , int x ) { int counter = 0 ; int n = str . length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 2 ; j <= 36 ; j ++ ) { if ( toDeci ( str [ i ] , j ) == x ) { counter ++ ; break ; } } } if ( counter == n ) System . out . print ( " YES " + " \n " ) ; else System . out . print ( " NO " + " \n " ) ; } public static void main ( String [ ] args ) { int x = 16 ; String [ ] str = { "10000" , "20" , "16" } ; checkCorrespond ( str , x ) ; } }
import java . util . Scanner ; public class B770 { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; char [ ] S = in . next ( ) . toCharArray ( ) ; long maxNumber = Long . parseLong ( new String ( S ) ) ; long max = sumOfDigits ( maxNumber ) ; S [ S . length - 1 ] = '9' ; for ( int pos = S . length - 2 ; pos >= 0 ; pos -- ) { if ( S [ pos ] != '0' ) { S [ pos ] -- ; long number = Long . parseLong ( new String ( S ) ) ; int sum = sumOfDigits ( number ) ; if ( sum > max ) { max = sum ; maxNumber = number ; } } S [ pos ] = '9' ; } System . out . println ( maxNumber ) ; } static int sumOfDigits ( long number ) { int result = 0 ; while ( number != 0 ) { result += number % 10 ; number /= 10 ; } return result ; } }
import java . util . Arrays ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; int n = sc . nextInt ( ) , m = sc . nextInt ( ) , k = sc . nextInt ( ) ; if ( n > m ) { System . out . println ( " YES " ) ; return ; } int [ ] a = new int [ n ] , b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc . nextInt ( ) ; } for ( int j = 0 ; j < m ; j ++ ) { b [ j ] = sc . nextInt ( ) ; } Arrays . sort ( a ) ; Arrays . sort ( b ) ; for ( int i = n - 1 , j = m - 1 ; i >= 0 && j >= 0 ; i -- , j -- ) { if ( a [ i ] > b [ j ] ) { System . out . println ( " YES " ) ; return ; } } System . out . println ( " NO " ) ; } }
import java . io . IOException ; import java . util . Arrays ; import java . util . PriorityQueue ; import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) throws IOException { new Main ( ) . run ( ) ; } private void run ( ) throws IOException { Scanner scanner = new Scanner ( System . in ) ; int n = scanner . nextInt ( ) ; Pair [ ] pairs = new Pair [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int a = scanner . nextInt ( ) ; int b = scanner . nextInt ( ) ; pairs [ i ] = new Pair ( a , b ) ; } Arrays . sort ( pairs ) ; PriorityQueue < Pair > pq = new PriorityQueue < Pair > ( ) ; long sum = 0 ; long ret = 0 ; for ( int i = 0 ; i < n ; i ++ ) { pq . offer ( new Pair ( pairs [ i ] . s , pairs [ i ] . f ) ) ; sum += pairs [ i ] . f ; while ( ! pq . isEmpty ( ) && pq . peek ( ) . f * pq . size ( ) < sum ) sum -= pq . poll ( ) . s ; ret = Math . max ( ret , pq . size ( ) ) ; } System . out . println ( ret ) ; } class Pair implements Comparable < Pair > { long f , s ; @ Override public String toString ( ) { return " Pair ▁ [ f = " + f + " , ▁ s = " + s + " ] " ; } public Pair ( long f , long s ) { super ( ) ; this . f = f ; this . s = s ; } @ Override public int compareTo ( Pair o ) { return ( int ) ( f - o . f ) ; } } }