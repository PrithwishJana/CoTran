import java . util . * ; class TreeNode { public int val ; public TreeNode left ; public TreeNode right ; public TreeNode ( int rootData ) { this . val = rootData ; this . left = null ; this . right = null ; } } public class Solution { public TreeNode convertBST ( TreeNode root ) { int sum = 0 ; TreeNode node = root ; Stack < TreeNode > stack = new Stack < TreeNode > ( ) ; while ( ! stack . isEmpty ( ) || node != null ) { while ( node != null ) { stack . add ( node ) ; node = node . right ; } node = stack . pop ( ) ; sum += node . val ; node . val = sum ; node = node . left ; } return root ; } public List < Integer > printTree_vLR ( TreeNode node , List < Integer > arr ) { if ( node != null ) { arr . add ( node . val ) ; arr = printTree_vLR ( node . left , arr ) ; arr = printTree_vLR ( node . right , arr ) ; } return arr ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; TreeNode root = new TreeNode ( 4 ) ; root . left = new TreeNode ( 1 ) ; root . right = new TreeNode ( 6 ) ; root . left . left = new TreeNode ( 0 ) ; root . left . right = new TreeNode ( 2 ) ; root . right . left = new TreeNode ( 5 ) ; root . right . right = new TreeNode ( 7 ) ; root . left . right . right = new TreeNode ( 3 ) ; root . right . right . right = new TreeNode ( 8 ) ; TreeNode out = sObj . convertBST ( root ) ; List < Integer > arr = sObj . printTree_vLR ( out , new ArrayList < Integer > ( ) ) ; System . out . println ( arr ) ; } }
import java . util . * ; public class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int countTriplets ( int n , Vector < pair > points ) { Set < pair > pts = new HashSet < pair > ( ) ; int ct = 0 ; for ( int i = 0 ; i < n ; i ++ ) pts . add ( points . get ( i ) ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) { int x = points . get ( i ) . first + points . get ( j ) . first ; int y = points . get ( i ) . second + points . get ( j ) . second ; if ( x % 2 == 0 && y % 2 == 0 ) if ( ! pts . contains ( new pair ( x / 2 , y / 2 ) ) ) ct ++ ; } return ct ; } public static void main ( String args [ ] ) { Vector < pair > points = new Vector < > ( ) ; points . add ( new pair ( 1 , 1 ) ) ; points . add ( new pair ( 2 , 2 ) ) ; points . add ( new pair ( 3 , 3 ) ) ; int n = points . size ( ) ; System . out . println ( countTriplets ( n , points ) ) ; } }
import java . util . * ; import java . lang . * ; public class GFG { static int isSumDivides ( int N ) { int temp = N ; int sum = 0 ; while ( temp > 0 ) { sum += temp % 10 ; temp /= 10 ; } if ( N % sum == 0 ) return 1 ; else return 0 ; } public static void main ( String args [ ] ) { int N = 12 ; if ( isSumDivides ( N ) == 1 ) System . out . print ( " YES " ) ; else System . out . print ( " NO " ) ; } }
import java . io . * ; public class GFG { static int countZeros ( int x ) { int y ; int n = 32 ; y = x >> 16 ; if ( y != 0 ) { n = n - 16 ; x = y ; } y = x >> 8 ; if ( y != 0 ) { n = n - 8 ; x = y ; } y = x >> 4 ; if ( y != 0 ) { n = n - 4 ; x = y ; } y = x >> 2 ; if ( y != 0 ) { n = n - 2 ; x = y ; } y = x >> 1 ; if ( y != 0 ) return n - 2 ; return n - x ; } public static void main ( String [ ] args ) { int x = 101 ; System . out . println ( countZeros ( x ) ) ; } }