import java . util . * ; class TreeNode { public int val ; public TreeNode left ; public TreeNode right ; public TreeNode ( int rootData ) { this . val = rootData ; this . left = null ; this . right = null ; } } public class Solution { public TreeNode convertBST ( TreeNode root ) { int sum = 0 ; TreeNode node = root ; Stack < TreeNode > stack = new Stack < TreeNode > ( ) ; while ( ! stack . isEmpty ( ) || node != null ) { while ( node != null ) { stack . add ( node ) ; node = node . right ; } node = stack . pop ( ) ; sum += node . val ; node . val = sum ; node = node . left ; } return root ; } public List < Integer > printTree_vLR ( TreeNode node , List < Integer > arr ) { if ( node != null ) { arr . add ( node . val ) ; arr = printTree_vLR ( node . left , arr ) ; arr = printTree_vLR ( node . right , arr ) ; } return arr ; } public static void main ( String [ ] args ) { Solution sObj = new Solution ( ) ; TreeNode root = new TreeNode ( 4 ) ; root . left = new TreeNode ( 1 ) ; root . right = new TreeNode ( 6 ) ; root . left . left = new TreeNode ( 0 ) ; root . left . right = new TreeNode ( 2 ) ; root . right . left = new TreeNode ( 5 ) ; root . right . right = new TreeNode ( 7 ) ; root . left . right . right = new TreeNode ( 3 ) ; root . right . right . right = new TreeNode ( 8 ) ; TreeNode out = sObj . convertBST ( root ) ; List < Integer > arr = sObj . printTree_vLR ( out , new ArrayList < Integer > ( ) ) ; System . out . println ( arr ) ; } }
import java . util . * ; public class GFG { static class pair { int first , second ; public pair ( int first , int second ) { this . first = first ; this . second = second ; } } static int countTriplets ( int n , Vector < pair > points ) { Set < pair > pts = new HashSet < pair > ( ) ; int ct = 0 ; for ( int i = 0 ; i < n ; i ++ ) pts . add ( points . get ( i ) ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) { int x = points . get ( i ) . first + points . get ( j ) . first ; int y = points . get ( i ) . second + points . get ( j ) . second ; if ( x % 2 == 0 && y % 2 == 0 ) if ( ! pts . contains ( new pair ( x / 2 , y / 2 ) ) ) ct ++ ; } return ct ; } public static void main ( String args [ ] ) { Vector < pair > points = new Vector < > ( ) ; points . add ( new pair ( 1 , 1 ) ) ; points . add ( new pair ( 2 , 2 ) ) ; points . add ( new pair ( 3 , 3 ) ) ; int n = points . size ( ) ; System . out . println ( countTriplets ( n , points ) ) ; } }
import java . util . * ; import java . lang . * ; public class GFG { static int isSumDivides ( int N ) { int temp = N ; int sum = 0 ; while ( temp > 0 ) { sum += temp % 10 ; temp /= 10 ; } if ( N % sum == 0 ) return 1 ; else return 0 ; } public static void main ( String args [ ] ) { int N = 12 ; if ( isSumDivides ( N ) == 1 ) System . out . print ( " YES " ) ; else System . out . print ( " NO " ) ; } }
import java . io . * ; public class GFG { static int countZeros ( int x ) { int y ; int n = 32 ; y = x >> 16 ; if ( y != 0 ) { n = n - 16 ; x = y ; } y = x >> 8 ; if ( y != 0 ) { n = n - 8 ; x = y ; } y = x >> 4 ; if ( y != 0 ) { n = n - 4 ; x = y ; } y = x >> 2 ; if ( y != 0 ) { n = n - 2 ; x = y ; } y = x >> 1 ; if ( y != 0 ) return n - 2 ; return n - x ; } public static void main ( String [ ] args ) { int x = 101 ; System . out . println ( countZeros ( x ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Calendar ; import java . util . Locale ; final class Main { private Main ( ) { } public static void main ( final String [ ] argv ) throws IOException { final BufferedReader inputReader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Calendar calendar = Calendar . getInstance ( ) ; while ( true ) { String input = inputReader . readLine ( ) ; if ( input == null ) { break ; } String [ ] inputs = input . split ( " ▁ " ) ; if ( inputs [ 0 ] . equals ( "0" ) ) { break ; } calendar . set ( 2004 , Integer . parseInt ( inputs [ 0 ] ) - 1 , Integer . parseInt ( inputs [ 1 ] ) ) ; final String week = calendar . getDisplayName ( Calendar . DAY_OF_WEEK , Calendar . LONG , Locale . ENGLISH ) ; System . out . println ( week ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Calendar ; import java . util . Locale ; final class Main { private Main ( ) { } public static void main ( final String [ ] argv ) throws IOException { final BufferedReader inputReader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Calendar calendar = Calendar . getInstance ( ) ; while ( true ) { String input = inputReader . readLine ( ) ; if ( input == null ) { break ; } String [ ] inputs = input . split ( " ▁ " ) ; if ( inputs [ 0 ] . equals ( "0" ) ) { break ; } calendar . set ( 2004 , Integer . parseInt ( inputs [ 0 ] ) - 1 , Integer . parseInt ( inputs [ 1 ] ) ) ; final String week = calendar . getDisplayName ( Calendar . DAY_OF_WEEK , Calendar . LONG , Locale . ENGLISH ) ; System . out . println ( week ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Calendar ; import java . util . Locale ; final class Main { private Main ( ) { } public static void main ( final String [ ] argv ) throws IOException { final BufferedReader inputReader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Calendar calendar = Calendar . getInstance ( ) ; while ( true ) { String input = inputReader . readLine ( ) ; if ( input == null ) { break ; } String [ ] inputs = input . split ( " ▁ " ) ; if ( inputs [ 0 ] . equals ( "0" ) ) { break ; } calendar . set ( 2004 , Integer . parseInt ( inputs [ 0 ] ) - 1 , Integer . parseInt ( inputs [ 1 ] ) ) ; final String week = calendar . getDisplayName ( Calendar . DAY_OF_WEEK , Calendar . LONG , Locale . ENGLISH ) ; System . out . println ( week ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Calendar ; import java . util . Locale ; final class Main { private Main ( ) { } public static void main ( final String [ ] argv ) throws IOException { final BufferedReader inputReader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Calendar calendar = Calendar . getInstance ( ) ; while ( true ) { String input = inputReader . readLine ( ) ; if ( input == null ) { break ; } String [ ] inputs = input . split ( " ▁ " ) ; if ( inputs [ 0 ] . equals ( "0" ) ) { break ; } calendar . set ( 2004 , Integer . parseInt ( inputs [ 0 ] ) - 1 , Integer . parseInt ( inputs [ 1 ] ) ) ; final String week = calendar . getDisplayName ( Calendar . DAY_OF_WEEK , Calendar . LONG , Locale . ENGLISH ) ; System . out . println ( week ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Calendar ; import java . util . Locale ; final class Main { private Main ( ) { } public static void main ( final String [ ] argv ) throws IOException { final BufferedReader inputReader = new BufferedReader ( new InputStreamReader ( System . in ) ) ; Calendar calendar = Calendar . getInstance ( ) ; while ( true ) { String input = inputReader . readLine ( ) ; if ( input == null ) { break ; } String [ ] inputs = input . split ( " ▁ " ) ; if ( inputs [ 0 ] . equals ( "0" ) ) { break ; } calendar . set ( 2004 , Integer . parseInt ( inputs [ 0 ] ) - 1 , Integer . parseInt ( inputs [ 1 ] ) ) ; final String week = calendar . getDisplayName ( Calendar . DAY_OF_WEEK , Calendar . LONG , Locale . ENGLISH ) ; System . out . println ( week ) ; } } }
import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { static final List < String > WEEK_STR = Collections . unmodifiableList ( Arrays . asList ( " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " ) ) ; static final List < Integer > MONTH_DATE = Collections . unmodifiableList ( Arrays . asList ( 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ) ) ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int month = in . nextInt ( ) ; int date = in . nextInt ( ) ; while ( month > 0 ) { int weekDate = 2 + date ; for ( int m = 0 ; m < month - 1 ; m ++ ) { weekDate += MONTH_DATE . get ( m ) ; } System . out . println ( WEEK_STR . get ( weekDate % 7 ) ) ; month = in . nextInt ( ) ; date = in . nextInt ( ) ; } } }
import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { static final List < String > WEEK_STR = Collections . unmodifiableList ( Arrays . asList ( " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " ) ) ; static final List < Integer > MONTH_DATE = Collections . unmodifiableList ( Arrays . asList ( 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ) ) ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int month = in . nextInt ( ) ; int date = in . nextInt ( ) ; while ( month > 0 ) { int weekDate = 2 + date ; for ( int m = 0 ; m < month - 1 ; m ++ ) { weekDate += MONTH_DATE . get ( m ) ; } System . out . println ( WEEK_STR . get ( weekDate % 7 ) ) ; month = in . nextInt ( ) ; date = in . nextInt ( ) ; } } }
import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { static final List < String > WEEK_STR = Collections . unmodifiableList ( Arrays . asList ( " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " ) ) ; static final List < Integer > MONTH_DATE = Collections . unmodifiableList ( Arrays . asList ( 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ) ) ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int month = in . nextInt ( ) ; int date = in . nextInt ( ) ; while ( month > 0 ) { int weekDate = 2 + date ; for ( int m = 0 ; m < month - 1 ; m ++ ) { weekDate += MONTH_DATE . get ( m ) ; } System . out . println ( WEEK_STR . get ( weekDate % 7 ) ) ; month = in . nextInt ( ) ; date = in . nextInt ( ) ; } } }
import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { static final List < String > WEEK_STR = Collections . unmodifiableList ( Arrays . asList ( " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " ) ) ; static final List < Integer > MONTH_DATE = Collections . unmodifiableList ( Arrays . asList ( 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ) ) ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int month = in . nextInt ( ) ; int date = in . nextInt ( ) ; while ( month > 0 ) { int weekDate = 2 + date ; for ( int m = 0 ; m < month - 1 ; m ++ ) { weekDate += MONTH_DATE . get ( m ) ; } System . out . println ( WEEK_STR . get ( weekDate % 7 ) ) ; month = in . nextInt ( ) ; date = in . nextInt ( ) ; } } }
import java . util . Arrays ; import java . util . Collections ; import java . util . List ; import java . util . Scanner ; public class Main { static final List < String > WEEK_STR = Collections . unmodifiableList ( Arrays . asList ( " Monday " , " Tuesday " , " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " ) ) ; static final List < Integer > MONTH_DATE = Collections . unmodifiableList ( Arrays . asList ( 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ) ) ; public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; int month = in . nextInt ( ) ; int date = in . nextInt ( ) ; while ( month > 0 ) { int weekDate = 2 + date ; for ( int m = 0 ; m < month - 1 ; m ++ ) { weekDate += MONTH_DATE . get ( m ) ; } System . out . println ( WEEK_STR . get ( weekDate % 7 ) ) ; month = in . nextInt ( ) ; date = in . nextInt ( ) ; } } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; class Main { static Map < Integer , Integer > monthDay = null ; static String [ ] dayOfTheWeek = { " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " , " Monday " , " Tuesday " } ; public static void main ( String [ ] args ) { Scanner sc = null ; try { sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int month = sc . nextInt ( ) ; int day = sc . nextInt ( ) ; if ( month == 0 || day == 0 ) { break ; } if ( monthDay == null ) { createMonth ( ) ; } System . out . println ( getDayOfTheWeek ( month , day , monthDay ) ) ; } } finally { sc . close ( ) ; } } public static String getDayOfTheWeek ( int m , int d , Map < Integer , Integer > map ) { int sum = 0 ; for ( int i = 1 ; i < m ; i ++ ) { sum += map . get ( i ) ; } sum += d ; return dayOfTheWeek [ sum % 7 ] ; } public static Map < Integer , Integer > createMonth ( ) { monthDay = new HashMap < Integer , Integer > ( ) ; monthDay . put ( 1 , 31 ) ; monthDay . put ( 2 , 29 ) ; monthDay . put ( 3 , 31 ) ; monthDay . put ( 4 , 30 ) ; monthDay . put ( 5 , 31 ) ; monthDay . put ( 6 , 30 ) ; monthDay . put ( 7 , 31 ) ; monthDay . put ( 8 , 31 ) ; monthDay . put ( 9 , 30 ) ; monthDay . put ( 10 , 31 ) ; monthDay . put ( 11 , 30 ) ; monthDay . put ( 12 , 31 ) ; return monthDay ; } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; class Main { static Map < Integer , Integer > monthDay = null ; static String [ ] dayOfTheWeek = { " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " , " Monday " , " Tuesday " } ; public static void main ( String [ ] args ) { Scanner sc = null ; try { sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int month = sc . nextInt ( ) ; int day = sc . nextInt ( ) ; if ( month == 0 || day == 0 ) { break ; } if ( monthDay == null ) { createMonth ( ) ; } System . out . println ( getDayOfTheWeek ( month , day , monthDay ) ) ; } } finally { sc . close ( ) ; } } public static String getDayOfTheWeek ( int m , int d , Map < Integer , Integer > map ) { int sum = 0 ; for ( int i = 1 ; i < m ; i ++ ) { sum += map . get ( i ) ; } sum += d ; return dayOfTheWeek [ sum % 7 ] ; } public static Map < Integer , Integer > createMonth ( ) { monthDay = new HashMap < Integer , Integer > ( ) ; monthDay . put ( 1 , 31 ) ; monthDay . put ( 2 , 29 ) ; monthDay . put ( 3 , 31 ) ; monthDay . put ( 4 , 30 ) ; monthDay . put ( 5 , 31 ) ; monthDay . put ( 6 , 30 ) ; monthDay . put ( 7 , 31 ) ; monthDay . put ( 8 , 31 ) ; monthDay . put ( 9 , 30 ) ; monthDay . put ( 10 , 31 ) ; monthDay . put ( 11 , 30 ) ; monthDay . put ( 12 , 31 ) ; return monthDay ; } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; class Main { static Map < Integer , Integer > monthDay = null ; static String [ ] dayOfTheWeek = { " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " , " Monday " , " Tuesday " } ; public static void main ( String [ ] args ) { Scanner sc = null ; try { sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int month = sc . nextInt ( ) ; int day = sc . nextInt ( ) ; if ( month == 0 || day == 0 ) { break ; } if ( monthDay == null ) { createMonth ( ) ; } System . out . println ( getDayOfTheWeek ( month , day , monthDay ) ) ; } } finally { sc . close ( ) ; } } public static String getDayOfTheWeek ( int m , int d , Map < Integer , Integer > map ) { int sum = 0 ; for ( int i = 1 ; i < m ; i ++ ) { sum += map . get ( i ) ; } sum += d ; return dayOfTheWeek [ sum % 7 ] ; } public static Map < Integer , Integer > createMonth ( ) { monthDay = new HashMap < Integer , Integer > ( ) ; monthDay . put ( 1 , 31 ) ; monthDay . put ( 2 , 29 ) ; monthDay . put ( 3 , 31 ) ; monthDay . put ( 4 , 30 ) ; monthDay . put ( 5 , 31 ) ; monthDay . put ( 6 , 30 ) ; monthDay . put ( 7 , 31 ) ; monthDay . put ( 8 , 31 ) ; monthDay . put ( 9 , 30 ) ; monthDay . put ( 10 , 31 ) ; monthDay . put ( 11 , 30 ) ; monthDay . put ( 12 , 31 ) ; return monthDay ; } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; class Main { static Map < Integer , Integer > monthDay = null ; static String [ ] dayOfTheWeek = { " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " , " Monday " , " Tuesday " } ; public static void main ( String [ ] args ) { Scanner sc = null ; try { sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int month = sc . nextInt ( ) ; int day = sc . nextInt ( ) ; if ( month == 0 || day == 0 ) { break ; } if ( monthDay == null ) { createMonth ( ) ; } System . out . println ( getDayOfTheWeek ( month , day , monthDay ) ) ; } } finally { sc . close ( ) ; } } public static String getDayOfTheWeek ( int m , int d , Map < Integer , Integer > map ) { int sum = 0 ; for ( int i = 1 ; i < m ; i ++ ) { sum += map . get ( i ) ; } sum += d ; return dayOfTheWeek [ sum % 7 ] ; } public static Map < Integer , Integer > createMonth ( ) { monthDay = new HashMap < Integer , Integer > ( ) ; monthDay . put ( 1 , 31 ) ; monthDay . put ( 2 , 29 ) ; monthDay . put ( 3 , 31 ) ; monthDay . put ( 4 , 30 ) ; monthDay . put ( 5 , 31 ) ; monthDay . put ( 6 , 30 ) ; monthDay . put ( 7 , 31 ) ; monthDay . put ( 8 , 31 ) ; monthDay . put ( 9 , 30 ) ; monthDay . put ( 10 , 31 ) ; monthDay . put ( 11 , 30 ) ; monthDay . put ( 12 , 31 ) ; return monthDay ; } }
import java . util . HashMap ; import java . util . Map ; import java . util . Scanner ; class Main { static Map < Integer , Integer > monthDay = null ; static String [ ] dayOfTheWeek = { " Wednesday " , " Thursday " , " Friday " , " Saturday " , " Sunday " , " Monday " , " Tuesday " } ; public static void main ( String [ ] args ) { Scanner sc = null ; try { sc = new Scanner ( System . in ) ; while ( sc . hasNextInt ( ) ) { int month = sc . nextInt ( ) ; int day = sc . nextInt ( ) ; if ( month == 0 || day == 0 ) { break ; } if ( monthDay == null ) { createMonth ( ) ; } System . out . println ( getDayOfTheWeek ( month , day , monthDay ) ) ; } } finally { sc . close ( ) ; } } public static String getDayOfTheWeek ( int m , int d , Map < Integer , Integer > map ) { int sum = 0 ; for ( int i = 1 ; i < m ; i ++ ) { sum += map . get ( i ) ; } sum += d ; return dayOfTheWeek [ sum % 7 ] ; } public static Map < Integer , Integer > createMonth ( ) { monthDay = new HashMap < Integer , Integer > ( ) ; monthDay . put ( 1 , 31 ) ; monthDay . put ( 2 , 29 ) ; monthDay . put ( 3 , 31 ) ; monthDay . put ( 4 , 30 ) ; monthDay . put ( 5 , 31 ) ; monthDay . put ( 6 , 30 ) ; monthDay . put ( 7 , 31 ) ; monthDay . put ( 8 , 31 ) ; monthDay . put ( 9 , 30 ) ; monthDay . put ( 10 , 31 ) ; monthDay . put ( 11 , 30 ) ; monthDay . put ( 12 , 31 ) ; return monthDay ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { int [ ] month = new int [ 12 ] ; int youbi = 3 ; int nissuu = 0 ; String str = " " ; StringTokenizer stk ; int tsuki = 0 , nichi = 0 ; int motomeru = 0 ; month [ 0 ] = 31 ; month [ 1 ] = 29 ; month [ 2 ] = 31 ; month [ 3 ] = 30 ; month [ 4 ] = 31 ; month [ 5 ] = 30 ; month [ 6 ] = 31 ; month [ 7 ] = 31 ; month [ 8 ] = 30 ; month [ 9 ] = 31 ; month [ 10 ] = 30 ; month [ 11 ] = 31 ; BufferedReader bfr = new BufferedReader ( new InputStreamReader ( System . in ) ) ; while ( true ) { try { nissuu = 0 ; str = bfr . readLine ( ) ; stk = new StringTokenizer ( str , " ▁ " ) ; tsuki = Integer . parseInt ( stk . nextToken ( ) ) ; nichi = Integer . parseInt ( stk . nextToken ( ) ) ; if ( tsuki == 0 && nichi == 0 ) { System . exit ( 0 ) ; } if ( tsuki == 1 ) { nissuu = nichi ; } else { for ( int i = 0 ; i <= tsuki - 2 ; i ++ ) { nissuu += month [ i ] ; } nissuu += nichi ; } motomeru = ( youbi + nissuu ) % 7 ; if ( motomeru == 0 ) { System . out . println ( " Sunday " ) ; } else if ( motomeru == 1 ) { System . out . println ( " Monday " ) ; } else if ( motomeru == 2 ) { System . out . println ( " Tuesday " ) ; } else if ( motomeru == 3 ) { System . out . println ( " Wednesday " ) ; } else if ( motomeru == 4 ) { System . out . println ( " Thursday " ) ; } else if ( motomeru == 5 ) { System . out . println ( " Friday " ) ; } else if ( motomeru == 6 ) { System . out . println ( " Saturday " ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { int [ ] month = new int [ 12 ] ; int youbi = 3 ; int nissuu = 0 ; String str = " " ; StringTokenizer stk ; int tsuki = 0 , nichi = 0 ; int motomeru = 0 ; month [ 0 ] = 31 ; month [ 1 ] = 29 ; month [ 2 ] = 31 ; month [ 3 ] = 30 ; month [ 4 ] = 31 ; month [ 5 ] = 30 ; month [ 6 ] = 31 ; month [ 7 ] = 31 ; month [ 8 ] = 30 ; month [ 9 ] = 31 ; month [ 10 ] = 30 ; month [ 11 ] = 31 ; BufferedReader bfr = new BufferedReader ( new InputStreamReader ( System . in ) ) ; while ( true ) { try { nissuu = 0 ; str = bfr . readLine ( ) ; stk = new StringTokenizer ( str , " ▁ " ) ; tsuki = Integer . parseInt ( stk . nextToken ( ) ) ; nichi = Integer . parseInt ( stk . nextToken ( ) ) ; if ( tsuki == 0 && nichi == 0 ) { System . exit ( 0 ) ; } if ( tsuki == 1 ) { nissuu = nichi ; } else { for ( int i = 0 ; i <= tsuki - 2 ; i ++ ) { nissuu += month [ i ] ; } nissuu += nichi ; } motomeru = ( youbi + nissuu ) % 7 ; if ( motomeru == 0 ) { System . out . println ( " Sunday " ) ; } else if ( motomeru == 1 ) { System . out . println ( " Monday " ) ; } else if ( motomeru == 2 ) { System . out . println ( " Tuesday " ) ; } else if ( motomeru == 3 ) { System . out . println ( " Wednesday " ) ; } else if ( motomeru == 4 ) { System . out . println ( " Thursday " ) ; } else if ( motomeru == 5 ) { System . out . println ( " Friday " ) ; } else if ( motomeru == 6 ) { System . out . println ( " Saturday " ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { int [ ] month = new int [ 12 ] ; int youbi = 3 ; int nissuu = 0 ; String str = " " ; StringTokenizer stk ; int tsuki = 0 , nichi = 0 ; int motomeru = 0 ; month [ 0 ] = 31 ; month [ 1 ] = 29 ; month [ 2 ] = 31 ; month [ 3 ] = 30 ; month [ 4 ] = 31 ; month [ 5 ] = 30 ; month [ 6 ] = 31 ; month [ 7 ] = 31 ; month [ 8 ] = 30 ; month [ 9 ] = 31 ; month [ 10 ] = 30 ; month [ 11 ] = 31 ; BufferedReader bfr = new BufferedReader ( new InputStreamReader ( System . in ) ) ; while ( true ) { try { nissuu = 0 ; str = bfr . readLine ( ) ; stk = new StringTokenizer ( str , " ▁ " ) ; tsuki = Integer . parseInt ( stk . nextToken ( ) ) ; nichi = Integer . parseInt ( stk . nextToken ( ) ) ; if ( tsuki == 0 && nichi == 0 ) { System . exit ( 0 ) ; } if ( tsuki == 1 ) { nissuu = nichi ; } else { for ( int i = 0 ; i <= tsuki - 2 ; i ++ ) { nissuu += month [ i ] ; } nissuu += nichi ; } motomeru = ( youbi + nissuu ) % 7 ; if ( motomeru == 0 ) { System . out . println ( " Sunday " ) ; } else if ( motomeru == 1 ) { System . out . println ( " Monday " ) ; } else if ( motomeru == 2 ) { System . out . println ( " Tuesday " ) ; } else if ( motomeru == 3 ) { System . out . println ( " Wednesday " ) ; } else if ( motomeru == 4 ) { System . out . println ( " Thursday " ) ; } else if ( motomeru == 5 ) { System . out . println ( " Friday " ) ; } else if ( motomeru == 6 ) { System . out . println ( " Saturday " ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { int [ ] month = new int [ 12 ] ; int youbi = 3 ; int nissuu = 0 ; String str = " " ; StringTokenizer stk ; int tsuki = 0 , nichi = 0 ; int motomeru = 0 ; month [ 0 ] = 31 ; month [ 1 ] = 29 ; month [ 2 ] = 31 ; month [ 3 ] = 30 ; month [ 4 ] = 31 ; month [ 5 ] = 30 ; month [ 6 ] = 31 ; month [ 7 ] = 31 ; month [ 8 ] = 30 ; month [ 9 ] = 31 ; month [ 10 ] = 30 ; month [ 11 ] = 31 ; BufferedReader bfr = new BufferedReader ( new InputStreamReader ( System . in ) ) ; while ( true ) { try { nissuu = 0 ; str = bfr . readLine ( ) ; stk = new StringTokenizer ( str , " ▁ " ) ; tsuki = Integer . parseInt ( stk . nextToken ( ) ) ; nichi = Integer . parseInt ( stk . nextToken ( ) ) ; if ( tsuki == 0 && nichi == 0 ) { System . exit ( 0 ) ; } if ( tsuki == 1 ) { nissuu = nichi ; } else { for ( int i = 0 ; i <= tsuki - 2 ; i ++ ) { nissuu += month [ i ] ; } nissuu += nichi ; } motomeru = ( youbi + nissuu ) % 7 ; if ( motomeru == 0 ) { System . out . println ( " Sunday " ) ; } else if ( motomeru == 1 ) { System . out . println ( " Monday " ) ; } else if ( motomeru == 2 ) { System . out . println ( " Tuesday " ) ; } else if ( motomeru == 3 ) { System . out . println ( " Wednesday " ) ; } else if ( motomeru == 4 ) { System . out . println ( " Thursday " ) ; } else if ( motomeru == 5 ) { System . out . println ( " Friday " ) ; } else if ( motomeru == 6 ) { System . out . println ( " Saturday " ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . StringTokenizer ; class Main { public static void main ( String [ ] args ) { int [ ] month = new int [ 12 ] ; int youbi = 3 ; int nissuu = 0 ; String str = " " ; StringTokenizer stk ; int tsuki = 0 , nichi = 0 ; int motomeru = 0 ; month [ 0 ] = 31 ; month [ 1 ] = 29 ; month [ 2 ] = 31 ; month [ 3 ] = 30 ; month [ 4 ] = 31 ; month [ 5 ] = 30 ; month [ 6 ] = 31 ; month [ 7 ] = 31 ; month [ 8 ] = 30 ; month [ 9 ] = 31 ; month [ 10 ] = 30 ; month [ 11 ] = 31 ; BufferedReader bfr = new BufferedReader ( new InputStreamReader ( System . in ) ) ; while ( true ) { try { nissuu = 0 ; str = bfr . readLine ( ) ; stk = new StringTokenizer ( str , " ▁ " ) ; tsuki = Integer . parseInt ( stk . nextToken ( ) ) ; nichi = Integer . parseInt ( stk . nextToken ( ) ) ; if ( tsuki == 0 && nichi == 0 ) { System . exit ( 0 ) ; } if ( tsuki == 1 ) { nissuu = nichi ; } else { for ( int i = 0 ; i <= tsuki - 2 ; i ++ ) { nissuu += month [ i ] ; } nissuu += nichi ; } motomeru = ( youbi + nissuu ) % 7 ; if ( motomeru == 0 ) { System . out . println ( " Sunday " ) ; } else if ( motomeru == 1 ) { System . out . println ( " Monday " ) ; } else if ( motomeru == 2 ) { System . out . println ( " Tuesday " ) ; } else if ( motomeru == 3 ) { System . out . println ( " Wednesday " ) ; } else if ( motomeru == 4 ) { System . out . println ( " Thursday " ) ; } else if ( motomeru == 5 ) { System . out . println ( " Friday " ) ; } else if ( motomeru == 6 ) { System . out . println ( " Saturday " ) ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } } } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc ; static final int INF = 1 << 28 ; static final double EPS = 1e-9 ; void run ( ) { sc = new Scanner ( System . in ) ; for ( ; ; ) { int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m == 0 && d == 0 ) break ; Calendar cal = Calendar . getInstance ( ) ; cal . set ( 2004 , m - 1 , d ) ; switch ( cal . get ( Calendar . DAY_OF_WEEK ) ) { case Calendar . MONDAY : println ( " Monday " ) ; break ; case Calendar . TUESDAY : println ( " Tuesday " ) ; break ; case Calendar . WEDNESDAY : println ( " Wednesday " ) ; break ; case Calendar . THURSDAY : println ( " Thursday " ) ; break ; case Calendar . FRIDAY : println ( " Friday " ) ; break ; case Calendar . SATURDAY : println ( " Saturday " ) ; break ; case Calendar . SUNDAY : println ( " Sunday " ) ; break ; } } sc . close ( ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc ; static final int INF = 1 << 28 ; static final double EPS = 1e-9 ; void run ( ) { sc = new Scanner ( System . in ) ; for ( ; ; ) { int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m == 0 && d == 0 ) break ; Calendar cal = Calendar . getInstance ( ) ; cal . set ( 2004 , m - 1 , d ) ; switch ( cal . get ( Calendar . DAY_OF_WEEK ) ) { case Calendar . MONDAY : println ( " Monday " ) ; break ; case Calendar . TUESDAY : println ( " Tuesday " ) ; break ; case Calendar . WEDNESDAY : println ( " Wednesday " ) ; break ; case Calendar . THURSDAY : println ( " Thursday " ) ; break ; case Calendar . FRIDAY : println ( " Friday " ) ; break ; case Calendar . SATURDAY : println ( " Saturday " ) ; break ; case Calendar . SUNDAY : println ( " Sunday " ) ; break ; } } sc . close ( ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc ; static final int INF = 1 << 28 ; static final double EPS = 1e-9 ; void run ( ) { sc = new Scanner ( System . in ) ; for ( ; ; ) { int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m == 0 && d == 0 ) break ; Calendar cal = Calendar . getInstance ( ) ; cal . set ( 2004 , m - 1 , d ) ; switch ( cal . get ( Calendar . DAY_OF_WEEK ) ) { case Calendar . MONDAY : println ( " Monday " ) ; break ; case Calendar . TUESDAY : println ( " Tuesday " ) ; break ; case Calendar . WEDNESDAY : println ( " Wednesday " ) ; break ; case Calendar . THURSDAY : println ( " Thursday " ) ; break ; case Calendar . FRIDAY : println ( " Friday " ) ; break ; case Calendar . SATURDAY : println ( " Saturday " ) ; break ; case Calendar . SUNDAY : println ( " Sunday " ) ; break ; } } sc . close ( ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc ; static final int INF = 1 << 28 ; static final double EPS = 1e-9 ; void run ( ) { sc = new Scanner ( System . in ) ; for ( ; ; ) { int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m == 0 && d == 0 ) break ; Calendar cal = Calendar . getInstance ( ) ; cal . set ( 2004 , m - 1 , d ) ; switch ( cal . get ( Calendar . DAY_OF_WEEK ) ) { case Calendar . MONDAY : println ( " Monday " ) ; break ; case Calendar . TUESDAY : println ( " Tuesday " ) ; break ; case Calendar . WEDNESDAY : println ( " Wednesday " ) ; break ; case Calendar . THURSDAY : println ( " Thursday " ) ; break ; case Calendar . FRIDAY : println ( " Friday " ) ; break ; case Calendar . SATURDAY : println ( " Saturday " ) ; break ; case Calendar . SUNDAY : println ( " Sunday " ) ; break ; } } sc . close ( ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . util . * ; import java . lang . * ; import java . math . * ; import java . io . * ; import static java . lang . Math . * ; import static java . util . Arrays . * ; public class Main { Scanner sc ; static final int INF = 1 << 28 ; static final double EPS = 1e-9 ; void run ( ) { sc = new Scanner ( System . in ) ; for ( ; ; ) { int m = sc . nextInt ( ) ; int d = sc . nextInt ( ) ; if ( m == 0 && d == 0 ) break ; Calendar cal = Calendar . getInstance ( ) ; cal . set ( 2004 , m - 1 , d ) ; switch ( cal . get ( Calendar . DAY_OF_WEEK ) ) { case Calendar . MONDAY : println ( " Monday " ) ; break ; case Calendar . TUESDAY : println ( " Tuesday " ) ; break ; case Calendar . WEDNESDAY : println ( " Wednesday " ) ; break ; case Calendar . THURSDAY : println ( " Thursday " ) ; break ; case Calendar . FRIDAY : println ( " Friday " ) ; break ; case Calendar . SATURDAY : println ( " Saturday " ) ; break ; case Calendar . SUNDAY : println ( " Sunday " ) ; break ; } } sc . close ( ) ; } void print ( String s ) { System . out . print ( s ) ; } void println ( String s ) { System . out . println ( s ) ; } public static void main ( String [ ] args ) { new Main ( ) . run ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static FastScanner in = new FastScanner ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static HashMap < Integer , Integer > map ; public static void main ( String [ ] args ) { BigInteger big = new BigInteger ( "0" ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; BigInteger temp = new BigInteger ( "2" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '1' ) { big = big . add ( temp . pow ( s . length - i - 1 ) ) ; } } temp = BigInteger . ONE ; long count = 0 ; BigInteger four = new BigInteger ( "4" ) ; while ( temp . compareTo ( big ) < 0 ) { count ++ ; temp = temp . multiply ( four ) ; } out . println ( count ) ; out . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static FastScanner in = new FastScanner ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static HashMap < Integer , Integer > map ; public static void main ( String [ ] args ) { BigInteger big = new BigInteger ( "0" ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; BigInteger temp = new BigInteger ( "2" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '1' ) { big = big . add ( temp . pow ( s . length - i - 1 ) ) ; } } temp = BigInteger . ONE ; long count = 0 ; BigInteger four = new BigInteger ( "4" ) ; while ( temp . compareTo ( big ) < 0 ) { count ++ ; temp = temp . multiply ( four ) ; } out . println ( count ) ; out . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static FastScanner in = new FastScanner ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static HashMap < Integer , Integer > map ; public static void main ( String [ ] args ) { BigInteger big = new BigInteger ( "0" ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; BigInteger temp = new BigInteger ( "2" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '1' ) { big = big . add ( temp . pow ( s . length - i - 1 ) ) ; } } temp = BigInteger . ONE ; long count = 0 ; BigInteger four = new BigInteger ( "4" ) ; while ( temp . compareTo ( big ) < 0 ) { count ++ ; temp = temp . multiply ( four ) ; } out . println ( count ) ; out . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static FastScanner in = new FastScanner ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static HashMap < Integer , Integer > map ; public static void main ( String [ ] args ) { BigInteger big = new BigInteger ( "0" ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; BigInteger temp = new BigInteger ( "2" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '1' ) { big = big . add ( temp . pow ( s . length - i - 1 ) ) ; } } temp = BigInteger . ONE ; long count = 0 ; BigInteger four = new BigInteger ( "4" ) ; while ( temp . compareTo ( big ) < 0 ) { count ++ ; temp = temp . multiply ( four ) ; } out . println ( count ) ; out . close ( ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . io . PrintWriter ; import java . math . BigInteger ; import java . util . * ; public class Main { static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreTokens ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } int [ ] readArray ( int n ) { int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = nextInt ( ) ; return a ; } long nextLong ( ) { return Long . parseLong ( next ( ) ) ; } } static FastScanner in = new FastScanner ( ) ; static PrintWriter out = new PrintWriter ( System . out ) ; static HashMap < Integer , Integer > map ; public static void main ( String [ ] args ) { BigInteger big = new BigInteger ( "0" ) ; char [ ] s = in . next ( ) . toCharArray ( ) ; BigInteger temp = new BigInteger ( "2" ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '1' ) { big = big . add ( temp . pow ( s . length - i - 1 ) ) ; } } temp = BigInteger . ONE ; long count = 0 ; BigInteger four = new BigInteger ( "4" ) ; while ( temp . compareTo ( big ) < 0 ) { count ++ ; temp = temp . multiply ( four ) ; } out . println ( count ) ; out . close ( ) ; } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } } }
import java . util . Scanner ; public class Main { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } } }
import java . util . * ; public class AA { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int c = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) c ++ ; } int k ; if ( c > 1 ) k = n - 1 ; else k = n - 2 ; if ( k % 2 == 1 ) k -- ; if ( n <= 1 ) System . out . print ( 0 ) ; else if ( n <= 2 || ( n == 3 && c == 1 ) ) System . out . print ( 1 ) ; else System . out . print ( k / 2 + 1 ) ; } }
import java . util . * ; public class AA { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int c = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) c ++ ; } int k ; if ( c > 1 ) k = n - 1 ; else k = n - 2 ; if ( k % 2 == 1 ) k -- ; if ( n <= 1 ) System . out . print ( 0 ) ; else if ( n <= 2 || ( n == 3 && c == 1 ) ) System . out . print ( 1 ) ; else System . out . print ( k / 2 + 1 ) ; } }
import java . util . * ; public class AA { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int c = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) c ++ ; } int k ; if ( c > 1 ) k = n - 1 ; else k = n - 2 ; if ( k % 2 == 1 ) k -- ; if ( n <= 1 ) System . out . print ( 0 ) ; else if ( n <= 2 || ( n == 3 && c == 1 ) ) System . out . print ( 1 ) ; else System . out . print ( k / 2 + 1 ) ; } }
import java . util . * ; public class AA { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int c = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) c ++ ; } int k ; if ( c > 1 ) k = n - 1 ; else k = n - 2 ; if ( k % 2 == 1 ) k -- ; if ( n <= 1 ) System . out . print ( 0 ) ; else if ( n <= 2 || ( n == 3 && c == 1 ) ) System . out . print ( 1 ) ; else System . out . print ( k / 2 + 1 ) ; } }
import java . util . * ; public class AA { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System . in ) ; String s = sc . next ( ) ; int c = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) c ++ ; } int k ; if ( c > 1 ) k = n - 1 ; else k = n - 2 ; if ( k % 2 == 1 ) k -- ; if ( n <= 1 ) System . out . print ( 0 ) ; else if ( n <= 2 || ( n == 3 && c == 1 ) ) System . out . print ( 1 ) ; else System . out . print ( k / 2 + 1 ) ; } }
import java . util . Scanner ; public class CF1204_D2_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } scanner . close ( ) ; } }
import java . util . Scanner ; public class CF1204_D2_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } scanner . close ( ) ; } }
import java . util . Scanner ; public class CF1204_D2_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } scanner . close ( ) ; } }
import java . util . Scanner ; public class CF1204_D2_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } scanner . close ( ) ; } }
import java . util . Scanner ; public class CF1204_D2_A { public static void main ( String [ ] args ) { Scanner scanner = new Scanner ( System . in ) ; String num = scanner . nextLine ( ) ; int pos = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { if ( num . charAt ( i ) == '1' ) pos = i ; } if ( pos == 0 ) { if ( ( num . length ( ) - 1 ) % 2 == 1 ) { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } else { System . out . println ( ( num . length ( ) - 1 ) / 2 ) ; } } else { System . out . println ( ( num . length ( ) - 1 ) / 2 + 1 ) ; } scanner . close ( ) ; } }
public class GFG { static boolean isBinary ( int number ) { while ( number > 0 ) { int digit = number % 10 ; if ( digit > 1 ) return false ; number /= 10 ; } return true ; } public static void main ( String a [ ] ) { int n = 1000111 ; System . out . println ( isBinary ( n ) ) ; } }
import java . util . * ; import java . io . * ; public class B { static int N ; static double ans ; public static void main ( String ... orange ) throws Exception { Scanner input = new Scanner ( System . in ) ; int numCases = input . nextInt ( ) ; for ( int n = 0 ; n < numCases ; n ++ ) { N = input . nextInt ( ) ; int K = input . nextInt ( ) ; double [ ] ps = new double [ N ] ; for ( int i = 0 ; i < N ; i ++ ) ps [ i ] = input . nextDouble ( ) ; ans = 0 ; solve ( new ArrayList < Double > ( ) , ps , K , 0 ) ; System . out . printf ( " Case ▁ # % d : ▁ " , n + 1 ) ; System . out . println ( ans ) ; } } static void solve ( List < Double > keep , double [ ] ps , int K , int index ) { if ( index == ps . length ) { if ( keep . size ( ) == K ) check ( keep , K ) ; return ; } solve ( keep , ps , K , index + 1 ) ; keep . add ( ps [ index ] ) ; solve ( keep , ps , K , index + 1 ) ; keep . remove ( keep . size ( ) - 1 ) ; } static void check ( List < Double > keep , int K ) { double [ ] [ ] table = new double [ K + 1 ] [ K + 1 ] ; table [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) for ( int yes = 0 ; yes <= i ; yes ++ ) { table [ i ] [ yes ] = table [ i - 1 ] [ yes ] * ( 1 - keep . get ( i - 1 ) ) ; if ( yes > 0 ) table [ i ] [ yes ] += table [ i - 1 ] [ yes - 1 ] * keep . get ( i - 1 ) ; } if ( table [ K ] [ K / 2 ] > ans ) ans = table [ K ] [ K / 2 ] ; } }
import java . util . * ; import java . io . * ; public class B { static int N ; static double ans ; public static void main ( String ... orange ) throws Exception { Scanner input = new Scanner ( System . in ) ; int numCases = input . nextInt ( ) ; for ( int n = 0 ; n < numCases ; n ++ ) { N = input . nextInt ( ) ; int K = input . nextInt ( ) ; double [ ] ps = new double [ N ] ; for ( int i = 0 ; i < N ; i ++ ) ps [ i ] = input . nextDouble ( ) ; ans = 0 ; solve ( new ArrayList < Double > ( ) , ps , K , 0 ) ; System . out . printf ( " Case ▁ # % d : ▁ " , n + 1 ) ; System . out . println ( ans ) ; } } static void solve ( List < Double > keep , double [ ] ps , int K , int index ) { if ( index == ps . length ) { if ( keep . size ( ) == K ) check ( keep , K ) ; return ; } solve ( keep , ps , K , index + 1 ) ; keep . add ( ps [ index ] ) ; solve ( keep , ps , K , index + 1 ) ; keep . remove ( keep . size ( ) - 1 ) ; } static void check ( List < Double > keep , int K ) { double [ ] [ ] table = new double [ K + 1 ] [ K + 1 ] ; table [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) for ( int yes = 0 ; yes <= i ; yes ++ ) { table [ i ] [ yes ] = table [ i - 1 ] [ yes ] * ( 1 - keep . get ( i - 1 ) ) ; if ( yes > 0 ) table [ i ] [ yes ] += table [ i - 1 ] [ yes - 1 ] * keep . get ( i - 1 ) ; } if ( table [ K ] [ K / 2 ] > ans ) ans = table [ K ] [ K / 2 ] ; } }
import java . util . * ; import java . io . * ; public class B { static int N ; static double ans ; public static void main ( String ... orange ) throws Exception { Scanner input = new Scanner ( System . in ) ; int numCases = input . nextInt ( ) ; for ( int n = 0 ; n < numCases ; n ++ ) { N = input . nextInt ( ) ; int K = input . nextInt ( ) ; double [ ] ps = new double [ N ] ; for ( int i = 0 ; i < N ; i ++ ) ps [ i ] = input . nextDouble ( ) ; ans = 0 ; solve ( new ArrayList < Double > ( ) , ps , K , 0 ) ; System . out . printf ( " Case ▁ # % d : ▁ " , n + 1 ) ; System . out . println ( ans ) ; } } static void solve ( List < Double > keep , double [ ] ps , int K , int index ) { if ( index == ps . length ) { if ( keep . size ( ) == K ) check ( keep , K ) ; return ; } solve ( keep , ps , K , index + 1 ) ; keep . add ( ps [ index ] ) ; solve ( keep , ps , K , index + 1 ) ; keep . remove ( keep . size ( ) - 1 ) ; } static void check ( List < Double > keep , int K ) { double [ ] [ ] table = new double [ K + 1 ] [ K + 1 ] ; table [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) for ( int yes = 0 ; yes <= i ; yes ++ ) { table [ i ] [ yes ] = table [ i - 1 ] [ yes ] * ( 1 - keep . get ( i - 1 ) ) ; if ( yes > 0 ) table [ i ] [ yes ] += table [ i - 1 ] [ yes - 1 ] * keep . get ( i - 1 ) ; } if ( table [ K ] [ K / 2 ] > ans ) ans = table [ K ] [ K / 2 ] ; } }
import java . util . * ; import java . io . * ; public class B { static int N ; static double ans ; public static void main ( String ... orange ) throws Exception { Scanner input = new Scanner ( System . in ) ; int numCases = input . nextInt ( ) ; for ( int n = 0 ; n < numCases ; n ++ ) { N = input . nextInt ( ) ; int K = input . nextInt ( ) ; double [ ] ps = new double [ N ] ; for ( int i = 0 ; i < N ; i ++ ) ps [ i ] = input . nextDouble ( ) ; ans = 0 ; solve ( new ArrayList < Double > ( ) , ps , K , 0 ) ; System . out . printf ( " Case ▁ # % d : ▁ " , n + 1 ) ; System . out . println ( ans ) ; } } static void solve ( List < Double > keep , double [ ] ps , int K , int index ) { if ( index == ps . length ) { if ( keep . size ( ) == K ) check ( keep , K ) ; return ; } solve ( keep , ps , K , index + 1 ) ; keep . add ( ps [ index ] ) ; solve ( keep , ps , K , index + 1 ) ; keep . remove ( keep . size ( ) - 1 ) ; } static void check ( List < Double > keep , int K ) { double [ ] [ ] table = new double [ K + 1 ] [ K + 1 ] ; table [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; i ++ ) for ( int yes = 0 ; yes <= i ; yes ++ ) { table [ i ] [ yes ] = table [ i - 1 ] [ yes ] * ( 1 - keep . get ( i - 1 ) ) ; if ( yes > 0 ) table [ i ] [ yes ] += table [ i - 1 ] [ yes - 1 ] * keep . get ( i - 1 ) ; } if ( table [ K ] [ K / 2 ] > ans ) ans = table [ K ] [ K / 2 ] ; } }
import java . util . Arrays ; import java . util . Scanner ; public class B { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { System . out . print ( " Case ▁ # " + i + " : ▁ " ) ; System . out . printf ( " % .9f \n " , solve ( ) ) ; } } static double solve ( ) { int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; double [ ] Pt = new double [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { Pt [ i ] = sc . nextDouble ( ) ; } Arrays . sort ( Pt ) ; double [ ] P = new double [ K ] ; double ans = 0 ; for ( int u = 0 ; u <= K ; ++ u ) { for ( int i = 0 ; i < u ; ++ i ) { P [ i ] = Pt [ i ] ; } for ( int i = u ; i < K ; ++ i ) { P [ i ] = Pt [ N - 1 - ( i - u ) ] ; } double [ ] [ ] dp = new double [ K + 1 ] [ K + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { if ( j == 0 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) + dp [ i - 1 ] [ j - 1 ] * P [ i - 1 ] ) ; } } } ans = Math . max ( ans , dp [ K ] [ K / 2 ] ) ; } return ans ; } }
import java . util . Arrays ; import java . util . Scanner ; public class B { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { System . out . print ( " Case ▁ # " + i + " : ▁ " ) ; System . out . printf ( " % .9f \n " , solve ( ) ) ; } } static double solve ( ) { int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; double [ ] Pt = new double [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { Pt [ i ] = sc . nextDouble ( ) ; } Arrays . sort ( Pt ) ; double [ ] P = new double [ K ] ; double ans = 0 ; for ( int u = 0 ; u <= K ; ++ u ) { for ( int i = 0 ; i < u ; ++ i ) { P [ i ] = Pt [ i ] ; } for ( int i = u ; i < K ; ++ i ) { P [ i ] = Pt [ N - 1 - ( i - u ) ] ; } double [ ] [ ] dp = new double [ K + 1 ] [ K + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { if ( j == 0 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) + dp [ i - 1 ] [ j - 1 ] * P [ i - 1 ] ) ; } } } ans = Math . max ( ans , dp [ K ] [ K / 2 ] ) ; } return ans ; } }
import java . util . Arrays ; import java . util . Scanner ; public class B { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { System . out . print ( " Case ▁ # " + i + " : ▁ " ) ; System . out . printf ( " % .9f \n " , solve ( ) ) ; } } static double solve ( ) { int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; double [ ] Pt = new double [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { Pt [ i ] = sc . nextDouble ( ) ; } Arrays . sort ( Pt ) ; double [ ] P = new double [ K ] ; double ans = 0 ; for ( int u = 0 ; u <= K ; ++ u ) { for ( int i = 0 ; i < u ; ++ i ) { P [ i ] = Pt [ i ] ; } for ( int i = u ; i < K ; ++ i ) { P [ i ] = Pt [ N - 1 - ( i - u ) ] ; } double [ ] [ ] dp = new double [ K + 1 ] [ K + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { if ( j == 0 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) + dp [ i - 1 ] [ j - 1 ] * P [ i - 1 ] ) ; } } } ans = Math . max ( ans , dp [ K ] [ K / 2 ] ) ; } return ans ; } }
import java . util . Arrays ; import java . util . Scanner ; public class B { static Scanner sc = new Scanner ( System . in ) ; public static void main ( String [ ] args ) { int T = sc . nextInt ( ) ; for ( int i = 1 ; i <= T ; ++ i ) { System . out . print ( " Case ▁ # " + i + " : ▁ " ) ; System . out . printf ( " % .9f \n " , solve ( ) ) ; } } static double solve ( ) { int N = sc . nextInt ( ) ; int K = sc . nextInt ( ) ; double [ ] Pt = new double [ N ] ; for ( int i = 0 ; i < N ; ++ i ) { Pt [ i ] = sc . nextDouble ( ) ; } Arrays . sort ( Pt ) ; double [ ] P = new double [ K ] ; double ans = 0 ; for ( int u = 0 ; u <= K ; ++ u ) { for ( int i = 0 ; i < u ; ++ i ) { P [ i ] = Pt [ i ] ; } for ( int i = u ; i < K ; ++ i ) { P [ i ] = Pt [ N - 1 - ( i - u ) ] ; } double [ ] [ ] dp = new double [ K + 1 ] [ K + 1 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { if ( j == 0 ) { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) ) ; } else { dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] * ( 1 - P [ i - 1 ] ) + dp [ i - 1 ] [ j - 1 ] * P [ i - 1 ] ) ; } } } ans = Math . max ( ans , dp [ K ] [ K / 2 ] ) ; } return ans ; } }
public class GFG { static int findElement ( int arr [ ] , int size ) { int right_mul = 1 , left_mul = 1 ; for ( int i = 1 ; i < size ; i ++ ) right_mul *= arr [ i ] ; for ( int i = 0 , j = 1 ; j < size ; i ++ , j ++ ) { right_mul /= arr [ j ] ; left_mul *= arr [ i ] ; if ( left_mul == right_mul ) return arr [ i + 1 ] ; } return - 1 ; } public static void main ( String args [ ] ) { int arr [ ] = { 2 , 3 , 4 , 1 , 4 , 6 } ; int size = arr . length ; System . out . println ( findElement ( arr , size ) ) ; } }
import java . io . * ; public class GFG { static int NumberOfSolutions ( int x , int y , int z , int n ) { int ans = 0 ; for ( int i = 0 ; i <= x ; i ++ ) { for ( int j = 0 ; j <= y ; j ++ ) { int temp = n - i - j ; if ( temp >= 0 ) { temp = Math . min ( temp , z ) ; ans += temp + 1 ; } } } return ans ; } public static void main ( String [ ] args ) { int x = 1 , y = 2 , z = 3 , n = 4 ; System . out . println ( NumberOfSolutions ( x , y , z , n ) ) ; } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Random ; import java . util . StringTokenizer ; public class B { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int n = fs . nextInt ( ) ; int [ ] maxes = new int [ 1_000_001 ] ; int [ ] mins = new int [ 1_000_001 ] ; long withAscent = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = fs . nextInt ( ) ; int minSeen = Integer . MAX_VALUE , maxSeen = - 1 ; boolean ascent = false ; for ( int j = 0 ; j < l ; j ++ ) { int next = fs . nextInt ( ) ; if ( next > minSeen ) { ascent = true ; } minSeen = Math . min ( minSeen , next ) ; maxSeen = Math . max ( maxSeen , next ) ; } if ( ascent ) { withAscent ++ ; } else { maxes [ maxSeen ] ++ ; mins [ minSeen ] ++ ; } } long ans = 0 ; ans += withAscent * n + ( n - withAscent ) * withAscent ; long maxSeen = 0 ; for ( int i = maxes . length - 1 ; i >= 0 ; i -- ) { ans += mins [ i ] * maxSeen ; maxSeen += maxes [ i ] ; } System . out . println ( ans ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreElements ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Random ; import java . util . StringTokenizer ; public class B { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int n = fs . nextInt ( ) ; int [ ] maxes = new int [ 1_000_001 ] ; int [ ] mins = new int [ 1_000_001 ] ; long withAscent = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = fs . nextInt ( ) ; int minSeen = Integer . MAX_VALUE , maxSeen = - 1 ; boolean ascent = false ; for ( int j = 0 ; j < l ; j ++ ) { int next = fs . nextInt ( ) ; if ( next > minSeen ) { ascent = true ; } minSeen = Math . min ( minSeen , next ) ; maxSeen = Math . max ( maxSeen , next ) ; } if ( ascent ) { withAscent ++ ; } else { maxes [ maxSeen ] ++ ; mins [ minSeen ] ++ ; } } long ans = 0 ; ans += withAscent * n + ( n - withAscent ) * withAscent ; long maxSeen = 0 ; for ( int i = maxes . length - 1 ; i >= 0 ; i -- ) { ans += mins [ i ] * maxSeen ; maxSeen += maxes [ i ] ; } System . out . println ( ans ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreElements ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Random ; import java . util . StringTokenizer ; public class B { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int n = fs . nextInt ( ) ; int [ ] maxes = new int [ 1_000_001 ] ; int [ ] mins = new int [ 1_000_001 ] ; long withAscent = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = fs . nextInt ( ) ; int minSeen = Integer . MAX_VALUE , maxSeen = - 1 ; boolean ascent = false ; for ( int j = 0 ; j < l ; j ++ ) { int next = fs . nextInt ( ) ; if ( next > minSeen ) { ascent = true ; } minSeen = Math . min ( minSeen , next ) ; maxSeen = Math . max ( maxSeen , next ) ; } if ( ascent ) { withAscent ++ ; } else { maxes [ maxSeen ] ++ ; mins [ minSeen ] ++ ; } } long ans = 0 ; ans += withAscent * n + ( n - withAscent ) * withAscent ; long maxSeen = 0 ; for ( int i = maxes . length - 1 ; i >= 0 ; i -- ) { ans += mins [ i ] * maxSeen ; maxSeen += maxes [ i ] ; } System . out . println ( ans ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreElements ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }
import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Random ; import java . util . StringTokenizer ; public class B { public static void main ( String [ ] args ) { FastScanner fs = new FastScanner ( ) ; int n = fs . nextInt ( ) ; int [ ] maxes = new int [ 1_000_001 ] ; int [ ] mins = new int [ 1_000_001 ] ; long withAscent = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int l = fs . nextInt ( ) ; int minSeen = Integer . MAX_VALUE , maxSeen = - 1 ; boolean ascent = false ; for ( int j = 0 ; j < l ; j ++ ) { int next = fs . nextInt ( ) ; if ( next > minSeen ) { ascent = true ; } minSeen = Math . min ( minSeen , next ) ; maxSeen = Math . max ( maxSeen , next ) ; } if ( ascent ) { withAscent ++ ; } else { maxes [ maxSeen ] ++ ; mins [ minSeen ] ++ ; } } long ans = 0 ; ans += withAscent * n + ( n - withAscent ) * withAscent ; long maxSeen = 0 ; for ( int i = maxes . length - 1 ; i >= 0 ; i -- ) { ans += mins [ i ] * maxSeen ; maxSeen += maxes [ i ] ; } System . out . println ( ans ) ; } static class FastScanner { BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in ) ) ; StringTokenizer st = new StringTokenizer ( " " ) ; String next ( ) { while ( ! st . hasMoreElements ( ) ) try { st = new StringTokenizer ( br . readLine ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return st . nextToken ( ) ; } int nextInt ( ) { return Integer . parseInt ( next ( ) ) ; } } }